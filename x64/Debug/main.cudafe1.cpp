#pragma section("__nv_managed_data__")
static char __nv_inited_managed_rt = 0; static void **__nv_fatbinhandle_for_managed_rt; static void __nv_save_fatbinhandle_for_managed_rt(void **in){__nv_fatbinhandle_for_managed_rt = in;} static char __nv_init_managed_rt_with_module(void **); static inline void __nv_init_managed_rt(void) { __nv_inited_managed_rt = (__nv_inited_managed_rt ? __nv_inited_managed_rt                 : __nv_init_managed_rt_with_module(__nv_fatbinhandle_for_managed_rt));}
#line 1 "D:\\Projekty\\RayTracer\\main.cu"
#define __nv_is_extended_device_lambda_closure_type(X) false
#define __nv_is_extended_host_device_lambda_closure_type(X) false
#if defined(__nv_is_extended_device_lambda_closure_type) && defined(__nv_is_extended_host_device_lambda_closure_type)
#endif

#line 1
#line 67 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\cuda_runtime.h"
#pragma warning(push)
#pragma warning(disable: 4820)
#line 708 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\sal.h"
#pragma region Input Buffer SAL 1 compatibility macros
#line 1472
#pragma endregion Input Buffer SAL 1 compatibility macros
#line 2361 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\sal.h"
extern "C" {
#line 2971 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\sal.h"
}
#line 22 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\concurrencysal.h"
extern "C" {
#line 391 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\concurrencysal.h"
}
#line 15 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\vadefs.h"
#pragma pack ( push, 8 )
#line 47 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\vadefs.h"
#pragma warning(push)
#pragma warning(disable: 4514 4820 )
#line 51
extern "C" {
#line 61 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\vadefs.h"
typedef unsigned __int64 uintptr_t; 
#line 72 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\vadefs.h"
typedef char *va_list; 
#line 155 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\vadefs.h"
void __cdecl __va_start(va_list *, ...); 
#line 167 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\vadefs.h"
}
#line 171 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\vadefs.h"
extern "C++" {
#line 173
template< class _Ty> 
#line 174
struct __vcrt_va_list_is_reference { 
#line 176
enum: bool { __the_value}; 
#line 177
}; 
#line 179
template< class _Ty> 
#line 180
struct __vcrt_va_list_is_reference< _Ty &>  { 
#line 182
enum: bool { __the_value = '\001'}; 
#line 183
}; 
#line 185
template< class _Ty> 
#line 186
struct __vcrt_va_list_is_reference< _Ty &&>  { 
#line 188
enum: bool { __the_value = '\001'}; 
#line 189
}; 
#line 191
template< class _Ty> 
#line 192
struct __vcrt_assert_va_start_is_not_reference { 
#line 194
static_assert((!__vcrt_va_list_is_reference< _Ty> ::__the_value), "va_start argument must not have reference type and must not be parenthesized");
#line 196
}; 
#line 197
}
#line 207 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\vadefs.h"
#pragma warning(pop)
#pragma pack ( pop )
#line 60 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\vcruntime.h"
#pragma warning(push)
#pragma warning(disable: 4514 4820 )
#line 96 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\vcruntime.h"
__pragma( pack ( push, 8 )) extern "C" {
#line 193 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\vcruntime.h"
typedef unsigned __int64 size_t; 
#if !defined(__CUDA_INCLUDE_COMPILER_INTERNAL_HEADERS__)
#define __CUDA_INCLUDE_COMPILER_INTERNAL_HEADERS__
#endif
#include "crt/host_runtime.h"
#line 194
typedef __int64 ptrdiff_t; 
#line 195
typedef __int64 intptr_t; 
#line 203 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\vcruntime.h"
typedef bool __vcrt_bool; 
#line 250 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\vcruntime.h"
extern "C++" {
#line 252
template< class _CountofType, size_t _SizeOfArray> char (*__countof_helper(__unaligned _CountofType (& _Array)[_SizeOfArray]))[_SizeOfArray]; 
#line 256
}
#line 377 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\vcruntime.h"
void __cdecl __security_init_cookie(); 
#line 386 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\vcruntime.h"
void __cdecl __security_check_cookie(uintptr_t _StackCookie); 
#line 387
__declspec(noreturn) void __cdecl __report_gsfailure(uintptr_t _StackCookie); 
#line 391 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\vcruntime.h"
extern uintptr_t __security_cookie; 
#line 399 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\vcruntime.h"
}__pragma( pack ( pop )) 
#line 401
#pragma warning(pop)
#line 121 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt.h"
#pragma warning(push)
#pragma warning(disable: 4324 4514 4574 4710 4793 4820 4995 4996 28719 28726 28727 )
#line 125
__pragma( pack ( push, 8 )) extern "C" {
#line 254 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt.h"
extern "C++" {
#line 256
template< bool _Enable, class _Ty> struct _CrtEnableIf; 
#line 259
template< class _Ty> 
#line 260
struct _CrtEnableIf< true, _Ty>  { 
#line 262
typedef _Ty _Type; 
#line 263
}; 
#line 264
}
#line 268 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt.h"
typedef bool __crt_bool; 
#line 362 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt.h"
__declspec(dllimport) void __cdecl _invalid_parameter(const __wchar_t *, const __wchar_t *, const __wchar_t *, unsigned, uintptr_t); 
#line 371 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt.h"
__declspec(dllimport) void __cdecl _invalid_parameter_noinfo(); 
#line 372
__declspec(dllimport) __declspec(noreturn) void __cdecl _invalid_parameter_noinfo_noreturn(); 
#line 374
__declspec(noreturn) 
#line 375
__declspec(dllimport) void __cdecl _invoke_watson(const __wchar_t * _Expression, const __wchar_t * _FunctionName, const __wchar_t * _FileName, unsigned _LineNo, uintptr_t _Reserved); 
#line 604 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt.h"
typedef int errno_t; 
#line 605
typedef unsigned short wint_t; 
#line 606
typedef unsigned short wctype_t; 
#line 607
typedef long __time32_t; 
#line 608
typedef __int64 __time64_t; 
#line 615
typedef 
#line 610
struct __crt_locale_data_public { 
#line 612
const unsigned short *_locale_pctype; 
#line 613
int _locale_mb_cur_max; 
#line 614
unsigned _locale_lc_codepage; 
#line 615
} __crt_locale_data_public; 
#line 621
typedef 
#line 617
struct __crt_locale_pointers { 
#line 619
struct __crt_locale_data *locinfo; 
#line 620
struct __crt_multibyte_data *mbcinfo; 
#line 621
} __crt_locale_pointers; 
#line 623
typedef __crt_locale_pointers *_locale_t; 
#line 629
typedef 
#line 625
struct _Mbstatet { 
#line 627
unsigned long _Wchar; 
#line 628
unsigned short _Byte, _State; 
#line 629
} _Mbstatet; 
#line 631
typedef _Mbstatet mbstate_t; 
#line 645 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt.h"
typedef __time64_t time_t; 
#line 655 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt.h"
typedef size_t rsize_t; 
#line 2072 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt.h"
}__pragma( pack ( pop )) 
#line 2075
#pragma warning(pop)
#line 68 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\device_types.h"
#if 0
#line 68
enum cudaRoundMode { 
#line 70
cudaRoundNearest, 
#line 71
cudaRoundZero, 
#line 72
cudaRoundPosInf, 
#line 73
cudaRoundMinInf
#line 74
}; 
#endif
#line 100 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\vector_types.h"
#if 0
#line 100
struct char1 { 
#line 102
signed char x; 
#line 103
}; 
#endif
#line 105 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\vector_types.h"
#if 0
#line 105
struct uchar1 { 
#line 107
unsigned char x; 
#line 108
}; 
#endif
#line 111 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\vector_types.h"
#if 0
#line 111
struct __declspec(align(2)) char2 { 
#line 113
signed char x, y; 
#line 114
}; 
#endif
#line 116 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\vector_types.h"
#if 0
#line 116
struct __declspec(align(2)) uchar2 { 
#line 118
unsigned char x, y; 
#line 119
}; 
#endif
#line 121 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\vector_types.h"
#if 0
#line 121
struct char3 { 
#line 123
signed char x, y, z; 
#line 124
}; 
#endif
#line 126 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\vector_types.h"
#if 0
#line 126
struct uchar3 { 
#line 128
unsigned char x, y, z; 
#line 129
}; 
#endif
#line 131 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\vector_types.h"
#if 0
#line 131
struct __declspec(align(4)) char4 { 
#line 133
signed char x, y, z, w; 
#line 134
}; 
#endif
#line 136 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\vector_types.h"
#if 0
#line 136
struct __declspec(align(4)) uchar4 { 
#line 138
unsigned char x, y, z, w; 
#line 139
}; 
#endif
#line 141 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\vector_types.h"
#if 0
#line 141
struct short1 { 
#line 143
short x; 
#line 144
}; 
#endif
#line 146 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\vector_types.h"
#if 0
#line 146
struct ushort1 { 
#line 148
unsigned short x; 
#line 149
}; 
#endif
#line 151 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\vector_types.h"
#if 0
#line 151
struct __declspec(align(4)) short2 { 
#line 153
short x, y; 
#line 154
}; 
#endif
#line 156 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\vector_types.h"
#if 0
#line 156
struct __declspec(align(4)) ushort2 { 
#line 158
unsigned short x, y; 
#line 159
}; 
#endif
#line 161 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\vector_types.h"
#if 0
#line 161
struct short3 { 
#line 163
short x, y, z; 
#line 164
}; 
#endif
#line 166 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\vector_types.h"
#if 0
#line 166
struct ushort3 { 
#line 168
unsigned short x, y, z; 
#line 169
}; 
#endif
#line 171 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\vector_types.h"
#if 0
#line 171
struct __declspec(align(8)) short4 { short x; short y; short z; short w; }; 
#endif
#line 172 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\vector_types.h"
#if 0
#line 172
struct __declspec(align(8)) ushort4 { unsigned short x; unsigned short y; unsigned short z; unsigned short w; }; 
#endif
#line 174 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\vector_types.h"
#if 0
#line 174
struct int1 { 
#line 176
int x; 
#line 177
}; 
#endif
#line 179 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\vector_types.h"
#if 0
#line 179
struct uint1 { 
#line 181
unsigned x; 
#line 182
}; 
#endif
#line 184 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\vector_types.h"
#if 0
#line 184
struct __declspec(align(8)) int2 { int x; int y; }; 
#endif
#line 185 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\vector_types.h"
#if 0
#line 185
struct __declspec(align(8)) uint2 { unsigned x; unsigned y; }; 
#endif
#line 187 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\vector_types.h"
#if 0
#line 187
struct int3 { 
#line 189
int x, y, z; 
#line 190
}; 
#endif
#line 192 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\vector_types.h"
#if 0
#line 192
struct uint3 { 
#line 194
unsigned x, y, z; 
#line 195
}; 
#endif
#line 197 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\vector_types.h"
#if 0
#line 197
struct __declspec(align(16)) int4 { 
#line 199
int x, y, z, w; 
#line 200
}; 
#endif
#line 202 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\vector_types.h"
#if 0
#line 202
struct __declspec(align(16)) uint4 { 
#line 204
unsigned x, y, z, w; 
#line 205
}; 
#endif
#line 207 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\vector_types.h"
#if 0
#line 207
struct long1 { 
#line 209
long x; 
#line 210
}; 
#endif
#line 212 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\vector_types.h"
#if 0
#line 212
struct ulong1 { 
#line 214
unsigned long x; 
#line 215
}; 
#endif
#line 218 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\vector_types.h"
#if 0
#line 218
struct __declspec(align(8)) long2 { long x; long y; }; 
#endif
#line 219 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\vector_types.h"
#if 0
#line 219
struct __declspec(align(8)) ulong2 { unsigned long x; unsigned long y; }; 
#endif
#line 234 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\vector_types.h"
#if 0
#line 234
struct long3 { 
#line 236
long x, y, z; 
#line 237
}; 
#endif
#line 239 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\vector_types.h"
#if 0
#line 239
struct ulong3 { 
#line 241
unsigned long x, y, z; 
#line 242
}; 
#endif
#line 244 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\vector_types.h"
#if 0
#line 244
struct __declspec(align(16)) long4 { 
#line 246
long x, y, z, w; 
#line 247
}; 
#endif
#line 249 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\vector_types.h"
#if 0
#line 249
struct __declspec(align(16)) ulong4 { 
#line 251
unsigned long x, y, z, w; 
#line 252
}; 
#endif
#line 254 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\vector_types.h"
#if 0
#line 254
struct float1 { 
#line 256
float x; 
#line 257
}; 
#endif
#line 276 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\vector_types.h"
#if 0
#line 276
struct __declspec(align(8)) float2 { float x; float y; }; 
#endif
#line 281 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\vector_types.h"
#if 0
#line 281
struct float3 { 
#line 283
float x, y, z; 
#line 284
}; 
#endif
#line 286 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\vector_types.h"
#if 0
#line 286
struct __declspec(align(16)) float4 { 
#line 288
float x, y, z, w; 
#line 289
}; 
#endif
#line 291 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\vector_types.h"
#if 0
#line 291
struct longlong1 { 
#line 293
__int64 x; 
#line 294
}; 
#endif
#line 296 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\vector_types.h"
#if 0
#line 296
struct ulonglong1 { 
#line 298
unsigned __int64 x; 
#line 299
}; 
#endif
#line 301 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\vector_types.h"
#if 0
#line 301
struct __declspec(align(16)) longlong2 { 
#line 303
__int64 x, y; 
#line 304
}; 
#endif
#line 306 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\vector_types.h"
#if 0
#line 306
struct __declspec(align(16)) ulonglong2 { 
#line 308
unsigned __int64 x, y; 
#line 309
}; 
#endif
#line 311 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\vector_types.h"
#if 0
#line 311
struct longlong3 { 
#line 313
__int64 x, y, z; 
#line 314
}; 
#endif
#line 316 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\vector_types.h"
#if 0
#line 316
struct ulonglong3 { 
#line 318
unsigned __int64 x, y, z; 
#line 319
}; 
#endif
#line 321 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\vector_types.h"
#if 0
#line 321
struct __declspec(align(16)) longlong4 { 
#line 323
__int64 x, y, z, w; 
#line 324
}; 
#endif
#line 326 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\vector_types.h"
#if 0
#line 326
struct __declspec(align(16)) ulonglong4 { 
#line 328
unsigned __int64 x, y, z, w; 
#line 329
}; 
#endif
#line 331 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\vector_types.h"
#if 0
#line 331
struct double1 { 
#line 333
double x; 
#line 334
}; 
#endif
#line 336 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\vector_types.h"
#if 0
#line 336
struct __declspec(align(16)) double2 { 
#line 338
double x, y; 
#line 339
}; 
#endif
#line 341 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\vector_types.h"
#if 0
#line 341
struct double3 { 
#line 343
double x, y, z; 
#line 344
}; 
#endif
#line 346 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\vector_types.h"
#if 0
#line 346
struct __declspec(align(16)) double4 { 
#line 348
double x, y, z, w; 
#line 349
}; 
#endif
#line 363 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\vector_types.h"
#if 0
typedef char1 
#line 363
char1; 
#endif
#line 364 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\vector_types.h"
#if 0
typedef uchar1 
#line 364
uchar1; 
#endif
#line 365 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\vector_types.h"
#if 0
typedef char2 
#line 365
char2; 
#endif
#line 366 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\vector_types.h"
#if 0
typedef uchar2 
#line 366
uchar2; 
#endif
#line 367 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\vector_types.h"
#if 0
typedef char3 
#line 367
char3; 
#endif
#line 368 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\vector_types.h"
#if 0
typedef uchar3 
#line 368
uchar3; 
#endif
#line 369 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\vector_types.h"
#if 0
typedef char4 
#line 369
char4; 
#endif
#line 370 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\vector_types.h"
#if 0
typedef uchar4 
#line 370
uchar4; 
#endif
#line 371 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\vector_types.h"
#if 0
typedef short1 
#line 371
short1; 
#endif
#line 372 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\vector_types.h"
#if 0
typedef ushort1 
#line 372
ushort1; 
#endif
#line 373 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\vector_types.h"
#if 0
typedef short2 
#line 373
short2; 
#endif
#line 374 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\vector_types.h"
#if 0
typedef ushort2 
#line 374
ushort2; 
#endif
#line 375 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\vector_types.h"
#if 0
typedef short3 
#line 375
short3; 
#endif
#line 376 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\vector_types.h"
#if 0
typedef ushort3 
#line 376
ushort3; 
#endif
#line 377 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\vector_types.h"
#if 0
typedef short4 
#line 377
short4; 
#endif
#line 378 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\vector_types.h"
#if 0
typedef ushort4 
#line 378
ushort4; 
#endif
#line 379 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\vector_types.h"
#if 0
typedef int1 
#line 379
int1; 
#endif
#line 380 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\vector_types.h"
#if 0
typedef uint1 
#line 380
uint1; 
#endif
#line 381 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\vector_types.h"
#if 0
typedef int2 
#line 381
int2; 
#endif
#line 382 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\vector_types.h"
#if 0
typedef uint2 
#line 382
uint2; 
#endif
#line 383 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\vector_types.h"
#if 0
typedef int3 
#line 383
int3; 
#endif
#line 384 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\vector_types.h"
#if 0
typedef uint3 
#line 384
uint3; 
#endif
#line 385 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\vector_types.h"
#if 0
typedef int4 
#line 385
int4; 
#endif
#line 386 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\vector_types.h"
#if 0
typedef uint4 
#line 386
uint4; 
#endif
#line 387 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\vector_types.h"
#if 0
typedef long1 
#line 387
long1; 
#endif
#line 388 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\vector_types.h"
#if 0
typedef ulong1 
#line 388
ulong1; 
#endif
#line 389 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\vector_types.h"
#if 0
typedef long2 
#line 389
long2; 
#endif
#line 390 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\vector_types.h"
#if 0
typedef ulong2 
#line 390
ulong2; 
#endif
#line 391 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\vector_types.h"
#if 0
typedef long3 
#line 391
long3; 
#endif
#line 392 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\vector_types.h"
#if 0
typedef ulong3 
#line 392
ulong3; 
#endif
#line 393 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\vector_types.h"
#if 0
typedef long4 
#line 393
long4; 
#endif
#line 394 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\vector_types.h"
#if 0
typedef ulong4 
#line 394
ulong4; 
#endif
#line 395 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\vector_types.h"
#if 0
typedef float1 
#line 395
float1; 
#endif
#line 396 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\vector_types.h"
#if 0
typedef float2 
#line 396
float2; 
#endif
#line 397 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\vector_types.h"
#if 0
typedef float3 
#line 397
float3; 
#endif
#line 398 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\vector_types.h"
#if 0
typedef float4 
#line 398
float4; 
#endif
#line 399 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\vector_types.h"
#if 0
typedef longlong1 
#line 399
longlong1; 
#endif
#line 400 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\vector_types.h"
#if 0
typedef ulonglong1 
#line 400
ulonglong1; 
#endif
#line 401 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\vector_types.h"
#if 0
typedef longlong2 
#line 401
longlong2; 
#endif
#line 402 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\vector_types.h"
#if 0
typedef ulonglong2 
#line 402
ulonglong2; 
#endif
#line 403 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\vector_types.h"
#if 0
typedef longlong3 
#line 403
longlong3; 
#endif
#line 404 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\vector_types.h"
#if 0
typedef ulonglong3 
#line 404
ulonglong3; 
#endif
#line 405 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\vector_types.h"
#if 0
typedef longlong4 
#line 405
longlong4; 
#endif
#line 406 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\vector_types.h"
#if 0
typedef ulonglong4 
#line 406
ulonglong4; 
#endif
#line 407 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\vector_types.h"
#if 0
typedef double1 
#line 407
double1; 
#endif
#line 408 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\vector_types.h"
#if 0
typedef double2 
#line 408
double2; 
#endif
#line 409 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\vector_types.h"
#if 0
typedef double3 
#line 409
double3; 
#endif
#line 410 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\vector_types.h"
#if 0
typedef double4 
#line 410
double4; 
#endif
#line 418 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\vector_types.h"
#if 0
#line 418
struct dim3 { 
#line 420
unsigned x, y, z; 
#line 432 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\vector_types.h"
}; 
#endif
#line 434 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\vector_types.h"
#if 0
typedef dim3 
#line 434
dim3; 
#endif
#line 13 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\limits.h"
#pragma warning(push)
#pragma warning(disable: 4514 4820 )
#line 16
__pragma( pack ( push, 8 )) extern "C" {
#line 76 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\limits.h"
}__pragma( pack ( pop )) 
#line 78
#pragma warning(pop)
#line 14 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\stddef.h"
#pragma warning(push)
#pragma warning(disable: 4324 4514 4574 4710 4793 4820 4995 4996 28719 28726 28727 )
#line 18
__pragma( pack ( push, 8 )) extern "C" {
#line 23
namespace std { 
#line 25
typedef decltype(nullptr) nullptr_t; 
#line 26
}
#line 28
using std::nullptr_t;
#line 35 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\stddef.h"
__declspec(dllimport) int *__cdecl _errno(); 
#line 38
__declspec(dllimport) errno_t __cdecl _set_errno(int _Value); 
#line 39
__declspec(dllimport) errno_t __cdecl _get_errno(int * _Value); 
#line 55 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\stddef.h"
__declspec(dllimport) extern unsigned long __cdecl __threadid(); 
#line 57
__declspec(dllimport) extern uintptr_t __cdecl __threadhandle(); 
#line 61
}__pragma( pack ( pop )) 
#line 63
#pragma warning(pop)
#line 203 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\driver_types.h"
#if 0
#line 203
enum cudaError { 
#line 210
cudaSuccess, 
#line 216
cudaErrorInvalidValue, 
#line 222
cudaErrorMemoryAllocation, 
#line 228
cudaErrorInitializationError, 
#line 235
cudaErrorCudartUnloading, 
#line 242
cudaErrorProfilerDisabled, 
#line 250
cudaErrorProfilerNotInitialized, 
#line 257
cudaErrorProfilerAlreadyStarted, 
#line 264
cudaErrorProfilerAlreadyStopped, 
#line 273
cudaErrorInvalidConfiguration, 
#line 279
cudaErrorInvalidPitchValue = 12, 
#line 285
cudaErrorInvalidSymbol, 
#line 293
cudaErrorInvalidHostPointer = 16, 
#line 301
cudaErrorInvalidDevicePointer, 
#line 307
cudaErrorInvalidTexture, 
#line 313
cudaErrorInvalidTextureBinding, 
#line 320
cudaErrorInvalidChannelDescriptor, 
#line 326
cudaErrorInvalidMemcpyDirection, 
#line 336
cudaErrorAddressOfConstant, 
#line 345
cudaErrorTextureFetchFailed, 
#line 354
cudaErrorTextureNotBound, 
#line 363
cudaErrorSynchronizationError, 
#line 369
cudaErrorInvalidFilterSetting, 
#line 375
cudaErrorInvalidNormSetting, 
#line 383
cudaErrorMixedDeviceExecution, 
#line 391
cudaErrorNotYetImplemented = 31, 
#line 400
cudaErrorMemoryValueTooLarge, 
#line 407
cudaErrorStubLibrary = 34, 
#line 414
cudaErrorInsufficientDriver, 
#line 421
cudaErrorCallRequiresNewerDriver, 
#line 427
cudaErrorInvalidSurface, 
#line 433
cudaErrorDuplicateVariableName = 43, 
#line 439
cudaErrorDuplicateTextureName, 
#line 445
cudaErrorDuplicateSurfaceName, 
#line 455
cudaErrorDevicesUnavailable, 
#line 468
cudaErrorIncompatibleDriverContext = 49, 
#line 474
cudaErrorMissingConfiguration = 52, 
#line 483
cudaErrorPriorLaunchFailure, 
#line 490
cudaErrorLaunchMaxDepthExceeded = 65, 
#line 498
cudaErrorLaunchFileScopedTex, 
#line 506
cudaErrorLaunchFileScopedSurf, 
#line 522
cudaErrorSyncDepthExceeded, 
#line 534
cudaErrorLaunchPendingCountExceeded, 
#line 540
cudaErrorInvalidDeviceFunction = 98, 
#line 546
cudaErrorNoDevice = 100, 
#line 553
cudaErrorInvalidDevice, 
#line 558
cudaErrorDeviceNotLicensed, 
#line 567
cudaErrorSoftwareValidityNotEstablished, 
#line 572
cudaErrorStartupFailure = 127, 
#line 577
cudaErrorInvalidKernelImage = 200, 
#line 587
cudaErrorDeviceUninitialized, 
#line 592
cudaErrorMapBufferObjectFailed = 205, 
#line 597
cudaErrorUnmapBufferObjectFailed, 
#line 603
cudaErrorArrayIsMapped, 
#line 608
cudaErrorAlreadyMapped, 
#line 616
cudaErrorNoKernelImageForDevice, 
#line 621
cudaErrorAlreadyAcquired, 
#line 626
cudaErrorNotMapped, 
#line 632
cudaErrorNotMappedAsArray, 
#line 638
cudaErrorNotMappedAsPointer, 
#line 644
cudaErrorECCUncorrectable, 
#line 650
cudaErrorUnsupportedLimit, 
#line 656
cudaErrorDeviceAlreadyInUse, 
#line 662
cudaErrorPeerAccessUnsupported, 
#line 668
cudaErrorInvalidPtx, 
#line 673
cudaErrorInvalidGraphicsContext, 
#line 679
cudaErrorNvlinkUncorrectable, 
#line 686
cudaErrorJitCompilerNotFound, 
#line 693
cudaErrorUnsupportedPtxVersion, 
#line 700
cudaErrorJitCompilationDisabled, 
#line 705
cudaErrorUnsupportedExecAffinity, 
#line 711
cudaErrorUnsupportedDevSideSync, 
#line 716
cudaErrorInvalidSource = 300, 
#line 721
cudaErrorFileNotFound, 
#line 726
cudaErrorSharedObjectSymbolNotFound, 
#line 731
cudaErrorSharedObjectInitFailed, 
#line 736
cudaErrorOperatingSystem, 
#line 743
cudaErrorInvalidResourceHandle = 400, 
#line 749
cudaErrorIllegalState, 
#line 756
cudaErrorSymbolNotFound = 500, 
#line 764
cudaErrorNotReady = 600, 
#line 772
cudaErrorIllegalAddress = 700, 
#line 781
cudaErrorLaunchOutOfResources, 
#line 792
cudaErrorLaunchTimeout, 
#line 798
cudaErrorLaunchIncompatibleTexturing, 
#line 805
cudaErrorPeerAccessAlreadyEnabled, 
#line 812
cudaErrorPeerAccessNotEnabled, 
#line 825
cudaErrorSetOnActiveProcess = 708, 
#line 832
cudaErrorContextIsDestroyed, 
#line 839
cudaErrorAssert, 
#line 846
cudaErrorTooManyPeers, 
#line 852
cudaErrorHostMemoryAlreadyRegistered, 
#line 858
cudaErrorHostMemoryNotRegistered, 
#line 867
cudaErrorHardwareStackError, 
#line 875
cudaErrorIllegalInstruction, 
#line 884
cudaErrorMisalignedAddress, 
#line 895
cudaErrorInvalidAddressSpace, 
#line 903
cudaErrorInvalidPc, 
#line 914
cudaErrorLaunchFailure, 
#line 923
cudaErrorCooperativeLaunchTooLarge, 
#line 928
cudaErrorNotPermitted = 800, 
#line 934
cudaErrorNotSupported, 
#line 943
cudaErrorSystemNotReady, 
#line 950
cudaErrorSystemDriverMismatch, 
#line 959
cudaErrorCompatNotSupportedOnDevice, 
#line 964
cudaErrorMpsConnectionFailed, 
#line 969
cudaErrorMpsRpcFailure, 
#line 975
cudaErrorMpsServerNotReady, 
#line 980
cudaErrorMpsMaxClientsReached, 
#line 985
cudaErrorMpsMaxConnectionsReached, 
#line 990
cudaErrorMpsClientTerminated, 
#line 995
cudaErrorCdpNotSupported, 
#line 1000
cudaErrorCdpVersionMismatch, 
#line 1005
cudaErrorStreamCaptureUnsupported = 900, 
#line 1011
cudaErrorStreamCaptureInvalidated, 
#line 1017
cudaErrorStreamCaptureMerge, 
#line 1022
cudaErrorStreamCaptureUnmatched, 
#line 1028
cudaErrorStreamCaptureUnjoined, 
#line 1035
cudaErrorStreamCaptureIsolation, 
#line 1041
cudaErrorStreamCaptureImplicit, 
#line 1047
cudaErrorCapturedEvent, 
#line 1054
cudaErrorStreamCaptureWrongThread, 
#line 1059
cudaErrorTimeout, 
#line 1065
cudaErrorGraphExecUpdateFailure, 
#line 1075
cudaErrorExternalDevice, 
#line 1081
cudaErrorInvalidClusterSize, 
#line 1086
cudaErrorUnknown = 999, 
#line 1094
cudaErrorApiFailureBase = 10000
#line 1095
}; 
#endif
#line 1100 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\driver_types.h"
#if 0
#line 1100
enum cudaChannelFormatKind { 
#line 1102
cudaChannelFormatKindSigned, 
#line 1103
cudaChannelFormatKindUnsigned, 
#line 1104
cudaChannelFormatKindFloat, 
#line 1105
cudaChannelFormatKindNone, 
#line 1106
cudaChannelFormatKindNV12, 
#line 1107
cudaChannelFormatKindUnsignedNormalized8X1, 
#line 1108
cudaChannelFormatKindUnsignedNormalized8X2, 
#line 1109
cudaChannelFormatKindUnsignedNormalized8X4, 
#line 1110
cudaChannelFormatKindUnsignedNormalized16X1, 
#line 1111
cudaChannelFormatKindUnsignedNormalized16X2, 
#line 1112
cudaChannelFormatKindUnsignedNormalized16X4, 
#line 1113
cudaChannelFormatKindSignedNormalized8X1, 
#line 1114
cudaChannelFormatKindSignedNormalized8X2, 
#line 1115
cudaChannelFormatKindSignedNormalized8X4, 
#line 1116
cudaChannelFormatKindSignedNormalized16X1, 
#line 1117
cudaChannelFormatKindSignedNormalized16X2, 
#line 1118
cudaChannelFormatKindSignedNormalized16X4, 
#line 1119
cudaChannelFormatKindUnsignedBlockCompressed1, 
#line 1120
cudaChannelFormatKindUnsignedBlockCompressed1SRGB, 
#line 1121
cudaChannelFormatKindUnsignedBlockCompressed2, 
#line 1122
cudaChannelFormatKindUnsignedBlockCompressed2SRGB, 
#line 1123
cudaChannelFormatKindUnsignedBlockCompressed3, 
#line 1124
cudaChannelFormatKindUnsignedBlockCompressed3SRGB, 
#line 1125
cudaChannelFormatKindUnsignedBlockCompressed4, 
#line 1126
cudaChannelFormatKindSignedBlockCompressed4, 
#line 1127
cudaChannelFormatKindUnsignedBlockCompressed5, 
#line 1128
cudaChannelFormatKindSignedBlockCompressed5, 
#line 1129
cudaChannelFormatKindUnsignedBlockCompressed6H, 
#line 1130
cudaChannelFormatKindSignedBlockCompressed6H, 
#line 1131
cudaChannelFormatKindUnsignedBlockCompressed7, 
#line 1132
cudaChannelFormatKindUnsignedBlockCompressed7SRGB
#line 1133
}; 
#endif
#line 1138 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\driver_types.h"
#if 0
#line 1138
struct cudaChannelFormatDesc { 
#line 1140
int x; 
#line 1141
int y; 
#line 1142
int z; 
#line 1143
int w; 
#line 1144
cudaChannelFormatKind f; 
#line 1145
}; 
#endif
#line 1150 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\driver_types.h"
typedef struct cudaArray *cudaArray_t; 
#line 1155
typedef const cudaArray *cudaArray_const_t; 
#line 1157
struct cudaArray; 
#line 1162
typedef struct cudaMipmappedArray *cudaMipmappedArray_t; 
#line 1167
typedef const cudaMipmappedArray *cudaMipmappedArray_const_t; 
#line 1169
struct cudaMipmappedArray; 
#line 1179
#if 0
#line 1179
struct cudaArraySparseProperties { 
#line 1180
struct { 
#line 1181
unsigned width; 
#line 1182
unsigned height; 
#line 1183
unsigned depth; 
#line 1184
} tileExtent; 
#line 1185
unsigned miptailFirstLevel; 
#line 1186
unsigned __int64 miptailSize; 
#line 1187
unsigned flags; 
#line 1188
unsigned reserved[4]; 
#line 1189
}; 
#endif
#line 1194 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\driver_types.h"
#if 0
#line 1194
struct cudaArrayMemoryRequirements { 
#line 1195
size_t size; 
#line 1196
size_t alignment; 
#line 1197
unsigned reserved[4]; 
#line 1198
}; 
#endif
#line 1203 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\driver_types.h"
#if 0
#line 1203
enum cudaMemoryType { 
#line 1205
cudaMemoryTypeUnregistered, 
#line 1206
cudaMemoryTypeHost, 
#line 1207
cudaMemoryTypeDevice, 
#line 1208
cudaMemoryTypeManaged
#line 1209
}; 
#endif
#line 1214 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\driver_types.h"
#if 0
#line 1214
enum cudaMemcpyKind { 
#line 1216
cudaMemcpyHostToHost, 
#line 1217
cudaMemcpyHostToDevice, 
#line 1218
cudaMemcpyDeviceToHost, 
#line 1219
cudaMemcpyDeviceToDevice, 
#line 1220
cudaMemcpyDefault
#line 1221
}; 
#endif
#line 1228 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\driver_types.h"
#if 0
#line 1228
struct cudaPitchedPtr { 
#line 1230
void *ptr; 
#line 1231
size_t pitch; 
#line 1232
size_t xsize; 
#line 1233
size_t ysize; 
#line 1234
}; 
#endif
#line 1241 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\driver_types.h"
#if 0
#line 1241
struct cudaExtent { 
#line 1243
size_t width; 
#line 1244
size_t height; 
#line 1245
size_t depth; 
#line 1246
}; 
#endif
#line 1253 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\driver_types.h"
#if 0
#line 1253
struct cudaPos { 
#line 1255
size_t x; 
#line 1256
size_t y; 
#line 1257
size_t z; 
#line 1258
}; 
#endif
#line 1263 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\driver_types.h"
#if 0
#line 1263
struct cudaMemcpy3DParms { 
#line 1265
cudaArray_t srcArray; 
#line 1266
cudaPos srcPos; 
#line 1267
cudaPitchedPtr srcPtr; 
#line 1269
cudaArray_t dstArray; 
#line 1270
cudaPos dstPos; 
#line 1271
cudaPitchedPtr dstPtr; 
#line 1273
cudaExtent extent; 
#line 1274
cudaMemcpyKind kind; __pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)
#line 1275
}; 
#endif
#line 1280 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\driver_types.h"
#if 0
#line 1280
struct cudaMemcpy3DPeerParms { 
#line 1282
cudaArray_t srcArray; 
#line 1283
cudaPos srcPos; 
#line 1284
cudaPitchedPtr srcPtr; 
#line 1285
int srcDevice; 
#line 1287
cudaArray_t dstArray; 
#line 1288
cudaPos dstPos; 
#line 1289
cudaPitchedPtr dstPtr; 
#line 1290
int dstDevice; 
#line 1292
cudaExtent extent; 
#line 1293
}; 
#endif
#line 1298 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\driver_types.h"
#if 0
#line 1298
struct cudaMemsetParams { 
#line 1299
void *dst; 
#line 1300
size_t pitch; 
#line 1301
unsigned value; 
#line 1302
unsigned elementSize; 
#line 1303
size_t width; 
#line 1304
size_t height; 
#line 1305
}; 
#endif
#line 1310 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\driver_types.h"
#if 0
#line 1310
enum cudaAccessProperty { 
#line 1311
cudaAccessPropertyNormal, 
#line 1312
cudaAccessPropertyStreaming, 
#line 1313
cudaAccessPropertyPersisting
#line 1314
}; 
#endif
#line 1327 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\driver_types.h"
#if 0
#line 1327
struct cudaAccessPolicyWindow { 
#line 1328
void *base_ptr; 
#line 1329
size_t num_bytes; 
#line 1330
float hitRatio; 
#line 1331
cudaAccessProperty hitProp; 
#line 1332
cudaAccessProperty missProp; __pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)
#line 1333
}; 
#endif
#line 1345 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\driver_types.h"
typedef void (__stdcall *cudaHostFn_t)(void * userData); 
#line 1350
#if 0
#line 1350
struct cudaHostNodeParams { 
#line 1351
cudaHostFn_t fn; 
#line 1352
void *userData; 
#line 1353
}; 
#endif
#line 1358 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\driver_types.h"
#if 0
#line 1358
enum cudaStreamCaptureStatus { 
#line 1359
cudaStreamCaptureStatusNone, 
#line 1360
cudaStreamCaptureStatusActive, 
#line 1361
cudaStreamCaptureStatusInvalidated
#line 1363
}; 
#endif
#line 1369 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\driver_types.h"
#if 0
#line 1369
enum cudaStreamCaptureMode { 
#line 1370
cudaStreamCaptureModeGlobal, 
#line 1371
cudaStreamCaptureModeThreadLocal, 
#line 1372
cudaStreamCaptureModeRelaxed
#line 1373
}; 
#endif
#line 1375 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\driver_types.h"
#if 0
#line 1375
enum cudaSynchronizationPolicy { 
#line 1376
cudaSyncPolicyAuto = 1, 
#line 1377
cudaSyncPolicySpin, 
#line 1378
cudaSyncPolicyYield, 
#line 1379
cudaSyncPolicyBlockingSync
#line 1380
}; 
#endif
#line 1385 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\driver_types.h"
#if 0
#line 1385
enum cudaClusterSchedulingPolicy { 
#line 1386
cudaClusterSchedulingPolicyDefault, 
#line 1387
cudaClusterSchedulingPolicySpread, 
#line 1388
cudaClusterSchedulingPolicyLoadBalancing
#line 1389
}; 
#endif
#line 1394 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\driver_types.h"
#if 0
#line 1394
enum cudaStreamUpdateCaptureDependenciesFlags { 
#line 1395
cudaStreamAddCaptureDependencies, 
#line 1396
cudaStreamSetCaptureDependencies
#line 1397
}; 
#endif
#line 1402 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\driver_types.h"
#if 0
#line 1402
enum cudaUserObjectFlags { 
#line 1403
cudaUserObjectNoDestructorSync = 1
#line 1404
}; 
#endif
#line 1409 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\driver_types.h"
#if 0
#line 1409
enum cudaUserObjectRetainFlags { 
#line 1410
cudaGraphUserObjectMove = 1
#line 1411
}; 
#endif
#line 1416 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\driver_types.h"
struct cudaGraphicsResource; 
#line 1421
#if 0
#line 1421
enum cudaGraphicsRegisterFlags { 
#line 1423
cudaGraphicsRegisterFlagsNone, 
#line 1424
cudaGraphicsRegisterFlagsReadOnly, 
#line 1425
cudaGraphicsRegisterFlagsWriteDiscard, 
#line 1426
cudaGraphicsRegisterFlagsSurfaceLoadStore = 4, 
#line 1427
cudaGraphicsRegisterFlagsTextureGather = 8
#line 1428
}; 
#endif
#line 1433 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\driver_types.h"
#if 0
#line 1433
enum cudaGraphicsMapFlags { 
#line 1435
cudaGraphicsMapFlagsNone, 
#line 1436
cudaGraphicsMapFlagsReadOnly, 
#line 1437
cudaGraphicsMapFlagsWriteDiscard
#line 1438
}; 
#endif
#line 1443 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\driver_types.h"
#if 0
#line 1443
enum cudaGraphicsCubeFace { 
#line 1445
cudaGraphicsCubeFacePositiveX, 
#line 1446
cudaGraphicsCubeFaceNegativeX, 
#line 1447
cudaGraphicsCubeFacePositiveY, 
#line 1448
cudaGraphicsCubeFaceNegativeY, 
#line 1449
cudaGraphicsCubeFacePositiveZ, 
#line 1450
cudaGraphicsCubeFaceNegativeZ
#line 1451
}; 
#endif
#line 1456 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\driver_types.h"
#if 0
#line 1456
enum cudaResourceType { 
#line 1458
cudaResourceTypeArray, 
#line 1459
cudaResourceTypeMipmappedArray, 
#line 1460
cudaResourceTypeLinear, 
#line 1461
cudaResourceTypePitch2D
#line 1462
}; 
#endif
#line 1467 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\driver_types.h"
#if 0
#line 1467
enum cudaResourceViewFormat { 
#line 1469
cudaResViewFormatNone, 
#line 1470
cudaResViewFormatUnsignedChar1, 
#line 1471
cudaResViewFormatUnsignedChar2, 
#line 1472
cudaResViewFormatUnsignedChar4, 
#line 1473
cudaResViewFormatSignedChar1, 
#line 1474
cudaResViewFormatSignedChar2, 
#line 1475
cudaResViewFormatSignedChar4, 
#line 1476
cudaResViewFormatUnsignedShort1, 
#line 1477
cudaResViewFormatUnsignedShort2, 
#line 1478
cudaResViewFormatUnsignedShort4, 
#line 1479
cudaResViewFormatSignedShort1, 
#line 1480
cudaResViewFormatSignedShort2, 
#line 1481
cudaResViewFormatSignedShort4, 
#line 1482
cudaResViewFormatUnsignedInt1, 
#line 1483
cudaResViewFormatUnsignedInt2, 
#line 1484
cudaResViewFormatUnsignedInt4, 
#line 1485
cudaResViewFormatSignedInt1, 
#line 1486
cudaResViewFormatSignedInt2, 
#line 1487
cudaResViewFormatSignedInt4, 
#line 1488
cudaResViewFormatHalf1, 
#line 1489
cudaResViewFormatHalf2, 
#line 1490
cudaResViewFormatHalf4, 
#line 1491
cudaResViewFormatFloat1, 
#line 1492
cudaResViewFormatFloat2, 
#line 1493
cudaResViewFormatFloat4, 
#line 1494
cudaResViewFormatUnsignedBlockCompressed1, 
#line 1495
cudaResViewFormatUnsignedBlockCompressed2, 
#line 1496
cudaResViewFormatUnsignedBlockCompressed3, 
#line 1497
cudaResViewFormatUnsignedBlockCompressed4, 
#line 1498
cudaResViewFormatSignedBlockCompressed4, 
#line 1499
cudaResViewFormatUnsignedBlockCompressed5, 
#line 1500
cudaResViewFormatSignedBlockCompressed5, 
#line 1501
cudaResViewFormatUnsignedBlockCompressed6H, 
#line 1502
cudaResViewFormatSignedBlockCompressed6H, 
#line 1503
cudaResViewFormatUnsignedBlockCompressed7
#line 1504
}; 
#endif
#line 1509 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\driver_types.h"
#if 0
#line 1509
struct cudaResourceDesc { 
#line 1510
cudaResourceType resType; 
#line 1512
union { 
#line 1513
struct { 
#line 1514
cudaArray_t array; 
#line 1515
} array; 
#line 1516
struct { 
#line 1517
cudaMipmappedArray_t mipmap; 
#line 1518
} mipmap; 
#line 1519
struct { 
#line 1520
void *devPtr; 
#line 1521
cudaChannelFormatDesc desc; 
#line 1522
size_t sizeInBytes; 
#line 1523
} linear; 
#line 1524
struct { 
#line 1525
void *devPtr; 
#line 1526
cudaChannelFormatDesc desc; 
#line 1527
size_t width; 
#line 1528
size_t height; 
#line 1529
size_t pitchInBytes; 
#line 1530
} pitch2D; 
#line 1531
} res; 
#line 1532
}; 
#endif
#line 1537 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\driver_types.h"
#if 0
#line 1537
struct cudaResourceViewDesc { 
#line 1539
cudaResourceViewFormat format; 
#line 1540
size_t width; 
#line 1541
size_t height; 
#line 1542
size_t depth; 
#line 1543
unsigned firstMipmapLevel; 
#line 1544
unsigned lastMipmapLevel; 
#line 1545
unsigned firstLayer; 
#line 1546
unsigned lastLayer; 
#line 1547
}; 
#endif
#line 1552 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\driver_types.h"
#if 0
#line 1552
struct cudaPointerAttributes { 
#line 1558
cudaMemoryType type; 
#line 1569
int device; 
#line 1575
void *devicePointer; 
#line 1584
void *hostPointer; 
#line 1585
}; 
#endif
#line 1590 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\driver_types.h"
#if 0
#line 1590
struct cudaFuncAttributes { 
#line 1597
size_t sharedSizeBytes; 
#line 1603
size_t constSizeBytes; 
#line 1608
size_t localSizeBytes; 
#line 1615
int maxThreadsPerBlock; 
#line 1620
int numRegs; 
#line 1627
int ptxVersion; 
#line 1634
int binaryVersion; 
#line 1640
int cacheModeCA; 
#line 1647
int maxDynamicSharedSizeBytes; 
#line 1656
int preferredShmemCarveout; 
#line 1662
int clusterDimMustBeSet; 
#line 1673
int requiredClusterWidth; 
#line 1674
int requiredClusterHeight; 
#line 1675
int requiredClusterDepth; 
#line 1681
int clusterSchedulingPolicyPreference; 
#line 1703
int nonPortableClusterSizeAllowed; 
#line 1708
int reserved[16]; 
#line 1709
}; 
#endif
#line 1714 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\driver_types.h"
#if 0
#line 1714
enum cudaFuncAttribute { 
#line 1716
cudaFuncAttributeMaxDynamicSharedMemorySize = 8, 
#line 1717
cudaFuncAttributePreferredSharedMemoryCarveout, 
#line 1718
cudaFuncAttributeClusterDimMustBeSet, 
#line 1719
cudaFuncAttributeRequiredClusterWidth, 
#line 1720
cudaFuncAttributeRequiredClusterHeight, 
#line 1721
cudaFuncAttributeRequiredClusterDepth, 
#line 1722
cudaFuncAttributeNonPortableClusterSizeAllowed, 
#line 1723
cudaFuncAttributeClusterSchedulingPolicyPreference, 
#line 1724
cudaFuncAttributeMax
#line 1725
}; 
#endif
#line 1730 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\driver_types.h"
#if 0
#line 1730
enum cudaFuncCache { 
#line 1732
cudaFuncCachePreferNone, 
#line 1733
cudaFuncCachePreferShared, 
#line 1734
cudaFuncCachePreferL1, 
#line 1735
cudaFuncCachePreferEqual
#line 1736
}; 
#endif
#line 1742 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\driver_types.h"
#if 0
#line 1742
enum cudaSharedMemConfig { 
#line 1744
cudaSharedMemBankSizeDefault, 
#line 1745
cudaSharedMemBankSizeFourByte, 
#line 1746
cudaSharedMemBankSizeEightByte
#line 1747
}; 
#endif
#line 1752 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\driver_types.h"
#if 0
#line 1752
enum cudaSharedCarveout { 
#line 1753
cudaSharedmemCarveoutDefault = (-1), 
#line 1754
cudaSharedmemCarveoutMaxShared = 100, 
#line 1755
cudaSharedmemCarveoutMaxL1 = 0
#line 1756
}; 
#endif
#line 1761 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\driver_types.h"
#if 0
#line 1761
enum cudaComputeMode { 
#line 1763
cudaComputeModeDefault, 
#line 1764
cudaComputeModeExclusive, 
#line 1765
cudaComputeModeProhibited, 
#line 1766
cudaComputeModeExclusiveProcess
#line 1767
}; 
#endif
#line 1772 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\driver_types.h"
#if 0
#line 1772
enum cudaLimit { 
#line 1774
cudaLimitStackSize, 
#line 1775
cudaLimitPrintfFifoSize, 
#line 1776
cudaLimitMallocHeapSize, 
#line 1777
cudaLimitDevRuntimeSyncDepth, 
#line 1778
cudaLimitDevRuntimePendingLaunchCount, 
#line 1779
cudaLimitMaxL2FetchGranularity, 
#line 1780
cudaLimitPersistingL2CacheSize
#line 1781
}; 
#endif
#line 1786 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\driver_types.h"
#if 0
#line 1786
enum cudaMemoryAdvise { 
#line 1788
cudaMemAdviseSetReadMostly = 1, 
#line 1789
cudaMemAdviseUnsetReadMostly, 
#line 1790
cudaMemAdviseSetPreferredLocation, 
#line 1791
cudaMemAdviseUnsetPreferredLocation, 
#line 1792
cudaMemAdviseSetAccessedBy, 
#line 1793
cudaMemAdviseUnsetAccessedBy
#line 1794
}; 
#endif
#line 1799 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\driver_types.h"
#if 0
#line 1799
enum cudaMemRangeAttribute { 
#line 1801
cudaMemRangeAttributeReadMostly = 1, 
#line 1802
cudaMemRangeAttributePreferredLocation, 
#line 1803
cudaMemRangeAttributeAccessedBy, 
#line 1804
cudaMemRangeAttributeLastPrefetchLocation
#line 1805
}; 
#endif
#line 1810 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\driver_types.h"
#if 0
#line 1810
enum cudaFlushGPUDirectRDMAWritesOptions { 
#line 1811
cudaFlushGPUDirectRDMAWritesOptionHost = (1 << 0), 
#line 1812
cudaFlushGPUDirectRDMAWritesOptionMemOps
#line 1813
}; 
#endif
#line 1818 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\driver_types.h"
#if 0
#line 1818
enum cudaGPUDirectRDMAWritesOrdering { 
#line 1819
cudaGPUDirectRDMAWritesOrderingNone, 
#line 1820
cudaGPUDirectRDMAWritesOrderingOwner = 100, 
#line 1821
cudaGPUDirectRDMAWritesOrderingAllDevices = 200
#line 1822
}; 
#endif
#line 1827 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\driver_types.h"
#if 0
#line 1827
enum cudaFlushGPUDirectRDMAWritesScope { 
#line 1828
cudaFlushGPUDirectRDMAWritesToOwner = 100, 
#line 1829
cudaFlushGPUDirectRDMAWritesToAllDevices = 200
#line 1830
}; 
#endif
#line 1835 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\driver_types.h"
#if 0
#line 1835
enum cudaFlushGPUDirectRDMAWritesTarget { 
#line 1836
cudaFlushGPUDirectRDMAWritesTargetCurrentDevice
#line 1837
}; 
#endif
#line 1843 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\driver_types.h"
#if 0
#line 1843
enum cudaDeviceAttr { 
#line 1845
cudaDevAttrMaxThreadsPerBlock = 1, 
#line 1846
cudaDevAttrMaxBlockDimX, 
#line 1847
cudaDevAttrMaxBlockDimY, 
#line 1848
cudaDevAttrMaxBlockDimZ, 
#line 1849
cudaDevAttrMaxGridDimX, 
#line 1850
cudaDevAttrMaxGridDimY, 
#line 1851
cudaDevAttrMaxGridDimZ, 
#line 1852
cudaDevAttrMaxSharedMemoryPerBlock, 
#line 1853
cudaDevAttrTotalConstantMemory, 
#line 1854
cudaDevAttrWarpSize, 
#line 1855
cudaDevAttrMaxPitch, 
#line 1856
cudaDevAttrMaxRegistersPerBlock, 
#line 1857
cudaDevAttrClockRate, 
#line 1858
cudaDevAttrTextureAlignment, 
#line 1859
cudaDevAttrGpuOverlap, 
#line 1860
cudaDevAttrMultiProcessorCount, 
#line 1861
cudaDevAttrKernelExecTimeout, 
#line 1862
cudaDevAttrIntegrated, 
#line 1863
cudaDevAttrCanMapHostMemory, 
#line 1864
cudaDevAttrComputeMode, 
#line 1865
cudaDevAttrMaxTexture1DWidth, 
#line 1866
cudaDevAttrMaxTexture2DWidth, 
#line 1867
cudaDevAttrMaxTexture2DHeight, 
#line 1868
cudaDevAttrMaxTexture3DWidth, 
#line 1869
cudaDevAttrMaxTexture3DHeight, 
#line 1870
cudaDevAttrMaxTexture3DDepth, 
#line 1871
cudaDevAttrMaxTexture2DLayeredWidth, 
#line 1872
cudaDevAttrMaxTexture2DLayeredHeight, 
#line 1873
cudaDevAttrMaxTexture2DLayeredLayers, 
#line 1874
cudaDevAttrSurfaceAlignment, 
#line 1875
cudaDevAttrConcurrentKernels, 
#line 1876
cudaDevAttrEccEnabled, 
#line 1877
cudaDevAttrPciBusId, 
#line 1878
cudaDevAttrPciDeviceId, 
#line 1879
cudaDevAttrTccDriver, 
#line 1880
cudaDevAttrMemoryClockRate, 
#line 1881
cudaDevAttrGlobalMemoryBusWidth, 
#line 1882
cudaDevAttrL2CacheSize, 
#line 1883
cudaDevAttrMaxThreadsPerMultiProcessor, 
#line 1884
cudaDevAttrAsyncEngineCount, 
#line 1885
cudaDevAttrUnifiedAddressing, 
#line 1886
cudaDevAttrMaxTexture1DLayeredWidth, 
#line 1887
cudaDevAttrMaxTexture1DLayeredLayers, 
#line 1888
cudaDevAttrMaxTexture2DGatherWidth = 45, 
#line 1889
cudaDevAttrMaxTexture2DGatherHeight, 
#line 1890
cudaDevAttrMaxTexture3DWidthAlt, 
#line 1891
cudaDevAttrMaxTexture3DHeightAlt, 
#line 1892
cudaDevAttrMaxTexture3DDepthAlt, 
#line 1893
cudaDevAttrPciDomainId, 
#line 1894
cudaDevAttrTexturePitchAlignment, 
#line 1895
cudaDevAttrMaxTextureCubemapWidth, 
#line 1896
cudaDevAttrMaxTextureCubemapLayeredWidth, 
#line 1897
cudaDevAttrMaxTextureCubemapLayeredLayers, 
#line 1898
cudaDevAttrMaxSurface1DWidth, 
#line 1899
cudaDevAttrMaxSurface2DWidth, 
#line 1900
cudaDevAttrMaxSurface2DHeight, 
#line 1901
cudaDevAttrMaxSurface3DWidth, 
#line 1902
cudaDevAttrMaxSurface3DHeight, 
#line 1903
cudaDevAttrMaxSurface3DDepth, 
#line 1904
cudaDevAttrMaxSurface1DLayeredWidth, 
#line 1905
cudaDevAttrMaxSurface1DLayeredLayers, 
#line 1906
cudaDevAttrMaxSurface2DLayeredWidth, 
#line 1907
cudaDevAttrMaxSurface2DLayeredHeight, 
#line 1908
cudaDevAttrMaxSurface2DLayeredLayers, 
#line 1909
cudaDevAttrMaxSurfaceCubemapWidth, 
#line 1910
cudaDevAttrMaxSurfaceCubemapLayeredWidth, 
#line 1911
cudaDevAttrMaxSurfaceCubemapLayeredLayers, 
#line 1912
cudaDevAttrMaxTexture1DLinearWidth, 
#line 1913
cudaDevAttrMaxTexture2DLinearWidth, 
#line 1914
cudaDevAttrMaxTexture2DLinearHeight, 
#line 1915
cudaDevAttrMaxTexture2DLinearPitch, 
#line 1916
cudaDevAttrMaxTexture2DMipmappedWidth, 
#line 1917
cudaDevAttrMaxTexture2DMipmappedHeight, 
#line 1918
cudaDevAttrComputeCapabilityMajor, 
#line 1919
cudaDevAttrComputeCapabilityMinor, 
#line 1920
cudaDevAttrMaxTexture1DMipmappedWidth, 
#line 1921
cudaDevAttrStreamPrioritiesSupported, 
#line 1922
cudaDevAttrGlobalL1CacheSupported, 
#line 1923
cudaDevAttrLocalL1CacheSupported, 
#line 1924
cudaDevAttrMaxSharedMemoryPerMultiprocessor, 
#line 1925
cudaDevAttrMaxRegistersPerMultiprocessor, 
#line 1926
cudaDevAttrManagedMemory, 
#line 1927
cudaDevAttrIsMultiGpuBoard, 
#line 1928
cudaDevAttrMultiGpuBoardGroupID, 
#line 1929
cudaDevAttrHostNativeAtomicSupported, 
#line 1930
cudaDevAttrSingleToDoublePrecisionPerfRatio, 
#line 1931
cudaDevAttrPageableMemoryAccess, 
#line 1932
cudaDevAttrConcurrentManagedAccess, 
#line 1933
cudaDevAttrComputePreemptionSupported, 
#line 1934
cudaDevAttrCanUseHostPointerForRegisteredMem, 
#line 1935
cudaDevAttrReserved92, 
#line 1936
cudaDevAttrReserved93, 
#line 1937
cudaDevAttrReserved94, 
#line 1938
cudaDevAttrCooperativeLaunch, 
#line 1939
cudaDevAttrCooperativeMultiDeviceLaunch, 
#line 1940
cudaDevAttrMaxSharedMemoryPerBlockOptin, 
#line 1941
cudaDevAttrCanFlushRemoteWrites, 
#line 1942
cudaDevAttrHostRegisterSupported, 
#line 1943
cudaDevAttrPageableMemoryAccessUsesHostPageTables, 
#line 1944
cudaDevAttrDirectManagedMemAccessFromHost, 
#line 1945
cudaDevAttrMaxBlocksPerMultiprocessor = 106, 
#line 1946
cudaDevAttrMaxPersistingL2CacheSize = 108, 
#line 1947
cudaDevAttrMaxAccessPolicyWindowSize, 
#line 1948
cudaDevAttrReservedSharedMemoryPerBlock = 111, 
#line 1949
cudaDevAttrSparseCudaArraySupported, 
#line 1950
cudaDevAttrHostRegisterReadOnlySupported, 
#line 1951
cudaDevAttrTimelineSemaphoreInteropSupported, 
#line 1952
cudaDevAttrMaxTimelineSemaphoreInteropSupported = 114, 
#line 1953
cudaDevAttrMemoryPoolsSupported, 
#line 1954
cudaDevAttrGPUDirectRDMASupported, 
#line 1955
cudaDevAttrGPUDirectRDMAFlushWritesOptions, 
#line 1956
cudaDevAttrGPUDirectRDMAWritesOrdering, 
#line 1957
cudaDevAttrMemoryPoolSupportedHandleTypes, 
#line 1958
cudaDevAttrClusterLaunch, 
#line 1959
cudaDevAttrDeferredMappingCudaArraySupported, 
#line 1960
cudaDevAttrReserved122, 
#line 1961
cudaDevAttrReserved123, 
#line 1962
cudaDevAttrReserved124, 
#line 1963
cudaDevAttrIpcEventSupport, 
#line 1964
cudaDevAttrMemSyncDomainCount, 
#line 1965
cudaDevAttrReserved127, 
#line 1966
cudaDevAttrReserved128, 
#line 1967
cudaDevAttrReserved129, 
#line 1968
cudaDevAttrReserved132 = 132, 
#line 1969
cudaDevAttrMax
#line 1970
}; 
#endif
#line 1975 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\driver_types.h"
#if 0
#line 1975
enum cudaMemPoolAttr { 
#line 1985
cudaMemPoolReuseFollowEventDependencies = 1, 
#line 1992
cudaMemPoolReuseAllowOpportunistic, 
#line 2000
cudaMemPoolReuseAllowInternalDependencies, 
#line 2011
cudaMemPoolAttrReleaseThreshold, 
#line 2017
cudaMemPoolAttrReservedMemCurrent, 
#line 2024
cudaMemPoolAttrReservedMemHigh, 
#line 2030
cudaMemPoolAttrUsedMemCurrent, 
#line 2037
cudaMemPoolAttrUsedMemHigh
#line 2038
}; 
#endif
#line 2043 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\driver_types.h"
#if 0
#line 2043
enum cudaMemLocationType { 
#line 2044
cudaMemLocationTypeInvalid, 
#line 2045
cudaMemLocationTypeDevice
#line 2046
}; 
#endif
#line 2053 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\driver_types.h"
#if 0
#line 2053
struct cudaMemLocation { 
#line 2054
cudaMemLocationType type; 
#line 2055
int id; 
#line 2056
}; 
#endif
#line 2061 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\driver_types.h"
#if 0
#line 2061
enum cudaMemAccessFlags { 
#line 2062
cudaMemAccessFlagsProtNone, 
#line 2063
cudaMemAccessFlagsProtRead, 
#line 2064
cudaMemAccessFlagsProtReadWrite = 3
#line 2065
}; 
#endif
#line 2070 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\driver_types.h"
#if 0
#line 2070
struct cudaMemAccessDesc { 
#line 2071
cudaMemLocation location; 
#line 2072
cudaMemAccessFlags flags; 
#line 2073
}; 
#endif
#line 2078 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\driver_types.h"
#if 0
#line 2078
enum cudaMemAllocationType { 
#line 2079
cudaMemAllocationTypeInvalid, 
#line 2083
cudaMemAllocationTypePinned, 
#line 2084
cudaMemAllocationTypeMax = 2147483647
#line 2085
}; 
#endif
#line 2090 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\driver_types.h"
#if 0
#line 2090
enum cudaMemAllocationHandleType { 
#line 2091
cudaMemHandleTypeNone, 
#line 2092
cudaMemHandleTypePosixFileDescriptor, 
#line 2093
cudaMemHandleTypeWin32, 
#line 2094
cudaMemHandleTypeWin32Kmt = 4
#line 2095
}; 
#endif
#line 2100 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\driver_types.h"
#if 0
#line 2100
struct cudaMemPoolProps { 
#line 2101
cudaMemAllocationType allocType; 
#line 2102
cudaMemAllocationHandleType handleTypes; 
#line 2103
cudaMemLocation location; 
#line 2110
void *win32SecurityAttributes; 
#line 2111
unsigned char reserved[64]; 
#line 2112
}; 
#endif
#line 2117 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\driver_types.h"
#if 0
#line 2117
struct cudaMemPoolPtrExportData { 
#line 2118
unsigned char reserved[64]; 
#line 2119
}; 
#endif
#line 2124 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\driver_types.h"
#if 0
#line 2124
struct cudaMemAllocNodeParams { 
#line 2129
cudaMemPoolProps poolProps; 
#line 2130
const cudaMemAccessDesc *accessDescs; 
#line 2131
size_t accessDescCount; 
#line 2132
size_t bytesize; 
#line 2133
void *dptr; 
#line 2134
}; 
#endif
#line 2139 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\driver_types.h"
#if 0
#line 2139
enum cudaGraphMemAttributeType { 
#line 2144
cudaGraphMemAttrUsedMemCurrent, 
#line 2151
cudaGraphMemAttrUsedMemHigh, 
#line 2158
cudaGraphMemAttrReservedMemCurrent, 
#line 2165
cudaGraphMemAttrReservedMemHigh
#line 2166
}; 
#endif
#line 2172 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\driver_types.h"
#if 0
#line 2172
enum cudaDeviceP2PAttr { 
#line 2173
cudaDevP2PAttrPerformanceRank = 1, 
#line 2174
cudaDevP2PAttrAccessSupported, 
#line 2175
cudaDevP2PAttrNativeAtomicSupported, 
#line 2176
cudaDevP2PAttrCudaArrayAccessSupported
#line 2177
}; 
#endif
#line 2184 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\driver_types.h"
#if 0
#line 2184
struct CUuuid_st { 
#line 2185
char bytes[16]; 
#line 2186
}; 
#endif
#line 2187 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\driver_types.h"
#if 0
typedef CUuuid_st 
#line 2187
CUuuid; 
#endif
#line 2189 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\driver_types.h"
#if 0
typedef CUuuid_st 
#line 2189
cudaUUID_t; 
#endif
#line 2194 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\driver_types.h"
#if 0
#line 2194
struct cudaDeviceProp { 
#line 2196
char name[256]; 
#line 2197
cudaUUID_t uuid; 
#line 2198
char luid[8]; 
#line 2199
unsigned luidDeviceNodeMask; 
#line 2200
size_t totalGlobalMem; 
#line 2201
size_t sharedMemPerBlock; 
#line 2202
int regsPerBlock; 
#line 2203
int warpSize; 
#line 2204
size_t memPitch; 
#line 2205
int maxThreadsPerBlock; 
#line 2206
int maxThreadsDim[3]; 
#line 2207
int maxGridSize[3]; 
#line 2208
int clockRate; 
#line 2209
size_t totalConstMem; 
#line 2210
int major; 
#line 2211
int minor; 
#line 2212
size_t textureAlignment; 
#line 2213
size_t texturePitchAlignment; 
#line 2214
int deviceOverlap; 
#line 2215
int multiProcessorCount; 
#line 2216
int kernelExecTimeoutEnabled; 
#line 2217
int integrated; 
#line 2218
int canMapHostMemory; 
#line 2219
int computeMode; 
#line 2220
int maxTexture1D; 
#line 2221
int maxTexture1DMipmap; 
#line 2222
int maxTexture1DLinear; 
#line 2223
int maxTexture2D[2]; 
#line 2224
int maxTexture2DMipmap[2]; 
#line 2225
int maxTexture2DLinear[3]; 
#line 2226
int maxTexture2DGather[2]; 
#line 2227
int maxTexture3D[3]; 
#line 2228
int maxTexture3DAlt[3]; 
#line 2229
int maxTextureCubemap; 
#line 2230
int maxTexture1DLayered[2]; 
#line 2231
int maxTexture2DLayered[3]; 
#line 2232
int maxTextureCubemapLayered[2]; 
#line 2233
int maxSurface1D; 
#line 2234
int maxSurface2D[2]; 
#line 2235
int maxSurface3D[3]; 
#line 2236
int maxSurface1DLayered[2]; 
#line 2237
int maxSurface2DLayered[3]; 
#line 2238
int maxSurfaceCubemap; 
#line 2239
int maxSurfaceCubemapLayered[2]; 
#line 2240
size_t surfaceAlignment; 
#line 2241
int concurrentKernels; 
#line 2242
int ECCEnabled; 
#line 2243
int pciBusID; 
#line 2244
int pciDeviceID; 
#line 2245
int pciDomainID; 
#line 2246
int tccDriver; 
#line 2247
int asyncEngineCount; 
#line 2248
int unifiedAddressing; 
#line 2249
int memoryClockRate; 
#line 2250
int memoryBusWidth; 
#line 2251
int l2CacheSize; 
#line 2252
int persistingL2CacheMaxSize; 
#line 2253
int maxThreadsPerMultiProcessor; 
#line 2254
int streamPrioritiesSupported; 
#line 2255
int globalL1CacheSupported; 
#line 2256
int localL1CacheSupported; 
#line 2257
size_t sharedMemPerMultiprocessor; 
#line 2258
int regsPerMultiprocessor; 
#line 2259
int managedMemory; 
#line 2260
int isMultiGpuBoard; 
#line 2261
int multiGpuBoardGroupID; 
#line 2262
int hostNativeAtomicSupported; 
#line 2263
int singleToDoublePrecisionPerfRatio; 
#line 2264
int pageableMemoryAccess; 
#line 2265
int concurrentManagedAccess; 
#line 2266
int computePreemptionSupported; 
#line 2267
int canUseHostPointerForRegisteredMem; 
#line 2268
int cooperativeLaunch; 
#line 2269
int cooperativeMultiDeviceLaunch; 
#line 2270
size_t sharedMemPerBlockOptin; 
#line 2271
int pageableMemoryAccessUsesHostPageTables; 
#line 2272
int directManagedMemAccessFromHost; 
#line 2273
int maxBlocksPerMultiProcessor; 
#line 2274
int accessPolicyMaxWindowSize; 
#line 2275
size_t reservedSharedMemPerBlock; 
#line 2276
int hostRegisterSupported; 
#line 2277
int sparseCudaArraySupported; 
#line 2278
int hostRegisterReadOnlySupported; 
#line 2279
int timelineSemaphoreInteropSupported; 
#line 2280
int memoryPoolsSupported; 
#line 2281
int gpuDirectRDMASupported; 
#line 2282
unsigned gpuDirectRDMAFlushWritesOptions; 
#line 2283
int gpuDirectRDMAWritesOrdering; 
#line 2284
unsigned memoryPoolSupportedHandleTypes; 
#line 2285
int deferredMappingCudaArraySupported; 
#line 2286
int ipcEventSupported; 
#line 2287
int clusterLaunch; 
#line 2288
int unifiedFunctionPointers; 
#line 2289
int reserved2[2]; 
#line 2290
int reserved[61]; 
#line 2291
}; 
#endif
#line 2304 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\driver_types.h"
#if 0
typedef 
#line 2301
struct cudaIpcEventHandle_st { 
#line 2303
char reserved[64]; 
#line 2304
} cudaIpcEventHandle_t; 
#endif
#line 2312 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\driver_types.h"
#if 0
typedef 
#line 2309
struct cudaIpcMemHandle_st { 
#line 2311
char reserved[64]; 
#line 2312
} cudaIpcMemHandle_t; 
#endif
#line 2317 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\driver_types.h"
#if 0
#line 2317
enum cudaExternalMemoryHandleType { 
#line 2321
cudaExternalMemoryHandleTypeOpaqueFd = 1, 
#line 2325
cudaExternalMemoryHandleTypeOpaqueWin32, 
#line 2329
cudaExternalMemoryHandleTypeOpaqueWin32Kmt, 
#line 2333
cudaExternalMemoryHandleTypeD3D12Heap, 
#line 2337
cudaExternalMemoryHandleTypeD3D12Resource, 
#line 2341
cudaExternalMemoryHandleTypeD3D11Resource, 
#line 2345
cudaExternalMemoryHandleTypeD3D11ResourceKmt, 
#line 2349
cudaExternalMemoryHandleTypeNvSciBuf
#line 2350
}; 
#endif
#line 2392 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\driver_types.h"
#if 0
#line 2392
struct cudaExternalMemoryHandleDesc { 
#line 2396
cudaExternalMemoryHandleType type; 
#line 2397
union { 
#line 2403
int fd; 
#line 2419
struct { 
#line 2423
void *handle; 
#line 2428
const void *name; 
#line 2429
} win32; 
#line 2434
const void *nvSciBufObject; 
#line 2435
} handle; 
#line 2439
unsigned __int64 size; 
#line 2443
unsigned flags; __pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)
#line 2444
}; 
#endif
#line 2449 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\driver_types.h"
#if 0
#line 2449
struct cudaExternalMemoryBufferDesc { 
#line 2453
unsigned __int64 offset; 
#line 2457
unsigned __int64 size; 
#line 2461
unsigned flags; 
#line 2462
}; 
#endif
#line 2467 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\driver_types.h"
#if 0
#line 2467
struct cudaExternalMemoryMipmappedArrayDesc { 
#line 2472
unsigned __int64 offset; 
#line 2476
cudaChannelFormatDesc formatDesc; 
#line 2480
cudaExtent extent; 
#line 2485
unsigned flags; 
#line 2489
unsigned numLevels; 
#line 2490
}; 
#endif
#line 2495 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\driver_types.h"
#if 0
#line 2495
enum cudaExternalSemaphoreHandleType { 
#line 2499
cudaExternalSemaphoreHandleTypeOpaqueFd = 1, 
#line 2503
cudaExternalSemaphoreHandleTypeOpaqueWin32, 
#line 2507
cudaExternalSemaphoreHandleTypeOpaqueWin32Kmt, 
#line 2511
cudaExternalSemaphoreHandleTypeD3D12Fence, 
#line 2515
cudaExternalSemaphoreHandleTypeD3D11Fence, 
#line 2519
cudaExternalSemaphoreHandleTypeNvSciSync, 
#line 2523
cudaExternalSemaphoreHandleTypeKeyedMutex, 
#line 2527
cudaExternalSemaphoreHandleTypeKeyedMutexKmt, 
#line 2531
cudaExternalSemaphoreHandleTypeTimelineSemaphoreFd, 
#line 2535
cudaExternalSemaphoreHandleTypeTimelineSemaphoreWin32
#line 2536
}; 
#endif
#line 2541 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\driver_types.h"
#if 0
#line 2541
struct cudaExternalSemaphoreHandleDesc { 
#line 2545
cudaExternalSemaphoreHandleType type; 
#line 2546
union { 
#line 2553
int fd; 
#line 2569
struct { 
#line 2573
void *handle; 
#line 2578
const void *name; 
#line 2579
} win32; 
#line 2583
const void *nvSciSyncObj; 
#line 2584
} handle; 
#line 2588
unsigned flags; __pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)
#line 2589
}; 
#endif
#line 2594 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\driver_types.h"
#if 0
#line 2594
struct cudaExternalSemaphoreSignalParams_v1 { 
#line 2595
struct { 
#line 2599
struct { 
#line 2603
unsigned __int64 value; 
#line 2604
} fence; 
#line 2605
union { 
#line 2610
void *fence; 
#line 2611
unsigned __int64 reserved; 
#line 2612
} nvSciSync; 
#line 2616
struct { 
#line 2620
unsigned __int64 key; 
#line 2621
} keyedMutex; 
#line 2622
} params; 
#line 2633
unsigned flags; 
#line 2634
}; 
#endif
#line 2639 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\driver_types.h"
#if 0
#line 2639
struct cudaExternalSemaphoreWaitParams_v1 { 
#line 2640
struct { 
#line 2644
struct { 
#line 2648
unsigned __int64 value; 
#line 2649
} fence; 
#line 2650
union { 
#line 2655
void *fence; 
#line 2656
unsigned __int64 reserved; 
#line 2657
} nvSciSync; 
#line 2661
struct { 
#line 2665
unsigned __int64 key; 
#line 2669
unsigned timeoutMs; 
#line 2670
} keyedMutex; 
#line 2671
} params; 
#line 2682
unsigned flags; 
#line 2683
}; 
#endif
#line 2688 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\driver_types.h"
#if 0
#line 2688
struct cudaExternalSemaphoreSignalParams { 
#line 2689
struct { 
#line 2693
struct { 
#line 2697
unsigned __int64 value; 
#line 2698
} fence; 
#line 2699
union { 
#line 2704
void *fence; 
#line 2705
unsigned __int64 reserved; 
#line 2706
} nvSciSync; 
#line 2710
struct { 
#line 2714
unsigned __int64 key; 
#line 2715
} keyedMutex; 
#line 2716
unsigned reserved[12]; 
#line 2717
} params; 
#line 2728
unsigned flags; 
#line 2729
unsigned reserved[16]; 
#line 2730
}; 
#endif
#line 2735 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\driver_types.h"
#if 0
#line 2735
struct cudaExternalSemaphoreWaitParams { 
#line 2736
struct { 
#line 2740
struct { 
#line 2744
unsigned __int64 value; 
#line 2745
} fence; 
#line 2746
union { 
#line 2751
void *fence; 
#line 2752
unsigned __int64 reserved; 
#line 2753
} nvSciSync; 
#line 2757
struct { 
#line 2761
unsigned __int64 key; 
#line 2765
unsigned timeoutMs; 
#line 2766
} keyedMutex; 
#line 2767
unsigned reserved[10]; 
#line 2768
} params; 
#line 2779
unsigned flags; 
#line 2780
unsigned reserved[16]; 
#line 2781
}; 
#endif
#line 2792 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\driver_types.h"
#if 0
typedef cudaError 
#line 2792
cudaError_t; 
#endif
#line 2797 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\driver_types.h"
#if 0
typedef struct CUstream_st *
#line 2797
cudaStream_t; 
#endif
#line 2802 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\driver_types.h"
#if 0
typedef struct CUevent_st *
#line 2802
cudaEvent_t; 
#endif
#line 2807 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\driver_types.h"
#if 0
typedef cudaGraphicsResource *
#line 2807
cudaGraphicsResource_t; 
#endif
#line 2812 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\driver_types.h"
#if 0
typedef struct CUexternalMemory_st *
#line 2812
cudaExternalMemory_t; 
#endif
#line 2817 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\driver_types.h"
#if 0
typedef struct CUexternalSemaphore_st *
#line 2817
cudaExternalSemaphore_t; 
#endif
#line 2822 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\driver_types.h"
#if 0
typedef struct CUgraph_st *
#line 2822
cudaGraph_t; 
#endif
#line 2827 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\driver_types.h"
#if 0
typedef struct CUgraphNode_st *
#line 2827
cudaGraphNode_t; 
#endif
#line 2832 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\driver_types.h"
#if 0
typedef struct CUuserObject_st *
#line 2832
cudaUserObject_t; 
#endif
#line 2837 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\driver_types.h"
#if 0
typedef struct CUfunc_st *
#line 2837
cudaFunction_t; 
#endif
#line 2842 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\driver_types.h"
#if 0
typedef struct CUkern_st *
#line 2842
cudaKernel_t; 
#endif
#line 2847 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\driver_types.h"
#if 0
typedef struct CUmemPoolHandle_st *
#line 2847
cudaMemPool_t; 
#endif
#line 2852 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\driver_types.h"
#if 0
#line 2852
enum cudaCGScope { 
#line 2853
cudaCGScopeInvalid, 
#line 2854
cudaCGScopeGrid, 
#line 2855
cudaCGScopeMultiGrid
#line 2856
}; 
#endif
#line 2861 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\driver_types.h"
#if 0
#line 2861
struct cudaLaunchParams { 
#line 2863
void *func; 
#line 2864
dim3 gridDim; 
#line 2865
dim3 blockDim; 
#line 2866
void **args; 
#line 2867
size_t sharedMem; 
#line 2868
cudaStream_t stream; 
#line 2869
}; 
#endif
#line 2874 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\driver_types.h"
#if 0
#line 2874
struct cudaKernelNodeParams { 
#line 2875
void *func; 
#line 2876
dim3 gridDim; 
#line 2877
dim3 blockDim; 
#line 2878
unsigned sharedMemBytes; 
#line 2879
void **kernelParams; 
#line 2880
void **extra; 
#line 2881
}; 
#endif
#line 2886 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\driver_types.h"
#if 0
#line 2886
struct cudaExternalSemaphoreSignalNodeParams { 
#line 2887
cudaExternalSemaphore_t *extSemArray; 
#line 2888
const cudaExternalSemaphoreSignalParams *paramsArray; 
#line 2889
unsigned numExtSems; 
#line 2890
}; 
#endif
#line 2895 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\driver_types.h"
#if 0
#line 2895
struct cudaExternalSemaphoreWaitNodeParams { 
#line 2896
cudaExternalSemaphore_t *extSemArray; 
#line 2897
const cudaExternalSemaphoreWaitParams *paramsArray; 
#line 2898
unsigned numExtSems; 
#line 2899
}; 
#endif
#line 2904 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\driver_types.h"
#if 0
#line 2904
enum cudaGraphNodeType { 
#line 2905
cudaGraphNodeTypeKernel, 
#line 2906
cudaGraphNodeTypeMemcpy, 
#line 2907
cudaGraphNodeTypeMemset, 
#line 2908
cudaGraphNodeTypeHost, 
#line 2909
cudaGraphNodeTypeGraph, 
#line 2910
cudaGraphNodeTypeEmpty, 
#line 2911
cudaGraphNodeTypeWaitEvent, 
#line 2912
cudaGraphNodeTypeEventRecord, 
#line 2913
cudaGraphNodeTypeExtSemaphoreSignal, 
#line 2914
cudaGraphNodeTypeExtSemaphoreWait, 
#line 2915
cudaGraphNodeTypeMemAlloc, 
#line 2916
cudaGraphNodeTypeMemFree, 
#line 2917
cudaGraphNodeTypeCount
#line 2918
}; 
#endif
#line 2923 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\driver_types.h"
typedef struct CUgraphExec_st *cudaGraphExec_t; 
#line 2928
#if 0
#line 2928
enum cudaGraphExecUpdateResult { 
#line 2929
cudaGraphExecUpdateSuccess, 
#line 2930
cudaGraphExecUpdateError, 
#line 2931
cudaGraphExecUpdateErrorTopologyChanged, 
#line 2932
cudaGraphExecUpdateErrorNodeTypeChanged, 
#line 2933
cudaGraphExecUpdateErrorFunctionChanged, 
#line 2934
cudaGraphExecUpdateErrorParametersChanged, 
#line 2935
cudaGraphExecUpdateErrorNotSupported, 
#line 2936
cudaGraphExecUpdateErrorUnsupportedFunctionChange, 
#line 2937
cudaGraphExecUpdateErrorAttributesChanged
#line 2938
}; 
#endif
#line 2949 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\driver_types.h"
#if 0
typedef 
#line 2943
enum cudaGraphInstantiateResult { 
#line 2944
cudaGraphInstantiateSuccess, 
#line 2945
cudaGraphInstantiateError, 
#line 2946
cudaGraphInstantiateInvalidStructure, 
#line 2947
cudaGraphInstantiateNodeOperationNotSupported, 
#line 2948
cudaGraphInstantiateMultipleDevicesNotSupported
#line 2949
} cudaGraphInstantiateResult; 
#endif
#line 2960 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\driver_types.h"
#if 0
typedef 
#line 2954
struct cudaGraphInstantiateParams_st { 
#line 2956
unsigned __int64 flags; 
#line 2957
cudaStream_t uploadStream; 
#line 2958
cudaGraphNode_t errNode_out; 
#line 2959
cudaGraphInstantiateResult result_out; 
#line 2960
} cudaGraphInstantiateParams; 
#endif
#line 2982 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\driver_types.h"
#if 0
typedef 
#line 2965
struct cudaGraphExecUpdateResultInfo_st { 
#line 2969
cudaGraphExecUpdateResult result; 
#line 2976
cudaGraphNode_t errorNode; 
#line 2981
cudaGraphNode_t errorFromNode; 
#line 2982
} cudaGraphExecUpdateResultInfo; 
#endif
#line 2988 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\driver_types.h"
#if 0
#line 2988
enum cudaGetDriverEntryPointFlags { 
#line 2989
cudaEnableDefault, 
#line 2990
cudaEnableLegacyStream, 
#line 2991
cudaEnablePerThreadDefaultStream
#line 2992
}; 
#endif
#line 2997 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\driver_types.h"
#if 0
#line 2997
enum cudaDriverEntryPointQueryResult { 
#line 2998
cudaDriverEntryPointSuccess, 
#line 2999
cudaDriverEntryPointSymbolNotFound, 
#line 3000
cudaDriverEntryPointVersionNotSufficent
#line 3001
}; 
#endif
#line 3006 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\driver_types.h"
#if 0
#line 3006
enum cudaGraphDebugDotFlags { 
#line 3007
cudaGraphDebugDotFlagsVerbose = (1 << 0), 
#line 3008
cudaGraphDebugDotFlagsKernelNodeParams = (1 << 2), 
#line 3009
cudaGraphDebugDotFlagsMemcpyNodeParams = (1 << 3), 
#line 3010
cudaGraphDebugDotFlagsMemsetNodeParams = (1 << 4), 
#line 3011
cudaGraphDebugDotFlagsHostNodeParams = (1 << 5), 
#line 3012
cudaGraphDebugDotFlagsEventNodeParams = (1 << 6), 
#line 3013
cudaGraphDebugDotFlagsExtSemasSignalNodeParams = (1 << 7), 
#line 3014
cudaGraphDebugDotFlagsExtSemasWaitNodeParams = (1 << 8), 
#line 3015
cudaGraphDebugDotFlagsKernelNodeAttributes = (1 << 9), 
#line 3016
cudaGraphDebugDotFlagsHandles = (1 << 10)
#line 3017
}; 
#endif
#line 3022 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\driver_types.h"
#if 0
#line 3022
enum cudaGraphInstantiateFlags { 
#line 3023
cudaGraphInstantiateFlagAutoFreeOnLaunch = 1, 
#line 3024
cudaGraphInstantiateFlagUpload, 
#line 3025
cudaGraphInstantiateFlagDeviceLaunch = 4, 
#line 3026
cudaGraphInstantiateFlagUseNodePriority = 8
#line 3028
}; 
#endif
#line 3033 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\driver_types.h"
#if 0
typedef 
#line 3030
enum cudaLaunchMemSyncDomain { 
#line 3031
cudaLaunchMemSyncDomainDefault, 
#line 3032
cudaLaunchMemSyncDomainRemote
#line 3033
} cudaLaunchMemSyncDomain; 
#endif
#line 3038 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\driver_types.h"
#if 0
typedef 
#line 3035
struct cudaLaunchMemSyncDomainMap_st { 
#line 3036
unsigned char default_; 
#line 3037
unsigned char remote; 
#line 3038
} cudaLaunchMemSyncDomainMap; 
#endif
#line 3084 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\driver_types.h"
#if 0
typedef 
#line 3043
enum cudaLaunchAttributeID { 
#line 3044
cudaLaunchAttributeIgnore, 
#line 3045
cudaLaunchAttributeAccessPolicyWindow, 
#line 3046
cudaLaunchAttributeCooperative, 
#line 3047
cudaLaunchAttributeSynchronizationPolicy, 
#line 3048
cudaLaunchAttributeClusterDimension, 
#line 3049
cudaLaunchAttributeClusterSchedulingPolicyPreference, 
#line 3050
cudaLaunchAttributeProgrammaticStreamSerialization, 
#line 3061
cudaLaunchAttributeProgrammaticEvent, 
#line 3081
cudaLaunchAttributePriority, 
#line 3082
cudaLaunchAttributeMemSyncDomainMap, 
#line 3083
cudaLaunchAttributeMemSyncDomain
#line 3084
} cudaLaunchAttributeID; 
#endif
#line 3109 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\driver_types.h"
#if 0
typedef 
#line 3089
union cudaLaunchAttributeValue { 
#line 3090
char pad[64]; 
#line 3091
cudaAccessPolicyWindow accessPolicyWindow; 
#line 3092
int cooperative; 
#line 3093
cudaSynchronizationPolicy syncPolicy; 
#line 3094
struct { 
#line 3095
unsigned x; 
#line 3096
unsigned y; 
#line 3097
unsigned z; 
#line 3098
} clusterDim; 
#line 3099
cudaClusterSchedulingPolicy clusterSchedulingPolicyPreference; 
#line 3100
int programmaticStreamSerializationAllowed; 
#line 3101
struct { 
#line 3102
cudaEvent_t event; 
#line 3103
int flags; 
#line 3104
int triggerAtBlockStart; 
#line 3105
} programmaticEvent; 
#line 3106
int priority; 
#line 3107
cudaLaunchMemSyncDomainMap memSyncDomainMap; 
#line 3108
cudaLaunchMemSyncDomain memSyncDomain; __pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)
#line 3109
} cudaLaunchAttributeValue; 
#endif
#line 3118 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\driver_types.h"
#if 0
typedef 
#line 3114
struct cudaLaunchAttribute_st { 
#line 3115
cudaLaunchAttributeID id; 
#line 3116
char pad[(8) - sizeof(cudaLaunchAttributeID)]; 
#line 3117
cudaLaunchAttributeValue val; 
#line 3118
} cudaLaunchAttribute; 
#endif
#line 3130 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\driver_types.h"
#if 0
typedef 
#line 3123
struct cudaLaunchConfig_st { 
#line 3124
dim3 gridDim; 
#line 3125
dim3 blockDim; 
#line 3126
size_t dynamicSmemBytes; 
#line 3127
cudaStream_t stream; 
#line 3128
cudaLaunchAttribute *attrs; 
#line 3129
unsigned numAttrs; __pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)
#line 3130
} cudaLaunchConfig_t; 
#endif
#line 84 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\surface_types.h"
#if 0
#line 84
enum cudaSurfaceBoundaryMode { 
#line 86
cudaBoundaryModeZero, 
#line 87
cudaBoundaryModeClamp, 
#line 88
cudaBoundaryModeTrap
#line 89
}; 
#endif
#line 94 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\surface_types.h"
#if 0
#line 94
enum cudaSurfaceFormatMode { 
#line 96
cudaFormatModeForced, 
#line 97
cudaFormatModeAuto
#line 98
}; 
#endif
#line 103 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\surface_types.h"
#if 0
typedef unsigned __int64 
#line 103
cudaSurfaceObject_t; 
#endif
#line 84 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\texture_types.h"
#if 0
#line 84
enum cudaTextureAddressMode { 
#line 86
cudaAddressModeWrap, 
#line 87
cudaAddressModeClamp, 
#line 88
cudaAddressModeMirror, 
#line 89
cudaAddressModeBorder
#line 90
}; 
#endif
#line 95 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\texture_types.h"
#if 0
#line 95
enum cudaTextureFilterMode { 
#line 97
cudaFilterModePoint, 
#line 98
cudaFilterModeLinear
#line 99
}; 
#endif
#line 104 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\texture_types.h"
#if 0
#line 104
enum cudaTextureReadMode { 
#line 106
cudaReadModeElementType, 
#line 107
cudaReadModeNormalizedFloat
#line 108
}; 
#endif
#line 113 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\texture_types.h"
#if 0
#line 113
struct cudaTextureDesc { 
#line 118
cudaTextureAddressMode addressMode[3]; 
#line 122
cudaTextureFilterMode filterMode; 
#line 126
cudaTextureReadMode readMode; 
#line 130
int sRGB; 
#line 134
float borderColor[4]; 
#line 138
int normalizedCoords; 
#line 142
unsigned maxAnisotropy; 
#line 146
cudaTextureFilterMode mipmapFilterMode; 
#line 150
float mipmapLevelBias; 
#line 154
float minMipmapLevelClamp; 
#line 158
float maxMipmapLevelClamp; 
#line 162
int disableTrilinearOptimization; 
#line 166
int seamlessCubemap; 
#line 167
}; 
#endif
#line 172 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\texture_types.h"
#if 0
typedef unsigned __int64 
#line 172
cudaTextureObject_t; 
#endif
#line 87 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\library_types.h"
typedef 
#line 55
enum cudaDataType_t { 
#line 57
CUDA_R_16F = 2, 
#line 58
CUDA_C_16F = 6, 
#line 59
CUDA_R_16BF = 14, 
#line 60
CUDA_C_16BF, 
#line 61
CUDA_R_32F = 0, 
#line 62
CUDA_C_32F = 4, 
#line 63
CUDA_R_64F = 1, 
#line 64
CUDA_C_64F = 5, 
#line 65
CUDA_R_4I = 16, 
#line 66
CUDA_C_4I, 
#line 67
CUDA_R_4U, 
#line 68
CUDA_C_4U, 
#line 69
CUDA_R_8I = 3, 
#line 70
CUDA_C_8I = 7, 
#line 71
CUDA_R_8U, 
#line 72
CUDA_C_8U, 
#line 73
CUDA_R_16I = 20, 
#line 74
CUDA_C_16I, 
#line 75
CUDA_R_16U, 
#line 76
CUDA_C_16U, 
#line 77
CUDA_R_32I = 10, 
#line 78
CUDA_C_32I, 
#line 79
CUDA_R_32U, 
#line 80
CUDA_C_32U, 
#line 81
CUDA_R_64I = 24, 
#line 82
CUDA_C_64I, 
#line 83
CUDA_R_64U, 
#line 84
CUDA_C_64U, 
#line 85
CUDA_R_8F_E4M3, 
#line 86
CUDA_R_8F_E5M2
#line 87
} cudaDataType; 
#line 95
typedef 
#line 90
enum libraryPropertyType_t { 
#line 92
MAJOR_VERSION, 
#line 93
MINOR_VERSION, 
#line 94
PATCH_LEVEL
#line 95
} libraryPropertyType; 
#line 13 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_malloc.h"
#pragma warning(push)
#pragma warning(disable: 4324 4514 4574 4710 4793 4820 4995 4996 28719 28726 28727 )
#line 17
__pragma( pack ( push, 8 )) extern "C" {
#line 58 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_malloc.h"
__declspec(dllimport) __declspec(allocator) __declspec(restrict) void *__cdecl 
#line 59
_calloc_base(size_t _Count, size_t _Size); 
#line 65
__declspec(dllimport) __declspec(allocator) __declspec(restrict) void *__cdecl 
#line 66
calloc(size_t _Count, size_t _Size); 
#line 72
__declspec(dllimport) int __cdecl _callnewh(size_t _Size); 
#line 77
__declspec(dllimport) __declspec(allocator) void *__cdecl 
#line 78
_expand(void * _Block, size_t _Size); 
#line 83
__declspec(dllimport) void __cdecl 
#line 84
_free_base(void * _Block); 
#line 88
__declspec(dllimport) void __cdecl 
#line 89
free(void * _Block); 
#line 94
__declspec(dllimport) __declspec(allocator) __declspec(restrict) void *__cdecl 
#line 95
_malloc_base(size_t _Size); 
#line 100
__declspec(dllimport) __declspec(allocator) __declspec(restrict) void *__cdecl 
#line 101
malloc(size_t _Size); 
#line 106
__declspec(dllimport) size_t __cdecl 
#line 107
_msize_base(void * _Block) noexcept; 
#line 112
__declspec(dllimport) size_t __cdecl 
#line 113
_msize(void * _Block); 
#line 118
__declspec(dllimport) __declspec(allocator) __declspec(restrict) void *__cdecl 
#line 119
_realloc_base(void * _Block, size_t _Size); 
#line 125
__declspec(dllimport) __declspec(allocator) __declspec(restrict) void *__cdecl 
#line 126
realloc(void * _Block, size_t _Size); 
#line 132
__declspec(dllimport) __declspec(allocator) __declspec(restrict) void *__cdecl 
#line 133
_recalloc_base(void * _Block, size_t _Count, size_t _Size); 
#line 140
__declspec(dllimport) __declspec(allocator) __declspec(restrict) void *__cdecl 
#line 141
_recalloc(void * _Block, size_t _Count, size_t _Size); 
#line 147
__declspec(dllimport) void __cdecl 
#line 148
_aligned_free(void * _Block); 
#line 153
__declspec(dllimport) __declspec(allocator) __declspec(restrict) void *__cdecl 
#line 154
_aligned_malloc(size_t _Size, size_t _Alignment); 
#line 160
__declspec(dllimport) __declspec(allocator) __declspec(restrict) void *__cdecl 
#line 161
_aligned_offset_malloc(size_t _Size, size_t _Alignment, size_t _Offset); 
#line 168
__declspec(dllimport) size_t __cdecl 
#line 169
_aligned_msize(void * _Block, size_t _Alignment, size_t _Offset); 
#line 176
__declspec(dllimport) __declspec(allocator) __declspec(restrict) void *__cdecl 
#line 177
_aligned_offset_realloc(void * _Block, size_t _Size, size_t _Alignment, size_t _Offset); 
#line 185
__declspec(dllimport) __declspec(allocator) __declspec(restrict) void *__cdecl 
#line 186
_aligned_offset_recalloc(void * _Block, size_t _Count, size_t _Size, size_t _Alignment, size_t _Offset); 
#line 195
__declspec(dllimport) __declspec(allocator) __declspec(restrict) void *__cdecl 
#line 196
_aligned_realloc(void * _Block, size_t _Size, size_t _Alignment); 
#line 203
__declspec(dllimport) __declspec(allocator) __declspec(restrict) void *__cdecl 
#line 204
_aligned_recalloc(void * _Block, size_t _Count, size_t _Size, size_t _Alignment); 
#line 232 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_malloc.h"
}__pragma( pack ( pop )) 
#line 234
#pragma warning(pop)
#line 16 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_search.h"
#pragma warning(push)
#pragma warning(disable: 4324 4514 4574 4710 4793 4820 4995 4996 28719 28726 28727 )
#line 20
__pragma( pack ( push, 8 )) extern "C" {
#line 23
typedef int (__cdecl *_CoreCrtSecureSearchSortCompareFunction)(void *, const void *, const void *); 
#line 24
typedef int (__cdecl *_CoreCrtNonSecureSearchSortCompareFunction)(const void *, const void *); 
#line 30
__declspec(dllimport) void *__cdecl bsearch_s(const void * _Key, const void * _Base, rsize_t _NumOfElements, rsize_t _SizeOfElements, _CoreCrtSecureSearchSortCompareFunction _CompareFunction, void * _Context); 
#line 39
__declspec(dllimport) void __cdecl qsort_s(void * _Base, rsize_t _NumOfElements, rsize_t _SizeOfElements, _CoreCrtSecureSearchSortCompareFunction _CompareFunction, void * _Context); 
#line 52 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_search.h"
__declspec(dllimport) void *__cdecl bsearch(const void * _Key, const void * _Base, size_t _NumOfElements, size_t _SizeOfElements, _CoreCrtNonSecureSearchSortCompareFunction _CompareFunction); 
#line 60
__declspec(dllimport) void __cdecl qsort(void * _Base, size_t _NumOfElements, size_t _SizeOfElements, _CoreCrtNonSecureSearchSortCompareFunction _CompareFunction); 
#line 68
__declspec(dllimport) void *__cdecl _lfind_s(const void * _Key, const void * _Base, unsigned * _NumOfElements, size_t _SizeOfElements, _CoreCrtSecureSearchSortCompareFunction _CompareFunction, void * _Context); 
#line 78
__declspec(dllimport) void *__cdecl _lfind(const void * _Key, const void * _Base, unsigned * _NumOfElements, unsigned _SizeOfElements, _CoreCrtNonSecureSearchSortCompareFunction _CompareFunction); 
#line 87
__declspec(dllimport) void *__cdecl _lsearch_s(const void * _Key, void * _Base, unsigned * _NumOfElements, size_t _SizeOfElements, _CoreCrtSecureSearchSortCompareFunction _CompareFunction, void * _Context); 
#line 97
__declspec(dllimport) void *__cdecl _lsearch(const void * _Key, void * _Base, unsigned * _NumOfElements, unsigned _SizeOfElements, _CoreCrtNonSecureSearchSortCompareFunction _CompareFunction); 
#line 195 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_search.h"
__declspec(dllimport) void *__cdecl lfind(const void * _Key, const void * _Base, unsigned * _NumOfElements, unsigned _SizeOfElements, _CoreCrtNonSecureSearchSortCompareFunction _CompareFunction); 
#line 204
__declspec(dllimport) void *__cdecl lsearch(const void * _Key, void * _Base, unsigned * _NumOfElements, unsigned _SizeOfElements, _CoreCrtNonSecureSearchSortCompareFunction _CompareFunction); 
#line 216 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_search.h"
}__pragma( pack ( pop )) 
#line 218
#pragma warning(pop)
#line 13 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_wstdlib.h"
#pragma warning(push)
#pragma warning(disable: 4324 4514 4574 4710 4793 4820 4995 4996 28719 28726 28727 )
#line 17
__pragma( pack ( push, 8 )) extern "C" {
#line 54
__declspec(dllimport) errno_t __cdecl _itow_s(int _Value, __wchar_t * _Buffer, size_t _BufferCount, int _Radix); 
#line 61
extern "C++" {template < size_t _Size > inline errno_t __cdecl _itow_s ( int _Value, wchar_t ( & _Buffer ) [ _Size ], int _Radix ) throw ( ) { return _itow_s ( _Value, _Buffer, _Size, _Radix ); }}
#line 68 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_wstdlib.h"
__declspec(dllimport) __wchar_t *__cdecl _itow(int _Value, __wchar_t * _Buffer, int _Radix); 
#line 77 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_wstdlib.h"
__declspec(dllimport) errno_t __cdecl _ltow_s(long _Value, __wchar_t * _Buffer, size_t _BufferCount, int _Radix); 
#line 84
extern "C++" {template < size_t _Size > inline errno_t __cdecl _ltow_s ( long _Value, wchar_t ( & _Buffer ) [ _Size ], int _Radix ) throw ( ) { return _ltow_s ( _Value, _Buffer, _Size, _Radix ); }}
#line 91 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_wstdlib.h"
__declspec(dllimport) __wchar_t *__cdecl _ltow(long _Value, __wchar_t * _Buffer, int _Radix); 
#line 99 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_wstdlib.h"
__declspec(dllimport) errno_t __cdecl _ultow_s(unsigned long _Value, __wchar_t * _Buffer, size_t _BufferCount, int _Radix); 
#line 106
extern "C++" {template < size_t _Size > inline errno_t __cdecl _ultow_s ( unsigned long _Value, wchar_t ( & _Buffer ) [ _Size ], int _Radix ) throw ( ) { return _ultow_s ( _Value, _Buffer, _Size, _Radix ); }}
#line 113 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_wstdlib.h"
__declspec(dllimport) __wchar_t *__cdecl _ultow(unsigned long _Value, __wchar_t * _Buffer, int _Radix); 
#line 121 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_wstdlib.h"
__declspec(dllimport) double __cdecl wcstod(const __wchar_t * _String, __wchar_t ** _EndPtr); 
#line 127
__declspec(dllimport) double __cdecl _wcstod_l(const __wchar_t * _String, __wchar_t ** _EndPtr, _locale_t _Locale); 
#line 134
__declspec(dllimport) long __cdecl wcstol(const __wchar_t * _String, __wchar_t ** _EndPtr, int _Radix); 
#line 141
__declspec(dllimport) long __cdecl _wcstol_l(const __wchar_t * _String, __wchar_t ** _EndPtr, int _Radix, _locale_t _Locale); 
#line 149
__declspec(dllimport) __int64 __cdecl wcstoll(const __wchar_t * _String, __wchar_t ** _EndPtr, int _Radix); 
#line 156
__declspec(dllimport) __int64 __cdecl _wcstoll_l(const __wchar_t * _String, __wchar_t ** _EndPtr, int _Radix, _locale_t _Locale); 
#line 164
__declspec(dllimport) unsigned long __cdecl wcstoul(const __wchar_t * _String, __wchar_t ** _EndPtr, int _Radix); 
#line 171
__declspec(dllimport) unsigned long __cdecl _wcstoul_l(const __wchar_t * _String, __wchar_t ** _EndPtr, int _Radix, _locale_t _Locale); 
#line 179
__declspec(dllimport) unsigned __int64 __cdecl wcstoull(const __wchar_t * _String, __wchar_t ** _EndPtr, int _Radix); 
#line 186
__declspec(dllimport) unsigned __int64 __cdecl _wcstoull_l(const __wchar_t * _String, __wchar_t ** _EndPtr, int _Radix, _locale_t _Locale); 
#line 194
__declspec(dllimport) long double __cdecl wcstold(const __wchar_t * _String, __wchar_t ** _EndPtr); 
#line 200
__declspec(dllimport) long double __cdecl _wcstold_l(const __wchar_t * _String, __wchar_t ** _EndPtr, _locale_t _Locale); 
#line 207
__declspec(dllimport) float __cdecl wcstof(const __wchar_t * _String, __wchar_t ** _EndPtr); 
#line 213
__declspec(dllimport) float __cdecl _wcstof_l(const __wchar_t * _String, __wchar_t ** _EndPtr, _locale_t _Locale); 
#line 220
__declspec(dllimport) double __cdecl _wtof(const __wchar_t * _String); 
#line 225
__declspec(dllimport) double __cdecl _wtof_l(const __wchar_t * _String, _locale_t _Locale); 
#line 231
__declspec(dllimport) int __cdecl _wtoi(const __wchar_t * _String); 
#line 236
__declspec(dllimport) int __cdecl _wtoi_l(const __wchar_t * _String, _locale_t _Locale); 
#line 242
__declspec(dllimport) long __cdecl _wtol(const __wchar_t * _String); 
#line 247
__declspec(dllimport) long __cdecl _wtol_l(const __wchar_t * _String, _locale_t _Locale); 
#line 253
__declspec(dllimport) __int64 __cdecl _wtoll(const __wchar_t * _String); 
#line 258
__declspec(dllimport) __int64 __cdecl _wtoll_l(const __wchar_t * _String, _locale_t _Locale); 
#line 264
__declspec(dllimport) errno_t __cdecl _i64tow_s(__int64 _Value, __wchar_t * _Buffer, size_t _BufferCount, int _Radix); 
#line 272
__declspec(dllimport) __wchar_t *__cdecl _i64tow(__int64 _Value, __wchar_t * _Buffer, int _Radix); 
#line 279
__declspec(dllimport) errno_t __cdecl _ui64tow_s(unsigned __int64 _Value, __wchar_t * _Buffer, size_t _BufferCount, int _Radix); 
#line 287
__declspec(dllimport) __wchar_t *__cdecl _ui64tow(unsigned __int64 _Value, __wchar_t * _Buffer, int _Radix); 
#line 294
__declspec(dllimport) __int64 __cdecl _wtoi64(const __wchar_t * _String); 
#line 299
__declspec(dllimport) __int64 __cdecl _wtoi64_l(const __wchar_t * _String, _locale_t _Locale); 
#line 305
__declspec(dllimport) __int64 __cdecl _wcstoi64(const __wchar_t * _String, __wchar_t ** _EndPtr, int _Radix); 
#line 312
__declspec(dllimport) __int64 __cdecl _wcstoi64_l(const __wchar_t * _String, __wchar_t ** _EndPtr, int _Radix, _locale_t _Locale); 
#line 320
__declspec(dllimport) unsigned __int64 __cdecl _wcstoui64(const __wchar_t * _String, __wchar_t ** _EndPtr, int _Radix); 
#line 327
__declspec(dllimport) unsigned __int64 __cdecl _wcstoui64_l(const __wchar_t * _String, __wchar_t ** _EndPtr, int _Radix, _locale_t _Locale); 
#line 339
__declspec(dllimport) __declspec(allocator) __wchar_t *__cdecl _wfullpath(__wchar_t * _Buffer, const __wchar_t * _Path, size_t _BufferCount); 
#line 348
__declspec(dllimport) errno_t __cdecl _wmakepath_s(__wchar_t * _Buffer, size_t _BufferCount, const __wchar_t * _Drive, const __wchar_t * _Dir, const __wchar_t * _Filename, const __wchar_t * _Ext); 
#line 357
extern "C++" {template < size_t _Size > inline errno_t __cdecl _wmakepath_s ( wchar_t ( & _Buffer ) [ _Size ], wchar_t const * _Drive, wchar_t const * _Dir, wchar_t const * _Filename, wchar_t const * _Ext ) throw ( ) { return _wmakepath_s ( _Buffer, _Size, _Drive, _Dir, _Filename, _Ext ); }}
#line 366 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_wstdlib.h"
__declspec(dllimport) void __cdecl _wmakepath(__wchar_t * _Buffer, const __wchar_t * _Drive, const __wchar_t * _Dir, const __wchar_t * _Filename, const __wchar_t * _Ext); 
#line 375 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_wstdlib.h"
__declspec(dllimport) void __cdecl _wperror(const __wchar_t * _ErrorMessage); 
#line 380
__declspec(dllimport) void __cdecl _wsplitpath(const __wchar_t * _FullPath, __wchar_t * _Drive, __wchar_t * _Dir, __wchar_t * _Filename, __wchar_t * _Ext); 
#line 388
__declspec(dllimport) errno_t __cdecl _wsplitpath_s(const __wchar_t * _FullPath, __wchar_t * _Drive, size_t _DriveCount, __wchar_t * _Dir, size_t _DirCount, __wchar_t * _Filename, size_t _FilenameCount, __wchar_t * _Ext, size_t _ExtCount); 
#line 400
extern "C++" {template < size_t _DriveSize, size_t _DirSize, size_t _NameSize, size_t _ExtSize > inline errno_t __cdecl _wsplitpath_s ( wchar_t const * _Path, wchar_t ( & _Drive ) [ _DriveSize ], wchar_t ( & _Dir ) [ _DirSize ], wchar_t ( & _Name ) [ _NameSize ], wchar_t ( & _Ext ) [ _ExtSize ] ) throw ( ) { return _wsplitpath_s ( _Path, _Drive, _DriveSize, _Dir, _DirSize, _Name, _NameSize, _Ext, _ExtSize ); }}
#line 409 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_wstdlib.h"
__declspec(dllimport) errno_t __cdecl _wdupenv_s(__wchar_t ** _Buffer, size_t * _BufferCount, const __wchar_t * _VarName); 
#line 418
__declspec(dllimport) __wchar_t *__cdecl _wgetenv(const __wchar_t * _VarName); 
#line 424
__declspec(dllimport) errno_t __cdecl _wgetenv_s(size_t * _RequiredCount, __wchar_t * _Buffer, size_t _BufferCount, const __wchar_t * _VarName); 
#line 431
extern "C++" {template < size_t _Size > inline errno_t __cdecl _wgetenv_s ( size_t * _RequiredCount, wchar_t ( & _Buffer ) [ _Size ], wchar_t const * _VarName ) throw ( ) { return _wgetenv_s ( _RequiredCount, _Buffer, _Size, _VarName ); }}
#line 440 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_wstdlib.h"
__declspec(dllimport) int __cdecl _wputenv(const __wchar_t * _EnvString); 
#line 445
__declspec(dllimport) errno_t __cdecl _wputenv_s(const __wchar_t * _Name, const __wchar_t * _Value); 
#line 450
__declspec(dllimport) errno_t __cdecl _wsearchenv_s(const __wchar_t * _Filename, const __wchar_t * _VarName, __wchar_t * _Buffer, size_t _BufferCount); 
#line 457
extern "C++" {template < size_t _Size > inline errno_t __cdecl _wsearchenv_s ( wchar_t const * _Filename, wchar_t const * _VarName, wchar_t ( & _ResultPath ) [ _Size ] ) throw ( ) { return _wsearchenv_s ( _Filename, _VarName, _ResultPath, _Size ); }}
#line 464 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_wstdlib.h"
__declspec(dllimport) void __cdecl _wsearchenv(const __wchar_t * _Filename, const __wchar_t * _VarName, __wchar_t * _ResultPath); 
#line 471 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_wstdlib.h"
__declspec(dllimport) int __cdecl _wsystem(const __wchar_t * _Command); 
#line 479 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_wstdlib.h"
}__pragma( pack ( pop )) 
#line 481
#pragma warning(pop)
#line 18 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\stdlib.h"
#pragma warning(push)
#pragma warning(disable: 4324 4514 4574 4710 4793 4820 4995 4996 28719 28726 28727 )
#line 22
__pragma( pack ( push, 8 )) extern "C" {
#line 38 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\stdlib.h"
__declspec(dllimport) void __cdecl _swab(char * _Buf1, char * _Buf2, int _SizeInBytes); 
#line 56
__declspec(dllimport) __declspec(noreturn) void __cdecl exit(int _Code); 
#line 57
__declspec(dllimport) __declspec(noreturn) void __cdecl _exit(int _Code); 
#line 58
__declspec(dllimport) __declspec(noreturn) void __cdecl _Exit(int _Code); 
#line 59
__declspec(dllimport) __declspec(noreturn) void __cdecl quick_exit(int _Code); 
#line 60
__declspec(dllimport) __declspec(noreturn) void __cdecl abort(); 
#line 67 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\stdlib.h"
__declspec(dllimport) unsigned __cdecl _set_abort_behavior(unsigned _Flags, unsigned _Mask); 
#line 77
typedef int (__cdecl *_onexit_t)(void); 
#line 144 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\stdlib.h"
int __cdecl atexit(void (__cdecl *)(void)); 
#line 145
_onexit_t __cdecl _onexit(_onexit_t _Func); 
#line 148 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\stdlib.h"
int __cdecl at_quick_exit(void (__cdecl *)(void)); 
#line 159
typedef void (__cdecl *_purecall_handler)(void); 
#line 162
typedef void (__cdecl *_invalid_parameter_handler)(const __wchar_t *, const __wchar_t *, const __wchar_t *, unsigned, uintptr_t); 
#line 171
_purecall_handler __cdecl _set_purecall_handler(_purecall_handler _Handler); 
#line 175
_purecall_handler __cdecl _get_purecall_handler(); 
#line 178
__declspec(dllimport) _invalid_parameter_handler __cdecl _set_invalid_parameter_handler(_invalid_parameter_handler _Handler); 
#line 182
__declspec(dllimport) _invalid_parameter_handler __cdecl _get_invalid_parameter_handler(); 
#line 184
__declspec(dllimport) _invalid_parameter_handler __cdecl _set_thread_local_invalid_parameter_handler(_invalid_parameter_handler _Handler); 
#line 188
__declspec(dllimport) _invalid_parameter_handler __cdecl _get_thread_local_invalid_parameter_handler(); 
#line 212 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\stdlib.h"
__declspec(dllimport) int __cdecl _set_error_mode(int _Mode); 
#line 217
__declspec(dllimport) int *__cdecl _errno(); 
#line 220
__declspec(dllimport) errno_t __cdecl _set_errno(int _Value); 
#line 221
__declspec(dllimport) errno_t __cdecl _get_errno(int * _Value); 
#line 223
__declspec(dllimport) unsigned long *__cdecl __doserrno(); 
#line 226
__declspec(dllimport) errno_t __cdecl _set_doserrno(unsigned long _Value); 
#line 227
__declspec(dllimport) errno_t __cdecl _get_doserrno(unsigned long * _Value); 
#line 230
__declspec(dllimport) char **__cdecl __sys_errlist(); 
#line 233
__declspec(dllimport) int *__cdecl __sys_nerr(); 
#line 236
__declspec(dllimport) void __cdecl perror(const char * _ErrMsg); 
#line 242 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\stdlib.h"
__declspec(dllimport) char **__cdecl __p__pgmptr(); 
#line 243
__declspec(dllimport) __wchar_t **__cdecl __p__wpgmptr(); 
#line 244
__declspec(dllimport) int *__cdecl __p__fmode(); 
#line 259 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\stdlib.h"
__declspec(dllimport) errno_t __cdecl _get_pgmptr(char ** _Value); 
#line 262
__declspec(dllimport) errno_t __cdecl _get_wpgmptr(__wchar_t ** _Value); 
#line 264
__declspec(dllimport) errno_t __cdecl _set_fmode(int _Mode); 
#line 266
__declspec(dllimport) errno_t __cdecl _get_fmode(int * _PMode); 
#line 279
typedef 
#line 275
struct _div_t { 
#line 277
int quot; 
#line 278
int rem; 
#line 279
} div_t; 
#line 285
typedef 
#line 281
struct _ldiv_t { 
#line 283
long quot; 
#line 284
long rem; 
#line 285
} ldiv_t; 
#line 291
typedef 
#line 287
struct _lldiv_t { 
#line 289
__int64 quot; 
#line 290
__int64 rem; 
#line 291
} lldiv_t; 
#line 293
int __cdecl abs(int _Number); 
#line 294
long __cdecl labs(long _Number); 
#line 295
__int64 __cdecl llabs(__int64 _Number); 
#line 296
__int64 __cdecl _abs64(__int64 _Number); 
#line 298
unsigned short __cdecl _byteswap_ushort(unsigned short _Number); 
#line 299
unsigned long __cdecl _byteswap_ulong(unsigned long _Number); 
#line 300
unsigned __int64 __cdecl _byteswap_uint64(unsigned __int64 _Number); 
#line 302
__declspec(dllimport) div_t __cdecl div(int _Numerator, int _Denominator); 
#line 303
__declspec(dllimport) ldiv_t __cdecl ldiv(long _Numerator, long _Denominator); 
#line 304
__declspec(dllimport) lldiv_t __cdecl lldiv(__int64 _Numerator, __int64 _Denominator); 
#line 308
#pragma warning(push)
#pragma warning(disable: 6540)
#line 311
unsigned __cdecl _rotl(unsigned _Value, int _Shift); 
#line 317
unsigned long __cdecl _lrotl(unsigned long _Value, int _Shift); 
#line 322
unsigned __int64 __cdecl _rotl64(unsigned __int64 _Value, int _Shift); 
#line 327
unsigned __cdecl _rotr(unsigned _Value, int _Shift); 
#line 333
unsigned long __cdecl _lrotr(unsigned long _Value, int _Shift); 
#line 338
unsigned __int64 __cdecl _rotr64(unsigned __int64 _Value, int _Shift); 
#line 343
#pragma warning(pop)
#line 350
__declspec(dllimport) void __cdecl srand(unsigned _Seed); 
#line 352
__declspec(dllimport) int __cdecl rand(); 
#line 361 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\stdlib.h"
extern "C++" {
#line 363
inline long abs(const long _X) throw() 
#line 364
{ 
#line 365
return labs(_X); 
#line 366
} 
#line 368
inline __int64 abs(const __int64 _X) throw() 
#line 369
{ 
#line 370
return llabs(_X); 
#line 371
} 
#line 373
inline ldiv_t div(const long _A1, const long _A2) throw() 
#line 374
{ 
#line 375
return ldiv(_A1, _A2); 
#line 376
} 
#line 378
inline lldiv_t div(const __int64 _A1, const __int64 _A2) throw() 
#line 379
{ 
#line 380
return lldiv(_A1, _A2); 
#line 381
} 
#line 382
}
#line 394 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\stdlib.h"
#pragma pack ( push, 4 )
#line 398
typedef 
#line 396
struct { 
#line 397
unsigned char ld[10]; 
#line 398
} _LDOUBLE; 
#pragma pack ( pop )
#line 418 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\stdlib.h"
typedef 
#line 416
struct { 
#line 417
double x; 
#line 418
} _CRT_DOUBLE; 
#line 423
typedef 
#line 421
struct { 
#line 422
float f; 
#line 423
} _CRT_FLOAT; 
#line 432
typedef 
#line 430
struct { 
#line 431
long double x; 
#line 432
} _LONGDOUBLE; 
#line 436
#pragma pack ( push, 4 )
#line 440
typedef 
#line 438
struct { 
#line 439
unsigned char ld12[12]; 
#line 440
} _LDBL12; 
#pragma pack ( pop )
#line 450
__declspec(dllimport) double __cdecl atof(const char * _String); 
#line 451
__declspec(dllimport) int __cdecl atoi(const char * _String); 
#line 452
__declspec(dllimport) long __cdecl atol(const char * _String); 
#line 453
__declspec(dllimport) __int64 __cdecl atoll(const char * _String); 
#line 454
__declspec(dllimport) __int64 __cdecl _atoi64(const char * _String); 
#line 456
__declspec(dllimport) double __cdecl _atof_l(const char * _String, _locale_t _Locale); 
#line 457
__declspec(dllimport) int __cdecl _atoi_l(const char * _String, _locale_t _Locale); 
#line 458
__declspec(dllimport) long __cdecl _atol_l(const char * _String, _locale_t _Locale); 
#line 459
__declspec(dllimport) __int64 __cdecl _atoll_l(const char * _String, _locale_t _Locale); 
#line 460
__declspec(dllimport) __int64 __cdecl _atoi64_l(const char * _String, _locale_t _Locale); 
#line 462
__declspec(dllimport) int __cdecl _atoflt(_CRT_FLOAT * _Result, const char * _String); 
#line 463
__declspec(dllimport) int __cdecl _atodbl(_CRT_DOUBLE * _Result, char * _String); 
#line 464
__declspec(dllimport) int __cdecl _atoldbl(_LDOUBLE * _Result, char * _String); 
#line 467
__declspec(dllimport) int __cdecl _atoflt_l(_CRT_FLOAT * _Result, const char * _String, _locale_t _Locale); 
#line 474
__declspec(dllimport) int __cdecl _atodbl_l(_CRT_DOUBLE * _Result, char * _String, _locale_t _Locale); 
#line 482
__declspec(dllimport) int __cdecl _atoldbl_l(_LDOUBLE * _Result, char * _String, _locale_t _Locale); 
#line 489
__declspec(dllimport) float __cdecl strtof(const char * _String, char ** _EndPtr); 
#line 495
__declspec(dllimport) float __cdecl _strtof_l(const char * _String, char ** _EndPtr, _locale_t _Locale); 
#line 502
__declspec(dllimport) double __cdecl strtod(const char * _String, char ** _EndPtr); 
#line 508
__declspec(dllimport) double __cdecl _strtod_l(const char * _String, char ** _EndPtr, _locale_t _Locale); 
#line 515
__declspec(dllimport) long double __cdecl strtold(const char * _String, char ** _EndPtr); 
#line 521
__declspec(dllimport) long double __cdecl _strtold_l(const char * _String, char ** _EndPtr, _locale_t _Locale); 
#line 528
__declspec(dllimport) long __cdecl strtol(const char * _String, char ** _EndPtr, int _Radix); 
#line 535
__declspec(dllimport) long __cdecl _strtol_l(const char * _String, char ** _EndPtr, int _Radix, _locale_t _Locale); 
#line 543
__declspec(dllimport) __int64 __cdecl strtoll(const char * _String, char ** _EndPtr, int _Radix); 
#line 550
__declspec(dllimport) __int64 __cdecl _strtoll_l(const char * _String, char ** _EndPtr, int _Radix, _locale_t _Locale); 
#line 558
__declspec(dllimport) unsigned long __cdecl strtoul(const char * _String, char ** _EndPtr, int _Radix); 
#line 565
__declspec(dllimport) unsigned long __cdecl _strtoul_l(const char * _String, char ** _EndPtr, int _Radix, _locale_t _Locale); 
#line 573
__declspec(dllimport) unsigned __int64 __cdecl strtoull(const char * _String, char ** _EndPtr, int _Radix); 
#line 580
__declspec(dllimport) unsigned __int64 __cdecl _strtoull_l(const char * _String, char ** _EndPtr, int _Radix, _locale_t _Locale); 
#line 588
__declspec(dllimport) __int64 __cdecl _strtoi64(const char * _String, char ** _EndPtr, int _Radix); 
#line 595
__declspec(dllimport) __int64 __cdecl _strtoi64_l(const char * _String, char ** _EndPtr, int _Radix, _locale_t _Locale); 
#line 603
__declspec(dllimport) unsigned __int64 __cdecl _strtoui64(const char * _String, char ** _EndPtr, int _Radix); 
#line 610
__declspec(dllimport) unsigned __int64 __cdecl _strtoui64_l(const char * _String, char ** _EndPtr, int _Radix, _locale_t _Locale); 
#line 626
__declspec(dllimport) errno_t __cdecl _itoa_s(int _Value, char * _Buffer, size_t _BufferCount, int _Radix); 
#line 633
extern "C++" {template < size_t _Size > inline errno_t __cdecl _itoa_s ( int _Value, char ( & _Buffer ) [ _Size ], int _Radix ) throw ( ) { return _itoa_s ( _Value, _Buffer, _Size, _Radix ); }}
#line 641 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\stdlib.h"
__declspec(dllimport) char *__cdecl _itoa(int _Value, char * _Buffer, int _Radix); 
#line 650 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\stdlib.h"
__declspec(dllimport) errno_t __cdecl _ltoa_s(long _Value, char * _Buffer, size_t _BufferCount, int _Radix); 
#line 657
extern "C++" {template < size_t _Size > inline errno_t __cdecl _ltoa_s ( long _Value, char ( & _Buffer ) [ _Size ], int _Radix ) throw ( ) { return _ltoa_s ( _Value, _Buffer, _Size, _Radix ); }}
#line 664 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\stdlib.h"
__declspec(dllimport) char *__cdecl _ltoa(long _Value, char * _Buffer, int _Radix); 
#line 673 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\stdlib.h"
__declspec(dllimport) errno_t __cdecl _ultoa_s(unsigned long _Value, char * _Buffer, size_t _BufferCount, int _Radix); 
#line 680
extern "C++" {template < size_t _Size > inline errno_t __cdecl _ultoa_s ( unsigned long _Value, char ( & _Buffer ) [ _Size ], int _Radix ) throw ( ) { return _ultoa_s ( _Value, _Buffer, _Size, _Radix ); }}
#line 687 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\stdlib.h"
__declspec(dllimport) char *__cdecl _ultoa(unsigned long _Value, char * _Buffer, int _Radix); 
#line 696 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\stdlib.h"
__declspec(dllimport) errno_t __cdecl _i64toa_s(__int64 _Value, char * _Buffer, size_t _BufferCount, int _Radix); 
#line 705
__declspec(dllimport) char *__cdecl _i64toa(__int64 _Value, char * _Buffer, int _Radix); 
#line 713
__declspec(dllimport) errno_t __cdecl _ui64toa_s(unsigned __int64 _Value, char * _Buffer, size_t _BufferCount, int _Radix); 
#line 721
__declspec(dllimport) char *__cdecl _ui64toa(unsigned __int64 _Value, char * _Buffer, int _Radix); 
#line 741
__declspec(dllimport) errno_t __cdecl _ecvt_s(char * _Buffer, size_t _BufferCount, double _Value, int _DigitCount, int * _PtDec, int * _PtSign); 
#line 750
extern "C++" {template < size_t _Size > inline errno_t __cdecl _ecvt_s ( char ( & _Buffer ) [ _Size ], double _Value, int _DigitCount, int * _PtDec, int * _PtSign ) throw ( ) { return _ecvt_s ( _Buffer, _Size, _Value, _DigitCount, _PtDec, _PtSign ); }}
#line 760 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\stdlib.h"
__declspec(dllimport) char *__cdecl _ecvt(double _Value, int _DigitCount, int * _PtDec, int * _PtSign); 
#line 769
__declspec(dllimport) errno_t __cdecl _fcvt_s(char * _Buffer, size_t _BufferCount, double _Value, int _FractionalDigitCount, int * _PtDec, int * _PtSign); 
#line 778
extern "C++" {template < size_t _Size > inline errno_t __cdecl _fcvt_s ( char ( & _Buffer ) [ _Size ], double _Value, int _FractionalDigitCount, int * _PtDec, int * _PtSign ) throw ( ) { return _fcvt_s ( _Buffer, _Size, _Value, _FractionalDigitCount, _PtDec, _PtSign ); }}
#line 790 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\stdlib.h"
__declspec(dllimport) char *__cdecl _fcvt(double _Value, int _FractionalDigitCount, int * _PtDec, int * _PtSign); 
#line 798
__declspec(dllimport) errno_t __cdecl _gcvt_s(char * _Buffer, size_t _BufferCount, double _Value, int _DigitCount); 
#line 805
extern "C++" {template < size_t _Size > inline errno_t __cdecl _gcvt_s ( char ( & _Buffer ) [ _Size ], double _Value, int _DigitCount ) throw ( ) { return _gcvt_s ( _Buffer, _Size, _Value, _DigitCount ); }}
#line 814 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\stdlib.h"
__declspec(dllimport) char *__cdecl _gcvt(double _Value, int _DigitCount, char * _Buffer); 
#line 843 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\stdlib.h"
__declspec(dllimport) int __cdecl ___mb_cur_max_func(); 
#line 846
__declspec(dllimport) int __cdecl ___mb_cur_max_l_func(_locale_t _Locale); 
#line 852 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\stdlib.h"
__declspec(dllimport) int __cdecl mblen(const char * _Ch, size_t _MaxCount); 
#line 858
__declspec(dllimport) int __cdecl _mblen_l(const char * _Ch, size_t _MaxCount, _locale_t _Locale); 
#line 866
__declspec(dllimport) size_t __cdecl _mbstrlen(const char * _String); 
#line 872
__declspec(dllimport) size_t __cdecl _mbstrlen_l(const char * _String, _locale_t _Locale); 
#line 879
__declspec(dllimport) size_t __cdecl _mbstrnlen(const char * _String, size_t _MaxCount); 
#line 886
__declspec(dllimport) size_t __cdecl _mbstrnlen_l(const char * _String, size_t _MaxCount, _locale_t _Locale); 
#line 893
__declspec(dllimport) int __cdecl mbtowc(__wchar_t * _DstCh, const char * _SrcCh, size_t _SrcSizeInBytes); 
#line 900
__declspec(dllimport) int __cdecl _mbtowc_l(__wchar_t * _DstCh, const char * _SrcCh, size_t _SrcSizeInBytes, _locale_t _Locale); 
#line 908
__declspec(dllimport) errno_t __cdecl mbstowcs_s(size_t * _PtNumOfCharConverted, __wchar_t * _DstBuf, size_t _SizeInWords, const char * _SrcBuf, size_t _MaxCount); 
#line 916
extern "C++" {template < size_t _Size > inline errno_t __cdecl mbstowcs_s ( size_t * _PtNumOfCharConverted, wchar_t ( & _Dest ) [ _Size ], char const * _Source, size_t _MaxCount ) throw ( ) { return mbstowcs_s ( _PtNumOfCharConverted, _Dest, _Size, _Source, _MaxCount ); }}
#line 924 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\stdlib.h"
__declspec(dllimport) size_t __cdecl mbstowcs(__wchar_t * _Dest, const char * _Source, size_t _MaxCount); 
#line 932 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\stdlib.h"
__declspec(dllimport) errno_t __cdecl _mbstowcs_s_l(size_t * _PtNumOfCharConverted, __wchar_t * _DstBuf, size_t _SizeInWords, const char * _SrcBuf, size_t _MaxCount, _locale_t _Locale); 
#line 941
extern "C++" {template < size_t _Size > inline errno_t __cdecl _mbstowcs_s_l ( size_t * _PtNumOfCharConverted, wchar_t ( & _Dest ) [ _Size ], char const * _Source, size_t _MaxCount, _locale_t _Locale ) throw ( ) { return _mbstowcs_s_l ( _PtNumOfCharConverted, _Dest, _Size, _Source, _MaxCount, _Locale ); }}
#line 950 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\stdlib.h"
__declspec(dllimport) size_t __cdecl _mbstowcs_l(__wchar_t * _Dest, const char * _Source, size_t _MaxCount, _locale_t _Locale); 
#line 963 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\stdlib.h"
__declspec(dllimport) int __cdecl wctomb(char * _MbCh, __wchar_t _WCh); 
#line 969
__declspec(dllimport) int __cdecl _wctomb_l(char * _MbCh, __wchar_t _WCh, _locale_t _Locale); 
#line 978
__declspec(dllimport) errno_t __cdecl wctomb_s(int * _SizeConverted, char * _MbCh, rsize_t _SizeInBytes, __wchar_t _WCh); 
#line 988 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\stdlib.h"
__declspec(dllimport) errno_t __cdecl _wctomb_s_l(int * _SizeConverted, char * _MbCh, size_t _SizeInBytes, __wchar_t _WCh, _locale_t _Locale); 
#line 996
__declspec(dllimport) errno_t __cdecl wcstombs_s(size_t * _PtNumOfCharConverted, char * _Dst, size_t _DstSizeInBytes, const __wchar_t * _Src, size_t _MaxCountInBytes); 
#line 1004
extern "C++" {template < size_t _Size > inline errno_t __cdecl wcstombs_s ( size_t * _PtNumOfCharConverted, char ( & _Dest ) [ _Size ], wchar_t const * _Source, size_t _MaxCount ) throw ( ) { return wcstombs_s ( _PtNumOfCharConverted, _Dest, _Size, _Source, _MaxCount ); }}
#line 1012 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\stdlib.h"
__declspec(dllimport) size_t __cdecl wcstombs(char * _Dest, const __wchar_t * _Source, size_t _MaxCount); 
#line 1020 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\stdlib.h"
__declspec(dllimport) errno_t __cdecl _wcstombs_s_l(size_t * _PtNumOfCharConverted, char * _Dst, size_t _DstSizeInBytes, const __wchar_t * _Src, size_t _MaxCountInBytes, _locale_t _Locale); 
#line 1029
extern "C++" {template < size_t _Size > inline errno_t __cdecl _wcstombs_s_l ( size_t * _PtNumOfCharConverted, char ( & _Dest ) [ _Size ], wchar_t const * _Source, size_t _MaxCount, _locale_t _Locale ) throw ( ) { return _wcstombs_s_l ( _PtNumOfCharConverted, _Dest, _Size, _Source, _MaxCount, _Locale ); }}
#line 1038 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\stdlib.h"
__declspec(dllimport) size_t __cdecl _wcstombs_l(char * _Dest, const __wchar_t * _Source, size_t _MaxCount, _locale_t _Locale); 
#line 1068 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\stdlib.h"
__declspec(dllimport) __declspec(allocator) char *__cdecl _fullpath(char * _Buffer, const char * _Path, size_t _BufferCount); 
#line 1077
__declspec(dllimport) errno_t __cdecl _makepath_s(char * _Buffer, size_t _BufferCount, const char * _Drive, const char * _Dir, const char * _Filename, const char * _Ext); 
#line 1086
extern "C++" {template < size_t _Size > inline errno_t __cdecl _makepath_s ( char ( & _Buffer ) [ _Size ], char const * _Drive, char const * _Dir, char const * _Filename, char const * _Ext ) throw ( ) { return _makepath_s ( _Buffer, _Size, _Drive, _Dir, _Filename, _Ext ); }}
#line 1095 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\stdlib.h"
__declspec(dllimport) void __cdecl _makepath(char * _Buffer, const char * _Drive, const char * _Dir, const char * _Filename, const char * _Ext); 
#line 1105 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\stdlib.h"
__declspec(dllimport) void __cdecl _splitpath(const char * _FullPath, char * _Drive, char * _Dir, char * _Filename, char * _Ext); 
#line 1114
__declspec(dllimport) errno_t __cdecl _splitpath_s(const char * _FullPath, char * _Drive, size_t _DriveCount, char * _Dir, size_t _DirCount, char * _Filename, size_t _FilenameCount, char * _Ext, size_t _ExtCount); 
#line 1126
extern "C++" {template < size_t _DriveSize, size_t _DirSize, size_t _NameSize, size_t _ExtSize > inline errno_t __cdecl _splitpath_s ( char const * _Dest, char ( & _Drive ) [ _DriveSize ], char ( & _Dir ) [ _DirSize ], char ( & _Name ) [ _NameSize ], char ( & _Ext ) [ _ExtSize ] ) throw ( ) { return _splitpath_s ( _Dest, _Drive, _DriveSize, _Dir, _DirSize, _Name, _NameSize, _Ext, _ExtSize ); }}
#line 1132
__declspec(dllimport) errno_t __cdecl getenv_s(size_t * _RequiredCount, char * _Buffer, rsize_t _BufferCount, const char * _VarName); 
#line 1144 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\stdlib.h"
__declspec(dllimport) int *__cdecl __p___argc(); 
#line 1145
__declspec(dllimport) char ***__cdecl __p___argv(); 
#line 1146
__declspec(dllimport) __wchar_t ***__cdecl __p___wargv(); 
#line 1158 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\stdlib.h"
__declspec(dllimport) char ***__cdecl __p__environ(); 
#line 1159
__declspec(dllimport) __wchar_t ***__cdecl __p__wenviron(); 
#line 1184 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\stdlib.h"
__declspec(dllimport) char *__cdecl getenv(const char * _VarName); 
#line 1188
extern "C++" {template < size_t _Size > inline errno_t __cdecl getenv_s ( size_t * _RequiredCount, char ( & _Buffer ) [ _Size ], char const * _VarName ) throw ( ) { return getenv_s ( _RequiredCount, _Buffer, _Size, _VarName ); }}
#line 1201 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\stdlib.h"
__declspec(dllimport) errno_t __cdecl _dupenv_s(char ** _Buffer, size_t * _BufferCount, const char * _VarName); 
#line 1211 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\stdlib.h"
__declspec(dllimport) int __cdecl system(const char * _Command); 
#line 1217
#pragma warning(push)
#pragma warning(disable: 6540)
#line 1221
__declspec(dllimport) int __cdecl _putenv(const char * _EnvString); 
#line 1226
__declspec(dllimport) errno_t __cdecl _putenv_s(const char * _Name, const char * _Value); 
#line 1231
#pragma warning(pop)
#line 1233
__declspec(dllimport) errno_t __cdecl _searchenv_s(const char * _Filename, const char * _VarName, char * _Buffer, size_t _BufferCount); 
#line 1240
extern "C++" {template < size_t _Size > inline errno_t __cdecl _searchenv_s ( char const * _Filename, char const * _VarName, char ( & _Buffer ) [ _Size ] ) throw ( ) { return _searchenv_s ( _Filename, _VarName, _Buffer, _Size ); }}
#line 1247 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\stdlib.h"
__declspec(dllimport) void __cdecl _searchenv(const char * _Filename, const char * _VarName, char * _Buffer); 
#line 1255 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\stdlib.h"
__declspec(deprecated("This function or variable has been superceded by newer library or operating system functionality. Consider using SetErrorMode in" "stead. See online help for details.")) 
#line 1256
__declspec(dllimport) void __cdecl _seterrormode(int _Mode); 
#line 1260
__declspec(deprecated("This function or variable has been superceded by newer library or operating system functionality. Consider using Beep instead. S" "ee online help for details.")) 
#line 1261
__declspec(dllimport) void __cdecl _beep(unsigned _Frequency, unsigned _Duration); 
#line 1266
__declspec(deprecated("This function or variable has been superceded by newer library or operating system functionality. Consider using Sleep instead. " "See online help for details.")) 
#line 1267
__declspec(dllimport) void __cdecl _sleep(unsigned long _Duration); 
#line 1289 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\stdlib.h"
#pragma warning(push)
#pragma warning(disable: 4141)
#line 1293
__declspec(dllimport) char *__cdecl ecvt(double _Value, int _DigitCount, int * _PtDec, int * _PtSign); 
#line 1301
__declspec(dllimport) char *__cdecl fcvt(double _Value, int _FractionalDigitCount, int * _PtDec, int * _PtSign); 
#line 1309
__declspec(dllimport) char *__cdecl gcvt(double _Value, int _DigitCount, char * _DstBuf); 
#line 1316
__declspec(dllimport) char *__cdecl itoa(int _Value, char * _Buffer, int _Radix); 
#line 1323
__declspec(dllimport) char *__cdecl ltoa(long _Value, char * _Buffer, int _Radix); 
#line 1331
__declspec(dllimport) void __cdecl swab(char * _Buf1, char * _Buf2, int _SizeInBytes); 
#line 1338
__declspec(dllimport) char *__cdecl ultoa(unsigned long _Value, char * _Buffer, int _Radix); 
#line 1347
__declspec(dllimport) int __cdecl putenv(const char * _EnvString); 
#line 1351
#pragma warning(pop)
#line 1353
_onexit_t __cdecl onexit(_onexit_t _Func); 
#line 1359 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\stdlib.h"
}__pragma( pack ( pop )) 
#line 1361
#pragma warning(pop)
#line 179 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\cuda_device_runtime_api.h"
extern "C" {
#line 186
extern cudaError_t __stdcall __cudaDeviceSynchronizeDeprecationAvoidance(); 
#line 235
extern cudaError_t __stdcall __cudaCDP2DeviceGetAttribute(int * value, cudaDeviceAttr attr, int device); 
#line 236
extern cudaError_t __stdcall __cudaCDP2DeviceGetLimit(size_t * pValue, cudaLimit limit); 
#line 237
extern cudaError_t __stdcall __cudaCDP2DeviceGetCacheConfig(cudaFuncCache * pCacheConfig); 
#line 238
extern cudaError_t __stdcall __cudaCDP2DeviceGetSharedMemConfig(cudaSharedMemConfig * pConfig); 
#line 239
extern cudaError_t __stdcall __cudaCDP2GetLastError(); 
#line 240
extern cudaError_t __stdcall __cudaCDP2PeekAtLastError(); 
#line 241
extern const char *__stdcall __cudaCDP2GetErrorString(cudaError_t error); 
#line 242
extern const char *__stdcall __cudaCDP2GetErrorName(cudaError_t error); 
#line 243
extern cudaError_t __stdcall __cudaCDP2GetDeviceCount(int * count); 
#line 244
extern cudaError_t __stdcall __cudaCDP2GetDevice(int * device); 
#line 245
extern cudaError_t __stdcall __cudaCDP2StreamCreateWithFlags(cudaStream_t * pStream, unsigned flags); 
#line 246
extern cudaError_t __stdcall __cudaCDP2StreamDestroy(cudaStream_t stream); 
#line 247
extern cudaError_t __stdcall __cudaCDP2StreamWaitEvent(cudaStream_t stream, cudaEvent_t event, unsigned flags); 
#line 248
extern cudaError_t __stdcall __cudaCDP2StreamWaitEvent_ptsz(cudaStream_t stream, cudaEvent_t event, unsigned flags); 
#line 249
extern cudaError_t __stdcall __cudaCDP2EventCreateWithFlags(cudaEvent_t * event, unsigned flags); 
#line 250
extern cudaError_t __stdcall __cudaCDP2EventRecord(cudaEvent_t event, cudaStream_t stream); 
#line 251
extern cudaError_t __stdcall __cudaCDP2EventRecord_ptsz(cudaEvent_t event, cudaStream_t stream); 
#line 252
extern cudaError_t __stdcall __cudaCDP2EventRecordWithFlags(cudaEvent_t event, cudaStream_t stream, unsigned flags); 
#line 253
extern cudaError_t __stdcall __cudaCDP2EventRecordWithFlags_ptsz(cudaEvent_t event, cudaStream_t stream, unsigned flags); 
#line 254
extern cudaError_t __stdcall __cudaCDP2EventDestroy(cudaEvent_t event); 
#line 255
extern cudaError_t __stdcall __cudaCDP2FuncGetAttributes(cudaFuncAttributes * attr, const void * func); 
#line 256
extern cudaError_t __stdcall __cudaCDP2Free(void * devPtr); 
#line 257
extern cudaError_t __stdcall __cudaCDP2Malloc(void ** devPtr, size_t size); 
#line 258
extern cudaError_t __stdcall __cudaCDP2MemcpyAsync(void * dst, const void * src, size_t count, cudaMemcpyKind kind, cudaStream_t stream); 
#line 259
extern cudaError_t __stdcall __cudaCDP2MemcpyAsync_ptsz(void * dst, const void * src, size_t count, cudaMemcpyKind kind, cudaStream_t stream); 
#line 260
extern cudaError_t __stdcall __cudaCDP2Memcpy2DAsync(void * dst, size_t dpitch, const void * src, size_t spitch, size_t width, size_t height, cudaMemcpyKind kind, cudaStream_t stream); 
#line 261
extern cudaError_t __stdcall __cudaCDP2Memcpy2DAsync_ptsz(void * dst, size_t dpitch, const void * src, size_t spitch, size_t width, size_t height, cudaMemcpyKind kind, cudaStream_t stream); 
#line 262
extern cudaError_t __stdcall __cudaCDP2Memcpy3DAsync(const cudaMemcpy3DParms * p, cudaStream_t stream); 
#line 263
extern cudaError_t __stdcall __cudaCDP2Memcpy3DAsync_ptsz(const cudaMemcpy3DParms * p, cudaStream_t stream); 
#line 264
extern cudaError_t __stdcall __cudaCDP2MemsetAsync(void * devPtr, int value, size_t count, cudaStream_t stream); 
#line 265
extern cudaError_t __stdcall __cudaCDP2MemsetAsync_ptsz(void * devPtr, int value, size_t count, cudaStream_t stream); 
#line 266
extern cudaError_t __stdcall __cudaCDP2Memset2DAsync(void * devPtr, size_t pitch, int value, size_t width, size_t height, cudaStream_t stream); 
#line 267
extern cudaError_t __stdcall __cudaCDP2Memset2DAsync_ptsz(void * devPtr, size_t pitch, int value, size_t width, size_t height, cudaStream_t stream); 
#line 268
extern cudaError_t __stdcall __cudaCDP2Memset3DAsync(cudaPitchedPtr pitchedDevPtr, int value, cudaExtent extent, cudaStream_t stream); 
#line 269
extern cudaError_t __stdcall __cudaCDP2Memset3DAsync_ptsz(cudaPitchedPtr pitchedDevPtr, int value, cudaExtent extent, cudaStream_t stream); 
#line 270
extern cudaError_t __stdcall __cudaCDP2RuntimeGetVersion(int * runtimeVersion); 
#line 271
extern void *__stdcall __cudaCDP2GetParameterBuffer(size_t alignment, size_t size); 
#line 272
extern void *__stdcall __cudaCDP2GetParameterBufferV2(void * func, dim3 gridDimension, dim3 blockDimension, unsigned sharedMemSize); 
#line 273
extern cudaError_t __stdcall __cudaCDP2LaunchDevice_ptsz(void * func, void * parameterBuffer, dim3 gridDimension, dim3 blockDimension, unsigned sharedMemSize, cudaStream_t stream); 
#line 274
extern cudaError_t __stdcall __cudaCDP2LaunchDeviceV2_ptsz(void * parameterBuffer, cudaStream_t stream); 
#line 275
extern cudaError_t __stdcall __cudaCDP2LaunchDevice(void * func, void * parameterBuffer, dim3 gridDimension, dim3 blockDimension, unsigned sharedMemSize, cudaStream_t stream); 
#line 276
extern cudaError_t __stdcall __cudaCDP2LaunchDeviceV2(void * parameterBuffer, cudaStream_t stream); 
#line 277
extern cudaError_t __stdcall __cudaCDP2OccupancyMaxActiveBlocksPerMultiprocessor(int * numBlocks, const void * func, int blockSize, size_t dynamicSmemSize); 
#line 278
extern cudaError_t __stdcall __cudaCDP2OccupancyMaxActiveBlocksPerMultiprocessorWithFlags(int * numBlocks, const void * func, int blockSize, size_t dynamicSmemSize, unsigned flags); 
#line 281
extern cudaError_t __stdcall cudaGraphLaunch(cudaGraphExec_t graphExec, cudaStream_t stream); 
#line 300 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\cuda_device_runtime_api.h"
static inline cudaGraphExec_t __stdcall cudaGetCurrentGraphExec() {int volatile ___ = 1;::exit(___);}
#if 0
#line 301
{ 
#line 302
unsigned __int64 current_graph_exec; 
#line 303
__asm mov.u64 %0, %%current_graph_exec;
return (cudaGraphExec_t)current_graph_exec; 
#line 305
} 
#endif
#line 323 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\cuda_device_runtime_api.h"
static inline void __stdcall cudaTriggerProgrammaticLaunchCompletion() {int volatile ___ = 1;::exit(___);}
#if 0
#line 324
{ 
#line 325
__asm griddepcontrol.launch_dependents;
} 
#endif
#line 339 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\cuda_device_runtime_api.h"
static inline void __stdcall cudaGridDependencySynchronize() {int volatile ___ = 1;::exit(___);}
#if 0
#line 340
{ 
#line 341
__asm griddepcontrol.wait;
} 
#endif
#line 346 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\cuda_device_runtime_api.h"
extern unsigned __int64 __stdcall cudaCGGetIntrinsicHandle(cudaCGScope scope); 
#line 347
extern cudaError_t __stdcall cudaCGSynchronize(unsigned __int64 handle, unsigned flags); 
#line 348
extern cudaError_t __stdcall cudaCGSynchronizeGrid(unsigned __int64 handle, unsigned flags); 
#line 349
extern cudaError_t __stdcall cudaCGGetSize(unsigned * numThreads, unsigned * numGrids, unsigned __int64 handle); 
#line 350
extern cudaError_t __stdcall cudaCGGetRank(unsigned * threadRank, unsigned * gridRank, unsigned __int64 handle); 
#line 572
static __inline void *__stdcall cudaGetParameterBuffer(size_t alignment, size_t size) {int volatile ___ = 1;(void)alignment;(void)size;::exit(___);}
#if 0
#line 573
{ 
#line 574
return __cudaCDP2GetParameterBuffer(alignment, size); 
#line 575
} 
#endif
#line 608 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\cuda_device_runtime_api.h"
static __inline void *__stdcall cudaGetParameterBufferV2(void *func, dim3 gridDimension, dim3 blockDimension, unsigned sharedMemSize) {int volatile ___ = 1;(void)func;(void)gridDimension;(void)blockDimension;(void)sharedMemSize;::exit(___);}
#if 0
#line 609
{ 
#line 610
return __cudaCDP2GetParameterBufferV2(func, gridDimension, blockDimension, sharedMemSize); 
#line 611
} 
#endif
#line 618 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\cuda_device_runtime_api.h"
static __inline cudaError_t __stdcall cudaLaunchDevice_ptsz(void *func, void *parameterBuffer, dim3 gridDimension, dim3 blockDimension, unsigned sharedMemSize, cudaStream_t stream) {int volatile ___ = 1;(void)func;(void)parameterBuffer;(void)gridDimension;(void)blockDimension;(void)sharedMemSize;(void)stream;::exit(___);}
#if 0
#line 619
{ 
#line 620
return __cudaCDP2LaunchDevice_ptsz(func, parameterBuffer, gridDimension, blockDimension, sharedMemSize, stream); 
#line 621
} 
#endif
#line 623 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\cuda_device_runtime_api.h"
static __inline cudaError_t __stdcall cudaLaunchDeviceV2_ptsz(void *parameterBuffer, cudaStream_t stream) {int volatile ___ = 1;(void)parameterBuffer;(void)stream;::exit(___);}
#if 0
#line 624
{ 
#line 625
return __cudaCDP2LaunchDeviceV2_ptsz(parameterBuffer, stream); 
#line 626
} 
#endif
#line 658 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\cuda_device_runtime_api.h"
static __inline cudaError_t __stdcall cudaLaunchDevice(void *func, void *parameterBuffer, dim3 gridDimension, dim3 blockDimension, unsigned sharedMemSize, cudaStream_t stream) {int volatile ___ = 1;(void)func;(void)parameterBuffer;(void)gridDimension;(void)blockDimension;(void)sharedMemSize;(void)stream;::exit(___);}
#if 0
#line 659
{ 
#line 660
return __cudaCDP2LaunchDevice(func, parameterBuffer, gridDimension, blockDimension, sharedMemSize, stream); 
#line 661
} 
#endif
#line 663 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\cuda_device_runtime_api.h"
static __inline cudaError_t __stdcall cudaLaunchDeviceV2(void *parameterBuffer, cudaStream_t stream) {int volatile ___ = 1;(void)parameterBuffer;(void)stream;::exit(___);}
#if 0
#line 664
{ 
#line 665
return __cudaCDP2LaunchDeviceV2(parameterBuffer, stream); 
#line 666
} 
#endif
#line 720 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\cuda_device_runtime_api.h"
}
#line 722
template< class T> static __inline cudaError_t cudaMalloc(T ** devPtr, size_t size); 
#line 723
template< class T> static __inline cudaError_t cudaFuncGetAttributes(cudaFuncAttributes * attr, T * entry); 
#line 724
template< class T> static __inline cudaError_t cudaOccupancyMaxActiveBlocksPerMultiprocessor(int * numBlocks, T func, int blockSize, size_t dynamicSmemSize); 
#line 725
template< class T> static __inline cudaError_t cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags(int * numBlocks, T func, int blockSize, size_t dynamicSmemSize, unsigned flags); 
#line 272 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\cuda_runtime_api.h"
extern "C" {
#line 312 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaDeviceReset(); 
#line 334
extern cudaError_t __stdcall cudaDeviceSynchronize(); 
#line 420
extern cudaError_t __stdcall cudaDeviceSetLimit(cudaLimit limit, size_t value); 
#line 456
extern cudaError_t __stdcall cudaDeviceGetLimit(size_t * pValue, cudaLimit limit); 
#line 479
extern cudaError_t __stdcall cudaDeviceGetTexture1DLinearMaxWidth(size_t * maxWidthInElements, const cudaChannelFormatDesc * fmtDesc, int device); 
#line 513 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaDeviceGetCacheConfig(cudaFuncCache * pCacheConfig); 
#line 550
extern cudaError_t __stdcall cudaDeviceGetStreamPriorityRange(int * leastPriority, int * greatestPriority); 
#line 594
extern cudaError_t __stdcall cudaDeviceSetCacheConfig(cudaFuncCache cacheConfig); 
#line 625
extern cudaError_t __stdcall cudaDeviceGetSharedMemConfig(cudaSharedMemConfig * pConfig); 
#line 669
extern cudaError_t __stdcall cudaDeviceSetSharedMemConfig(cudaSharedMemConfig config); 
#line 696
extern cudaError_t __stdcall cudaDeviceGetByPCIBusId(int * device, const char * pciBusId); 
#line 726
extern cudaError_t __stdcall cudaDeviceGetPCIBusId(char * pciBusId, int len, int device); 
#line 776
extern cudaError_t __stdcall cudaIpcGetEventHandle(cudaIpcEventHandle_t * handle, cudaEvent_t event); 
#line 819
extern cudaError_t __stdcall cudaIpcOpenEventHandle(cudaEvent_t * event, cudaIpcEventHandle_t handle); 
#line 863
extern cudaError_t __stdcall cudaIpcGetMemHandle(cudaIpcMemHandle_t * handle, void * devPtr); 
#line 929
extern cudaError_t __stdcall cudaIpcOpenMemHandle(void ** devPtr, cudaIpcMemHandle_t handle, unsigned flags); 
#line 967
extern cudaError_t __stdcall cudaIpcCloseMemHandle(void * devPtr); 
#line 999
extern cudaError_t __stdcall cudaDeviceFlushGPUDirectRDMAWrites(cudaFlushGPUDirectRDMAWritesTarget target, cudaFlushGPUDirectRDMAWritesScope scope); 
#line 1042 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\cuda_runtime_api.h"
__declspec(deprecated) extern cudaError_t __stdcall cudaThreadExit(); 
#line 1068
__declspec(deprecated) extern cudaError_t __stdcall cudaThreadSynchronize(); 
#line 1117
__declspec(deprecated) extern cudaError_t __stdcall cudaThreadSetLimit(cudaLimit limit, size_t value); 
#line 1150
__declspec(deprecated) extern cudaError_t __stdcall cudaThreadGetLimit(size_t * pValue, cudaLimit limit); 
#line 1186
__declspec(deprecated) extern cudaError_t __stdcall cudaThreadGetCacheConfig(cudaFuncCache * pCacheConfig); 
#line 1233
__declspec(deprecated) extern cudaError_t __stdcall cudaThreadSetCacheConfig(cudaFuncCache cacheConfig); 
#line 1298
extern cudaError_t __stdcall cudaGetLastError(); 
#line 1349
extern cudaError_t __stdcall cudaPeekAtLastError(); 
#line 1365
extern const char *__stdcall cudaGetErrorName(cudaError_t error); 
#line 1381
extern const char *__stdcall cudaGetErrorString(cudaError_t error); 
#line 1410
extern cudaError_t __stdcall cudaGetDeviceCount(int * count); 
#line 1715
extern cudaError_t __stdcall cudaGetDeviceProperties_v2(cudaDeviceProp * prop, int device); 
#line 1917
extern cudaError_t __stdcall cudaDeviceGetAttribute(int * value, cudaDeviceAttr attr, int device); 
#line 1935
extern cudaError_t __stdcall cudaDeviceGetDefaultMemPool(cudaMemPool_t * memPool, int device); 
#line 1959
extern cudaError_t __stdcall cudaDeviceSetMemPool(int device, cudaMemPool_t memPool); 
#line 1979
extern cudaError_t __stdcall cudaDeviceGetMemPool(cudaMemPool_t * memPool, int device); 
#line 2041
extern cudaError_t __stdcall cudaDeviceGetNvSciSyncAttributes(void * nvSciSyncAttrList, int device, int flags); 
#line 2081
extern cudaError_t __stdcall cudaDeviceGetP2PAttribute(int * value, cudaDeviceP2PAttr attr, int srcDevice, int dstDevice); 
#line 2103
extern cudaError_t __stdcall cudaChooseDevice(int * device, const cudaDeviceProp * prop); 
#line 2132
extern cudaError_t __stdcall cudaInitDevice(int device, unsigned deviceFlags, unsigned flags); 
#line 2178
extern cudaError_t __stdcall cudaSetDevice(int device); 
#line 2200
extern cudaError_t __stdcall cudaGetDevice(int * device); 
#line 2231
extern cudaError_t __stdcall cudaSetValidDevices(int * device_arr, int len); 
#line 2297
extern cudaError_t __stdcall cudaSetDeviceFlags(unsigned flags); 
#line 2342
extern cudaError_t __stdcall cudaGetDeviceFlags(unsigned * flags); 
#line 2382
extern cudaError_t __stdcall cudaStreamCreate(cudaStream_t * pStream); 
#line 2414
extern cudaError_t __stdcall cudaStreamCreateWithFlags(cudaStream_t * pStream, unsigned flags); 
#line 2460
extern cudaError_t __stdcall cudaStreamCreateWithPriority(cudaStream_t * pStream, unsigned flags, int priority); 
#line 2487
extern cudaError_t __stdcall cudaStreamGetPriority(cudaStream_t hStream, int * priority); 
#line 2512
extern cudaError_t __stdcall cudaStreamGetFlags(cudaStream_t hStream, unsigned * flags); 
#line 2549
extern cudaError_t __stdcall cudaStreamGetId(cudaStream_t hStream, unsigned __int64 * streamId); 
#line 2564
extern cudaError_t __stdcall cudaCtxResetPersistingL2Cache(); 
#line 2584
extern cudaError_t __stdcall cudaStreamCopyAttributes(cudaStream_t dst, cudaStream_t src); 
#line 2605
extern cudaError_t __stdcall cudaStreamGetAttribute(cudaStream_t hStream, cudaLaunchAttributeID attr, cudaLaunchAttributeValue * value_out); 
#line 2629
extern cudaError_t __stdcall cudaStreamSetAttribute(cudaStream_t hStream, cudaLaunchAttributeID attr, const cudaLaunchAttributeValue * value); 
#line 2663
extern cudaError_t __stdcall cudaStreamDestroy(cudaStream_t stream); 
#line 2694
extern cudaError_t __stdcall cudaStreamWaitEvent(cudaStream_t stream, cudaEvent_t event, unsigned flags = 0); 
#line 2702
typedef void (__stdcall *cudaStreamCallback_t)(cudaStream_t stream, cudaError_t status, void * userData); 
#line 2769
extern cudaError_t __stdcall cudaStreamAddCallback(cudaStream_t stream, cudaStreamCallback_t callback, void * userData, unsigned flags); 
#line 2793
extern cudaError_t __stdcall cudaStreamSynchronize(cudaStream_t stream); 
#line 2818
extern cudaError_t __stdcall cudaStreamQuery(cudaStream_t stream); 
#line 2902
extern cudaError_t __stdcall cudaStreamAttachMemAsync(cudaStream_t stream, void * devPtr, size_t length = 0, unsigned flags = 4); 
#line 2941 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaStreamBeginCapture(cudaStream_t stream, cudaStreamCaptureMode mode); 
#line 2992
extern cudaError_t __stdcall cudaThreadExchangeStreamCaptureMode(cudaStreamCaptureMode * mode); 
#line 3020
extern cudaError_t __stdcall cudaStreamEndCapture(cudaStream_t stream, cudaGraph_t * pGraph); 
#line 3058
extern cudaError_t __stdcall cudaStreamIsCapturing(cudaStream_t stream, cudaStreamCaptureStatus * pCaptureStatus); 
#line 3106
extern cudaError_t __stdcall cudaStreamGetCaptureInfo_v2(cudaStream_t stream, cudaStreamCaptureStatus * captureStatus_out, unsigned __int64 * id_out = 0, cudaGraph_t * graph_out = 0, const cudaGraphNode_t ** dependencies_out = 0, size_t * numDependencies_out = 0); 
#line 3138
extern cudaError_t __stdcall cudaStreamUpdateCaptureDependencies(cudaStream_t stream, cudaGraphNode_t * dependencies, size_t numDependencies, unsigned flags = 0); 
#line 3175
extern cudaError_t __stdcall cudaEventCreate(cudaEvent_t * event); 
#line 3212
extern cudaError_t __stdcall cudaEventCreateWithFlags(cudaEvent_t * event, unsigned flags); 
#line 3252
extern cudaError_t __stdcall cudaEventRecord(cudaEvent_t event, cudaStream_t stream = 0); 
#line 3299
extern cudaError_t __stdcall cudaEventRecordWithFlags(cudaEvent_t event, cudaStream_t stream = 0, unsigned flags = 0); 
#line 3331 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaEventQuery(cudaEvent_t event); 
#line 3361
extern cudaError_t __stdcall cudaEventSynchronize(cudaEvent_t event); 
#line 3390
extern cudaError_t __stdcall cudaEventDestroy(cudaEvent_t event); 
#line 3434
extern cudaError_t __stdcall cudaEventElapsedTime(float * ms, cudaEvent_t start, cudaEvent_t end); 
#line 3615
extern cudaError_t __stdcall cudaImportExternalMemory(cudaExternalMemory_t * extMem_out, const cudaExternalMemoryHandleDesc * memHandleDesc); 
#line 3670
extern cudaError_t __stdcall cudaExternalMemoryGetMappedBuffer(void ** devPtr, cudaExternalMemory_t extMem, const cudaExternalMemoryBufferDesc * bufferDesc); 
#line 3730
extern cudaError_t __stdcall cudaExternalMemoryGetMappedMipmappedArray(cudaMipmappedArray_t * mipmap, cudaExternalMemory_t extMem, const cudaExternalMemoryMipmappedArrayDesc * mipmapDesc); 
#line 3754
extern cudaError_t __stdcall cudaDestroyExternalMemory(cudaExternalMemory_t extMem); 
#line 3908
extern cudaError_t __stdcall cudaImportExternalSemaphore(cudaExternalSemaphore_t * extSem_out, const cudaExternalSemaphoreHandleDesc * semHandleDesc); 
#line 3991
extern cudaError_t __stdcall cudaSignalExternalSemaphoresAsync_v2(const cudaExternalSemaphore_t * extSemArray, const cudaExternalSemaphoreSignalParams * paramsArray, unsigned numExtSems, cudaStream_t stream = 0); 
#line 4067
extern cudaError_t __stdcall cudaWaitExternalSemaphoresAsync_v2(const cudaExternalSemaphore_t * extSemArray, const cudaExternalSemaphoreWaitParams * paramsArray, unsigned numExtSems, cudaStream_t stream = 0); 
#line 4090
extern cudaError_t __stdcall cudaDestroyExternalSemaphore(cudaExternalSemaphore_t extSem); 
#line 4157
extern cudaError_t __stdcall cudaLaunchKernel(const void * func, dim3 gridDim, dim3 blockDim, void ** args, size_t sharedMem, cudaStream_t stream); 
#line 4219
extern cudaError_t __stdcall cudaLaunchKernelExC(const cudaLaunchConfig_t * config, const void * func, void ** args); 
#line 4276
extern cudaError_t __stdcall cudaLaunchCooperativeKernel(const void * func, dim3 gridDim, dim3 blockDim, void ** args, size_t sharedMem, cudaStream_t stream); 
#line 4377
__declspec(deprecated) extern cudaError_t __stdcall cudaLaunchCooperativeKernelMultiDevice(cudaLaunchParams * launchParamsList, unsigned numDevices, unsigned flags = 0); 
#line 4422
extern cudaError_t __stdcall cudaFuncSetCacheConfig(const void * func, cudaFuncCache cacheConfig); 
#line 4477
extern cudaError_t __stdcall cudaFuncSetSharedMemConfig(const void * func, cudaSharedMemConfig config); 
#line 4510
extern cudaError_t __stdcall cudaFuncGetAttributes(cudaFuncAttributes * attr, const void * func); 
#line 4547
extern cudaError_t __stdcall cudaFuncSetAttribute(const void * func, cudaFuncAttribute attr, int value); 
#line 4571
__declspec(deprecated) extern cudaError_t __stdcall cudaSetDoubleForDevice(double * d); 
#line 4595
__declspec(deprecated) extern cudaError_t __stdcall cudaSetDoubleForHost(double * d); 
#line 4661
extern cudaError_t __stdcall cudaLaunchHostFunc(cudaStream_t stream, cudaHostFn_t fn, void * userData); 
#line 4718
extern cudaError_t __stdcall cudaOccupancyMaxActiveBlocksPerMultiprocessor(int * numBlocks, const void * func, int blockSize, size_t dynamicSMemSize); 
#line 4747
extern cudaError_t __stdcall cudaOccupancyAvailableDynamicSMemPerBlock(size_t * dynamicSmemSize, const void * func, int numBlocks, int blockSize); 
#line 4792
extern cudaError_t __stdcall cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags(int * numBlocks, const void * func, int blockSize, size_t dynamicSMemSize, unsigned flags); 
#line 4827
extern cudaError_t __stdcall cudaOccupancyMaxPotentialClusterSize(int * clusterSize, const void * func, const cudaLaunchConfig_t * launchConfig); 
#line 4866
extern cudaError_t __stdcall cudaOccupancyMaxActiveClusters(int * numClusters, const void * func, const cudaLaunchConfig_t * launchConfig); 
#line 4986
extern cudaError_t __stdcall cudaMallocManaged(void ** devPtr, size_t size, unsigned flags = 1); 
#line 5019 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaMalloc(void ** devPtr, size_t size); 
#line 5052
extern cudaError_t __stdcall cudaMallocHost(void ** ptr, size_t size); 
#line 5095
extern cudaError_t __stdcall cudaMallocPitch(void ** devPtr, size_t * pitch, size_t width, size_t height); 
#line 5147
extern cudaError_t __stdcall cudaMallocArray(cudaArray_t * array, const cudaChannelFormatDesc * desc, size_t width, size_t height = 0, unsigned flags = 0); 
#line 5185
extern cudaError_t __stdcall cudaFree(void * devPtr); 
#line 5208
extern cudaError_t __stdcall cudaFreeHost(void * ptr); 
#line 5231
extern cudaError_t __stdcall cudaFreeArray(cudaArray_t array); 
#line 5254
extern cudaError_t __stdcall cudaFreeMipmappedArray(cudaMipmappedArray_t mipmappedArray); 
#line 5320
extern cudaError_t __stdcall cudaHostAlloc(void ** pHost, size_t size, unsigned flags); 
#line 5417
extern cudaError_t __stdcall cudaHostRegister(void * ptr, size_t size, unsigned flags); 
#line 5440
extern cudaError_t __stdcall cudaHostUnregister(void * ptr); 
#line 5485
extern cudaError_t __stdcall cudaHostGetDevicePointer(void ** pDevice, void * pHost, unsigned flags); 
#line 5507
extern cudaError_t __stdcall cudaHostGetFlags(unsigned * pFlags, void * pHost); 
#line 5546
extern cudaError_t __stdcall cudaMalloc3D(cudaPitchedPtr * pitchedDevPtr, cudaExtent extent); 
#line 5691
extern cudaError_t __stdcall cudaMalloc3DArray(cudaArray_t * array, const cudaChannelFormatDesc * desc, cudaExtent extent, unsigned flags = 0); 
#line 5836
extern cudaError_t __stdcall cudaMallocMipmappedArray(cudaMipmappedArray_t * mipmappedArray, const cudaChannelFormatDesc * desc, cudaExtent extent, unsigned numLevels, unsigned flags = 0); 
#line 5869
extern cudaError_t __stdcall cudaGetMipmappedArrayLevel(cudaArray_t * levelArray, cudaMipmappedArray_const_t mipmappedArray, unsigned level); 
#line 5974
extern cudaError_t __stdcall cudaMemcpy3D(const cudaMemcpy3DParms * p); 
#line 6006
extern cudaError_t __stdcall cudaMemcpy3DPeer(const cudaMemcpy3DPeerParms * p); 
#line 6124
extern cudaError_t __stdcall cudaMemcpy3DAsync(const cudaMemcpy3DParms * p, cudaStream_t stream = 0); 
#line 6151
extern cudaError_t __stdcall cudaMemcpy3DPeerAsync(const cudaMemcpy3DPeerParms * p, cudaStream_t stream = 0); 
#line 6185
extern cudaError_t __stdcall cudaMemGetInfo(size_t * free, size_t * total); 
#line 6211
extern cudaError_t __stdcall cudaArrayGetInfo(cudaChannelFormatDesc * desc, cudaExtent * extent, unsigned * flags, cudaArray_t array); 
#line 6240
extern cudaError_t __stdcall cudaArrayGetPlane(cudaArray_t * pPlaneArray, cudaArray_t hArray, unsigned planeIdx); 
#line 6263
extern cudaError_t __stdcall cudaArrayGetMemoryRequirements(cudaArrayMemoryRequirements * memoryRequirements, cudaArray_t array, int device); 
#line 6287
extern cudaError_t __stdcall cudaMipmappedArrayGetMemoryRequirements(cudaArrayMemoryRequirements * memoryRequirements, cudaMipmappedArray_t mipmap, int device); 
#line 6315
extern cudaError_t __stdcall cudaArrayGetSparseProperties(cudaArraySparseProperties * sparseProperties, cudaArray_t array); 
#line 6345 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaMipmappedArrayGetSparseProperties(cudaArraySparseProperties * sparseProperties, cudaMipmappedArray_t mipmap); 
#line 6390 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaMemcpy(void * dst, const void * src, size_t count, cudaMemcpyKind kind); 
#line 6425
extern cudaError_t __stdcall cudaMemcpyPeer(void * dst, int dstDevice, const void * src, int srcDevice, size_t count); 
#line 6474
extern cudaError_t __stdcall cudaMemcpy2D(void * dst, size_t dpitch, const void * src, size_t spitch, size_t width, size_t height, cudaMemcpyKind kind); 
#line 6524
extern cudaError_t __stdcall cudaMemcpy2DToArray(cudaArray_t dst, size_t wOffset, size_t hOffset, const void * src, size_t spitch, size_t width, size_t height, cudaMemcpyKind kind); 
#line 6574
extern cudaError_t __stdcall cudaMemcpy2DFromArray(void * dst, size_t dpitch, cudaArray_const_t src, size_t wOffset, size_t hOffset, size_t width, size_t height, cudaMemcpyKind kind); 
#line 6621
extern cudaError_t __stdcall cudaMemcpy2DArrayToArray(cudaArray_t dst, size_t wOffsetDst, size_t hOffsetDst, cudaArray_const_t src, size_t wOffsetSrc, size_t hOffsetSrc, size_t width, size_t height, cudaMemcpyKind kind = cudaMemcpyDeviceToDevice); 
#line 6664
extern cudaError_t __stdcall cudaMemcpyToSymbol(const void * symbol, const void * src, size_t count, size_t offset = 0, cudaMemcpyKind kind = cudaMemcpyHostToDevice); 
#line 6707
extern cudaError_t __stdcall cudaMemcpyFromSymbol(void * dst, const void * symbol, size_t count, size_t offset = 0, cudaMemcpyKind kind = cudaMemcpyDeviceToHost); 
#line 6764
extern cudaError_t __stdcall cudaMemcpyAsync(void * dst, const void * src, size_t count, cudaMemcpyKind kind, cudaStream_t stream = 0); 
#line 6799
extern cudaError_t __stdcall cudaMemcpyPeerAsync(void * dst, int dstDevice, const void * src, int srcDevice, size_t count, cudaStream_t stream = 0); 
#line 6862
extern cudaError_t __stdcall cudaMemcpy2DAsync(void * dst, size_t dpitch, const void * src, size_t spitch, size_t width, size_t height, cudaMemcpyKind kind, cudaStream_t stream = 0); 
#line 6920
extern cudaError_t __stdcall cudaMemcpy2DToArrayAsync(cudaArray_t dst, size_t wOffset, size_t hOffset, const void * src, size_t spitch, size_t width, size_t height, cudaMemcpyKind kind, cudaStream_t stream = 0); 
#line 6977
extern cudaError_t __stdcall cudaMemcpy2DFromArrayAsync(void * dst, size_t dpitch, cudaArray_const_t src, size_t wOffset, size_t hOffset, size_t width, size_t height, cudaMemcpyKind kind, cudaStream_t stream = 0); 
#line 7028
extern cudaError_t __stdcall cudaMemcpyToSymbolAsync(const void * symbol, const void * src, size_t count, size_t offset, cudaMemcpyKind kind, cudaStream_t stream = 0); 
#line 7079
extern cudaError_t __stdcall cudaMemcpyFromSymbolAsync(void * dst, const void * symbol, size_t count, size_t offset, cudaMemcpyKind kind, cudaStream_t stream = 0); 
#line 7108
extern cudaError_t __stdcall cudaMemset(void * devPtr, int value, size_t count); 
#line 7142
extern cudaError_t __stdcall cudaMemset2D(void * devPtr, size_t pitch, int value, size_t width, size_t height); 
#line 7188
extern cudaError_t __stdcall cudaMemset3D(cudaPitchedPtr pitchedDevPtr, int value, cudaExtent extent); 
#line 7224
extern cudaError_t __stdcall cudaMemsetAsync(void * devPtr, int value, size_t count, cudaStream_t stream = 0); 
#line 7265
extern cudaError_t __stdcall cudaMemset2DAsync(void * devPtr, size_t pitch, int value, size_t width, size_t height, cudaStream_t stream = 0); 
#line 7318
extern cudaError_t __stdcall cudaMemset3DAsync(cudaPitchedPtr pitchedDevPtr, int value, cudaExtent extent, cudaStream_t stream = 0); 
#line 7346
extern cudaError_t __stdcall cudaGetSymbolAddress(void ** devPtr, const void * symbol); 
#line 7373
extern cudaError_t __stdcall cudaGetSymbolSize(size_t * size, const void * symbol); 
#line 7443
extern cudaError_t __stdcall cudaMemPrefetchAsync(const void * devPtr, size_t count, int dstDevice, cudaStream_t stream = 0); 
#line 7559
extern cudaError_t __stdcall cudaMemAdvise(const void * devPtr, size_t count, cudaMemoryAdvise advice, int device); 
#line 7618
extern cudaError_t __stdcall cudaMemRangeGetAttribute(void * data, size_t dataSize, cudaMemRangeAttribute attribute, const void * devPtr, size_t count); 
#line 7657
extern cudaError_t __stdcall cudaMemRangeGetAttributes(void ** data, size_t * dataSizes, cudaMemRangeAttribute * attributes, size_t numAttributes, const void * devPtr, size_t count); 
#line 7717
__declspec(deprecated) extern cudaError_t __stdcall cudaMemcpyToArray(cudaArray_t dst, size_t wOffset, size_t hOffset, const void * src, size_t count, cudaMemcpyKind kind); 
#line 7759
__declspec(deprecated) extern cudaError_t __stdcall cudaMemcpyFromArray(void * dst, cudaArray_const_t src, size_t wOffset, size_t hOffset, size_t count, cudaMemcpyKind kind); 
#line 7802
__declspec(deprecated) extern cudaError_t __stdcall cudaMemcpyArrayToArray(cudaArray_t dst, size_t wOffsetDst, size_t hOffsetDst, cudaArray_const_t src, size_t wOffsetSrc, size_t hOffsetSrc, size_t count, cudaMemcpyKind kind = cudaMemcpyDeviceToDevice); 
#line 7853
__declspec(deprecated) extern cudaError_t __stdcall cudaMemcpyToArrayAsync(cudaArray_t dst, size_t wOffset, size_t hOffset, const void * src, size_t count, cudaMemcpyKind kind, cudaStream_t stream = 0); 
#line 7903
__declspec(deprecated) extern cudaError_t __stdcall cudaMemcpyFromArrayAsync(void * dst, cudaArray_const_t src, size_t wOffset, size_t hOffset, size_t count, cudaMemcpyKind kind, cudaStream_t stream = 0); 
#line 7972
extern cudaError_t __stdcall cudaMallocAsync(void ** devPtr, size_t size, cudaStream_t hStream); 
#line 7998
extern cudaError_t __stdcall cudaFreeAsync(void * devPtr, cudaStream_t hStream); 
#line 8023
extern cudaError_t __stdcall cudaMemPoolTrimTo(cudaMemPool_t memPool, size_t minBytesToKeep); 
#line 8067
extern cudaError_t __stdcall cudaMemPoolSetAttribute(cudaMemPool_t memPool, cudaMemPoolAttr attr, void * value); 
#line 8115
extern cudaError_t __stdcall cudaMemPoolGetAttribute(cudaMemPool_t memPool, cudaMemPoolAttr attr, void * value); 
#line 8130
extern cudaError_t __stdcall cudaMemPoolSetAccess(cudaMemPool_t memPool, const cudaMemAccessDesc * descList, size_t count); 
#line 8143
extern cudaError_t __stdcall cudaMemPoolGetAccess(cudaMemAccessFlags * flags, cudaMemPool_t memPool, cudaMemLocation * location); 
#line 8163
extern cudaError_t __stdcall cudaMemPoolCreate(cudaMemPool_t * memPool, const cudaMemPoolProps * poolProps); 
#line 8185
extern cudaError_t __stdcall cudaMemPoolDestroy(cudaMemPool_t memPool); 
#line 8221
extern cudaError_t __stdcall cudaMallocFromPoolAsync(void ** ptr, size_t size, cudaMemPool_t memPool, cudaStream_t stream); 
#line 8246
extern cudaError_t __stdcall cudaMemPoolExportToShareableHandle(void * shareableHandle, cudaMemPool_t memPool, cudaMemAllocationHandleType handleType, unsigned flags); 
#line 8273
extern cudaError_t __stdcall cudaMemPoolImportFromShareableHandle(cudaMemPool_t * memPool, void * shareableHandle, cudaMemAllocationHandleType handleType, unsigned flags); 
#line 8296
extern cudaError_t __stdcall cudaMemPoolExportPointer(cudaMemPoolPtrExportData * exportData, void * ptr); 
#line 8325
extern cudaError_t __stdcall cudaMemPoolImportPointer(void ** ptr, cudaMemPool_t memPool, cudaMemPoolPtrExportData * exportData); 
#line 8478
extern cudaError_t __stdcall cudaPointerGetAttributes(cudaPointerAttributes * attributes, const void * ptr); 
#line 8519
extern cudaError_t __stdcall cudaDeviceCanAccessPeer(int * canAccessPeer, int device, int peerDevice); 
#line 8561
extern cudaError_t __stdcall cudaDeviceEnablePeerAccess(int peerDevice, unsigned flags); 
#line 8583
extern cudaError_t __stdcall cudaDeviceDisablePeerAccess(int peerDevice); 
#line 8647
extern cudaError_t __stdcall cudaGraphicsUnregisterResource(cudaGraphicsResource_t resource); 
#line 8682
extern cudaError_t __stdcall cudaGraphicsResourceSetMapFlags(cudaGraphicsResource_t resource, unsigned flags); 
#line 8721
extern cudaError_t __stdcall cudaGraphicsMapResources(int count, cudaGraphicsResource_t * resources, cudaStream_t stream = 0); 
#line 8756
extern cudaError_t __stdcall cudaGraphicsUnmapResources(int count, cudaGraphicsResource_t * resources, cudaStream_t stream = 0); 
#line 8788
extern cudaError_t __stdcall cudaGraphicsResourceGetMappedPointer(void ** devPtr, size_t * size, cudaGraphicsResource_t resource); 
#line 8826
extern cudaError_t __stdcall cudaGraphicsSubResourceGetMappedArray(cudaArray_t * array, cudaGraphicsResource_t resource, unsigned arrayIndex, unsigned mipLevel); 
#line 8855
extern cudaError_t __stdcall cudaGraphicsResourceGetMappedMipmappedArray(cudaMipmappedArray_t * mipmappedArray, cudaGraphicsResource_t resource); 
#line 8890
extern cudaError_t __stdcall cudaGetChannelDesc(cudaChannelFormatDesc * desc, cudaArray_const_t array); 
#line 8920
extern cudaChannelFormatDesc __stdcall cudaCreateChannelDesc(int x, int y, int z, int w, cudaChannelFormatKind f); 
#line 9144
extern cudaError_t __stdcall cudaCreateTextureObject(cudaTextureObject_t * pTexObject, const cudaResourceDesc * pResDesc, const cudaTextureDesc * pTexDesc, const cudaResourceViewDesc * pResViewDesc); 
#line 9164
extern cudaError_t __stdcall cudaDestroyTextureObject(cudaTextureObject_t texObject); 
#line 9184
extern cudaError_t __stdcall cudaGetTextureObjectResourceDesc(cudaResourceDesc * pResDesc, cudaTextureObject_t texObject); 
#line 9204
extern cudaError_t __stdcall cudaGetTextureObjectTextureDesc(cudaTextureDesc * pTexDesc, cudaTextureObject_t texObject); 
#line 9225
extern cudaError_t __stdcall cudaGetTextureObjectResourceViewDesc(cudaResourceViewDesc * pResViewDesc, cudaTextureObject_t texObject); 
#line 9270
extern cudaError_t __stdcall cudaCreateSurfaceObject(cudaSurfaceObject_t * pSurfObject, const cudaResourceDesc * pResDesc); 
#line 9290
extern cudaError_t __stdcall cudaDestroySurfaceObject(cudaSurfaceObject_t surfObject); 
#line 9309
extern cudaError_t __stdcall cudaGetSurfaceObjectResourceDesc(cudaResourceDesc * pResDesc, cudaSurfaceObject_t surfObject); 
#line 9343
extern cudaError_t __stdcall cudaDriverGetVersion(int * driverVersion); 
#line 9372
extern cudaError_t __stdcall cudaRuntimeGetVersion(int * runtimeVersion); 
#line 9419
extern cudaError_t __stdcall cudaGraphCreate(cudaGraph_t * pGraph, unsigned flags); 
#line 9516
extern cudaError_t __stdcall cudaGraphAddKernelNode(cudaGraphNode_t * pGraphNode, cudaGraph_t graph, const cudaGraphNode_t * pDependencies, size_t numDependencies, const cudaKernelNodeParams * pNodeParams); 
#line 9549
extern cudaError_t __stdcall cudaGraphKernelNodeGetParams(cudaGraphNode_t node, cudaKernelNodeParams * pNodeParams); 
#line 9574
extern cudaError_t __stdcall cudaGraphKernelNodeSetParams(cudaGraphNode_t node, const cudaKernelNodeParams * pNodeParams); 
#line 9594
extern cudaError_t __stdcall cudaGraphKernelNodeCopyAttributes(cudaGraphNode_t hSrc, cudaGraphNode_t hDst); 
#line 9617
extern cudaError_t __stdcall cudaGraphKernelNodeGetAttribute(cudaGraphNode_t hNode, cudaLaunchAttributeID attr, cudaLaunchAttributeValue * value_out); 
#line 9641
extern cudaError_t __stdcall cudaGraphKernelNodeSetAttribute(cudaGraphNode_t hNode, cudaLaunchAttributeID attr, const cudaLaunchAttributeValue * value); 
#line 9691
extern cudaError_t __stdcall cudaGraphAddMemcpyNode(cudaGraphNode_t * pGraphNode, cudaGraph_t graph, const cudaGraphNode_t * pDependencies, size_t numDependencies, const cudaMemcpy3DParms * pCopyParams); 
#line 9750
extern cudaError_t __stdcall cudaGraphAddMemcpyNodeToSymbol(cudaGraphNode_t * pGraphNode, cudaGraph_t graph, const cudaGraphNode_t * pDependencies, size_t numDependencies, const void * symbol, const void * src, size_t count, size_t offset, cudaMemcpyKind kind); 
#line 9819 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaGraphAddMemcpyNodeFromSymbol(cudaGraphNode_t * pGraphNode, cudaGraph_t graph, const cudaGraphNode_t * pDependencies, size_t numDependencies, void * dst, const void * symbol, size_t count, size_t offset, cudaMemcpyKind kind); 
#line 9887 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaGraphAddMemcpyNode1D(cudaGraphNode_t * pGraphNode, cudaGraph_t graph, const cudaGraphNode_t * pDependencies, size_t numDependencies, void * dst, const void * src, size_t count, cudaMemcpyKind kind); 
#line 9919 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaGraphMemcpyNodeGetParams(cudaGraphNode_t node, cudaMemcpy3DParms * pNodeParams); 
#line 9945
extern cudaError_t __stdcall cudaGraphMemcpyNodeSetParams(cudaGraphNode_t node, const cudaMemcpy3DParms * pNodeParams); 
#line 9984
extern cudaError_t __stdcall cudaGraphMemcpyNodeSetParamsToSymbol(cudaGraphNode_t node, const void * symbol, const void * src, size_t count, size_t offset, cudaMemcpyKind kind); 
#line 10030 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaGraphMemcpyNodeSetParamsFromSymbol(cudaGraphNode_t node, void * dst, const void * symbol, size_t count, size_t offset, cudaMemcpyKind kind); 
#line 10076 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaGraphMemcpyNodeSetParams1D(cudaGraphNode_t node, void * dst, const void * src, size_t count, cudaMemcpyKind kind); 
#line 10123 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaGraphAddMemsetNode(cudaGraphNode_t * pGraphNode, cudaGraph_t graph, const cudaGraphNode_t * pDependencies, size_t numDependencies, const cudaMemsetParams * pMemsetParams); 
#line 10146
extern cudaError_t __stdcall cudaGraphMemsetNodeGetParams(cudaGraphNode_t node, cudaMemsetParams * pNodeParams); 
#line 10169
extern cudaError_t __stdcall cudaGraphMemsetNodeSetParams(cudaGraphNode_t node, const cudaMemsetParams * pNodeParams); 
#line 10210
extern cudaError_t __stdcall cudaGraphAddHostNode(cudaGraphNode_t * pGraphNode, cudaGraph_t graph, const cudaGraphNode_t * pDependencies, size_t numDependencies, const cudaHostNodeParams * pNodeParams); 
#line 10233
extern cudaError_t __stdcall cudaGraphHostNodeGetParams(cudaGraphNode_t node, cudaHostNodeParams * pNodeParams); 
#line 10256
extern cudaError_t __stdcall cudaGraphHostNodeSetParams(cudaGraphNode_t node, const cudaHostNodeParams * pNodeParams); 
#line 10296
extern cudaError_t __stdcall cudaGraphAddChildGraphNode(cudaGraphNode_t * pGraphNode, cudaGraph_t graph, const cudaGraphNode_t * pDependencies, size_t numDependencies, cudaGraph_t childGraph); 
#line 10323
extern cudaError_t __stdcall cudaGraphChildGraphNodeGetGraph(cudaGraphNode_t node, cudaGraph_t * pGraph); 
#line 10360
extern cudaError_t __stdcall cudaGraphAddEmptyNode(cudaGraphNode_t * pGraphNode, cudaGraph_t graph, const cudaGraphNode_t * pDependencies, size_t numDependencies); 
#line 10403
extern cudaError_t __stdcall cudaGraphAddEventRecordNode(cudaGraphNode_t * pGraphNode, cudaGraph_t graph, const cudaGraphNode_t * pDependencies, size_t numDependencies, cudaEvent_t event); 
#line 10430 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaGraphEventRecordNodeGetEvent(cudaGraphNode_t node, cudaEvent_t * event_out); 
#line 10457 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaGraphEventRecordNodeSetEvent(cudaGraphNode_t node, cudaEvent_t event); 
#line 10503 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaGraphAddEventWaitNode(cudaGraphNode_t * pGraphNode, cudaGraph_t graph, const cudaGraphNode_t * pDependencies, size_t numDependencies, cudaEvent_t event); 
#line 10530 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaGraphEventWaitNodeGetEvent(cudaGraphNode_t node, cudaEvent_t * event_out); 
#line 10557 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaGraphEventWaitNodeSetEvent(cudaGraphNode_t node, cudaEvent_t event); 
#line 10606 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaGraphAddExternalSemaphoresSignalNode(cudaGraphNode_t * pGraphNode, cudaGraph_t graph, const cudaGraphNode_t * pDependencies, size_t numDependencies, const cudaExternalSemaphoreSignalNodeParams * nodeParams); 
#line 10639 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaGraphExternalSemaphoresSignalNodeGetParams(cudaGraphNode_t hNode, cudaExternalSemaphoreSignalNodeParams * params_out); 
#line 10666 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaGraphExternalSemaphoresSignalNodeSetParams(cudaGraphNode_t hNode, const cudaExternalSemaphoreSignalNodeParams * nodeParams); 
#line 10715 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaGraphAddExternalSemaphoresWaitNode(cudaGraphNode_t * pGraphNode, cudaGraph_t graph, const cudaGraphNode_t * pDependencies, size_t numDependencies, const cudaExternalSemaphoreWaitNodeParams * nodeParams); 
#line 10748 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaGraphExternalSemaphoresWaitNodeGetParams(cudaGraphNode_t hNode, cudaExternalSemaphoreWaitNodeParams * params_out); 
#line 10775 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaGraphExternalSemaphoresWaitNodeSetParams(cudaGraphNode_t hNode, const cudaExternalSemaphoreWaitNodeParams * nodeParams); 
#line 10852 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaGraphAddMemAllocNode(cudaGraphNode_t * pGraphNode, cudaGraph_t graph, const cudaGraphNode_t * pDependencies, size_t numDependencies, cudaMemAllocNodeParams * nodeParams); 
#line 10879 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaGraphMemAllocNodeGetParams(cudaGraphNode_t node, cudaMemAllocNodeParams * params_out); 
#line 10939 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaGraphAddMemFreeNode(cudaGraphNode_t * pGraphNode, cudaGraph_t graph, const cudaGraphNode_t * pDependencies, size_t numDependencies, void * dptr); 
#line 10963 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaGraphMemFreeNodeGetParams(cudaGraphNode_t node, void * dptr_out); 
#line 10991 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaDeviceGraphMemTrim(int device); 
#line 11028 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaDeviceGetGraphMemAttribute(int device, cudaGraphMemAttributeType attr, void * value); 
#line 11062 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaDeviceSetGraphMemAttribute(int device, cudaGraphMemAttributeType attr, void * value); 
#line 11090 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaGraphClone(cudaGraph_t * pGraphClone, cudaGraph_t originalGraph); 
#line 11118
extern cudaError_t __stdcall cudaGraphNodeFindInClone(cudaGraphNode_t * pNode, cudaGraphNode_t originalNode, cudaGraph_t clonedGraph); 
#line 11149
extern cudaError_t __stdcall cudaGraphNodeGetType(cudaGraphNode_t node, cudaGraphNodeType * pType); 
#line 11180
extern cudaError_t __stdcall cudaGraphGetNodes(cudaGraph_t graph, cudaGraphNode_t * nodes, size_t * numNodes); 
#line 11211
extern cudaError_t __stdcall cudaGraphGetRootNodes(cudaGraph_t graph, cudaGraphNode_t * pRootNodes, size_t * pNumRootNodes); 
#line 11245
extern cudaError_t __stdcall cudaGraphGetEdges(cudaGraph_t graph, cudaGraphNode_t * from, cudaGraphNode_t * to, size_t * numEdges); 
#line 11276
extern cudaError_t __stdcall cudaGraphNodeGetDependencies(cudaGraphNode_t node, cudaGraphNode_t * pDependencies, size_t * pNumDependencies); 
#line 11308
extern cudaError_t __stdcall cudaGraphNodeGetDependentNodes(cudaGraphNode_t node, cudaGraphNode_t * pDependentNodes, size_t * pNumDependentNodes); 
#line 11339
extern cudaError_t __stdcall cudaGraphAddDependencies(cudaGraph_t graph, const cudaGraphNode_t * from, const cudaGraphNode_t * to, size_t numDependencies); 
#line 11370
extern cudaError_t __stdcall cudaGraphRemoveDependencies(cudaGraph_t graph, const cudaGraphNode_t * from, const cudaGraphNode_t * to, size_t numDependencies); 
#line 11400
extern cudaError_t __stdcall cudaGraphDestroyNode(cudaGraphNode_t node); 
#line 11462
extern cudaError_t __stdcall cudaGraphInstantiate(cudaGraphExec_t * pGraphExec, cudaGraph_t graph, unsigned __int64 flags = 0); 
#line 11533
extern cudaError_t __stdcall cudaGraphInstantiateWithFlags(cudaGraphExec_t * pGraphExec, cudaGraph_t graph, unsigned __int64 flags = 0); 
#line 11638 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaGraphInstantiateWithParams(cudaGraphExec_t * pGraphExec, cudaGraph_t graph, cudaGraphInstantiateParams * instantiateParams); 
#line 11663
extern cudaError_t __stdcall cudaGraphExecGetFlags(cudaGraphExec_t graphExec, unsigned __int64 * flags); 
#line 11714
extern cudaError_t __stdcall cudaGraphExecKernelNodeSetParams(cudaGraphExec_t hGraphExec, cudaGraphNode_t node, const cudaKernelNodeParams * pNodeParams); 
#line 11764
extern cudaError_t __stdcall cudaGraphExecMemcpyNodeSetParams(cudaGraphExec_t hGraphExec, cudaGraphNode_t node, const cudaMemcpy3DParms * pNodeParams); 
#line 11819
extern cudaError_t __stdcall cudaGraphExecMemcpyNodeSetParamsToSymbol(cudaGraphExec_t hGraphExec, cudaGraphNode_t node, const void * symbol, const void * src, size_t count, size_t offset, cudaMemcpyKind kind); 
#line 11882 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaGraphExecMemcpyNodeSetParamsFromSymbol(cudaGraphExec_t hGraphExec, cudaGraphNode_t node, void * dst, const void * symbol, size_t count, size_t offset, cudaMemcpyKind kind); 
#line 11943 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaGraphExecMemcpyNodeSetParams1D(cudaGraphExec_t hGraphExec, cudaGraphNode_t node, void * dst, const void * src, size_t count, cudaMemcpyKind kind); 
#line 11997 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaGraphExecMemsetNodeSetParams(cudaGraphExec_t hGraphExec, cudaGraphNode_t node, const cudaMemsetParams * pNodeParams); 
#line 12036
extern cudaError_t __stdcall cudaGraphExecHostNodeSetParams(cudaGraphExec_t hGraphExec, cudaGraphNode_t node, const cudaHostNodeParams * pNodeParams); 
#line 12082
extern cudaError_t __stdcall cudaGraphExecChildGraphNodeSetParams(cudaGraphExec_t hGraphExec, cudaGraphNode_t node, cudaGraph_t childGraph); 
#line 12126 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaGraphExecEventRecordNodeSetEvent(cudaGraphExec_t hGraphExec, cudaGraphNode_t hNode, cudaEvent_t event); 
#line 12170 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaGraphExecEventWaitNodeSetEvent(cudaGraphExec_t hGraphExec, cudaGraphNode_t hNode, cudaEvent_t event); 
#line 12217 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaGraphExecExternalSemaphoresSignalNodeSetParams(cudaGraphExec_t hGraphExec, cudaGraphNode_t hNode, const cudaExternalSemaphoreSignalNodeParams * nodeParams); 
#line 12264 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaGraphExecExternalSemaphoresWaitNodeSetParams(cudaGraphExec_t hGraphExec, cudaGraphNode_t hNode, const cudaExternalSemaphoreWaitNodeParams * nodeParams); 
#line 12304 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaGraphNodeSetEnabled(cudaGraphExec_t hGraphExec, cudaGraphNode_t hNode, unsigned isEnabled); 
#line 12338 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaGraphNodeGetEnabled(cudaGraphExec_t hGraphExec, cudaGraphNode_t hNode, unsigned * isEnabled); 
#line 12423 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaGraphExecUpdate(cudaGraphExec_t hGraphExec, cudaGraph_t hGraph, cudaGraphExecUpdateResultInfo * resultInfo); 
#line 12448
extern cudaError_t __stdcall cudaGraphUpload(cudaGraphExec_t graphExec, cudaStream_t stream); 
#line 12479 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaGraphLaunch(cudaGraphExec_t graphExec, cudaStream_t stream); 
#line 12502
extern cudaError_t __stdcall cudaGraphExecDestroy(cudaGraphExec_t graphExec); 
#line 12523
extern cudaError_t __stdcall cudaGraphDestroy(cudaGraph_t graph); 
#line 12542
extern cudaError_t __stdcall cudaGraphDebugDotPrint(cudaGraph_t graph, const char * path, unsigned flags); 
#line 12578
extern cudaError_t __stdcall cudaUserObjectCreate(cudaUserObject_t * object_out, void * ptr, cudaHostFn_t destroy, unsigned initialRefcount, unsigned flags); 
#line 12602
extern cudaError_t __stdcall cudaUserObjectRetain(cudaUserObject_t object, unsigned count = 1); 
#line 12630
extern cudaError_t __stdcall cudaUserObjectRelease(cudaUserObject_t object, unsigned count = 1); 
#line 12658
extern cudaError_t __stdcall cudaGraphRetainUserObject(cudaGraph_t graph, cudaUserObject_t object, unsigned count = 1, unsigned flags = 0); 
#line 12683
extern cudaError_t __stdcall cudaGraphReleaseUserObject(cudaGraph_t graph, cudaUserObject_t object, unsigned count = 1); 
#line 12761
extern cudaError_t __stdcall cudaGetDriverEntryPoint(const char * symbol, void ** funcPtr, unsigned __int64 flags, cudaDriverEntryPointQueryResult * driverStatus = 0); 
#line 12769 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaGetExportTable(const void ** ppExportTable, const cudaUUID_t * pExportTableId); 
#line 12948
extern cudaError_t cudaGetFuncBySymbol(cudaFunction_t * functionPtr, const void * symbolPtr); 
#line 12964
extern cudaError_t __stdcall cudaGetKernel(cudaKernel_t * kernelPtr, const void * entryFuncAddr); 
#line 13125 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\cuda_runtime_api.h"
}
#line 117 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\channel_descriptor.h"
template< class T> __inline ::cudaChannelFormatDesc cudaCreateChannelDesc() 
#line 118
{ 
#line 119
return cudaCreateChannelDesc(0, 0, 0, 0, cudaChannelFormatKindNone); 
#line 120
} 
#line 122
static __inline cudaChannelFormatDesc cudaCreateChannelDescHalf() 
#line 123
{ 
#line 124
int e = (((int)sizeof(unsigned short)) * 8); 
#line 126
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindFloat); 
#line 127
} 
#line 129
static __inline cudaChannelFormatDesc cudaCreateChannelDescHalf1() 
#line 130
{ 
#line 131
int e = (((int)sizeof(unsigned short)) * 8); 
#line 133
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindFloat); 
#line 134
} 
#line 136
static __inline cudaChannelFormatDesc cudaCreateChannelDescHalf2() 
#line 137
{ 
#line 138
int e = (((int)sizeof(unsigned short)) * 8); 
#line 140
return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindFloat); 
#line 141
} 
#line 143
static __inline cudaChannelFormatDesc cudaCreateChannelDescHalf4() 
#line 144
{ 
#line 145
int e = (((int)sizeof(unsigned short)) * 8); 
#line 147
return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindFloat); 
#line 148
} 
#line 150
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< char> () 
#line 151
{ 
#line 152
int e = (((int)sizeof(char)) * 8); 
#line 157 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\channel_descriptor.h"
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned); 
#line 159 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\channel_descriptor.h"
} 
#line 161
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< signed char> () 
#line 162
{ 
#line 163
int e = (((int)sizeof(signed char)) * 8); 
#line 165
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned); 
#line 166
} 
#line 168
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< unsigned char> () 
#line 169
{ 
#line 170
int e = (((int)sizeof(unsigned char)) * 8); 
#line 172
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindUnsigned); 
#line 173
} 
#line 175
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< char1> () 
#line 176
{ 
#line 177
int e = (((int)sizeof(signed char)) * 8); 
#line 179
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned); 
#line 180
} 
#line 182
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< uchar1> () 
#line 183
{ 
#line 184
int e = (((int)sizeof(unsigned char)) * 8); 
#line 186
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindUnsigned); 
#line 187
} 
#line 189
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< char2> () 
#line 190
{ 
#line 191
int e = (((int)sizeof(signed char)) * 8); 
#line 193
return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindSigned); 
#line 194
} 
#line 196
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< uchar2> () 
#line 197
{ 
#line 198
int e = (((int)sizeof(unsigned char)) * 8); 
#line 200
return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindUnsigned); 
#line 201
} 
#line 203
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< char4> () 
#line 204
{ 
#line 205
int e = (((int)sizeof(signed char)) * 8); 
#line 207
return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindSigned); 
#line 208
} 
#line 210
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< uchar4> () 
#line 211
{ 
#line 212
int e = (((int)sizeof(unsigned char)) * 8); 
#line 214
return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindUnsigned); 
#line 215
} 
#line 217
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< short> () 
#line 218
{ 
#line 219
int e = (((int)sizeof(short)) * 8); 
#line 221
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned); 
#line 222
} 
#line 224
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< unsigned short> () 
#line 225
{ 
#line 226
int e = (((int)sizeof(unsigned short)) * 8); 
#line 228
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindUnsigned); 
#line 229
} 
#line 231
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< short1> () 
#line 232
{ 
#line 233
int e = (((int)sizeof(short)) * 8); 
#line 235
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned); 
#line 236
} 
#line 238
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< ushort1> () 
#line 239
{ 
#line 240
int e = (((int)sizeof(unsigned short)) * 8); 
#line 242
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindUnsigned); 
#line 243
} 
#line 245
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< short2> () 
#line 246
{ 
#line 247
int e = (((int)sizeof(short)) * 8); 
#line 249
return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindSigned); 
#line 250
} 
#line 252
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< ushort2> () 
#line 253
{ 
#line 254
int e = (((int)sizeof(unsigned short)) * 8); 
#line 256
return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindUnsigned); 
#line 257
} 
#line 259
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< short4> () 
#line 260
{ 
#line 261
int e = (((int)sizeof(short)) * 8); 
#line 263
return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindSigned); 
#line 264
} 
#line 266
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< ushort4> () 
#line 267
{ 
#line 268
int e = (((int)sizeof(unsigned short)) * 8); 
#line 270
return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindUnsigned); 
#line 271
} 
#line 273
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< int> () 
#line 274
{ 
#line 275
int e = (((int)sizeof(int)) * 8); 
#line 277
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned); 
#line 278
} 
#line 280
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< unsigned> () 
#line 281
{ 
#line 282
int e = (((int)sizeof(unsigned)) * 8); 
#line 284
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindUnsigned); 
#line 285
} 
#line 287
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< int1> () 
#line 288
{ 
#line 289
int e = (((int)sizeof(int)) * 8); 
#line 291
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned); 
#line 292
} 
#line 294
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< uint1> () 
#line 295
{ 
#line 296
int e = (((int)sizeof(unsigned)) * 8); 
#line 298
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindUnsigned); 
#line 299
} 
#line 301
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< int2> () 
#line 302
{ 
#line 303
int e = (((int)sizeof(int)) * 8); 
#line 305
return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindSigned); 
#line 306
} 
#line 308
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< uint2> () 
#line 309
{ 
#line 310
int e = (((int)sizeof(unsigned)) * 8); 
#line 312
return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindUnsigned); 
#line 313
} 
#line 315
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< int4> () 
#line 316
{ 
#line 317
int e = (((int)sizeof(int)) * 8); 
#line 319
return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindSigned); 
#line 320
} 
#line 322
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< uint4> () 
#line 323
{ 
#line 324
int e = (((int)sizeof(unsigned)) * 8); 
#line 326
return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindUnsigned); 
#line 327
} 
#line 331
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< long> () 
#line 332
{ 
#line 333
int e = (((int)sizeof(long)) * 8); 
#line 335
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned); 
#line 336
} 
#line 338
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< unsigned long> () 
#line 339
{ 
#line 340
int e = (((int)sizeof(unsigned long)) * 8); 
#line 342
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindUnsigned); 
#line 343
} 
#line 345
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< long1> () 
#line 346
{ 
#line 347
int e = (((int)sizeof(long)) * 8); 
#line 349
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned); 
#line 350
} 
#line 352
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< ulong1> () 
#line 353
{ 
#line 354
int e = (((int)sizeof(unsigned long)) * 8); 
#line 356
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindUnsigned); 
#line 357
} 
#line 359
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< long2> () 
#line 360
{ 
#line 361
int e = (((int)sizeof(long)) * 8); 
#line 363
return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindSigned); 
#line 364
} 
#line 366
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< ulong2> () 
#line 367
{ 
#line 368
int e = (((int)sizeof(unsigned long)) * 8); 
#line 370
return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindUnsigned); 
#line 371
} 
#line 373
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< long4> () 
#line 374
{ 
#line 375
int e = (((int)sizeof(long)) * 8); 
#line 377
return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindSigned); 
#line 378
} 
#line 380
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< ulong4> () 
#line 381
{ 
#line 382
int e = (((int)sizeof(unsigned long)) * 8); 
#line 384
return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindUnsigned); 
#line 385
} 
#line 389 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\channel_descriptor.h"
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< float> () 
#line 390
{ 
#line 391
int e = (((int)sizeof(float)) * 8); 
#line 393
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindFloat); 
#line 394
} 
#line 396
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< float1> () 
#line 397
{ 
#line 398
int e = (((int)sizeof(float)) * 8); 
#line 400
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindFloat); 
#line 401
} 
#line 403
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< float2> () 
#line 404
{ 
#line 405
int e = (((int)sizeof(float)) * 8); 
#line 407
return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindFloat); 
#line 408
} 
#line 410
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< float4> () 
#line 411
{ 
#line 412
int e = (((int)sizeof(float)) * 8); 
#line 414
return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindFloat); 
#line 415
} 
#line 417
static __inline cudaChannelFormatDesc cudaCreateChannelDescNV12() 
#line 418
{ 
#line 419
int e = (((int)sizeof(char)) * 8); 
#line 421
return cudaCreateChannelDesc(e, e, e, 0, cudaChannelFormatKindNV12); 
#line 422
} 
#line 424
template< cudaChannelFormatKind > __inline ::cudaChannelFormatDesc cudaCreateChannelDesc() 
#line 425
{ 
#line 426
return cudaCreateChannelDesc(0, 0, 0, 0, cudaChannelFormatKindNone); 
#line 427
} 
#line 430
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< cudaChannelFormatKindSignedNormalized8X1> () 
#line 431
{ 
#line 432
return cudaCreateChannelDesc(8, 0, 0, 0, cudaChannelFormatKindSignedNormalized8X1); 
#line 433
} 
#line 435
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< cudaChannelFormatKindSignedNormalized8X2> () 
#line 436
{ 
#line 437
return cudaCreateChannelDesc(8, 8, 0, 0, cudaChannelFormatKindSignedNormalized8X2); 
#line 438
} 
#line 440
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< cudaChannelFormatKindSignedNormalized8X4> () 
#line 441
{ 
#line 442
return cudaCreateChannelDesc(8, 8, 8, 8, cudaChannelFormatKindSignedNormalized8X4); 
#line 443
} 
#line 446
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< cudaChannelFormatKindUnsignedNormalized8X1> () 
#line 447
{ 
#line 448
return cudaCreateChannelDesc(8, 0, 0, 0, cudaChannelFormatKindUnsignedNormalized8X1); 
#line 449
} 
#line 451
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< cudaChannelFormatKindUnsignedNormalized8X2> () 
#line 452
{ 
#line 453
return cudaCreateChannelDesc(8, 8, 0, 0, cudaChannelFormatKindUnsignedNormalized8X2); 
#line 454
} 
#line 456
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< cudaChannelFormatKindUnsignedNormalized8X4> () 
#line 457
{ 
#line 458
return cudaCreateChannelDesc(8, 8, 8, 8, cudaChannelFormatKindUnsignedNormalized8X4); 
#line 459
} 
#line 462
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< cudaChannelFormatKindSignedNormalized16X1> () 
#line 463
{ 
#line 464
return cudaCreateChannelDesc(16, 0, 0, 0, cudaChannelFormatKindSignedNormalized16X1); 
#line 465
} 
#line 467
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< cudaChannelFormatKindSignedNormalized16X2> () 
#line 468
{ 
#line 469
return cudaCreateChannelDesc(16, 16, 0, 0, cudaChannelFormatKindSignedNormalized16X2); 
#line 470
} 
#line 472
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< cudaChannelFormatKindSignedNormalized16X4> () 
#line 473
{ 
#line 474
return cudaCreateChannelDesc(16, 16, 16, 16, cudaChannelFormatKindSignedNormalized16X4); 
#line 475
} 
#line 478
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< cudaChannelFormatKindUnsignedNormalized16X1> () 
#line 479
{ 
#line 480
return cudaCreateChannelDesc(16, 0, 0, 0, cudaChannelFormatKindUnsignedNormalized16X1); 
#line 481
} 
#line 483
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< cudaChannelFormatKindUnsignedNormalized16X2> () 
#line 484
{ 
#line 485
return cudaCreateChannelDesc(16, 16, 0, 0, cudaChannelFormatKindUnsignedNormalized16X2); 
#line 486
} 
#line 488
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< cudaChannelFormatKindUnsignedNormalized16X4> () 
#line 489
{ 
#line 490
return cudaCreateChannelDesc(16, 16, 16, 16, cudaChannelFormatKindUnsignedNormalized16X4); 
#line 491
} 
#line 494
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< cudaChannelFormatKindNV12> () 
#line 495
{ 
#line 496
return cudaCreateChannelDesc(8, 8, 8, 0, cudaChannelFormatKindNV12); 
#line 497
} 
#line 500
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< cudaChannelFormatKindUnsignedBlockCompressed1> () 
#line 501
{ 
#line 502
return cudaCreateChannelDesc(8, 8, 8, 8, cudaChannelFormatKindUnsignedBlockCompressed1); 
#line 503
} 
#line 506
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< cudaChannelFormatKindUnsignedBlockCompressed1SRGB> () 
#line 507
{ 
#line 508
return cudaCreateChannelDesc(8, 8, 8, 8, cudaChannelFormatKindUnsignedBlockCompressed1SRGB); 
#line 509
} 
#line 512
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< cudaChannelFormatKindUnsignedBlockCompressed2> () 
#line 513
{ 
#line 514
return cudaCreateChannelDesc(8, 8, 8, 8, cudaChannelFormatKindUnsignedBlockCompressed2); 
#line 515
} 
#line 518
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< cudaChannelFormatKindUnsignedBlockCompressed2SRGB> () 
#line 519
{ 
#line 520
return cudaCreateChannelDesc(8, 8, 8, 8, cudaChannelFormatKindUnsignedBlockCompressed2SRGB); 
#line 521
} 
#line 524
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< cudaChannelFormatKindUnsignedBlockCompressed3> () 
#line 525
{ 
#line 526
return cudaCreateChannelDesc(8, 8, 8, 8, cudaChannelFormatKindUnsignedBlockCompressed3); 
#line 527
} 
#line 530
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< cudaChannelFormatKindUnsignedBlockCompressed3SRGB> () 
#line 531
{ 
#line 532
return cudaCreateChannelDesc(8, 8, 8, 8, cudaChannelFormatKindUnsignedBlockCompressed3SRGB); 
#line 533
} 
#line 536
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< cudaChannelFormatKindUnsignedBlockCompressed4> () 
#line 537
{ 
#line 538
return cudaCreateChannelDesc(8, 0, 0, 0, cudaChannelFormatKindUnsignedBlockCompressed4); 
#line 539
} 
#line 542
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< cudaChannelFormatKindSignedBlockCompressed4> () 
#line 543
{ 
#line 544
return cudaCreateChannelDesc(8, 0, 0, 0, cudaChannelFormatKindSignedBlockCompressed4); 
#line 545
} 
#line 548
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< cudaChannelFormatKindUnsignedBlockCompressed5> () 
#line 549
{ 
#line 550
return cudaCreateChannelDesc(8, 8, 0, 0, cudaChannelFormatKindUnsignedBlockCompressed5); 
#line 551
} 
#line 554
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< cudaChannelFormatKindSignedBlockCompressed5> () 
#line 555
{ 
#line 556
return cudaCreateChannelDesc(8, 8, 0, 0, cudaChannelFormatKindSignedBlockCompressed5); 
#line 557
} 
#line 560
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< cudaChannelFormatKindUnsignedBlockCompressed6H> () 
#line 561
{ 
#line 562
return cudaCreateChannelDesc(16, 16, 16, 0, cudaChannelFormatKindUnsignedBlockCompressed6H); 
#line 563
} 
#line 566
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< cudaChannelFormatKindSignedBlockCompressed6H> () 
#line 567
{ 
#line 568
return cudaCreateChannelDesc(16, 16, 16, 0, cudaChannelFormatKindSignedBlockCompressed6H); 
#line 569
} 
#line 572
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< cudaChannelFormatKindUnsignedBlockCompressed7> () 
#line 573
{ 
#line 574
return cudaCreateChannelDesc(8, 8, 8, 8, cudaChannelFormatKindUnsignedBlockCompressed7); 
#line 575
} 
#line 578
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< cudaChannelFormatKindUnsignedBlockCompressed7SRGB> () 
#line 579
{ 
#line 580
return cudaCreateChannelDesc(8, 8, 8, 8, cudaChannelFormatKindUnsignedBlockCompressed7SRGB); 
#line 581
} 
#line 79 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\driver_functions.h"
static __inline cudaPitchedPtr make_cudaPitchedPtr(void *d, size_t p, size_t xsz, size_t ysz) 
#line 80
{ 
#line 81
cudaPitchedPtr s; 
#line 83
(s.ptr) = d; 
#line 84
(s.pitch) = p; 
#line 85
(s.xsize) = xsz; 
#line 86
(s.ysize) = ysz; 
#line 88
return s; 
#line 89
} 
#line 106
static __inline cudaPos make_cudaPos(size_t x, size_t y, size_t z) 
#line 107
{ 
#line 108
cudaPos p; 
#line 110
(p.x) = x; 
#line 111
(p.y) = y; 
#line 112
(p.z) = z; 
#line 114
return p; 
#line 115
} 
#line 132
static __inline cudaExtent make_cudaExtent(size_t w, size_t h, size_t d) 
#line 133
{ 
#line 134
cudaExtent e; 
#line 136
(e.width) = w; 
#line 137
(e.height) = h; 
#line 138
(e.depth) = d; 
#line 140
return e; 
#line 141
} 
#line 73 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\vector_functions.h"
static __inline char1 make_char1(signed char x); 
#line 75
static __inline uchar1 make_uchar1(unsigned char x); 
#line 77
static __inline char2 make_char2(signed char x, signed char y); 
#line 79
static __inline uchar2 make_uchar2(unsigned char x, unsigned char y); 
#line 81
static __inline char3 make_char3(signed char x, signed char y, signed char z); 
#line 83
static __inline uchar3 make_uchar3(unsigned char x, unsigned char y, unsigned char z); 
#line 85
static __inline char4 make_char4(signed char x, signed char y, signed char z, signed char w); 
#line 87
static __inline uchar4 make_uchar4(unsigned char x, unsigned char y, unsigned char z, unsigned char w); 
#line 89
static __inline short1 make_short1(short x); 
#line 91
static __inline ushort1 make_ushort1(unsigned short x); 
#line 93
static __inline short2 make_short2(short x, short y); 
#line 95
static __inline ushort2 make_ushort2(unsigned short x, unsigned short y); 
#line 97
static __inline short3 make_short3(short x, short y, short z); 
#line 99
static __inline ushort3 make_ushort3(unsigned short x, unsigned short y, unsigned short z); 
#line 101
static __inline short4 make_short4(short x, short y, short z, short w); 
#line 103
static __inline ushort4 make_ushort4(unsigned short x, unsigned short y, unsigned short z, unsigned short w); 
#line 105
static __inline int1 make_int1(int x); 
#line 107
static __inline uint1 make_uint1(unsigned x); 
#line 109
static __inline int2 make_int2(int x, int y); 
#line 111
static __inline uint2 make_uint2(unsigned x, unsigned y); 
#line 113
static __inline int3 make_int3(int x, int y, int z); 
#line 115
static __inline uint3 make_uint3(unsigned x, unsigned y, unsigned z); 
#line 117
static __inline int4 make_int4(int x, int y, int z, int w); 
#line 119
static __inline uint4 make_uint4(unsigned x, unsigned y, unsigned z, unsigned w); 
#line 121
static __inline long1 make_long1(long x); 
#line 123
static __inline ulong1 make_ulong1(unsigned long x); 
#line 125
static __inline long2 make_long2(long x, long y); 
#line 127
static __inline ulong2 make_ulong2(unsigned long x, unsigned long y); 
#line 129
static __inline long3 make_long3(long x, long y, long z); 
#line 131
static __inline ulong3 make_ulong3(unsigned long x, unsigned long y, unsigned long z); 
#line 133
static __inline long4 make_long4(long x, long y, long z, long w); 
#line 135
static __inline ulong4 make_ulong4(unsigned long x, unsigned long y, unsigned long z, unsigned long w); 
#line 137
static __inline float1 make_float1(float x); 
#line 139
static __inline float2 make_float2(float x, float y); 
#line 141
static __inline float3 make_float3(float x, float y, float z); 
#line 143
static __inline float4 make_float4(float x, float y, float z, float w); 
#line 145
static __inline longlong1 make_longlong1(__int64 x); 
#line 147
static __inline ulonglong1 make_ulonglong1(unsigned __int64 x); 
#line 149
static __inline longlong2 make_longlong2(__int64 x, __int64 y); 
#line 151
static __inline ulonglong2 make_ulonglong2(unsigned __int64 x, unsigned __int64 y); 
#line 153
static __inline longlong3 make_longlong3(__int64 x, __int64 y, __int64 z); 
#line 155
static __inline ulonglong3 make_ulonglong3(unsigned __int64 x, unsigned __int64 y, unsigned __int64 z); 
#line 157
static __inline longlong4 make_longlong4(__int64 x, __int64 y, __int64 z, __int64 w); 
#line 159
static __inline ulonglong4 make_ulonglong4(unsigned __int64 x, unsigned __int64 y, unsigned __int64 z, unsigned __int64 w); 
#line 161
static __inline double1 make_double1(double x); 
#line 163
static __inline double2 make_double2(double x, double y); 
#line 165
static __inline double3 make_double3(double x, double y, double z); 
#line 167
static __inline double4 make_double4(double x, double y, double z, double w); 
#line 73 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\vector_functions.hpp"
static __inline char1 make_char1(signed char x) 
#line 74
{ 
#line 75
char1 t; (t.x) = x; return t; 
#line 76
} 
#line 78
static __inline uchar1 make_uchar1(unsigned char x) 
#line 79
{ 
#line 80
uchar1 t; (t.x) = x; return t; 
#line 81
} 
#line 83
static __inline char2 make_char2(signed char x, signed char y) 
#line 84
{ 
#line 85
char2 t; (t.x) = x; (t.y) = y; return t; 
#line 86
} 
#line 88
static __inline uchar2 make_uchar2(unsigned char x, unsigned char y) 
#line 89
{ 
#line 90
uchar2 t; (t.x) = x; (t.y) = y; return t; 
#line 91
} 
#line 93
static __inline char3 make_char3(signed char x, signed char y, signed char z) 
#line 94
{ 
#line 95
char3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t; 
#line 96
} 
#line 98
static __inline uchar3 make_uchar3(unsigned char x, unsigned char y, unsigned char z) 
#line 99
{ 
#line 100
uchar3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t; 
#line 101
} 
#line 103
static __inline char4 make_char4(signed char x, signed char y, signed char z, signed char w) 
#line 104
{ 
#line 105
char4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t; 
#line 106
} 
#line 108
static __inline uchar4 make_uchar4(unsigned char x, unsigned char y, unsigned char z, unsigned char w) 
#line 109
{ 
#line 110
uchar4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t; 
#line 111
} 
#line 113
static __inline short1 make_short1(short x) 
#line 114
{ 
#line 115
short1 t; (t.x) = x; return t; 
#line 116
} 
#line 118
static __inline ushort1 make_ushort1(unsigned short x) 
#line 119
{ 
#line 120
ushort1 t; (t.x) = x; return t; 
#line 121
} 
#line 123
static __inline short2 make_short2(short x, short y) 
#line 124
{ 
#line 125
short2 t; (t.x) = x; (t.y) = y; return t; 
#line 126
} 
#line 128
static __inline ushort2 make_ushort2(unsigned short x, unsigned short y) 
#line 129
{ 
#line 130
ushort2 t; (t.x) = x; (t.y) = y; return t; 
#line 131
} 
#line 133
static __inline short3 make_short3(short x, short y, short z) 
#line 134
{ 
#line 135
short3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t; 
#line 136
} 
#line 138
static __inline ushort3 make_ushort3(unsigned short x, unsigned short y, unsigned short z) 
#line 139
{ 
#line 140
ushort3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t; 
#line 141
} 
#line 143
static __inline short4 make_short4(short x, short y, short z, short w) 
#line 144
{ 
#line 145
short4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t; 
#line 146
} 
#line 148
static __inline ushort4 make_ushort4(unsigned short x, unsigned short y, unsigned short z, unsigned short w) 
#line 149
{ 
#line 150
ushort4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t; 
#line 151
} 
#line 153
static __inline int1 make_int1(int x) 
#line 154
{ 
#line 155
int1 t; (t.x) = x; return t; 
#line 156
} 
#line 158
static __inline uint1 make_uint1(unsigned x) 
#line 159
{ 
#line 160
uint1 t; (t.x) = x; return t; 
#line 161
} 
#line 163
static __inline int2 make_int2(int x, int y) 
#line 164
{ 
#line 165
int2 t; (t.x) = x; (t.y) = y; return t; 
#line 166
} 
#line 168
static __inline uint2 make_uint2(unsigned x, unsigned y) 
#line 169
{ 
#line 170
uint2 t; (t.x) = x; (t.y) = y; return t; 
#line 171
} 
#line 173
static __inline int3 make_int3(int x, int y, int z) 
#line 174
{ 
#line 175
int3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t; 
#line 176
} 
#line 178
static __inline uint3 make_uint3(unsigned x, unsigned y, unsigned z) 
#line 179
{ 
#line 180
uint3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t; 
#line 181
} 
#line 183
static __inline int4 make_int4(int x, int y, int z, int w) 
#line 184
{ 
#line 185
int4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t; 
#line 186
} 
#line 188
static __inline uint4 make_uint4(unsigned x, unsigned y, unsigned z, unsigned w) 
#line 189
{ 
#line 190
uint4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t; 
#line 191
} 
#line 193
static __inline long1 make_long1(long x) 
#line 194
{ 
#line 195
long1 t; (t.x) = x; return t; 
#line 196
} 
#line 198
static __inline ulong1 make_ulong1(unsigned long x) 
#line 199
{ 
#line 200
ulong1 t; (t.x) = x; return t; 
#line 201
} 
#line 203
static __inline long2 make_long2(long x, long y) 
#line 204
{ 
#line 205
long2 t; (t.x) = x; (t.y) = y; return t; 
#line 206
} 
#line 208
static __inline ulong2 make_ulong2(unsigned long x, unsigned long y) 
#line 209
{ 
#line 210
ulong2 t; (t.x) = x; (t.y) = y; return t; 
#line 211
} 
#line 213
static __inline long3 make_long3(long x, long y, long z) 
#line 214
{ 
#line 215
long3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t; 
#line 216
} 
#line 218
static __inline ulong3 make_ulong3(unsigned long x, unsigned long y, unsigned long z) 
#line 219
{ 
#line 220
ulong3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t; 
#line 221
} 
#line 223
static __inline long4 make_long4(long x, long y, long z, long w) 
#line 224
{ 
#line 225
long4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t; 
#line 226
} 
#line 228
static __inline ulong4 make_ulong4(unsigned long x, unsigned long y, unsigned long z, unsigned long w) 
#line 229
{ 
#line 230
ulong4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t; 
#line 231
} 
#line 233
static __inline float1 make_float1(float x) 
#line 234
{ 
#line 235
float1 t; (t.x) = x; return t; 
#line 236
} 
#line 238
static __inline float2 make_float2(float x, float y) 
#line 239
{ 
#line 240
float2 t; (t.x) = x; (t.y) = y; return t; 
#line 241
} 
#line 243
static __inline float3 make_float3(float x, float y, float z) 
#line 244
{ 
#line 245
float3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t; 
#line 246
} 
#line 248
static __inline float4 make_float4(float x, float y, float z, float w) 
#line 249
{ 
#line 250
float4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t; 
#line 251
} 
#line 253
static __inline longlong1 make_longlong1(__int64 x) 
#line 254
{ 
#line 255
longlong1 t; (t.x) = x; return t; 
#line 256
} 
#line 258
static __inline ulonglong1 make_ulonglong1(unsigned __int64 x) 
#line 259
{ 
#line 260
ulonglong1 t; (t.x) = x; return t; 
#line 261
} 
#line 263
static __inline longlong2 make_longlong2(__int64 x, __int64 y) 
#line 264
{ 
#line 265
longlong2 t; (t.x) = x; (t.y) = y; return t; 
#line 266
} 
#line 268
static __inline ulonglong2 make_ulonglong2(unsigned __int64 x, unsigned __int64 y) 
#line 269
{ 
#line 270
ulonglong2 t; (t.x) = x; (t.y) = y; return t; 
#line 271
} 
#line 273
static __inline longlong3 make_longlong3(__int64 x, __int64 y, __int64 z) 
#line 274
{ 
#line 275
longlong3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t; 
#line 276
} 
#line 278
static __inline ulonglong3 make_ulonglong3(unsigned __int64 x, unsigned __int64 y, unsigned __int64 z) 
#line 279
{ 
#line 280
ulonglong3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t; 
#line 281
} 
#line 283
static __inline longlong4 make_longlong4(__int64 x, __int64 y, __int64 z, __int64 w) 
#line 284
{ 
#line 285
longlong4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t; 
#line 286
} 
#line 288
static __inline ulonglong4 make_ulonglong4(unsigned __int64 x, unsigned __int64 y, unsigned __int64 z, unsigned __int64 w) 
#line 289
{ 
#line 290
ulonglong4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t; 
#line 291
} 
#line 293
static __inline double1 make_double1(double x) 
#line 294
{ 
#line 295
double1 t; (t.x) = x; return t; 
#line 296
} 
#line 298
static __inline double2 make_double2(double x, double y) 
#line 299
{ 
#line 300
double2 t; (t.x) = x; (t.y) = y; return t; 
#line 301
} 
#line 303
static __inline double3 make_double3(double x, double y, double z) 
#line 304
{ 
#line 305
double3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t; 
#line 306
} 
#line 308
static __inline double4 make_double4(double x, double y, double z, double w) 
#line 309
{ 
#line 310
double4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t; 
#line 311
} 
#line 14 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\errno.h"
#pragma warning(push)
#pragma warning(disable: 4324 4514 4574 4710 4793 4820 4995 4996 28719 28726 28727 )
#line 18
__pragma( pack ( push, 8 )) extern "C" {
#line 23
__declspec(dllimport) int *__cdecl _errno(); 
#line 26
__declspec(dllimport) errno_t __cdecl _set_errno(int _Value); 
#line 27
__declspec(dllimport) errno_t __cdecl _get_errno(int * _Value); 
#line 29
__declspec(dllimport) unsigned long *__cdecl __doserrno(); 
#line 32
__declspec(dllimport) errno_t __cdecl _set_doserrno(unsigned long _Value); 
#line 33
__declspec(dllimport) errno_t __cdecl _get_doserrno(unsigned long * _Value); 
#line 134 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\errno.h"
}__pragma( pack ( pop )) 
#line 136
#pragma warning(pop)
#line 12 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\vcruntime_string.h"
#pragma warning(push)
#pragma warning(disable: 4514 4820 )
#line 17
__pragma( pack ( push, 8 )) extern "C" {
#line 21
[[nodiscard]] const void *__cdecl 
#line 22
memchr(const void * _Buf, int _Val, size_t _MaxCount); 
#line 28
[[nodiscard]] int __cdecl 
#line 29
memcmp(const void * _Buf1, const void * _Buf2, size_t _Size); 
#line 43 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\vcruntime_string.h"
void *__cdecl memcpy(void * _Dst, const void * _Src, size_t _Size); 
#line 50
void *__cdecl memmove(void * _Dst, const void * _Src, size_t _Size); 
#line 63 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\vcruntime_string.h"
void *__cdecl memset(void * _Dst, int _Val, size_t _Size); 
#line 69
[[nodiscard]] const char *__cdecl 
#line 70
strchr(const char * _Str, int _Val); 
#line 75
[[nodiscard]] const char *__cdecl 
#line 76
strrchr(const char * _Str, int _Ch); 
#line 81
[[nodiscard]] const char *__cdecl 
#line 82
strstr(const char * _Str, const char * _SubStr); 
#line 87
[[nodiscard]] const __wchar_t *__cdecl 
#line 89
wcschr(const __wchar_t * _Str, __wchar_t _Ch); 
#line 94
[[nodiscard]] const __wchar_t *__cdecl 
#line 95
wcsrchr(const __wchar_t * _Str, __wchar_t _Ch); 
#line 100
[[nodiscard]] const __wchar_t *__cdecl 
#line 102
wcsstr(const __wchar_t * _Str, const __wchar_t * _SubStr); 
#line 109
}__pragma( pack ( pop )) 
#line 113 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\vcruntime_string.h"
#pragma warning(pop)
#line 14 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_memcpy_s.h"
#pragma warning(push)
#pragma warning(disable: 4324 4514 4574 4710 4793 4820 4995 4996 28719 28726 28727 )
#line 18
__pragma( pack ( push, 8 )) extern "C" {
#line 39 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_memcpy_s.h"
static __inline errno_t __cdecl memcpy_s(void *const 
#line 40
_Destination, const rsize_t 
#line 41
_DestinationSize, const void *const 
#line 42
_Source, const rsize_t 
#line 43
_SourceSize) 
#line 45
{ 
#line 46
if (_SourceSize == (0)) 
#line 47
{ 
#line 48
return 0; 
#line 49
}  
#line 51
{ int _Expr_val = !(!(_Destination != (0))); if (!_Expr_val) { (*_errno()) = 22; _invalid_parameter_noinfo(); return 22; }  } ; 
#line 52
if ((_Source == (0)) || (_DestinationSize < _SourceSize)) 
#line 53
{ 
#line 54
memset(_Destination, 0, _DestinationSize); 
#line 56
{ int _Expr_val = !(!(_Source != (0))); if (!_Expr_val) { (*_errno()) = 22; _invalid_parameter_noinfo(); return 22; }  } ; 
#line 57
{ int _Expr_val = !(!(_DestinationSize >= _SourceSize)); if (!_Expr_val) { (*_errno()) = 34; _invalid_parameter_noinfo(); return 34; }  } ; 
#line 60
return 22; 
#line 61
}  
#line 62
memcpy(_Destination, _Source, _SourceSize); 
#line 63
return 0; 
#line 64
} 
#line 67
static __inline errno_t __cdecl memmove_s(void *const 
#line 68
_Destination, const rsize_t 
#line 69
_DestinationSize, const void *const 
#line 70
_Source, const rsize_t 
#line 71
_SourceSize) 
#line 73
{ 
#line 74
if (_SourceSize == (0)) 
#line 75
{ 
#line 76
return 0; 
#line 77
}  
#line 79
{ int _Expr_val = !(!(_Destination != (0))); if (!_Expr_val) { (*_errno()) = 22; _invalid_parameter_noinfo(); return 22; }  } ; 
#line 80
{ int _Expr_val = !(!(_Source != (0))); if (!_Expr_val) { (*_errno()) = 22; _invalid_parameter_noinfo(); return 22; }  } ; 
#line 81
{ int _Expr_val = !(!(_DestinationSize >= _SourceSize)); if (!_Expr_val) { (*_errno()) = 34; _invalid_parameter_noinfo(); return 34; }  } ; 
#line 83
memmove(_Destination, _Source, _SourceSize); 
#line 84
return 0; 
#line 85
} 
#line 93 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_memcpy_s.h"
}
#line 92
#pragma warning(pop)
__pragma( pack ( pop )) 
#line 17 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_memory.h"
#pragma warning(push)
#pragma warning(disable: 4324 4514 4574 4710 4793 4820 4995 4996 28719 28726 28727 )
#line 23
__pragma( pack ( push, 8 )) extern "C" {
#line 28
__declspec(dllimport) int __cdecl _memicmp(const void * _Buf1, const void * _Buf2, size_t _Size); 
#line 35
__declspec(dllimport) int __cdecl _memicmp_l(const void * _Buf1, const void * _Buf2, size_t _Size, _locale_t _Locale); 
#line 83 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_memory.h"
__declspec(dllimport) void *__cdecl memccpy(void * _Dst, const void * _Src, int _Val, size_t _Size); 
#line 91
__declspec(dllimport) int __cdecl memicmp(const void * _Buf1, const void * _Buf2, size_t _Size); 
#line 104 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_memory.h"
extern "C++" inline void *__cdecl memchr(void *
#line 105
_Pv, int 
#line 106
_C, size_t 
#line 107
_N) 
#line 109
{ 
#line 110
const void *const _Pvc = _Pv; 
#line 111
return const_cast< void *>(memchr(_Pvc, _C, _N)); 
#line 112
} 
#line 118 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_memory.h"
}__pragma( pack ( pop )) 
#line 122 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_memory.h"
#pragma warning(pop)
#line 14 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_wstring.h"
#pragma warning(push)
#pragma warning(disable: 4324 4514 4574 4710 4793 4820 4995 4996 28719 28726 28727 )
#line 20
__pragma( pack ( push, 8 )) extern "C" {
#line 32
__declspec(dllimport) errno_t __cdecl wcscat_s(__wchar_t * _Destination, rsize_t _SizeInWords, const __wchar_t * _Source); 
#line 39
__declspec(dllimport) errno_t __cdecl wcscpy_s(__wchar_t * _Destination, rsize_t _SizeInWords, const __wchar_t * _Source); 
#line 46
__declspec(dllimport) errno_t __cdecl wcsncat_s(__wchar_t * _Destination, rsize_t _SizeInWords, const __wchar_t * _Source, rsize_t _MaxCount); 
#line 54
__declspec(dllimport) errno_t __cdecl wcsncpy_s(__wchar_t * _Destination, rsize_t _SizeInWords, const __wchar_t * _Source, rsize_t _MaxCount); 
#line 62
__declspec(dllimport) __wchar_t *__cdecl wcstok_s(__wchar_t * _String, const __wchar_t * _Delimiter, __wchar_t ** _Context); 
#line 83 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_wstring.h"
__declspec(dllimport) __declspec(allocator) __wchar_t *__cdecl _wcsdup(const __wchar_t * _String); 
#line 93 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_wstring.h"
extern "C++" {template < size_t _Size > inline errno_t __cdecl wcscat_s ( wchar_t ( & _Destination ) [ _Size ], wchar_t const * _Source ) throw ( ) { return wcscat_s ( _Destination, _Size, _Source ); }}
#line 100 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_wstring.h"
__declspec(dllimport) __wchar_t *__cdecl wcscat(__wchar_t * _Destination, const __wchar_t * _Source); 
#line 108 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_wstring.h"
__declspec(dllimport) int __cdecl wcscmp(const __wchar_t * _String1, const __wchar_t * _String2); 
#line 113
extern "C++" {template < size_t _Size > inline errno_t __cdecl wcscpy_s ( wchar_t ( & _Destination ) [ _Size ], wchar_t const * _Source ) throw ( ) { return wcscpy_s ( _Destination, _Size, _Source ); }}
#line 119 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_wstring.h"
__declspec(dllimport) __wchar_t *__cdecl wcscpy(__wchar_t * _Destination, const __wchar_t * _Source); 
#line 126 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_wstring.h"
__declspec(dllimport) size_t __cdecl wcscspn(const __wchar_t * _String, const __wchar_t * _Control); 
#line 132
__declspec(dllimport) size_t __cdecl wcslen(const __wchar_t * _String); 
#line 145 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_wstring.h"
__declspec(dllimport) size_t __cdecl wcsnlen(const __wchar_t * _Source, size_t _MaxCount); 
#line 161 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_wstring.h"
static __inline size_t __cdecl wcsnlen_s(const __wchar_t *
#line 162
_Source, size_t 
#line 163
_MaxCount) 
#line 165
{ 
#line 166
return (_Source == (0)) ? 0 : wcsnlen(_Source, _MaxCount); 
#line 167
} 
#line 171 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_wstring.h"
extern "C++" {template < size_t _Size > inline errno_t __cdecl wcsncat_s ( wchar_t ( & _Destination ) [ _Size ], wchar_t const * _Source, size_t _Count ) throw ( ) { return wcsncat_s ( _Destination, _Size, _Source, _Count ); }}
#line 178 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_wstring.h"
__declspec(dllimport) __wchar_t *__cdecl wcsncat(__wchar_t * _Destination, const __wchar_t * _Source, size_t _Count); 
#line 187 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_wstring.h"
__declspec(dllimport) int __cdecl wcsncmp(const __wchar_t * _String1, const __wchar_t * _String2, size_t _MaxCount); 
#line 193
extern "C++" {template < size_t _Size > inline errno_t __cdecl wcsncpy_s ( wchar_t ( & _Destination ) [ _Size ], wchar_t const * _Source, size_t _Count ) throw ( ) { return wcsncpy_s ( _Destination, _Size, _Source, _Count ); }}
#line 200 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_wstring.h"
__declspec(dllimport) __wchar_t *__cdecl wcsncpy(__wchar_t * _Destination, const __wchar_t * _Source, size_t _Count); 
#line 209 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_wstring.h"
__declspec(dllimport) const __wchar_t *__cdecl wcspbrk(const __wchar_t * _String, const __wchar_t * _Control); 
#line 215
__declspec(dllimport) size_t __cdecl wcsspn(const __wchar_t * _String, const __wchar_t * _Control); 
#line 221
__declspec(dllimport) __wchar_t *__cdecl wcstok(__wchar_t * _String, const __wchar_t * _Delimiter, __wchar_t ** _Context); 
#line 239 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_wstring.h"
static __inline __wchar_t *__cdecl _wcstok(__wchar_t *const 
#line 240
_String, const __wchar_t *const 
#line 241
_Delimiter) 
#line 243
{ 
#line 244
return wcstok(_String, _Delimiter, 0); 
#line 245
} 
#line 253 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_wstring.h"
extern "C++" 
#line 252
__declspec(deprecated("wcstok has been changed to conform with the ISO C standard, adding an extra context parameter. To use the legacy Microsoft wcsto" "k, define _CRT_NON_CONFORMING_WCSTOK.")) inline __wchar_t *__cdecl 
#line 253
wcstok(__wchar_t *
#line 254
_String, const __wchar_t *
#line 255
_Delimiter) throw() 
#line 257
{ 
#line 258
return wcstok(_String, _Delimiter, 0); 
#line 259
} 
#line 268 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_wstring.h"
__declspec(dllimport) __wchar_t *__cdecl _wcserror(int _ErrorNumber); 
#line 273
__declspec(dllimport) errno_t __cdecl _wcserror_s(__wchar_t * _Buffer, size_t _SizeInWords, int _ErrorNumber); 
#line 279
extern "C++" {template < size_t _Size > inline errno_t __cdecl _wcserror_s ( wchar_t ( & _Buffer ) [ _Size ], int _Error ) throw ( ) { return _wcserror_s ( _Buffer, _Size, _Error ); }}
#line 288 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_wstring.h"
__declspec(dllimport) __wchar_t *__cdecl __wcserror(const __wchar_t * _String); 
#line 292
__declspec(dllimport) errno_t __cdecl __wcserror_s(__wchar_t * _Buffer, size_t _SizeInWords, const __wchar_t * _ErrorMessage); 
#line 298
extern "C++" {template < size_t _Size > inline errno_t __cdecl __wcserror_s ( wchar_t ( & _Buffer ) [ _Size ], wchar_t const * _ErrorMessage ) throw ( ) { return __wcserror_s ( _Buffer, _Size, _ErrorMessage ); }}
#line 304 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_wstring.h"
__declspec(dllimport) int __cdecl _wcsicmp(const __wchar_t * _String1, const __wchar_t * _String2); 
#line 309
__declspec(dllimport) int __cdecl _wcsicmp_l(const __wchar_t * _String1, const __wchar_t * _String2, _locale_t _Locale); 
#line 315
__declspec(dllimport) int __cdecl _wcsnicmp(const __wchar_t * _String1, const __wchar_t * _String2, size_t _MaxCount); 
#line 321
__declspec(dllimport) int __cdecl _wcsnicmp_l(const __wchar_t * _String1, const __wchar_t * _String2, size_t _MaxCount, _locale_t _Locale); 
#line 328
__declspec(dllimport) errno_t __cdecl _wcsnset_s(__wchar_t * _Destination, size_t _SizeInWords, __wchar_t _Value, size_t _MaxCount); 
#line 335
extern "C++" {template < size_t _Size > inline errno_t __cdecl _wcsnset_s ( wchar_t ( & _Destination ) [ _Size ], wchar_t _Value, size_t _MaxCount ) throw ( ) { return _wcsnset_s ( _Destination, _Size, _Value, _MaxCount ); }}
#line 342 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_wstring.h"
__declspec(dllimport) __wchar_t *__cdecl _wcsnset(__wchar_t * _String, __wchar_t _Value, size_t _MaxCount); 
#line 350 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_wstring.h"
__declspec(dllimport) __wchar_t *__cdecl _wcsrev(__wchar_t * _String); 
#line 354
__declspec(dllimport) errno_t __cdecl _wcsset_s(__wchar_t * _Destination, size_t _SizeInWords, __wchar_t _Value); 
#line 360
extern "C++" {template < size_t _Size > inline errno_t __cdecl _wcsset_s ( wchar_t ( & _String ) [ _Size ], wchar_t _Value ) throw ( ) { return _wcsset_s ( _String, _Size, _Value ); }}
#line 366 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_wstring.h"
__declspec(dllimport) __wchar_t *__cdecl _wcsset(__wchar_t * _String, __wchar_t _Value); 
#line 373 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_wstring.h"
__declspec(dllimport) errno_t __cdecl _wcslwr_s(__wchar_t * _String, size_t _SizeInWords); 
#line 378
extern "C++" {template < size_t _Size > inline errno_t __cdecl _wcslwr_s ( wchar_t ( & _String ) [ _Size ] ) throw ( ) { return _wcslwr_s ( _String, _Size ); }}
#line 383 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_wstring.h"
__declspec(dllimport) __wchar_t *__cdecl _wcslwr(__wchar_t * _String); 
#line 389 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_wstring.h"
__declspec(dllimport) errno_t __cdecl _wcslwr_s_l(__wchar_t * _String, size_t _SizeInWords, _locale_t _Locale); 
#line 395
extern "C++" {template < size_t _Size > inline errno_t __cdecl _wcslwr_s_l ( wchar_t ( & _String ) [ _Size ], _locale_t _Locale ) throw ( ) { return _wcslwr_s_l ( _String, _Size, _Locale ); }}
#line 401 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_wstring.h"
__declspec(dllimport) __wchar_t *__cdecl _wcslwr_l(__wchar_t * _String, _locale_t _Locale); 
#line 409 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_wstring.h"
__declspec(dllimport) errno_t __cdecl _wcsupr_s(__wchar_t * _String, size_t _Size); 
#line 414
extern "C++" {template < size_t _Size > inline errno_t __cdecl _wcsupr_s ( wchar_t ( & _String ) [ _Size ] ) throw ( ) { return _wcsupr_s ( _String, _Size ); }}
#line 419 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_wstring.h"
__declspec(dllimport) __wchar_t *__cdecl _wcsupr(__wchar_t * _String); 
#line 425 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_wstring.h"
__declspec(dllimport) errno_t __cdecl _wcsupr_s_l(__wchar_t * _String, size_t _Size, _locale_t _Locale); 
#line 431
extern "C++" {template < size_t _Size > inline errno_t __cdecl _wcsupr_s_l ( wchar_t ( & _String ) [ _Size ], _locale_t _Locale ) throw ( ) { return _wcsupr_s_l ( _String, _Size, _Locale ); }}
#line 437 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_wstring.h"
__declspec(dllimport) __wchar_t *__cdecl _wcsupr_l(__wchar_t * _String, _locale_t _Locale); 
#line 446 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_wstring.h"
__declspec(dllimport) size_t __cdecl wcsxfrm(__wchar_t * _Destination, const __wchar_t * _Source, size_t _MaxCount); 
#line 454
__declspec(dllimport) size_t __cdecl _wcsxfrm_l(__wchar_t * _Destination, const __wchar_t * _Source, size_t _MaxCount, _locale_t _Locale); 
#line 462
__declspec(dllimport) int __cdecl wcscoll(const __wchar_t * _String1, const __wchar_t * _String2); 
#line 468
__declspec(dllimport) int __cdecl _wcscoll_l(const __wchar_t * _String1, const __wchar_t * _String2, _locale_t _Locale); 
#line 475
__declspec(dllimport) int __cdecl _wcsicoll(const __wchar_t * _String1, const __wchar_t * _String2); 
#line 481
__declspec(dllimport) int __cdecl _wcsicoll_l(const __wchar_t * _String1, const __wchar_t * _String2, _locale_t _Locale); 
#line 488
__declspec(dllimport) int __cdecl _wcsncoll(const __wchar_t * _String1, const __wchar_t * _String2, size_t _MaxCount); 
#line 495
__declspec(dllimport) int __cdecl _wcsncoll_l(const __wchar_t * _String1, const __wchar_t * _String2, size_t _MaxCount, _locale_t _Locale); 
#line 503
__declspec(dllimport) int __cdecl _wcsnicoll(const __wchar_t * _String1, const __wchar_t * _String2, size_t _MaxCount); 
#line 510
__declspec(dllimport) int __cdecl _wcsnicoll_l(const __wchar_t * _String1, const __wchar_t * _String2, size_t _MaxCount, _locale_t _Locale); 
#line 525
extern "C++" {
#line 529
inline __wchar_t *__cdecl wcschr(__wchar_t *_String, __wchar_t _C) 
#line 530
{ 
#line 531
return const_cast< __wchar_t *>(wcschr(static_cast< const __wchar_t *>(_String), _C)); 
#line 532
} 
#line 535
inline __wchar_t *__cdecl wcspbrk(__wchar_t *_String, const __wchar_t *_Control) 
#line 536
{ 
#line 537
return const_cast< __wchar_t *>(wcspbrk(static_cast< const __wchar_t *>(_String), _Control)); 
#line 538
} 
#line 541
inline __wchar_t *__cdecl wcsrchr(__wchar_t *_String, __wchar_t _C) 
#line 542
{ 
#line 543
return const_cast< __wchar_t *>(wcsrchr(static_cast< const __wchar_t *>(_String), _C)); 
#line 544
} 
#line 548
inline __wchar_t *__cdecl wcsstr(__wchar_t *_String, const __wchar_t *_SubStr) 
#line 549
{ 
#line 550
return const_cast< __wchar_t *>(wcsstr(static_cast< const __wchar_t *>(_String), _SubStr)); 
#line 551
} 
#line 553
}
#line 570 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_wstring.h"
__declspec(dllimport) __wchar_t *__cdecl wcsdup(const __wchar_t * _String); 
#line 582 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_wstring.h"
__declspec(dllimport) int __cdecl wcsicmp(const __wchar_t * _String1, const __wchar_t * _String2); 
#line 588
__declspec(dllimport) int __cdecl wcsnicmp(const __wchar_t * _String1, const __wchar_t * _String2, size_t _MaxCount); 
#line 596
__declspec(dllimport) __wchar_t *__cdecl wcsnset(__wchar_t * _String, __wchar_t _Value, size_t _MaxCount); 
#line 604
__declspec(dllimport) __wchar_t *__cdecl wcsrev(__wchar_t * _String); 
#line 610
__declspec(dllimport) __wchar_t *__cdecl wcsset(__wchar_t * _String, __wchar_t _Value); 
#line 617
__declspec(dllimport) __wchar_t *__cdecl wcslwr(__wchar_t * _String); 
#line 623
__declspec(dllimport) __wchar_t *__cdecl wcsupr(__wchar_t * _String); 
#line 628
__declspec(dllimport) int __cdecl wcsicoll(const __wchar_t * _String1, const __wchar_t * _String2); 
#line 637 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_wstring.h"
}__pragma( pack ( pop )) 
#line 641 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_wstring.h"
#pragma warning(pop)
#line 19 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\string.h"
#pragma warning(push)
#pragma warning(disable: 4324 4514 4574 4710 4793 4820 4995 4996 28719 28726 28727 )
#line 23
__pragma( pack ( push, 8 )) extern "C" {
#line 32
__declspec(dllimport) errno_t __cdecl strcpy_s(char * _Destination, rsize_t _SizeInBytes, const char * _Source); 
#line 39
__declspec(dllimport) errno_t __cdecl strcat_s(char * _Destination, rsize_t _SizeInBytes, const char * _Source); 
#line 46
__declspec(dllimport) errno_t __cdecl strerror_s(char * _Buffer, size_t _SizeInBytes, int _ErrorNumber); 
#line 52
__declspec(dllimport) errno_t __cdecl strncat_s(char * _Destination, rsize_t _SizeInBytes, const char * _Source, rsize_t _MaxCount); 
#line 60
__declspec(dllimport) errno_t __cdecl strncpy_s(char * _Destination, rsize_t _SizeInBytes, const char * _Source, rsize_t _MaxCount); 
#line 68
__declspec(dllimport) char *__cdecl strtok_s(char * _String, const char * _Delimiter, char ** _Context); 
#line 76 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\string.h"
__declspec(dllimport) void *__cdecl _memccpy(void * _Dst, const void * _Src, int _Val, size_t _MaxCount); 
#line 83
extern "C++" {template < size_t _Size > inline errno_t __cdecl strcat_s ( char ( & _Destination ) [ _Size ], char const * _Source ) throw ( ) { return strcat_s ( _Destination, _Size, _Source ); }}
#line 91 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\string.h"
char *__cdecl strcat(char * _Destination, const char * _Source); 
#line 100 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\string.h"
int __cdecl strcmp(const char * _Str1, const char * _Str2); 
#line 106
__declspec(dllimport) int __cdecl _strcmpi(const char * _String1, const char * _String2); 
#line 112
__declspec(dllimport) int __cdecl strcoll(const char * _String1, const char * _String2); 
#line 118
__declspec(dllimport) int __cdecl _strcoll_l(const char * _String1, const char * _String2, _locale_t _Locale); 
#line 124
extern "C++" {template < size_t _Size > inline errno_t __cdecl strcpy_s ( char ( & _Destination ) [ _Size ], char const * _Source ) throw ( ) { return strcpy_s ( _Destination, _Size, _Source ); }}
#line 130 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\string.h"
char *__cdecl strcpy(char * _Destination, const char * _Source); 
#line 137 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\string.h"
__declspec(dllimport) size_t __cdecl strcspn(const char * _Str, const char * _Control); 
#line 148 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\string.h"
__declspec(dllimport) __declspec(allocator) char *__cdecl _strdup(const char * _Source); 
#line 159 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\string.h"
__declspec(dllimport) char *__cdecl _strerror(const char * _ErrorMessage); 
#line 164
__declspec(dllimport) errno_t __cdecl _strerror_s(char * _Buffer, size_t _SizeInBytes, const char * _ErrorMessage); 
#line 170
extern "C++" {template < size_t _Size > inline errno_t __cdecl _strerror_s ( char ( & _Buffer ) [ _Size ], char const * _ErrorMessage ) throw ( ) { return _strerror_s ( _Buffer, _Size, _ErrorMessage ); }}
#line 178 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\string.h"
__declspec(dllimport) char *__cdecl strerror(int _ErrorMessage); 
#line 182
extern "C++" {template < size_t _Size > inline errno_t __cdecl strerror_s ( char ( & _Buffer ) [ _Size ], int _ErrorMessage ) throw ( ) { return strerror_s ( _Buffer, _Size, _ErrorMessage ); }}
#line 189 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\string.h"
__declspec(dllimport) int __cdecl _stricmp(const char * _String1, const char * _String2); 
#line 195
__declspec(dllimport) int __cdecl _stricoll(const char * _String1, const char * _String2); 
#line 201
__declspec(dllimport) int __cdecl _stricoll_l(const char * _String1, const char * _String2, _locale_t _Locale); 
#line 208
__declspec(dllimport) int __cdecl _stricmp_l(const char * _String1, const char * _String2, _locale_t _Locale); 
#line 215
size_t __cdecl strlen(const char * _Str); 
#line 220
__declspec(dllimport) errno_t __cdecl _strlwr_s(char * _String, size_t _Size); 
#line 225
extern "C++" {template < size_t _Size > inline errno_t __cdecl _strlwr_s ( char ( & _String ) [ _Size ] ) throw ( ) { return _strlwr_s ( _String, _Size ); }}
#line 230 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\string.h"
__declspec(dllimport) char *__cdecl _strlwr(char * _String); 
#line 236 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\string.h"
__declspec(dllimport) errno_t __cdecl _strlwr_s_l(char * _String, size_t _Size, _locale_t _Locale); 
#line 242
extern "C++" {template < size_t _Size > inline errno_t __cdecl _strlwr_s_l ( char ( & _String ) [ _Size ], _locale_t _Locale ) throw ( ) { return _strlwr_s_l ( _String, _Size, _Locale ); }}
#line 248 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\string.h"
__declspec(dllimport) char *__cdecl _strlwr_l(char * _String, _locale_t _Locale); 
#line 255 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\string.h"
extern "C++" {template < size_t _Size > inline errno_t __cdecl strncat_s ( char ( & _Destination ) [ _Size ], char const * _Source, size_t _Count ) throw ( ) { return strncat_s ( _Destination, _Size, _Source, _Count ); }}
#line 262 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\string.h"
__declspec(dllimport) char *__cdecl strncat(char * _Destination, const char * _Source, size_t _Count); 
#line 271 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\string.h"
__declspec(dllimport) int __cdecl strncmp(const char * _Str1, const char * _Str2, size_t _MaxCount); 
#line 278
__declspec(dllimport) int __cdecl _strnicmp(const char * _String1, const char * _String2, size_t _MaxCount); 
#line 285
__declspec(dllimport) int __cdecl _strnicmp_l(const char * _String1, const char * _String2, size_t _MaxCount, _locale_t _Locale); 
#line 293
__declspec(dllimport) int __cdecl _strnicoll(const char * _String1, const char * _String2, size_t _MaxCount); 
#line 300
__declspec(dllimport) int __cdecl _strnicoll_l(const char * _String1, const char * _String2, size_t _MaxCount, _locale_t _Locale); 
#line 308
__declspec(dllimport) int __cdecl _strncoll(const char * _String1, const char * _String2, size_t _MaxCount); 
#line 315
__declspec(dllimport) int __cdecl _strncoll_l(const char * _String1, const char * _String2, size_t _MaxCount, _locale_t _Locale); 
#line 322
__declspec(dllimport) size_t __cdecl __strncnt(const char * _String, size_t _Count); 
#line 327
extern "C++" {template < size_t _Size > inline errno_t __cdecl strncpy_s ( char ( & _Destination ) [ _Size ], char const * _Source, size_t _Count ) throw ( ) { return strncpy_s ( _Destination, _Size, _Source, _Count ); }}
#line 334 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\string.h"
__declspec(dllimport) char *__cdecl strncpy(char * _Destination, const char * _Source, size_t _Count); 
#line 351 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\string.h"
__declspec(dllimport) size_t __cdecl strnlen(const char * _String, size_t _MaxCount); 
#line 367 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\string.h"
static __inline size_t __cdecl strnlen_s(const char *
#line 368
_String, size_t 
#line 369
_MaxCount) 
#line 371
{ 
#line 372
return (_String == (0)) ? 0 : strnlen(_String, _MaxCount); 
#line 373
} 
#line 378 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\string.h"
__declspec(dllimport) errno_t __cdecl _strnset_s(char * _String, size_t _SizeInBytes, int _Value, size_t _MaxCount); 
#line 385
extern "C++" {template < size_t _Size > inline errno_t __cdecl _strnset_s ( char ( & _Destination ) [ _Size ], int _Value, size_t _Count ) throw ( ) { return _strnset_s ( _Destination, _Size, _Value, _Count ); }}
#line 392 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\string.h"
__declspec(dllimport) char *__cdecl _strnset(char * _Destination, int _Value, size_t _Count); 
#line 401 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\string.h"
__declspec(dllimport) const char *__cdecl strpbrk(const char * _Str, const char * _Control); 
#line 406
__declspec(dllimport) char *__cdecl _strrev(char * _Str); 
#line 411
__declspec(dllimport) errno_t __cdecl _strset_s(char * _Destination, size_t _DestinationSize, int _Value); 
#line 417
extern "C++" {template < size_t _Size > inline errno_t __cdecl _strset_s ( char ( & _Destination ) [ _Size ], int _Value ) throw ( ) { return _strset_s ( _Destination, _Size, _Value ); }}
#line 423 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\string.h"
char *__cdecl _strset(char * _Destination, int _Value); 
#line 430 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\string.h"
__declspec(dllimport) size_t __cdecl strspn(const char * _Str, const char * _Control); 
#line 436
__declspec(dllimport) char *__cdecl strtok(char * _String, const char * _Delimiter); 
#line 442
__declspec(dllimport) errno_t __cdecl _strupr_s(char * _String, size_t _Size); 
#line 447
extern "C++" {template < size_t _Size > inline errno_t __cdecl _strupr_s ( char ( & _String ) [ _Size ] ) throw ( ) { return _strupr_s ( _String, _Size ); }}
#line 452 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\string.h"
__declspec(dllimport) char *__cdecl _strupr(char * _String); 
#line 458 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\string.h"
__declspec(dllimport) errno_t __cdecl _strupr_s_l(char * _String, size_t _Size, _locale_t _Locale); 
#line 464
extern "C++" {template < size_t _Size > inline errno_t __cdecl _strupr_s_l ( char ( & _String ) [ _Size ], _locale_t _Locale ) throw ( ) { return _strupr_s_l ( _String, _Size, _Locale ); }}
#line 470 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\string.h"
__declspec(dllimport) char *__cdecl _strupr_l(char * _String, _locale_t _Locale); 
#line 479 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\string.h"
__declspec(dllimport) size_t __cdecl strxfrm(char * _Destination, const char * _Source, size_t _MaxCount); 
#line 487
__declspec(dllimport) size_t __cdecl _strxfrm_l(char * _Destination, const char * _Source, size_t _MaxCount, _locale_t _Locale); 
#line 497
extern "C++" {
#line 500
inline char *__cdecl strchr(char *const _String, const int _Ch) 
#line 501
{ 
#line 502
return const_cast< char *>(strchr(static_cast< const char *>(_String), _Ch)); 
#line 503
} 
#line 506
inline char *__cdecl strpbrk(char *const _String, const char *const _Control) 
#line 507
{ 
#line 508
return const_cast< char *>(strpbrk(static_cast< const char *>(_String), _Control)); 
#line 509
} 
#line 512
inline char *__cdecl strrchr(char *const _String, const int _Ch) 
#line 513
{ 
#line 514
return const_cast< char *>(strrchr(static_cast< const char *>(_String), _Ch)); 
#line 515
} 
#line 518
inline char *__cdecl strstr(char *const _String, const char *const _SubString) 
#line 519
{ 
#line 520
return const_cast< char *>(strstr(static_cast< const char *>(_String), _SubString)); 
#line 521
} 
#line 522
}
#line 532 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\string.h"
__declspec(dllimport) char *__cdecl strdup(const char * _String); 
#line 539
__declspec(dllimport) int __cdecl strcmpi(const char * _String1, const char * _String2); 
#line 545
__declspec(dllimport) int __cdecl stricmp(const char * _String1, const char * _String2); 
#line 551
__declspec(dllimport) char *__cdecl strlwr(char * _String); 
#line 556
__declspec(dllimport) int __cdecl strnicmp(const char * _String1, const char * _String2, size_t _MaxCount); 
#line 563
__declspec(dllimport) char *__cdecl strnset(char * _String, int _Value, size_t _MaxCount); 
#line 570
__declspec(dllimport) char *__cdecl strrev(char * _String); 
#line 575
char *__cdecl strset(char * _String, int _Value); 
#line 580
__declspec(dllimport) char *__cdecl strupr(char * _String); 
#line 588 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\string.h"
}__pragma( pack ( pop )) 
#line 590
#pragma warning(pop)
#line 13 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_wtime.h"
#pragma warning(push)
#pragma warning(disable: 4324 4514 4574 4710 4793 4820 4995 4996 28719 28726 28727 )
#line 17
__pragma( pack ( push, 8 )) extern "C" {
#line 26
struct tm { 
#line 28
int tm_sec; 
#line 29
int tm_min; 
#line 30
int tm_hour; 
#line 31
int tm_mday; 
#line 32
int tm_mon; 
#line 33
int tm_year; 
#line 34
int tm_wday; 
#line 35
int tm_yday; 
#line 36
int tm_isdst; 
#line 37
}; 
#line 48
__declspec(dllimport) __wchar_t *__cdecl _wasctime(const tm * _Tm); 
#line 54
__declspec(dllimport) errno_t __cdecl _wasctime_s(__wchar_t * _Buffer, size_t _SizeInWords, const tm * _Tm); 
#line 60
extern "C++" {template < size_t _Size > inline errno_t __cdecl _wasctime_s ( wchar_t ( & _Buffer ) [ _Size ], struct tm const * _Time ) throw ( ) { return _wasctime_s ( _Buffer, _Size, _Time ); }}
#line 69 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_wtime.h"
__declspec(dllimport) size_t __cdecl wcsftime(__wchar_t * _Buffer, size_t _SizeInWords, const __wchar_t * _Format, const tm * _Tm); 
#line 78
__declspec(dllimport) size_t __cdecl _wcsftime_l(__wchar_t * _Buffer, size_t _SizeInWords, const __wchar_t * _Format, const tm * _Tm, _locale_t _Locale); 
#line 88
__declspec(dllimport) __wchar_t *__cdecl _wctime32(const __time32_t * _Time); 
#line 93
__declspec(dllimport) errno_t __cdecl _wctime32_s(__wchar_t * _Buffer, size_t _SizeInWords, const __time32_t * _Time); 
#line 99
extern "C++" {template < size_t _Size > inline errno_t __cdecl _wctime32_s ( wchar_t ( & _Buffer ) [ _Size ], __time32_t const * _Time ) throw ( ) { return _wctime32_s ( _Buffer, _Size, _Time ); }}
#line 108 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_wtime.h"
__declspec(dllimport) __wchar_t *__cdecl _wctime64(const __time64_t * _Time); 
#line 113
__declspec(dllimport) errno_t __cdecl _wctime64_s(__wchar_t * _Buffer, size_t _SizeInWords, const __time64_t * _Time); 
#line 118
extern "C++" {template < size_t _Size > inline errno_t __cdecl _wctime64_s ( wchar_t ( & _Buffer ) [ _Size ], __time64_t const * _Time ) throw ( ) { return _wctime64_s ( _Buffer, _Size, _Time ); }}
#line 125 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_wtime.h"
__declspec(dllimport) errno_t __cdecl _wstrdate_s(__wchar_t * _Buffer, size_t _SizeInWords); 
#line 130
extern "C++" {template < size_t _Size > inline errno_t __cdecl _wstrdate_s ( wchar_t ( & _Buffer ) [ _Size ] ) throw ( ) { return _wstrdate_s ( _Buffer, _Size ); }}
#line 135 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_wtime.h"
__declspec(dllimport) __wchar_t *__cdecl _wstrdate(__wchar_t * _Buffer); 
#line 141 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_wtime.h"
__declspec(dllimport) errno_t __cdecl _wstrtime_s(__wchar_t * _Buffer, size_t _SizeInWords); 
#line 146
extern "C++" {template < size_t _Size > inline errno_t __cdecl _wstrtime_s ( wchar_t ( & _Buffer ) [ _Size ] ) throw ( ) { return _wstrtime_s ( _Buffer, _Size ); }}
#line 151 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_wtime.h"
__declspec(dllimport) __wchar_t *__cdecl _wstrtime(__wchar_t * _Buffer); 
#line 186 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_wtime.h"
static __inline __wchar_t *__cdecl _wctime(const time_t *const 
#line 187
_Time) 
#line 188
{ 
#line 189
return _wctime64(_Time); 
#line 190
} 
#line 193
static __inline errno_t __cdecl _wctime_s(__wchar_t *const 
#line 194
_Buffer, const size_t 
#line 195
_SizeInWords, const time_t *const 
#line 196
_Time) 
#line 198
{ 
#line 199
return _wctime64_s(_Buffer, _SizeInWords, _Time); 
#line 200
} 
#line 205 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_wtime.h"
}__pragma( pack ( pop )) 
#line 207
#pragma warning(pop)
#line 15 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\time.h"
#pragma warning(push)
#pragma warning(disable: 4324 4514 4574 4710 4793 4820 4995 4996 28719 28726 28727 )
#line 19
__pragma( pack ( push, 8 )) extern "C" {
#line 28
typedef long clock_t; 
#line 30
struct _timespec32 { 
#line 32
__time32_t tv_sec; 
#line 33
long tv_nsec; 
#line 34
}; 
#line 36
struct _timespec64 { 
#line 38
__time64_t tv_sec; 
#line 39
long tv_nsec; 
#line 40
}; 
#line 43
struct timespec { 
#line 45
time_t tv_sec; 
#line 46
long tv_nsec; 
#line 47
}; 
#line 66 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\time.h"
__declspec(dllimport) int *__cdecl __daylight(); 
#line 72
__declspec(dllimport) long *__cdecl __dstbias(); 
#line 78
__declspec(dllimport) long *__cdecl __timezone(); 
#line 84
__declspec(dllimport) char **__cdecl __tzname(); 
#line 89
__declspec(dllimport) errno_t __cdecl _get_daylight(int * _Daylight); 
#line 94
__declspec(dllimport) errno_t __cdecl _get_dstbias(long * _DaylightSavingsBias); 
#line 99
__declspec(dllimport) errno_t __cdecl _get_timezone(long * _TimeZone); 
#line 104
__declspec(dllimport) errno_t __cdecl _get_tzname(size_t * _ReturnValue, char * _Buffer, size_t _SizeInBytes, int _Index); 
#line 121
__declspec(dllimport) char *__cdecl asctime(const tm * _Tm); 
#line 128
__declspec(dllimport) errno_t __cdecl asctime_s(char * _Buffer, size_t _SizeInBytes, const tm * _Tm); 
#line 135 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\time.h"
extern "C++" {template < size_t _Size > inline errno_t __cdecl asctime_s ( char ( & _Buffer ) [ _Size ], struct tm const * _Time ) throw ( ) { return asctime_s ( _Buffer, _Size, _Time ); }}
#line 142 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\time.h"
__declspec(dllimport) clock_t __cdecl clock(); 
#line 147
__declspec(dllimport) char *__cdecl _ctime32(const __time32_t * _Time); 
#line 152
__declspec(dllimport) errno_t __cdecl _ctime32_s(char * _Buffer, size_t _SizeInBytes, const __time32_t * _Time); 
#line 158
extern "C++" {template < size_t _Size > inline errno_t __cdecl _ctime32_s ( char ( & _Buffer ) [ _Size ], __time32_t const * _Time ) throw ( ) { return _ctime32_s ( _Buffer, _Size, _Time ); }}
#line 167 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\time.h"
__declspec(dllimport) char *__cdecl _ctime64(const __time64_t * _Time); 
#line 172
__declspec(dllimport) errno_t __cdecl _ctime64_s(char * _Buffer, size_t _SizeInBytes, const __time64_t * _Time); 
#line 178
extern "C++" {template < size_t _Size > inline errno_t __cdecl _ctime64_s ( char ( & _Buffer ) [ _Size ], __time64_t const * _Time ) throw ( ) { return _ctime64_s ( _Buffer, _Size, _Time ); }}
#line 185 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\time.h"
__declspec(dllimport) double __cdecl _difftime32(__time32_t _Time1, __time32_t _Time2); 
#line 191
__declspec(dllimport) double __cdecl _difftime64(__time64_t _Time1, __time64_t _Time2); 
#line 198
__declspec(dllimport) tm *__cdecl _gmtime32(const __time32_t * _Time); 
#line 203
__declspec(dllimport) errno_t __cdecl _gmtime32_s(tm * _Tm, const __time32_t * _Time); 
#line 210
__declspec(dllimport) tm *__cdecl _gmtime64(const __time64_t * _Time); 
#line 215
__declspec(dllimport) errno_t __cdecl _gmtime64_s(tm * _Tm, const __time64_t * _Time); 
#line 222
__declspec(dllimport) tm *__cdecl _localtime32(const __time32_t * _Time); 
#line 227
__declspec(dllimport) errno_t __cdecl _localtime32_s(tm * _Tm, const __time32_t * _Time); 
#line 234
__declspec(dllimport) tm *__cdecl _localtime64(const __time64_t * _Time); 
#line 239
__declspec(dllimport) errno_t __cdecl _localtime64_s(tm * _Tm, const __time64_t * _Time); 
#line 245
__declspec(dllimport) __time32_t __cdecl _mkgmtime32(tm * _Tm); 
#line 250
__declspec(dllimport) __time64_t __cdecl _mkgmtime64(tm * _Tm); 
#line 255
__declspec(dllimport) __time32_t __cdecl _mktime32(tm * _Tm); 
#line 260
__declspec(dllimport) __time64_t __cdecl _mktime64(tm * _Tm); 
#line 266
__declspec(dllimport) size_t __cdecl strftime(char * _Buffer, size_t _SizeInBytes, const char * _Format, const tm * _Tm); 
#line 275
__declspec(dllimport) size_t __cdecl _strftime_l(char * _Buffer, size_t _MaxSize, const char * _Format, const tm * _Tm, _locale_t _Locale); 
#line 284
__declspec(dllimport) errno_t __cdecl _strdate_s(char * _Buffer, size_t _SizeInBytes); 
#line 289
extern "C++" {template < size_t _Size > inline errno_t __cdecl _strdate_s ( char ( & _Buffer ) [ _Size ] ) throw ( ) { return _strdate_s ( _Buffer, _Size ); }}
#line 294 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\time.h"
__declspec(dllimport) char *__cdecl _strdate(char * _Buffer); 
#line 300 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\time.h"
__declspec(dllimport) errno_t __cdecl _strtime_s(char * _Buffer, size_t _SizeInBytes); 
#line 305
extern "C++" {template < size_t _Size > inline errno_t __cdecl _strtime_s ( char ( & _Buffer ) [ _Size ] ) throw ( ) { return _strtime_s ( _Buffer, _Size ); }}
#line 310 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\time.h"
__declspec(dllimport) char *__cdecl _strtime(char * _Buffer); 
#line 315 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\time.h"
__declspec(dllimport) __time32_t __cdecl _time32(__time32_t * _Time); 
#line 319
__declspec(dllimport) __time64_t __cdecl _time64(__time64_t * _Time); 
#line 325
__declspec(dllimport) int __cdecl _timespec32_get(_timespec32 * _Ts, int _Base); 
#line 332
__declspec(dllimport) int __cdecl _timespec64_get(_timespec64 * _Ts, int _Base); 
#line 346
__declspec(dllimport) void __cdecl _tzset(); 
#line 349
__declspec(deprecated("This function or variable has been superceded by newer library or operating system functionality. Consider using GetLocalTime in" "stead. See online help for details.")) 
#line 350
__declspec(dllimport) unsigned __cdecl _getsystime(tm * _Tm); 
#line 354
__declspec(deprecated("This function or variable has been superceded by newer library or operating system functionality. Consider using SetLocalTime in" "stead. See online help for details.")) 
#line 355
__declspec(dllimport) unsigned __cdecl _setsystime(tm * _Tm, unsigned _Milliseconds); 
#line 471 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\time.h"
static __inline char *__cdecl ctime(const time_t *const 
#line 472
_Time) 
#line 474
{ 
#line 475
return _ctime64(_Time); 
#line 476
} 
#line 479
static __inline double __cdecl difftime(const time_t 
#line 480
_Time1, const time_t 
#line 481
_Time2) 
#line 483
{ 
#line 484
return _difftime64(_Time1, _Time2); 
#line 485
} 
#line 488
static __inline tm *__cdecl gmtime(const time_t *const 
#line 489
_Time) 
#line 490
{ 
#line 491
return _gmtime64(_Time); 
#line 492
} 
#line 495
static __inline tm *__cdecl localtime(const time_t *const 
#line 496
_Time) 
#line 498
{ 
#line 499
return _localtime64(_Time); 
#line 500
} 
#line 503
static __inline time_t __cdecl _mkgmtime(tm *const 
#line 504
_Tm) 
#line 506
{ 
#line 507
return _mkgmtime64(_Tm); 
#line 508
} 
#line 511
static __inline time_t __cdecl mktime(tm *const 
#line 512
_Tm) 
#line 514
{ 
#line 515
return _mktime64(_Tm); 
#line 516
} 
#line 518
static __inline time_t __cdecl time(time_t *const 
#line 519
_Time) 
#line 521
{ 
#line 522
return _time64(_Time); 
#line 523
} 
#line 526
static __inline int __cdecl timespec_get(timespec *const 
#line 527
_Ts, const int 
#line 528
_Base) 
#line 530
{ 
#line 531
return _timespec64_get((_timespec64 *)_Ts, _Base); 
#line 532
} 
#line 536
static __inline errno_t __cdecl ctime_s(char *const 
#line 537
_Buffer, const size_t 
#line 538
_SizeInBytes, const time_t *const 
#line 539
_Time) 
#line 541
{ 
#line 542
return _ctime64_s(_Buffer, _SizeInBytes, _Time); 
#line 543
} 
#line 546
static __inline errno_t __cdecl gmtime_s(tm *const 
#line 547
_Tm, const time_t *const 
#line 548
_Time) 
#line 550
{ 
#line 551
return _gmtime64_s(_Tm, _Time); 
#line 552
} 
#line 555
static __inline errno_t __cdecl localtime_s(tm *const 
#line 556
_Tm, const time_t *const 
#line 557
_Time) 
#line 559
{ 
#line 560
return _localtime64_s(_Tm, _Time); 
#line 561
} 
#line 580 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\time.h"
__declspec(dllimport) void __cdecl tzset(); 
#line 587 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\time.h"
}__pragma( pack ( pop )) 
#line 589
#pragma warning(pop)
#line 88 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt/common_functions.h"
extern "C" {
#line 91 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt/common_functions.h"
__declspec(dllimport) extern clock_t __cdecl clock(); 
#line 96 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt/common_functions.h"
extern void *__cdecl memset(void *, int, size_t); 
#line 97
extern void *__cdecl memcpy(void *, const void *, size_t); 
#line 99
}
#line 121 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"
extern "C" {
#line 219 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"
extern int __cdecl abs(int a); 
#line 227
extern long __cdecl labs(long a); 
#line 235
extern __int64 llabs(__int64 a); 
#line 285 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"
extern double __cdecl fabs(double x); 
#line 328
extern __inline float fabsf(float x); 
#line 338 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"
extern inline int min(const int a, const int b); 
#line 345
extern inline unsigned umin(const unsigned a, const unsigned b); 
#line 352
extern inline __int64 llmin(const __int64 a, const __int64 b); 
#line 359
extern inline unsigned __int64 ullmin(const unsigned __int64 a, const unsigned __int64 b); 
#line 382 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"
__declspec(dllimport) extern float __cdecl fminf(float x, float y); 
#line 402 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"
__declspec(dllimport) extern double __cdecl fmin(double x, double y); 
#line 413 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"
extern inline int max(const int a, const int b); 
#line 421
extern inline unsigned umax(const unsigned a, const unsigned b); 
#line 428
extern inline __int64 llmax(const __int64 a, const __int64 b); 
#line 435
extern inline unsigned __int64 ullmax(const unsigned __int64 a, const unsigned __int64 b); 
#line 458 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"
__declspec(dllimport) extern float __cdecl fmaxf(float x, float y); 
#line 478 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"
__declspec(dllimport) extern double __cdecl fmax(double, double); 
#line 520 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"
extern double __cdecl sin(double x); 
#line 553
extern double __cdecl cos(double x); 
#line 572 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"
extern void sincos(double x, double * sptr, double * cptr); 
#line 588
extern void sincosf(float x, float * sptr, float * cptr); 
#line 633 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"
extern double __cdecl tan(double x); 
#line 702
extern double __cdecl sqrt(double x); 
#line 774 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"
extern double rsqrt(double x); 
#line 844
extern float rsqrtf(float x); 
#line 902 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"
__declspec(dllimport) extern double __cdecl log2(double x); 
#line 967 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"
__declspec(dllimport) extern double __cdecl exp2(double x); 
#line 1032 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"
__declspec(dllimport) extern float __cdecl exp2f(float x); 
#line 1097 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"
extern double exp10(double x); 
#line 1160
extern float exp10f(float x); 
#line 1255 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"
__declspec(dllimport) extern double __cdecl expm1(double x); 
#line 1347 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"
__declspec(dllimport) extern float __cdecl expm1f(float x); 
#line 1403 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"
__declspec(dllimport) extern float __cdecl log2f(float x); 
#line 1455 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"
extern double __cdecl log10(double x); 
#line 1525
extern double __cdecl log(double x); 
#line 1623 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"
__declspec(dllimport) extern double __cdecl log1p(double x); 
#line 1722 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"
__declspec(dllimport) extern float __cdecl log1pf(float x); 
#line 1784 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"
__declspec(dllimport) extern double __cdecl floor(double x); 
#line 1863
extern double __cdecl exp(double x); 
#line 1904
extern double __cdecl cosh(double x); 
#line 1954
extern double __cdecl sinh(double x); 
#line 2004
extern double __cdecl tanh(double x); 
#line 2061 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"
__declspec(dllimport) extern double __cdecl acosh(double x); 
#line 2119 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"
__declspec(dllimport) extern float __cdecl acoshf(float x); 
#line 2172 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"
__declspec(dllimport) extern double __cdecl asinh(double x); 
#line 2225 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"
__declspec(dllimport) extern float __cdecl asinhf(float x); 
#line 2279 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"
__declspec(dllimport) extern double __cdecl atanh(double x); 
#line 2333 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"
__declspec(dllimport) extern float __cdecl atanhf(float x); 
#line 2380 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"
__declspec(dllimport) extern double __cdecl ldexp(double x, int exp); 
#line 2426
extern __inline float ldexpf(float x, int exp); 
#line 2480 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"
__declspec(dllimport) extern double __cdecl logb(double x); 
#line 2535 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"
__declspec(dllimport) extern float __cdecl logbf(float x); 
#line 2575 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"
__declspec(dllimport) extern int __cdecl ilogb(double x); 
#line 2615 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"
__declspec(dllimport) extern int __cdecl ilogbf(float x); 
#line 2691 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"
__declspec(dllimport) extern double __cdecl scalbn(double x, int n); 
#line 2767 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"
__declspec(dllimport) extern float __cdecl scalbnf(float x, int n); 
#line 2843 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"
__declspec(dllimport) extern double __cdecl scalbln(double x, long n); 
#line 2919 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"
__declspec(dllimport) extern float __cdecl scalblnf(float x, long n); 
#line 2994 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"
__declspec(dllimport) extern double __cdecl frexp(double x, int * nptr); 
#line 3068
extern __inline float frexpf(float x, int * nptr); 
#line 3122 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"
__declspec(dllimport) extern double __cdecl round(double x); 
#line 3177 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"
__declspec(dllimport) extern float __cdecl roundf(float x); 
#line 3195 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"
__declspec(dllimport) extern long __cdecl lround(double x); 
#line 3213 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"
__declspec(dllimport) extern long __cdecl lroundf(float x); 
#line 3231 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"
__declspec(dllimport) extern __int64 __cdecl llround(double x); 
#line 3249 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"
__declspec(dllimport) extern __int64 __cdecl llroundf(float x); 
#line 3377 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"
__declspec(dllimport) extern float __cdecl rintf(float x); 
#line 3394 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"
__declspec(dllimport) extern long __cdecl lrint(double x); 
#line 3411 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"
__declspec(dllimport) extern long __cdecl lrintf(float x); 
#line 3428 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"
__declspec(dllimport) extern __int64 __cdecl llrint(double x); 
#line 3445 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"
__declspec(dllimport) extern __int64 __cdecl llrintf(float x); 
#line 3498 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"
__declspec(dllimport) extern double __cdecl nearbyint(double x); 
#line 3551 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"
__declspec(dllimport) extern float __cdecl nearbyintf(float x); 
#line 3611 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"
__declspec(dllimport) extern double __cdecl ceil(double x); 
#line 3663 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"
__declspec(dllimport) extern double __cdecl trunc(double x); 
#line 3716 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"
__declspec(dllimport) extern float __cdecl truncf(float x); 
#line 3742 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"
__declspec(dllimport) extern double __cdecl fdim(double x, double y); 
#line 3768 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"
__declspec(dllimport) extern float __cdecl fdimf(float x, float y); 
#line 4066 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"
extern double __cdecl atan2(double y, double x); 
#line 4137
extern double __cdecl atan(double x); 
#line 4160
extern double __cdecl acos(double x); 
#line 4211
extern double __cdecl asin(double x); 
#line 4276 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"
__declspec(dllimport) extern double __cdecl hypot(double x, double y); 
#line 4400 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"
static __inline float __cdecl hypotf(float x, float y); 
#line 5190 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"
__declspec(dllimport) extern double __cdecl cbrt(double x); 
#line 5276 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"
__declspec(dllimport) extern float __cdecl cbrtf(float x); 
#line 5329 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"
extern double rcbrt(double x); 
#line 5379
extern float rcbrtf(float x); 
#line 5439
extern double sinpi(double x); 
#line 5499
extern float sinpif(float x); 
#line 5551
extern double cospi(double x); 
#line 5603
extern float cospif(float x); 
#line 5633
extern void sincospi(double x, double * sptr, double * cptr); 
#line 5663
extern void sincospif(float x, float * sptr, float * cptr); 
#line 5996 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"
extern double __cdecl pow(double x, double y); 
#line 6052
__declspec(dllimport) extern double __cdecl modf(double x, double * iptr); 
#line 6111
extern double __cdecl fmod(double x, double y); 
#line 6209 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"
__declspec(dllimport) extern double __cdecl remainder(double x, double y); 
#line 6308 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"
__declspec(dllimport) extern float __cdecl remainderf(float x, float y); 
#line 6380 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"
__declspec(dllimport) extern double __cdecl remquo(double x, double y, int * quo); 
#line 6452 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"
__declspec(dllimport) extern float __cdecl remquof(float x, float y, int * quo); 
#line 6491 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"
__declspec(dllimport) extern double __cdecl j0(double x); 
#line 6533 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"
extern float j0f(float x); 
#line 6602 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"
__declspec(dllimport) extern double __cdecl j1(double x); 
#line 6671 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"
extern float j1f(float x); 
#line 6714 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"
__declspec(dllimport) extern double __cdecl jn(int n, double x); 
#line 6757 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"
extern float jnf(int n, float x); 
#line 6818 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"
__declspec(dllimport) extern double __cdecl y0(double x); 
#line 6879 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"
extern float y0f(float x); 
#line 6940 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"
__declspec(dllimport) extern double __cdecl y1(double x); 
#line 7001 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"
extern float y1f(float x); 
#line 7064 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"
__declspec(dllimport) extern double __cdecl yn(int n, double x); 
#line 7127 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"
extern float ynf(int n, float x); 
#line 7318 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"
__declspec(dllimport) extern double __cdecl erf(double x); 
#line 7400 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"
__declspec(dllimport) extern float __cdecl erff(float x); 
#line 7470 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"
extern double erfinv(double x); 
#line 7535
extern float erfinvf(float x); 
#line 7576 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"
__declspec(dllimport) extern double __cdecl erfc(double x); 
#line 7614 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"
__declspec(dllimport) extern float __cdecl erfcf(float x); 
#line 7731 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"
__declspec(dllimport) extern double __cdecl lgamma(double x); 
#line 7791 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"
extern double erfcinv(double x); 
#line 7846
extern float erfcinvf(float x); 
#line 7914
extern double normcdfinv(double x); 
#line 7982
extern float normcdfinvf(float x); 
#line 8025
extern double normcdf(double x); 
#line 8068
extern float normcdff(float x); 
#line 8132
extern double erfcx(double x); 
#line 8196
extern float erfcxf(float x); 
#line 8317 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"
__declspec(dllimport) extern float __cdecl lgammaf(float x); 
#line 8415 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"
__declspec(dllimport) extern double __cdecl tgamma(double x); 
#line 8513 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"
__declspec(dllimport) extern float __cdecl tgammaf(float x); 
#line 8526 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"
__declspec(dllimport) extern double __cdecl copysign(double x, double y); 
#line 8539 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"
__declspec(dllimport) extern float __cdecl copysignf(float x, float y); 
#line 8558 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"
__declspec(dllimport) extern double __cdecl nextafter(double x, double y); 
#line 8577 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"
__declspec(dllimport) extern float __cdecl nextafterf(float x, float y); 
#line 8593 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"
__declspec(dllimport) extern double __cdecl nan(const char * tagp); 
#line 8609 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"
__declspec(dllimport) extern float __cdecl nanf(const char * tagp); 
#line 8614 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"
extern int __isinff(float); 
#line 8615
extern int __isnanf(float); 
#line 8625 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"
extern int __finite(double); 
#line 8626
extern int __finitef(float); 
#line 8627
extern int __signbit(double); 
#line 8628
extern int __isnan(double); 
#line 8629
extern int __isinf(double); 
#line 8632 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"
extern int __signbitf(float); 
#line 8793 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"
__declspec(dllimport) extern double __cdecl fma(double x, double y, double z); 
#line 8951 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"
__declspec(dllimport) extern float __cdecl fmaf(float x, float y, float z); 
#line 8960 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"
extern int __signbitl(long double); 
#line 8966 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"
extern int __finitel(long double); 
#line 8967
extern int __isinfl(long double); 
#line 8968
extern int __isnanl(long double); 
#line 8972 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"
__declspec(dllimport) extern float __cdecl acosf(float); 
#line 8973
__declspec(dllimport) extern float __cdecl asinf(float); 
#line 8974
__declspec(dllimport) extern float __cdecl atanf(float); 
#line 8975
__declspec(dllimport) extern float __cdecl atan2f(float, float); 
#line 8976
__declspec(dllimport) extern float __cdecl cosf(float); 
#line 8977
__declspec(dllimport) extern float __cdecl sinf(float); 
#line 8978
__declspec(dllimport) extern float __cdecl tanf(float); 
#line 8979
__declspec(dllimport) extern float __cdecl coshf(float); 
#line 8980
__declspec(dllimport) extern float __cdecl sinhf(float); 
#line 8981
__declspec(dllimport) extern float __cdecl tanhf(float); 
#line 8982
__declspec(dllimport) extern float __cdecl expf(float); 
#line 8983
__declspec(dllimport) extern float __cdecl logf(float); 
#line 8984
__declspec(dllimport) extern float __cdecl log10f(float); 
#line 8985
__declspec(dllimport) extern float __cdecl modff(float, float *); 
#line 8986
__declspec(dllimport) extern float __cdecl powf(float, float); 
#line 8987
__declspec(dllimport) extern float __cdecl sqrtf(float); 
#line 8988
__declspec(dllimport) extern float __cdecl ceilf(float); 
#line 8989
__declspec(dllimport) extern float __cdecl floorf(float); 
#line 8990
__declspec(dllimport) extern float __cdecl fmodf(float, float); 
#line 10544 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"
}
#line 14 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_math.h"
#pragma warning(push)
#pragma warning(disable: 4324 4514 4574 4710 4793 4820 4995 4996 28719 28726 28727 )
#line 18
__pragma( pack ( push, 8 )) extern "C" {
#line 23
struct _exception { 
#line 25
int type; 
#line 26
char *name; 
#line 27
double arg1; 
#line 28
double arg2; 
#line 29
double retval; 
#line 30
}; 
#line 37
struct _complex { 
#line 39
double x, y; 
#line 40
}; 
#line 59 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_math.h"
typedef float float_t; 
#line 60
typedef double double_t; 
#line 78 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_math.h"
extern const double _HUGE; 
#line 175 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_math.h"
void __cdecl _fperrraise(int _Except); 
#line 177
__declspec(dllimport) short __cdecl _dclass(double _X); 
#line 178
__declspec(dllimport) short __cdecl _ldclass(long double _X); 
#line 179
__declspec(dllimport) short __cdecl _fdclass(float _X); 
#line 181
__declspec(dllimport) int __cdecl _dsign(double _X); 
#line 182
__declspec(dllimport) int __cdecl _ldsign(long double _X); 
#line 183
__declspec(dllimport) int __cdecl _fdsign(float _X); 
#line 185
__declspec(dllimport) int __cdecl _dpcomp(double _X, double _Y); 
#line 186
__declspec(dllimport) int __cdecl _ldpcomp(long double _X, long double _Y); 
#line 187
__declspec(dllimport) int __cdecl _fdpcomp(float _X, float _Y); 
#line 189
__declspec(dllimport) short __cdecl _dtest(double * _Px); 
#line 190
__declspec(dllimport) short __cdecl _ldtest(long double * _Px); 
#line 191
__declspec(dllimport) short __cdecl _fdtest(float * _Px); 
#line 193
__declspec(dllimport) short __cdecl _d_int(double * _Px, short _Xexp); 
#line 194
__declspec(dllimport) short __cdecl _ld_int(long double * _Px, short _Xexp); 
#line 195
__declspec(dllimport) short __cdecl _fd_int(float * _Px, short _Xexp); 
#line 197
__declspec(dllimport) short __cdecl _dscale(double * _Px, long _Lexp); 
#line 198
__declspec(dllimport) short __cdecl _ldscale(long double * _Px, long _Lexp); 
#line 199
__declspec(dllimport) short __cdecl _fdscale(float * _Px, long _Lexp); 
#line 201
__declspec(dllimport) short __cdecl _dunscale(short * _Pex, double * _Px); 
#line 202
__declspec(dllimport) short __cdecl _ldunscale(short * _Pex, long double * _Px); 
#line 203
__declspec(dllimport) short __cdecl _fdunscale(short * _Pex, float * _Px); 
#line 205
__declspec(dllimport) short __cdecl _dexp(double * _Px, double _Y, long _Eoff); 
#line 206
__declspec(dllimport) short __cdecl _ldexp(long double * _Px, long double _Y, long _Eoff); 
#line 207
__declspec(dllimport) short __cdecl _fdexp(float * _Px, float _Y, long _Eoff); 
#line 209
__declspec(dllimport) short __cdecl _dnorm(unsigned short * _Ps); 
#line 210
__declspec(dllimport) short __cdecl _fdnorm(unsigned short * _Ps); 
#line 212
__declspec(dllimport) double __cdecl _dpoly(double _X, const double * _Tab, int _N); 
#line 213
__declspec(dllimport) long double __cdecl _ldpoly(long double _X, const long double * _Tab, int _N); 
#line 214
__declspec(dllimport) float __cdecl _fdpoly(float _X, const float * _Tab, int _N); 
#line 216
__declspec(dllimport) double __cdecl _dlog(double _X, int _Baseflag); 
#line 217
__declspec(dllimport) long double __cdecl _ldlog(long double _X, int _Baseflag); 
#line 218
__declspec(dllimport) float __cdecl _fdlog(float _X, int _Baseflag); 
#line 220
__declspec(dllimport) double __cdecl _dsin(double _X, unsigned _Qoff); 
#line 221
__declspec(dllimport) long double __cdecl _ldsin(long double _X, unsigned _Qoff); 
#line 222
__declspec(dllimport) float __cdecl _fdsin(float _X, unsigned _Qoff); 
#line 229
typedef 
#line 226
union { 
#line 227
unsigned short _Sh[4]; 
#line 228
double _Val; 
#line 229
} _double_val; 
#line 236
typedef 
#line 233
union { 
#line 234
unsigned short _Sh[2]; 
#line 235
float _Val; 
#line 236
} _float_val; 
#line 243
typedef 
#line 240
union { 
#line 241
unsigned short _Sh[4]; 
#line 242
long double _Val; 
#line 243
} _ldouble_val; 
#line 251
typedef 
#line 246
union { 
#line 247
unsigned short _Word[4]; 
#line 248
float _Float; 
#line 249
double _Double; 
#line 250
long double _Long_double; 
#line 251
} _float_const; 
#line 253
extern const _float_const _Denorm_C, _Inf_C, _Nan_C, _Snan_C, _Hugeval_C; 
#line 254
extern const _float_const _FDenorm_C, _FInf_C, _FNan_C, _FSnan_C; 
#line 255
extern const _float_const _LDenorm_C, _LInf_C, _LNan_C, _LSnan_C; 
#line 257
extern const _float_const _Eps_C, _Rteps_C; 
#line 258
extern const _float_const _FEps_C, _FRteps_C; 
#line 259
extern const _float_const _LEps_C, _LRteps_C; 
#line 261
extern const double _Zero_C, _Xbig_C; 
#line 262
extern const float _FZero_C, _FXbig_C; 
#line 263
extern const long double _LZero_C, _LXbig_C; 
#line 292
extern "C++" {
#line 294
inline int fpclassify(float _X) throw() 
#line 295
{ 
#line 296
return _fdtest(&_X); 
#line 297
} 
#line 299
inline int fpclassify(double _X) throw() 
#line 300
{ 
#line 301
return _dtest(&_X); 
#line 302
} 
#line 304
inline int fpclassify(long double _X) throw() 
#line 305
{ 
#line 306
return _ldtest(&_X); 
#line 307
} 
#line 309
inline bool signbit(float _X) throw() 
#line 310
{ 
#line 311
return _fdsign(_X) != 0; 
#line 312
} 
#line 314
inline bool signbit(double _X) throw() 
#line 315
{ 
#line 316
return _dsign(_X) != 0; 
#line 317
} 
#line 319
inline bool signbit(long double _X) throw() 
#line 320
{ 
#line 321
return _ldsign(_X) != 0; 
#line 322
} 
#line 324
inline int _fpcomp(float _X, float _Y) throw() 
#line 325
{ 
#line 326
return _fdpcomp(_X, _Y); 
#line 327
} 
#line 329
inline int _fpcomp(double _X, double _Y) throw() 
#line 330
{ 
#line 331
return _dpcomp(_X, _Y); 
#line 332
} 
#line 334
inline int _fpcomp(long double _X, long double _Y) throw() 
#line 335
{ 
#line 336
return _ldpcomp(_X, _Y); 
#line 337
} 
#line 339
template< class _Trc, class _Tre> struct _Combined_type { 
#line 341
typedef float _Type; 
#line 342
}; 
#line 344
template<> struct _Combined_type< float, double>  { 
#line 346
typedef double _Type; 
#line 347
}; 
#line 349
template<> struct _Combined_type< float, long double>  { 
#line 351
typedef long double _Type; 
#line 352
}; 
#line 354
template< class _Ty, class _T2> struct _Real_widened { 
#line 356
typedef long double _Type; 
#line 357
}; 
#line 359
template<> struct _Real_widened< float, float>  { 
#line 361
typedef float _Type; 
#line 362
}; 
#line 364
template<> struct _Real_widened< float, double>  { 
#line 366
typedef double _Type; 
#line 367
}; 
#line 369
template<> struct _Real_widened< double, float>  { 
#line 371
typedef double _Type; 
#line 372
}; 
#line 374
template<> struct _Real_widened< double, double>  { 
#line 376
typedef double _Type; 
#line 377
}; 
#line 379
template< class _Ty> struct _Real_type { 
#line 381
typedef double _Type; 
#line 382
}; 
#line 384
template<> struct _Real_type< float>  { 
#line 386
typedef float _Type; 
#line 387
}; 
#line 389
template<> struct _Real_type< long double>  { 
#line 391
typedef long double _Type; 
#line 392
}; 
#line 394
template < class _T1, class _T2 >
      inline int _fpcomp ( _T1 _X, _T2 _Y ) throw ( )
    {
        typedef typename _Combined_type < float,
            typename _Real_widened <
            typename _Real_type < _T1 > :: _Type,
            typename _Real_type < _T2 > :: _Type > :: _Type > :: _Type _Tw;
        return _fpcomp ( ( _Tw ) _X, ( _Tw ) _Y );
    }
#line 404
template < class _Ty >
      inline bool isfinite ( _Ty _X ) throw ( )
    {
        return fpclassify ( _X ) <= 0;
    }
#line 410
template < class _Ty >
      inline bool isinf ( _Ty _X ) throw ( )
    {
        return fpclassify ( _X ) == 1;
    }
#line 416
template < class _Ty >
      inline bool isnan ( _Ty _X ) throw ( )
    {
        return fpclassify ( _X ) == 2;
    }
#line 422
template < class _Ty >
      inline bool isnormal ( _Ty _X ) throw ( )
    {
        return fpclassify ( _X ) == ( - 1 );
    }
#line 428
template < class _Ty1, class _Ty2 >
      inline bool isgreater ( _Ty1 _X, _Ty2 _Y ) throw ( )
    {
        return ( _fpcomp ( _X, _Y ) & 4 ) != 0;
    }
#line 434
template < class _Ty1, class _Ty2 >
      inline bool isgreaterequal ( _Ty1 _X, _Ty2 _Y ) throw ( )
    {
        return ( _fpcomp ( _X, _Y ) & ( 2 | 4 ) ) != 0;
    }
#line 440
template < class _Ty1, class _Ty2 >
      inline bool isless ( _Ty1 _X, _Ty2 _Y ) throw ( )
    {
        return ( _fpcomp ( _X, _Y ) & 1 ) != 0;
    }
#line 446
template < class _Ty1, class _Ty2 >
      inline bool islessequal ( _Ty1 _X, _Ty2 _Y ) throw ( )
    {
        return ( _fpcomp ( _X, _Y ) & ( 1 | 2 ) ) != 0;
    }
#line 452
template < class _Ty1, class _Ty2 >
      inline bool islessgreater ( _Ty1 _X, _Ty2 _Y ) throw ( )
    {
        return ( _fpcomp ( _X, _Y ) & ( 1 | 4 ) ) != 0;
    }
#line 458
template < class _Ty1, class _Ty2 >
      inline bool isunordered ( _Ty1 _X, _Ty2 _Y ) throw ( )
    {
        return _fpcomp ( _X, _Y ) == 0;
    }
#line 463
}
#line 470 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_math.h"
int __cdecl abs(int _X); 
#line 471
long __cdecl labs(long _X); 
#line 472
__int64 __cdecl llabs(__int64 _X); 
#line 474
double __cdecl acos(double _X); 
#line 475
double __cdecl asin(double _X); 
#line 476
double __cdecl atan(double _X); 
#line 477
double __cdecl atan2(double _Y, double _X); 
#line 479
double __cdecl cos(double _X); 
#line 480
double __cdecl cosh(double _X); 
#line 481
double __cdecl exp(double _X); 
#line 482
double __cdecl fabs(double _X); 
#line 483
double __cdecl fmod(double _X, double _Y); 
#line 484
double __cdecl log(double _X); 
#line 485
double __cdecl log10(double _X); 
#line 486
double __cdecl pow(double _X, double _Y); 
#line 487
double __cdecl sin(double _X); 
#line 488
double __cdecl sinh(double _X); 
#line 489
double __cdecl sqrt(double _X); 
#line 490
double __cdecl tan(double _X); 
#line 491
double __cdecl tanh(double _X); 
#line 493
__declspec(dllimport) double __cdecl acosh(double _X); 
#line 494
__declspec(dllimport) double __cdecl asinh(double _X); 
#line 495
__declspec(dllimport) double __cdecl atanh(double _X); 
#line 496
__declspec(dllimport) double __cdecl atof(const char * _String); 
#line 497
__declspec(dllimport) double __cdecl _atof_l(const char * _String, _locale_t _Locale); 
#line 498
__declspec(dllimport) double __cdecl _cabs(_complex _Complex_value); 
#line 499
__declspec(dllimport) double __cdecl cbrt(double _X); 
#line 500
__declspec(dllimport) double __cdecl ceil(double _X); 
#line 501
__declspec(dllimport) double __cdecl _chgsign(double _X); 
#line 502
__declspec(dllimport) double __cdecl copysign(double _Number, double _Sign); 
#line 503
__declspec(dllimport) double __cdecl _copysign(double _Number, double _Sign); 
#line 504
__declspec(dllimport) double __cdecl erf(double _X); 
#line 505
__declspec(dllimport) double __cdecl erfc(double _X); 
#line 506
__declspec(dllimport) double __cdecl exp2(double _X); 
#line 507
__declspec(dllimport) double __cdecl expm1(double _X); 
#line 508
__declspec(dllimport) double __cdecl fdim(double _X, double _Y); 
#line 509
__declspec(dllimport) double __cdecl floor(double _X); 
#line 510
__declspec(dllimport) double __cdecl fma(double _X, double _Y, double _Z); 
#line 511
__declspec(dllimport) double __cdecl fmax(double _X, double _Y); 
#line 512
__declspec(dllimport) double __cdecl fmin(double _X, double _Y); 
#line 513
__declspec(dllimport) double __cdecl frexp(double _X, int * _Y); 
#line 514
__declspec(dllimport) double __cdecl hypot(double _X, double _Y); 
#line 515
__declspec(dllimport) double __cdecl _hypot(double _X, double _Y); 
#line 516
__declspec(dllimport) int __cdecl ilogb(double _X); 
#line 517
__declspec(dllimport) double __cdecl ldexp(double _X, int _Y); 
#line 518
__declspec(dllimport) double __cdecl lgamma(double _X); 
#line 519
__declspec(dllimport) __int64 __cdecl llrint(double _X); 
#line 520
__declspec(dllimport) __int64 __cdecl llround(double _X); 
#line 521
__declspec(dllimport) double __cdecl log1p(double _X); 
#line 522
__declspec(dllimport) double __cdecl log2(double _X); 
#line 523
__declspec(dllimport) double __cdecl logb(double _X); 
#line 524
__declspec(dllimport) long __cdecl lrint(double _X); 
#line 525
__declspec(dllimport) long __cdecl lround(double _X); 
#line 527
int __cdecl _matherr(_exception * _Except); 
#line 529
__declspec(dllimport) double __cdecl modf(double _X, double * _Y); 
#line 530
__declspec(dllimport) double __cdecl nan(const char * _X); 
#line 531
__declspec(dllimport) double __cdecl nearbyint(double _X); 
#line 532
__declspec(dllimport) double __cdecl nextafter(double _X, double _Y); 
#line 533
__declspec(dllimport) double __cdecl nexttoward(double _X, long double _Y); 
#line 534
__declspec(dllimport) double __cdecl remainder(double _X, double _Y); 
#line 535
__declspec(dllimport) double __cdecl remquo(double _X, double _Y, int * _Z); 
#line 536
__declspec(dllimport) double __cdecl rint(double _X); 
#line 537
__declspec(dllimport) double __cdecl round(double _X); 
#line 538
__declspec(dllimport) double __cdecl scalbln(double _X, long _Y); 
#line 539
__declspec(dllimport) double __cdecl scalbn(double _X, int _Y); 
#line 540
__declspec(dllimport) double __cdecl tgamma(double _X); 
#line 541
__declspec(dllimport) double __cdecl trunc(double _X); 
#line 542
__declspec(dllimport) double __cdecl _j0(double _X); 
#line 543
__declspec(dllimport) double __cdecl _j1(double _X); 
#line 544
__declspec(dllimport) double __cdecl _jn(int _X, double _Y); 
#line 545
__declspec(dllimport) double __cdecl _y0(double _X); 
#line 546
__declspec(dllimport) double __cdecl _y1(double _X); 
#line 547
__declspec(dllimport) double __cdecl _yn(int _X, double _Y); 
#line 549
__declspec(dllimport) float __cdecl acoshf(float _X); 
#line 550
__declspec(dllimport) float __cdecl asinhf(float _X); 
#line 551
__declspec(dllimport) float __cdecl atanhf(float _X); 
#line 552
__declspec(dllimport) float __cdecl cbrtf(float _X); 
#line 553
__declspec(dllimport) float __cdecl _chgsignf(float _X); 
#line 554
__declspec(dllimport) float __cdecl copysignf(float _Number, float _Sign); 
#line 555
__declspec(dllimport) float __cdecl _copysignf(float _Number, float _Sign); 
#line 556
__declspec(dllimport) float __cdecl erff(float _X); 
#line 557
__declspec(dllimport) float __cdecl erfcf(float _X); 
#line 558
__declspec(dllimport) float __cdecl expm1f(float _X); 
#line 559
__declspec(dllimport) float __cdecl exp2f(float _X); 
#line 560
__declspec(dllimport) float __cdecl fdimf(float _X, float _Y); 
#line 561
__declspec(dllimport) float __cdecl fmaf(float _X, float _Y, float _Z); 
#line 562
__declspec(dllimport) float __cdecl fmaxf(float _X, float _Y); 
#line 563
__declspec(dllimport) float __cdecl fminf(float _X, float _Y); 
#line 564
__declspec(dllimport) float __cdecl _hypotf(float _X, float _Y); 
#line 565
__declspec(dllimport) int __cdecl ilogbf(float _X); 
#line 566
__declspec(dllimport) float __cdecl lgammaf(float _X); 
#line 567
__declspec(dllimport) __int64 __cdecl llrintf(float _X); 
#line 568
__declspec(dllimport) __int64 __cdecl llroundf(float _X); 
#line 569
__declspec(dllimport) float __cdecl log1pf(float _X); 
#line 570
__declspec(dllimport) float __cdecl log2f(float _X); 
#line 571
__declspec(dllimport) float __cdecl logbf(float _X); 
#line 572
__declspec(dllimport) long __cdecl lrintf(float _X); 
#line 573
__declspec(dllimport) long __cdecl lroundf(float _X); 
#line 574
__declspec(dllimport) float __cdecl nanf(const char * _X); 
#line 575
__declspec(dllimport) float __cdecl nearbyintf(float _X); 
#line 576
__declspec(dllimport) float __cdecl nextafterf(float _X, float _Y); 
#line 577
__declspec(dllimport) float __cdecl nexttowardf(float _X, long double _Y); 
#line 578
__declspec(dllimport) float __cdecl remainderf(float _X, float _Y); 
#line 579
__declspec(dllimport) float __cdecl remquof(float _X, float _Y, int * _Z); 
#line 580
__declspec(dllimport) float __cdecl rintf(float _X); 
#line 581
__declspec(dllimport) float __cdecl roundf(float _X); 
#line 582
__declspec(dllimport) float __cdecl scalblnf(float _X, long _Y); 
#line 583
__declspec(dllimport) float __cdecl scalbnf(float _X, int _Y); 
#line 584
__declspec(dllimport) float __cdecl tgammaf(float _X); 
#line 585
__declspec(dllimport) float __cdecl truncf(float _X); 
#line 595 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_math.h"
__declspec(dllimport) float __cdecl _logbf(float _X); 
#line 596
__declspec(dllimport) float __cdecl _nextafterf(float _X, float _Y); 
#line 597
__declspec(dllimport) int __cdecl _finitef(float _X); 
#line 598
__declspec(dllimport) int __cdecl _isnanf(float _X); 
#line 599
__declspec(dllimport) int __cdecl _fpclassf(float _X); 
#line 601
__declspec(dllimport) int __cdecl _set_FMA3_enable(int _Flag); 
#line 602
__declspec(dllimport) int __cdecl _get_FMA3_enable(); 
#line 615 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_math.h"
__declspec(dllimport) float __cdecl acosf(float _X); 
#line 616
__declspec(dllimport) float __cdecl asinf(float _X); 
#line 617
__declspec(dllimport) float __cdecl atan2f(float _Y, float _X); 
#line 618
__declspec(dllimport) float __cdecl atanf(float _X); 
#line 619
__declspec(dllimport) float __cdecl ceilf(float _X); 
#line 620
__declspec(dllimport) float __cdecl cosf(float _X); 
#line 621
__declspec(dllimport) float __cdecl coshf(float _X); 
#line 622
__declspec(dllimport) float __cdecl expf(float _X); 
#line 674 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_math.h"
__inline float __cdecl fabsf(float _X) 
#line 675
{ 
#line 676
return (float)fabs(_X); 
#line 677
} 
#line 683 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_math.h"
__declspec(dllimport) float __cdecl floorf(float _X); 
#line 684
__declspec(dllimport) float __cdecl fmodf(float _X, float _Y); 
#line 700 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_math.h"
__inline float __cdecl frexpf(float _X, int *_Y) 
#line 701
{ 
#line 702
return (float)frexp(_X, _Y); 
#line 703
} 
#line 705
__inline float __cdecl hypotf(float _X, float _Y) 
#line 706
{ 
#line 707
return _hypotf(_X, _Y); 
#line 708
} 
#line 710
__inline float __cdecl ldexpf(float _X, int _Y) 
#line 711
{ 
#line 712
return (float)ldexp(_X, _Y); 
#line 713
} 
#line 717
__declspec(dllimport) float __cdecl log10f(float _X); 
#line 718
__declspec(dllimport) float __cdecl logf(float _X); 
#line 719
__declspec(dllimport) float __cdecl modff(float _X, float * _Y); 
#line 720
__declspec(dllimport) float __cdecl powf(float _X, float _Y); 
#line 721
__declspec(dllimport) float __cdecl sinf(float _X); 
#line 722
__declspec(dllimport) float __cdecl sinhf(float _X); 
#line 723
__declspec(dllimport) float __cdecl sqrtf(float _X); 
#line 724
__declspec(dllimport) float __cdecl tanf(float _X); 
#line 725
__declspec(dllimport) float __cdecl tanhf(float _X); 
#line 779 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_math.h"
__declspec(dllimport) long double __cdecl acoshl(long double _X); 
#line 781
__inline long double __cdecl acosl(long double _X) 
#line 782
{ 
#line 783
return acos((double)_X); 
#line 784
} 
#line 786
__declspec(dllimport) long double __cdecl asinhl(long double _X); 
#line 788
__inline long double __cdecl asinl(long double _X) 
#line 789
{ 
#line 790
return asin((double)_X); 
#line 791
} 
#line 793
__inline long double __cdecl atan2l(long double _Y, long double _X) 
#line 794
{ 
#line 795
return atan2((double)_Y, (double)_X); 
#line 796
} 
#line 798
__declspec(dllimport) long double __cdecl atanhl(long double _X); 
#line 800
__inline long double __cdecl atanl(long double _X) 
#line 801
{ 
#line 802
return atan((double)_X); 
#line 803
} 
#line 805
__declspec(dllimport) long double __cdecl cbrtl(long double _X); 
#line 807
__inline long double __cdecl ceill(long double _X) 
#line 808
{ 
#line 809
return ceil((double)_X); 
#line 810
} 
#line 812
__inline long double __cdecl _chgsignl(long double _X) 
#line 813
{ 
#line 814
return _chgsign((double)_X); 
#line 815
} 
#line 817
__declspec(dllimport) long double __cdecl copysignl(long double _Number, long double _Sign); 
#line 819
__inline long double __cdecl _copysignl(long double _Number, long double _Sign) 
#line 820
{ 
#line 821
return _copysign((double)_Number, (double)_Sign); 
#line 822
} 
#line 824
__inline long double __cdecl coshl(long double _X) 
#line 825
{ 
#line 826
return cosh((double)_X); 
#line 827
} 
#line 829
__inline long double __cdecl cosl(long double _X) 
#line 830
{ 
#line 831
return cos((double)_X); 
#line 832
} 
#line 834
__declspec(dllimport) long double __cdecl erfl(long double _X); 
#line 835
__declspec(dllimport) long double __cdecl erfcl(long double _X); 
#line 837
__inline long double __cdecl expl(long double _X) 
#line 838
{ 
#line 839
return exp((double)_X); 
#line 840
} 
#line 842
__declspec(dllimport) long double __cdecl exp2l(long double _X); 
#line 843
__declspec(dllimport) long double __cdecl expm1l(long double _X); 
#line 845
__inline long double __cdecl fabsl(long double _X) 
#line 846
{ 
#line 847
return fabs((double)_X); 
#line 848
} 
#line 850
__declspec(dllimport) long double __cdecl fdiml(long double _X, long double _Y); 
#line 852
__inline long double __cdecl floorl(long double _X) 
#line 853
{ 
#line 854
return floor((double)_X); 
#line 855
} 
#line 857
__declspec(dllimport) long double __cdecl fmal(long double _X, long double _Y, long double _Z); 
#line 858
__declspec(dllimport) long double __cdecl fmaxl(long double _X, long double _Y); 
#line 859
__declspec(dllimport) long double __cdecl fminl(long double _X, long double _Y); 
#line 861
__inline long double __cdecl fmodl(long double _X, long double _Y) 
#line 862
{ 
#line 863
return fmod((double)_X, (double)_Y); 
#line 864
} 
#line 866
__inline long double __cdecl frexpl(long double _X, int *_Y) 
#line 867
{ 
#line 868
return frexp((double)_X, _Y); 
#line 869
} 
#line 871
__declspec(dllimport) int __cdecl ilogbl(long double _X); 
#line 873
__inline long double __cdecl _hypotl(long double _X, long double _Y) 
#line 874
{ 
#line 875
return _hypot((double)_X, (double)_Y); 
#line 876
} 
#line 878
__inline long double __cdecl hypotl(long double _X, long double _Y) 
#line 879
{ 
#line 880
return _hypot((double)_X, (double)_Y); 
#line 881
} 
#line 883
__inline long double __cdecl ldexpl(long double _X, int _Y) 
#line 884
{ 
#line 885
return ldexp((double)_X, _Y); 
#line 886
} 
#line 888
__declspec(dllimport) long double __cdecl lgammal(long double _X); 
#line 889
__declspec(dllimport) __int64 __cdecl llrintl(long double _X); 
#line 890
__declspec(dllimport) __int64 __cdecl llroundl(long double _X); 
#line 892
__inline long double __cdecl logl(long double _X) 
#line 893
{ 
#line 894
return log((double)_X); 
#line 895
} 
#line 897
__inline long double __cdecl log10l(long double _X) 
#line 898
{ 
#line 899
return log10((double)_X); 
#line 900
} 
#line 902
__declspec(dllimport) long double __cdecl log1pl(long double _X); 
#line 903
__declspec(dllimport) long double __cdecl log2l(long double _X); 
#line 904
__declspec(dllimport) long double __cdecl logbl(long double _X); 
#line 905
__declspec(dllimport) long __cdecl lrintl(long double _X); 
#line 906
__declspec(dllimport) long __cdecl lroundl(long double _X); 
#line 908
__inline long double __cdecl modfl(long double _X, long double *_Y) 
#line 909
{ 
#line 910
double _F, _I; 
#line 911
_F = modf((double)_X, &_I); 
#line 912
(*_Y) = _I; 
#line 913
return _F; 
#line 914
} 
#line 916
__declspec(dllimport) long double __cdecl nanl(const char * _X); 
#line 917
__declspec(dllimport) long double __cdecl nearbyintl(long double _X); 
#line 918
__declspec(dllimport) long double __cdecl nextafterl(long double _X, long double _Y); 
#line 919
__declspec(dllimport) long double __cdecl nexttowardl(long double _X, long double _Y); 
#line 921
__inline long double __cdecl powl(long double _X, long double _Y) 
#line 922
{ 
#line 923
return pow((double)_X, (double)_Y); 
#line 924
} 
#line 926
__declspec(dllimport) long double __cdecl remainderl(long double _X, long double _Y); 
#line 927
__declspec(dllimport) long double __cdecl remquol(long double _X, long double _Y, int * _Z); 
#line 928
__declspec(dllimport) long double __cdecl rintl(long double _X); 
#line 929
__declspec(dllimport) long double __cdecl roundl(long double _X); 
#line 930
__declspec(dllimport) long double __cdecl scalblnl(long double _X, long _Y); 
#line 931
__declspec(dllimport) long double __cdecl scalbnl(long double _X, int _Y); 
#line 933
__inline long double __cdecl sinhl(long double _X) 
#line 934
{ 
#line 935
return sinh((double)_X); 
#line 936
} 
#line 938
__inline long double __cdecl sinl(long double _X) 
#line 939
{ 
#line 940
return sin((double)_X); 
#line 941
} 
#line 943
__inline long double __cdecl sqrtl(long double _X) 
#line 944
{ 
#line 945
return sqrt((double)_X); 
#line 946
} 
#line 948
__inline long double __cdecl tanhl(long double _X) 
#line 949
{ 
#line 950
return tanh((double)_X); 
#line 951
} 
#line 953
__inline long double __cdecl tanl(long double _X) 
#line 954
{ 
#line 955
return tan((double)_X); 
#line 956
} 
#line 958
__declspec(dllimport) long double __cdecl tgammal(long double _X); 
#line 959
__declspec(dllimport) long double __cdecl truncl(long double _X); 
#line 980 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_math.h"
extern double HUGE; 
#line 985 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_math.h"
__declspec(dllimport) double __cdecl j0(double _X); 
#line 986
__declspec(dllimport) double __cdecl j1(double _X); 
#line 987
__declspec(dllimport) double __cdecl jn(int _X, double _Y); 
#line 988
__declspec(dllimport) double __cdecl y0(double _X); 
#line 989
__declspec(dllimport) double __cdecl y1(double _X); 
#line 990
__declspec(dllimport) double __cdecl yn(int _X, double _Y); 
#line 995 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_math.h"
}__pragma( pack ( pop )) 
#line 997
#pragma warning(pop)
#line 12 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\vcruntime_new.h"
#pragma warning(push)
#pragma warning(disable: 4514 4820 )
#pragma warning(disable: 4985)
#line 17
extern "C++" {
#line 19
#pragma pack ( push, 8 )
#line 33
namespace std { 
#line 35
struct nothrow_t { 
#line 36
explicit nothrow_t() = default;
#line 37
}; 
#line 42
extern const nothrow_t nothrow; 
#line 44 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\vcruntime_new.h"
}
#line 47 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\vcruntime_new.h"
[[nodiscard]] __declspec(allocator) void *__cdecl 
#line 48
operator new(size_t _Size); 
#line 52
[[nodiscard]] __declspec(allocator) void *__cdecl 
#line 53
operator new(size_t _Size, const std::nothrow_t &) noexcept; 
#line 58
[[nodiscard]] __declspec(allocator) void *__cdecl 
#line 59
operator new[](size_t _Size); 
#line 63
[[nodiscard]] __declspec(allocator) void *__cdecl 
#line 64
operator new[](size_t _Size, const std::nothrow_t &) noexcept; 
#line 69
void __cdecl operator delete(void * _Block) noexcept; 
#line 73
void __cdecl operator delete(void * _Block, const std::nothrow_t &) noexcept; 
#line 78
void __cdecl operator delete[](void * _Block) noexcept; 
#line 82
void __cdecl operator delete[](void * _Block, const std::nothrow_t &) noexcept; 
#line 87
void __cdecl operator delete(void * _Block, size_t _Size) noexcept; 
#line 92
void __cdecl operator delete[](void * _Block, size_t _Size) noexcept; 
#line 160
#pragma warning(push)
#pragma warning(disable: 4577)
#pragma warning(disable: 4514)
#line 165
[[nodiscard]] [[msvc::constexpr]] inline void *__cdecl 
#line 166
operator new(size_t _Size, void *
#line 167
_Where) noexcept 
#line 168
{ 
#line 169
(void)_Size; 
#line 170
return _Where; 
#line 171
} 
#line 173
inline void __cdecl operator delete(void *, void *) noexcept 
#line 174
{ 
#line 176
} 
#line 181 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\vcruntime_new.h"
[[nodiscard]] inline void *__cdecl 
#line 182
operator new[](size_t _Size, void *
#line 183
_Where) noexcept 
#line 184
{ 
#line 185
(void)_Size; 
#line 186
return _Where; 
#line 187
} 
#line 189
inline void __cdecl operator delete[](void *, void *) noexcept 
#line 190
{ 
#line 191
} 
#line 199 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\vcruntime_new.h"
}
#line 193
#pragma warning(pop)
#line 197
#pragma pack ( pop )
#line 202 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\vcruntime_new.h"
#pragma warning(pop)
#line 12 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\vcruntime_new_debug.h"
#pragma warning(push)
#pragma warning(disable: 4514 4820 )
#line 16
extern "C++" {
#line 18
#pragma pack ( push, 8 )
#line 25
[[nodiscard]] 
#line 26
__declspec(allocator) void *__cdecl operator new(size_t _Size, int _BlockUse, const char * _FileName, int _LineNumber); 
#line 33
[[nodiscard]] 
#line 34
__declspec(allocator) void *__cdecl operator new[](size_t _Size, int _BlockUse, const char * _FileName, int _LineNumber); 
#line 41
void __cdecl operator delete(void * _Block, int _BlockUse, const char * _FileName, int _LineNumber) noexcept; 
#line 48
void __cdecl operator delete[](void * _Block, int _BlockUse, const char * _FileName, int _LineNumber) noexcept; 
#line 61 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\vcruntime_new_debug.h"
}
#line 59
#pragma pack ( pop )
#line 64 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\vcruntime_new_debug.h"
#pragma warning(pop)
#line 15 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\crtdbg.h"
#pragma warning(push)
#pragma warning(disable: 4324 4514 4574 4710 4793 4820 4995 4996 28719 28726 28727 )
#line 19
__pragma( pack ( push, 8 )) extern "C" {
#line 23
typedef void *_HFILE; 
#line 49
typedef int (__cdecl *_CRT_REPORT_HOOK)(int, char *, int *); 
#line 50
typedef int (__cdecl *_CRT_REPORT_HOOKW)(int, __wchar_t *, int *); 
#line 56
typedef int (__cdecl *_CRT_ALLOC_HOOK)(int, void *, size_t, int, long, const unsigned char *, int); 
#line 112
typedef void (__cdecl *_CRT_DUMP_CLIENT)(void *, size_t); 
#line 118
struct _CrtMemBlockHeader; 
#line 127
typedef 
#line 120
struct _CrtMemState { 
#line 122
_CrtMemBlockHeader *pBlockHeader; 
#line 123
size_t lCounts[5]; 
#line 124
size_t lSizes[5]; 
#line 125
size_t lHighWaterCount; 
#line 126
size_t lTotalCount; 
#line 127
} _CrtMemState; 
#line 156
__declspec(dllimport) int *__cdecl __p__crtDbgFlag(); 
#line 157
__declspec(dllimport) long *__cdecl __p__crtBreakAlloc(); 
#line 162
__declspec(dllimport) _CRT_ALLOC_HOOK __cdecl _CrtGetAllocHook(); 
#line 164
__declspec(dllimport) _CRT_ALLOC_HOOK __cdecl _CrtSetAllocHook(_CRT_ALLOC_HOOK _PfnNewHook); 
#line 168
__declspec(dllimport) _CRT_DUMP_CLIENT __cdecl _CrtGetDumpClient(); 
#line 170
__declspec(dllimport) _CRT_DUMP_CLIENT __cdecl _CrtSetDumpClient(_CRT_DUMP_CLIENT _PFnNewDump); 
#line 176 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\crtdbg.h"
__declspec(dllimport) int __cdecl _CrtCheckMemory(); 
#line 178
typedef void (__cdecl *_CrtDoForAllClientObjectsCallback)(void *, void *); 
#line 180
__declspec(dllimport) void __cdecl _CrtDoForAllClientObjects(_CrtDoForAllClientObjectsCallback _Callback, void * _Context); 
#line 185
__declspec(dllimport) int __cdecl _CrtDumpMemoryLeaks(); 
#line 187
__declspec(dllimport) int __cdecl _CrtIsMemoryBlock(const void * _Block, unsigned _Size, long * _RequestNumber, char ** _FileName, int * _LineNumber); 
#line 196
__declspec(dllimport) int __cdecl _CrtIsValidHeapPointer(const void * _Pointer); 
#line 201
__declspec(dllimport) int __cdecl _CrtIsValidPointer(const void * _Pointer, unsigned _Size, int _ReadWrite); 
#line 207
__declspec(dllimport) void __cdecl _CrtMemCheckpoint(_CrtMemState * _State); 
#line 211
__declspec(dllimport) int __cdecl _CrtMemDifference(_CrtMemState * _State, const _CrtMemState * _OldState, const _CrtMemState * _NewState); 
#line 217
__declspec(dllimport) void __cdecl _CrtMemDumpAllObjectsSince(const _CrtMemState * _State); 
#line 221
__declspec(dllimport) void __cdecl _CrtMemDumpStatistics(const _CrtMemState * _State); 
#line 226
__declspec(dllimport) int __cdecl _CrtReportBlockType(const void * _Block); 
#line 230
__declspec(dllimport) long __cdecl _CrtSetBreakAlloc(long _NewValue); 
#line 234
__declspec(dllimport) int __cdecl _CrtSetDbgFlag(int _NewFlag); 
#line 332 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\crtdbg.h"
__declspec(dllimport) void __cdecl _aligned_free_dbg(void * _Block); 
#line 337
__declspec(dllimport) __declspec(allocator) void *__cdecl _aligned_malloc_dbg(size_t _Size, size_t _Alignment, const char * _FileName, int _LineNumber); 
#line 344
__declspec(dllimport) size_t __cdecl _aligned_msize_dbg(void * _Block, size_t _Alignment, size_t _Offset); 
#line 351
__declspec(dllimport) __declspec(allocator) void *__cdecl _aligned_offset_malloc_dbg(size_t _Size, size_t _Alignment, size_t _Offset, const char * _FileName, int _LineNumber); 
#line 360
__declspec(dllimport) __declspec(allocator) void *__cdecl _aligned_offset_realloc_dbg(void * _Block, size_t _Size, size_t _Alignment, size_t _Offset, const char * _FileName, int _LineNumber); 
#line 370
__declspec(dllimport) __declspec(allocator) void *__cdecl _aligned_offset_recalloc_dbg(void * _Block, size_t _Count, size_t _Size, size_t _Alignment, size_t _Offset, const char * _FileName, int _LineNumber); 
#line 381
__declspec(dllimport) __declspec(allocator) void *__cdecl _aligned_realloc_dbg(void * _Block, size_t _Size, size_t _Alignment, const char * _FileName, int _LineNumber); 
#line 390
__declspec(dllimport) __declspec(allocator) void *__cdecl _aligned_recalloc_dbg(void * _Block, size_t _Count, size_t _Size, size_t _Alignment, const char * _FileName, int _LineNumber); 
#line 400
__declspec(dllimport) __declspec(allocator) void *__cdecl _calloc_dbg(size_t _Count, size_t _Size, int _BlockUse, const char * _FileName, int _LineNumber); 
#line 409
__declspec(dllimport) __declspec(allocator) void *__cdecl _expand_dbg(void * _Block, size_t _Size, int _BlockUse, const char * _FileName, int _LineNumber); 
#line 417
__declspec(dllimport) void __cdecl _free_dbg(void * _Block, int _BlockUse); 
#line 423
__declspec(dllimport) __declspec(allocator) void *__cdecl _malloc_dbg(size_t _Size, int _BlockUse, const char * _FileName, int _LineNumber); 
#line 430
__declspec(dllimport) size_t __cdecl _msize_dbg(void * _Block, int _BlockUse); 
#line 436
__declspec(dllimport) __declspec(allocator) void *__cdecl _realloc_dbg(void * _Block, size_t _Size, int _BlockUse, const char * _FileName, int _LineNumber); 
#line 445
__declspec(dllimport) __declspec(allocator) void *__cdecl _recalloc_dbg(void * _Block, size_t _Count, size_t _Size, int _BlockUse, const char * _FileName, int _LineNumber); 
#line 456
__declspec(dllimport) errno_t __cdecl _dupenv_s_dbg(char ** _PBuffer, size_t * _PBufferSizeInBytes, const char * _VarName, int _BlockType, const char * _FileName, int _LineNumber); 
#line 467
__declspec(dllimport) __declspec(allocator) char *__cdecl _fullpath_dbg(char * _FullPath, const char * _Path, size_t _SizeInBytes, int _BlockType, const char * _FileName, int _LineNumber); 
#line 478
__declspec(dllimport) __declspec(allocator) char *__cdecl _getcwd_dbg(char * _DstBuf, int _SizeInBytes, int _BlockType, const char * _FileName, int _LineNumber); 
#line 489
__declspec(dllimport) __declspec(allocator) char *__cdecl _getdcwd_dbg(int _Drive, char * _DstBuf, int _SizeInBytes, int _BlockType, const char * _FileName, int _LineNumber); 
#line 499
__declspec(dllimport) __declspec(allocator) char *__cdecl _strdup_dbg(const char * _String, int _BlockUse, const char * _FileName, int _LineNumber); 
#line 507
__declspec(dllimport) __declspec(allocator) char *__cdecl _tempnam_dbg(const char * _DirName, const char * _FilePrefix, int _BlockType, const char * _FileName, int _LineNumber); 
#line 517
__declspec(dllimport) __declspec(allocator) __wchar_t *__cdecl _wcsdup_dbg(const __wchar_t * _String, int _BlockUse, const char * _FileName, int _LineNumber); 
#line 526
__declspec(dllimport) errno_t __cdecl _wdupenv_s_dbg(__wchar_t ** _PBuffer, size_t * _PBufferSizeInWords, const __wchar_t * _VarName, int _BlockType, const char * _FileName, int _LineNumber); 
#line 537
__declspec(dllimport) __declspec(allocator) __wchar_t *__cdecl _wfullpath_dbg(__wchar_t * _FullPath, const __wchar_t * _Path, size_t _SizeInWords, int _BlockType, const char * _FileName, int _LineNumber); 
#line 548
__declspec(dllimport) __declspec(allocator) __wchar_t *__cdecl _wgetcwd_dbg(__wchar_t * _DstBuf, int _SizeInWords, int _BlockType, const char * _FileName, int _LineNumber); 
#line 558
__declspec(dllimport) __declspec(allocator) __wchar_t *__cdecl _wgetdcwd_dbg(int _Drive, __wchar_t * _DstBuf, int _SizeInWords, int _BlockType, const char * _FileName, int _LineNumber); 
#line 568
__declspec(dllimport) __declspec(allocator) __wchar_t *__cdecl _wtempnam_dbg(const __wchar_t * _DirName, const __wchar_t * _FilePrefix, int _BlockType, const char * _FileName, int _LineNumber); 
#line 611 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\crtdbg.h"
__declspec(dllimport) int __cdecl _CrtDbgReport(int _ReportType, const char * _FileName, int _Linenumber, const char * _ModuleName, const char * _Format, ...); 
#line 619
__declspec(dllimport) int __cdecl _CrtDbgReportW(int _ReportType, const __wchar_t * _FileName, int _LineNumber, const __wchar_t * _ModuleName, const __wchar_t * _Format, ...); 
#line 628
__declspec(dllimport) int __cdecl _VCrtDbgReportA(int _ReportType, void * _ReturnAddress, const char * _FileName, int _LineNumber, const char * _ModuleName, const char * _Format, va_list _ArgList); 
#line 638
__declspec(dllimport) int __cdecl _VCrtDbgReportW(int _ReportType, void * _ReturnAddress, const __wchar_t * _FileName, int _LineNumber, const __wchar_t * _ModuleName, const __wchar_t * _Format, va_list _ArgList); 
#line 648
__declspec(dllimport) size_t __cdecl _CrtSetDebugFillThreshold(size_t _NewDebugFillThreshold); 
#line 652
__declspec(dllimport) size_t __cdecl _CrtGetDebugFillThreshold(); 
#line 654
__declspec(dllimport) _HFILE __cdecl _CrtSetReportFile(int _ReportType, _HFILE _ReportFile); 
#line 659
__declspec(dllimport) int __cdecl _CrtSetReportMode(int _ReportType, int _ReportMode); 
#line 666
extern long _crtAssertBusy; 
#line 668
__declspec(dllimport) _CRT_REPORT_HOOK __cdecl _CrtGetReportHook(); 
#line 673
__declspec(dllimport) _CRT_REPORT_HOOK __cdecl _CrtSetReportHook(_CRT_REPORT_HOOK _PFnNewHook); 
#line 677
__declspec(dllimport) int __cdecl _CrtSetReportHook2(int _Mode, _CRT_REPORT_HOOK _PFnNewHook); 
#line 682
__declspec(dllimport) int __cdecl _CrtSetReportHookW2(int _Mode, _CRT_REPORT_HOOKW _PFnNewHook); 
#line 813 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\crtdbg.h"
}__pragma( pack ( pop )) 
#line 815
#pragma warning(pop)
#line 20 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\yvals.h"
#pragma pack ( push, 8 )
#pragma warning(push, 3)
#pragma warning(disable : 4180 4412 4455 4494 4514 4574 4582 4583 4587 4588 4619 4623 4625 4626 4643 4648 4702 4793 4820 4988 5026 5027 5045 6294 4984 5053 )
#line 138 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\yvals.h"
#pragma detect_mismatch("_MSC_VER", "1900")
#line 142 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\yvals.h"
#pragma detect_mismatch("_ITERATOR_DEBUG_LEVEL", "2")
#line 153 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\yvals.h"
#pragma detect_mismatch("RuntimeLibrary", "MDd_DynamicDebug")
#line 49 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\use_ansi.h"
#pragma comment(lib, "msvcprtd")
#line 345 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\yvals.h"
namespace std { 
#line 346
enum _Uninitialized { 
#line 347
_Noinit
#line 348
}; 
#line 350
class __declspec(dllimport) _Lockit { 
#line 366
public: __thiscall _Lockit() noexcept; 
#line 367
explicit __thiscall _Lockit(int) noexcept; 
#line 368
__thiscall ~_Lockit() noexcept; 
#line 371 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\yvals.h"
static void __cdecl _Lockit_ctor(int) noexcept; 
#line 372
static void __cdecl _Lockit_dtor(int) noexcept; 
#line 375
private: static void __cdecl _Lockit_ctor(_Lockit *) noexcept; 
#line 376
static void __cdecl _Lockit_ctor(_Lockit *, int) noexcept; 
#line 377
static void __cdecl _Lockit_dtor(_Lockit *) noexcept; 
#line 380
public: _Lockit(const _Lockit &) = delete;
#line 381
_Lockit &operator=(const _Lockit &) = delete;
#line 384
private: int _Locktype; 
#line 385
}; 
#line 504 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\yvals.h"
}
#line 508
#pragma warning(pop)
#pragma pack ( pop )
#line 15 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\cstdlib"
#pragma pack ( push, 8 )
#pragma warning(push, 3)
#pragma warning(disable : 4180 4412 4455 4494 4514 4574 4582 4583 4587 4588 4619 4623 4625 4626 4643 4648 4702 4793 4820 4988 5026 5027 5045 6294 4984 5053 )
#line 23
[[nodiscard]] inline double abs(double _Xx) noexcept { 
#line 24
return ::fabs(_Xx); 
#line 25
} 
#line 27
[[nodiscard]] inline float abs(float _Xx) noexcept { 
#line 28
return ::fabsf(_Xx); 
#line 29
} 
#line 31
[[nodiscard]] inline long double abs(long double _Xx) noexcept { 
#line 32
return ::fabsl(_Xx); 
#line 33
} 
#line 35
namespace std { 
#line 36
using ::size_t;
#line 37
using ::div_t;
#line 38
using ::ldiv_t;
#line 39
using ::abort;
#line 40
using ::abs;
#line 41
using ::atexit;
#line 42
using ::atof;
#line 43
using ::atoi;
#line 44
using ::atol;
#line 45
using ::bsearch;
#line 46
using ::calloc;
#line 47
using ::div;
#line 48
using ::exit;
#line 49
using ::free;
#line 50
using ::labs;
#line 51
using ::ldiv;
#line 52
using ::malloc;
#line 53
using ::mblen;
#line 54
using ::mbstowcs;
#line 55
using ::mbtowc;
#line 56
using ::qsort;
#line 57
using ::rand;
#line 58
using ::realloc;
#line 59
using ::srand;
#line 60
using ::strtod;
#line 61
using ::strtol;
#line 62
using ::strtoul;
#line 63
using ::wcstombs;
#line 64
using ::wctomb;
#line 66
using ::lldiv_t;
#line 68
using ::getenv;
#line 69
using ::system;
#line 71
using ::atoll;
#line 72
using ::llabs;
#line 73
using ::lldiv;
#line 74
using ::strtof;
#line 75
using ::strtold;
#line 76
using ::strtoll;
#line 77
using ::strtoull;
#line 79
using ::_Exit;
#line 80
using ::at_quick_exit;
#line 81
using ::quick_exit;
#line 82
}
#line 86
#pragma warning(pop)
#pragma pack ( pop )
#line 12 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\xtr1common"
#pragma pack ( push, 8 )
#pragma warning(push, 3)
#pragma warning(disable : 4180 4412 4455 4494 4514 4574 4582 4583 4587 4588 4619 4623 4625 4626 4643 4648 4702 4793 4820 4988 5026 5027 5045 6294 4984 5053 )
#line 19
namespace std { 
#line 20
template < class _Ty, _Ty _Val >
struct integral_constant {
    static constexpr _Ty value = _Val;

    using value_type = _Ty;
    using type = integral_constant;

    constexpr operator value_type ( ) const noexcept {
        return value;
    }

    [ [ nodiscard ] ] constexpr value_type operator ( ) ( ) const noexcept {
        return value;
    }
};
#line 36
template< bool _Val> using bool_constant = integral_constant< bool, _Val> ; 
#line 39
using true_type = bool_constant< true> ; 
#line 40
using false_type = bool_constant< false> ; 
#line 42
template< bool _Test, class _Ty = void> 
#line 43
struct enable_if { }; 
#line 45
template< class _Ty> 
#line 46
struct enable_if< true, _Ty>  { 
#line 47
using type = _Ty; 
#line 48
}; 
#line 50
template< bool _Test, class _Ty = void> using enable_if_t = typename enable_if< _Test, _Ty> ::type; 
#line 53
template< bool _Test, class _Ty1, class _Ty2> 
#line 54
struct conditional { 
#line 55
using type = _Ty1; 
#line 56
}; 
#line 58
template< class _Ty1, class _Ty2> 
#line 59
struct conditional< false, _Ty1, _Ty2>  { 
#line 60
using type = _Ty2; 
#line 61
}; 
#line 63
template< bool _Test, class _Ty1, class _Ty2> using conditional_t = typename conditional< _Test, _Ty1, _Ty2> ::type; 
#line 73
template< class , class > constexpr bool 
#line 74
is_same_v = false; 
#line 75
template< class _Ty> constexpr bool 
#line 76
is_same_v< _Ty, _Ty>  = true; 
#line 78
template< class _Ty1, class _Ty2> 
#line 79
struct is_same : public bool_constant< is_same_v< _Ty1, _Ty2> >  { }; 
#line 82 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\xtr1common"
template< class _Ty> 
#line 83
struct remove_const { 
#line 84
using type = _Ty; 
#line 85
}; 
#line 87
template< class _Ty> 
#line 88
struct remove_const< const _Ty>  { 
#line 89
using type = _Ty; 
#line 90
}; 
#line 92
template< class _Ty> using remove_const_t = typename remove_const< _Ty> ::type; 
#line 95
template< class _Ty> 
#line 96
struct remove_volatile { 
#line 97
using type = _Ty; 
#line 98
}; 
#line 100
template< class _Ty> 
#line 101
struct remove_volatile< volatile _Ty>  { 
#line 102
using type = _Ty; 
#line 103
}; 
#line 105
template< class _Ty> using remove_volatile_t = typename remove_volatile< _Ty> ::type; 
#line 108
template< class _Ty> 
#line 109
struct remove_cv { 
#line 110
using type = _Ty; 
#line 112
template< template< class >  class _Fn> using _Apply = _Fn< _Ty> ; 
#line 114
}; 
#line 116
template< class _Ty> 
#line 117
struct remove_cv< const _Ty>  { 
#line 118
using type = _Ty; 
#line 120
template< template< class >  class _Fn> using _Apply = const _Fn< _Ty> ; 
#line 122
}; 
#line 124
template< class _Ty> 
#line 125
struct remove_cv< volatile _Ty>  { 
#line 126
using type = _Ty; 
#line 128
template< template< class >  class _Fn> using _Apply = volatile _Fn< _Ty> ; 
#line 130
}; 
#line 132
template< class _Ty> 
#line 133
struct remove_cv< const volatile _Ty>  { 
#line 134
using type = _Ty; 
#line 136
template< template< class >  class _Fn> using _Apply = const volatile _Fn< _Ty> ; 
#line 138
}; 
#line 140
template< class _Ty> using remove_cv_t = typename remove_cv< _Ty> ::type; 
#line 143
template< bool _First_value, class _First, class ..._Rest> 
#line 144
struct _Disjunction { 
#line 145
using type = _First; 
#line 146
}; 
#line 148
template< class _False, class _Next, class ..._Rest> 
#line 149
struct _Disjunction< false, _False, _Next, _Rest...>  { 
#line 150
using type = typename std::_Disjunction< _Next::value, _Next, _Rest...> ::type; 
#line 151
}; 
#line 153
template< class ..._Traits> 
#line 154
struct disjunction : public false_type { }; 
#line 156
template< class _First, class ..._Rest> 
#line 157
struct disjunction< _First, _Rest...>  : public _Disjunction< _First::value, _First, _Rest...> ::type { 
#line 159
}; 
#line 161
template< class ..._Traits> constexpr bool 
#line 162
disjunction_v = (disjunction< _Traits...> ::value); 
#line 164
template< class _Ty, class ..._Types> constexpr bool 
#line 165
_Is_any_of_v = disjunction_v< is_same< _Ty, _Types> ...> ; 
#line 168
[[nodiscard]] constexpr bool _Is_constant_evaluated() noexcept { 
#line 169
return __builtin_is_constant_evaluated(); 
#line 170
} 
#line 178 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\xtr1common"
template< class _Ty> constexpr bool 
#line 179
is_integral_v = _Is_any_of_v< remove_cv_t< _Ty> , bool, char, signed char, unsigned char, __wchar_t, char16_t, char32_t, short, unsigned short, int, unsigned, long, unsigned long, __int64, unsigned __int64> ; 
#line 186
template< class _Ty> 
#line 187
struct is_integral : public bool_constant< is_integral_v< _Ty> >  { }; 
#line 189
template< class _Ty> constexpr bool 
#line 190
is_floating_point_v = _Is_any_of_v< remove_cv_t< _Ty> , float, double, long double> ; 
#line 192
template< class _Ty> 
#line 193
struct is_floating_point : public bool_constant< is_floating_point_v< _Ty> >  { }; 
#line 195
template< class _Ty> constexpr bool 
#line 196
is_arithmetic_v = is_integral_v< _Ty>  || is_floating_point_v< _Ty> ; 
#line 199
template< class _Ty> 
#line 200
struct is_arithmetic : public bool_constant< is_arithmetic_v< _Ty> >  { }; 
#line 202
template< class _Ty> 
#line 203
struct remove_reference { 
#line 204
using type = _Ty; 
#line 205
using _Const_thru_ref_type = const _Ty; 
#line 206
}; 
#line 208
template< class _Ty> 
#line 209
struct remove_reference< _Ty &>  { 
#line 210
using type = _Ty; 
#line 211
using _Const_thru_ref_type = const _Ty &; 
#line 212
}; 
#line 214
template< class _Ty> 
#line 215
struct remove_reference< _Ty &&>  { 
#line 216
using type = _Ty; 
#line 217
using _Const_thru_ref_type = const _Ty &&; 
#line 218
}; 
#line 220
template< class _Ty> using remove_reference_t = typename remove_reference< _Ty> ::type; 
#line 223
template< class _Ty> using _Const_thru_ref = typename remove_reference< _Ty> ::_Const_thru_ref_type; 
#line 226
template< class _Ty> using _Remove_cvref_t = remove_cv_t< remove_reference_t< _Ty> > ; 
#line 239 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\xtr1common"
}
#line 242
#pragma warning(pop)
#pragma pack ( pop )
#line 30 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\cmath"
#pragma pack ( push, 8 )
#pragma warning(push, 3)
#pragma warning(disable : 4180 4412 4455 4494 4514 4574 4582 4583 4587 4588 4619 4623 4625 4626 4643 4648 4702 4793 4820 4988 5026 5027 5045 6294 4984 5053 )
#line 37
[[nodiscard]] inline float acos(float _Xx) noexcept { 
#line 38
return ::acosf(_Xx); 
#line 39
} 
#line 41
[[nodiscard]] inline float acosh(float _Xx) noexcept { 
#line 42
return ::acoshf(_Xx); 
#line 43
} 
#line 45
[[nodiscard]] inline float asin(float _Xx) noexcept { 
#line 46
return ::asinf(_Xx); 
#line 47
} 
#line 49
[[nodiscard]] inline float asinh(float _Xx) noexcept { 
#line 50
return ::asinhf(_Xx); 
#line 51
} 
#line 53
[[nodiscard]] inline float atan(float _Xx) noexcept { 
#line 54
return ::atanf(_Xx); 
#line 55
} 
#line 57
[[nodiscard]] inline float atanh(float _Xx) noexcept { 
#line 58
return ::atanhf(_Xx); 
#line 59
} 
#line 61
[[nodiscard]] inline float atan2(float _Yx, float _Xx) noexcept { 
#line 62
return ::atan2f(_Yx, _Xx); 
#line 63
} 
#line 65
[[nodiscard]] inline float cbrt(float _Xx) noexcept { 
#line 66
return ::cbrtf(_Xx); 
#line 67
} 
#line 69
[[nodiscard]] inline float ceil(float _Xx) noexcept { 
#line 75 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\cmath"
return ::ceilf(_Xx); 
#line 77 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\cmath"
} 
#line 79
[[nodiscard]] inline float copysign(float _Number, float _Sign) noexcept { 
#line 85 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\cmath"
return ::copysignf(_Number, _Sign); 
#line 87 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\cmath"
} 
#line 89
[[nodiscard]] inline float cos(float _Xx) noexcept { 
#line 90
return ::cosf(_Xx); 
#line 91
} 
#line 93
[[nodiscard]] inline float cosh(float _Xx) noexcept { 
#line 94
return ::coshf(_Xx); 
#line 95
} 
#line 97
[[nodiscard]] inline float erf(float _Xx) noexcept { 
#line 98
return ::erff(_Xx); 
#line 99
} 
#line 101
[[nodiscard]] inline float erfc(float _Xx) noexcept { 
#line 102
return ::erfcf(_Xx); 
#line 103
} 
#line 105
[[nodiscard]] inline float exp(float _Xx) noexcept { 
#line 106
return ::expf(_Xx); 
#line 107
} 
#line 109
[[nodiscard]] inline float exp2(float _Xx) noexcept { 
#line 110
return ::exp2f(_Xx); 
#line 111
} 
#line 113
[[nodiscard]] inline float expm1(float _Xx) noexcept { 
#line 114
return ::expm1f(_Xx); 
#line 115
} 
#line 117
[[nodiscard]] inline float fabs(float _Xx) noexcept { 
#line 118
return ::fabsf(_Xx); 
#line 119
} 
#line 121
[[nodiscard]] inline float fdim(float _Xx, float _Yx) noexcept { 
#line 122
return ::fdimf(_Xx, _Yx); 
#line 123
} 
#line 125
[[nodiscard]] inline float floor(float _Xx) noexcept { 
#line 131 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\cmath"
return ::floorf(_Xx); 
#line 133 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\cmath"
} 
#line 135
[[nodiscard]] inline float fma(float _Xx, float _Yx, float _Zx) noexcept { 
#line 136
return ::fmaf(_Xx, _Yx, _Zx); 
#line 137
} 
#line 139
[[nodiscard]] inline float fmax(float _Xx, float _Yx) noexcept { 
#line 140
return ::fmaxf(_Xx, _Yx); 
#line 141
} 
#line 143
[[nodiscard]] inline float fmin(float _Xx, float _Yx) noexcept { 
#line 144
return ::fminf(_Xx, _Yx); 
#line 145
} 
#line 147
[[nodiscard]] inline float fmod(float _Xx, float _Yx) noexcept { 
#line 148
return ::fmodf(_Xx, _Yx); 
#line 149
} 
#line 151
inline float frexp(float _Xx, int *_Yx) noexcept { 
#line 152
return ::frexpf(_Xx, _Yx); 
#line 153
} 
#line 155
[[nodiscard]] inline float hypot(float _Xx, float _Yx) noexcept { 
#line 156
return ::hypotf(_Xx, _Yx); 
#line 157
} 
#line 159
[[nodiscard]] inline int ilogb(float _Xx) noexcept { 
#line 160
return ::ilogbf(_Xx); 
#line 161
} 
#line 163
[[nodiscard]] inline float ldexp(float _Xx, int _Yx) noexcept { 
#line 164
return ::ldexpf(_Xx, _Yx); 
#line 165
} 
#line 167
[[nodiscard]] inline float lgamma(float _Xx) noexcept { 
#line 168
return ::lgammaf(_Xx); 
#line 169
} 
#line 171
[[nodiscard]] inline __int64 llrint(float _Xx) noexcept { 
#line 172
return ::llrintf(_Xx); 
#line 173
} 
#line 175
[[nodiscard]] inline __int64 llround(float _Xx) noexcept { 
#line 176
return ::llroundf(_Xx); 
#line 177
} 
#line 179
[[nodiscard]] inline float log(float _Xx) noexcept { 
#line 180
return ::logf(_Xx); 
#line 181
} 
#line 183
[[nodiscard]] inline float log10(float _Xx) noexcept { 
#line 184
return ::log10f(_Xx); 
#line 185
} 
#line 187
[[nodiscard]] inline float log1p(float _Xx) noexcept { 
#line 188
return ::log1pf(_Xx); 
#line 189
} 
#line 191
[[nodiscard]] inline float log2(float _Xx) noexcept { 
#line 192
return ::log2f(_Xx); 
#line 193
} 
#line 195
[[nodiscard]] inline float logb(float _Xx) noexcept { 
#line 196
return ::logbf(_Xx); 
#line 197
} 
#line 199
[[nodiscard]] inline long lrint(float _Xx) noexcept { 
#line 200
return ::lrintf(_Xx); 
#line 201
} 
#line 203
[[nodiscard]] inline long lround(float _Xx) noexcept { 
#line 204
return ::lroundf(_Xx); 
#line 205
} 
#line 207
inline float modf(float _Xx, float *_Yx) noexcept { 
#line 208
return ::modff(_Xx, _Yx); 
#line 209
} 
#line 211
[[nodiscard]] inline float nearbyint(float _Xx) noexcept { 
#line 212
return ::nearbyintf(_Xx); 
#line 213
} 
#line 215
[[nodiscard]] inline float nextafter(float _Xx, float _Yx) noexcept { 
#line 216
return ::nextafterf(_Xx, _Yx); 
#line 217
} 
#line 219
[[nodiscard]] inline float nexttoward(float _Xx, long double _Yx) noexcept { 
#line 220
return ::nexttowardf(_Xx, _Yx); 
#line 221
} 
#line 223
[[nodiscard]] inline float pow(float _Xx, float _Yx) noexcept { 
#line 224
return ::powf(_Xx, _Yx); 
#line 225
} 
#line 227
[[nodiscard]] inline float remainder(float _Xx, float _Yx) noexcept { 
#line 228
return ::remainderf(_Xx, _Yx); 
#line 229
} 
#line 231
inline float remquo(float _Xx, float _Yx, int *_Zx) noexcept { 
#line 232
return ::remquof(_Xx, _Yx, _Zx); 
#line 233
} 
#line 235
[[nodiscard]] inline float rint(float _Xx) noexcept { 
#line 236
return ::rintf(_Xx); 
#line 237
} 
#line 239
[[nodiscard]] inline float round(float _Xx) noexcept { 
#line 245 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\cmath"
return ::roundf(_Xx); 
#line 247 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\cmath"
} 
#line 249
[[nodiscard]] inline float scalbln(float _Xx, long _Yx) noexcept { 
#line 250
return ::scalblnf(_Xx, _Yx); 
#line 251
} 
#line 253
[[nodiscard]] inline float scalbn(float _Xx, int _Yx) noexcept { 
#line 254
return ::scalbnf(_Xx, _Yx); 
#line 255
} 
#line 257
[[nodiscard]] inline float sin(float _Xx) noexcept { 
#line 258
return ::sinf(_Xx); 
#line 259
} 
#line 261
[[nodiscard]] inline float sinh(float _Xx) noexcept { 
#line 262
return ::sinhf(_Xx); 
#line 263
} 
#line 265
[[nodiscard]] inline float sqrt(float _Xx) noexcept { 
#line 266
return ::sqrtf(_Xx); 
#line 267
} 
#line 269
[[nodiscard]] inline float tan(float _Xx) noexcept { 
#line 270
return ::tanf(_Xx); 
#line 271
} 
#line 273
[[nodiscard]] inline float tanh(float _Xx) noexcept { 
#line 274
return ::tanhf(_Xx); 
#line 275
} 
#line 277
[[nodiscard]] inline float tgamma(float _Xx) noexcept { 
#line 278
return ::tgammaf(_Xx); 
#line 279
} 
#line 281
[[nodiscard]] inline float trunc(float _Xx) noexcept { 
#line 287 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\cmath"
return ::truncf(_Xx); 
#line 289 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\cmath"
} 
#line 291
[[nodiscard]] inline long double acos(long double _Xx) noexcept { 
#line 292
return ::acosl(_Xx); 
#line 293
} 
#line 295
[[nodiscard]] inline long double acosh(long double _Xx) noexcept { 
#line 296
return ::acoshl(_Xx); 
#line 297
} 
#line 299
[[nodiscard]] inline long double asin(long double _Xx) noexcept { 
#line 300
return ::asinl(_Xx); 
#line 301
} 
#line 303
[[nodiscard]] inline long double asinh(long double _Xx) noexcept { 
#line 304
return ::asinhl(_Xx); 
#line 305
} 
#line 307
[[nodiscard]] inline long double atan(long double _Xx) noexcept { 
#line 308
return ::atanl(_Xx); 
#line 309
} 
#line 311
[[nodiscard]] inline long double atanh(long double _Xx) noexcept { 
#line 312
return ::atanhl(_Xx); 
#line 313
} 
#line 315
[[nodiscard]] inline long double atan2(long double _Yx, long double _Xx) noexcept 
#line 316
{ 
#line 317
return ::atan2l(_Yx, _Xx); 
#line 318
} 
#line 320
[[nodiscard]] inline long double cbrt(long double _Xx) noexcept { 
#line 321
return ::cbrtl(_Xx); 
#line 322
} 
#line 324
[[nodiscard]] inline long double ceil(long double _Xx) noexcept { 
#line 330 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\cmath"
return ::ceill(_Xx); 
#line 332 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\cmath"
} 
#line 334
[[nodiscard]] inline long double copysign(long double _Number, long double _Sign) noexcept 
#line 335
{ 
#line 341 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\cmath"
return ::copysignl(_Number, _Sign); 
#line 343 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\cmath"
} 
#line 345
[[nodiscard]] inline long double cos(long double _Xx) noexcept { 
#line 346
return ::cosl(_Xx); 
#line 347
} 
#line 349
[[nodiscard]] inline long double cosh(long double _Xx) noexcept { 
#line 350
return ::coshl(_Xx); 
#line 351
} 
#line 353
[[nodiscard]] inline long double erf(long double _Xx) noexcept { 
#line 354
return ::erfl(_Xx); 
#line 355
} 
#line 357
[[nodiscard]] inline long double erfc(long double _Xx) noexcept { 
#line 358
return ::erfcl(_Xx); 
#line 359
} 
#line 361
[[nodiscard]] inline long double exp(long double _Xx) noexcept { 
#line 362
return ::expl(_Xx); 
#line 363
} 
#line 365
[[nodiscard]] inline long double exp2(long double _Xx) noexcept { 
#line 366
return ::exp2l(_Xx); 
#line 367
} 
#line 369
[[nodiscard]] inline long double expm1(long double _Xx) noexcept { 
#line 370
return ::expm1l(_Xx); 
#line 371
} 
#line 373
[[nodiscard]] inline long double fabs(long double _Xx) noexcept { 
#line 374
return ::fabsl(_Xx); 
#line 375
} 
#line 377
[[nodiscard]] inline long double fdim(long double _Xx, long double _Yx) noexcept 
#line 378
{ 
#line 379
return ::fdiml(_Xx, _Yx); 
#line 380
} 
#line 382
[[nodiscard]] inline long double floor(long double _Xx) noexcept { 
#line 388 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\cmath"
return ::floorl(_Xx); 
#line 390 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\cmath"
} 
#line 392
[[nodiscard]] inline long double fma(long double 
#line 393
_Xx, long double _Yx, long double _Zx) noexcept { 
#line 394
return ::fmal(_Xx, _Yx, _Zx); 
#line 395
} 
#line 397
[[nodiscard]] inline long double fmax(long double _Xx, long double _Yx) noexcept 
#line 398
{ 
#line 399
return ::fmaxl(_Xx, _Yx); 
#line 400
} 
#line 402
[[nodiscard]] inline long double fmin(long double _Xx, long double _Yx) noexcept 
#line 403
{ 
#line 404
return ::fminl(_Xx, _Yx); 
#line 405
} 
#line 407
[[nodiscard]] inline long double fmod(long double _Xx, long double _Yx) noexcept 
#line 408
{ 
#line 409
return ::fmodl(_Xx, _Yx); 
#line 410
} 
#line 412
inline long double frexp(long double _Xx, int *_Yx) noexcept { 
#line 413
return ::frexpl(_Xx, _Yx); 
#line 414
} 
#line 416
[[nodiscard]] inline long double hypot(long double _Xx, long double _Yx) noexcept 
#line 417
{ 
#line 418
return ::hypotl(_Xx, _Yx); 
#line 419
} 
#line 421
[[nodiscard]] inline int ilogb(long double _Xx) noexcept { 
#line 422
return ::ilogbl(_Xx); 
#line 423
} 
#line 425
[[nodiscard]] inline long double ldexp(long double _Xx, int _Yx) noexcept { 
#line 426
return ::ldexpl(_Xx, _Yx); 
#line 427
} 
#line 429
[[nodiscard]] inline long double lgamma(long double _Xx) noexcept { 
#line 430
return ::lgammal(_Xx); 
#line 431
} 
#line 433
[[nodiscard]] inline __int64 llrint(long double _Xx) noexcept { 
#line 434
return ::llrintl(_Xx); 
#line 435
} 
#line 437
[[nodiscard]] inline __int64 llround(long double _Xx) noexcept { 
#line 438
return ::llroundl(_Xx); 
#line 439
} 
#line 441
[[nodiscard]] inline long double log(long double _Xx) noexcept { 
#line 442
return ::logl(_Xx); 
#line 443
} 
#line 445
[[nodiscard]] inline long double log10(long double _Xx) noexcept { 
#line 446
return ::log10l(_Xx); 
#line 447
} 
#line 449
[[nodiscard]] inline long double log1p(long double _Xx) noexcept { 
#line 450
return ::log1pl(_Xx); 
#line 451
} 
#line 453
[[nodiscard]] inline long double log2(long double _Xx) noexcept { 
#line 454
return ::log2l(_Xx); 
#line 455
} 
#line 457
[[nodiscard]] inline long double logb(long double _Xx) noexcept { 
#line 458
return ::logbl(_Xx); 
#line 459
} 
#line 461
[[nodiscard]] inline long lrint(long double _Xx) noexcept { 
#line 462
return ::lrintl(_Xx); 
#line 463
} 
#line 465
[[nodiscard]] inline long lround(long double _Xx) noexcept { 
#line 466
return ::lroundl(_Xx); 
#line 467
} 
#line 469
inline long double modf(long double _Xx, long double *_Yx) noexcept { 
#line 470
return ::modfl(_Xx, _Yx); 
#line 471
} 
#line 473
[[nodiscard]] inline long double nearbyint(long double _Xx) noexcept { 
#line 474
return ::nearbyintl(_Xx); 
#line 475
} 
#line 477
[[nodiscard]] inline long double nextafter(long double _Xx, long double _Yx) noexcept 
#line 478
{ 
#line 479
return ::nextafterl(_Xx, _Yx); 
#line 480
} 
#line 482
[[nodiscard]] inline long double nexttoward(long double _Xx, long double _Yx) noexcept 
#line 483
{ 
#line 484
return ::nexttowardl(_Xx, _Yx); 
#line 485
} 
#line 487
[[nodiscard]] inline long double pow(long double _Xx, long double _Yx) noexcept 
#line 488
{ 
#line 489
return ::powl(_Xx, _Yx); 
#line 490
} 
#line 492
[[nodiscard]] inline long double remainder(long double _Xx, long double _Yx) noexcept 
#line 493
{ 
#line 494
return ::remainderl(_Xx, _Yx); 
#line 495
} 
#line 497
inline long double remquo(long double _Xx, long double _Yx, int *_Zx) noexcept { 
#line 498
return ::remquol(_Xx, _Yx, _Zx); 
#line 499
} 
#line 501
[[nodiscard]] inline long double rint(long double _Xx) noexcept { 
#line 502
return ::rintl(_Xx); 
#line 503
} 
#line 505
[[nodiscard]] inline long double round(long double _Xx) noexcept { 
#line 511 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\cmath"
return ::roundl(_Xx); 
#line 513 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\cmath"
} 
#line 515
[[nodiscard]] inline long double scalbln(long double _Xx, long _Yx) noexcept { 
#line 516
return ::scalblnl(_Xx, _Yx); 
#line 517
} 
#line 519
[[nodiscard]] inline long double scalbn(long double _Xx, int _Yx) noexcept { 
#line 520
return ::scalbnl(_Xx, _Yx); 
#line 521
} 
#line 523
[[nodiscard]] inline long double sin(long double _Xx) noexcept { 
#line 524
return ::sinl(_Xx); 
#line 525
} 
#line 527
[[nodiscard]] inline long double sinh(long double _Xx) noexcept { 
#line 528
return ::sinhl(_Xx); 
#line 529
} 
#line 531
[[nodiscard]] inline long double sqrt(long double _Xx) noexcept { 
#line 532
return ::sqrtl(_Xx); 
#line 533
} 
#line 535
[[nodiscard]] inline long double tan(long double _Xx) noexcept { 
#line 536
return ::tanl(_Xx); 
#line 537
} 
#line 539
[[nodiscard]] inline long double tanh(long double _Xx) noexcept { 
#line 540
return ::tanhl(_Xx); 
#line 541
} 
#line 543
[[nodiscard]] inline long double tgamma(long double _Xx) noexcept { 
#line 544
return ::tgammal(_Xx); 
#line 545
} 
#line 547
[[nodiscard]] inline long double trunc(long double _Xx) noexcept { 
#line 553 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\cmath"
return ::truncl(_Xx); 
#line 555 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\cmath"
} 
#line 557
namespace std { 
#line 558
template< class _Ty1, class _Ty2> using _Common_float_type_t = conditional_t< is_same_v< _Ty1, long double>  || is_same_v< _Ty2, long double> , long double, conditional_t< is_same_v< _Ty1, float>  && is_same_v< _Ty2, float> , float, double> > ; 
#line 562
}
#line 564
template < class _Ty, :: std :: enable_if_t < :: std :: is_integral_v < _Ty >, int > = 0 >
double frexp ( _Ty _Value, int * const _Exp ) noexcept {
    return :: frexp ( static_cast < double > ( _Value ), _Exp );
}
#line 569
template < class _Ty1, class _Ty2, class _Ty3,
    :: std :: enable_if_t < :: std :: is_arithmetic_v < _Ty1 > && :: std :: is_arithmetic_v < _Ty2 > && :: std :: is_arithmetic_v < _Ty3 >, int > = 0 >
[ [ nodiscard ] ] :: std :: _Common_float_type_t < _Ty1, :: std :: _Common_float_type_t < _Ty2, _Ty3 > > fma (
    _Ty1 _Left, _Ty2 _Middle, _Ty3 _Right ) noexcept {
    using _Common = :: std :: _Common_float_type_t < _Ty1, :: std :: _Common_float_type_t < _Ty2, _Ty3 >>;
    if constexpr ( :: std :: is_same_v < _Common, float > ) {
        return :: fmaf ( static_cast < _Common > ( _Left ), static_cast < _Common > ( _Middle ), static_cast < _Common > ( _Right ) );
    } else if constexpr ( :: std :: is_same_v < _Common, double > ) {
        return :: fma ( static_cast < _Common > ( _Left ), static_cast < _Common > ( _Middle ), static_cast < _Common > ( _Right ) );
    } else {
        return :: fmal ( static_cast < _Common > ( _Left ), static_cast < _Common > ( _Middle ), static_cast < _Common > ( _Right ) );
    }
}
#line 583
template < class _Ty1, class _Ty2, :: std :: enable_if_t < :: std :: is_arithmetic_v < _Ty1 > && :: std :: is_arithmetic_v < _Ty2 >, int > = 0 >
:: std :: _Common_float_type_t < _Ty1, _Ty2 > remquo ( _Ty1 _Left, _Ty2 _Right, int * _Pquo ) noexcept {
    using _Common = :: std :: _Common_float_type_t < _Ty1, _Ty2 >;
    if constexpr ( :: std :: is_same_v < _Common, float > ) {
        return :: remquof ( static_cast < _Common > ( _Left ), static_cast < _Common > ( _Right ), _Pquo );
    } else if constexpr ( :: std :: is_same_v < _Common, double > ) {
        return :: remquo ( static_cast < _Common > ( _Left ), static_cast < _Common > ( _Right ), _Pquo );
    } else {
        return :: remquol ( static_cast < _Common > ( _Left ), static_cast < _Common > ( _Right ), _Pquo );
    }
}
#line 642 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\cmath"
template < class _Ty, :: std :: enable_if_t < :: std :: is_integral_v < _Ty >, int > = 0 > [ [ nodiscard ] ] double acos ( _Ty _Left ) noexcept { return :: acos ( static_cast < double > ( _Left ) ); }
#line 643
template < class _Ty, :: std :: enable_if_t < :: std :: is_integral_v < _Ty >, int > = 0 > [ [ nodiscard ] ] double asin ( _Ty _Left ) noexcept { return :: asin ( static_cast < double > ( _Left ) ); }
#line 644
template < class _Ty, :: std :: enable_if_t < :: std :: is_integral_v < _Ty >, int > = 0 > [ [ nodiscard ] ] double atan ( _Ty _Left ) noexcept { return :: atan ( static_cast < double > ( _Left ) ); }
#line 645
template < class _Ty1, class _Ty2, :: std :: enable_if_t < :: std :: is_arithmetic_v < _Ty1 > && :: std :: is_arithmetic_v < _Ty2 >, int > = 0 > [ [ nodiscard ] ] :: std :: _Common_float_type_t < _Ty1, _Ty2 > atan2 ( _Ty1 _Left, _Ty2 _Right ) noexcept { return :: atan2 ( static_cast < double > ( _Left ), static_cast < double > ( _Right ) ); }
#line 646
template < class _Ty, :: std :: enable_if_t < :: std :: is_integral_v < _Ty >, int > = 0 > [ [ nodiscard ] ] double cos ( _Ty _Left ) noexcept { return :: cos ( static_cast < double > ( _Left ) ); }
#line 647
template < class _Ty, :: std :: enable_if_t < :: std :: is_integral_v < _Ty >, int > = 0 > [ [ nodiscard ] ] double sin ( _Ty _Left ) noexcept { return :: sin ( static_cast < double > ( _Left ) ); }
#line 648
template < class _Ty, :: std :: enable_if_t < :: std :: is_integral_v < _Ty >, int > = 0 > [ [ nodiscard ] ] double tan ( _Ty _Left ) noexcept { return :: tan ( static_cast < double > ( _Left ) ); }
#line 649
template < class _Ty, :: std :: enable_if_t < :: std :: is_integral_v < _Ty >, int > = 0 > [ [ nodiscard ] ] double acosh ( _Ty _Left ) noexcept { return :: acosh ( static_cast < double > ( _Left ) ); }
#line 650
template < class _Ty, :: std :: enable_if_t < :: std :: is_integral_v < _Ty >, int > = 0 > [ [ nodiscard ] ] double asinh ( _Ty _Left ) noexcept { return :: asinh ( static_cast < double > ( _Left ) ); }
#line 651
template < class _Ty, :: std :: enable_if_t < :: std :: is_integral_v < _Ty >, int > = 0 > [ [ nodiscard ] ] double atanh ( _Ty _Left ) noexcept { return :: atanh ( static_cast < double > ( _Left ) ); }
#line 652
template < class _Ty, :: std :: enable_if_t < :: std :: is_integral_v < _Ty >, int > = 0 > [ [ nodiscard ] ] double cosh ( _Ty _Left ) noexcept { return :: cosh ( static_cast < double > ( _Left ) ); }
#line 653
template < class _Ty, :: std :: enable_if_t < :: std :: is_integral_v < _Ty >, int > = 0 > [ [ nodiscard ] ] double sinh ( _Ty _Left ) noexcept { return :: sinh ( static_cast < double > ( _Left ) ); }
#line 654
template < class _Ty, :: std :: enable_if_t < :: std :: is_integral_v < _Ty >, int > = 0 > [ [ nodiscard ] ] double tanh ( _Ty _Left ) noexcept { return :: tanh ( static_cast < double > ( _Left ) ); }
#line 655
template < class _Ty, :: std :: enable_if_t < :: std :: is_integral_v < _Ty >, int > = 0 > [ [ nodiscard ] ] double exp ( _Ty _Left ) noexcept { return :: exp ( static_cast < double > ( _Left ) ); }
#line 656
template < class _Ty, :: std :: enable_if_t < :: std :: is_integral_v < _Ty >, int > = 0 > [ [ nodiscard ] ] double exp2 ( _Ty _Left ) noexcept { return :: exp2 ( static_cast < double > ( _Left ) ); }
#line 657
template < class _Ty, :: std :: enable_if_t < :: std :: is_integral_v < _Ty >, int > = 0 > [ [ nodiscard ] ] double expm1 ( _Ty _Left ) noexcept { return :: expm1 ( static_cast < double > ( _Left ) ); }
#line 659
template < class _Ty, :: std :: enable_if_t < :: std :: is_integral_v < _Ty >, int > = 0 > [ [ nodiscard ] ] int ilogb ( _Ty _Left ) noexcept { return :: ilogb ( static_cast < double > ( _Left ) ); }
#line 660
template < class _Ty, :: std :: enable_if_t < :: std :: is_integral_v < _Ty >, int > = 0 > [ [ nodiscard ] ] double ldexp ( _Ty _Left, int _Arg2 ) noexcept { return :: ldexp ( static_cast < double > ( _Left ), _Arg2 ); }
#line 661
template < class _Ty, :: std :: enable_if_t < :: std :: is_integral_v < _Ty >, int > = 0 > [ [ nodiscard ] ] double log ( _Ty _Left ) noexcept { return :: log ( static_cast < double > ( _Left ) ); }
#line 662
template < class _Ty, :: std :: enable_if_t < :: std :: is_integral_v < _Ty >, int > = 0 > [ [ nodiscard ] ] double log10 ( _Ty _Left ) noexcept { return :: log10 ( static_cast < double > ( _Left ) ); }
#line 663
template < class _Ty, :: std :: enable_if_t < :: std :: is_integral_v < _Ty >, int > = 0 > [ [ nodiscard ] ] double log1p ( _Ty _Left ) noexcept { return :: log1p ( static_cast < double > ( _Left ) ); }
#line 664
template < class _Ty, :: std :: enable_if_t < :: std :: is_integral_v < _Ty >, int > = 0 > [ [ nodiscard ] ] double log2 ( _Ty _Left ) noexcept { return :: log2 ( static_cast < double > ( _Left ) ); }
#line 665
template < class _Ty, :: std :: enable_if_t < :: std :: is_integral_v < _Ty >, int > = 0 > [ [ nodiscard ] ] double logb ( _Ty _Left ) noexcept { return :: logb ( static_cast < double > ( _Left ) ); }
#line 667
template < class _Ty, :: std :: enable_if_t < :: std :: is_integral_v < _Ty >, int > = 0 > [ [ nodiscard ] ] double scalbn ( _Ty _Left, int _Arg2 ) noexcept { return :: scalbn ( static_cast < double > ( _Left ), _Arg2 ); }
#line 668
template < class _Ty, :: std :: enable_if_t < :: std :: is_integral_v < _Ty >, int > = 0 > [ [ nodiscard ] ] double scalbln ( _Ty _Left, long _Arg2 ) noexcept { return :: scalbln ( static_cast < double > ( _Left ), _Arg2 ); }
#line 669
template < class _Ty, :: std :: enable_if_t < :: std :: is_integral_v < _Ty >, int > = 0 > [ [ nodiscard ] ] double cbrt ( _Ty _Left ) noexcept { return :: cbrt ( static_cast < double > ( _Left ) ); }
#line 671
template < class _Ty, :: std :: enable_if_t < :: std :: is_integral_v < _Ty >, int > = 0 > [ [ nodiscard ] ] double fabs ( _Ty _Left ) noexcept { return :: fabs ( static_cast < double > ( _Left ) ); }
#line 672
template < class _Ty1, class _Ty2, :: std :: enable_if_t < :: std :: is_arithmetic_v < _Ty1 > && :: std :: is_arithmetic_v < _Ty2 >, int > = 0 > [ [ nodiscard ] ] :: std :: _Common_float_type_t < _Ty1, _Ty2 > hypot ( _Ty1 _Left, _Ty2 _Right ) noexcept { return :: hypot ( static_cast < double > ( _Left ), static_cast < double > ( _Right ) ); }
#line 674
template < class _Ty1, class _Ty2, :: std :: enable_if_t < :: std :: is_arithmetic_v < _Ty1 > && :: std :: is_arithmetic_v < _Ty2 >, int > = 0 > [ [ nodiscard ] ] :: std :: _Common_float_type_t < _Ty1, _Ty2 > pow ( _Ty1 _Left, _Ty2 _Right ) noexcept { return :: pow ( static_cast < double > ( _Left ), static_cast < double > ( _Right ) ); }
#line 675
template < class _Ty, :: std :: enable_if_t < :: std :: is_integral_v < _Ty >, int > = 0 > [ [ nodiscard ] ] double sqrt ( _Ty _Left ) noexcept { return :: sqrt ( static_cast < double > ( _Left ) ); }
#line 676
template < class _Ty, :: std :: enable_if_t < :: std :: is_integral_v < _Ty >, int > = 0 > [ [ nodiscard ] ] double erf ( _Ty _Left ) noexcept { return :: erf ( static_cast < double > ( _Left ) ); }
#line 677
template < class _Ty, :: std :: enable_if_t < :: std :: is_integral_v < _Ty >, int > = 0 > [ [ nodiscard ] ] double erfc ( _Ty _Left ) noexcept { return :: erfc ( static_cast < double > ( _Left ) ); }
#line 678
template < class _Ty, :: std :: enable_if_t < :: std :: is_integral_v < _Ty >, int > = 0 > [ [ nodiscard ] ] double lgamma ( _Ty _Left ) noexcept { return :: lgamma ( static_cast < double > ( _Left ) ); }
#line 679
template < class _Ty, :: std :: enable_if_t < :: std :: is_integral_v < _Ty >, int > = 0 > [ [ nodiscard ] ] double tgamma ( _Ty _Left ) noexcept { return :: tgamma ( static_cast < double > ( _Left ) ); }
#line 680
template < class _Ty, :: std :: enable_if_t < :: std :: is_integral_v < _Ty >, int > = 0 > [ [ nodiscard ] ] double ceil ( _Ty _Left ) noexcept { return :: ceil ( static_cast < double > ( _Left ) ); }
#line 681
template < class _Ty, :: std :: enable_if_t < :: std :: is_integral_v < _Ty >, int > = 0 > [ [ nodiscard ] ] double floor ( _Ty _Left ) noexcept { return :: floor ( static_cast < double > ( _Left ) ); }
#line 682
template < class _Ty, :: std :: enable_if_t < :: std :: is_integral_v < _Ty >, int > = 0 > [ [ nodiscard ] ] double nearbyint ( _Ty _Left ) noexcept { return :: nearbyint ( static_cast < double > ( _Left ) ); }
#line 683
template < class _Ty, :: std :: enable_if_t < :: std :: is_integral_v < _Ty >, int > = 0 > [ [ nodiscard ] ] double rint ( _Ty _Left ) noexcept { return :: rint ( static_cast < double > ( _Left ) ); }
#line 684
template < class _Ty, :: std :: enable_if_t < :: std :: is_integral_v < _Ty >, int > = 0 > [ [ nodiscard ] ] long lrint ( _Ty _Left ) noexcept { return :: lrint ( static_cast < double > ( _Left ) ); }
#line 685
template < class _Ty, :: std :: enable_if_t < :: std :: is_integral_v < _Ty >, int > = 0 > [ [ nodiscard ] ] long long llrint ( _Ty _Left ) noexcept { return :: llrint ( static_cast < double > ( _Left ) ); }
#line 686
template < class _Ty, :: std :: enable_if_t < :: std :: is_integral_v < _Ty >, int > = 0 > [ [ nodiscard ] ] double round ( _Ty _Left ) noexcept { return :: round ( static_cast < double > ( _Left ) ); }
#line 687
template < class _Ty, :: std :: enable_if_t < :: std :: is_integral_v < _Ty >, int > = 0 > [ [ nodiscard ] ] long lround ( _Ty _Left ) noexcept { return :: lround ( static_cast < double > ( _Left ) ); }
#line 688
template < class _Ty, :: std :: enable_if_t < :: std :: is_integral_v < _Ty >, int > = 0 > [ [ nodiscard ] ] long long llround ( _Ty _Left ) noexcept { return :: llround ( static_cast < double > ( _Left ) ); }
#line 689
template < class _Ty, :: std :: enable_if_t < :: std :: is_integral_v < _Ty >, int > = 0 > [ [ nodiscard ] ] double trunc ( _Ty _Left ) noexcept { return :: trunc ( static_cast < double > ( _Left ) ); }
#line 690
template < class _Ty1, class _Ty2, :: std :: enable_if_t < :: std :: is_arithmetic_v < _Ty1 > && :: std :: is_arithmetic_v < _Ty2 >, int > = 0 > [ [ nodiscard ] ] :: std :: _Common_float_type_t < _Ty1, _Ty2 > fmod ( _Ty1 _Left, _Ty2 _Right ) noexcept { return :: fmod ( static_cast < double > ( _Left ), static_cast < double > ( _Right ) ); }
#line 691
template < class _Ty1, class _Ty2, :: std :: enable_if_t < :: std :: is_arithmetic_v < _Ty1 > && :: std :: is_arithmetic_v < _Ty2 >, int > = 0 > [ [ nodiscard ] ] :: std :: _Common_float_type_t < _Ty1, _Ty2 > remainder ( _Ty1 _Left, _Ty2 _Right ) noexcept { return :: remainder ( static_cast < double > ( _Left ), static_cast < double > ( _Right ) ); }
#line 693
template < class _Ty1, class _Ty2, :: std :: enable_if_t < :: std :: is_arithmetic_v < _Ty1 > && :: std :: is_arithmetic_v < _Ty2 >, int > = 0 > [ [ nodiscard ] ] :: std :: _Common_float_type_t < _Ty1, _Ty2 > copysign ( _Ty1 _Left, _Ty2 _Right ) noexcept { return :: copysign ( static_cast < double > ( _Left ), static_cast < double > ( _Right ) ); }
#line 695
template < class _Ty1, class _Ty2, :: std :: enable_if_t < :: std :: is_arithmetic_v < _Ty1 > && :: std :: is_arithmetic_v < _Ty2 >, int > = 0 > [ [ nodiscard ] ] :: std :: _Common_float_type_t < _Ty1, _Ty2 > nextafter ( _Ty1 _Left, _Ty2 _Right ) noexcept { return :: nextafter ( static_cast < double > ( _Left ), static_cast < double > ( _Right ) ); }
#line 696
template < class _Ty, :: std :: enable_if_t < :: std :: is_integral_v < _Ty >, int > = 0 > [ [ nodiscard ] ] double nexttoward ( _Ty _Left, long double _Arg2 ) noexcept { return :: nexttoward ( static_cast < double > ( _Left ), _Arg2 ); }
#line 697
template < class _Ty1, class _Ty2, :: std :: enable_if_t < :: std :: is_arithmetic_v < _Ty1 > && :: std :: is_arithmetic_v < _Ty2 >, int > = 0 > [ [ nodiscard ] ] :: std :: _Common_float_type_t < _Ty1, _Ty2 > fdim ( _Ty1 _Left, _Ty2 _Right ) noexcept { return :: fdim ( static_cast < double > ( _Left ), static_cast < double > ( _Right ) ); }
#line 698
template < class _Ty1, class _Ty2, :: std :: enable_if_t < :: std :: is_arithmetic_v < _Ty1 > && :: std :: is_arithmetic_v < _Ty2 >, int > = 0 > [ [ nodiscard ] ] :: std :: _Common_float_type_t < _Ty1, _Ty2 > fmax ( _Ty1 _Left, _Ty2 _Right ) noexcept { return :: fmax ( static_cast < double > ( _Left ), static_cast < double > ( _Right ) ); }
#line 699
template < class _Ty1, class _Ty2, :: std :: enable_if_t < :: std :: is_arithmetic_v < _Ty1 > && :: std :: is_arithmetic_v < _Ty2 >, int > = 0 > [ [ nodiscard ] ] :: std :: _Common_float_type_t < _Ty1, _Ty2 > fmin ( _Ty1 _Left, _Ty2 _Right ) noexcept { return :: fmin ( static_cast < double > ( _Left ), static_cast < double > ( _Right ) ); }
#line 714
namespace std { 
#line 715
using ::abs;
#line 716
using ::acos;
#line 717
using ::asin;
#line 718
using ::atan;
#line 719
using ::atan2;
#line 720
using ::ceil;
#line 721
using ::cos;
#line 722
using ::cosh;
#line 723
using ::exp;
#line 724
using ::fabs;
#line 725
using ::floor;
#line 726
using ::fmod;
#line 727
using ::frexp;
#line 728
using ::ldexp;
#line 729
using ::log;
#line 730
using ::log10;
#line 731
using ::modf;
#line 732
using ::pow;
#line 733
using ::sin;
#line 734
using ::sinh;
#line 735
using ::sqrt;
#line 736
using ::tan;
#line 737
using ::tanh;
#line 739
using ::acosf;
#line 740
using ::asinf;
#line 741
using ::atanf;
#line 742
using ::atan2f;
#line 743
using ::ceilf;
#line 744
using ::cosf;
#line 745
using ::coshf;
#line 746
using ::expf;
#line 747
using ::fabsf;
#line 748
using ::floorf;
#line 749
using ::fmodf;
#line 750
using ::frexpf;
#line 751
using ::ldexpf;
#line 752
using ::logf;
#line 753
using ::log10f;
#line 754
using ::modff;
#line 755
using ::powf;
#line 756
using ::sinf;
#line 757
using ::sinhf;
#line 758
using ::sqrtf;
#line 759
using ::tanf;
#line 760
using ::tanhf;
#line 762
using ::acosl;
#line 763
using ::asinl;
#line 764
using ::atanl;
#line 765
using ::atan2l;
#line 766
using ::ceill;
#line 767
using ::cosl;
#line 768
using ::coshl;
#line 769
using ::expl;
#line 770
using ::fabsl;
#line 771
using ::floorl;
#line 772
using ::fmodl;
#line 773
using ::frexpl;
#line 774
using ::ldexpl;
#line 775
using ::logl;
#line 776
using ::log10l;
#line 777
using ::modfl;
#line 778
using ::powl;
#line 779
using ::sinl;
#line 780
using ::sinhl;
#line 781
using ::sqrtl;
#line 782
using ::tanl;
#line 783
using ::tanhl;
#line 785
using ::float_t;
#line 786
using ::double_t;
#line 788
using ::acosh;
#line 789
using ::asinh;
#line 790
using ::atanh;
#line 791
using ::cbrt;
#line 792
using ::erf;
#line 793
using ::erfc;
#line 794
using ::expm1;
#line 795
using ::exp2;
#line 797
inline namespace _Binary_hypot { 
#line 798
using ::hypot;
#line 799
}
#line 801
using ::ilogb;
#line 802
using ::lgamma;
#line 803
using ::log1p;
#line 804
using ::log2;
#line 805
using ::logb;
#line 806
using ::llrint;
#line 807
using ::lrint;
#line 808
using ::nearbyint;
#line 809
using ::rint;
#line 810
using ::llround;
#line 811
using ::lround;
#line 812
using ::fdim;
#line 813
using ::fma;
#line 814
using ::fmax;
#line 815
using ::fmin;
#line 816
using ::round;
#line 817
using ::trunc;
#line 818
using ::remainder;
#line 819
using ::remquo;
#line 820
using ::copysign;
#line 821
using ::nan;
#line 822
using ::nextafter;
#line 823
using ::scalbn;
#line 824
using ::scalbln;
#line 825
using ::nexttoward;
#line 826
using ::tgamma;
#line 828
using ::acoshf;
#line 829
using ::asinhf;
#line 830
using ::atanhf;
#line 831
using ::cbrtf;
#line 832
using ::erff;
#line 833
using ::erfcf;
#line 834
using ::expm1f;
#line 835
using ::exp2f;
#line 836
using ::hypotf;
#line 837
using ::ilogbf;
#line 838
using ::lgammaf;
#line 839
using ::log1pf;
#line 840
using ::log2f;
#line 841
using ::logbf;
#line 842
using ::llrintf;
#line 843
using ::lrintf;
#line 844
using ::nearbyintf;
#line 845
using ::rintf;
#line 846
using ::llroundf;
#line 847
using ::lroundf;
#line 848
using ::fdimf;
#line 849
using ::fmaf;
#line 850
using ::fmaxf;
#line 851
using ::fminf;
#line 852
using ::roundf;
#line 853
using ::truncf;
#line 854
using ::remainderf;
#line 855
using ::remquof;
#line 856
using ::copysignf;
#line 857
using ::nanf;
#line 858
using ::nextafterf;
#line 859
using ::scalbnf;
#line 860
using ::scalblnf;
#line 861
using ::nexttowardf;
#line 862
using ::tgammaf;
#line 864
using ::acoshl;
#line 865
using ::asinhl;
#line 866
using ::atanhl;
#line 867
using ::cbrtl;
#line 868
using ::erfl;
#line 869
using ::erfcl;
#line 870
using ::expm1l;
#line 871
using ::exp2l;
#line 872
using ::hypotl;
#line 873
using ::ilogbl;
#line 874
using ::lgammal;
#line 875
using ::log1pl;
#line 876
using ::log2l;
#line 877
using ::logbl;
#line 878
using ::llrintl;
#line 879
using ::lrintl;
#line 880
using ::nearbyintl;
#line 881
using ::rintl;
#line 882
using ::llroundl;
#line 883
using ::lroundl;
#line 884
using ::fdiml;
#line 885
using ::fmal;
#line 886
using ::fmaxl;
#line 887
using ::fminl;
#line 888
using ::roundl;
#line 889
using ::truncl;
#line 890
using ::remainderl;
#line 891
using ::remquol;
#line 892
using ::copysignl;
#line 893
using ::nanl;
#line 894
using ::nextafterl;
#line 895
using ::scalbnl;
#line 896
using ::scalblnl;
#line 897
using ::nexttowardl;
#line 898
using ::tgammal;
#line 900
using ::fpclassify;
#line 901
using ::signbit;
#line 902
using ::isfinite;
#line 903
using ::isinf;
#line 904
using ::isnan;
#line 905
using ::isnormal;
#line 906
using ::isgreater;
#line 907
using ::isgreaterequal;
#line 908
using ::isless;
#line 909
using ::islessequal;
#line 910
using ::islessgreater;
#line 911
using ::isunordered;
#line 912
}
#line 1487 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\cmath"
#pragma warning(pop)
#pragma pack ( pop )
#line 10836 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"
extern "C" __declspec(dllimport) double __cdecl _hypot(double x, double y); 
#line 10837
extern "C" __declspec(dllimport) float __cdecl _hypotf(float x, float y); 
#line 10847 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"
extern inline bool signbit(long double) throw(); 
#line 10848
extern "C" __declspec(dllimport) int _ldsign(long double); 
#line 10891 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"
extern inline bool signbit(double) throw(); 
#line 10892
extern "C" __declspec(dllimport) int _dsign(double); 
#line 10936 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"
extern inline bool signbit(float) throw(); 
#line 10937
extern "C" __declspec(dllimport) int _fdsign(float); 
#line 10945 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"
static __inline bool isinf(long double a); 
#line 10980 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"
static __inline bool isinf(double a); 
#line 11018 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"
static __inline bool isinf(float a); 
#line 11025 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"
static __inline bool isnan(long double a); 
#line 11058 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"
static __inline bool isnan(double a); 
#line 11094 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"
static __inline bool isnan(float a); 
#line 11101 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"
static __inline bool isfinite(long double a); 
#line 11138 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"
static __inline bool isfinite(double a); 
#line 11174 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"
static __inline bool isfinite(float a); 
#line 11182 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"
template< class T> extern T _Pow_int(T, int) throw(); 
#line 11183
extern inline __int64 abs(__int64) throw(); 
#line 11264 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"
extern inline long __cdecl abs(long) throw(); 
#line 11268 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"
extern inline float __cdecl abs(float) throw(); 
#line 11269
extern inline double __cdecl abs(double) throw(); 
#line 11270
extern inline float __cdecl fabs(float) throw(); 
#line 11271
extern inline float __cdecl ceil(float) throw(); 
#line 11272
extern inline float __cdecl floor(float) throw(); 
#line 11273
extern inline float __cdecl sqrt(float) throw(); 
#line 11274
extern inline float __cdecl pow(float, float) throw(); 
#line 11307 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"
template< class _Ty1, class _Ty2, std::enable_if_t< std::is_arithmetic_v< _Ty1>  && std::is_arithmetic_v< _Ty2> , int>  > [[nodiscard]] std::_Common_float_type_t< _Ty1, _Ty2>  __cdecl pow(_Ty1 _Left, _Ty2 _Right) noexcept; 
#line 11314 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"
extern inline float __cdecl log(float) throw(); 
#line 11315
extern inline float __cdecl log10(float) throw(); 
#line 11316
extern inline float __cdecl fmod(float, float) throw(); 
#line 11317
extern inline float __cdecl modf(float, float *) throw(); 
#line 11318
extern inline float __cdecl exp(float) throw(); 
#line 11319
extern inline float __cdecl frexp(float, int *) throw(); 
#line 11320
extern inline float __cdecl ldexp(float, int) throw(); 
#line 11321
extern inline float __cdecl asin(float) throw(); 
#line 11322
extern inline float __cdecl sin(float) throw(); 
#line 11323
extern inline float __cdecl sinh(float) throw(); 
#line 11324
extern inline float __cdecl acos(float) throw(); 
#line 11325
extern inline float __cdecl cos(float) throw(); 
#line 11326
extern inline float __cdecl cosh(float) throw(); 
#line 11327
extern inline float __cdecl atan(float) throw(); 
#line 11328
extern inline float __cdecl atan2(float, float) throw(); 
#line 11329
extern inline float __cdecl tan(float) throw(); 
#line 11330
extern inline float __cdecl tanh(float) throw(); 
#line 11553 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"
extern inline float __cdecl logb(float) throw(); 
#line 11554
extern inline int __cdecl ilogb(float) throw(); 
#line 11555
extern float __cdecl scalbn(float, float) throw(); 
#line 11556
extern inline float __cdecl scalbln(float, long) throw(); 
#line 11557
extern inline float __cdecl exp2(float) throw(); 
#line 11558
extern inline float __cdecl expm1(float) throw(); 
#line 11559
extern inline float __cdecl log2(float) throw(); 
#line 11560
extern inline float __cdecl log1p(float) throw(); 
#line 11561
extern inline float __cdecl acosh(float) throw(); 
#line 11562
extern inline float __cdecl asinh(float) throw(); 
#line 11563
extern inline float __cdecl atanh(float) throw(); 
#line 11564
extern inline float __cdecl hypot(float, float) throw(); 
#line 11565
extern inline float __cdecl cbrt(float) throw(); 
#line 11566
extern inline float __cdecl erf(float) throw(); 
#line 11567
extern inline float __cdecl erfc(float) throw(); 
#line 11568
extern inline float __cdecl lgamma(float) throw(); 
#line 11569
extern inline float __cdecl tgamma(float) throw(); 
#line 11570
extern inline float __cdecl copysign(float, float) throw(); 
#line 11571
extern inline float __cdecl nextafter(float, float) throw(); 
#line 11572
extern inline float __cdecl remainder(float, float) throw(); 
#line 11573
extern inline float __cdecl remquo(float, float, int *) throw(); 
#line 11574
extern inline float __cdecl round(float) throw(); 
#line 11575
extern inline long __cdecl lround(float) throw(); 
#line 11576
extern inline __int64 __cdecl llround(float) throw(); 
#line 11577
extern inline float __cdecl trunc(float) throw(); 
#line 11578
extern inline float __cdecl rint(float) throw(); 
#line 11579
extern inline long __cdecl lrint(float) throw(); 
#line 11580
extern inline __int64 __cdecl llrint(float) throw(); 
#line 11581
extern inline float __cdecl nearbyint(float) throw(); 
#line 11582
extern inline float __cdecl fdim(float, float) throw(); 
#line 11583
extern inline float __cdecl fma(float, float, float) throw(); 
#line 11584
extern inline float __cdecl fmax(float, float) throw(); 
#line 11585
extern inline float __cdecl fmin(float, float) throw(); 
#line 11588 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"
static inline float exp10(const float a); 
#line 11590
static inline float rsqrt(const float a); 
#line 11592
static inline float rcbrt(const float a); 
#line 11594
static inline float sinpi(const float a); 
#line 11596
static inline float cospi(const float a); 
#line 11598
static inline void sincospi(const float a, float *const sptr, float *const cptr); 
#line 11600
static inline void sincos(const float a, float *const sptr, float *const cptr); 
#line 11602
static inline float j0(const float a); 
#line 11604
static inline float j1(const float a); 
#line 11606
static inline float jn(const int n, const float a); 
#line 11608
static inline float y0(const float a); 
#line 11610
static inline float y1(const float a); 
#line 11612
static inline float yn(const int n, const float a); 
#line 11614
static inline float cyl_bessel_i0(const float a); 
#line 11616
static inline float cyl_bessel_i1(const float a); 
#line 11618
static inline float erfinv(const float a); 
#line 11620
static inline float erfcinv(const float a); 
#line 11622
static inline float normcdfinv(const float a); 
#line 11624
static inline float normcdf(const float a); 
#line 11626
static inline float erfcx(const float a); 
#line 11628
static inline double copysign(const double a, const float b); 
#line 11630
static inline double copysign(const float a, const double b); 
#line 11638
static inline unsigned min(const unsigned a, const unsigned b); 
#line 11646
static inline unsigned min(const int a, const unsigned b); 
#line 11654
static inline unsigned min(const unsigned a, const int b); 
#line 11662
static inline long min(const long a, const long b); 
#line 11670
static inline unsigned long min(const unsigned long a, const unsigned long b); 
#line 11678
static inline unsigned long min(const long a, const unsigned long b); 
#line 11686
static inline unsigned long min(const unsigned long a, const long b); 
#line 11694
static inline __int64 min(const __int64 a, const __int64 b); 
#line 11702
static inline unsigned __int64 min(const unsigned __int64 a, const unsigned __int64 b); 
#line 11710
static inline unsigned __int64 min(const __int64 a, const unsigned __int64 b); 
#line 11718
static inline unsigned __int64 min(const unsigned __int64 a, const __int64 b); 
#line 11729
static inline float min(const float a, const float b); 
#line 11740
static inline double min(const double a, const double b); 
#line 11750
static inline double min(const float a, const double b); 
#line 11760
static inline double min(const double a, const float b); 
#line 11768
static inline unsigned max(const unsigned a, const unsigned b); 
#line 11776
static inline unsigned max(const int a, const unsigned b); 
#line 11784
static inline unsigned max(const unsigned a, const int b); 
#line 11792
static inline long max(const long a, const long b); 
#line 11800
static inline unsigned long max(const unsigned long a, const unsigned long b); 
#line 11808
static inline unsigned long max(const long a, const unsigned long b); 
#line 11816
static inline unsigned long max(const unsigned long a, const long b); 
#line 11824
static inline __int64 max(const __int64 a, const __int64 b); 
#line 11832
static inline unsigned __int64 max(const unsigned __int64 a, const unsigned __int64 b); 
#line 11840
static inline unsigned __int64 max(const __int64 a, const unsigned __int64 b); 
#line 11848
static inline unsigned __int64 max(const unsigned __int64 a, const __int64 b); 
#line 11859
static inline float max(const float a, const float b); 
#line 11870
static inline double max(const double a, const double b); 
#line 11880
static inline double max(const float a, const double b); 
#line 11890
static inline double max(const double a, const float b); 
#line 11901
extern "C" {
#line 11902
inline void *__nv_aligned_device_malloc(size_t size, size_t align) {int volatile ___ = 1;(void)size;(void)align;::exit(___);}
#if 0
#line 11903
{ 
#line 11904
void *__nv_aligned_device_malloc_impl(size_t, size_t); 
#line 11905
return __nv_aligned_device_malloc_impl(size, align); 
#line 11906
} 
#endif
#line 11907 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.h"
}
#line 433 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.hpp"
static __inline bool isinf(const long double a) 
#line 434
{ 
#line 438 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.hpp"
return isinf< long double> (a); 
#line 440 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.hpp"
} 
#line 449 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.hpp"
static __inline bool isinf(const double a) 
#line 450
{ 
#line 454 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.hpp"
return isinf< double> (a); 
#line 456 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.hpp"
} 
#line 465 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.hpp"
static __inline bool isinf(const float a) 
#line 466
{ 
#line 470 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.hpp"
return isinf< float> (a); 
#line 472 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.hpp"
} 
#line 481 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.hpp"
static __inline bool isnan(const long double a) 
#line 482
{ 
#line 486 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.hpp"
return isnan< long double> (a); 
#line 488 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.hpp"
} 
#line 497 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.hpp"
static __inline bool isnan(const double a) 
#line 498
{ 
#line 502 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.hpp"
return isnan< double> (a); 
#line 504 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.hpp"
} 
#line 513 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.hpp"
static __inline bool isnan(const float a) 
#line 514
{ 
#line 518 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.hpp"
return isnan< float> (a); 
#line 520 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.hpp"
} 
#line 529 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.hpp"
static __inline bool isfinite(const long double a) 
#line 530
{ 
#line 534 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.hpp"
return isfinite< long double> (a); 
#line 536 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.hpp"
} 
#line 545 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.hpp"
static __inline bool isfinite(const double a) 
#line 546
{ 
#line 550 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.hpp"
return isfinite< double> (a); 
#line 552 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.hpp"
} 
#line 561 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.hpp"
static __inline bool isfinite(const float a) 
#line 562
{ 
#line 566 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.hpp"
return isfinite< float> (a); 
#line 568 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.hpp"
} 
#line 758 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.hpp"
static inline float exp10(const float a) 
#line 759
{ 
#line 760
return exp10f(a); 
#line 761
} 
#line 763
static inline float rsqrt(const float a) 
#line 764
{ 
#line 765
return rsqrtf(a); 
#line 766
} 
#line 768
static inline float rcbrt(const float a) 
#line 769
{ 
#line 770
return rcbrtf(a); 
#line 771
} 
#line 773
static inline float sinpi(const float a) 
#line 774
{ 
#line 775
return sinpif(a); 
#line 776
} 
#line 778
static inline float cospi(const float a) 
#line 779
{ 
#line 780
return cospif(a); 
#line 781
} 
#line 783
static inline void sincospi(const float a, float *const sptr, float *const cptr) 
#line 784
{ 
#line 785
sincospif(a, sptr, cptr); 
#line 786
} 
#line 788
static inline void sincos(const float a, float *const sptr, float *const cptr) 
#line 789
{ 
#line 790
sincosf(a, sptr, cptr); 
#line 791
} 
#line 793
static inline float j0(const float a) 
#line 794
{ 
#line 795
return j0f(a); 
#line 796
} 
#line 798
static inline float j1(const float a) 
#line 799
{ 
#line 800
return j1f(a); 
#line 801
} 
#line 803
static inline float jn(const int n, const float a) 
#line 804
{ 
#line 805
return jnf(n, a); 
#line 806
} 
#line 808
static inline float y0(const float a) 
#line 809
{ 
#line 810
return y0f(a); 
#line 811
} 
#line 813
static inline float y1(const float a) 
#line 814
{ 
#line 815
return y1f(a); 
#line 816
} 
#line 818
static inline float yn(const int n, const float a) 
#line 819
{ 
#line 820
return ynf(n, a); 
#line 821
} 
#line 823
static inline float cyl_bessel_i0(const float a) {int volatile ___ = 1;(void)a;::exit(___);}
#if 0
#line 824
{ 
#line 825
return cyl_bessel_i0f(a); 
#line 826
} 
#endif
#line 828 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.hpp"
static inline float cyl_bessel_i1(const float a) {int volatile ___ = 1;(void)a;::exit(___);}
#if 0
#line 829
{ 
#line 830
return cyl_bessel_i1f(a); 
#line 831
} 
#endif
#line 833 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.hpp"
static inline float erfinv(const float a) 
#line 834
{ 
#line 835
return erfinvf(a); 
#line 836
} 
#line 838
static inline float erfcinv(const float a) 
#line 839
{ 
#line 840
return erfcinvf(a); 
#line 841
} 
#line 843
static inline float normcdfinv(const float a) 
#line 844
{ 
#line 845
return normcdfinvf(a); 
#line 846
} 
#line 848
static inline float normcdf(const float a) 
#line 849
{ 
#line 850
return normcdff(a); 
#line 851
} 
#line 853
static inline float erfcx(const float a) 
#line 854
{ 
#line 855
return erfcxf(a); 
#line 856
} 
#line 858
static inline double copysign(const double a, const float b) 
#line 859
{ 
#line 860
return copysign(a, static_cast< double>(b)); 
#line 861
} 
#line 863
static inline double copysign(const float a, const double b) 
#line 864
{ 
#line 865
return copysign(static_cast< double>(a), b); 
#line 866
} 
#line 868
static inline unsigned min(const unsigned a, const unsigned b) 
#line 869
{ 
#line 870
return umin(a, b); 
#line 871
} 
#line 873
static inline unsigned min(const int a, const unsigned b) 
#line 874
{ 
#line 875
return umin(static_cast< unsigned>(a), b); 
#line 876
} 
#line 878
static inline unsigned min(const unsigned a, const int b) 
#line 879
{ 
#line 880
return umin(a, static_cast< unsigned>(b)); 
#line 881
} 
#line 883
static inline long min(const long a, const long b) 
#line 884
{ 
#line 885
long retval; 
#line 888
#pragma warning (disable: 4127)
#line 891 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.hpp"
if (sizeof(long) == sizeof(int)) { 
#line 893
#pragma warning (default: 4127)
#line 895 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.hpp"
retval = (static_cast< long>(min(static_cast< int>(a), static_cast< int>(b)))); 
#line 896
} else { 
#line 897
retval = (static_cast< long>(llmin(static_cast< __int64>(a), static_cast< __int64>(b)))); 
#line 898
}  
#line 899
return retval; 
#line 900
} 
#line 902
static inline unsigned long min(const unsigned long a, const unsigned long b) 
#line 903
{ 
#line 904
unsigned long retval; 
#line 906
#pragma warning (disable: 4127)
#line 908 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.hpp"
if (sizeof(unsigned long) == sizeof(unsigned)) { 
#line 910
#pragma warning (default: 4127)
#line 912 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.hpp"
retval = (static_cast< unsigned long>(umin(static_cast< unsigned>(a), static_cast< unsigned>(b)))); 
#line 913
} else { 
#line 914
retval = (static_cast< unsigned long>(ullmin(static_cast< unsigned __int64>(a), static_cast< unsigned __int64>(b)))); 
#line 915
}  
#line 916
return retval; 
#line 917
} 
#line 919
static inline unsigned long min(const long a, const unsigned long b) 
#line 920
{ 
#line 921
unsigned long retval; 
#line 923
#pragma warning (disable: 4127)
#line 925 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.hpp"
if (sizeof(unsigned long) == sizeof(unsigned)) { 
#line 927
#pragma warning (default: 4127)
#line 929 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.hpp"
retval = (static_cast< unsigned long>(umin(static_cast< unsigned>(a), static_cast< unsigned>(b)))); 
#line 930
} else { 
#line 931
retval = (static_cast< unsigned long>(ullmin(static_cast< unsigned __int64>(a), static_cast< unsigned __int64>(b)))); 
#line 932
}  
#line 933
return retval; 
#line 934
} 
#line 936
static inline unsigned long min(const unsigned long a, const long b) 
#line 937
{ 
#line 938
unsigned long retval; 
#line 940
#pragma warning (disable: 4127)
#line 942 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.hpp"
if (sizeof(unsigned long) == sizeof(unsigned)) { 
#line 944
#pragma warning (default: 4127)
#line 946 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.hpp"
retval = (static_cast< unsigned long>(umin(static_cast< unsigned>(a), static_cast< unsigned>(b)))); 
#line 947
} else { 
#line 948
retval = (static_cast< unsigned long>(ullmin(static_cast< unsigned __int64>(a), static_cast< unsigned __int64>(b)))); 
#line 949
}  
#line 950
return retval; 
#line 951
} 
#line 953
static inline __int64 min(const __int64 a, const __int64 b) 
#line 954
{ 
#line 955
return llmin(a, b); 
#line 956
} 
#line 958
static inline unsigned __int64 min(const unsigned __int64 a, const unsigned __int64 b) 
#line 959
{ 
#line 960
return ullmin(a, b); 
#line 961
} 
#line 963
static inline unsigned __int64 min(const __int64 a, const unsigned __int64 b) 
#line 964
{ 
#line 965
return ullmin(static_cast< unsigned __int64>(a), b); 
#line 966
} 
#line 968
static inline unsigned __int64 min(const unsigned __int64 a, const __int64 b) 
#line 969
{ 
#line 970
return ullmin(a, static_cast< unsigned __int64>(b)); 
#line 971
} 
#line 973
static inline float min(const float a, const float b) 
#line 974
{ 
#line 975
return fminf(a, b); 
#line 976
} 
#line 978
static inline double min(const double a, const double b) 
#line 979
{ 
#line 980
return fmin(a, b); 
#line 981
} 
#line 983
static inline double min(const float a, const double b) 
#line 984
{ 
#line 985
return fmin(static_cast< double>(a), b); 
#line 986
} 
#line 988
static inline double min(const double a, const float b) 
#line 989
{ 
#line 990
return fmin(a, static_cast< double>(b)); 
#line 991
} 
#line 993
static inline unsigned max(const unsigned a, const unsigned b) 
#line 994
{ 
#line 995
return umax(a, b); 
#line 996
} 
#line 998
static inline unsigned max(const int a, const unsigned b) 
#line 999
{ 
#line 1000
return umax(static_cast< unsigned>(a), b); 
#line 1001
} 
#line 1003
static inline unsigned max(const unsigned a, const int b) 
#line 1004
{ 
#line 1005
return umax(a, static_cast< unsigned>(b)); 
#line 1006
} 
#line 1008
static inline long max(const long a, const long b) 
#line 1009
{ 
#line 1010
long retval; 
#line 1013
#pragma warning (disable: 4127)
#line 1015 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.hpp"
if (sizeof(long) == sizeof(int)) { 
#line 1017
#pragma warning (default: 4127)
#line 1019 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.hpp"
retval = (static_cast< long>(max(static_cast< int>(a), static_cast< int>(b)))); 
#line 1020
} else { 
#line 1021
retval = (static_cast< long>(llmax(static_cast< __int64>(a), static_cast< __int64>(b)))); 
#line 1022
}  
#line 1023
return retval; 
#line 1024
} 
#line 1026
static inline unsigned long max(const unsigned long a, const unsigned long b) 
#line 1027
{ 
#line 1028
unsigned long retval; 
#line 1030
#pragma warning (disable: 4127)
#line 1032 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.hpp"
if (sizeof(unsigned long) == sizeof(unsigned)) { 
#line 1034
#pragma warning (default: 4127)
#line 1036 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.hpp"
retval = (static_cast< unsigned long>(umax(static_cast< unsigned>(a), static_cast< unsigned>(b)))); 
#line 1037
} else { 
#line 1038
retval = (static_cast< unsigned long>(ullmax(static_cast< unsigned __int64>(a), static_cast< unsigned __int64>(b)))); 
#line 1039
}  
#line 1040
return retval; 
#line 1041
} 
#line 1043
static inline unsigned long max(const long a, const unsigned long b) 
#line 1044
{ 
#line 1045
unsigned long retval; 
#line 1047
#pragma warning (disable: 4127)
#line 1049 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.hpp"
if (sizeof(unsigned long) == sizeof(unsigned)) { 
#line 1051
#pragma warning (default: 4127)
#line 1053 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.hpp"
retval = (static_cast< unsigned long>(umax(static_cast< unsigned>(a), static_cast< unsigned>(b)))); 
#line 1054
} else { 
#line 1055
retval = (static_cast< unsigned long>(ullmax(static_cast< unsigned __int64>(a), static_cast< unsigned __int64>(b)))); 
#line 1056
}  
#line 1057
return retval; 
#line 1058
} 
#line 1060
static inline unsigned long max(const unsigned long a, const long b) 
#line 1061
{ 
#line 1062
unsigned long retval; 
#line 1064
#pragma warning (disable: 4127)
#line 1066 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.hpp"
if (sizeof(unsigned long) == sizeof(unsigned)) { 
#line 1068
#pragma warning (default: 4127)
#line 1070 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.hpp"
retval = (static_cast< unsigned long>(umax(static_cast< unsigned>(a), static_cast< unsigned>(b)))); 
#line 1071
} else { 
#line 1072
retval = (static_cast< unsigned long>(ullmax(static_cast< unsigned __int64>(a), static_cast< unsigned __int64>(b)))); 
#line 1073
}  
#line 1074
return retval; 
#line 1075
} 
#line 1077
static inline __int64 max(const __int64 a, const __int64 b) 
#line 1078
{ 
#line 1079
return llmax(a, b); 
#line 1080
} 
#line 1082
static inline unsigned __int64 max(const unsigned __int64 a, const unsigned __int64 b) 
#line 1083
{ 
#line 1084
return ullmax(a, b); 
#line 1085
} 
#line 1087
static inline unsigned __int64 max(const __int64 a, const unsigned __int64 b) 
#line 1088
{ 
#line 1089
return ullmax(static_cast< unsigned __int64>(a), b); 
#line 1090
} 
#line 1092
static inline unsigned __int64 max(const unsigned __int64 a, const __int64 b) 
#line 1093
{ 
#line 1094
return ullmax(a, static_cast< unsigned __int64>(b)); 
#line 1095
} 
#line 1097
static inline float max(const float a, const float b) 
#line 1098
{ 
#line 1099
return fmaxf(a, b); 
#line 1100
} 
#line 1102
static inline double max(const double a, const double b) 
#line 1103
{ 
#line 1104
return fmax(a, b); 
#line 1105
} 
#line 1107
static inline double max(const float a, const double b) 
#line 1108
{ 
#line 1109
return fmax(static_cast< double>(a), b); 
#line 1110
} 
#line 1112
static inline double max(const double a, const float b) 
#line 1113
{ 
#line 1114
return fmax(a, static_cast< double>(b)); 
#line 1115
} 
#line 1121
#pragma warning(disable : 4211)
#line 1126 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\math_functions.hpp"
static inline int min(const int a, const int b) 
#line 1127
{ 
#line 1128
return (a < b) ? a : b; 
#line 1129
} 
#line 1131
static inline unsigned umin(const unsigned a, const unsigned b) 
#line 1132
{ 
#line 1133
return (a < b) ? a : b; 
#line 1134
} 
#line 1136
static inline __int64 llmin(const __int64 a, const __int64 b) 
#line 1137
{ 
#line 1138
return (a < b) ? a : b; 
#line 1139
} 
#line 1141
static inline unsigned __int64 ullmin(const unsigned __int64 a, const unsigned __int64 
#line 1142
b) 
#line 1143
{ 
#line 1144
return (a < b) ? a : b; 
#line 1145
} 
#line 1147
static inline int max(const int a, const int b) 
#line 1148
{ 
#line 1149
return (a > b) ? a : b; 
#line 1150
} 
#line 1152
static inline unsigned umax(const unsigned a, const unsigned b) 
#line 1153
{ 
#line 1154
return (a > b) ? a : b; 
#line 1155
} 
#line 1157
static inline __int64 llmax(const __int64 a, const __int64 b) 
#line 1158
{ 
#line 1159
return (a > b) ? a : b; 
#line 1160
} 
#line 1162
static inline unsigned __int64 ullmax(const unsigned __int64 a, const unsigned __int64 
#line 1163
b) 
#line 1164
{ 
#line 1165
return (a > b) ? a : b; 
#line 1166
} 
#line 1169
#pragma warning(default: 4211)
#line 91 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt/device_functions.h"
extern "C" {
#line 3211 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt/device_functions.h"
static __inline int __vimax_s32_relu(const int a, const int b); 
#line 3223
static __inline unsigned __vimax_s16x2_relu(const unsigned a, const unsigned b); 
#line 3232
static __inline int __vimin_s32_relu(const int a, const int b); 
#line 3244
static __inline unsigned __vimin_s16x2_relu(const unsigned a, const unsigned b); 
#line 3253
static __inline int __vimax3_s32(const int a, const int b, const int c); 
#line 3265
static __inline unsigned __vimax3_s16x2(const unsigned a, const unsigned b, const unsigned c); 
#line 3274
static __inline unsigned __vimax3_u32(const unsigned a, const unsigned b, const unsigned c); 
#line 3286
static __inline unsigned __vimax3_u16x2(const unsigned a, const unsigned b, const unsigned c); 
#line 3295
static __inline int __vimin3_s32(const int a, const int b, const int c); 
#line 3307
static __inline unsigned __vimin3_s16x2(const unsigned a, const unsigned b, const unsigned c); 
#line 3316
static __inline unsigned __vimin3_u32(const unsigned a, const unsigned b, const unsigned c); 
#line 3328
static __inline unsigned __vimin3_u16x2(const unsigned a, const unsigned b, const unsigned c); 
#line 3337
static __inline int __vimax3_s32_relu(const int a, const int b, const int c); 
#line 3349
static __inline unsigned __vimax3_s16x2_relu(const unsigned a, const unsigned b, const unsigned c); 
#line 3358
static __inline int __vimin3_s32_relu(const int a, const int b, const int c); 
#line 3370
static __inline unsigned __vimin3_s16x2_relu(const unsigned a, const unsigned b, const unsigned c); 
#line 3379
static __inline int __viaddmax_s32(const int a, const int b, const int c); 
#line 3391
static __inline unsigned __viaddmax_s16x2(const unsigned a, const unsigned b, const unsigned c); 
#line 3400
static __inline unsigned __viaddmax_u32(const unsigned a, const unsigned b, const unsigned c); 
#line 3412
static __inline unsigned __viaddmax_u16x2(const unsigned a, const unsigned b, const unsigned c); 
#line 3421
static __inline int __viaddmin_s32(const int a, const int b, const int c); 
#line 3433
static __inline unsigned __viaddmin_s16x2(const unsigned a, const unsigned b, const unsigned c); 
#line 3442
static __inline unsigned __viaddmin_u32(const unsigned a, const unsigned b, const unsigned c); 
#line 3454
static __inline unsigned __viaddmin_u16x2(const unsigned a, const unsigned b, const unsigned c); 
#line 3464
static __inline int __viaddmax_s32_relu(const int a, const int b, const int c); 
#line 3476
static __inline unsigned __viaddmax_s16x2_relu(const unsigned a, const unsigned b, const unsigned c); 
#line 3486
static __inline int __viaddmin_s32_relu(const int a, const int b, const int c); 
#line 3498
static __inline unsigned __viaddmin_s16x2_relu(const unsigned a, const unsigned b, const unsigned c); 
#line 3507
static __inline int __vibmax_s32(const int a, const int b, bool *const pred); 
#line 3516
static __inline unsigned __vibmax_u32(const unsigned a, const unsigned b, bool *const pred); 
#line 3525
static __inline int __vibmin_s32(const int a, const int b, bool *const pred); 
#line 3534
static __inline unsigned __vibmin_u32(const unsigned a, const unsigned b, bool *const pred); 
#line 3548
static __inline unsigned __vibmax_s16x2(const unsigned a, const unsigned b, bool *const pred_hi, bool *const pred_lo); 
#line 3562
static __inline unsigned __vibmax_u16x2(const unsigned a, const unsigned b, bool *const pred_hi, bool *const pred_lo); 
#line 3576
static __inline unsigned __vibmin_s16x2(const unsigned a, const unsigned b, bool *const pred_hi, bool *const pred_lo); 
#line 3590
static __inline unsigned __vibmin_u16x2(const unsigned a, const unsigned b, bool *const pred_hi, bool *const pred_lo); 
#line 3597
}
#line 102 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\device_functions.hpp"
static __inline int __vimax_s32_relu(const int a, const int b) { 
#line 109
int ans = max(a, b); 
#line 111
return (ans > 0) ? ans : 0; 
#line 113 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\device_functions.hpp"
} 
#line 115
static __inline unsigned __vimax_s16x2_relu(const unsigned a, const unsigned b) { 
#line 123
unsigned short aU_lo = (unsigned short)(a & 65535U); 
#line 124
unsigned short aU_hi = (unsigned short)(a >> 16); 
#line 126
unsigned short bU_lo = (unsigned short)(b & 65535U); 
#line 127
unsigned short bU_hi = (unsigned short)(b >> 16); 
#line 130
short aS_lo = *((short *)(&aU_lo)); 
#line 131
short aS_hi = *((short *)(&aU_hi)); 
#line 133
short bS_lo = *((short *)(&bU_lo)); 
#line 134
short bS_hi = *((short *)(&bU_hi)); 
#line 137
short ansS_lo = (short)max(aS_lo, bS_lo); 
#line 138
short ansS_hi = (short)max(aS_hi, bS_hi); 
#line 141
if (ansS_lo < 0) { ansS_lo = (0); }  
#line 142
if (ansS_hi < 0) { ansS_hi = (0); }  
#line 145
unsigned short ansU_lo = *((unsigned short *)(&ansS_lo)); 
#line 146
unsigned short ansU_hi = *((unsigned short *)(&ansS_hi)); 
#line 149
unsigned ans = ((unsigned)ansU_lo) | (((unsigned)ansU_hi) << 16); 
#line 151
return ans; 
#line 153 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\device_functions.hpp"
} 
#line 155
static __inline int __vimin_s32_relu(const int a, const int b) { 
#line 162
int ans = min(a, b); 
#line 164
return (ans > 0) ? ans : 0; 
#line 166 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\device_functions.hpp"
} 
#line 168
static __inline unsigned __vimin_s16x2_relu(const unsigned a, const unsigned b) { 
#line 176
unsigned short aU_lo = (unsigned short)(a & 65535U); 
#line 177
unsigned short aU_hi = (unsigned short)(a >> 16); 
#line 179
unsigned short bU_lo = (unsigned short)(b & 65535U); 
#line 180
unsigned short bU_hi = (unsigned short)(b >> 16); 
#line 183
short aS_lo = *((short *)(&aU_lo)); 
#line 184
short aS_hi = *((short *)(&aU_hi)); 
#line 186
short bS_lo = *((short *)(&bU_lo)); 
#line 187
short bS_hi = *((short *)(&bU_hi)); 
#line 190
short ansS_lo = (short)min(aS_lo, bS_lo); 
#line 191
short ansS_hi = (short)min(aS_hi, bS_hi); 
#line 194
if (ansS_lo < 0) { ansS_lo = (0); }  
#line 195
if (ansS_hi < 0) { ansS_hi = (0); }  
#line 198
unsigned short ansU_lo = *((unsigned short *)(&ansS_lo)); 
#line 199
unsigned short ansU_hi = *((unsigned short *)(&ansS_hi)); 
#line 202
unsigned ans = ((unsigned)ansU_lo) | (((unsigned)ansU_hi) << 16); 
#line 204
return ans; 
#line 206 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\device_functions.hpp"
} 
#line 208
static __inline int __vimax3_s32(const int a, const int b, const int c) { 
#line 218
return max(max(a, b), c); 
#line 220 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\device_functions.hpp"
} 
#line 222
static __inline unsigned __vimax3_s16x2(const unsigned a, const unsigned b, const unsigned c) { 
#line 234
unsigned short aU_lo = (unsigned short)(a & 65535U); 
#line 235
unsigned short aU_hi = (unsigned short)(a >> 16); 
#line 237
unsigned short bU_lo = (unsigned short)(b & 65535U); 
#line 238
unsigned short bU_hi = (unsigned short)(b >> 16); 
#line 240
unsigned short cU_lo = (unsigned short)(c & 65535U); 
#line 241
unsigned short cU_hi = (unsigned short)(c >> 16); 
#line 244
short aS_lo = *((short *)(&aU_lo)); 
#line 245
short aS_hi = *((short *)(&aU_hi)); 
#line 247
short bS_lo = *((short *)(&bU_lo)); 
#line 248
short bS_hi = *((short *)(&bU_hi)); 
#line 250
short cS_lo = *((short *)(&cU_lo)); 
#line 251
short cS_hi = *((short *)(&cU_hi)); 
#line 254
short ansS_lo = (short)max(max(aS_lo, bS_lo), cS_lo); 
#line 255
short ansS_hi = (short)max(max(aS_hi, bS_hi), cS_hi); 
#line 258
unsigned short ansU_lo = *((unsigned short *)(&ansS_lo)); 
#line 259
unsigned short ansU_hi = *((unsigned short *)(&ansS_hi)); 
#line 262
unsigned ans = ((unsigned)ansU_lo) | (((unsigned)ansU_hi) << 16); 
#line 264
return ans; 
#line 266 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\device_functions.hpp"
} 
#line 268
static __inline unsigned __vimax3_u32(const unsigned a, const unsigned b, const unsigned c) { 
#line 278
return max(max(a, b), c); 
#line 280 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\device_functions.hpp"
} 
#line 282
static __inline unsigned __vimax3_u16x2(const unsigned a, const unsigned b, const unsigned c) { 
#line 293
unsigned short aU_lo = (unsigned short)(a & 65535U); 
#line 294
unsigned short aU_hi = (unsigned short)(a >> 16); 
#line 296
unsigned short bU_lo = (unsigned short)(b & 65535U); 
#line 297
unsigned short bU_hi = (unsigned short)(b >> 16); 
#line 299
unsigned short cU_lo = (unsigned short)(c & 65535U); 
#line 300
unsigned short cU_hi = (unsigned short)(c >> 16); 
#line 303
unsigned short ansU_lo = (unsigned short)max(max(aU_lo, bU_lo), cU_lo); 
#line 304
unsigned short ansU_hi = (unsigned short)max(max(aU_hi, bU_hi), cU_hi); 
#line 307
unsigned ans = ((unsigned)ansU_lo) | (((unsigned)ansU_hi) << 16); 
#line 309
return ans; 
#line 311 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\device_functions.hpp"
} 
#line 313
static __inline int __vimin3_s32(const int a, const int b, const int c) { 
#line 323
return min(min(a, b), c); 
#line 325 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\device_functions.hpp"
} 
#line 327
static __inline unsigned __vimin3_s16x2(const unsigned a, const unsigned b, const unsigned c) { 
#line 338
unsigned short aU_lo = (unsigned short)(a & 65535U); 
#line 339
unsigned short aU_hi = (unsigned short)(a >> 16); 
#line 341
unsigned short bU_lo = (unsigned short)(b & 65535U); 
#line 342
unsigned short bU_hi = (unsigned short)(b >> 16); 
#line 344
unsigned short cU_lo = (unsigned short)(c & 65535U); 
#line 345
unsigned short cU_hi = (unsigned short)(c >> 16); 
#line 348
short aS_lo = *((short *)(&aU_lo)); 
#line 349
short aS_hi = *((short *)(&aU_hi)); 
#line 351
short bS_lo = *((short *)(&bU_lo)); 
#line 352
short bS_hi = *((short *)(&bU_hi)); 
#line 354
short cS_lo = *((short *)(&cU_lo)); 
#line 355
short cS_hi = *((short *)(&cU_hi)); 
#line 358
short ansS_lo = (short)min(min(aS_lo, bS_lo), cS_lo); 
#line 359
short ansS_hi = (short)min(min(aS_hi, bS_hi), cS_hi); 
#line 362
unsigned short ansU_lo = *((unsigned short *)(&ansS_lo)); 
#line 363
unsigned short ansU_hi = *((unsigned short *)(&ansS_hi)); 
#line 366
unsigned ans = ((unsigned)ansU_lo) | (((unsigned)ansU_hi) << 16); 
#line 368
return ans; 
#line 370 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\device_functions.hpp"
} 
#line 372
static __inline unsigned __vimin3_u32(const unsigned a, const unsigned b, const unsigned c) { 
#line 382
return min(min(a, b), c); 
#line 384 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\device_functions.hpp"
} 
#line 386
static __inline unsigned __vimin3_u16x2(const unsigned a, const unsigned b, const unsigned c) { 
#line 397
unsigned short aU_lo = (unsigned short)(a & 65535U); 
#line 398
unsigned short aU_hi = (unsigned short)(a >> 16); 
#line 400
unsigned short bU_lo = (unsigned short)(b & 65535U); 
#line 401
unsigned short bU_hi = (unsigned short)(b >> 16); 
#line 403
unsigned short cU_lo = (unsigned short)(c & 65535U); 
#line 404
unsigned short cU_hi = (unsigned short)(c >> 16); 
#line 407
unsigned short ansU_lo = (unsigned short)min(min(aU_lo, bU_lo), cU_lo); 
#line 408
unsigned short ansU_hi = (unsigned short)min(min(aU_hi, bU_hi), cU_hi); 
#line 411
unsigned ans = ((unsigned)ansU_lo) | (((unsigned)ansU_hi) << 16); 
#line 413
return ans; 
#line 415 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\device_functions.hpp"
} 
#line 417
static __inline int __vimax3_s32_relu(const int a, const int b, const int c) { 
#line 427
int ans = max(max(a, b), c); 
#line 429
return (ans > 0) ? ans : 0; 
#line 431 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\device_functions.hpp"
} 
#line 433
static __inline unsigned __vimax3_s16x2_relu(const unsigned a, const unsigned b, const unsigned c) { 
#line 444
unsigned short aU_lo = (unsigned short)(a & 65535U); 
#line 445
unsigned short aU_hi = (unsigned short)(a >> 16); 
#line 447
unsigned short bU_lo = (unsigned short)(b & 65535U); 
#line 448
unsigned short bU_hi = (unsigned short)(b >> 16); 
#line 450
unsigned short cU_lo = (unsigned short)(c & 65535U); 
#line 451
unsigned short cU_hi = (unsigned short)(c >> 16); 
#line 454
short aS_lo = *((short *)(&aU_lo)); 
#line 455
short aS_hi = *((short *)(&aU_hi)); 
#line 457
short bS_lo = *((short *)(&bU_lo)); 
#line 458
short bS_hi = *((short *)(&bU_hi)); 
#line 460
short cS_lo = *((short *)(&cU_lo)); 
#line 461
short cS_hi = *((short *)(&cU_hi)); 
#line 464
short ansS_lo = (short)max(max(aS_lo, bS_lo), cS_lo); 
#line 465
short ansS_hi = (short)max(max(aS_hi, bS_hi), cS_hi); 
#line 468
if (ansS_lo < 0) { ansS_lo = (0); }  
#line 469
if (ansS_hi < 0) { ansS_hi = (0); }  
#line 472
unsigned short ansU_lo = *((unsigned short *)(&ansS_lo)); 
#line 473
unsigned short ansU_hi = *((unsigned short *)(&ansS_hi)); 
#line 476
unsigned ans = ((unsigned)ansU_lo) | (((unsigned)ansU_hi) << 16); 
#line 478
return ans; 
#line 480 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\device_functions.hpp"
} 
#line 482
static __inline int __vimin3_s32_relu(const int a, const int b, const int c) { 
#line 492
int ans = min(min(a, b), c); 
#line 494
return (ans > 0) ? ans : 0; 
#line 496 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\device_functions.hpp"
} 
#line 498
static __inline unsigned __vimin3_s16x2_relu(const unsigned a, const unsigned b, const unsigned c) { 
#line 509
unsigned short aU_lo = (unsigned short)(a & 65535U); 
#line 510
unsigned short aU_hi = (unsigned short)(a >> 16); 
#line 512
unsigned short bU_lo = (unsigned short)(b & 65535U); 
#line 513
unsigned short bU_hi = (unsigned short)(b >> 16); 
#line 515
unsigned short cU_lo = (unsigned short)(c & 65535U); 
#line 516
unsigned short cU_hi = (unsigned short)(c >> 16); 
#line 519
short aS_lo = *((short *)(&aU_lo)); 
#line 520
short aS_hi = *((short *)(&aU_hi)); 
#line 522
short bS_lo = *((short *)(&bU_lo)); 
#line 523
short bS_hi = *((short *)(&bU_hi)); 
#line 525
short cS_lo = *((short *)(&cU_lo)); 
#line 526
short cS_hi = *((short *)(&cU_hi)); 
#line 529
short ansS_lo = (short)min(min(aS_lo, bS_lo), cS_lo); 
#line 530
short ansS_hi = (short)min(min(aS_hi, bS_hi), cS_hi); 
#line 533
if (ansS_lo < 0) { ansS_lo = (0); }  
#line 534
if (ansS_hi < 0) { ansS_hi = (0); }  
#line 537
unsigned short ansU_lo = *((unsigned short *)(&ansS_lo)); 
#line 538
unsigned short ansU_hi = *((unsigned short *)(&ansS_hi)); 
#line 541
unsigned ans = ((unsigned)ansU_lo) | (((unsigned)ansU_hi) << 16); 
#line 543
return ans; 
#line 545 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\device_functions.hpp"
} 
#line 547
static __inline int __viaddmax_s32(const int a, const int b, const int c) { 
#line 557
return max(a + b, c); 
#line 559 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\device_functions.hpp"
} 
#line 561
static __inline unsigned __viaddmax_s16x2(const unsigned a, const unsigned b, const unsigned c) { 
#line 572
unsigned short aU_lo = (unsigned short)(a & 65535U); 
#line 573
unsigned short aU_hi = (unsigned short)(a >> 16); 
#line 575
unsigned short bU_lo = (unsigned short)(b & 65535U); 
#line 576
unsigned short bU_hi = (unsigned short)(b >> 16); 
#line 578
unsigned short cU_lo = (unsigned short)(c & 65535U); 
#line 579
unsigned short cU_hi = (unsigned short)(c >> 16); 
#line 582
short aS_lo = *((short *)(&aU_lo)); 
#line 583
short aS_hi = *((short *)(&aU_hi)); 
#line 585
short bS_lo = *((short *)(&bU_lo)); 
#line 586
short bS_hi = *((short *)(&bU_hi)); 
#line 588
short cS_lo = *((short *)(&cU_lo)); 
#line 589
short cS_hi = *((short *)(&cU_hi)); 
#line 592
short ansS_lo = (short)max((short)(aS_lo + bS_lo), cS_lo); 
#line 593
short ansS_hi = (short)max((short)(aS_hi + bS_hi), cS_hi); 
#line 596
unsigned short ansU_lo = *((unsigned short *)(&ansS_lo)); 
#line 597
unsigned short ansU_hi = *((unsigned short *)(&ansS_hi)); 
#line 600
unsigned ans = ((unsigned)ansU_lo) | (((unsigned)ansU_hi) << 16); 
#line 602
return ans; 
#line 604 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\device_functions.hpp"
} 
#line 606
static __inline unsigned __viaddmax_u32(const unsigned a, const unsigned b, const unsigned c) { 
#line 616
return max(a + b, c); 
#line 618 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\device_functions.hpp"
} 
#line 620
static __inline unsigned __viaddmax_u16x2(const unsigned a, const unsigned b, const unsigned c) { 
#line 631
unsigned short aU_lo = (unsigned short)(a & 65535U); 
#line 632
unsigned short aU_hi = (unsigned short)(a >> 16); 
#line 634
unsigned short bU_lo = (unsigned short)(b & 65535U); 
#line 635
unsigned short bU_hi = (unsigned short)(b >> 16); 
#line 637
unsigned short cU_lo = (unsigned short)(c & 65535U); 
#line 638
unsigned short cU_hi = (unsigned short)(c >> 16); 
#line 641
unsigned short ansU_lo = (unsigned short)max((unsigned short)(aU_lo + bU_lo), cU_lo); 
#line 642
unsigned short ansU_hi = (unsigned short)max((unsigned short)(aU_hi + bU_hi), cU_hi); 
#line 645
unsigned ans = ((unsigned)ansU_lo) | (((unsigned)ansU_hi) << 16); 
#line 647
return ans; 
#line 649 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\device_functions.hpp"
} 
#line 651
static __inline int __viaddmin_s32(const int a, const int b, const int c) { 
#line 661
return min(a + b, c); 
#line 663 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\device_functions.hpp"
} 
#line 665
static __inline unsigned __viaddmin_s16x2(const unsigned a, const unsigned b, const unsigned c) { 
#line 676
unsigned short aU_lo = (unsigned short)(a & 65535U); 
#line 677
unsigned short aU_hi = (unsigned short)(a >> 16); 
#line 679
unsigned short bU_lo = (unsigned short)(b & 65535U); 
#line 680
unsigned short bU_hi = (unsigned short)(b >> 16); 
#line 682
unsigned short cU_lo = (unsigned short)(c & 65535U); 
#line 683
unsigned short cU_hi = (unsigned short)(c >> 16); 
#line 686
short aS_lo = *((short *)(&aU_lo)); 
#line 687
short aS_hi = *((short *)(&aU_hi)); 
#line 689
short bS_lo = *((short *)(&bU_lo)); 
#line 690
short bS_hi = *((short *)(&bU_hi)); 
#line 692
short cS_lo = *((short *)(&cU_lo)); 
#line 693
short cS_hi = *((short *)(&cU_hi)); 
#line 696
short ansS_lo = (short)min((short)(aS_lo + bS_lo), cS_lo); 
#line 697
short ansS_hi = (short)min((short)(aS_hi + bS_hi), cS_hi); 
#line 700
unsigned short ansU_lo = *((unsigned short *)(&ansS_lo)); 
#line 701
unsigned short ansU_hi = *((unsigned short *)(&ansS_hi)); 
#line 704
unsigned ans = ((unsigned)ansU_lo) | (((unsigned)ansU_hi) << 16); 
#line 706
return ans; 
#line 708 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\device_functions.hpp"
} 
#line 710
static __inline unsigned __viaddmin_u32(const unsigned a, const unsigned b, const unsigned c) { 
#line 720
return min(a + b, c); 
#line 722 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\device_functions.hpp"
} 
#line 724
static __inline unsigned __viaddmin_u16x2(const unsigned a, const unsigned b, const unsigned c) { 
#line 735
unsigned short aU_lo = (unsigned short)(a & 65535U); 
#line 736
unsigned short aU_hi = (unsigned short)(a >> 16); 
#line 738
unsigned short bU_lo = (unsigned short)(b & 65535U); 
#line 739
unsigned short bU_hi = (unsigned short)(b >> 16); 
#line 741
unsigned short cU_lo = (unsigned short)(c & 65535U); 
#line 742
unsigned short cU_hi = (unsigned short)(c >> 16); 
#line 745
unsigned short ansU_lo = (unsigned short)min((unsigned short)(aU_lo + bU_lo), cU_lo); 
#line 746
unsigned short ansU_hi = (unsigned short)min((unsigned short)(aU_hi + bU_hi), cU_hi); 
#line 749
unsigned ans = ((unsigned)ansU_lo) | (((unsigned)ansU_hi) << 16); 
#line 751
return ans; 
#line 753 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\device_functions.hpp"
} 
#line 755
static __inline int __viaddmax_s32_relu(const int a, const int b, const int c) { 
#line 765
int ans = max(a + b, c); 
#line 767
return (ans > 0) ? ans : 0; 
#line 769 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\device_functions.hpp"
} 
#line 771
static __inline unsigned __viaddmax_s16x2_relu(const unsigned a, const unsigned b, const unsigned c) { 
#line 782
unsigned short aU_lo = (unsigned short)(a & 65535U); 
#line 783
unsigned short aU_hi = (unsigned short)(a >> 16); 
#line 785
unsigned short bU_lo = (unsigned short)(b & 65535U); 
#line 786
unsigned short bU_hi = (unsigned short)(b >> 16); 
#line 788
unsigned short cU_lo = (unsigned short)(c & 65535U); 
#line 789
unsigned short cU_hi = (unsigned short)(c >> 16); 
#line 792
short aS_lo = *((short *)(&aU_lo)); 
#line 793
short aS_hi = *((short *)(&aU_hi)); 
#line 795
short bS_lo = *((short *)(&bU_lo)); 
#line 796
short bS_hi = *((short *)(&bU_hi)); 
#line 798
short cS_lo = *((short *)(&cU_lo)); 
#line 799
short cS_hi = *((short *)(&cU_hi)); 
#line 802
short ansS_lo = (short)max((short)(aS_lo + bS_lo), cS_lo); 
#line 803
short ansS_hi = (short)max((short)(aS_hi + bS_hi), cS_hi); 
#line 805
if (ansS_lo < 0) { ansS_lo = (0); }  
#line 806
if (ansS_hi < 0) { ansS_hi = (0); }  
#line 809
unsigned short ansU_lo = *((unsigned short *)(&ansS_lo)); 
#line 810
unsigned short ansU_hi = *((unsigned short *)(&ansS_hi)); 
#line 813
unsigned ans = ((unsigned)ansU_lo) | (((unsigned)ansU_hi) << 16); 
#line 815
return ans; 
#line 817 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\device_functions.hpp"
} 
#line 819
static __inline int __viaddmin_s32_relu(const int a, const int b, const int c) { 
#line 829
int ans = min(a + b, c); 
#line 831
return (ans > 0) ? ans : 0; 
#line 833 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\device_functions.hpp"
} 
#line 835
static __inline unsigned __viaddmin_s16x2_relu(const unsigned a, const unsigned b, const unsigned c) { 
#line 846
unsigned short aU_lo = (unsigned short)(a & 65535U); 
#line 847
unsigned short aU_hi = (unsigned short)(a >> 16); 
#line 849
unsigned short bU_lo = (unsigned short)(b & 65535U); 
#line 850
unsigned short bU_hi = (unsigned short)(b >> 16); 
#line 852
unsigned short cU_lo = (unsigned short)(c & 65535U); 
#line 853
unsigned short cU_hi = (unsigned short)(c >> 16); 
#line 856
short aS_lo = *((short *)(&aU_lo)); 
#line 857
short aS_hi = *((short *)(&aU_hi)); 
#line 859
short bS_lo = *((short *)(&bU_lo)); 
#line 860
short bS_hi = *((short *)(&bU_hi)); 
#line 862
short cS_lo = *((short *)(&cU_lo)); 
#line 863
short cS_hi = *((short *)(&cU_hi)); 
#line 866
short ansS_lo = (short)min((short)(aS_lo + bS_lo), cS_lo); 
#line 867
short ansS_hi = (short)min((short)(aS_hi + bS_hi), cS_hi); 
#line 869
if (ansS_lo < 0) { ansS_lo = (0); }  
#line 870
if (ansS_hi < 0) { ansS_hi = (0); }  
#line 873
unsigned short ansU_lo = *((unsigned short *)(&ansS_lo)); 
#line 874
unsigned short ansU_hi = *((unsigned short *)(&ansS_hi)); 
#line 877
unsigned ans = ((unsigned)ansU_lo) | (((unsigned)ansU_hi) << 16); 
#line 879
return ans; 
#line 881 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\device_functions.hpp"
} 
#line 885
static __inline int __vibmax_s32(const int a, const int b, bool *const pred) { 
#line 899
int ans = max(a, b); 
#line 901
(*pred) = (a >= b); 
#line 902
return ans; 
#line 904 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\device_functions.hpp"
} 
#line 906
static __inline unsigned __vibmax_u32(const unsigned a, const unsigned b, bool *const pred) { 
#line 920
unsigned ans = max(a, b); 
#line 922
(*pred) = (a >= b); 
#line 923
return ans; 
#line 925 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\device_functions.hpp"
} 
#line 928
static __inline int __vibmin_s32(const int a, const int b, bool *const pred) { 
#line 942
int ans = min(a, b); 
#line 944
(*pred) = (a <= b); 
#line 945
return ans; 
#line 947 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\device_functions.hpp"
} 
#line 950
static __inline unsigned __vibmin_u32(const unsigned a, const unsigned b, bool *const pred) { 
#line 964
unsigned ans = min(a, b); 
#line 966
(*pred) = (a <= b); 
#line 967
return ans; 
#line 969 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\device_functions.hpp"
} 
#line 971
static __inline unsigned __vibmax_s16x2(const unsigned a, const unsigned b, bool *const pred_hi, bool *const pred_lo) { 
#line 993
unsigned short aU_lo = (unsigned short)(a & 65535U); 
#line 994
unsigned short aU_hi = (unsigned short)(a >> 16); 
#line 996
unsigned short bU_lo = (unsigned short)(b & 65535U); 
#line 997
unsigned short bU_hi = (unsigned short)(b >> 16); 
#line 1000
short aS_lo = *((short *)(&aU_lo)); 
#line 1001
short aS_hi = *((short *)(&aU_hi)); 
#line 1003
short bS_lo = *((short *)(&bU_lo)); 
#line 1004
short bS_hi = *((short *)(&bU_hi)); 
#line 1007
short ansS_lo = (short)max(aS_lo, bS_lo); 
#line 1008
short ansS_hi = (short)max(aS_hi, bS_hi); 
#line 1010
(*pred_hi) = (aS_hi >= bS_hi); 
#line 1011
(*pred_lo) = (aS_lo >= bS_lo); 
#line 1014
unsigned short ansU_lo = *((unsigned short *)(&ansS_lo)); 
#line 1015
unsigned short ansU_hi = *((unsigned short *)(&ansS_hi)); 
#line 1018
unsigned ans = ((unsigned)ansU_lo) | (((unsigned)ansU_hi) << 16); 
#line 1020
return ans; 
#line 1022 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\device_functions.hpp"
} 
#line 1024
static __inline unsigned __vibmax_u16x2(const unsigned a, const unsigned b, bool *const pred_hi, bool *const pred_lo) { 
#line 1046
unsigned short aU_lo = (unsigned short)(a & 65535U); 
#line 1047
unsigned short aU_hi = (unsigned short)(a >> 16); 
#line 1049
unsigned short bU_lo = (unsigned short)(b & 65535U); 
#line 1050
unsigned short bU_hi = (unsigned short)(b >> 16); 
#line 1053
unsigned short ansU_lo = (unsigned short)max(aU_lo, bU_lo); 
#line 1054
unsigned short ansU_hi = (unsigned short)max(aU_hi, bU_hi); 
#line 1056
(*pred_hi) = (aU_hi >= bU_hi); 
#line 1057
(*pred_lo) = (aU_lo >= bU_lo); 
#line 1060
unsigned ans = ((unsigned)ansU_lo) | (((unsigned)ansU_hi) << 16); 
#line 1062
return ans; 
#line 1064 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\device_functions.hpp"
} 
#line 1066
static __inline unsigned __vibmin_s16x2(const unsigned a, const unsigned b, bool *const pred_hi, bool *const pred_lo) { 
#line 1088
unsigned short aU_lo = (unsigned short)(a & 65535U); 
#line 1089
unsigned short aU_hi = (unsigned short)(a >> 16); 
#line 1091
unsigned short bU_lo = (unsigned short)(b & 65535U); 
#line 1092
unsigned short bU_hi = (unsigned short)(b >> 16); 
#line 1095
short aS_lo = *((short *)(&aU_lo)); 
#line 1096
short aS_hi = *((short *)(&aU_hi)); 
#line 1098
short bS_lo = *((short *)(&bU_lo)); 
#line 1099
short bS_hi = *((short *)(&bU_hi)); 
#line 1102
short ansS_lo = (short)min(aS_lo, bS_lo); 
#line 1103
short ansS_hi = (short)min(aS_hi, bS_hi); 
#line 1105
(*pred_hi) = (aS_hi <= bS_hi); 
#line 1106
(*pred_lo) = (aS_lo <= bS_lo); 
#line 1109
unsigned short ansU_lo = *((unsigned short *)(&ansS_lo)); 
#line 1110
unsigned short ansU_hi = *((unsigned short *)(&ansS_hi)); 
#line 1113
unsigned ans = ((unsigned)ansU_lo) | (((unsigned)ansU_hi) << 16); 
#line 1115
return ans; 
#line 1117 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\device_functions.hpp"
} 
#line 1119
static __inline unsigned __vibmin_u16x2(const unsigned a, const unsigned b, bool *const pred_hi, bool *const pred_lo) { 
#line 1141
unsigned short aU_lo = (unsigned short)(a & 65535U); 
#line 1142
unsigned short aU_hi = (unsigned short)(a >> 16); 
#line 1144
unsigned short bU_lo = (unsigned short)(b & 65535U); 
#line 1145
unsigned short bU_hi = (unsigned short)(b >> 16); 
#line 1148
unsigned short ansU_lo = (unsigned short)min(aU_lo, bU_lo); 
#line 1149
unsigned short ansU_hi = (unsigned short)min(aU_hi, bU_hi); 
#line 1151
(*pred_hi) = (aU_hi <= bU_hi); 
#line 1152
(*pred_lo) = (aU_lo <= bU_lo); 
#line 1155
unsigned ans = ((unsigned)ansU_lo) | (((unsigned)ansU_hi) << 16); 
#line 1157
return ans; 
#line 1159 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\device_functions.hpp"
} 
#line 110 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\device_atomic_functions.h"
static __inline int atomicAdd(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
#line 110
{ } 
#endif
#line 112 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\device_atomic_functions.h"
static __inline unsigned atomicAdd(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
#line 112
{ } 
#endif
#line 114 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\device_atomic_functions.h"
static __inline int atomicSub(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
#line 114
{ } 
#endif
#line 116 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\device_atomic_functions.h"
static __inline unsigned atomicSub(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
#line 116
{ } 
#endif
#line 118 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\device_atomic_functions.h"
static __inline int atomicExch(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
#line 118
{ } 
#endif
#line 120 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\device_atomic_functions.h"
static __inline unsigned atomicExch(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
#line 120
{ } 
#endif
#line 122 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\device_atomic_functions.h"
static __inline float atomicExch(float *address, float val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
#line 122
{ } 
#endif
#line 124 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\device_atomic_functions.h"
static __inline int atomicMin(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
#line 124
{ } 
#endif
#line 126 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\device_atomic_functions.h"
static __inline unsigned atomicMin(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
#line 126
{ } 
#endif
#line 128 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\device_atomic_functions.h"
static __inline int atomicMax(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
#line 128
{ } 
#endif
#line 130 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\device_atomic_functions.h"
static __inline unsigned atomicMax(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
#line 130
{ } 
#endif
#line 132 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\device_atomic_functions.h"
static __inline unsigned atomicInc(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
#line 132
{ } 
#endif
#line 134 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\device_atomic_functions.h"
static __inline unsigned atomicDec(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
#line 134
{ } 
#endif
#line 136 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\device_atomic_functions.h"
static __inline int atomicAnd(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
#line 136
{ } 
#endif
#line 138 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\device_atomic_functions.h"
static __inline unsigned atomicAnd(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
#line 138
{ } 
#endif
#line 140 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\device_atomic_functions.h"
static __inline int atomicOr(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
#line 140
{ } 
#endif
#line 142 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\device_atomic_functions.h"
static __inline unsigned atomicOr(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
#line 142
{ } 
#endif
#line 144 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\device_atomic_functions.h"
static __inline int atomicXor(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
#line 144
{ } 
#endif
#line 146 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\device_atomic_functions.h"
static __inline unsigned atomicXor(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
#line 146
{ } 
#endif
#line 148 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\device_atomic_functions.h"
static __inline int atomicCAS(int *address, int compare, int val) {int volatile ___ = 1;(void)address;(void)compare;(void)val;::exit(___);}
#if 0
#line 148
{ } 
#endif
#line 150 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\device_atomic_functions.h"
static __inline unsigned atomicCAS(unsigned *address, unsigned compare, unsigned val) {int volatile ___ = 1;(void)address;(void)compare;(void)val;::exit(___);}
#if 0
#line 150
{ } 
#endif
#line 177 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\device_atomic_functions.h"
extern "C" {
#line 186 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\device_atomic_functions.h"
}
#line 195
static __inline unsigned __int64 atomicAdd(unsigned __int64 *address, unsigned __int64 val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
#line 195
{ } 
#endif
#line 197 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\device_atomic_functions.h"
static __inline unsigned __int64 atomicExch(unsigned __int64 *address, unsigned __int64 val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
#line 197
{ } 
#endif
#line 199 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\device_atomic_functions.h"
static __inline unsigned __int64 atomicCAS(unsigned __int64 *address, unsigned __int64 compare, unsigned __int64 val) {int volatile ___ = 1;(void)address;(void)compare;(void)val;::exit(___);}
#if 0
#line 199
{ } 
#endif
#line 201 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\device_atomic_functions.h"
__declspec(deprecated("__any() is deprecated in favor of __any_sync() and may be removed in a future release (Use -Wno-deprecated-declarations to suppr" "ess this warning).")) static __inline bool any(bool cond) {int volatile ___ = 1;(void)cond;::exit(___);}
#if 0
#line 201
{ } 
#endif
#line 203 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\device_atomic_functions.h"
__declspec(deprecated("__all() is deprecated in favor of __all_sync() and may be removed in a future release (Use -Wno-deprecated-declarations to suppr" "ess this warning).")) static __inline bool all(bool cond) {int volatile ___ = 1;(void)cond;::exit(___);}
#if 0
#line 203
{ } 
#endif
#line 87 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\device_double_functions.h"
extern "C" {
#line 1139
}
#line 1147
static __inline double fma(double a, double b, double c, cudaRoundMode mode); 
#line 1149
static __inline double dmul(double a, double b, cudaRoundMode mode = cudaRoundNearest); 
#line 1151
static __inline double dadd(double a, double b, cudaRoundMode mode = cudaRoundNearest); 
#line 1153
static __inline double dsub(double a, double b, cudaRoundMode mode = cudaRoundNearest); 
#line 1155
static __inline int double2int(double a, cudaRoundMode mode = cudaRoundZero); 
#line 1157
static __inline unsigned double2uint(double a, cudaRoundMode mode = cudaRoundZero); 
#line 1159
static __inline __int64 double2ll(double a, cudaRoundMode mode = cudaRoundZero); 
#line 1161
static __inline unsigned __int64 double2ull(double a, cudaRoundMode mode = cudaRoundZero); 
#line 1163
static __inline double ll2double(__int64 a, cudaRoundMode mode = cudaRoundNearest); 
#line 1165
static __inline double ull2double(unsigned __int64 a, cudaRoundMode mode = cudaRoundNearest); 
#line 1167
static __inline double int2double(int a, cudaRoundMode mode = cudaRoundNearest); 
#line 1169
static __inline double uint2double(unsigned a, cudaRoundMode mode = cudaRoundNearest); 
#line 1171
static __inline double float2double(float a, cudaRoundMode mode = cudaRoundNearest); 
#line 93 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\device_double_functions.hpp"
static __inline double fma(double a, double b, double c, cudaRoundMode mode) {int volatile ___ = 1;(void)a;(void)b;(void)c;(void)mode;::exit(___);}
#if 0
#line 94
{ 
#line 95
return (mode == (cudaRoundZero)) ? __fma_rz(a, b, c) : ((mode == (cudaRoundPosInf)) ? __fma_ru(a, b, c) : ((mode == (cudaRoundMinInf)) ? __fma_rd(a, b, c) : __fma_rn(a, b, c))); 
#line 99
} 
#endif
#line 101 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\device_double_functions.hpp"
static __inline double dmul(double a, double b, cudaRoundMode mode) {int volatile ___ = 1;(void)a;(void)b;(void)mode;::exit(___);}
#if 0
#line 102
{ 
#line 103
return (mode == (cudaRoundZero)) ? __dmul_rz(a, b) : ((mode == (cudaRoundPosInf)) ? __dmul_ru(a, b) : ((mode == (cudaRoundMinInf)) ? __dmul_rd(a, b) : __dmul_rn(a, b))); 
#line 107
} 
#endif
#line 109 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\device_double_functions.hpp"
static __inline double dadd(double a, double b, cudaRoundMode mode) {int volatile ___ = 1;(void)a;(void)b;(void)mode;::exit(___);}
#if 0
#line 110
{ 
#line 111
return (mode == (cudaRoundZero)) ? __dadd_rz(a, b) : ((mode == (cudaRoundPosInf)) ? __dadd_ru(a, b) : ((mode == (cudaRoundMinInf)) ? __dadd_rd(a, b) : __dadd_rn(a, b))); 
#line 115
} 
#endif
#line 117 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\device_double_functions.hpp"
static __inline double dsub(double a, double b, cudaRoundMode mode) {int volatile ___ = 1;(void)a;(void)b;(void)mode;::exit(___);}
#if 0
#line 118
{ 
#line 119
return (mode == (cudaRoundZero)) ? __dsub_rz(a, b) : ((mode == (cudaRoundPosInf)) ? __dsub_ru(a, b) : ((mode == (cudaRoundMinInf)) ? __dsub_rd(a, b) : __dsub_rn(a, b))); 
#line 123
} 
#endif
#line 125 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\device_double_functions.hpp"
static __inline int double2int(double a, cudaRoundMode mode) {int volatile ___ = 1;(void)a;(void)mode;::exit(___);}
#if 0
#line 126
{ 
#line 127
return (mode == (cudaRoundNearest)) ? __double2int_rn(a) : ((mode == (cudaRoundPosInf)) ? __double2int_ru(a) : ((mode == (cudaRoundMinInf)) ? __double2int_rd(a) : __double2int_rz(a))); 
#line 131
} 
#endif
#line 133 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\device_double_functions.hpp"
static __inline unsigned double2uint(double a, cudaRoundMode mode) {int volatile ___ = 1;(void)a;(void)mode;::exit(___);}
#if 0
#line 134
{ 
#line 135
return (mode == (cudaRoundNearest)) ? __double2uint_rn(a) : ((mode == (cudaRoundPosInf)) ? __double2uint_ru(a) : ((mode == (cudaRoundMinInf)) ? __double2uint_rd(a) : __double2uint_rz(a))); 
#line 139
} 
#endif
#line 141 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\device_double_functions.hpp"
static __inline __int64 double2ll(double a, cudaRoundMode mode) {int volatile ___ = 1;(void)a;(void)mode;::exit(___);}
#if 0
#line 142
{ 
#line 143
return (mode == (cudaRoundNearest)) ? __double2ll_rn(a) : ((mode == (cudaRoundPosInf)) ? __double2ll_ru(a) : ((mode == (cudaRoundMinInf)) ? __double2ll_rd(a) : __double2ll_rz(a))); 
#line 147
} 
#endif
#line 149 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\device_double_functions.hpp"
static __inline unsigned __int64 double2ull(double a, cudaRoundMode mode) {int volatile ___ = 1;(void)a;(void)mode;::exit(___);}
#if 0
#line 150
{ 
#line 151
return (mode == (cudaRoundNearest)) ? __double2ull_rn(a) : ((mode == (cudaRoundPosInf)) ? __double2ull_ru(a) : ((mode == (cudaRoundMinInf)) ? __double2ull_rd(a) : __double2ull_rz(a))); 
#line 155
} 
#endif
#line 157 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\device_double_functions.hpp"
static __inline double ll2double(__int64 a, cudaRoundMode mode) {int volatile ___ = 1;(void)a;(void)mode;::exit(___);}
#if 0
#line 158
{ 
#line 159
return (mode == (cudaRoundZero)) ? __ll2double_rz(a) : ((mode == (cudaRoundPosInf)) ? __ll2double_ru(a) : ((mode == (cudaRoundMinInf)) ? __ll2double_rd(a) : __ll2double_rn(a))); 
#line 163
} 
#endif
#line 165 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\device_double_functions.hpp"
static __inline double ull2double(unsigned __int64 a, cudaRoundMode mode) {int volatile ___ = 1;(void)a;(void)mode;::exit(___);}
#if 0
#line 166
{ 
#line 167
return (mode == (cudaRoundZero)) ? __ull2double_rz(a) : ((mode == (cudaRoundPosInf)) ? __ull2double_ru(a) : ((mode == (cudaRoundMinInf)) ? __ull2double_rd(a) : __ull2double_rn(a))); 
#line 171
} 
#endif
#line 173 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\device_double_functions.hpp"
static __inline double int2double(int a, cudaRoundMode mode) {int volatile ___ = 1;(void)a;(void)mode;::exit(___);}
#if 0
#line 174
{ 
#line 175
return (double)a; 
#line 176
} 
#endif
#line 178 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\device_double_functions.hpp"
static __inline double uint2double(unsigned a, cudaRoundMode mode) {int volatile ___ = 1;(void)a;(void)mode;::exit(___);}
#if 0
#line 179
{ 
#line 180
return (double)a; 
#line 181
} 
#endif
#line 183 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\device_double_functions.hpp"
static __inline double float2double(float a, cudaRoundMode mode) {int volatile ___ = 1;(void)a;(void)mode;::exit(___);}
#if 0
#line 184
{ 
#line 185
return (double)a; 
#line 186
} 
#endif
#line 103 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_20_atomic_functions.h"
static __inline float atomicAdd(float *address, float val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
#line 103
{ } 
#endif
#line 110 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_atomic_functions.h"
static __inline __int64 atomicMin(__int64 *address, __int64 val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
#line 110
{ } 
#endif
#line 112 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_atomic_functions.h"
static __inline __int64 atomicMax(__int64 *address, __int64 val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
#line 112
{ } 
#endif
#line 114 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_atomic_functions.h"
static __inline __int64 atomicAnd(__int64 *address, __int64 val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
#line 114
{ } 
#endif
#line 116 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_atomic_functions.h"
static __inline __int64 atomicOr(__int64 *address, __int64 val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
#line 116
{ } 
#endif
#line 118 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_atomic_functions.h"
static __inline __int64 atomicXor(__int64 *address, __int64 val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
#line 118
{ } 
#endif
#line 120 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_atomic_functions.h"
static __inline unsigned __int64 atomicMin(unsigned __int64 *address, unsigned __int64 val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
#line 120
{ } 
#endif
#line 122 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_atomic_functions.h"
static __inline unsigned __int64 atomicMax(unsigned __int64 *address, unsigned __int64 val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
#line 122
{ } 
#endif
#line 124 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_atomic_functions.h"
static __inline unsigned __int64 atomicAnd(unsigned __int64 *address, unsigned __int64 val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
#line 124
{ } 
#endif
#line 126 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_atomic_functions.h"
static __inline unsigned __int64 atomicOr(unsigned __int64 *address, unsigned __int64 val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
#line 126
{ } 
#endif
#line 128 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_atomic_functions.h"
static __inline unsigned __int64 atomicXor(unsigned __int64 *address, unsigned __int64 val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
#line 128
{ } 
#endif
#line 307 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_60_atomic_functions.h"
static __inline double atomicAdd(double *address, double val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
#line 307
{ } 
#endif
#line 310 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_60_atomic_functions.h"
static __inline int atomicAdd_block(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
#line 310
{ } 
#endif
#line 313 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_60_atomic_functions.h"
static __inline int atomicAdd_system(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
#line 313
{ } 
#endif
#line 316 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_60_atomic_functions.h"
static __inline unsigned atomicAdd_block(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
#line 316
{ } 
#endif
#line 319 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_60_atomic_functions.h"
static __inline unsigned atomicAdd_system(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
#line 319
{ } 
#endif
#line 322 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_60_atomic_functions.h"
static __inline unsigned __int64 atomicAdd_block(unsigned __int64 *address, unsigned __int64 val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
#line 322
{ } 
#endif
#line 325 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_60_atomic_functions.h"
static __inline unsigned __int64 atomicAdd_system(unsigned __int64 *address, unsigned __int64 val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
#line 325
{ } 
#endif
#line 328 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_60_atomic_functions.h"
static __inline float atomicAdd_block(float *address, float val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
#line 328
{ } 
#endif
#line 331 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_60_atomic_functions.h"
static __inline float atomicAdd_system(float *address, float val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
#line 331
{ } 
#endif
#line 334 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_60_atomic_functions.h"
static __inline double atomicAdd_block(double *address, double val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
#line 334
{ } 
#endif
#line 337 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_60_atomic_functions.h"
static __inline double atomicAdd_system(double *address, double val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
#line 337
{ } 
#endif
#line 340 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_60_atomic_functions.h"
static __inline int atomicSub_block(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
#line 340
{ } 
#endif
#line 343 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_60_atomic_functions.h"
static __inline int atomicSub_system(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
#line 343
{ } 
#endif
#line 346 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_60_atomic_functions.h"
static __inline unsigned atomicSub_block(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
#line 346
{ } 
#endif
#line 349 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_60_atomic_functions.h"
static __inline unsigned atomicSub_system(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
#line 349
{ } 
#endif
#line 352 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_60_atomic_functions.h"
static __inline int atomicExch_block(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
#line 352
{ } 
#endif
#line 355 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_60_atomic_functions.h"
static __inline int atomicExch_system(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
#line 355
{ } 
#endif
#line 358 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_60_atomic_functions.h"
static __inline unsigned atomicExch_block(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
#line 358
{ } 
#endif
#line 361 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_60_atomic_functions.h"
static __inline unsigned atomicExch_system(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
#line 361
{ } 
#endif
#line 364 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_60_atomic_functions.h"
static __inline unsigned __int64 atomicExch_block(unsigned __int64 *address, unsigned __int64 val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
#line 364
{ } 
#endif
#line 367 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_60_atomic_functions.h"
static __inline unsigned __int64 atomicExch_system(unsigned __int64 *address, unsigned __int64 val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
#line 367
{ } 
#endif
#line 370 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_60_atomic_functions.h"
static __inline float atomicExch_block(float *address, float val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
#line 370
{ } 
#endif
#line 373 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_60_atomic_functions.h"
static __inline float atomicExch_system(float *address, float val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
#line 373
{ } 
#endif
#line 376 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_60_atomic_functions.h"
static __inline int atomicMin_block(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
#line 376
{ } 
#endif
#line 379 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_60_atomic_functions.h"
static __inline int atomicMin_system(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
#line 379
{ } 
#endif
#line 382 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_60_atomic_functions.h"
static __inline __int64 atomicMin_block(__int64 *address, __int64 val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
#line 382
{ } 
#endif
#line 385 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_60_atomic_functions.h"
static __inline __int64 atomicMin_system(__int64 *address, __int64 val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
#line 385
{ } 
#endif
#line 388 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_60_atomic_functions.h"
static __inline unsigned atomicMin_block(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
#line 388
{ } 
#endif
#line 391 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_60_atomic_functions.h"
static __inline unsigned atomicMin_system(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
#line 391
{ } 
#endif
#line 394 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_60_atomic_functions.h"
static __inline unsigned __int64 atomicMin_block(unsigned __int64 *address, unsigned __int64 val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
#line 394
{ } 
#endif
#line 397 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_60_atomic_functions.h"
static __inline unsigned __int64 atomicMin_system(unsigned __int64 *address, unsigned __int64 val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
#line 397
{ } 
#endif
#line 400 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_60_atomic_functions.h"
static __inline int atomicMax_block(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
#line 400
{ } 
#endif
#line 403 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_60_atomic_functions.h"
static __inline int atomicMax_system(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
#line 403
{ } 
#endif
#line 406 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_60_atomic_functions.h"
static __inline __int64 atomicMax_block(__int64 *address, __int64 val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
#line 406
{ } 
#endif
#line 409 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_60_atomic_functions.h"
static __inline __int64 atomicMax_system(__int64 *address, __int64 val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
#line 409
{ } 
#endif
#line 412 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_60_atomic_functions.h"
static __inline unsigned atomicMax_block(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
#line 412
{ } 
#endif
#line 415 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_60_atomic_functions.h"
static __inline unsigned atomicMax_system(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
#line 415
{ } 
#endif
#line 418 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_60_atomic_functions.h"
static __inline unsigned __int64 atomicMax_block(unsigned __int64 *address, unsigned __int64 val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
#line 418
{ } 
#endif
#line 421 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_60_atomic_functions.h"
static __inline unsigned __int64 atomicMax_system(unsigned __int64 *address, unsigned __int64 val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
#line 421
{ } 
#endif
#line 424 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_60_atomic_functions.h"
static __inline unsigned atomicInc_block(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
#line 424
{ } 
#endif
#line 427 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_60_atomic_functions.h"
static __inline unsigned atomicInc_system(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
#line 427
{ } 
#endif
#line 430 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_60_atomic_functions.h"
static __inline unsigned atomicDec_block(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
#line 430
{ } 
#endif
#line 433 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_60_atomic_functions.h"
static __inline unsigned atomicDec_system(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
#line 433
{ } 
#endif
#line 436 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_60_atomic_functions.h"
static __inline int atomicCAS_block(int *address, int compare, int val) {int volatile ___ = 1;(void)address;(void)compare;(void)val;::exit(___);}
#if 0
#line 436
{ } 
#endif
#line 439 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_60_atomic_functions.h"
static __inline int atomicCAS_system(int *address, int compare, int val) {int volatile ___ = 1;(void)address;(void)compare;(void)val;::exit(___);}
#if 0
#line 439
{ } 
#endif
#line 442 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_60_atomic_functions.h"
static __inline unsigned atomicCAS_block(unsigned *address, unsigned compare, unsigned 
#line 443
val) {int volatile ___ = 1;(void)address;(void)compare;(void)val;::exit(___);}
#if 0
#line 443
{ } 
#endif
#line 446 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_60_atomic_functions.h"
static __inline unsigned atomicCAS_system(unsigned *address, unsigned compare, unsigned 
#line 447
val) {int volatile ___ = 1;(void)address;(void)compare;(void)val;::exit(___);}
#if 0
#line 447
{ } 
#endif
#line 450 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_60_atomic_functions.h"
static __inline unsigned __int64 atomicCAS_block(unsigned __int64 *address, unsigned __int64 
#line 451
compare, unsigned __int64 
#line 452
val) {int volatile ___ = 1;(void)address;(void)compare;(void)val;::exit(___);}
#if 0
#line 452
{ } 
#endif
#line 455 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_60_atomic_functions.h"
static __inline unsigned __int64 atomicCAS_system(unsigned __int64 *address, unsigned __int64 
#line 456
compare, unsigned __int64 
#line 457
val) {int volatile ___ = 1;(void)address;(void)compare;(void)val;::exit(___);}
#if 0
#line 457
{ } 
#endif
#line 460 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_60_atomic_functions.h"
static __inline int atomicAnd_block(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
#line 460
{ } 
#endif
#line 463 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_60_atomic_functions.h"
static __inline int atomicAnd_system(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
#line 463
{ } 
#endif
#line 466 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_60_atomic_functions.h"
static __inline __int64 atomicAnd_block(__int64 *address, __int64 val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
#line 466
{ } 
#endif
#line 469 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_60_atomic_functions.h"
static __inline __int64 atomicAnd_system(__int64 *address, __int64 val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
#line 469
{ } 
#endif
#line 472 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_60_atomic_functions.h"
static __inline unsigned atomicAnd_block(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
#line 472
{ } 
#endif
#line 475 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_60_atomic_functions.h"
static __inline unsigned atomicAnd_system(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
#line 475
{ } 
#endif
#line 478 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_60_atomic_functions.h"
static __inline unsigned __int64 atomicAnd_block(unsigned __int64 *address, unsigned __int64 val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
#line 478
{ } 
#endif
#line 481 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_60_atomic_functions.h"
static __inline unsigned __int64 atomicAnd_system(unsigned __int64 *address, unsigned __int64 val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
#line 481
{ } 
#endif
#line 484 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_60_atomic_functions.h"
static __inline int atomicOr_block(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
#line 484
{ } 
#endif
#line 487 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_60_atomic_functions.h"
static __inline int atomicOr_system(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
#line 487
{ } 
#endif
#line 490 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_60_atomic_functions.h"
static __inline __int64 atomicOr_block(__int64 *address, __int64 val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
#line 490
{ } 
#endif
#line 493 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_60_atomic_functions.h"
static __inline __int64 atomicOr_system(__int64 *address, __int64 val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
#line 493
{ } 
#endif
#line 496 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_60_atomic_functions.h"
static __inline unsigned atomicOr_block(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
#line 496
{ } 
#endif
#line 499 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_60_atomic_functions.h"
static __inline unsigned atomicOr_system(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
#line 499
{ } 
#endif
#line 502 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_60_atomic_functions.h"
static __inline unsigned __int64 atomicOr_block(unsigned __int64 *address, unsigned __int64 val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
#line 502
{ } 
#endif
#line 505 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_60_atomic_functions.h"
static __inline unsigned __int64 atomicOr_system(unsigned __int64 *address, unsigned __int64 val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
#line 505
{ } 
#endif
#line 508 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_60_atomic_functions.h"
static __inline int atomicXor_block(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
#line 508
{ } 
#endif
#line 511 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_60_atomic_functions.h"
static __inline int atomicXor_system(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
#line 511
{ } 
#endif
#line 514 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_60_atomic_functions.h"
static __inline __int64 atomicXor_block(__int64 *address, __int64 val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
#line 514
{ } 
#endif
#line 517 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_60_atomic_functions.h"
static __inline __int64 atomicXor_system(__int64 *address, __int64 val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
#line 517
{ } 
#endif
#line 520 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_60_atomic_functions.h"
static __inline unsigned atomicXor_block(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
#line 520
{ } 
#endif
#line 523 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_60_atomic_functions.h"
static __inline unsigned atomicXor_system(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
#line 523
{ } 
#endif
#line 526 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_60_atomic_functions.h"
static __inline unsigned __int64 atomicXor_block(unsigned __int64 *address, unsigned __int64 val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
#line 526
{ } 
#endif
#line 529 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_60_atomic_functions.h"
static __inline unsigned __int64 atomicXor_system(unsigned __int64 *address, unsigned __int64 val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
#line 529
{ } 
#endif
#line 97 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_20_intrinsics.h"
extern "C" {
#line 1510
}
#line 1522 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_20_intrinsics.h"
__declspec(deprecated("__ballot() is deprecated in favor of __ballot_sync() and may be removed in a future release (Use -Wno-deprecated-declarations to" " suppress this warning).")) static __inline unsigned ballot(bool pred) {int volatile ___ = 1;(void)pred;::exit(___);}
#if 0
#line 1522
{ } 
#endif
#line 1524 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_20_intrinsics.h"
static __inline int syncthreads_count(bool pred) {int volatile ___ = 1;(void)pred;::exit(___);}
#if 0
#line 1524
{ } 
#endif
#line 1526 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_20_intrinsics.h"
static __inline bool syncthreads_and(bool pred) {int volatile ___ = 1;(void)pred;::exit(___);}
#if 0
#line 1526
{ } 
#endif
#line 1528 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_20_intrinsics.h"
static __inline bool syncthreads_or(bool pred) {int volatile ___ = 1;(void)pred;::exit(___);}
#if 0
#line 1528
{ } 
#endif
#line 1533 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_20_intrinsics.h"
static __inline unsigned __isGlobal(const void *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 1533
{ } 
#endif
#line 1534 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_20_intrinsics.h"
static __inline unsigned __isShared(const void *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 1534
{ } 
#endif
#line 1535 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_20_intrinsics.h"
static __inline unsigned __isConstant(const void *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 1535
{ } 
#endif
#line 1536 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_20_intrinsics.h"
static __inline unsigned __isLocal(const void *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 1536
{ } 
#endif
#line 1538 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_20_intrinsics.h"
static __inline unsigned __isGridConstant(const void *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 1538
{ } 
#endif
#line 1540 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_20_intrinsics.h"
static __inline size_t __cvta_generic_to_global(const void *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 1540
{ } 
#endif
#line 1541 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_20_intrinsics.h"
static __inline size_t __cvta_generic_to_shared(const void *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 1541
{ } 
#endif
#line 1542 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_20_intrinsics.h"
static __inline size_t __cvta_generic_to_constant(const void *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 1542
{ } 
#endif
#line 1543 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_20_intrinsics.h"
static __inline size_t __cvta_generic_to_local(const void *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 1543
{ } 
#endif
#line 1545 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_20_intrinsics.h"
static __inline size_t __cvta_generic_to_grid_constant(const void *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 1545
{ } 
#endif
#line 1548 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_20_intrinsics.h"
static __inline void *__cvta_global_to_generic(size_t rawbits) {int volatile ___ = 1;(void)rawbits;::exit(___);}
#if 0
#line 1548
{ } 
#endif
#line 1549 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_20_intrinsics.h"
static __inline void *__cvta_shared_to_generic(size_t rawbits) {int volatile ___ = 1;(void)rawbits;::exit(___);}
#if 0
#line 1549
{ } 
#endif
#line 1550 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_20_intrinsics.h"
static __inline void *__cvta_constant_to_generic(size_t rawbits) {int volatile ___ = 1;(void)rawbits;::exit(___);}
#if 0
#line 1550
{ } 
#endif
#line 1551 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_20_intrinsics.h"
static __inline void *__cvta_local_to_generic(size_t rawbits) {int volatile ___ = 1;(void)rawbits;::exit(___);}
#if 0
#line 1551
{ } 
#endif
#line 1553 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_20_intrinsics.h"
static __inline void *__cvta_grid_constant_to_generic(size_t rawbits) {int volatile ___ = 1;(void)rawbits;::exit(___);}
#if 0
#line 1553
{ } 
#endif
#line 108 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_30_intrinsics.h"
static __inline unsigned __fns(unsigned mask, unsigned base, int offset) {int volatile ___ = 1;(void)mask;(void)base;(void)offset;::exit(___);}
#if 0
#line 108
{ } 
#endif
#line 109 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_30_intrinsics.h"
static __inline void __barrier_sync(unsigned id) {int volatile ___ = 1;(void)id;::exit(___);}
#if 0
#line 109
{ } 
#endif
#line 110 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_30_intrinsics.h"
static __inline void __barrier_sync_count(unsigned id, unsigned cnt) {int volatile ___ = 1;(void)id;(void)cnt;::exit(___);}
#if 0
#line 110
{ } 
#endif
#line 111 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_30_intrinsics.h"
static __inline void __syncwarp(unsigned mask = 4294967295U) {int volatile ___ = 1;(void)mask;::exit(___);}
#if 0
#line 111
{ } 
#endif
#line 112 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_30_intrinsics.h"
static __inline int __all_sync(unsigned mask, int pred) {int volatile ___ = 1;(void)mask;(void)pred;::exit(___);}
#if 0
#line 112
{ } 
#endif
#line 113 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_30_intrinsics.h"
static __inline int __any_sync(unsigned mask, int pred) {int volatile ___ = 1;(void)mask;(void)pred;::exit(___);}
#if 0
#line 113
{ } 
#endif
#line 114 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_30_intrinsics.h"
static __inline int __uni_sync(unsigned mask, int pred) {int volatile ___ = 1;(void)mask;(void)pred;::exit(___);}
#if 0
#line 114
{ } 
#endif
#line 115 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_30_intrinsics.h"
static __inline unsigned __ballot_sync(unsigned mask, int pred) {int volatile ___ = 1;(void)mask;(void)pred;::exit(___);}
#if 0
#line 115
{ } 
#endif
#line 116 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_30_intrinsics.h"
static __inline unsigned __activemask() {int volatile ___ = 1;::exit(___);}
#if 0
#line 116
{ } 
#endif
#line 125 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_30_intrinsics.h"
__declspec(deprecated("__shfl() is deprecated in favor of __shfl_sync() and may be removed in a future release (Use -Wno-deprecated-declarations to sup" "press this warning).")) static __inline int __shfl(int var, int srcLane, int width = 32) {int volatile ___ = 1;(void)var;(void)srcLane;(void)width;::exit(___);}
#if 0
#line 125
{ } 
#endif
#line 126 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_30_intrinsics.h"
__declspec(deprecated("__shfl() is deprecated in favor of __shfl_sync() and may be removed in a future release (Use -Wno-deprecated-declarations to sup" "press this warning).")) static __inline unsigned __shfl(unsigned var, int srcLane, int width = 32) {int volatile ___ = 1;(void)var;(void)srcLane;(void)width;::exit(___);}
#if 0
#line 126
{ } 
#endif
#line 127 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_30_intrinsics.h"
__declspec(deprecated("__shfl_up() is deprecated in favor of __shfl_up_sync() and may be removed in a future release (Use -Wno-deprecated-declarations " "to suppress this warning).")) static __inline int __shfl_up(int var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
#line 127
{ } 
#endif
#line 128 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_30_intrinsics.h"
__declspec(deprecated("__shfl_up() is deprecated in favor of __shfl_up_sync() and may be removed in a future release (Use -Wno-deprecated-declarations " "to suppress this warning).")) static __inline unsigned __shfl_up(unsigned var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
#line 128
{ } 
#endif
#line 129 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_30_intrinsics.h"
__declspec(deprecated("__shfl_down() is deprecated in favor of __shfl_down_sync() and may be removed in a future release (Use -Wno-deprecated-declarati" "ons to suppress this warning).")) static __inline int __shfl_down(int var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
#line 129
{ } 
#endif
#line 130 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_30_intrinsics.h"
__declspec(deprecated("__shfl_down() is deprecated in favor of __shfl_down_sync() and may be removed in a future release (Use -Wno-deprecated-declarati" "ons to suppress this warning).")) static __inline unsigned __shfl_down(unsigned var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
#line 130
{ } 
#endif
#line 131 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_30_intrinsics.h"
__declspec(deprecated("__shfl_xor() is deprecated in favor of __shfl_xor_sync() and may be removed in a future release (Use -Wno-deprecated-declaration" "s to suppress this warning).")) static __inline int __shfl_xor(int var, int laneMask, int width = 32) {int volatile ___ = 1;(void)var;(void)laneMask;(void)width;::exit(___);}
#if 0
#line 131
{ } 
#endif
#line 132 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_30_intrinsics.h"
__declspec(deprecated("__shfl_xor() is deprecated in favor of __shfl_xor_sync() and may be removed in a future release (Use -Wno-deprecated-declaration" "s to suppress this warning).")) static __inline unsigned __shfl_xor(unsigned var, int laneMask, int width = 32) {int volatile ___ = 1;(void)var;(void)laneMask;(void)width;::exit(___);}
#if 0
#line 132
{ } 
#endif
#line 133 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_30_intrinsics.h"
__declspec(deprecated("__shfl() is deprecated in favor of __shfl_sync() and may be removed in a future release (Use -Wno-deprecated-declarations to sup" "press this warning).")) static __inline float __shfl(float var, int srcLane, int width = 32) {int volatile ___ = 1;(void)var;(void)srcLane;(void)width;::exit(___);}
#if 0
#line 133
{ } 
#endif
#line 134 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_30_intrinsics.h"
__declspec(deprecated("__shfl_up() is deprecated in favor of __shfl_up_sync() and may be removed in a future release (Use -Wno-deprecated-declarations " "to suppress this warning).")) static __inline float __shfl_up(float var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
#line 134
{ } 
#endif
#line 135 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_30_intrinsics.h"
__declspec(deprecated("__shfl_down() is deprecated in favor of __shfl_down_sync() and may be removed in a future release (Use -Wno-deprecated-declarati" "ons to suppress this warning).")) static __inline float __shfl_down(float var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
#line 135
{ } 
#endif
#line 136 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_30_intrinsics.h"
__declspec(deprecated("__shfl_xor() is deprecated in favor of __shfl_xor_sync() and may be removed in a future release (Use -Wno-deprecated-declaration" "s to suppress this warning).")) static __inline float __shfl_xor(float var, int laneMask, int width = 32) {int volatile ___ = 1;(void)var;(void)laneMask;(void)width;::exit(___);}
#if 0
#line 136
{ } 
#endif
#line 139 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_30_intrinsics.h"
static __inline int __shfl_sync(unsigned mask, int var, int srcLane, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)srcLane;(void)width;::exit(___);}
#if 0
#line 139
{ } 
#endif
#line 140 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_30_intrinsics.h"
static __inline unsigned __shfl_sync(unsigned mask, unsigned var, int srcLane, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)srcLane;(void)width;::exit(___);}
#if 0
#line 140
{ } 
#endif
#line 141 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_30_intrinsics.h"
static __inline int __shfl_up_sync(unsigned mask, int var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
#line 141
{ } 
#endif
#line 142 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_30_intrinsics.h"
static __inline unsigned __shfl_up_sync(unsigned mask, unsigned var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
#line 142
{ } 
#endif
#line 143 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_30_intrinsics.h"
static __inline int __shfl_down_sync(unsigned mask, int var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
#line 143
{ } 
#endif
#line 144 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_30_intrinsics.h"
static __inline unsigned __shfl_down_sync(unsigned mask, unsigned var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
#line 144
{ } 
#endif
#line 145 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_30_intrinsics.h"
static __inline int __shfl_xor_sync(unsigned mask, int var, int laneMask, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)laneMask;(void)width;::exit(___);}
#if 0
#line 145
{ } 
#endif
#line 146 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_30_intrinsics.h"
static __inline unsigned __shfl_xor_sync(unsigned mask, unsigned var, int laneMask, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)laneMask;(void)width;::exit(___);}
#if 0
#line 146
{ } 
#endif
#line 147 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_30_intrinsics.h"
static __inline float __shfl_sync(unsigned mask, float var, int srcLane, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)srcLane;(void)width;::exit(___);}
#if 0
#line 147
{ } 
#endif
#line 148 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_30_intrinsics.h"
static __inline float __shfl_up_sync(unsigned mask, float var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
#line 148
{ } 
#endif
#line 149 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_30_intrinsics.h"
static __inline float __shfl_down_sync(unsigned mask, float var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
#line 149
{ } 
#endif
#line 150 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_30_intrinsics.h"
static __inline float __shfl_xor_sync(unsigned mask, float var, int laneMask, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)laneMask;(void)width;::exit(___);}
#if 0
#line 150
{ } 
#endif
#line 154 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_30_intrinsics.h"
__declspec(deprecated("__shfl() is deprecated in favor of __shfl_sync() and may be removed in a future release (Use -Wno-deprecated-declarations to sup" "press this warning).")) static __inline unsigned __int64 __shfl(unsigned __int64 var, int srcLane, int width = 32) {int volatile ___ = 1;(void)var;(void)srcLane;(void)width;::exit(___);}
#if 0
#line 154
{ } 
#endif
#line 155 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_30_intrinsics.h"
__declspec(deprecated("__shfl() is deprecated in favor of __shfl_sync() and may be removed in a future release (Use -Wno-deprecated-declarations to sup" "press this warning).")) static __inline __int64 __shfl(__int64 var, int srcLane, int width = 32) {int volatile ___ = 1;(void)var;(void)srcLane;(void)width;::exit(___);}
#if 0
#line 155
{ } 
#endif
#line 156 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_30_intrinsics.h"
__declspec(deprecated("__shfl_up() is deprecated in favor of __shfl_up_sync() and may be removed in a future release (Use -Wno-deprecated-declarations " "to suppress this warning).")) static __inline __int64 __shfl_up(__int64 var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
#line 156
{ } 
#endif
#line 157 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_30_intrinsics.h"
__declspec(deprecated("__shfl_up() is deprecated in favor of __shfl_up_sync() and may be removed in a future release (Use -Wno-deprecated-declarations " "to suppress this warning).")) static __inline unsigned __int64 __shfl_up(unsigned __int64 var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
#line 157
{ } 
#endif
#line 158 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_30_intrinsics.h"
__declspec(deprecated("__shfl_down() is deprecated in favor of __shfl_down_sync() and may be removed in a future release (Use -Wno-deprecated-declarati" "ons to suppress this warning).")) static __inline __int64 __shfl_down(__int64 var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
#line 158
{ } 
#endif
#line 159 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_30_intrinsics.h"
__declspec(deprecated("__shfl_down() is deprecated in favor of __shfl_down_sync() and may be removed in a future release (Use -Wno-deprecated-declarati" "ons to suppress this warning).")) static __inline unsigned __int64 __shfl_down(unsigned __int64 var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
#line 159
{ } 
#endif
#line 160 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_30_intrinsics.h"
__declspec(deprecated("__shfl_xor() is deprecated in favor of __shfl_xor_sync() and may be removed in a future release (Use -Wno-deprecated-declaration" "s to suppress this warning).")) static __inline __int64 __shfl_xor(__int64 var, int laneMask, int width = 32) {int volatile ___ = 1;(void)var;(void)laneMask;(void)width;::exit(___);}
#if 0
#line 160
{ } 
#endif
#line 161 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_30_intrinsics.h"
__declspec(deprecated("__shfl_xor() is deprecated in favor of __shfl_xor_sync() and may be removed in a future release (Use -Wno-deprecated-declaration" "s to suppress this warning).")) static __inline unsigned __int64 __shfl_xor(unsigned __int64 var, int laneMask, int width = 32) {int volatile ___ = 1;(void)var;(void)laneMask;(void)width;::exit(___);}
#if 0
#line 161
{ } 
#endif
#line 162 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_30_intrinsics.h"
__declspec(deprecated("__shfl() is deprecated in favor of __shfl_sync() and may be removed in a future release (Use -Wno-deprecated-declarations to sup" "press this warning).")) static __inline double __shfl(double var, int srcLane, int width = 32) {int volatile ___ = 1;(void)var;(void)srcLane;(void)width;::exit(___);}
#if 0
#line 162
{ } 
#endif
#line 163 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_30_intrinsics.h"
__declspec(deprecated("__shfl_up() is deprecated in favor of __shfl_up_sync() and may be removed in a future release (Use -Wno-deprecated-declarations " "to suppress this warning).")) static __inline double __shfl_up(double var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
#line 163
{ } 
#endif
#line 164 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_30_intrinsics.h"
__declspec(deprecated("__shfl_down() is deprecated in favor of __shfl_down_sync() and may be removed in a future release (Use -Wno-deprecated-declarati" "ons to suppress this warning).")) static __inline double __shfl_down(double var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
#line 164
{ } 
#endif
#line 165 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_30_intrinsics.h"
__declspec(deprecated("__shfl_xor() is deprecated in favor of __shfl_xor_sync() and may be removed in a future release (Use -Wno-deprecated-declaration" "s to suppress this warning).")) static __inline double __shfl_xor(double var, int laneMask, int width = 32) {int volatile ___ = 1;(void)var;(void)laneMask;(void)width;::exit(___);}
#if 0
#line 165
{ } 
#endif
#line 168 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_30_intrinsics.h"
static __inline __int64 __shfl_sync(unsigned mask, __int64 var, int srcLane, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)srcLane;(void)width;::exit(___);}
#if 0
#line 168
{ } 
#endif
#line 169 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_30_intrinsics.h"
static __inline unsigned __int64 __shfl_sync(unsigned mask, unsigned __int64 var, int srcLane, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)srcLane;(void)width;::exit(___);}
#if 0
#line 169
{ } 
#endif
#line 170 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_30_intrinsics.h"
static __inline __int64 __shfl_up_sync(unsigned mask, __int64 var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
#line 170
{ } 
#endif
#line 171 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_30_intrinsics.h"
static __inline unsigned __int64 __shfl_up_sync(unsigned mask, unsigned __int64 var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
#line 171
{ } 
#endif
#line 172 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_30_intrinsics.h"
static __inline __int64 __shfl_down_sync(unsigned mask, __int64 var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
#line 172
{ } 
#endif
#line 173 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_30_intrinsics.h"
static __inline unsigned __int64 __shfl_down_sync(unsigned mask, unsigned __int64 var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
#line 173
{ } 
#endif
#line 174 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_30_intrinsics.h"
static __inline __int64 __shfl_xor_sync(unsigned mask, __int64 var, int laneMask, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)laneMask;(void)width;::exit(___);}
#if 0
#line 174
{ } 
#endif
#line 175 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_30_intrinsics.h"
static __inline unsigned __int64 __shfl_xor_sync(unsigned mask, unsigned __int64 var, int laneMask, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)laneMask;(void)width;::exit(___);}
#if 0
#line 175
{ } 
#endif
#line 176 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_30_intrinsics.h"
static __inline double __shfl_sync(unsigned mask, double var, int srcLane, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)srcLane;(void)width;::exit(___);}
#if 0
#line 176
{ } 
#endif
#line 177 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_30_intrinsics.h"
static __inline double __shfl_up_sync(unsigned mask, double var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
#line 177
{ } 
#endif
#line 178 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_30_intrinsics.h"
static __inline double __shfl_down_sync(unsigned mask, double var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
#line 178
{ } 
#endif
#line 179 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_30_intrinsics.h"
static __inline double __shfl_xor_sync(unsigned mask, double var, int laneMask, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)laneMask;(void)width;::exit(___);}
#if 0
#line 179
{ } 
#endif
#line 183 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_30_intrinsics.h"
__declspec(deprecated("__shfl() is deprecated in favor of __shfl_sync() and may be removed in a future release (Use -Wno-deprecated-declarations to sup" "press this warning).")) static __inline long __shfl(long var, int srcLane, int width = 32) {int volatile ___ = 1;(void)var;(void)srcLane;(void)width;::exit(___);}
#if 0
#line 183
{ } 
#endif
#line 184 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_30_intrinsics.h"
__declspec(deprecated("__shfl() is deprecated in favor of __shfl_sync() and may be removed in a future release (Use -Wno-deprecated-declarations to sup" "press this warning).")) static __inline unsigned long __shfl(unsigned long var, int srcLane, int width = 32) {int volatile ___ = 1;(void)var;(void)srcLane;(void)width;::exit(___);}
#if 0
#line 184
{ } 
#endif
#line 185 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_30_intrinsics.h"
__declspec(deprecated("__shfl_up() is deprecated in favor of __shfl_up_sync() and may be removed in a future release (Use -Wno-deprecated-declarations " "to suppress this warning).")) static __inline long __shfl_up(long var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
#line 185
{ } 
#endif
#line 186 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_30_intrinsics.h"
__declspec(deprecated("__shfl_up() is deprecated in favor of __shfl_up_sync() and may be removed in a future release (Use -Wno-deprecated-declarations " "to suppress this warning).")) static __inline unsigned long __shfl_up(unsigned long var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
#line 186
{ } 
#endif
#line 187 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_30_intrinsics.h"
__declspec(deprecated("__shfl_down() is deprecated in favor of __shfl_down_sync() and may be removed in a future release (Use -Wno-deprecated-declarati" "ons to suppress this warning).")) static __inline long __shfl_down(long var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
#line 187
{ } 
#endif
#line 188 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_30_intrinsics.h"
__declspec(deprecated("__shfl_down() is deprecated in favor of __shfl_down_sync() and may be removed in a future release (Use -Wno-deprecated-declarati" "ons to suppress this warning).")) static __inline unsigned long __shfl_down(unsigned long var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
#line 188
{ } 
#endif
#line 189 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_30_intrinsics.h"
__declspec(deprecated("__shfl_xor() is deprecated in favor of __shfl_xor_sync() and may be removed in a future release (Use -Wno-deprecated-declaration" "s to suppress this warning).")) static __inline long __shfl_xor(long var, int laneMask, int width = 32) {int volatile ___ = 1;(void)var;(void)laneMask;(void)width;::exit(___);}
#if 0
#line 189
{ } 
#endif
#line 190 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_30_intrinsics.h"
__declspec(deprecated("__shfl_xor() is deprecated in favor of __shfl_xor_sync() and may be removed in a future release (Use -Wno-deprecated-declaration" "s to suppress this warning).")) static __inline unsigned long __shfl_xor(unsigned long var, int laneMask, int width = 32) {int volatile ___ = 1;(void)var;(void)laneMask;(void)width;::exit(___);}
#if 0
#line 190
{ } 
#endif
#line 193 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_30_intrinsics.h"
static __inline long __shfl_sync(unsigned mask, long var, int srcLane, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)srcLane;(void)width;::exit(___);}
#if 0
#line 193
{ } 
#endif
#line 194 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_30_intrinsics.h"
static __inline unsigned long __shfl_sync(unsigned mask, unsigned long var, int srcLane, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)srcLane;(void)width;::exit(___);}
#if 0
#line 194
{ } 
#endif
#line 195 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_30_intrinsics.h"
static __inline long __shfl_up_sync(unsigned mask, long var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
#line 195
{ } 
#endif
#line 196 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_30_intrinsics.h"
static __inline unsigned long __shfl_up_sync(unsigned mask, unsigned long var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
#line 196
{ } 
#endif
#line 197 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_30_intrinsics.h"
static __inline long __shfl_down_sync(unsigned mask, long var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
#line 197
{ } 
#endif
#line 198 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_30_intrinsics.h"
static __inline unsigned long __shfl_down_sync(unsigned mask, unsigned long var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
#line 198
{ } 
#endif
#line 199 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_30_intrinsics.h"
static __inline long __shfl_xor_sync(unsigned mask, long var, int laneMask, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)laneMask;(void)width;::exit(___);}
#if 0
#line 199
{ } 
#endif
#line 200 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_30_intrinsics.h"
static __inline unsigned long __shfl_xor_sync(unsigned mask, unsigned long var, int laneMask, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)laneMask;(void)width;::exit(___);}
#if 0
#line 200
{ } 
#endif
#line 87 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_intrinsics.h"
static __inline long __ldg(const long *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 87
{ } 
#endif
#line 88 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_intrinsics.h"
static __inline unsigned long __ldg(const unsigned long *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 88
{ } 
#endif
#line 90 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_intrinsics.h"
static __inline char __ldg(const char *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 90
{ } 
#endif
#line 91 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_intrinsics.h"
static __inline signed char __ldg(const signed char *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 91
{ } 
#endif
#line 92 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_intrinsics.h"
static __inline short __ldg(const short *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 92
{ } 
#endif
#line 93 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_intrinsics.h"
static __inline int __ldg(const int *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 93
{ } 
#endif
#line 94 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_intrinsics.h"
static __inline __int64 __ldg(const __int64 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 94
{ } 
#endif
#line 95 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_intrinsics.h"
static __inline char2 __ldg(const char2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 95
{ } 
#endif
#line 96 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_intrinsics.h"
static __inline char4 __ldg(const char4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 96
{ } 
#endif
#line 97 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_intrinsics.h"
static __inline short2 __ldg(const short2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 97
{ } 
#endif
#line 98 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_intrinsics.h"
static __inline short4 __ldg(const short4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 98
{ } 
#endif
#line 99 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_intrinsics.h"
static __inline int2 __ldg(const int2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 99
{ } 
#endif
#line 100 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_intrinsics.h"
static __inline int4 __ldg(const int4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 100
{ } 
#endif
#line 101 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_intrinsics.h"
static __inline longlong2 __ldg(const longlong2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 101
{ } 
#endif
#line 103 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_intrinsics.h"
static __inline unsigned char __ldg(const unsigned char *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 103
{ } 
#endif
#line 104 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_intrinsics.h"
static __inline unsigned short __ldg(const unsigned short *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 104
{ } 
#endif
#line 105 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_intrinsics.h"
static __inline unsigned __ldg(const unsigned *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 105
{ } 
#endif
#line 106 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_intrinsics.h"
static __inline unsigned __int64 __ldg(const unsigned __int64 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 106
{ } 
#endif
#line 107 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_intrinsics.h"
static __inline uchar2 __ldg(const uchar2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 107
{ } 
#endif
#line 108 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_intrinsics.h"
static __inline uchar4 __ldg(const uchar4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 108
{ } 
#endif
#line 109 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_intrinsics.h"
static __inline ushort2 __ldg(const ushort2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 109
{ } 
#endif
#line 110 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_intrinsics.h"
static __inline ushort4 __ldg(const ushort4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 110
{ } 
#endif
#line 111 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_intrinsics.h"
static __inline uint2 __ldg(const uint2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 111
{ } 
#endif
#line 112 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_intrinsics.h"
static __inline uint4 __ldg(const uint4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 112
{ } 
#endif
#line 113 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_intrinsics.h"
static __inline ulonglong2 __ldg(const ulonglong2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 113
{ } 
#endif
#line 115 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_intrinsics.h"
static __inline float __ldg(const float *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 115
{ } 
#endif
#line 116 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_intrinsics.h"
static __inline double __ldg(const double *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 116
{ } 
#endif
#line 117 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_intrinsics.h"
static __inline float2 __ldg(const float2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 117
{ } 
#endif
#line 118 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_intrinsics.h"
static __inline float4 __ldg(const float4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 118
{ } 
#endif
#line 119 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_intrinsics.h"
static __inline double2 __ldg(const double2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 119
{ } 
#endif
#line 123 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_intrinsics.h"
static __inline long __ldcg(const long *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 123
{ } 
#endif
#line 124 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_intrinsics.h"
static __inline unsigned long __ldcg(const unsigned long *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 124
{ } 
#endif
#line 126 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_intrinsics.h"
static __inline char __ldcg(const char *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 126
{ } 
#endif
#line 127 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_intrinsics.h"
static __inline signed char __ldcg(const signed char *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 127
{ } 
#endif
#line 128 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_intrinsics.h"
static __inline short __ldcg(const short *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 128
{ } 
#endif
#line 129 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_intrinsics.h"
static __inline int __ldcg(const int *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 129
{ } 
#endif
#line 130 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_intrinsics.h"
static __inline __int64 __ldcg(const __int64 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 130
{ } 
#endif
#line 131 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_intrinsics.h"
static __inline char2 __ldcg(const char2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 131
{ } 
#endif
#line 132 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_intrinsics.h"
static __inline char4 __ldcg(const char4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 132
{ } 
#endif
#line 133 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_intrinsics.h"
static __inline short2 __ldcg(const short2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 133
{ } 
#endif
#line 134 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_intrinsics.h"
static __inline short4 __ldcg(const short4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 134
{ } 
#endif
#line 135 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_intrinsics.h"
static __inline int2 __ldcg(const int2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 135
{ } 
#endif
#line 136 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_intrinsics.h"
static __inline int4 __ldcg(const int4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 136
{ } 
#endif
#line 137 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_intrinsics.h"
static __inline longlong2 __ldcg(const longlong2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 137
{ } 
#endif
#line 139 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_intrinsics.h"
static __inline unsigned char __ldcg(const unsigned char *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 139
{ } 
#endif
#line 140 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_intrinsics.h"
static __inline unsigned short __ldcg(const unsigned short *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 140
{ } 
#endif
#line 141 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_intrinsics.h"
static __inline unsigned __ldcg(const unsigned *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 141
{ } 
#endif
#line 142 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_intrinsics.h"
static __inline unsigned __int64 __ldcg(const unsigned __int64 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 142
{ } 
#endif
#line 143 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_intrinsics.h"
static __inline uchar2 __ldcg(const uchar2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 143
{ } 
#endif
#line 144 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_intrinsics.h"
static __inline uchar4 __ldcg(const uchar4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 144
{ } 
#endif
#line 145 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_intrinsics.h"
static __inline ushort2 __ldcg(const ushort2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 145
{ } 
#endif
#line 146 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_intrinsics.h"
static __inline ushort4 __ldcg(const ushort4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 146
{ } 
#endif
#line 147 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_intrinsics.h"
static __inline uint2 __ldcg(const uint2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 147
{ } 
#endif
#line 148 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_intrinsics.h"
static __inline uint4 __ldcg(const uint4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 148
{ } 
#endif
#line 149 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_intrinsics.h"
static __inline ulonglong2 __ldcg(const ulonglong2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 149
{ } 
#endif
#line 151 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_intrinsics.h"
static __inline float __ldcg(const float *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 151
{ } 
#endif
#line 152 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_intrinsics.h"
static __inline double __ldcg(const double *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 152
{ } 
#endif
#line 153 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_intrinsics.h"
static __inline float2 __ldcg(const float2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 153
{ } 
#endif
#line 154 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_intrinsics.h"
static __inline float4 __ldcg(const float4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 154
{ } 
#endif
#line 155 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_intrinsics.h"
static __inline double2 __ldcg(const double2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 155
{ } 
#endif
#line 159 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_intrinsics.h"
static __inline long __ldca(const long *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 159
{ } 
#endif
#line 160 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_intrinsics.h"
static __inline unsigned long __ldca(const unsigned long *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 160
{ } 
#endif
#line 162 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_intrinsics.h"
static __inline char __ldca(const char *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 162
{ } 
#endif
#line 163 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_intrinsics.h"
static __inline signed char __ldca(const signed char *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 163
{ } 
#endif
#line 164 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_intrinsics.h"
static __inline short __ldca(const short *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 164
{ } 
#endif
#line 165 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_intrinsics.h"
static __inline int __ldca(const int *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 165
{ } 
#endif
#line 166 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_intrinsics.h"
static __inline __int64 __ldca(const __int64 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 166
{ } 
#endif
#line 167 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_intrinsics.h"
static __inline char2 __ldca(const char2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 167
{ } 
#endif
#line 168 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_intrinsics.h"
static __inline char4 __ldca(const char4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 168
{ } 
#endif
#line 169 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_intrinsics.h"
static __inline short2 __ldca(const short2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 169
{ } 
#endif
#line 170 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_intrinsics.h"
static __inline short4 __ldca(const short4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 170
{ } 
#endif
#line 171 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_intrinsics.h"
static __inline int2 __ldca(const int2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 171
{ } 
#endif
#line 172 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_intrinsics.h"
static __inline int4 __ldca(const int4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 172
{ } 
#endif
#line 173 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_intrinsics.h"
static __inline longlong2 __ldca(const longlong2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 173
{ } 
#endif
#line 175 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_intrinsics.h"
static __inline unsigned char __ldca(const unsigned char *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 175
{ } 
#endif
#line 176 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_intrinsics.h"
static __inline unsigned short __ldca(const unsigned short *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 176
{ } 
#endif
#line 177 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_intrinsics.h"
static __inline unsigned __ldca(const unsigned *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 177
{ } 
#endif
#line 178 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_intrinsics.h"
static __inline unsigned __int64 __ldca(const unsigned __int64 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 178
{ } 
#endif
#line 179 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_intrinsics.h"
static __inline uchar2 __ldca(const uchar2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 179
{ } 
#endif
#line 180 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_intrinsics.h"
static __inline uchar4 __ldca(const uchar4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 180
{ } 
#endif
#line 181 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_intrinsics.h"
static __inline ushort2 __ldca(const ushort2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 181
{ } 
#endif
#line 182 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_intrinsics.h"
static __inline ushort4 __ldca(const ushort4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 182
{ } 
#endif
#line 183 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_intrinsics.h"
static __inline uint2 __ldca(const uint2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 183
{ } 
#endif
#line 184 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_intrinsics.h"
static __inline uint4 __ldca(const uint4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 184
{ } 
#endif
#line 185 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_intrinsics.h"
static __inline ulonglong2 __ldca(const ulonglong2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 185
{ } 
#endif
#line 187 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_intrinsics.h"
static __inline float __ldca(const float *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 187
{ } 
#endif
#line 188 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_intrinsics.h"
static __inline double __ldca(const double *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 188
{ } 
#endif
#line 189 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_intrinsics.h"
static __inline float2 __ldca(const float2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 189
{ } 
#endif
#line 190 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_intrinsics.h"
static __inline float4 __ldca(const float4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 190
{ } 
#endif
#line 191 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_intrinsics.h"
static __inline double2 __ldca(const double2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 191
{ } 
#endif
#line 195 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_intrinsics.h"
static __inline long __ldcs(const long *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 195
{ } 
#endif
#line 196 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_intrinsics.h"
static __inline unsigned long __ldcs(const unsigned long *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 196
{ } 
#endif
#line 198 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_intrinsics.h"
static __inline char __ldcs(const char *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 198
{ } 
#endif
#line 199 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_intrinsics.h"
static __inline signed char __ldcs(const signed char *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 199
{ } 
#endif
#line 200 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_intrinsics.h"
static __inline short __ldcs(const short *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 200
{ } 
#endif
#line 201 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_intrinsics.h"
static __inline int __ldcs(const int *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 201
{ } 
#endif
#line 202 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_intrinsics.h"
static __inline __int64 __ldcs(const __int64 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 202
{ } 
#endif
#line 203 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_intrinsics.h"
static __inline char2 __ldcs(const char2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 203
{ } 
#endif
#line 204 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_intrinsics.h"
static __inline char4 __ldcs(const char4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 204
{ } 
#endif
#line 205 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_intrinsics.h"
static __inline short2 __ldcs(const short2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 205
{ } 
#endif
#line 206 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_intrinsics.h"
static __inline short4 __ldcs(const short4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 206
{ } 
#endif
#line 207 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_intrinsics.h"
static __inline int2 __ldcs(const int2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 207
{ } 
#endif
#line 208 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_intrinsics.h"
static __inline int4 __ldcs(const int4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 208
{ } 
#endif
#line 209 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_intrinsics.h"
static __inline longlong2 __ldcs(const longlong2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 209
{ } 
#endif
#line 211 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_intrinsics.h"
static __inline unsigned char __ldcs(const unsigned char *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 211
{ } 
#endif
#line 212 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_intrinsics.h"
static __inline unsigned short __ldcs(const unsigned short *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 212
{ } 
#endif
#line 213 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_intrinsics.h"
static __inline unsigned __ldcs(const unsigned *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 213
{ } 
#endif
#line 214 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_intrinsics.h"
static __inline unsigned __int64 __ldcs(const unsigned __int64 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 214
{ } 
#endif
#line 215 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_intrinsics.h"
static __inline uchar2 __ldcs(const uchar2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 215
{ } 
#endif
#line 216 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_intrinsics.h"
static __inline uchar4 __ldcs(const uchar4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 216
{ } 
#endif
#line 217 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_intrinsics.h"
static __inline ushort2 __ldcs(const ushort2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 217
{ } 
#endif
#line 218 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_intrinsics.h"
static __inline ushort4 __ldcs(const ushort4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 218
{ } 
#endif
#line 219 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_intrinsics.h"
static __inline uint2 __ldcs(const uint2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 219
{ } 
#endif
#line 220 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_intrinsics.h"
static __inline uint4 __ldcs(const uint4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 220
{ } 
#endif
#line 221 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_intrinsics.h"
static __inline ulonglong2 __ldcs(const ulonglong2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 221
{ } 
#endif
#line 223 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_intrinsics.h"
static __inline float __ldcs(const float *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 223
{ } 
#endif
#line 224 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_intrinsics.h"
static __inline double __ldcs(const double *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 224
{ } 
#endif
#line 225 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_intrinsics.h"
static __inline float2 __ldcs(const float2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 225
{ } 
#endif
#line 226 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_intrinsics.h"
static __inline float4 __ldcs(const float4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 226
{ } 
#endif
#line 227 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_intrinsics.h"
static __inline double2 __ldcs(const double2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 227
{ } 
#endif
#line 231 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_intrinsics.h"
static __inline long __ldlu(const long *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 231
{ } 
#endif
#line 232 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_intrinsics.h"
static __inline unsigned long __ldlu(const unsigned long *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 232
{ } 
#endif
#line 234 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_intrinsics.h"
static __inline char __ldlu(const char *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 234
{ } 
#endif
#line 235 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_intrinsics.h"
static __inline signed char __ldlu(const signed char *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 235
{ } 
#endif
#line 236 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_intrinsics.h"
static __inline short __ldlu(const short *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 236
{ } 
#endif
#line 237 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_intrinsics.h"
static __inline int __ldlu(const int *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 237
{ } 
#endif
#line 238 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_intrinsics.h"
static __inline __int64 __ldlu(const __int64 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 238
{ } 
#endif
#line 239 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_intrinsics.h"
static __inline char2 __ldlu(const char2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 239
{ } 
#endif
#line 240 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_intrinsics.h"
static __inline char4 __ldlu(const char4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 240
{ } 
#endif
#line 241 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_intrinsics.h"
static __inline short2 __ldlu(const short2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 241
{ } 
#endif
#line 242 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_intrinsics.h"
static __inline short4 __ldlu(const short4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 242
{ } 
#endif
#line 243 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_intrinsics.h"
static __inline int2 __ldlu(const int2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 243
{ } 
#endif
#line 244 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_intrinsics.h"
static __inline int4 __ldlu(const int4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 244
{ } 
#endif
#line 245 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_intrinsics.h"
static __inline longlong2 __ldlu(const longlong2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 245
{ } 
#endif
#line 247 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_intrinsics.h"
static __inline unsigned char __ldlu(const unsigned char *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 247
{ } 
#endif
#line 248 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_intrinsics.h"
static __inline unsigned short __ldlu(const unsigned short *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 248
{ } 
#endif
#line 249 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_intrinsics.h"
static __inline unsigned __ldlu(const unsigned *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 249
{ } 
#endif
#line 250 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_intrinsics.h"
static __inline unsigned __int64 __ldlu(const unsigned __int64 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 250
{ } 
#endif
#line 251 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_intrinsics.h"
static __inline uchar2 __ldlu(const uchar2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 251
{ } 
#endif
#line 252 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_intrinsics.h"
static __inline uchar4 __ldlu(const uchar4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 252
{ } 
#endif
#line 253 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_intrinsics.h"
static __inline ushort2 __ldlu(const ushort2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 253
{ } 
#endif
#line 254 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_intrinsics.h"
static __inline ushort4 __ldlu(const ushort4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 254
{ } 
#endif
#line 255 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_intrinsics.h"
static __inline uint2 __ldlu(const uint2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 255
{ } 
#endif
#line 256 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_intrinsics.h"
static __inline uint4 __ldlu(const uint4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 256
{ } 
#endif
#line 257 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_intrinsics.h"
static __inline ulonglong2 __ldlu(const ulonglong2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 257
{ } 
#endif
#line 259 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_intrinsics.h"
static __inline float __ldlu(const float *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 259
{ } 
#endif
#line 260 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_intrinsics.h"
static __inline double __ldlu(const double *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 260
{ } 
#endif
#line 261 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_intrinsics.h"
static __inline float2 __ldlu(const float2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 261
{ } 
#endif
#line 262 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_intrinsics.h"
static __inline float4 __ldlu(const float4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 262
{ } 
#endif
#line 263 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_intrinsics.h"
static __inline double2 __ldlu(const double2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 263
{ } 
#endif
#line 267 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_intrinsics.h"
static __inline long __ldcv(const long *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 267
{ } 
#endif
#line 268 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_intrinsics.h"
static __inline unsigned long __ldcv(const unsigned long *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 268
{ } 
#endif
#line 270 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_intrinsics.h"
static __inline char __ldcv(const char *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 270
{ } 
#endif
#line 271 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_intrinsics.h"
static __inline signed char __ldcv(const signed char *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 271
{ } 
#endif
#line 272 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_intrinsics.h"
static __inline short __ldcv(const short *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 272
{ } 
#endif
#line 273 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_intrinsics.h"
static __inline int __ldcv(const int *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 273
{ } 
#endif
#line 274 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_intrinsics.h"
static __inline __int64 __ldcv(const __int64 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 274
{ } 
#endif
#line 275 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_intrinsics.h"
static __inline char2 __ldcv(const char2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 275
{ } 
#endif
#line 276 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_intrinsics.h"
static __inline char4 __ldcv(const char4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 276
{ } 
#endif
#line 277 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_intrinsics.h"
static __inline short2 __ldcv(const short2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 277
{ } 
#endif
#line 278 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_intrinsics.h"
static __inline short4 __ldcv(const short4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 278
{ } 
#endif
#line 279 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_intrinsics.h"
static __inline int2 __ldcv(const int2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 279
{ } 
#endif
#line 280 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_intrinsics.h"
static __inline int4 __ldcv(const int4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 280
{ } 
#endif
#line 281 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_intrinsics.h"
static __inline longlong2 __ldcv(const longlong2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 281
{ } 
#endif
#line 283 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_intrinsics.h"
static __inline unsigned char __ldcv(const unsigned char *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 283
{ } 
#endif
#line 284 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_intrinsics.h"
static __inline unsigned short __ldcv(const unsigned short *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 284
{ } 
#endif
#line 285 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_intrinsics.h"
static __inline unsigned __ldcv(const unsigned *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 285
{ } 
#endif
#line 286 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_intrinsics.h"
static __inline unsigned __int64 __ldcv(const unsigned __int64 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 286
{ } 
#endif
#line 287 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_intrinsics.h"
static __inline uchar2 __ldcv(const uchar2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 287
{ } 
#endif
#line 288 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_intrinsics.h"
static __inline uchar4 __ldcv(const uchar4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 288
{ } 
#endif
#line 289 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_intrinsics.h"
static __inline ushort2 __ldcv(const ushort2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 289
{ } 
#endif
#line 290 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_intrinsics.h"
static __inline ushort4 __ldcv(const ushort4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 290
{ } 
#endif
#line 291 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_intrinsics.h"
static __inline uint2 __ldcv(const uint2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 291
{ } 
#endif
#line 292 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_intrinsics.h"
static __inline uint4 __ldcv(const uint4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 292
{ } 
#endif
#line 293 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_intrinsics.h"
static __inline ulonglong2 __ldcv(const ulonglong2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 293
{ } 
#endif
#line 295 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_intrinsics.h"
static __inline float __ldcv(const float *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 295
{ } 
#endif
#line 296 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_intrinsics.h"
static __inline double __ldcv(const double *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 296
{ } 
#endif
#line 297 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_intrinsics.h"
static __inline float2 __ldcv(const float2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 297
{ } 
#endif
#line 298 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_intrinsics.h"
static __inline float4 __ldcv(const float4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 298
{ } 
#endif
#line 299 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_intrinsics.h"
static __inline double2 __ldcv(const double2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 299
{ } 
#endif
#line 303 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_intrinsics.h"
static __inline void __stwb(long *ptr, long value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
#line 303
{ } 
#endif
#line 304 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_intrinsics.h"
static __inline void __stwb(unsigned long *ptr, unsigned long value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
#line 304
{ } 
#endif
#line 306 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_intrinsics.h"
static __inline void __stwb(char *ptr, char value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
#line 306
{ } 
#endif
#line 307 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_intrinsics.h"
static __inline void __stwb(signed char *ptr, signed char value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
#line 307
{ } 
#endif
#line 308 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_intrinsics.h"
static __inline void __stwb(short *ptr, short value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
#line 308
{ } 
#endif
#line 309 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_intrinsics.h"
static __inline void __stwb(int *ptr, int value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
#line 309
{ } 
#endif
#line 310 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_intrinsics.h"
static __inline void __stwb(__int64 *ptr, __int64 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
#line 310
{ } 
#endif
#line 311 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_intrinsics.h"
static __inline void __stwb(char2 *ptr, char2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
#line 311
{ } 
#endif
#line 312 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_intrinsics.h"
static __inline void __stwb(char4 *ptr, char4 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
#line 312
{ } 
#endif
#line 313 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_intrinsics.h"
static __inline void __stwb(short2 *ptr, short2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
#line 313
{ } 
#endif
#line 314 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_intrinsics.h"
static __inline void __stwb(short4 *ptr, short4 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
#line 314
{ } 
#endif
#line 315 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_intrinsics.h"
static __inline void __stwb(int2 *ptr, int2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
#line 315
{ } 
#endif
#line 316 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_intrinsics.h"
static __inline void __stwb(int4 *ptr, int4 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
#line 316
{ } 
#endif
#line 317 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_intrinsics.h"
static __inline void __stwb(longlong2 *ptr, longlong2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
#line 317
{ } 
#endif
#line 319 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_intrinsics.h"
static __inline void __stwb(unsigned char *ptr, unsigned char value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
#line 319
{ } 
#endif
#line 320 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_intrinsics.h"
static __inline void __stwb(unsigned short *ptr, unsigned short value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
#line 320
{ } 
#endif
#line 321 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_intrinsics.h"
static __inline void __stwb(unsigned *ptr, unsigned value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
#line 321
{ } 
#endif
#line 322 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_intrinsics.h"
static __inline void __stwb(unsigned __int64 *ptr, unsigned __int64 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
#line 322
{ } 
#endif
#line 323 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_intrinsics.h"
static __inline void __stwb(uchar2 *ptr, uchar2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
#line 323
{ } 
#endif
#line 324 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_intrinsics.h"
static __inline void __stwb(uchar4 *ptr, uchar4 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
#line 324
{ } 
#endif
#line 325 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_intrinsics.h"
static __inline void __stwb(ushort2 *ptr, ushort2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
#line 325
{ } 
#endif
#line 326 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_intrinsics.h"
static __inline void __stwb(ushort4 *ptr, ushort4 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
#line 326
{ } 
#endif
#line 327 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_intrinsics.h"
static __inline void __stwb(uint2 *ptr, uint2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
#line 327
{ } 
#endif
#line 328 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_intrinsics.h"
static __inline void __stwb(uint4 *ptr, uint4 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
#line 328
{ } 
#endif
#line 329 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_intrinsics.h"
static __inline void __stwb(ulonglong2 *ptr, ulonglong2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
#line 329
{ } 
#endif
#line 331 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_intrinsics.h"
static __inline void __stwb(float *ptr, float value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
#line 331
{ } 
#endif
#line 332 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_intrinsics.h"
static __inline void __stwb(double *ptr, double value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
#line 332
{ } 
#endif
#line 333 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_intrinsics.h"
static __inline void __stwb(float2 *ptr, float2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
#line 333
{ } 
#endif
#line 334 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_intrinsics.h"
static __inline void __stwb(float4 *ptr, float4 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
#line 334
{ } 
#endif
#line 335 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_intrinsics.h"
static __inline void __stwb(double2 *ptr, double2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
#line 335
{ } 
#endif
#line 339 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_intrinsics.h"
static __inline void __stcg(long *ptr, long value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
#line 339
{ } 
#endif
#line 340 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_intrinsics.h"
static __inline void __stcg(unsigned long *ptr, unsigned long value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
#line 340
{ } 
#endif
#line 342 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_intrinsics.h"
static __inline void __stcg(char *ptr, char value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
#line 342
{ } 
#endif
#line 343 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_intrinsics.h"
static __inline void __stcg(signed char *ptr, signed char value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
#line 343
{ } 
#endif
#line 344 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_intrinsics.h"
static __inline void __stcg(short *ptr, short value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
#line 344
{ } 
#endif
#line 345 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_intrinsics.h"
static __inline void __stcg(int *ptr, int value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
#line 345
{ } 
#endif
#line 346 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_intrinsics.h"
static __inline void __stcg(__int64 *ptr, __int64 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
#line 346
{ } 
#endif
#line 347 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_intrinsics.h"
static __inline void __stcg(char2 *ptr, char2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
#line 347
{ } 
#endif
#line 348 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_intrinsics.h"
static __inline void __stcg(char4 *ptr, char4 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
#line 348
{ } 
#endif
#line 349 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_intrinsics.h"
static __inline void __stcg(short2 *ptr, short2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
#line 349
{ } 
#endif
#line 350 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_intrinsics.h"
static __inline void __stcg(short4 *ptr, short4 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
#line 350
{ } 
#endif
#line 351 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_intrinsics.h"
static __inline void __stcg(int2 *ptr, int2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
#line 351
{ } 
#endif
#line 352 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_intrinsics.h"
static __inline void __stcg(int4 *ptr, int4 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
#line 352
{ } 
#endif
#line 353 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_intrinsics.h"
static __inline void __stcg(longlong2 *ptr, longlong2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
#line 353
{ } 
#endif
#line 355 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_intrinsics.h"
static __inline void __stcg(unsigned char *ptr, unsigned char value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
#line 355
{ } 
#endif
#line 356 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_intrinsics.h"
static __inline void __stcg(unsigned short *ptr, unsigned short value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
#line 356
{ } 
#endif
#line 357 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_intrinsics.h"
static __inline void __stcg(unsigned *ptr, unsigned value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
#line 357
{ } 
#endif
#line 358 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_intrinsics.h"
static __inline void __stcg(unsigned __int64 *ptr, unsigned __int64 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
#line 358
{ } 
#endif
#line 359 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_intrinsics.h"
static __inline void __stcg(uchar2 *ptr, uchar2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
#line 359
{ } 
#endif
#line 360 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_intrinsics.h"
static __inline void __stcg(uchar4 *ptr, uchar4 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
#line 360
{ } 
#endif
#line 361 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_intrinsics.h"
static __inline void __stcg(ushort2 *ptr, ushort2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
#line 361
{ } 
#endif
#line 362 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_intrinsics.h"
static __inline void __stcg(ushort4 *ptr, ushort4 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
#line 362
{ } 
#endif
#line 363 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_intrinsics.h"
static __inline void __stcg(uint2 *ptr, uint2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
#line 363
{ } 
#endif
#line 364 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_intrinsics.h"
static __inline void __stcg(uint4 *ptr, uint4 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
#line 364
{ } 
#endif
#line 365 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_intrinsics.h"
static __inline void __stcg(ulonglong2 *ptr, ulonglong2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
#line 365
{ } 
#endif
#line 367 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_intrinsics.h"
static __inline void __stcg(float *ptr, float value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
#line 367
{ } 
#endif
#line 368 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_intrinsics.h"
static __inline void __stcg(double *ptr, double value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
#line 368
{ } 
#endif
#line 369 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_intrinsics.h"
static __inline void __stcg(float2 *ptr, float2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
#line 369
{ } 
#endif
#line 370 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_intrinsics.h"
static __inline void __stcg(float4 *ptr, float4 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
#line 370
{ } 
#endif
#line 371 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_intrinsics.h"
static __inline void __stcg(double2 *ptr, double2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
#line 371
{ } 
#endif
#line 375 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_intrinsics.h"
static __inline void __stcs(long *ptr, long value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
#line 375
{ } 
#endif
#line 376 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_intrinsics.h"
static __inline void __stcs(unsigned long *ptr, unsigned long value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
#line 376
{ } 
#endif
#line 378 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_intrinsics.h"
static __inline void __stcs(char *ptr, char value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
#line 378
{ } 
#endif
#line 379 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_intrinsics.h"
static __inline void __stcs(signed char *ptr, signed char value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
#line 379
{ } 
#endif
#line 380 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_intrinsics.h"
static __inline void __stcs(short *ptr, short value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
#line 380
{ } 
#endif
#line 381 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_intrinsics.h"
static __inline void __stcs(int *ptr, int value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
#line 381
{ } 
#endif
#line 382 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_intrinsics.h"
static __inline void __stcs(__int64 *ptr, __int64 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
#line 382
{ } 
#endif
#line 383 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_intrinsics.h"
static __inline void __stcs(char2 *ptr, char2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
#line 383
{ } 
#endif
#line 384 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_intrinsics.h"
static __inline void __stcs(char4 *ptr, char4 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
#line 384
{ } 
#endif
#line 385 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_intrinsics.h"
static __inline void __stcs(short2 *ptr, short2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
#line 385
{ } 
#endif
#line 386 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_intrinsics.h"
static __inline void __stcs(short4 *ptr, short4 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
#line 386
{ } 
#endif
#line 387 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_intrinsics.h"
static __inline void __stcs(int2 *ptr, int2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
#line 387
{ } 
#endif
#line 388 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_intrinsics.h"
static __inline void __stcs(int4 *ptr, int4 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
#line 388
{ } 
#endif
#line 389 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_intrinsics.h"
static __inline void __stcs(longlong2 *ptr, longlong2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
#line 389
{ } 
#endif
#line 391 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_intrinsics.h"
static __inline void __stcs(unsigned char *ptr, unsigned char value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
#line 391
{ } 
#endif
#line 392 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_intrinsics.h"
static __inline void __stcs(unsigned short *ptr, unsigned short value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
#line 392
{ } 
#endif
#line 393 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_intrinsics.h"
static __inline void __stcs(unsigned *ptr, unsigned value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
#line 393
{ } 
#endif
#line 394 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_intrinsics.h"
static __inline void __stcs(unsigned __int64 *ptr, unsigned __int64 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
#line 394
{ } 
#endif
#line 395 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_intrinsics.h"
static __inline void __stcs(uchar2 *ptr, uchar2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
#line 395
{ } 
#endif
#line 396 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_intrinsics.h"
static __inline void __stcs(uchar4 *ptr, uchar4 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
#line 396
{ } 
#endif
#line 397 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_intrinsics.h"
static __inline void __stcs(ushort2 *ptr, ushort2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
#line 397
{ } 
#endif
#line 398 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_intrinsics.h"
static __inline void __stcs(ushort4 *ptr, ushort4 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
#line 398
{ } 
#endif
#line 399 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_intrinsics.h"
static __inline void __stcs(uint2 *ptr, uint2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
#line 399
{ } 
#endif
#line 400 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_intrinsics.h"
static __inline void __stcs(uint4 *ptr, uint4 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
#line 400
{ } 
#endif
#line 401 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_intrinsics.h"
static __inline void __stcs(ulonglong2 *ptr, ulonglong2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
#line 401
{ } 
#endif
#line 403 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_intrinsics.h"
static __inline void __stcs(float *ptr, float value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
#line 403
{ } 
#endif
#line 404 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_intrinsics.h"
static __inline void __stcs(double *ptr, double value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
#line 404
{ } 
#endif
#line 405 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_intrinsics.h"
static __inline void __stcs(float2 *ptr, float2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
#line 405
{ } 
#endif
#line 406 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_intrinsics.h"
static __inline void __stcs(float4 *ptr, float4 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
#line 406
{ } 
#endif
#line 407 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_intrinsics.h"
static __inline void __stcs(double2 *ptr, double2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
#line 407
{ } 
#endif
#line 411 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_intrinsics.h"
static __inline void __stwt(long *ptr, long value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
#line 411
{ } 
#endif
#line 412 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_intrinsics.h"
static __inline void __stwt(unsigned long *ptr, unsigned long value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
#line 412
{ } 
#endif
#line 414 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_intrinsics.h"
static __inline void __stwt(char *ptr, char value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
#line 414
{ } 
#endif
#line 415 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_intrinsics.h"
static __inline void __stwt(signed char *ptr, signed char value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
#line 415
{ } 
#endif
#line 416 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_intrinsics.h"
static __inline void __stwt(short *ptr, short value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
#line 416
{ } 
#endif
#line 417 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_intrinsics.h"
static __inline void __stwt(int *ptr, int value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
#line 417
{ } 
#endif
#line 418 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_intrinsics.h"
static __inline void __stwt(__int64 *ptr, __int64 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
#line 418
{ } 
#endif
#line 419 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_intrinsics.h"
static __inline void __stwt(char2 *ptr, char2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
#line 419
{ } 
#endif
#line 420 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_intrinsics.h"
static __inline void __stwt(char4 *ptr, char4 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
#line 420
{ } 
#endif
#line 421 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_intrinsics.h"
static __inline void __stwt(short2 *ptr, short2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
#line 421
{ } 
#endif
#line 422 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_intrinsics.h"
static __inline void __stwt(short4 *ptr, short4 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
#line 422
{ } 
#endif
#line 423 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_intrinsics.h"
static __inline void __stwt(int2 *ptr, int2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
#line 423
{ } 
#endif
#line 424 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_intrinsics.h"
static __inline void __stwt(int4 *ptr, int4 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
#line 424
{ } 
#endif
#line 425 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_intrinsics.h"
static __inline void __stwt(longlong2 *ptr, longlong2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
#line 425
{ } 
#endif
#line 427 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_intrinsics.h"
static __inline void __stwt(unsigned char *ptr, unsigned char value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
#line 427
{ } 
#endif
#line 428 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_intrinsics.h"
static __inline void __stwt(unsigned short *ptr, unsigned short value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
#line 428
{ } 
#endif
#line 429 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_intrinsics.h"
static __inline void __stwt(unsigned *ptr, unsigned value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
#line 429
{ } 
#endif
#line 430 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_intrinsics.h"
static __inline void __stwt(unsigned __int64 *ptr, unsigned __int64 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
#line 430
{ } 
#endif
#line 431 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_intrinsics.h"
static __inline void __stwt(uchar2 *ptr, uchar2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
#line 431
{ } 
#endif
#line 432 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_intrinsics.h"
static __inline void __stwt(uchar4 *ptr, uchar4 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
#line 432
{ } 
#endif
#line 433 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_intrinsics.h"
static __inline void __stwt(ushort2 *ptr, ushort2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
#line 433
{ } 
#endif
#line 434 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_intrinsics.h"
static __inline void __stwt(ushort4 *ptr, ushort4 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
#line 434
{ } 
#endif
#line 435 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_intrinsics.h"
static __inline void __stwt(uint2 *ptr, uint2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
#line 435
{ } 
#endif
#line 436 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_intrinsics.h"
static __inline void __stwt(uint4 *ptr, uint4 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
#line 436
{ } 
#endif
#line 437 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_intrinsics.h"
static __inline void __stwt(ulonglong2 *ptr, ulonglong2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
#line 437
{ } 
#endif
#line 439 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_intrinsics.h"
static __inline void __stwt(float *ptr, float value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
#line 439
{ } 
#endif
#line 440 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_intrinsics.h"
static __inline void __stwt(double *ptr, double value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
#line 440
{ } 
#endif
#line 441 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_intrinsics.h"
static __inline void __stwt(float2 *ptr, float2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
#line 441
{ } 
#endif
#line 442 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_intrinsics.h"
static __inline void __stwt(float4 *ptr, float4 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
#line 442
{ } 
#endif
#line 443 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_intrinsics.h"
static __inline void __stwt(double2 *ptr, double2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
#line 443
{ } 
#endif
#line 460 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_intrinsics.h"
static __inline unsigned __funnelshift_l(unsigned lo, unsigned hi, unsigned shift) {int volatile ___ = 1;(void)lo;(void)hi;(void)shift;::exit(___);}
#if 0
#line 460
{ } 
#endif
#line 472 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_intrinsics.h"
static __inline unsigned __funnelshift_lc(unsigned lo, unsigned hi, unsigned shift) {int volatile ___ = 1;(void)lo;(void)hi;(void)shift;::exit(___);}
#if 0
#line 472
{ } 
#endif
#line 485 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_intrinsics.h"
static __inline unsigned __funnelshift_r(unsigned lo, unsigned hi, unsigned shift) {int volatile ___ = 1;(void)lo;(void)hi;(void)shift;::exit(___);}
#if 0
#line 485
{ } 
#endif
#line 497 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_32_intrinsics.h"
static __inline unsigned __funnelshift_rc(unsigned lo, unsigned hi, unsigned shift) {int volatile ___ = 1;(void)lo;(void)hi;(void)shift;::exit(___);}
#if 0
#line 497
{ } 
#endif
#line 89 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_61_intrinsics.h"
static __inline int __dp2a_lo(int srcA, int srcB, int c) {int volatile ___ = 1;(void)srcA;(void)srcB;(void)c;::exit(___);}
#if 0
#line 89
{ } 
#endif
#line 90 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_61_intrinsics.h"
static __inline unsigned __dp2a_lo(unsigned srcA, unsigned srcB, unsigned c) {int volatile ___ = 1;(void)srcA;(void)srcB;(void)c;::exit(___);}
#if 0
#line 90
{ } 
#endif
#line 92 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_61_intrinsics.h"
static __inline int __dp2a_lo(short2 srcA, char4 srcB, int c) {int volatile ___ = 1;(void)srcA;(void)srcB;(void)c;::exit(___);}
#if 0
#line 92
{ } 
#endif
#line 93 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_61_intrinsics.h"
static __inline unsigned __dp2a_lo(ushort2 srcA, uchar4 srcB, unsigned c) {int volatile ___ = 1;(void)srcA;(void)srcB;(void)c;::exit(___);}
#if 0
#line 93
{ } 
#endif
#line 95 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_61_intrinsics.h"
static __inline int __dp2a_hi(int srcA, int srcB, int c) {int volatile ___ = 1;(void)srcA;(void)srcB;(void)c;::exit(___);}
#if 0
#line 95
{ } 
#endif
#line 96 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_61_intrinsics.h"
static __inline unsigned __dp2a_hi(unsigned srcA, unsigned srcB, unsigned c) {int volatile ___ = 1;(void)srcA;(void)srcB;(void)c;::exit(___);}
#if 0
#line 96
{ } 
#endif
#line 98 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_61_intrinsics.h"
static __inline int __dp2a_hi(short2 srcA, char4 srcB, int c) {int volatile ___ = 1;(void)srcA;(void)srcB;(void)c;::exit(___);}
#if 0
#line 98
{ } 
#endif
#line 99 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_61_intrinsics.h"
static __inline unsigned __dp2a_hi(ushort2 srcA, uchar4 srcB, unsigned c) {int volatile ___ = 1;(void)srcA;(void)srcB;(void)c;::exit(___);}
#if 0
#line 99
{ } 
#endif
#line 106 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_61_intrinsics.h"
static __inline int __dp4a(int srcA, int srcB, int c) {int volatile ___ = 1;(void)srcA;(void)srcB;(void)c;::exit(___);}
#if 0
#line 106
{ } 
#endif
#line 107 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_61_intrinsics.h"
static __inline unsigned __dp4a(unsigned srcA, unsigned srcB, unsigned c) {int volatile ___ = 1;(void)srcA;(void)srcB;(void)c;::exit(___);}
#if 0
#line 107
{ } 
#endif
#line 109 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_61_intrinsics.h"
static __inline int __dp4a(char4 srcA, char4 srcB, int c) {int volatile ___ = 1;(void)srcA;(void)srcB;(void)c;::exit(___);}
#if 0
#line 109
{ } 
#endif
#line 110 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\sm_61_intrinsics.h"
static __inline unsigned __dp4a(uchar4 srcA, uchar4 srcB, unsigned c) {int volatile ___ = 1;(void)srcA;(void)srcB;(void)c;::exit(___);}
#if 0
#line 110
{ } 
#endif
#line 93 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\sm_70_rt.h"
static __inline unsigned __match_any_sync(unsigned mask, unsigned value) {int volatile ___ = 1;(void)mask;(void)value;::exit(___);}
#if 0
#line 93
{ } 
#endif
#line 94 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\sm_70_rt.h"
static __inline unsigned __match_any_sync(unsigned mask, int value) {int volatile ___ = 1;(void)mask;(void)value;::exit(___);}
#if 0
#line 94
{ } 
#endif
#line 95 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\sm_70_rt.h"
static __inline unsigned __match_any_sync(unsigned mask, unsigned long value) {int volatile ___ = 1;(void)mask;(void)value;::exit(___);}
#if 0
#line 95
{ } 
#endif
#line 96 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\sm_70_rt.h"
static __inline unsigned __match_any_sync(unsigned mask, long value) {int volatile ___ = 1;(void)mask;(void)value;::exit(___);}
#if 0
#line 96
{ } 
#endif
#line 97 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\sm_70_rt.h"
static __inline unsigned __match_any_sync(unsigned mask, unsigned __int64 value) {int volatile ___ = 1;(void)mask;(void)value;::exit(___);}
#if 0
#line 97
{ } 
#endif
#line 98 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\sm_70_rt.h"
static __inline unsigned __match_any_sync(unsigned mask, __int64 value) {int volatile ___ = 1;(void)mask;(void)value;::exit(___);}
#if 0
#line 98
{ } 
#endif
#line 99 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\sm_70_rt.h"
static __inline unsigned __match_any_sync(unsigned mask, float value) {int volatile ___ = 1;(void)mask;(void)value;::exit(___);}
#if 0
#line 99
{ } 
#endif
#line 100 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\sm_70_rt.h"
static __inline unsigned __match_any_sync(unsigned mask, double value) {int volatile ___ = 1;(void)mask;(void)value;::exit(___);}
#if 0
#line 100
{ } 
#endif
#line 102 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\sm_70_rt.h"
static __inline unsigned __match_all_sync(unsigned mask, unsigned value, int *pred) {int volatile ___ = 1;(void)mask;(void)value;(void)pred;::exit(___);}
#if 0
#line 102
{ } 
#endif
#line 103 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\sm_70_rt.h"
static __inline unsigned __match_all_sync(unsigned mask, int value, int *pred) {int volatile ___ = 1;(void)mask;(void)value;(void)pred;::exit(___);}
#if 0
#line 103
{ } 
#endif
#line 104 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\sm_70_rt.h"
static __inline unsigned __match_all_sync(unsigned mask, unsigned long value, int *pred) {int volatile ___ = 1;(void)mask;(void)value;(void)pred;::exit(___);}
#if 0
#line 104
{ } 
#endif
#line 105 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\sm_70_rt.h"
static __inline unsigned __match_all_sync(unsigned mask, long value, int *pred) {int volatile ___ = 1;(void)mask;(void)value;(void)pred;::exit(___);}
#if 0
#line 105
{ } 
#endif
#line 106 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\sm_70_rt.h"
static __inline unsigned __match_all_sync(unsigned mask, unsigned __int64 value, int *pred) {int volatile ___ = 1;(void)mask;(void)value;(void)pred;::exit(___);}
#if 0
#line 106
{ } 
#endif
#line 107 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\sm_70_rt.h"
static __inline unsigned __match_all_sync(unsigned mask, __int64 value, int *pred) {int volatile ___ = 1;(void)mask;(void)value;(void)pred;::exit(___);}
#if 0
#line 107
{ } 
#endif
#line 108 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\sm_70_rt.h"
static __inline unsigned __match_all_sync(unsigned mask, float value, int *pred) {int volatile ___ = 1;(void)mask;(void)value;(void)pred;::exit(___);}
#if 0
#line 108
{ } 
#endif
#line 109 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\sm_70_rt.h"
static __inline unsigned __match_all_sync(unsigned mask, double value, int *pred) {int volatile ___ = 1;(void)mask;(void)value;(void)pred;::exit(___);}
#if 0
#line 109
{ } 
#endif
#line 111 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\sm_70_rt.h"
static __inline void __nanosleep(unsigned ns) {int volatile ___ = 1;(void)ns;::exit(___);}
#if 0
#line 111
{ } 
#endif
#line 113 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\sm_70_rt.h"
static __inline unsigned short atomicCAS(unsigned short *address, unsigned short compare, unsigned short val) {int volatile ___ = 1;(void)address;(void)compare;(void)val;::exit(___);}
#if 0
#line 113
{ } 
#endif
#line 93 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\sm_80_rt.h"
static __inline unsigned __reduce_add_sync(unsigned mask, unsigned value) {int volatile ___ = 1;(void)mask;(void)value;::exit(___);}
#if 0
#line 93
{ } 
#endif
#line 94 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\sm_80_rt.h"
static __inline unsigned __reduce_min_sync(unsigned mask, unsigned value) {int volatile ___ = 1;(void)mask;(void)value;::exit(___);}
#if 0
#line 94
{ } 
#endif
#line 95 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\sm_80_rt.h"
static __inline unsigned __reduce_max_sync(unsigned mask, unsigned value) {int volatile ___ = 1;(void)mask;(void)value;::exit(___);}
#if 0
#line 95
{ } 
#endif
#line 97 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\sm_80_rt.h"
static __inline int __reduce_add_sync(unsigned mask, int value) {int volatile ___ = 1;(void)mask;(void)value;::exit(___);}
#if 0
#line 97
{ } 
#endif
#line 98 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\sm_80_rt.h"
static __inline int __reduce_min_sync(unsigned mask, int value) {int volatile ___ = 1;(void)mask;(void)value;::exit(___);}
#if 0
#line 98
{ } 
#endif
#line 99 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\sm_80_rt.h"
static __inline int __reduce_max_sync(unsigned mask, int value) {int volatile ___ = 1;(void)mask;(void)value;::exit(___);}
#if 0
#line 99
{ } 
#endif
#line 101 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\sm_80_rt.h"
static __inline unsigned __reduce_and_sync(unsigned mask, unsigned value) {int volatile ___ = 1;(void)mask;(void)value;::exit(___);}
#if 0
#line 101
{ } 
#endif
#line 102 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\sm_80_rt.h"
static __inline unsigned __reduce_or_sync(unsigned mask, unsigned value) {int volatile ___ = 1;(void)mask;(void)value;::exit(___);}
#if 0
#line 102
{ } 
#endif
#line 103 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\sm_80_rt.h"
static __inline unsigned __reduce_xor_sync(unsigned mask, unsigned value) {int volatile ___ = 1;(void)mask;(void)value;::exit(___);}
#if 0
#line 103
{ } 
#endif
#line 106 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\sm_80_rt.h"
extern "C" {
#line 107
inline void *__nv_associate_access_property(const void *ptr, unsigned __int64 
#line 108
property) {int volatile ___ = 1;(void)ptr;(void)property;::exit(___);}
#if 0
#line 108
{ 
#line 109
extern void *__nv_associate_access_property_impl(const void *, unsigned __int64); 
#line 111
return __nv_associate_access_property_impl(ptr, property); 
#line 112
} 
#endif
#line 114 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\sm_80_rt.h"
inline void __nv_memcpy_async_shared_global_4(void *dst, const void *
#line 115
src, unsigned 
#line 116
src_size) {int volatile ___ = 1;(void)dst;(void)src;(void)src_size;::exit(___);}
#if 0
#line 116
{ 
#line 117
extern void __nv_memcpy_async_shared_global_4_impl(void *, const void *, unsigned); 
#line 120
__nv_memcpy_async_shared_global_4_impl(dst, src, src_size); 
#line 121
} 
#endif
#line 123 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\sm_80_rt.h"
inline void __nv_memcpy_async_shared_global_8(void *dst, const void *
#line 124
src, unsigned 
#line 125
src_size) {int volatile ___ = 1;(void)dst;(void)src;(void)src_size;::exit(___);}
#if 0
#line 125
{ 
#line 126
extern void __nv_memcpy_async_shared_global_8_impl(void *, const void *, unsigned); 
#line 129
__nv_memcpy_async_shared_global_8_impl(dst, src, src_size); 
#line 130
} 
#endif
#line 132 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\sm_80_rt.h"
inline void __nv_memcpy_async_shared_global_16(void *dst, const void *
#line 133
src, unsigned 
#line 134
src_size) {int volatile ___ = 1;(void)dst;(void)src;(void)src_size;::exit(___);}
#if 0
#line 134
{ 
#line 135
extern void __nv_memcpy_async_shared_global_16_impl(void *, const void *, unsigned); 
#line 138
__nv_memcpy_async_shared_global_16_impl(dst, src, src_size); 
#line 139
} 
#endif
#line 141 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\sm_80_rt.h"
}
#line 89 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\sm_90_rt.h"
static __inline unsigned __isCtaShared(const void *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 89
{ } 
#endif
#line 90 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\sm_90_rt.h"
static __inline unsigned __isClusterShared(const void *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 90
{ } 
#endif
#line 91 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\sm_90_rt.h"
static __inline void *__cluster_map_shared_rank(const void *ptr, unsigned target_block_rank) {int volatile ___ = 1;(void)ptr;(void)target_block_rank;::exit(___);}
#if 0
#line 91
{ } 
#endif
#line 92 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\sm_90_rt.h"
static __inline unsigned __cluster_query_shared_rank(const void *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 92
{ } 
#endif
#line 93 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\sm_90_rt.h"
static __inline uint2 __cluster_map_shared_multicast(const void *ptr, unsigned cluster_cta_mask) {int volatile ___ = 1;(void)ptr;(void)cluster_cta_mask;::exit(___);}
#if 0
#line 93
{ } 
#endif
#line 94 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\sm_90_rt.h"
static __inline unsigned __clusterDimIsSpecified() {int volatile ___ = 1;::exit(___);}
#if 0
#line 94
{ } 
#endif
#line 95 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\sm_90_rt.h"
static __inline dim3 __clusterDim() {int volatile ___ = 1;::exit(___);}
#if 0
#line 95
{ } 
#endif
#line 96 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\sm_90_rt.h"
static __inline dim3 __clusterRelativeBlockIdx() {int volatile ___ = 1;::exit(___);}
#if 0
#line 96
{ } 
#endif
#line 97 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\sm_90_rt.h"
static __inline dim3 __clusterGridDimInClusters() {int volatile ___ = 1;::exit(___);}
#if 0
#line 97
{ } 
#endif
#line 98 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\sm_90_rt.h"
static __inline dim3 __clusterIdx() {int volatile ___ = 1;::exit(___);}
#if 0
#line 98
{ } 
#endif
#line 99 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\sm_90_rt.h"
static __inline unsigned __clusterRelativeBlockRank() {int volatile ___ = 1;::exit(___);}
#if 0
#line 99
{ } 
#endif
#line 100 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\sm_90_rt.h"
static __inline unsigned __clusterSizeInBlocks() {int volatile ___ = 1;::exit(___);}
#if 0
#line 100
{ } 
#endif
#line 101 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\sm_90_rt.h"
static __inline void __cluster_barrier_arrive() {int volatile ___ = 1;::exit(___);}
#if 0
#line 101
{ } 
#endif
#line 102 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\sm_90_rt.h"
static __inline void __cluster_barrier_arrive_relaxed() {int volatile ___ = 1;::exit(___);}
#if 0
#line 102
{ } 
#endif
#line 103 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\sm_90_rt.h"
static __inline void __cluster_barrier_wait() {int volatile ___ = 1;::exit(___);}
#if 0
#line 103
{ } 
#endif
#line 104 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\sm_90_rt.h"
static __inline void __threadfence_cluster() {int volatile ___ = 1;::exit(___);}
#if 0
#line 104
{ } 
#endif
#line 106 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\sm_90_rt.h"
static __inline float2 atomicAdd(float2 *address, float2 val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
#line 106
{ } 
#endif
#line 107 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\sm_90_rt.h"
static __inline float2 atomicAdd_block(float2 *address, float2 val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
#line 107
{ } 
#endif
#line 108 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\sm_90_rt.h"
static __inline float2 atomicAdd_system(float2 *address, float2 val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
#line 108
{ } 
#endif
#line 109 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\sm_90_rt.h"
static __inline float4 atomicAdd(float4 *address, float4 val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
#line 109
{ } 
#endif
#line 110 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\sm_90_rt.h"
static __inline float4 atomicAdd_block(float4 *address, float4 val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
#line 110
{ } 
#endif
#line 111 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt\\sm_90_rt.h"
static __inline float4 atomicAdd_system(float4 *address, float4 val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
#line 111
{ } 
#endif
#line 65 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\texture_indirect_functions.h"
template< class T> struct __nv_itex_trait { }; 
#line 66
template<> struct __nv_itex_trait< char>  { typedef void type; }; 
#line 67
template<> struct __nv_itex_trait< signed char>  { typedef void type; }; 
#line 68
template<> struct __nv_itex_trait< char1>  { typedef void type; }; 
#line 69
template<> struct __nv_itex_trait< char2>  { typedef void type; }; 
#line 70
template<> struct __nv_itex_trait< char4>  { typedef void type; }; 
#line 71
template<> struct __nv_itex_trait< unsigned char>  { typedef void type; }; 
#line 72
template<> struct __nv_itex_trait< uchar1>  { typedef void type; }; 
#line 73
template<> struct __nv_itex_trait< uchar2>  { typedef void type; }; 
#line 74
template<> struct __nv_itex_trait< uchar4>  { typedef void type; }; 
#line 75
template<> struct __nv_itex_trait< short>  { typedef void type; }; 
#line 76
template<> struct __nv_itex_trait< short1>  { typedef void type; }; 
#line 77
template<> struct __nv_itex_trait< short2>  { typedef void type; }; 
#line 78
template<> struct __nv_itex_trait< short4>  { typedef void type; }; 
#line 79
template<> struct __nv_itex_trait< unsigned short>  { typedef void type; }; 
#line 80
template<> struct __nv_itex_trait< ushort1>  { typedef void type; }; 
#line 81
template<> struct __nv_itex_trait< ushort2>  { typedef void type; }; 
#line 82
template<> struct __nv_itex_trait< ushort4>  { typedef void type; }; 
#line 83
template<> struct __nv_itex_trait< int>  { typedef void type; }; 
#line 84
template<> struct __nv_itex_trait< int1>  { typedef void type; }; 
#line 85
template<> struct __nv_itex_trait< int2>  { typedef void type; }; 
#line 86
template<> struct __nv_itex_trait< int4>  { typedef void type; }; 
#line 87
template<> struct __nv_itex_trait< unsigned>  { typedef void type; }; 
#line 88
template<> struct __nv_itex_trait< uint1>  { typedef void type; }; 
#line 89
template<> struct __nv_itex_trait< uint2>  { typedef void type; }; 
#line 90
template<> struct __nv_itex_trait< uint4>  { typedef void type; }; 
#line 92
template<> struct __nv_itex_trait< long>  { typedef void type; }; 
#line 93
template<> struct __nv_itex_trait< long1>  { typedef void type; }; 
#line 94
template<> struct __nv_itex_trait< long2>  { typedef void type; }; 
#line 95
template<> struct __nv_itex_trait< long4>  { typedef void type; }; 
#line 96
template<> struct __nv_itex_trait< unsigned long>  { typedef void type; }; 
#line 97
template<> struct __nv_itex_trait< ulong1>  { typedef void type; }; 
#line 98
template<> struct __nv_itex_trait< ulong2>  { typedef void type; }; 
#line 99
template<> struct __nv_itex_trait< ulong4>  { typedef void type; }; 
#line 101 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\texture_indirect_functions.h"
template<> struct __nv_itex_trait< float>  { typedef void type; }; 
#line 102
template<> struct __nv_itex_trait< float1>  { typedef void type; }; 
#line 103
template<> struct __nv_itex_trait< float2>  { typedef void type; }; 
#line 104
template<> struct __nv_itex_trait< float4>  { typedef void type; }; 
#line 108
template< class T> static typename __nv_itex_trait< T> ::type 
#line 109
tex1Dfetch(T *ptr, ::cudaTextureObject_t obj, int x) {int volatile ___ = 1;(void)ptr;(void)obj;(void)x;::exit(___);}
#if 0
#line 110
{ 
#line 111
__nv_tex_surf_handler("__itex1Dfetch", ptr, obj, x); 
#line 112
} 
#endif
#line 114 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\texture_indirect_functions.h"
template< class T> static T 
#line 115
tex1Dfetch(::cudaTextureObject_t texObject, int x) {int volatile ___ = 1;(void)texObject;(void)x;::exit(___);}
#if 0
#line 116
{ 
#line 117
T ret; 
#line 118
tex1Dfetch(&ret, texObject, x); 
#line 119
return ret; 
#line 120
} 
#endif
#line 122 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\texture_indirect_functions.h"
template< class T> static typename __nv_itex_trait< T> ::type 
#line 123
tex1D(T *ptr, ::cudaTextureObject_t obj, float x) {int volatile ___ = 1;(void)ptr;(void)obj;(void)x;::exit(___);}
#if 0
#line 124
{ 
#line 125
__nv_tex_surf_handler("__itex1D", ptr, obj, x); 
#line 126
} 
#endif
#line 129 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\texture_indirect_functions.h"
template< class T> static T 
#line 130
tex1D(::cudaTextureObject_t texObject, float x) {int volatile ___ = 1;(void)texObject;(void)x;::exit(___);}
#if 0
#line 131
{ 
#line 132
T ret; 
#line 133
tex1D(&ret, texObject, x); 
#line 134
return ret; 
#line 135
} 
#endif
#line 138 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\texture_indirect_functions.h"
template< class T> static typename __nv_itex_trait< T> ::type 
#line 139
tex2D(T *ptr, ::cudaTextureObject_t obj, float x, float y) {int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;::exit(___);}
#if 0
#line 140
{ 
#line 141
__nv_tex_surf_handler("__itex2D", ptr, obj, x, y); 
#line 142
} 
#endif
#line 144 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\texture_indirect_functions.h"
template< class T> static T 
#line 145
tex2D(::cudaTextureObject_t texObject, float x, float y) {int volatile ___ = 1;(void)texObject;(void)x;(void)y;::exit(___);}
#if 0
#line 146
{ 
#line 147
T ret; 
#line 148
tex2D(&ret, texObject, x, y); 
#line 149
return ret; 
#line 150
} 
#endif
#line 153 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\texture_indirect_functions.h"
template< class T> static typename __nv_itex_trait< T> ::type 
#line 154
tex2D(T *ptr, ::cudaTextureObject_t obj, float x, float y, bool *
#line 155
isResident) {int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)isResident;::exit(___);}
#if 0
#line 156
{ 
#line 157
unsigned char res; 
#line 158
__nv_tex_surf_handler("__itex2D_sparse", ptr, obj, x, y, &res); 
#line 159
(*isResident) = (res != 0); 
#line 160
} 
#endif
#line 162 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\texture_indirect_functions.h"
template< class T> static T 
#line 163
tex2D(::cudaTextureObject_t texObject, float x, float y, bool *isResident) {int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)isResident;::exit(___);}
#if 0
#line 164
{ 
#line 165
T ret; 
#line 166
tex2D(&ret, texObject, x, y, isResident); 
#line 167
return ret; 
#line 168
} 
#endif
#line 173 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\texture_indirect_functions.h"
template< class T> static typename __nv_itex_trait< T> ::type 
#line 174
tex3D(T *ptr, ::cudaTextureObject_t obj, float x, float y, float z) {int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)z;::exit(___);}
#if 0
#line 175
{ 
#line 176
__nv_tex_surf_handler("__itex3D", ptr, obj, x, y, z); 
#line 177
} 
#endif
#line 179 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\texture_indirect_functions.h"
template< class T> static T 
#line 180
tex3D(::cudaTextureObject_t texObject, float x, float y, float z) {int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)z;::exit(___);}
#if 0
#line 181
{ 
#line 182
T ret; 
#line 183
tex3D(&ret, texObject, x, y, z); 
#line 184
return ret; 
#line 185
} 
#endif
#line 188 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\texture_indirect_functions.h"
template< class T> static typename __nv_itex_trait< T> ::type 
#line 189
tex3D(T *ptr, ::cudaTextureObject_t obj, float x, float y, float z, bool *
#line 190
isResident) {int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)z;(void)isResident;::exit(___);}
#if 0
#line 191
{ 
#line 192
unsigned char res; 
#line 193
__nv_tex_surf_handler("__itex3D_sparse", ptr, obj, x, y, z, &res); 
#line 194
(*isResident) = (res != 0); 
#line 195
} 
#endif
#line 197 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\texture_indirect_functions.h"
template< class T> static T 
#line 198
tex3D(::cudaTextureObject_t texObject, float x, float y, float z, bool *isResident) {int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)z;(void)isResident;::exit(___);}
#if 0
#line 199
{ 
#line 200
T ret; 
#line 201
tex3D(&ret, texObject, x, y, z, isResident); 
#line 202
return ret; 
#line 203
} 
#endif
#line 207 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\texture_indirect_functions.h"
template< class T> static typename __nv_itex_trait< T> ::type 
#line 208
tex1DLayered(T *ptr, ::cudaTextureObject_t obj, float x, int layer) {int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)layer;::exit(___);}
#if 0
#line 209
{ 
#line 210
__nv_tex_surf_handler("__itex1DLayered", ptr, obj, x, layer); 
#line 211
} 
#endif
#line 213 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\texture_indirect_functions.h"
template< class T> static T 
#line 214
tex1DLayered(::cudaTextureObject_t texObject, float x, int layer) {int volatile ___ = 1;(void)texObject;(void)x;(void)layer;::exit(___);}
#if 0
#line 215
{ 
#line 216
T ret; 
#line 217
tex1DLayered(&ret, texObject, x, layer); 
#line 218
return ret; 
#line 219
} 
#endif
#line 221 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\texture_indirect_functions.h"
template< class T> static typename __nv_itex_trait< T> ::type 
#line 222
tex2DLayered(T *ptr, ::cudaTextureObject_t obj, float x, float y, int layer) {int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)layer;::exit(___);}
#if 0
#line 223
{ 
#line 224
__nv_tex_surf_handler("__itex2DLayered", ptr, obj, x, y, layer); 
#line 225
} 
#endif
#line 227 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\texture_indirect_functions.h"
template< class T> static T 
#line 228
tex2DLayered(::cudaTextureObject_t texObject, float x, float y, int layer) {int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)layer;::exit(___);}
#if 0
#line 229
{ 
#line 230
T ret; 
#line 231
tex2DLayered(&ret, texObject, x, y, layer); 
#line 232
return ret; 
#line 233
} 
#endif
#line 236 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\texture_indirect_functions.h"
template< class T> static typename __nv_itex_trait< T> ::type 
#line 237
tex2DLayered(T *ptr, ::cudaTextureObject_t obj, float x, float y, int layer, bool *isResident) {int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)layer;(void)isResident;::exit(___);}
#if 0
#line 238
{ 
#line 239
unsigned char res; 
#line 240
__nv_tex_surf_handler("__itex2DLayered_sparse", ptr, obj, x, y, layer, &res); 
#line 241
(*isResident) = (res != 0); 
#line 242
} 
#endif
#line 244 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\texture_indirect_functions.h"
template< class T> static T 
#line 245
tex2DLayered(::cudaTextureObject_t texObject, float x, float y, int layer, bool *isResident) {int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)layer;(void)isResident;::exit(___);}
#if 0
#line 246
{ 
#line 247
T ret; 
#line 248
tex2DLayered(&ret, texObject, x, y, layer, isResident); 
#line 249
return ret; 
#line 250
} 
#endif
#line 254 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\texture_indirect_functions.h"
template< class T> static typename __nv_itex_trait< T> ::type 
#line 255
texCubemap(T *ptr, ::cudaTextureObject_t obj, float x, float y, float z) {int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)z;::exit(___);}
#if 0
#line 256
{ 
#line 257
__nv_tex_surf_handler("__itexCubemap", ptr, obj, x, y, z); 
#line 258
} 
#endif
#line 261 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\texture_indirect_functions.h"
template< class T> static T 
#line 262
texCubemap(::cudaTextureObject_t texObject, float x, float y, float z) {int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)z;::exit(___);}
#if 0
#line 263
{ 
#line 264
T ret; 
#line 265
texCubemap(&ret, texObject, x, y, z); 
#line 266
return ret; 
#line 267
} 
#endif
#line 270 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\texture_indirect_functions.h"
template< class T> static typename __nv_itex_trait< T> ::type 
#line 271
texCubemapLayered(T *ptr, ::cudaTextureObject_t obj, float x, float y, float z, int layer) {int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)z;(void)layer;::exit(___);}
#if 0
#line 272
{ 
#line 273
__nv_tex_surf_handler("__itexCubemapLayered", ptr, obj, x, y, z, layer); 
#line 274
} 
#endif
#line 276 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\texture_indirect_functions.h"
template< class T> static T 
#line 277
texCubemapLayered(::cudaTextureObject_t texObject, float x, float y, float z, int layer) {int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)z;(void)layer;::exit(___);}
#if 0
#line 278
{ 
#line 279
T ret; 
#line 280
texCubemapLayered(&ret, texObject, x, y, z, layer); 
#line 281
return ret; 
#line 282
} 
#endif
#line 284 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\texture_indirect_functions.h"
template< class T> static typename __nv_itex_trait< T> ::type 
#line 285
tex2Dgather(T *ptr, ::cudaTextureObject_t obj, float x, float y, int comp = 0) {int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)comp;::exit(___);}
#if 0
#line 286
{ 
#line 287
__nv_tex_surf_handler("__itex2Dgather", ptr, obj, x, y, comp); 
#line 288
} 
#endif
#line 290 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\texture_indirect_functions.h"
template< class T> static T 
#line 291
tex2Dgather(::cudaTextureObject_t to, float x, float y, int comp = 0) {int volatile ___ = 1;(void)to;(void)x;(void)y;(void)comp;::exit(___);}
#if 0
#line 292
{ 
#line 293
T ret; 
#line 294
tex2Dgather(&ret, to, x, y, comp); 
#line 295
return ret; 
#line 296
} 
#endif
#line 299 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\texture_indirect_functions.h"
template< class T> static typename __nv_itex_trait< T> ::type 
#line 300
tex2Dgather(T *ptr, ::cudaTextureObject_t obj, float x, float y, bool *isResident, int comp = 0) {int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)isResident;(void)comp;::exit(___);}
#if 0
#line 301
{ 
#line 302
unsigned char res; 
#line 303
__nv_tex_surf_handler("__itex2Dgather_sparse", ptr, obj, x, y, comp, &res); 
#line 304
(*isResident) = (res != 0); 
#line 305
} 
#endif
#line 307 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\texture_indirect_functions.h"
template< class T> static T 
#line 308
tex2Dgather(::cudaTextureObject_t to, float x, float y, bool *isResident, int comp = 0) {int volatile ___ = 1;(void)to;(void)x;(void)y;(void)isResident;(void)comp;::exit(___);}
#if 0
#line 309
{ 
#line 310
T ret; 
#line 311
tex2Dgather(&ret, to, x, y, isResident, comp); 
#line 312
return ret; 
#line 313
} 
#endif
#line 317 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\texture_indirect_functions.h"
template< class T> static typename __nv_itex_trait< T> ::type 
#line 318
tex1DLod(T *ptr, ::cudaTextureObject_t obj, float x, float level) {int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)level;::exit(___);}
#if 0
#line 319
{ 
#line 320
__nv_tex_surf_handler("__itex1DLod", ptr, obj, x, level); 
#line 321
} 
#endif
#line 323 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\texture_indirect_functions.h"
template< class T> static T 
#line 324
tex1DLod(::cudaTextureObject_t texObject, float x, float level) {int volatile ___ = 1;(void)texObject;(void)x;(void)level;::exit(___);}
#if 0
#line 325
{ 
#line 326
T ret; 
#line 327
tex1DLod(&ret, texObject, x, level); 
#line 328
return ret; 
#line 329
} 
#endif
#line 332 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\texture_indirect_functions.h"
template< class T> static typename __nv_itex_trait< T> ::type 
#line 333
tex2DLod(T *ptr, ::cudaTextureObject_t obj, float x, float y, float level) {int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)level;::exit(___);}
#if 0
#line 334
{ 
#line 335
__nv_tex_surf_handler("__itex2DLod", ptr, obj, x, y, level); 
#line 336
} 
#endif
#line 338 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\texture_indirect_functions.h"
template< class T> static T 
#line 339
tex2DLod(::cudaTextureObject_t texObject, float x, float y, float level) {int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)level;::exit(___);}
#if 0
#line 340
{ 
#line 341
T ret; 
#line 342
tex2DLod(&ret, texObject, x, y, level); 
#line 343
return ret; 
#line 344
} 
#endif
#line 348 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\texture_indirect_functions.h"
template< class T> static typename __nv_itex_trait< T> ::type 
#line 349
tex2DLod(T *ptr, ::cudaTextureObject_t obj, float x, float y, float level, bool *isResident) {int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)level;(void)isResident;::exit(___);}
#if 0
#line 350
{ 
#line 351
unsigned char res; 
#line 352
__nv_tex_surf_handler("__itex2DLod_sparse", ptr, obj, x, y, level, &res); 
#line 353
(*isResident) = (res != 0); 
#line 354
} 
#endif
#line 356 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\texture_indirect_functions.h"
template< class T> static T 
#line 357
tex2DLod(::cudaTextureObject_t texObject, float x, float y, float level, bool *isResident) {int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)level;(void)isResident;::exit(___);}
#if 0
#line 358
{ 
#line 359
T ret; 
#line 360
tex2DLod(&ret, texObject, x, y, level, isResident); 
#line 361
return ret; 
#line 362
} 
#endif
#line 367 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\texture_indirect_functions.h"
template< class T> static typename __nv_itex_trait< T> ::type 
#line 368
tex3DLod(T *ptr, ::cudaTextureObject_t obj, float x, float y, float z, float level) {int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)z;(void)level;::exit(___);}
#if 0
#line 369
{ 
#line 370
__nv_tex_surf_handler("__itex3DLod", ptr, obj, x, y, z, level); 
#line 371
} 
#endif
#line 373 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\texture_indirect_functions.h"
template< class T> static T 
#line 374
tex3DLod(::cudaTextureObject_t texObject, float x, float y, float z, float level) {int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)z;(void)level;::exit(___);}
#if 0
#line 375
{ 
#line 376
T ret; 
#line 377
tex3DLod(&ret, texObject, x, y, z, level); 
#line 378
return ret; 
#line 379
} 
#endif
#line 382 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\texture_indirect_functions.h"
template< class T> static typename __nv_itex_trait< T> ::type 
#line 383
tex3DLod(T *ptr, ::cudaTextureObject_t obj, float x, float y, float z, float level, bool *isResident) {int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)z;(void)level;(void)isResident;::exit(___);}
#if 0
#line 384
{ 
#line 385
unsigned char res; 
#line 386
__nv_tex_surf_handler("__itex3DLod_sparse", ptr, obj, x, y, z, level, &res); 
#line 387
(*isResident) = (res != 0); 
#line 388
} 
#endif
#line 390 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\texture_indirect_functions.h"
template< class T> static T 
#line 391
tex3DLod(::cudaTextureObject_t texObject, float x, float y, float z, float level, bool *isResident) {int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)z;(void)level;(void)isResident;::exit(___);}
#if 0
#line 392
{ 
#line 393
T ret; 
#line 394
tex3DLod(&ret, texObject, x, y, z, level, isResident); 
#line 395
return ret; 
#line 396
} 
#endif
#line 401 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\texture_indirect_functions.h"
template< class T> static typename __nv_itex_trait< T> ::type 
#line 402
tex1DLayeredLod(T *ptr, ::cudaTextureObject_t obj, float x, int layer, float level) {int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)layer;(void)level;::exit(___);}
#if 0
#line 403
{ 
#line 404
__nv_tex_surf_handler("__itex1DLayeredLod", ptr, obj, x, layer, level); 
#line 405
} 
#endif
#line 407 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\texture_indirect_functions.h"
template< class T> static T 
#line 408
tex1DLayeredLod(::cudaTextureObject_t texObject, float x, int layer, float level) {int volatile ___ = 1;(void)texObject;(void)x;(void)layer;(void)level;::exit(___);}
#if 0
#line 409
{ 
#line 410
T ret; 
#line 411
tex1DLayeredLod(&ret, texObject, x, layer, level); 
#line 412
return ret; 
#line 413
} 
#endif
#line 416 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\texture_indirect_functions.h"
template< class T> static typename __nv_itex_trait< T> ::type 
#line 417
tex2DLayeredLod(T *ptr, ::cudaTextureObject_t obj, float x, float y, int layer, float level) {int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)layer;(void)level;::exit(___);}
#if 0
#line 418
{ 
#line 419
__nv_tex_surf_handler("__itex2DLayeredLod", ptr, obj, x, y, layer, level); 
#line 420
} 
#endif
#line 422 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\texture_indirect_functions.h"
template< class T> static T 
#line 423
tex2DLayeredLod(::cudaTextureObject_t texObject, float x, float y, int layer, float level) {int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)layer;(void)level;::exit(___);}
#if 0
#line 424
{ 
#line 425
T ret; 
#line 426
tex2DLayeredLod(&ret, texObject, x, y, layer, level); 
#line 427
return ret; 
#line 428
} 
#endif
#line 431 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\texture_indirect_functions.h"
template< class T> static typename __nv_itex_trait< T> ::type 
#line 432
tex2DLayeredLod(T *ptr, ::cudaTextureObject_t obj, float x, float y, int layer, float level, bool *isResident) {int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)layer;(void)level;(void)isResident;::exit(___);}
#if 0
#line 433
{ 
#line 434
unsigned char res; 
#line 435
__nv_tex_surf_handler("__itex2DLayeredLod_sparse", ptr, obj, x, y, layer, level, &res); 
#line 436
(*isResident) = (res != 0); 
#line 437
} 
#endif
#line 439 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\texture_indirect_functions.h"
template< class T> static T 
#line 440
tex2DLayeredLod(::cudaTextureObject_t texObject, float x, float y, int layer, float level, bool *isResident) {int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)layer;(void)level;(void)isResident;::exit(___);}
#if 0
#line 441
{ 
#line 442
T ret; 
#line 443
tex2DLayeredLod(&ret, texObject, x, y, layer, level, isResident); 
#line 444
return ret; 
#line 445
} 
#endif
#line 448 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\texture_indirect_functions.h"
template< class T> static typename __nv_itex_trait< T> ::type 
#line 449
texCubemapLod(T *ptr, ::cudaTextureObject_t obj, float x, float y, float z, float level) {int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)z;(void)level;::exit(___);}
#if 0
#line 450
{ 
#line 451
__nv_tex_surf_handler("__itexCubemapLod", ptr, obj, x, y, z, level); 
#line 452
} 
#endif
#line 454 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\texture_indirect_functions.h"
template< class T> static T 
#line 455
texCubemapLod(::cudaTextureObject_t texObject, float x, float y, float z, float level) {int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)z;(void)level;::exit(___);}
#if 0
#line 456
{ 
#line 457
T ret; 
#line 458
texCubemapLod(&ret, texObject, x, y, z, level); 
#line 459
return ret; 
#line 460
} 
#endif
#line 463 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\texture_indirect_functions.h"
template< class T> static typename __nv_itex_trait< T> ::type 
#line 464
texCubemapGrad(T *ptr, ::cudaTextureObject_t obj, float x, float y, float z, ::float4 dPdx, ::float4 dPdy) {int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;::exit(___);}
#if 0
#line 465
{ 
#line 466
__nv_tex_surf_handler("__itexCubemapGrad_v2", ptr, obj, x, y, z, &dPdx, &dPdy); 
#line 467
} 
#endif
#line 469 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\texture_indirect_functions.h"
template< class T> static T 
#line 470
texCubemapGrad(::cudaTextureObject_t texObject, float x, float y, float z, ::float4 dPdx, ::float4 dPdy) {int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;::exit(___);}
#if 0
#line 471
{ 
#line 472
T ret; 
#line 473
texCubemapGrad(&ret, texObject, x, y, z, dPdx, dPdy); 
#line 474
return ret; 
#line 475
} 
#endif
#line 477 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\texture_indirect_functions.h"
template< class T> static typename __nv_itex_trait< T> ::type 
#line 478
texCubemapLayeredLod(T *ptr, ::cudaTextureObject_t obj, float x, float y, float z, int layer, float level) {int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)z;(void)layer;(void)level;::exit(___);}
#if 0
#line 479
{ 
#line 480
__nv_tex_surf_handler("__itexCubemapLayeredLod", ptr, obj, x, y, z, layer, level); 
#line 481
} 
#endif
#line 483 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\texture_indirect_functions.h"
template< class T> static T 
#line 484
texCubemapLayeredLod(::cudaTextureObject_t texObject, float x, float y, float z, int layer, float level) {int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)z;(void)layer;(void)level;::exit(___);}
#if 0
#line 485
{ 
#line 486
T ret; 
#line 487
texCubemapLayeredLod(&ret, texObject, x, y, z, layer, level); 
#line 488
return ret; 
#line 489
} 
#endif
#line 491 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\texture_indirect_functions.h"
template< class T> static typename __nv_itex_trait< T> ::type 
#line 492
tex1DGrad(T *ptr, ::cudaTextureObject_t obj, float x, float dPdx, float dPdy) {int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)dPdx;(void)dPdy;::exit(___);}
#if 0
#line 493
{ 
#line 494
__nv_tex_surf_handler("__itex1DGrad", ptr, obj, x, dPdx, dPdy); 
#line 495
} 
#endif
#line 497 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\texture_indirect_functions.h"
template< class T> static T 
#line 498
tex1DGrad(::cudaTextureObject_t texObject, float x, float dPdx, float dPdy) {int volatile ___ = 1;(void)texObject;(void)x;(void)dPdx;(void)dPdy;::exit(___);}
#if 0
#line 499
{ 
#line 500
T ret; 
#line 501
tex1DGrad(&ret, texObject, x, dPdx, dPdy); 
#line 502
return ret; 
#line 503
} 
#endif
#line 506 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\texture_indirect_functions.h"
template< class T> static typename __nv_itex_trait< T> ::type 
#line 507
tex2DGrad(T *ptr, ::cudaTextureObject_t obj, float x, float y, ::float2 dPdx, ::float2 dPdy) {int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)dPdx;(void)dPdy;::exit(___);}
#if 0
#line 508
{ 
#line 509
__nv_tex_surf_handler("__itex2DGrad_v2", ptr, obj, x, y, &dPdx, &dPdy); 
#line 510
} 
#endif
#line 512 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\texture_indirect_functions.h"
template< class T> static T 
#line 513
tex2DGrad(::cudaTextureObject_t texObject, float x, float y, ::float2 dPdx, ::float2 dPdy) {int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)dPdx;(void)dPdy;::exit(___);}
#if 0
#line 514
{ 
#line 515
T ret; 
#line 516
tex2DGrad(&ret, texObject, x, y, dPdx, dPdy); 
#line 517
return ret; 
#line 518
} 
#endif
#line 521 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\texture_indirect_functions.h"
template< class T> static typename __nv_itex_trait< T> ::type 
#line 522
tex2DGrad(T *ptr, ::cudaTextureObject_t obj, float x, float y, ::float2 dPdx, ::float2 dPdy, bool *isResident) {int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)dPdx;(void)dPdy;(void)isResident;::exit(___);}
#if 0
#line 523
{ 
#line 524
unsigned char res; 
#line 525
__nv_tex_surf_handler("__itex2DGrad_sparse", ptr, obj, x, y, &dPdx, &dPdy, &res); 
#line 526
(*isResident) = (res != 0); 
#line 527
} 
#endif
#line 529 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\texture_indirect_functions.h"
template< class T> static T 
#line 530
tex2DGrad(::cudaTextureObject_t texObject, float x, float y, ::float2 dPdx, ::float2 dPdy, bool *isResident) {int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)dPdx;(void)dPdy;(void)isResident;::exit(___);}
#if 0
#line 531
{ 
#line 532
T ret; 
#line 533
tex2DGrad(&ret, texObject, x, y, dPdx, dPdy, isResident); 
#line 534
return ret; 
#line 535
} 
#endif
#line 539 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\texture_indirect_functions.h"
template< class T> static typename __nv_itex_trait< T> ::type 
#line 540
tex3DGrad(T *ptr, ::cudaTextureObject_t obj, float x, float y, float z, ::float4 dPdx, ::float4 dPdy) {int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;::exit(___);}
#if 0
#line 541
{ 
#line 542
__nv_tex_surf_handler("__itex3DGrad_v2", ptr, obj, x, y, z, &dPdx, &dPdy); 
#line 543
} 
#endif
#line 545 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\texture_indirect_functions.h"
template< class T> static T 
#line 546
tex3DGrad(::cudaTextureObject_t texObject, float x, float y, float z, ::float4 dPdx, ::float4 dPdy) {int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;::exit(___);}
#if 0
#line 547
{ 
#line 548
T ret; 
#line 549
tex3DGrad(&ret, texObject, x, y, z, dPdx, dPdy); 
#line 550
return ret; 
#line 551
} 
#endif
#line 554 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\texture_indirect_functions.h"
template< class T> static typename __nv_itex_trait< T> ::type 
#line 555
tex3DGrad(T *ptr, ::cudaTextureObject_t obj, float x, float y, float z, ::float4 dPdx, ::float4 dPdy, bool *isResident) {int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;(void)isResident;::exit(___);}
#if 0
#line 556
{ 
#line 557
unsigned char res; 
#line 558
__nv_tex_surf_handler("__itex3DGrad_sparse", ptr, obj, x, y, z, &dPdx, &dPdy, &res); 
#line 559
(*isResident) = (res != 0); 
#line 560
} 
#endif
#line 562 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\texture_indirect_functions.h"
template< class T> static T 
#line 563
tex3DGrad(::cudaTextureObject_t texObject, float x, float y, float z, ::float4 dPdx, ::float4 dPdy, bool *isResident) {int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;(void)isResident;::exit(___);}
#if 0
#line 564
{ 
#line 565
T ret; 
#line 566
tex3DGrad(&ret, texObject, x, y, z, dPdx, dPdy, isResident); 
#line 567
return ret; 
#line 568
} 
#endif
#line 573 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\texture_indirect_functions.h"
template< class T> static typename __nv_itex_trait< T> ::type 
#line 574
tex1DLayeredGrad(T *ptr, ::cudaTextureObject_t obj, float x, int layer, float dPdx, float dPdy) {int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)layer;(void)dPdx;(void)dPdy;::exit(___);}
#if 0
#line 575
{ 
#line 576
__nv_tex_surf_handler("__itex1DLayeredGrad", ptr, obj, x, layer, dPdx, dPdy); 
#line 577
} 
#endif
#line 579 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\texture_indirect_functions.h"
template< class T> static T 
#line 580
tex1DLayeredGrad(::cudaTextureObject_t texObject, float x, int layer, float dPdx, float dPdy) {int volatile ___ = 1;(void)texObject;(void)x;(void)layer;(void)dPdx;(void)dPdy;::exit(___);}
#if 0
#line 581
{ 
#line 582
T ret; 
#line 583
tex1DLayeredGrad(&ret, texObject, x, layer, dPdx, dPdy); 
#line 584
return ret; 
#line 585
} 
#endif
#line 588 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\texture_indirect_functions.h"
template< class T> static typename __nv_itex_trait< T> ::type 
#line 589
tex2DLayeredGrad(T *ptr, ::cudaTextureObject_t obj, float x, float y, int layer, ::float2 dPdx, ::float2 dPdy) {int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)layer;(void)dPdx;(void)dPdy;::exit(___);}
#if 0
#line 590
{ 
#line 591
__nv_tex_surf_handler("__itex2DLayeredGrad_v2", ptr, obj, x, y, layer, &dPdx, &dPdy); 
#line 592
} 
#endif
#line 594 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\texture_indirect_functions.h"
template< class T> static T 
#line 595
tex2DLayeredGrad(::cudaTextureObject_t texObject, float x, float y, int layer, ::float2 dPdx, ::float2 dPdy) {int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)layer;(void)dPdx;(void)dPdy;::exit(___);}
#if 0
#line 596
{ 
#line 597
T ret; 
#line 598
tex2DLayeredGrad(&ret, texObject, x, y, layer, dPdx, dPdy); 
#line 599
return ret; 
#line 600
} 
#endif
#line 603 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\texture_indirect_functions.h"
template< class T> static typename __nv_itex_trait< T> ::type 
#line 604
tex2DLayeredGrad(T *ptr, ::cudaTextureObject_t obj, float x, float y, int layer, ::float2 dPdx, ::float2 dPdy, bool *isResident) {int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)layer;(void)dPdx;(void)dPdy;(void)isResident;::exit(___);}
#if 0
#line 605
{ 
#line 606
unsigned char res; 
#line 607
__nv_tex_surf_handler("__itex2DLayeredGrad_sparse", ptr, obj, x, y, layer, &dPdx, &dPdy, &res); 
#line 608
(*isResident) = (res != 0); 
#line 609
} 
#endif
#line 611 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\texture_indirect_functions.h"
template< class T> static T 
#line 612
tex2DLayeredGrad(::cudaTextureObject_t texObject, float x, float y, int layer, ::float2 dPdx, ::float2 dPdy, bool *isResident) {int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)layer;(void)dPdx;(void)dPdy;(void)isResident;::exit(___);}
#if 0
#line 613
{ 
#line 614
T ret; 
#line 615
tex2DLayeredGrad(&ret, texObject, x, y, layer, dPdx, dPdy, isResident); 
#line 616
return ret; 
#line 617
} 
#endif
#line 621 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\texture_indirect_functions.h"
template< class T> static typename __nv_itex_trait< T> ::type 
#line 622
texCubemapLayeredGrad(T *ptr, ::cudaTextureObject_t obj, float x, float y, float z, int layer, ::float4 dPdx, ::float4 dPdy) {int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)z;(void)layer;(void)dPdx;(void)dPdy;::exit(___);}
#if 0
#line 623
{ 
#line 624
__nv_tex_surf_handler("__itexCubemapLayeredGrad_v2", ptr, obj, x, y, z, layer, &dPdx, &dPdy); 
#line 625
} 
#endif
#line 627 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\texture_indirect_functions.h"
template< class T> static T 
#line 628
texCubemapLayeredGrad(::cudaTextureObject_t texObject, float x, float y, float z, int layer, ::float4 dPdx, ::float4 dPdy) {int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)z;(void)layer;(void)dPdx;(void)dPdy;::exit(___);}
#if 0
#line 629
{ 
#line 630
T ret; 
#line 631
texCubemapLayeredGrad(&ret, texObject, x, y, z, layer, dPdx, dPdy); 
#line 632
return ret; 
#line 633
} 
#endif
#line 58 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\surface_indirect_functions.h"
template< class T> struct __nv_isurf_trait { }; 
#line 59
template<> struct __nv_isurf_trait< char>  { typedef void type; }; 
#line 60
template<> struct __nv_isurf_trait< signed char>  { typedef void type; }; 
#line 61
template<> struct __nv_isurf_trait< char1>  { typedef void type; }; 
#line 62
template<> struct __nv_isurf_trait< unsigned char>  { typedef void type; }; 
#line 63
template<> struct __nv_isurf_trait< uchar1>  { typedef void type; }; 
#line 64
template<> struct __nv_isurf_trait< short>  { typedef void type; }; 
#line 65
template<> struct __nv_isurf_trait< short1>  { typedef void type; }; 
#line 66
template<> struct __nv_isurf_trait< unsigned short>  { typedef void type; }; 
#line 67
template<> struct __nv_isurf_trait< ushort1>  { typedef void type; }; 
#line 68
template<> struct __nv_isurf_trait< int>  { typedef void type; }; 
#line 69
template<> struct __nv_isurf_trait< int1>  { typedef void type; }; 
#line 70
template<> struct __nv_isurf_trait< unsigned>  { typedef void type; }; 
#line 71
template<> struct __nv_isurf_trait< uint1>  { typedef void type; }; 
#line 72
template<> struct __nv_isurf_trait< __int64>  { typedef void type; }; 
#line 73
template<> struct __nv_isurf_trait< longlong1>  { typedef void type; }; 
#line 74
template<> struct __nv_isurf_trait< unsigned __int64>  { typedef void type; }; 
#line 75
template<> struct __nv_isurf_trait< ulonglong1>  { typedef void type; }; 
#line 76
template<> struct __nv_isurf_trait< float>  { typedef void type; }; 
#line 77
template<> struct __nv_isurf_trait< float1>  { typedef void type; }; 
#line 79
template<> struct __nv_isurf_trait< char2>  { typedef void type; }; 
#line 80
template<> struct __nv_isurf_trait< uchar2>  { typedef void type; }; 
#line 81
template<> struct __nv_isurf_trait< short2>  { typedef void type; }; 
#line 82
template<> struct __nv_isurf_trait< ushort2>  { typedef void type; }; 
#line 83
template<> struct __nv_isurf_trait< int2>  { typedef void type; }; 
#line 84
template<> struct __nv_isurf_trait< uint2>  { typedef void type; }; 
#line 85
template<> struct __nv_isurf_trait< longlong2>  { typedef void type; }; 
#line 86
template<> struct __nv_isurf_trait< ulonglong2>  { typedef void type; }; 
#line 87
template<> struct __nv_isurf_trait< float2>  { typedef void type; }; 
#line 89
template<> struct __nv_isurf_trait< char4>  { typedef void type; }; 
#line 90
template<> struct __nv_isurf_trait< uchar4>  { typedef void type; }; 
#line 91
template<> struct __nv_isurf_trait< short4>  { typedef void type; }; 
#line 92
template<> struct __nv_isurf_trait< ushort4>  { typedef void type; }; 
#line 93
template<> struct __nv_isurf_trait< int4>  { typedef void type; }; 
#line 94
template<> struct __nv_isurf_trait< uint4>  { typedef void type; }; 
#line 95
template<> struct __nv_isurf_trait< float4>  { typedef void type; }; 
#line 98
template< class T> static typename __nv_isurf_trait< T> ::type 
#line 99
surf1Dread(T *ptr, ::cudaSurfaceObject_t obj, int x, ::cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) {int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)mode;::exit(___);}
#if 0
#line 100
{ 
#line 101
__nv_tex_surf_handler("__isurf1Dread", ptr, obj, x, mode); 
#line 102
} 
#endif
#line 104 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\surface_indirect_functions.h"
template< class T> static T 
#line 105
surf1Dread(::cudaSurfaceObject_t surfObject, int x, ::cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap) {int volatile ___ = 1;(void)surfObject;(void)x;(void)boundaryMode;::exit(___);}
#if 0
#line 106
{ 
#line 107
T ret; 
#line 108
surf1Dread(&ret, surfObject, x, boundaryMode); 
#line 109
return ret; 
#line 110
} 
#endif
#line 112 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\surface_indirect_functions.h"
template< class T> static typename __nv_isurf_trait< T> ::type 
#line 113
surf2Dread(T *ptr, ::cudaSurfaceObject_t obj, int x, int y, ::cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) {int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)mode;::exit(___);}
#if 0
#line 114
{ 
#line 115
__nv_tex_surf_handler("__isurf2Dread", ptr, obj, x, y, mode); 
#line 116
} 
#endif
#line 118 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\surface_indirect_functions.h"
template< class T> static T 
#line 119
surf2Dread(::cudaSurfaceObject_t surfObject, int x, int y, ::cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap) {int volatile ___ = 1;(void)surfObject;(void)x;(void)y;(void)boundaryMode;::exit(___);}
#if 0
#line 120
{ 
#line 121
T ret; 
#line 122
surf2Dread(&ret, surfObject, x, y, boundaryMode); 
#line 123
return ret; 
#line 124
} 
#endif
#line 127 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\surface_indirect_functions.h"
template< class T> static typename __nv_isurf_trait< T> ::type 
#line 128
surf3Dread(T *ptr, ::cudaSurfaceObject_t obj, int x, int y, int z, ::cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) {int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)z;(void)mode;::exit(___);}
#if 0
#line 129
{ 
#line 130
__nv_tex_surf_handler("__isurf3Dread", ptr, obj, x, y, z, mode); 
#line 131
} 
#endif
#line 133 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\surface_indirect_functions.h"
template< class T> static T 
#line 134
surf3Dread(::cudaSurfaceObject_t surfObject, int x, int y, int z, ::cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap) {int volatile ___ = 1;(void)surfObject;(void)x;(void)y;(void)z;(void)boundaryMode;::exit(___);}
#if 0
#line 135
{ 
#line 136
T ret; 
#line 137
surf3Dread(&ret, surfObject, x, y, z, boundaryMode); 
#line 138
return ret; 
#line 139
} 
#endif
#line 141 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\surface_indirect_functions.h"
template< class T> static typename __nv_isurf_trait< T> ::type 
#line 142
surf1DLayeredread(T *ptr, ::cudaSurfaceObject_t obj, int x, int layer, ::cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) {int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)layer;(void)mode;::exit(___);}
#if 0
#line 143
{ 
#line 144
__nv_tex_surf_handler("__isurf1DLayeredread", ptr, obj, x, layer, mode); 
#line 145
} 
#endif
#line 147 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\surface_indirect_functions.h"
template< class T> static T 
#line 148
surf1DLayeredread(::cudaSurfaceObject_t surfObject, int x, int layer, ::cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap) {int volatile ___ = 1;(void)surfObject;(void)x;(void)layer;(void)boundaryMode;::exit(___);}
#if 0
#line 149
{ 
#line 150
T ret; 
#line 151
surf1DLayeredread(&ret, surfObject, x, layer, boundaryMode); 
#line 152
return ret; 
#line 153
} 
#endif
#line 155 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\surface_indirect_functions.h"
template< class T> static typename __nv_isurf_trait< T> ::type 
#line 156
surf2DLayeredread(T *ptr, ::cudaSurfaceObject_t obj, int x, int y, int layer, ::cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) {int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)layer;(void)mode;::exit(___);}
#if 0
#line 157
{ 
#line 158
__nv_tex_surf_handler("__isurf2DLayeredread", ptr, obj, x, y, layer, mode); 
#line 159
} 
#endif
#line 161 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\surface_indirect_functions.h"
template< class T> static T 
#line 162
surf2DLayeredread(::cudaSurfaceObject_t surfObject, int x, int y, int layer, ::cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap) {int volatile ___ = 1;(void)surfObject;(void)x;(void)y;(void)layer;(void)boundaryMode;::exit(___);}
#if 0
#line 163
{ 
#line 164
T ret; 
#line 165
surf2DLayeredread(&ret, surfObject, x, y, layer, boundaryMode); 
#line 166
return ret; 
#line 167
} 
#endif
#line 169 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\surface_indirect_functions.h"
template< class T> static typename __nv_isurf_trait< T> ::type 
#line 170
surfCubemapread(T *ptr, ::cudaSurfaceObject_t obj, int x, int y, int face, ::cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) {int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)face;(void)mode;::exit(___);}
#if 0
#line 171
{ 
#line 172
__nv_tex_surf_handler("__isurfCubemapread", ptr, obj, x, y, face, mode); 
#line 173
} 
#endif
#line 175 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\surface_indirect_functions.h"
template< class T> static T 
#line 176
surfCubemapread(::cudaSurfaceObject_t surfObject, int x, int y, int face, ::cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap) {int volatile ___ = 1;(void)surfObject;(void)x;(void)y;(void)face;(void)boundaryMode;::exit(___);}
#if 0
#line 177
{ 
#line 178
T ret; 
#line 179
surfCubemapread(&ret, surfObject, x, y, face, boundaryMode); 
#line 180
return ret; 
#line 181
} 
#endif
#line 183 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\surface_indirect_functions.h"
template< class T> static typename __nv_isurf_trait< T> ::type 
#line 184
surfCubemapLayeredread(T *ptr, ::cudaSurfaceObject_t obj, int x, int y, int layerface, ::cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) {int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)layerface;(void)mode;::exit(___);}
#if 0
#line 185
{ 
#line 186
__nv_tex_surf_handler("__isurfCubemapLayeredread", ptr, obj, x, y, layerface, mode); 
#line 187
} 
#endif
#line 189 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\surface_indirect_functions.h"
template< class T> static T 
#line 190
surfCubemapLayeredread(::cudaSurfaceObject_t surfObject, int x, int y, int layerface, ::cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap) {int volatile ___ = 1;(void)surfObject;(void)x;(void)y;(void)layerface;(void)boundaryMode;::exit(___);}
#if 0
#line 191
{ 
#line 192
T ret; 
#line 193
surfCubemapLayeredread(&ret, surfObject, x, y, layerface, boundaryMode); 
#line 194
return ret; 
#line 195
} 
#endif
#line 197 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\surface_indirect_functions.h"
template< class T> static typename __nv_isurf_trait< T> ::type 
#line 198
surf1Dwrite(T val, ::cudaSurfaceObject_t obj, int x, ::cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) {int volatile ___ = 1;(void)val;(void)obj;(void)x;(void)mode;::exit(___);}
#if 0
#line 199
{ 
#line 200
__nv_tex_surf_handler("__isurf1Dwrite_v2", &val, obj, x, mode); 
#line 201
} 
#endif
#line 203 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\surface_indirect_functions.h"
template< class T> static typename __nv_isurf_trait< T> ::type 
#line 204
surf2Dwrite(T val, ::cudaSurfaceObject_t obj, int x, int y, ::cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) {int volatile ___ = 1;(void)val;(void)obj;(void)x;(void)y;(void)mode;::exit(___);}
#if 0
#line 205
{ 
#line 206
__nv_tex_surf_handler("__isurf2Dwrite_v2", &val, obj, x, y, mode); 
#line 207
} 
#endif
#line 209 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\surface_indirect_functions.h"
template< class T> static typename __nv_isurf_trait< T> ::type 
#line 210
surf3Dwrite(T val, ::cudaSurfaceObject_t obj, int x, int y, int z, ::cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) {int volatile ___ = 1;(void)val;(void)obj;(void)x;(void)y;(void)z;(void)mode;::exit(___);}
#if 0
#line 211
{ 
#line 212
__nv_tex_surf_handler("__isurf3Dwrite_v2", &val, obj, x, y, z, mode); 
#line 213
} 
#endif
#line 215 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\surface_indirect_functions.h"
template< class T> static typename __nv_isurf_trait< T> ::type 
#line 216
surf1DLayeredwrite(T val, ::cudaSurfaceObject_t obj, int x, int layer, ::cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) {int volatile ___ = 1;(void)val;(void)obj;(void)x;(void)layer;(void)mode;::exit(___);}
#if 0
#line 217
{ 
#line 218
__nv_tex_surf_handler("__isurf1DLayeredwrite_v2", &val, obj, x, layer, mode); 
#line 219
} 
#endif
#line 221 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\surface_indirect_functions.h"
template< class T> static typename __nv_isurf_trait< T> ::type 
#line 222
surf2DLayeredwrite(T val, ::cudaSurfaceObject_t obj, int x, int y, int layer, ::cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) {int volatile ___ = 1;(void)val;(void)obj;(void)x;(void)y;(void)layer;(void)mode;::exit(___);}
#if 0
#line 223
{ 
#line 224
__nv_tex_surf_handler("__isurf2DLayeredwrite_v2", &val, obj, x, y, layer, mode); 
#line 225
} 
#endif
#line 227 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\surface_indirect_functions.h"
template< class T> static typename __nv_isurf_trait< T> ::type 
#line 228
surfCubemapwrite(T val, ::cudaSurfaceObject_t obj, int x, int y, int face, ::cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) {int volatile ___ = 1;(void)val;(void)obj;(void)x;(void)y;(void)face;(void)mode;::exit(___);}
#if 0
#line 229
{ 
#line 230
__nv_tex_surf_handler("__isurfCubemapwrite_v2", &val, obj, x, y, face, mode); 
#line 231
} 
#endif
#line 233 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\surface_indirect_functions.h"
template< class T> static typename __nv_isurf_trait< T> ::type 
#line 234
surfCubemapLayeredwrite(T val, ::cudaSurfaceObject_t obj, int x, int y, int layerface, ::cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) {int volatile ___ = 1;(void)val;(void)obj;(void)x;(void)y;(void)layerface;(void)mode;::exit(___);}
#if 0
#line 235
{ 
#line 236
__nv_tex_surf_handler("__isurfCubemapLayeredwrite_v2", &val, obj, x, y, layerface, mode); 
#line 237
} 
#endif
#line 3634 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\crt/device_functions.h"
extern "C" unsigned __stdcall __cudaPushCallConfiguration(dim3 gridDim, dim3 blockDim, size_t sharedMem = 0, CUstream_st * stream = 0); 
#line 68 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\device_launch_parameters.h"
extern "C" {
#line 71 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\device_launch_parameters.h"
extern const uint3 __device_builtin_variable_threadIdx; 
#line 72
extern const uint3 __device_builtin_variable_blockIdx; 
#line 73
extern const dim3 __device_builtin_variable_blockDim; 
#line 74
extern const dim3 __device_builtin_variable_gridDim; 
#line 75
extern const int __device_builtin_variable_warpSize; 
#line 80
}
#line 206 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\cuda_runtime.h"
template< class T> static __inline ::cudaError_t 
#line 207
cudaLaunchKernel(const T *
#line 208
func, ::dim3 
#line 209
gridDim, ::dim3 
#line 210
blockDim, void **
#line 211
args, ::size_t 
#line 212
sharedMem = 0, ::cudaStream_t 
#line 213
stream = 0) 
#line 215
{ 
#line 216
return ::cudaLaunchKernel((const void *)func, gridDim, blockDim, args, sharedMem, stream); 
#line 217
} 
#line 340 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\cuda_runtime.h"
template< class T> static __inline ::cudaError_t 
#line 341
cudaLaunchCooperativeKernel(const T *
#line 342
func, ::dim3 
#line 343
gridDim, ::dim3 
#line 344
blockDim, void **
#line 345
args, ::size_t 
#line 346
sharedMem = 0, ::cudaStream_t 
#line 347
stream = 0) 
#line 349
{ 
#line 350
return ::cudaLaunchCooperativeKernel((const void *)func, gridDim, blockDim, args, sharedMem, stream); 
#line 351
} 
#line 384
static __inline cudaError_t cudaEventCreate(cudaEvent_t *
#line 385
event, unsigned 
#line 386
flags) 
#line 388
{ 
#line 389
return ::cudaEventCreateWithFlags(event, flags); 
#line 390
} 
#line 428
static __inline cudaError_t cudaGraphInstantiate(cudaGraphExec_t *
#line 429
pGraphExec, cudaGraph_t 
#line 430
graph, cudaGraphNode_t *
#line 431
pErrorNode, char *
#line 432
pLogBuffer, size_t 
#line 433
bufferSize) 
#line 435
{ 
#line 436
(void)pErrorNode; 
#line 437
(void)pLogBuffer; 
#line 438
(void)bufferSize; 
#line 439
return ::cudaGraphInstantiate(pGraphExec, graph, 0); 
#line 440
} 
#line 499
static __inline cudaError_t cudaMallocHost(void **
#line 500
ptr, size_t 
#line 501
size, unsigned 
#line 502
flags) 
#line 504
{ 
#line 505
return ::cudaHostAlloc(ptr, size, flags); 
#line 506
} 
#line 508
template< class T> static __inline ::cudaError_t 
#line 509
cudaHostAlloc(T **
#line 510
ptr, ::size_t 
#line 511
size, unsigned 
#line 512
flags) 
#line 514
{ 
#line 515
return ::cudaHostAlloc((void **)((void *)ptr), size, flags); 
#line 516
} 
#line 518
template< class T> static __inline ::cudaError_t 
#line 519
cudaHostGetDevicePointer(T **
#line 520
pDevice, void *
#line 521
pHost, unsigned 
#line 522
flags) 
#line 524
{ 
#line 525
return ::cudaHostGetDevicePointer((void **)((void *)pDevice), pHost, flags); 
#line 526
} 
#line 628
template< class T> static __inline ::cudaError_t 
#line 629
cudaMallocManaged(T **
#line 630
devPtr, ::size_t 
#line 631
size, unsigned 
#line 632
flags = 1) 
#line 634
{ 
#line 635
return ::cudaMallocManaged((void **)((void *)devPtr), size, flags); 
#line 636
} 
#line 718
template< class T> static __inline ::cudaError_t 
#line 719
cudaStreamAttachMemAsync(::cudaStream_t 
#line 720
stream, T *
#line 721
devPtr, ::size_t 
#line 722
length = 0, unsigned 
#line 723
flags = 4) 
#line 725
{ 
#line 726
return ::cudaStreamAttachMemAsync(stream, (void *)devPtr, length, flags); 
#line 727
} 
#line 729
template< class T> __inline ::cudaError_t 
#line 730
cudaMalloc(T **
#line 731
devPtr, ::size_t 
#line 732
size) 
#line 734
{ 
#line 735
return ::cudaMalloc((void **)((void *)devPtr), size); 
#line 736
} 
#line 738
template< class T> static __inline ::cudaError_t 
#line 739
cudaMallocHost(T **
#line 740
ptr, ::size_t 
#line 741
size, unsigned 
#line 742
flags = 0) 
#line 744
{ 
#line 745
return cudaMallocHost((void **)((void *)ptr), size, flags); 
#line 746
} 
#line 748
template< class T> static __inline ::cudaError_t 
#line 749
cudaMallocPitch(T **
#line 750
devPtr, ::size_t *
#line 751
pitch, ::size_t 
#line 752
width, ::size_t 
#line 753
height) 
#line 755
{ 
#line 756
return ::cudaMallocPitch((void **)((void *)devPtr), pitch, width, height); 
#line 757
} 
#line 768
static __inline cudaError_t cudaMallocAsync(void **
#line 769
ptr, size_t 
#line 770
size, cudaMemPool_t 
#line 771
memPool, cudaStream_t 
#line 772
stream) 
#line 774
{ 
#line 775
return ::cudaMallocFromPoolAsync(ptr, size, memPool, stream); 
#line 776
} 
#line 778
template< class T> static __inline ::cudaError_t 
#line 779
cudaMallocAsync(T **
#line 780
ptr, ::size_t 
#line 781
size, ::cudaMemPool_t 
#line 782
memPool, ::cudaStream_t 
#line 783
stream) 
#line 785
{ 
#line 786
return ::cudaMallocFromPoolAsync((void **)((void *)ptr), size, memPool, stream); 
#line 787
} 
#line 789
template< class T> static __inline ::cudaError_t 
#line 790
cudaMallocAsync(T **
#line 791
ptr, ::size_t 
#line 792
size, ::cudaStream_t 
#line 793
stream) 
#line 795
{ 
#line 796
return ::cudaMallocAsync((void **)((void *)ptr), size, stream); 
#line 797
} 
#line 799
template< class T> static __inline ::cudaError_t 
#line 800
cudaMallocFromPoolAsync(T **
#line 801
ptr, ::size_t 
#line 802
size, ::cudaMemPool_t 
#line 803
memPool, ::cudaStream_t 
#line 804
stream) 
#line 806
{ 
#line 807
return ::cudaMallocFromPoolAsync((void **)((void *)ptr), size, memPool, stream); 
#line 808
} 
#line 847
template< class T> static __inline ::cudaError_t 
#line 848
cudaMemcpyToSymbol(const T &
#line 849
symbol, const void *
#line 850
src, ::size_t 
#line 851
count, ::size_t 
#line 852
offset = 0, ::cudaMemcpyKind 
#line 853
kind = cudaMemcpyHostToDevice) 
#line 855
{ 
#line 856
return ::cudaMemcpyToSymbol((const void *)(&symbol), src, count, offset, kind); 
#line 857
} 
#line 901
template< class T> static __inline ::cudaError_t 
#line 902
cudaMemcpyToSymbolAsync(const T &
#line 903
symbol, const void *
#line 904
src, ::size_t 
#line 905
count, ::size_t 
#line 906
offset = 0, ::cudaMemcpyKind 
#line 907
kind = cudaMemcpyHostToDevice, ::cudaStream_t 
#line 908
stream = 0) 
#line 910
{ 
#line 911
return ::cudaMemcpyToSymbolAsync((const void *)(&symbol), src, count, offset, kind, stream); 
#line 912
} 
#line 949
template< class T> static __inline ::cudaError_t 
#line 950
cudaMemcpyFromSymbol(void *
#line 951
dst, const T &
#line 952
symbol, ::size_t 
#line 953
count, ::size_t 
#line 954
offset = 0, ::cudaMemcpyKind 
#line 955
kind = cudaMemcpyDeviceToHost) 
#line 957
{ 
#line 958
return ::cudaMemcpyFromSymbol(dst, (const void *)(&symbol), count, offset, kind); 
#line 959
} 
#line 1003
template< class T> static __inline ::cudaError_t 
#line 1004
cudaMemcpyFromSymbolAsync(void *
#line 1005
dst, const T &
#line 1006
symbol, ::size_t 
#line 1007
count, ::size_t 
#line 1008
offset = 0, ::cudaMemcpyKind 
#line 1009
kind = cudaMemcpyDeviceToHost, ::cudaStream_t 
#line 1010
stream = 0) 
#line 1012
{ 
#line 1013
return ::cudaMemcpyFromSymbolAsync(dst, (const void *)(&symbol), count, offset, kind, stream); 
#line 1014
} 
#line 1072
template< class T> static __inline ::cudaError_t 
#line 1073
cudaGraphAddMemcpyNodeToSymbol(::cudaGraphNode_t *
#line 1074
pGraphNode, ::cudaGraph_t 
#line 1075
graph, const ::cudaGraphNode_t *
#line 1076
pDependencies, ::size_t 
#line 1077
numDependencies, const T &
#line 1078
symbol, const void *
#line 1079
src, ::size_t 
#line 1080
count, ::size_t 
#line 1081
offset, ::cudaMemcpyKind 
#line 1082
kind) 
#line 1083
{ 
#line 1084
return ::cudaGraphAddMemcpyNodeToSymbol(pGraphNode, graph, pDependencies, numDependencies, (const void *)(&symbol), src, count, offset, kind); 
#line 1085
} 
#line 1143
template< class T> static __inline ::cudaError_t 
#line 1144
cudaGraphAddMemcpyNodeFromSymbol(::cudaGraphNode_t *
#line 1145
pGraphNode, ::cudaGraph_t 
#line 1146
graph, const ::cudaGraphNode_t *
#line 1147
pDependencies, ::size_t 
#line 1148
numDependencies, void *
#line 1149
dst, const T &
#line 1150
symbol, ::size_t 
#line 1151
count, ::size_t 
#line 1152
offset, ::cudaMemcpyKind 
#line 1153
kind) 
#line 1154
{ 
#line 1155
return ::cudaGraphAddMemcpyNodeFromSymbol(pGraphNode, graph, pDependencies, numDependencies, dst, (const void *)(&symbol), count, offset, kind); 
#line 1156
} 
#line 1194
template< class T> static __inline ::cudaError_t 
#line 1195
cudaGraphMemcpyNodeSetParamsToSymbol(::cudaGraphNode_t 
#line 1196
node, const T &
#line 1197
symbol, const void *
#line 1198
src, ::size_t 
#line 1199
count, ::size_t 
#line 1200
offset, ::cudaMemcpyKind 
#line 1201
kind) 
#line 1202
{ 
#line 1203
return ::cudaGraphMemcpyNodeSetParamsToSymbol(node, (const void *)(&symbol), src, count, offset, kind); 
#line 1204
} 
#line 1242
template< class T> static __inline ::cudaError_t 
#line 1243
cudaGraphMemcpyNodeSetParamsFromSymbol(::cudaGraphNode_t 
#line 1244
node, void *
#line 1245
dst, const T &
#line 1246
symbol, ::size_t 
#line 1247
count, ::size_t 
#line 1248
offset, ::cudaMemcpyKind 
#line 1249
kind) 
#line 1250
{ 
#line 1251
return ::cudaGraphMemcpyNodeSetParamsFromSymbol(node, dst, (const void *)(&symbol), count, offset, kind); 
#line 1252
} 
#line 1300
template< class T> static __inline ::cudaError_t 
#line 1301
cudaGraphExecMemcpyNodeSetParamsToSymbol(::cudaGraphExec_t 
#line 1302
hGraphExec, ::cudaGraphNode_t 
#line 1303
node, const T &
#line 1304
symbol, const void *
#line 1305
src, ::size_t 
#line 1306
count, ::size_t 
#line 1307
offset, ::cudaMemcpyKind 
#line 1308
kind) 
#line 1309
{ 
#line 1310
return ::cudaGraphExecMemcpyNodeSetParamsToSymbol(hGraphExec, node, (const void *)(&symbol), src, count, offset, kind); 
#line 1311
} 
#line 1359
template< class T> static __inline ::cudaError_t 
#line 1360
cudaGraphExecMemcpyNodeSetParamsFromSymbol(::cudaGraphExec_t 
#line 1361
hGraphExec, ::cudaGraphNode_t 
#line 1362
node, void *
#line 1363
dst, const T &
#line 1364
symbol, ::size_t 
#line 1365
count, ::size_t 
#line 1366
offset, ::cudaMemcpyKind 
#line 1367
kind) 
#line 1368
{ 
#line 1369
return ::cudaGraphExecMemcpyNodeSetParamsFromSymbol(hGraphExec, node, dst, (const void *)(&symbol), count, offset, kind); 
#line 1370
} 
#line 1373
static __inline cudaError_t __stdcall cudaGraphExecUpdate(cudaGraphExec_t hGraphExec, cudaGraph_t hGraph, cudaGraphNode_t *hErrorNode_out, cudaGraphExecUpdateResult *updateResult_out) 
#line 1374
{ 
#line 1375
cudaGraphExecUpdateResultInfo resultInfo; 
#line 1376
cudaError_t status = cudaGraphExecUpdate(hGraphExec, hGraph, &resultInfo); 
#line 1377
if (hErrorNode_out) { 
#line 1378
(*hErrorNode_out) = (resultInfo.errorNode); 
#line 1379
}  
#line 1380
if (updateResult_out) { 
#line 1381
(*updateResult_out) = (resultInfo.result); 
#line 1382
}  
#line 1383
return status; 
#line 1384
} 
#line 1462 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\cuda_runtime.h"
template< class T> static __inline ::cudaError_t 
#line 1463
cudaGetSymbolAddress(void **
#line 1464
devPtr, const T &
#line 1465
symbol) 
#line 1467
{ 
#line 1468
return ::cudaGetSymbolAddress(devPtr, (const void *)(&symbol)); 
#line 1469
} 
#line 1494
template< class T> static __inline ::cudaError_t 
#line 1495
cudaGetSymbolSize(::size_t *
#line 1496
size, const T &
#line 1497
symbol) 
#line 1499
{ 
#line 1500
return ::cudaGetSymbolSize(size, (const void *)(&symbol)); 
#line 1501
} 
#line 1546
template< class T> static __inline ::cudaError_t 
#line 1547
cudaFuncSetCacheConfig(T *
#line 1548
func, ::cudaFuncCache 
#line 1549
cacheConfig) 
#line 1551
{ 
#line 1552
return ::cudaFuncSetCacheConfig((const void *)func, cacheConfig); 
#line 1553
} 
#line 1555
template< class T> static __inline ::cudaError_t 
#line 1556
cudaFuncSetSharedMemConfig(T *
#line 1557
func, ::cudaSharedMemConfig 
#line 1558
config) 
#line 1560
{ 
#line 1561
return ::cudaFuncSetSharedMemConfig((const void *)func, config); 
#line 1562
} 
#line 1594 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\cuda_runtime.h"
template< class T> __inline ::cudaError_t 
#line 1595
cudaOccupancyMaxActiveBlocksPerMultiprocessor(int *
#line 1596
numBlocks, T 
#line 1597
func, int 
#line 1598
blockSize, ::size_t 
#line 1599
dynamicSMemSize) 
#line 1600
{ 
#line 1601
return ::cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags(numBlocks, (const void *)func, blockSize, dynamicSMemSize, 0); 
#line 1602
} 
#line 1646
template< class T> __inline ::cudaError_t 
#line 1647
cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags(int *
#line 1648
numBlocks, T 
#line 1649
func, int 
#line 1650
blockSize, ::size_t 
#line 1651
dynamicSMemSize, unsigned 
#line 1652
flags) 
#line 1653
{ 
#line 1654
return ::cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags(numBlocks, (const void *)func, blockSize, dynamicSMemSize, flags); 
#line 1655
} 
#line 1660
class __cudaOccupancyB2DHelper { 
#line 1661
size_t n; 
#line 1663
public: __cudaOccupancyB2DHelper(size_t n_) : n(n_) { } 
#line 1664
size_t operator()(int) 
#line 1665
{ 
#line 1666
return n; 
#line 1667
} 
#line 1668
}; 
#line 1716
template< class UnaryFunction, class T> static __inline ::cudaError_t 
#line 1717
cudaOccupancyMaxPotentialBlockSizeVariableSMemWithFlags(int *
#line 1718
minGridSize, int *
#line 1719
blockSize, T 
#line 1720
func, UnaryFunction 
#line 1721
blockSizeToDynamicSMemSize, int 
#line 1722
blockSizeLimit = 0, unsigned 
#line 1723
flags = 0) 
#line 1724
{ 
#line 1725
::cudaError_t status; 
#line 1728
int device; 
#line 1729
::cudaFuncAttributes attr; 
#line 1732
int maxThreadsPerMultiProcessor; 
#line 1733
int warpSize; 
#line 1734
int devMaxThreadsPerBlock; 
#line 1735
int multiProcessorCount; 
#line 1736
int funcMaxThreadsPerBlock; 
#line 1737
int occupancyLimit; 
#line 1738
int granularity; 
#line 1741
int maxBlockSize = 0; 
#line 1742
int numBlocks = 0; 
#line 1743
int maxOccupancy = 0; 
#line 1746
int blockSizeToTryAligned; 
#line 1747
int blockSizeToTry; 
#line 1748
int blockSizeLimitAligned; 
#line 1749
int occupancyInBlocks; 
#line 1750
int occupancyInThreads; 
#line 1751
::size_t dynamicSMemSize; 
#line 1757
if (((!minGridSize) || (!blockSize)) || (!func)) { 
#line 1758
return cudaErrorInvalidValue; 
#line 1759
}  
#line 1765
status = ::cudaGetDevice(&device); 
#line 1766
if (status != (cudaSuccess)) { 
#line 1767
return status; 
#line 1768
}  
#line 1770
status = cudaDeviceGetAttribute(&maxThreadsPerMultiProcessor, cudaDevAttrMaxThreadsPerMultiProcessor, device); 
#line 1774
if (status != (cudaSuccess)) { 
#line 1775
return status; 
#line 1776
}  
#line 1778
status = cudaDeviceGetAttribute(&warpSize, cudaDevAttrWarpSize, device); 
#line 1782
if (status != (cudaSuccess)) { 
#line 1783
return status; 
#line 1784
}  
#line 1786
status = cudaDeviceGetAttribute(&devMaxThreadsPerBlock, cudaDevAttrMaxThreadsPerBlock, device); 
#line 1790
if (status != (cudaSuccess)) { 
#line 1791
return status; 
#line 1792
}  
#line 1794
status = cudaDeviceGetAttribute(&multiProcessorCount, cudaDevAttrMultiProcessorCount, device); 
#line 1798
if (status != (cudaSuccess)) { 
#line 1799
return status; 
#line 1800
}  
#line 1802
status = cudaFuncGetAttributes(&attr, func); 
#line 1803
if (status != (cudaSuccess)) { 
#line 1804
return status; 
#line 1805
}  
#line 1807
funcMaxThreadsPerBlock = (attr.maxThreadsPerBlock); 
#line 1813
occupancyLimit = maxThreadsPerMultiProcessor; 
#line 1814
granularity = warpSize; 
#line 1816
if (blockSizeLimit == 0) { 
#line 1817
blockSizeLimit = devMaxThreadsPerBlock; 
#line 1818
}  
#line 1820
if (devMaxThreadsPerBlock < blockSizeLimit) { 
#line 1821
blockSizeLimit = devMaxThreadsPerBlock; 
#line 1822
}  
#line 1824
if (funcMaxThreadsPerBlock < blockSizeLimit) { 
#line 1825
blockSizeLimit = funcMaxThreadsPerBlock; 
#line 1826
}  
#line 1828
blockSizeLimitAligned = (((blockSizeLimit + (granularity - 1)) / granularity) * granularity); 
#line 1830
for (blockSizeToTryAligned = blockSizeLimitAligned; blockSizeToTryAligned > 0; blockSizeToTryAligned -= granularity) { 
#line 1834
if (blockSizeLimit < blockSizeToTryAligned) { 
#line 1835
blockSizeToTry = blockSizeLimit; 
#line 1836
} else { 
#line 1837
blockSizeToTry = blockSizeToTryAligned; 
#line 1838
}  
#line 1840
dynamicSMemSize = blockSizeToDynamicSMemSize(blockSizeToTry); 
#line 1842
status = cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags(&occupancyInBlocks, func, blockSizeToTry, dynamicSMemSize, flags); 
#line 1849
if (status != (cudaSuccess)) { 
#line 1850
return status; 
#line 1851
}  
#line 1853
occupancyInThreads = (blockSizeToTry * occupancyInBlocks); 
#line 1855
if (occupancyInThreads > maxOccupancy) { 
#line 1856
maxBlockSize = blockSizeToTry; 
#line 1857
numBlocks = occupancyInBlocks; 
#line 1858
maxOccupancy = occupancyInThreads; 
#line 1859
}  
#line 1863
if (occupancyLimit == maxOccupancy) { 
#line 1864
break; 
#line 1865
}  
#line 1866
}  
#line 1874
(*minGridSize) = (numBlocks * multiProcessorCount); 
#line 1875
(*blockSize) = maxBlockSize; 
#line 1877
return status; 
#line 1878
} 
#line 1912
template< class UnaryFunction, class T> static __inline ::cudaError_t 
#line 1913
cudaOccupancyMaxPotentialBlockSizeVariableSMem(int *
#line 1914
minGridSize, int *
#line 1915
blockSize, T 
#line 1916
func, UnaryFunction 
#line 1917
blockSizeToDynamicSMemSize, int 
#line 1918
blockSizeLimit = 0) 
#line 1919
{ 
#line 1920
return cudaOccupancyMaxPotentialBlockSizeVariableSMemWithFlags(minGridSize, blockSize, func, blockSizeToDynamicSMemSize, blockSizeLimit, 0); 
#line 1921
} 
#line 1958
template< class T> static __inline ::cudaError_t 
#line 1959
cudaOccupancyMaxPotentialBlockSize(int *
#line 1960
minGridSize, int *
#line 1961
blockSize, T 
#line 1962
func, ::size_t 
#line 1963
dynamicSMemSize = 0, int 
#line 1964
blockSizeLimit = 0) 
#line 1965
{ 
#line 1966
return cudaOccupancyMaxPotentialBlockSizeVariableSMemWithFlags(minGridSize, blockSize, func, ((::__cudaOccupancyB2DHelper)(dynamicSMemSize)), blockSizeLimit, 0); 
#line 1967
} 
#line 1996
template< class T> static __inline ::cudaError_t 
#line 1997
cudaOccupancyAvailableDynamicSMemPerBlock(::size_t *
#line 1998
dynamicSmemSize, T 
#line 1999
func, int 
#line 2000
numBlocks, int 
#line 2001
blockSize) 
#line 2002
{ 
#line 2003
return ::cudaOccupancyAvailableDynamicSMemPerBlock(dynamicSmemSize, (const void *)func, numBlocks, blockSize); 
#line 2004
} 
#line 2055
template< class T> static __inline ::cudaError_t 
#line 2056
cudaOccupancyMaxPotentialBlockSizeWithFlags(int *
#line 2057
minGridSize, int *
#line 2058
blockSize, T 
#line 2059
func, ::size_t 
#line 2060
dynamicSMemSize = 0, int 
#line 2061
blockSizeLimit = 0, unsigned 
#line 2062
flags = 0) 
#line 2063
{ 
#line 2064
return cudaOccupancyMaxPotentialBlockSizeVariableSMemWithFlags(minGridSize, blockSize, func, ((::__cudaOccupancyB2DHelper)(dynamicSMemSize)), blockSizeLimit, flags); 
#line 2065
} 
#line 2099
template< class T> static __inline ::cudaError_t 
#line 2100
cudaOccupancyMaxPotentialClusterSize(int *
#line 2101
clusterSize, T *
#line 2102
func, const ::cudaLaunchConfig_t *
#line 2103
config) 
#line 2104
{ 
#line 2105
return ::cudaOccupancyMaxPotentialClusterSize(clusterSize, (const void *)func, config); 
#line 2106
} 
#line 2142
template< class T> static __inline ::cudaError_t 
#line 2143
cudaOccupancyMaxActiveClusters(int *
#line 2144
numClusters, T *
#line 2145
func, const ::cudaLaunchConfig_t *
#line 2146
config) 
#line 2147
{ 
#line 2148
return ::cudaOccupancyMaxActiveClusters(numClusters, (const void *)func, config); 
#line 2149
} 
#line 2182
template< class T> __inline ::cudaError_t 
#line 2183
cudaFuncGetAttributes(::cudaFuncAttributes *
#line 2184
attr, T *
#line 2185
entry) 
#line 2187
{ 
#line 2188
return ::cudaFuncGetAttributes(attr, (const void *)entry); 
#line 2189
} 
#line 2244
template< class T> static __inline ::cudaError_t 
#line 2245
cudaFuncSetAttribute(T *
#line 2246
entry, ::cudaFuncAttribute 
#line 2247
attr, int 
#line 2248
value) 
#line 2250
{ 
#line 2251
return ::cudaFuncSetAttribute((const void *)entry, attr, value); 
#line 2252
} 
#line 2268
template< class T> static __inline ::cudaError_t 
#line 2269
cudaGetKernel(::cudaKernel_t *
#line 2270
kernelPtr, const T *
#line 2271
entryFuncAddr) 
#line 2273
{ 
#line 2274
return ::cudaGetKernel(kernelPtr, (const void *)entryFuncAddr); 
#line 2275
} 
#line 2289 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\cuda_runtime.h"
#pragma warning(pop)
#line 12 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_stdio_config.h"
#pragma warning(push)
#pragma warning(disable: 4324 4514 4574 4710 4793 4820 4995 4996 28719 28726 28727 )
#line 16
__pragma( pack ( push, 8 )) extern "C" {
#line 72 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_stdio_config.h"
#pragma detect_mismatch("_CRT_STDIO_ISO_WIDE_SPECIFIERS", "0")
#line 89 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_stdio_config.h"
__declspec(noinline) __inline unsigned __int64 *__cdecl __local_stdio_printf_options() 
#line 90
{ 
#line 91
static unsigned __int64 _OptionsStorage; 
#line 92
return &_OptionsStorage; 
#line 93
} 
#line 99
__declspec(noinline) __inline unsigned __int64 *__cdecl __local_stdio_scanf_options() 
#line 100
{ 
#line 101
static unsigned __int64 _OptionsStorage; 
#line 102
return &_OptionsStorage; 
#line 103
} 
#line 129 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_stdio_config.h"
}__pragma( pack ( pop )) 
#line 131
#pragma warning(pop)
#line 15 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
#pragma warning(push)
#pragma warning(disable: 4324 4514 4574 4710 4793 4820 4995 4996 28719 28726 28727 )
#line 19
__pragma( pack ( push, 8 )) extern "C" {
#line 31
typedef 
#line 28
struct _iobuf { 
#line 30
void *_Placeholder; 
#line 31
} FILE; 
#line 34 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
__declspec(dllimport) FILE *__cdecl __acrt_iob_func(unsigned _Ix); 
#line 51
__declspec(dllimport) wint_t __cdecl fgetwc(FILE * _Stream); 
#line 56
__declspec(dllimport) wint_t __cdecl _fgetwchar(); 
#line 59
__declspec(dllimport) wint_t __cdecl fputwc(__wchar_t _Character, FILE * _Stream); 
#line 64
__declspec(dllimport) wint_t __cdecl _fputwchar(__wchar_t _Character); 
#line 69
__declspec(dllimport) wint_t __cdecl getwc(FILE * _Stream); 
#line 74
__declspec(dllimport) wint_t __cdecl getwchar(); 
#line 79
__declspec(dllimport) __wchar_t *__cdecl fgetws(__wchar_t * _Buffer, int _BufferCount, FILE * _Stream); 
#line 86
__declspec(dllimport) int __cdecl fputws(const __wchar_t * _Buffer, FILE * _Stream); 
#line 93
__declspec(dllimport) __wchar_t *__cdecl _getws_s(__wchar_t * _Buffer, size_t _BufferCount); 
#line 98
extern "C++" {template < size_t _Size > inline wchar_t * __cdecl _getws_s ( wchar_t ( & _Buffer ) [ _Size ] ) throw ( ) { return _getws_s ( _Buffer, _Size ); }}
#line 105 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
__declspec(dllimport) wint_t __cdecl putwc(__wchar_t _Character, FILE * _Stream); 
#line 111
__declspec(dllimport) wint_t __cdecl putwchar(__wchar_t _Character); 
#line 116
__declspec(dllimport) int __cdecl _putws(const __wchar_t * _Buffer); 
#line 121
__declspec(dllimport) wint_t __cdecl ungetwc(wint_t _Character, FILE * _Stream); 
#line 127
__declspec(dllimport) FILE *__cdecl _wfdopen(int _FileHandle, const __wchar_t * _Mode); 
#line 133
__declspec(dllimport) FILE *__cdecl _wfopen(const __wchar_t * _FileName, const __wchar_t * _Mode); 
#line 139
__declspec(dllimport) errno_t __cdecl _wfopen_s(FILE ** _Stream, const __wchar_t * _FileName, const __wchar_t * _Mode); 
#line 147
__declspec(dllimport) FILE *__cdecl _wfreopen(const __wchar_t * _FileName, const __wchar_t * _Mode, FILE * _OldStream); 
#line 154
__declspec(dllimport) errno_t __cdecl _wfreopen_s(FILE ** _Stream, const __wchar_t * _FileName, const __wchar_t * _Mode, FILE * _OldStream); 
#line 162
__declspec(dllimport) FILE *__cdecl _wfsopen(const __wchar_t * _FileName, const __wchar_t * _Mode, int _ShFlag); 
#line 168
__declspec(dllimport) void __cdecl _wperror(const __wchar_t * _ErrorMessage); 
#line 175
__declspec(dllimport) FILE *__cdecl _wpopen(const __wchar_t * _Command, const __wchar_t * _Mode); 
#line 182 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
__declspec(dllimport) int __cdecl _wremove(const __wchar_t * _FileName); 
#line 190
__declspec(dllimport) __declspec(allocator) __wchar_t *__cdecl _wtempnam(const __wchar_t * _Directory, const __wchar_t * _FilePrefix); 
#line 199
__declspec(dllimport) errno_t __cdecl _wtmpnam_s(__wchar_t * _Buffer, size_t _BufferCount); 
#line 204
extern "C++" {template < size_t _Size > inline errno_t __cdecl _wtmpnam_s ( wchar_t ( & _Buffer ) [ _Size ] ) throw ( ) { return _wtmpnam_s ( _Buffer, _Size ); }}
#line 210 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
__declspec(dllimport) __wchar_t *__cdecl _wtmpnam(__wchar_t * _Buffer); 
#line 224 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
__declspec(dllimport) wint_t __cdecl _fgetwc_nolock(FILE * _Stream); 
#line 229
__declspec(dllimport) wint_t __cdecl _fputwc_nolock(__wchar_t _Character, FILE * _Stream); 
#line 235
__declspec(dllimport) wint_t __cdecl _getwc_nolock(FILE * _Stream); 
#line 240
__declspec(dllimport) wint_t __cdecl _putwc_nolock(__wchar_t _Character, FILE * _Stream); 
#line 246
__declspec(dllimport) wint_t __cdecl _ungetwc_nolock(wint_t _Character, FILE * _Stream); 
#line 272 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
__declspec(dllimport) int __cdecl __stdio_common_vfwprintf(unsigned __int64 _Options, FILE * _Stream, const __wchar_t * _Format, _locale_t _Locale, va_list _ArgList); 
#line 281
__declspec(dllimport) int __cdecl __stdio_common_vfwprintf_s(unsigned __int64 _Options, FILE * _Stream, const __wchar_t * _Format, _locale_t _Locale, va_list _ArgList); 
#line 290
__declspec(dllimport) int __cdecl __stdio_common_vfwprintf_p(unsigned __int64 _Options, FILE * _Stream, const __wchar_t * _Format, _locale_t _Locale, va_list _ArgList); 
#line 299
__inline int __cdecl _vfwprintf_l(FILE *const 
#line 300
_Stream, const __wchar_t *const 
#line 301
_Format, const _locale_t 
#line 302
_Locale, va_list 
#line 303
_ArgList) 
#line 308 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 309
return __stdio_common_vfwprintf(*__local_stdio_printf_options(), _Stream, _Format, _Locale, _ArgList); 
#line 310
} 
#line 314 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl vfwprintf(FILE *const 
#line 315
_Stream, const __wchar_t *const 
#line 316
_Format, va_list 
#line 317
_ArgList) 
#line 322 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 323
return _vfwprintf_l(_Stream, _Format, 0, _ArgList); 
#line 324
} 
#line 328 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _vfwprintf_s_l(FILE *const 
#line 329
_Stream, const __wchar_t *const 
#line 330
_Format, const _locale_t 
#line 331
_Locale, va_list 
#line 332
_ArgList) 
#line 337 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 338
return __stdio_common_vfwprintf_s(*__local_stdio_printf_options(), _Stream, _Format, _Locale, _ArgList); 
#line 339
} 
#line 345 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl vfwprintf_s(FILE *const 
#line 346
_Stream, const __wchar_t *const 
#line 347
_Format, va_list 
#line 348
_ArgList) 
#line 353 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 354
return _vfwprintf_s_l(_Stream, _Format, 0, _ArgList); 
#line 355
} 
#line 361 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _vfwprintf_p_l(FILE *const 
#line 362
_Stream, const __wchar_t *const 
#line 363
_Format, const _locale_t 
#line 364
_Locale, va_list 
#line 365
_ArgList) 
#line 370 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 371
return __stdio_common_vfwprintf_p(*__local_stdio_printf_options(), _Stream, _Format, _Locale, _ArgList); 
#line 372
} 
#line 376 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _vfwprintf_p(FILE *const 
#line 377
_Stream, const __wchar_t *const 
#line 378
_Format, va_list 
#line 379
_ArgList) 
#line 384 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 385
return _vfwprintf_p_l(_Stream, _Format, 0, _ArgList); 
#line 386
} 
#line 390 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _vwprintf_l(const __wchar_t *const 
#line 391
_Format, const _locale_t 
#line 392
_Locale, va_list 
#line 393
_ArgList) 
#line 398 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 399
return _vfwprintf_l(__acrt_iob_func(1), _Format, _Locale, _ArgList); 
#line 400
} 
#line 404 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl vwprintf(const __wchar_t *const 
#line 405
_Format, va_list 
#line 406
_ArgList) 
#line 411 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 412
return _vfwprintf_l(__acrt_iob_func(1), _Format, 0, _ArgList); 
#line 413
} 
#line 417 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _vwprintf_s_l(const __wchar_t *const 
#line 418
_Format, const _locale_t 
#line 419
_Locale, va_list 
#line 420
_ArgList) 
#line 425 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 426
return _vfwprintf_s_l(__acrt_iob_func(1), _Format, _Locale, _ArgList); 
#line 427
} 
#line 433 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl vwprintf_s(const __wchar_t *const 
#line 434
_Format, va_list 
#line 435
_ArgList) 
#line 440 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 441
return _vfwprintf_s_l(__acrt_iob_func(1), _Format, 0, _ArgList); 
#line 442
} 
#line 448 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _vwprintf_p_l(const __wchar_t *const 
#line 449
_Format, const _locale_t 
#line 450
_Locale, va_list 
#line 451
_ArgList) 
#line 456 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 457
return _vfwprintf_p_l(__acrt_iob_func(1), _Format, _Locale, _ArgList); 
#line 458
} 
#line 462 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _vwprintf_p(const __wchar_t *const 
#line 463
_Format, va_list 
#line 464
_ArgList) 
#line 469 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 470
return _vfwprintf_p_l(__acrt_iob_func(1), _Format, 0, _ArgList); 
#line 471
} 
#line 475 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _fwprintf_l(FILE *const 
#line 476
_Stream, const __wchar_t *const 
#line 477
_Format, const _locale_t 
#line 478
_Locale, ...) 
#line 483 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 484
int _Result; 
#line 485
va_list _ArgList; 
#line 486
(void)(__vcrt_assert_va_start_is_not_reference< __crt_locale_pointers *const> (), ((void)__va_start(&_ArgList, _Locale))); 
#line 487
_Result = _vfwprintf_l(_Stream, _Format, _Locale, _ArgList); 
#line 488
(void)(_ArgList = ((va_list)0)); 
#line 489
return _Result; 
#line 490
} 
#line 494 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl fwprintf(FILE *const 
#line 495
_Stream, const __wchar_t *const 
#line 496
_Format, ...) 
#line 501 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 502
int _Result; 
#line 503
va_list _ArgList; 
#line 504
(void)(__vcrt_assert_va_start_is_not_reference< const __wchar_t *const> (), ((void)__va_start(&_ArgList, _Format))); 
#line 505
_Result = _vfwprintf_l(_Stream, _Format, 0, _ArgList); 
#line 506
(void)(_ArgList = ((va_list)0)); 
#line 507
return _Result; 
#line 508
} 
#line 512 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _fwprintf_s_l(FILE *const 
#line 513
_Stream, const __wchar_t *const 
#line 514
_Format, const _locale_t 
#line 515
_Locale, ...) 
#line 520 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 521
int _Result; 
#line 522
va_list _ArgList; 
#line 523
(void)(__vcrt_assert_va_start_is_not_reference< __crt_locale_pointers *const> (), ((void)__va_start(&_ArgList, _Locale))); 
#line 524
_Result = _vfwprintf_s_l(_Stream, _Format, _Locale, _ArgList); 
#line 525
(void)(_ArgList = ((va_list)0)); 
#line 526
return _Result; 
#line 527
} 
#line 533 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl fwprintf_s(FILE *const 
#line 534
_Stream, const __wchar_t *const 
#line 535
_Format, ...) 
#line 540 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 541
int _Result; 
#line 542
va_list _ArgList; 
#line 543
(void)(__vcrt_assert_va_start_is_not_reference< const __wchar_t *const> (), ((void)__va_start(&_ArgList, _Format))); 
#line 544
_Result = _vfwprintf_s_l(_Stream, _Format, 0, _ArgList); 
#line 545
(void)(_ArgList = ((va_list)0)); 
#line 546
return _Result; 
#line 547
} 
#line 553 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _fwprintf_p_l(FILE *const 
#line 554
_Stream, const __wchar_t *const 
#line 555
_Format, const _locale_t 
#line 556
_Locale, ...) 
#line 561 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 562
int _Result; 
#line 563
va_list _ArgList; 
#line 564
(void)(__vcrt_assert_va_start_is_not_reference< __crt_locale_pointers *const> (), ((void)__va_start(&_ArgList, _Locale))); 
#line 565
_Result = _vfwprintf_p_l(_Stream, _Format, _Locale, _ArgList); 
#line 566
(void)(_ArgList = ((va_list)0)); 
#line 567
return _Result; 
#line 568
} 
#line 572 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _fwprintf_p(FILE *const 
#line 573
_Stream, const __wchar_t *const 
#line 574
_Format, ...) 
#line 579 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 580
int _Result; 
#line 581
va_list _ArgList; 
#line 582
(void)(__vcrt_assert_va_start_is_not_reference< const __wchar_t *const> (), ((void)__va_start(&_ArgList, _Format))); 
#line 583
_Result = _vfwprintf_p_l(_Stream, _Format, 0, _ArgList); 
#line 584
(void)(_ArgList = ((va_list)0)); 
#line 585
return _Result; 
#line 586
} 
#line 590 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _wprintf_l(const __wchar_t *const 
#line 591
_Format, const _locale_t 
#line 592
_Locale, ...) 
#line 597 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 598
int _Result; 
#line 599
va_list _ArgList; 
#line 600
(void)(__vcrt_assert_va_start_is_not_reference< __crt_locale_pointers *const> (), ((void)__va_start(&_ArgList, _Locale))); 
#line 601
_Result = _vfwprintf_l(__acrt_iob_func(1), _Format, _Locale, _ArgList); 
#line 602
(void)(_ArgList = ((va_list)0)); 
#line 603
return _Result; 
#line 604
} 
#line 608 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl wprintf(const __wchar_t *const 
#line 609
_Format, ...) 
#line 614 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 615
int _Result; 
#line 616
va_list _ArgList; 
#line 617
(void)(__vcrt_assert_va_start_is_not_reference< const __wchar_t *const> (), ((void)__va_start(&_ArgList, _Format))); 
#line 618
_Result = _vfwprintf_l(__acrt_iob_func(1), _Format, 0, _ArgList); 
#line 619
(void)(_ArgList = ((va_list)0)); 
#line 620
return _Result; 
#line 621
} 
#line 625 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _wprintf_s_l(const __wchar_t *const 
#line 626
_Format, const _locale_t 
#line 627
_Locale, ...) 
#line 632 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 633
int _Result; 
#line 634
va_list _ArgList; 
#line 635
(void)(__vcrt_assert_va_start_is_not_reference< __crt_locale_pointers *const> (), ((void)__va_start(&_ArgList, _Locale))); 
#line 636
_Result = _vfwprintf_s_l(__acrt_iob_func(1), _Format, _Locale, _ArgList); 
#line 637
(void)(_ArgList = ((va_list)0)); 
#line 638
return _Result; 
#line 639
} 
#line 645 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl wprintf_s(const __wchar_t *const 
#line 646
_Format, ...) 
#line 651 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 652
int _Result; 
#line 653
va_list _ArgList; 
#line 654
(void)(__vcrt_assert_va_start_is_not_reference< const __wchar_t *const> (), ((void)__va_start(&_ArgList, _Format))); 
#line 655
_Result = _vfwprintf_s_l(__acrt_iob_func(1), _Format, 0, _ArgList); 
#line 656
(void)(_ArgList = ((va_list)0)); 
#line 657
return _Result; 
#line 658
} 
#line 664 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _wprintf_p_l(const __wchar_t *const 
#line 665
_Format, const _locale_t 
#line 666
_Locale, ...) 
#line 671 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 672
int _Result; 
#line 673
va_list _ArgList; 
#line 674
(void)(__vcrt_assert_va_start_is_not_reference< __crt_locale_pointers *const> (), ((void)__va_start(&_ArgList, _Locale))); 
#line 675
_Result = _vfwprintf_p_l(__acrt_iob_func(1), _Format, _Locale, _ArgList); 
#line 676
(void)(_ArgList = ((va_list)0)); 
#line 677
return _Result; 
#line 678
} 
#line 682 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _wprintf_p(const __wchar_t *const 
#line 683
_Format, ...) 
#line 688 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 689
int _Result; 
#line 690
va_list _ArgList; 
#line 691
(void)(__vcrt_assert_va_start_is_not_reference< const __wchar_t *const> (), ((void)__va_start(&_ArgList, _Format))); 
#line 692
_Result = _vfwprintf_p_l(__acrt_iob_func(1), _Format, 0, _ArgList); 
#line 693
(void)(_ArgList = ((va_list)0)); 
#line 694
return _Result; 
#line 695
} 
#line 705 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
__declspec(dllimport) int __cdecl __stdio_common_vfwscanf(unsigned __int64 _Options, FILE * _Stream, const __wchar_t * _Format, _locale_t _Locale, va_list _ArgList); 
#line 714
__inline int __cdecl _vfwscanf_l(FILE *const 
#line 715
_Stream, const __wchar_t *const 
#line 716
_Format, const _locale_t 
#line 717
_Locale, va_list 
#line 718
_ArgList) 
#line 723 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 724
return __stdio_common_vfwscanf(*__local_stdio_scanf_options(), _Stream, _Format, _Locale, _ArgList); 
#line 727
} 
#line 731 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl vfwscanf(FILE *const 
#line 732
_Stream, const __wchar_t *const 
#line 733
_Format, va_list 
#line 734
_ArgList) 
#line 739 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 740
return _vfwscanf_l(_Stream, _Format, 0, _ArgList); 
#line 741
} 
#line 745 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _vfwscanf_s_l(FILE *const 
#line 746
_Stream, const __wchar_t *const 
#line 747
_Format, const _locale_t 
#line 748
_Locale, va_list 
#line 749
_ArgList) 
#line 754 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 755
return __stdio_common_vfwscanf((*__local_stdio_scanf_options()) | (1Ui64 << 0), _Stream, _Format, _Locale, _ArgList); 
#line 758
} 
#line 764 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl vfwscanf_s(FILE *const 
#line 765
_Stream, const __wchar_t *const 
#line 766
_Format, va_list 
#line 767
_ArgList) 
#line 772 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 773
return _vfwscanf_s_l(_Stream, _Format, 0, _ArgList); 
#line 774
} 
#line 779 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _vwscanf_l(const __wchar_t *const 
#line 780
_Format, const _locale_t 
#line 781
_Locale, va_list 
#line 782
_ArgList) 
#line 787 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 788
return _vfwscanf_l(__acrt_iob_func(0), _Format, _Locale, _ArgList); 
#line 789
} 
#line 793 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl vwscanf(const __wchar_t *const 
#line 794
_Format, va_list 
#line 795
_ArgList) 
#line 800 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 801
return _vfwscanf_l(__acrt_iob_func(0), _Format, 0, _ArgList); 
#line 802
} 
#line 806 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _vwscanf_s_l(const __wchar_t *const 
#line 807
_Format, const _locale_t 
#line 808
_Locale, va_list 
#line 809
_ArgList) 
#line 814 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 815
return _vfwscanf_s_l(__acrt_iob_func(0), _Format, _Locale, _ArgList); 
#line 816
} 
#line 822 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl vwscanf_s(const __wchar_t *const 
#line 823
_Format, va_list 
#line 824
_ArgList) 
#line 829 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 830
return _vfwscanf_s_l(__acrt_iob_func(0), _Format, 0, _ArgList); 
#line 831
} 
#line 837 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _fwscanf_l(FILE *const 
#line 838
_Stream, const __wchar_t *const 
#line 839
_Format, const _locale_t 
#line 840
_Locale, ...) 
#line 845 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 846
int _Result; 
#line 847
va_list _ArgList; 
#line 848
(void)(__vcrt_assert_va_start_is_not_reference< __crt_locale_pointers *const> (), ((void)__va_start(&_ArgList, _Locale))); 
#line 849
_Result = _vfwscanf_l(_Stream, _Format, _Locale, _ArgList); 
#line 850
(void)(_ArgList = ((va_list)0)); 
#line 851
return _Result; 
#line 852
} 
#line 856 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl fwscanf(FILE *const 
#line 857
_Stream, const __wchar_t *const 
#line 858
_Format, ...) 
#line 863 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 864
int _Result; 
#line 865
va_list _ArgList; 
#line 866
(void)(__vcrt_assert_va_start_is_not_reference< const __wchar_t *const> (), ((void)__va_start(&_ArgList, _Format))); 
#line 867
_Result = _vfwscanf_l(_Stream, _Format, 0, _ArgList); 
#line 868
(void)(_ArgList = ((va_list)0)); 
#line 869
return _Result; 
#line 870
} 
#line 874 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _fwscanf_s_l(FILE *const 
#line 875
_Stream, const __wchar_t *const 
#line 876
_Format, const _locale_t 
#line 877
_Locale, ...) 
#line 882 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 883
int _Result; 
#line 884
va_list _ArgList; 
#line 885
(void)(__vcrt_assert_va_start_is_not_reference< __crt_locale_pointers *const> (), ((void)__va_start(&_ArgList, _Locale))); 
#line 886
_Result = _vfwscanf_s_l(_Stream, _Format, _Locale, _ArgList); 
#line 887
(void)(_ArgList = ((va_list)0)); 
#line 888
return _Result; 
#line 889
} 
#line 895 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl fwscanf_s(FILE *const 
#line 896
_Stream, const __wchar_t *const 
#line 897
_Format, ...) 
#line 902 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 903
int _Result; 
#line 904
va_list _ArgList; 
#line 905
(void)(__vcrt_assert_va_start_is_not_reference< const __wchar_t *const> (), ((void)__va_start(&_ArgList, _Format))); 
#line 906
_Result = _vfwscanf_s_l(_Stream, _Format, 0, _ArgList); 
#line 907
(void)(_ArgList = ((va_list)0)); 
#line 908
return _Result; 
#line 909
} 
#line 915 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _wscanf_l(const __wchar_t *const 
#line 916
_Format, const _locale_t 
#line 917
_Locale, ...) 
#line 922 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 923
int _Result; 
#line 924
va_list _ArgList; 
#line 925
(void)(__vcrt_assert_va_start_is_not_reference< __crt_locale_pointers *const> (), ((void)__va_start(&_ArgList, _Locale))); 
#line 926
_Result = _vfwscanf_l(__acrt_iob_func(0), _Format, _Locale, _ArgList); 
#line 927
(void)(_ArgList = ((va_list)0)); 
#line 928
return _Result; 
#line 929
} 
#line 933 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl wscanf(const __wchar_t *const 
#line 934
_Format, ...) 
#line 939 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 940
int _Result; 
#line 941
va_list _ArgList; 
#line 942
(void)(__vcrt_assert_va_start_is_not_reference< const __wchar_t *const> (), ((void)__va_start(&_ArgList, _Format))); 
#line 943
_Result = _vfwscanf_l(__acrt_iob_func(0), _Format, 0, _ArgList); 
#line 944
(void)(_ArgList = ((va_list)0)); 
#line 945
return _Result; 
#line 946
} 
#line 950 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _wscanf_s_l(const __wchar_t *const 
#line 951
_Format, const _locale_t 
#line 952
_Locale, ...) 
#line 957 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 958
int _Result; 
#line 959
va_list _ArgList; 
#line 960
(void)(__vcrt_assert_va_start_is_not_reference< __crt_locale_pointers *const> (), ((void)__va_start(&_ArgList, _Locale))); 
#line 961
_Result = _vfwscanf_s_l(__acrt_iob_func(0), _Format, _Locale, _ArgList); 
#line 962
(void)(_ArgList = ((va_list)0)); 
#line 963
return _Result; 
#line 964
} 
#line 970 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl wscanf_s(const __wchar_t *const 
#line 971
_Format, ...) 
#line 976 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 977
int _Result; 
#line 978
va_list _ArgList; 
#line 979
(void)(__vcrt_assert_va_start_is_not_reference< const __wchar_t *const> (), ((void)__va_start(&_ArgList, _Format))); 
#line 980
_Result = _vfwscanf_s_l(__acrt_iob_func(0), _Format, 0, _ArgList); 
#line 981
(void)(_ArgList = ((va_list)0)); 
#line 982
return _Result; 
#line 983
} 
#line 1006 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
__declspec(dllimport) int __cdecl __stdio_common_vswprintf(unsigned __int64 _Options, __wchar_t * _Buffer, size_t _BufferCount, const __wchar_t * _Format, _locale_t _Locale, va_list _ArgList); 
#line 1017
__declspec(dllimport) int __cdecl __stdio_common_vswprintf_s(unsigned __int64 _Options, __wchar_t * _Buffer, size_t _BufferCount, const __wchar_t * _Format, _locale_t _Locale, va_list _ArgList); 
#line 1028
__declspec(dllimport) int __cdecl __stdio_common_vsnwprintf_s(unsigned __int64 _Options, __wchar_t * _Buffer, size_t _BufferCount, size_t _MaxCount, const __wchar_t * _Format, _locale_t _Locale, va_list _ArgList); 
#line 1040
__declspec(dllimport) int __cdecl __stdio_common_vswprintf_p(unsigned __int64 _Options, __wchar_t * _Buffer, size_t _BufferCount, const __wchar_t * _Format, _locale_t _Locale, va_list _ArgList); 
#line 1051
__inline int __cdecl _vsnwprintf_l(__wchar_t *const 
#line 1052
_Buffer, const size_t 
#line 1053
_BufferCount, const __wchar_t *const 
#line 1054
_Format, const _locale_t 
#line 1055
_Locale, va_list 
#line 1056
_ArgList) 
#line 1061 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1062
const int _Result = __stdio_common_vswprintf((*__local_stdio_printf_options()) | (1Ui64 << 0), _Buffer, _BufferCount, _Format, _Locale, _ArgList); 
#line 1066
return (_Result < 0) ? -1 : _Result; 
#line 1067
} 
#line 1072 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _vsnwprintf_s_l(__wchar_t *const 
#line 1073
_Buffer, const size_t 
#line 1074
_BufferCount, const size_t 
#line 1075
_MaxCount, const __wchar_t *const 
#line 1076
_Format, const _locale_t 
#line 1077
_Locale, va_list 
#line 1078
_ArgList) 
#line 1083 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1084
const int _Result = __stdio_common_vsnwprintf_s(*__local_stdio_printf_options(), _Buffer, _BufferCount, _MaxCount, _Format, _Locale, _ArgList); 
#line 1088
return (_Result < 0) ? -1 : _Result; 
#line 1089
} 
#line 1094 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _vsnwprintf_s(__wchar_t *const 
#line 1095
_Buffer, const size_t 
#line 1096
_BufferCount, const size_t 
#line 1097
_MaxCount, const __wchar_t *const 
#line 1098
_Format, va_list 
#line 1099
_ArgList) 
#line 1104 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1105
return _vsnwprintf_s_l(_Buffer, _BufferCount, _MaxCount, _Format, 0, _ArgList); 
#line 1106
} 
#line 1109 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _snwprintf(__wchar_t * _Buffer, size_t _BufferCount, const __wchar_t * _Format, ...); __inline int __cdecl _vsnwprintf(__wchar_t * _Buffer, size_t _BufferCount, const __wchar_t * _Format, va_list _Args); 
#line 1120 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _vsnwprintf(__wchar_t *
#line 1121
_Buffer, size_t 
#line 1122
_BufferCount, const __wchar_t *
#line 1123
_Format, va_list 
#line 1124
_ArgList) 
#line 1129 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1130
return _vsnwprintf_l(_Buffer, _BufferCount, _Format, 0, _ArgList); 
#line 1131
} 
#line 1134 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
extern "C++" {template < size_t _Size > inline int __cdecl _vsnwprintf_s ( wchar_t ( & _Buffer ) [ _Size ], size_t _BufferCount, wchar_t const * _Format, va_list _ArgList ) throw ( ) { return _vsnwprintf_s ( _Buffer, _Size, _BufferCount, _Format, _ArgList ); }}
#line 1145 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _vswprintf_c_l(__wchar_t *const 
#line 1146
_Buffer, const size_t 
#line 1147
_BufferCount, const __wchar_t *const 
#line 1148
_Format, const _locale_t 
#line 1149
_Locale, va_list 
#line 1150
_ArgList) 
#line 1155 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1156
const int _Result = __stdio_common_vswprintf(*__local_stdio_printf_options(), _Buffer, _BufferCount, _Format, _Locale, _ArgList); 
#line 1160
return (_Result < 0) ? -1 : _Result; 
#line 1161
} 
#line 1166 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _vswprintf_c(__wchar_t *const 
#line 1167
_Buffer, const size_t 
#line 1168
_BufferCount, const __wchar_t *const 
#line 1169
_Format, va_list 
#line 1170
_ArgList) 
#line 1175 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1176
return _vswprintf_c_l(_Buffer, _BufferCount, _Format, 0, _ArgList); 
#line 1177
} 
#line 1182 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _vswprintf_l(__wchar_t *const 
#line 1183
_Buffer, const size_t 
#line 1184
_BufferCount, const __wchar_t *const 
#line 1185
_Format, const _locale_t 
#line 1186
_Locale, va_list 
#line 1187
_ArgList) 
#line 1192 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1193
return _vswprintf_c_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList); 
#line 1194
} 
#line 1199 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl __vswprintf_l(__wchar_t *const 
#line 1200
_Buffer, const __wchar_t *const 
#line 1201
_Format, const _locale_t 
#line 1202
_Locale, va_list 
#line 1203
_ArgList) 
#line 1208 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1209
return _vswprintf_l(_Buffer, (size_t)(-1), _Format, _Locale, _ArgList); 
#line 1210
} 
#line 1215 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _vswprintf(__wchar_t *const 
#line 1216
_Buffer, const __wchar_t *const 
#line 1217
_Format, va_list 
#line 1218
_ArgList) 
#line 1223 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1224
return _vswprintf_l(_Buffer, (size_t)(-1), _Format, 0, _ArgList); 
#line 1225
} 
#line 1230 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl vswprintf(__wchar_t *const 
#line 1231
_Buffer, const size_t 
#line 1232
_BufferCount, const __wchar_t *const 
#line 1233
_Format, va_list 
#line 1234
_ArgList) 
#line 1239 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1240
return _vswprintf_c_l(_Buffer, _BufferCount, _Format, 0, _ArgList); 
#line 1241
} 
#line 1246 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _vswprintf_s_l(__wchar_t *const 
#line 1247
_Buffer, const size_t 
#line 1248
_BufferCount, const __wchar_t *const 
#line 1249
_Format, const _locale_t 
#line 1250
_Locale, va_list 
#line 1251
_ArgList) 
#line 1256 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1257
const int _Result = __stdio_common_vswprintf_s(*__local_stdio_printf_options(), _Buffer, _BufferCount, _Format, _Locale, _ArgList); 
#line 1261
return (_Result < 0) ? -1 : _Result; 
#line 1262
} 
#line 1268 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl vswprintf_s(__wchar_t *const 
#line 1269
_Buffer, const size_t 
#line 1270
_BufferCount, const __wchar_t *const 
#line 1271
_Format, va_list 
#line 1272
_ArgList) 
#line 1277 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1278
return _vswprintf_s_l(_Buffer, _BufferCount, _Format, 0, _ArgList); 
#line 1279
} 
#line 1284 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
extern "C++" {template < size_t _Size > inline int __cdecl vswprintf_s ( wchar_t ( & _Buffer ) [ _Size ], wchar_t const * _Format, va_list _ArgList ) throw ( ) { return vswprintf_s ( _Buffer, _Size, _Format, _ArgList ); }}
#line 1294 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _vswprintf_p_l(__wchar_t *const 
#line 1295
_Buffer, const size_t 
#line 1296
_BufferCount, const __wchar_t *const 
#line 1297
_Format, const _locale_t 
#line 1298
_Locale, va_list 
#line 1299
_ArgList) 
#line 1304 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1305
const int _Result = __stdio_common_vswprintf_p(*__local_stdio_printf_options(), _Buffer, _BufferCount, _Format, _Locale, _ArgList); 
#line 1309
return (_Result < 0) ? -1 : _Result; 
#line 1310
} 
#line 1315 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _vswprintf_p(__wchar_t *const 
#line 1316
_Buffer, const size_t 
#line 1317
_BufferCount, const __wchar_t *const 
#line 1318
_Format, va_list 
#line 1319
_ArgList) 
#line 1324 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1325
return _vswprintf_p_l(_Buffer, _BufferCount, _Format, 0, _ArgList); 
#line 1326
} 
#line 1331 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _vscwprintf_l(const __wchar_t *const 
#line 1332
_Format, const _locale_t 
#line 1333
_Locale, va_list 
#line 1334
_ArgList) 
#line 1339 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1340
const int _Result = __stdio_common_vswprintf((*__local_stdio_printf_options()) | (1Ui64 << 1), 0, 0, _Format, _Locale, _ArgList); 
#line 1344
return (_Result < 0) ? -1 : _Result; 
#line 1345
} 
#line 1350 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _vscwprintf(const __wchar_t *const 
#line 1351
_Format, va_list 
#line 1352
_ArgList) 
#line 1357 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1358
return _vscwprintf_l(_Format, 0, _ArgList); 
#line 1359
} 
#line 1364 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _vscwprintf_p_l(const __wchar_t *const 
#line 1365
_Format, const _locale_t 
#line 1366
_Locale, va_list 
#line 1367
_ArgList) 
#line 1372 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1373
const int _Result = __stdio_common_vswprintf_p((*__local_stdio_printf_options()) | (1Ui64 << 1), 0, 0, _Format, _Locale, _ArgList); 
#line 1377
return (_Result < 0) ? -1 : _Result; 
#line 1378
} 
#line 1383 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _vscwprintf_p(const __wchar_t *const 
#line 1384
_Format, va_list 
#line 1385
_ArgList) 
#line 1390 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1391
return _vscwprintf_p_l(_Format, 0, _ArgList); 
#line 1392
} 
#line 1397 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl __swprintf_l(__wchar_t *const 
#line 1398
_Buffer, const __wchar_t *const 
#line 1399
_Format, const _locale_t 
#line 1400
_Locale, ...) 
#line 1405 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1406
int _Result; 
#line 1407
va_list _ArgList; 
#line 1408
(void)(__vcrt_assert_va_start_is_not_reference< __crt_locale_pointers *const> (), ((void)__va_start(&_ArgList, _Locale))); 
#line 1409
_Result = __vswprintf_l(_Buffer, _Format, _Locale, _ArgList); 
#line 1410
(void)(_ArgList = ((va_list)0)); 
#line 1411
return _Result; 
#line 1412
} 
#line 1417 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _swprintf_l(__wchar_t *const 
#line 1418
_Buffer, const size_t 
#line 1419
_BufferCount, const __wchar_t *const 
#line 1420
_Format, const _locale_t 
#line 1421
_Locale, ...) 
#line 1426 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1427
int _Result; 
#line 1428
va_list _ArgList; 
#line 1429
(void)(__vcrt_assert_va_start_is_not_reference< __crt_locale_pointers *const> (), ((void)__va_start(&_ArgList, _Locale))); 
#line 1430
_Result = _vswprintf_c_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList); 
#line 1431
(void)(_ArgList = ((va_list)0)); 
#line 1432
return _Result; 
#line 1433
} 
#line 1438 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _swprintf(__wchar_t *const 
#line 1439
_Buffer, const __wchar_t *const 
#line 1440
_Format, ...) 
#line 1445 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1446
int _Result; 
#line 1447
va_list _ArgList; 
#line 1448
(void)(__vcrt_assert_va_start_is_not_reference< const __wchar_t *const> (), ((void)__va_start(&_ArgList, _Format))); 
#line 1449
_Result = __vswprintf_l(_Buffer, _Format, 0, _ArgList); 
#line 1450
(void)(_ArgList = ((va_list)0)); 
#line 1451
return _Result; 
#line 1452
} 
#line 1457 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl swprintf(__wchar_t *const 
#line 1458
_Buffer, const size_t 
#line 1459
_BufferCount, const __wchar_t *const 
#line 1460
_Format, ...) 
#line 1465 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1466
int _Result; 
#line 1467
va_list _ArgList; 
#line 1468
(void)(__vcrt_assert_va_start_is_not_reference< const __wchar_t *const> (), ((void)__va_start(&_ArgList, _Format))); 
#line 1469
_Result = _vswprintf_c_l(_Buffer, _BufferCount, _Format, 0, _ArgList); 
#line 1470
(void)(_ArgList = ((va_list)0)); 
#line 1471
return _Result; 
#line 1472
} 
#line 1475 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl __swprintf_l(__wchar_t * _Buffer, const __wchar_t * _Format, _locale_t _Locale, ...); __inline int __cdecl __vswprintf_l(__wchar_t * _Buffer, const __wchar_t * _Format, _locale_t _Locale, va_list _Args); 
#line 1484 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _swprintf(__wchar_t * _Buffer, const __wchar_t * _Format, ...); __inline int __cdecl _vswprintf(__wchar_t * _Buffer, const __wchar_t * _Format, va_list _Args); 
#line 1493 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _swprintf_s_l(__wchar_t *const 
#line 1494
_Buffer, const size_t 
#line 1495
_BufferCount, const __wchar_t *const 
#line 1496
_Format, const _locale_t 
#line 1497
_Locale, ...) 
#line 1502 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1503
int _Result; 
#line 1504
va_list _ArgList; 
#line 1505
(void)(__vcrt_assert_va_start_is_not_reference< __crt_locale_pointers *const> (), ((void)__va_start(&_ArgList, _Locale))); 
#line 1506
_Result = _vswprintf_s_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList); 
#line 1507
(void)(_ArgList = ((va_list)0)); 
#line 1508
return _Result; 
#line 1509
} 
#line 1515 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl swprintf_s(__wchar_t *const 
#line 1516
_Buffer, const size_t 
#line 1517
_BufferCount, const __wchar_t *const 
#line 1518
_Format, ...) 
#line 1523 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1524
int _Result; 
#line 1525
va_list _ArgList; 
#line 1526
(void)(__vcrt_assert_va_start_is_not_reference< const __wchar_t *const> (), ((void)__va_start(&_ArgList, _Format))); 
#line 1527
_Result = _vswprintf_s_l(_Buffer, _BufferCount, _Format, 0, _ArgList); 
#line 1528
(void)(_ArgList = ((va_list)0)); 
#line 1529
return _Result; 
#line 1530
} 
#line 1535 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
extern "C++" {template < size_t _Size > inline int __cdecl swprintf_s ( wchar_t ( & _Buffer ) [ _Size ], wchar_t const * _Format, ... ) throw ( ) { va_list _ArgList; ( ( void ) ( __vcrt_assert_va_start_is_not_reference < decltype ( _Format ) > ( ), ( ( void ) ( __va_start ( & _ArgList, _Format ) ) ) ) ); return vswprintf_s ( _Buffer, _Size, _Format, _ArgList ); }}
#line 1544 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _swprintf_p_l(__wchar_t *const 
#line 1545
_Buffer, const size_t 
#line 1546
_BufferCount, const __wchar_t *const 
#line 1547
_Format, const _locale_t 
#line 1548
_Locale, ...) 
#line 1553 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1554
int _Result; 
#line 1555
va_list _ArgList; 
#line 1556
(void)(__vcrt_assert_va_start_is_not_reference< __crt_locale_pointers *const> (), ((void)__va_start(&_ArgList, _Locale))); 
#line 1557
_Result = _vswprintf_p_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList); 
#line 1558
(void)(_ArgList = ((va_list)0)); 
#line 1559
return _Result; 
#line 1560
} 
#line 1565 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _swprintf_p(__wchar_t *const 
#line 1566
_Buffer, const size_t 
#line 1567
_BufferCount, const __wchar_t *const 
#line 1568
_Format, ...) 
#line 1573 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1574
int _Result; 
#line 1575
va_list _ArgList; 
#line 1576
(void)(__vcrt_assert_va_start_is_not_reference< const __wchar_t *const> (), ((void)__va_start(&_ArgList, _Format))); 
#line 1577
_Result = _vswprintf_p_l(_Buffer, _BufferCount, _Format, 0, _ArgList); 
#line 1578
(void)(_ArgList = ((va_list)0)); 
#line 1579
return _Result; 
#line 1580
} 
#line 1585 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _swprintf_c_l(__wchar_t *const 
#line 1586
_Buffer, const size_t 
#line 1587
_BufferCount, const __wchar_t *const 
#line 1588
_Format, const _locale_t 
#line 1589
_Locale, ...) 
#line 1594 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1595
int _Result; 
#line 1596
va_list _ArgList; 
#line 1597
(void)(__vcrt_assert_va_start_is_not_reference< __crt_locale_pointers *const> (), ((void)__va_start(&_ArgList, _Locale))); 
#line 1598
_Result = _vswprintf_c_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList); 
#line 1599
(void)(_ArgList = ((va_list)0)); 
#line 1600
return _Result; 
#line 1601
} 
#line 1606 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _swprintf_c(__wchar_t *const 
#line 1607
_Buffer, const size_t 
#line 1608
_BufferCount, const __wchar_t *const 
#line 1609
_Format, ...) 
#line 1614 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1615
int _Result; 
#line 1616
va_list _ArgList; 
#line 1617
(void)(__vcrt_assert_va_start_is_not_reference< const __wchar_t *const> (), ((void)__va_start(&_ArgList, _Format))); 
#line 1618
_Result = _vswprintf_c_l(_Buffer, _BufferCount, _Format, 0, _ArgList); 
#line 1619
(void)(_ArgList = ((va_list)0)); 
#line 1620
return _Result; 
#line 1621
} 
#line 1626 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _snwprintf_l(__wchar_t *const 
#line 1627
_Buffer, const size_t 
#line 1628
_BufferCount, const __wchar_t *const 
#line 1629
_Format, const _locale_t 
#line 1630
_Locale, ...) 
#line 1635 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1636
int _Result; 
#line 1637
va_list _ArgList; 
#line 1638
(void)(__vcrt_assert_va_start_is_not_reference< __crt_locale_pointers *const> (), ((void)__va_start(&_ArgList, _Locale))); 
#line 1640
_Result = _vsnwprintf_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList); 
#line 1642
(void)(_ArgList = ((va_list)0)); 
#line 1643
return _Result; 
#line 1644
} 
#line 1649 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _snwprintf(__wchar_t *
#line 1650
_Buffer, size_t 
#line 1651
_BufferCount, const __wchar_t *
#line 1652
_Format, ...) 
#line 1657 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1658
int _Result; 
#line 1659
va_list _ArgList; 
#line 1660
(void)(__vcrt_assert_va_start_is_not_reference< const __wchar_t *> (), ((void)__va_start(&_ArgList, _Format))); 
#line 1662
_Result = _vsnwprintf_l(_Buffer, _BufferCount, _Format, 0, _ArgList); 
#line 1664
(void)(_ArgList = ((va_list)0)); 
#line 1665
return _Result; 
#line 1666
} 
#line 1671 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _snwprintf_s_l(__wchar_t *const 
#line 1672
_Buffer, const size_t 
#line 1673
_BufferCount, const size_t 
#line 1674
_MaxCount, const __wchar_t *const 
#line 1675
_Format, const _locale_t 
#line 1676
_Locale, ...) 
#line 1681 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1682
int _Result; 
#line 1683
va_list _ArgList; 
#line 1684
(void)(__vcrt_assert_va_start_is_not_reference< __crt_locale_pointers *const> (), ((void)__va_start(&_ArgList, _Locale))); 
#line 1685
_Result = _vsnwprintf_s_l(_Buffer, _BufferCount, _MaxCount, _Format, _Locale, _ArgList); 
#line 1686
(void)(_ArgList = ((va_list)0)); 
#line 1687
return _Result; 
#line 1688
} 
#line 1693 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _snwprintf_s(__wchar_t *const 
#line 1694
_Buffer, const size_t 
#line 1695
_BufferCount, const size_t 
#line 1696
_MaxCount, const __wchar_t *const 
#line 1697
_Format, ...) 
#line 1702 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1703
int _Result; 
#line 1704
va_list _ArgList; 
#line 1705
(void)(__vcrt_assert_va_start_is_not_reference< const __wchar_t *const> (), ((void)__va_start(&_ArgList, _Format))); 
#line 1706
_Result = _vsnwprintf_s_l(_Buffer, _BufferCount, _MaxCount, _Format, 0, _ArgList); 
#line 1707
(void)(_ArgList = ((va_list)0)); 
#line 1708
return _Result; 
#line 1709
} 
#line 1712 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
extern "C++" {template < size_t _Size > inline int __cdecl _snwprintf_s ( wchar_t ( & _Buffer ) [ _Size ], size_t _BufferCount, wchar_t const * _Format, ... ) throw ( ) { va_list _ArgList; ( ( void ) ( __vcrt_assert_va_start_is_not_reference < decltype ( _Format ) > ( ), ( ( void ) ( __va_start ( & _ArgList, _Format ) ) ) ) ); return _vsnwprintf_s ( _Buffer, _Size, _BufferCount, _Format, _ArgList ); }}
#line 1721 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _scwprintf_l(const __wchar_t *const 
#line 1722
_Format, const _locale_t 
#line 1723
_Locale, ...) 
#line 1728 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1729
int _Result; 
#line 1730
va_list _ArgList; 
#line 1731
(void)(__vcrt_assert_va_start_is_not_reference< __crt_locale_pointers *const> (), ((void)__va_start(&_ArgList, _Locale))); 
#line 1732
_Result = _vscwprintf_l(_Format, _Locale, _ArgList); 
#line 1733
(void)(_ArgList = ((va_list)0)); 
#line 1734
return _Result; 
#line 1735
} 
#line 1740 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _scwprintf(const __wchar_t *const 
#line 1741
_Format, ...) 
#line 1746 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1747
int _Result; 
#line 1748
va_list _ArgList; 
#line 1749
(void)(__vcrt_assert_va_start_is_not_reference< const __wchar_t *const> (), ((void)__va_start(&_ArgList, _Format))); 
#line 1750
_Result = _vscwprintf_l(_Format, 0, _ArgList); 
#line 1751
(void)(_ArgList = ((va_list)0)); 
#line 1752
return _Result; 
#line 1753
} 
#line 1758 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _scwprintf_p_l(const __wchar_t *const 
#line 1759
_Format, const _locale_t 
#line 1760
_Locale, ...) 
#line 1765 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1766
int _Result; 
#line 1767
va_list _ArgList; 
#line 1768
(void)(__vcrt_assert_va_start_is_not_reference< __crt_locale_pointers *const> (), ((void)__va_start(&_ArgList, _Locale))); 
#line 1769
_Result = _vscwprintf_p_l(_Format, _Locale, _ArgList); 
#line 1770
(void)(_ArgList = ((va_list)0)); 
#line 1771
return _Result; 
#line 1772
} 
#line 1777 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _scwprintf_p(const __wchar_t *const 
#line 1778
_Format, ...) 
#line 1783 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1784
int _Result; 
#line 1785
va_list _ArgList; 
#line 1786
(void)(__vcrt_assert_va_start_is_not_reference< const __wchar_t *const> (), ((void)__va_start(&_ArgList, _Format))); 
#line 1787
_Result = _vscwprintf_p_l(_Format, 0, _ArgList); 
#line 1788
(void)(_ArgList = ((va_list)0)); 
#line 1789
return _Result; 
#line 1790
} 
#line 1797 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
#pragma warning(push)
#pragma warning(disable: 4141 6054)
#line 1803
extern "C++" 
#line 1802
__declspec(deprecated("function has been changed to conform with the ISO C standard, adding an extra character count parameter. To use the traditional " "Microsoft version, set _CRT_NON_CONFORMING_SWPRINTFS.")) inline int 
#line 1803
swprintf(__wchar_t *const 
#line 1804
_Buffer, const __wchar_t *const 
#line 1805
_Format, ...) throw() 
#line 1807
{ 
#line 1808
int _Result; 
#line 1809
va_list _ArgList; 
#line 1810
(void)(__vcrt_assert_va_start_is_not_reference< const __wchar_t *const> (), ((void)__va_start(&_ArgList, _Format))); 
#line 1811
_Result = vswprintf(_Buffer, 2147483647, _Format, _ArgList); 
#line 1812
(void)(_ArgList = ((va_list)0)); 
#line 1813
return _Result; 
#line 1814
} 
#line 1817
extern "C++" 
#line 1816
__declspec(deprecated("function has been changed to conform with the ISO C standard, adding an extra character count parameter. To use the traditional " "Microsoft version, set _CRT_NON_CONFORMING_SWPRINTFS.")) inline int __cdecl 
#line 1817
vswprintf(__wchar_t *const 
#line 1818
_Buffer, const __wchar_t *const 
#line 1819
_Format, va_list 
#line 1820
_ArgList) throw() 
#line 1822
{ 
#line 1823
return vswprintf(_Buffer, 2147483647, _Format, _ArgList); 
#line 1824
} 
#line 1827
extern "C++" 
#line 1826
__declspec(deprecated("function has been changed to conform with the ISO C standard, adding an extra character count parameter. To use the traditional " "Microsoft version, set _CRT_NON_CONFORMING_SWPRINTFS.")) inline int 
#line 1827
_swprintf_l(__wchar_t *const 
#line 1828
_Buffer, const __wchar_t *const 
#line 1829
_Format, const _locale_t 
#line 1830
_Locale, ...) throw() 
#line 1832
{ 
#line 1833
int _Result; 
#line 1834
va_list _ArgList; 
#line 1835
(void)(__vcrt_assert_va_start_is_not_reference< __crt_locale_pointers *const> (), ((void)__va_start(&_ArgList, _Locale))); 
#line 1836
_Result = _vswprintf_l(_Buffer, (size_t)(-1), _Format, _Locale, _ArgList); 
#line 1837
(void)(_ArgList = ((va_list)0)); 
#line 1838
return _Result; 
#line 1839
} 
#line 1842
extern "C++" 
#line 1841
__declspec(deprecated("function has been changed to conform with the ISO C standard, adding an extra character count parameter. To use the traditional " "Microsoft version, set _CRT_NON_CONFORMING_SWPRINTFS.")) inline int __cdecl 
#line 1842
_vswprintf_l(__wchar_t *const 
#line 1843
_Buffer, const __wchar_t *const 
#line 1844
_Format, const _locale_t 
#line 1845
_Locale, va_list 
#line 1846
_ArgList) throw() 
#line 1848
{ 
#line 1849
return _vswprintf_l(_Buffer, (size_t)(-1), _Format, _Locale, _ArgList); 
#line 1850
} 
#line 1854 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
#pragma warning(pop)
#line 1871 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
__declspec(dllimport) int __cdecl __stdio_common_vswscanf(unsigned __int64 _Options, const __wchar_t * _Buffer, size_t _BufferCount, const __wchar_t * _Format, _locale_t _Locale, va_list _ArgList); 
#line 1882
__inline int __cdecl _vswscanf_l(const __wchar_t *const 
#line 1883
_Buffer, const __wchar_t *const 
#line 1884
_Format, const _locale_t 
#line 1885
_Locale, va_list 
#line 1886
_ArgList) 
#line 1891 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1892
return __stdio_common_vswscanf(*__local_stdio_scanf_options(), _Buffer, (size_t)(-1), _Format, _Locale, _ArgList); 
#line 1895
} 
#line 1900 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl vswscanf(const __wchar_t *
#line 1901
_Buffer, const __wchar_t *
#line 1902
_Format, va_list 
#line 1903
_ArgList) 
#line 1908 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1909
return _vswscanf_l(_Buffer, _Format, 0, _ArgList); 
#line 1910
} 
#line 1915 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _vswscanf_s_l(const __wchar_t *const 
#line 1916
_Buffer, const __wchar_t *const 
#line 1917
_Format, const _locale_t 
#line 1918
_Locale, va_list 
#line 1919
_ArgList) 
#line 1924 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1925
return __stdio_common_vswscanf((*__local_stdio_scanf_options()) | (1Ui64 << 0), _Buffer, (size_t)(-1), _Format, _Locale, _ArgList); 
#line 1928
} 
#line 1935 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl vswscanf_s(const __wchar_t *const 
#line 1936
_Buffer, const __wchar_t *const 
#line 1937
_Format, va_list 
#line 1938
_ArgList) 
#line 1943 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1944
return _vswscanf_s_l(_Buffer, _Format, 0, _ArgList); 
#line 1945
} 
#line 1950 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
extern "C++" {template < size_t _Size > inline int __cdecl vswscanf_s ( wchar_t ( & _Buffer ) [ _Size ], wchar_t const * _Format, va_list _ArgList ) throw ( ) { return vswscanf_s ( _Buffer, _Size, _Format, _ArgList ); }}
#line 1960 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _vsnwscanf_l(const __wchar_t *const 
#line 1961
_Buffer, const size_t 
#line 1962
_BufferCount, const __wchar_t *const 
#line 1963
_Format, const _locale_t 
#line 1964
_Locale, va_list 
#line 1965
_ArgList) 
#line 1970 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1971
return __stdio_common_vswscanf(*__local_stdio_scanf_options(), _Buffer, _BufferCount, _Format, _Locale, _ArgList); 
#line 1974
} 
#line 1979 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _vsnwscanf_s_l(const __wchar_t *const 
#line 1980
_Buffer, const size_t 
#line 1981
_BufferCount, const __wchar_t *const 
#line 1982
_Format, const _locale_t 
#line 1983
_Locale, va_list 
#line 1984
_ArgList) 
#line 1989 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1990
return __stdio_common_vswscanf((*__local_stdio_scanf_options()) | (1Ui64 << 0), _Buffer, _BufferCount, _Format, _Locale, _ArgList); 
#line 1993
} 
#line 1998 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _swscanf_l(const __wchar_t *const 
#line 1999
_Buffer, const __wchar_t *const 
#line 2000
_Format, _locale_t 
#line 2001
_Locale, ...) 
#line 2006 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 2007
int _Result; 
#line 2008
va_list _ArgList; 
#line 2009
(void)(__vcrt_assert_va_start_is_not_reference< __crt_locale_pointers *> (), ((void)__va_start(&_ArgList, _Locale))); 
#line 2010
_Result = _vswscanf_l(_Buffer, _Format, _Locale, _ArgList); 
#line 2011
(void)(_ArgList = ((va_list)0)); 
#line 2012
return _Result; 
#line 2013
} 
#line 2018 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl swscanf(const __wchar_t *const 
#line 2019
_Buffer, const __wchar_t *const 
#line 2020
_Format, ...) 
#line 2025 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 2026
int _Result; 
#line 2027
va_list _ArgList; 
#line 2028
(void)(__vcrt_assert_va_start_is_not_reference< const __wchar_t *const> (), ((void)__va_start(&_ArgList, _Format))); 
#line 2029
_Result = _vswscanf_l(_Buffer, _Format, 0, _ArgList); 
#line 2030
(void)(_ArgList = ((va_list)0)); 
#line 2031
return _Result; 
#line 2032
} 
#line 2037 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _swscanf_s_l(const __wchar_t *const 
#line 2038
_Buffer, const __wchar_t *const 
#line 2039
_Format, const _locale_t 
#line 2040
_Locale, ...) 
#line 2045 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 2046
int _Result; 
#line 2047
va_list _ArgList; 
#line 2048
(void)(__vcrt_assert_va_start_is_not_reference< __crt_locale_pointers *const> (), ((void)__va_start(&_ArgList, _Locale))); 
#line 2049
_Result = _vswscanf_s_l(_Buffer, _Format, _Locale, _ArgList); 
#line 2050
(void)(_ArgList = ((va_list)0)); 
#line 2051
return _Result; 
#line 2052
} 
#line 2059 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl swscanf_s(const __wchar_t *const 
#line 2060
_Buffer, const __wchar_t *const 
#line 2061
_Format, ...) 
#line 2066 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 2067
int _Result; 
#line 2068
va_list _ArgList; 
#line 2069
(void)(__vcrt_assert_va_start_is_not_reference< const __wchar_t *const> (), ((void)__va_start(&_ArgList, _Format))); 
#line 2070
_Result = _vswscanf_s_l(_Buffer, _Format, 0, _ArgList); 
#line 2071
(void)(_ArgList = ((va_list)0)); 
#line 2072
return _Result; 
#line 2073
} 
#line 2080 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _snwscanf_l(const __wchar_t *const 
#line 2081
_Buffer, const size_t 
#line 2082
_BufferCount, const __wchar_t *const 
#line 2083
_Format, const _locale_t 
#line 2084
_Locale, ...) 
#line 2089 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 2090
int _Result; 
#line 2091
va_list _ArgList; 
#line 2092
(void)(__vcrt_assert_va_start_is_not_reference< __crt_locale_pointers *const> (), ((void)__va_start(&_ArgList, _Locale))); 
#line 2094
_Result = _vsnwscanf_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList); 
#line 2096
(void)(_ArgList = ((va_list)0)); 
#line 2097
return _Result; 
#line 2098
} 
#line 2103 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _snwscanf(const __wchar_t *const 
#line 2104
_Buffer, const size_t 
#line 2105
_BufferCount, const __wchar_t *const 
#line 2106
_Format, ...) 
#line 2111 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 2112
int _Result; 
#line 2113
va_list _ArgList; 
#line 2114
(void)(__vcrt_assert_va_start_is_not_reference< const __wchar_t *const> (), ((void)__va_start(&_ArgList, _Format))); 
#line 2116
_Result = _vsnwscanf_l(_Buffer, _BufferCount, _Format, 0, _ArgList); 
#line 2118
(void)(_ArgList = ((va_list)0)); 
#line 2119
return _Result; 
#line 2120
} 
#line 2125 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _snwscanf_s_l(const __wchar_t *const 
#line 2126
_Buffer, const size_t 
#line 2127
_BufferCount, const __wchar_t *const 
#line 2128
_Format, const _locale_t 
#line 2129
_Locale, ...) 
#line 2134 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 2135
int _Result; 
#line 2136
va_list _ArgList; 
#line 2137
(void)(__vcrt_assert_va_start_is_not_reference< __crt_locale_pointers *const> (), ((void)__va_start(&_ArgList, _Locale))); 
#line 2138
_Result = _vsnwscanf_s_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList); 
#line 2139
(void)(_ArgList = ((va_list)0)); 
#line 2140
return _Result; 
#line 2141
} 
#line 2146 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _snwscanf_s(const __wchar_t *const 
#line 2147
_Buffer, const size_t 
#line 2148
_BufferCount, const __wchar_t *const 
#line 2149
_Format, ...) 
#line 2154 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 2155
int _Result; 
#line 2156
va_list _ArgList; 
#line 2157
(void)(__vcrt_assert_va_start_is_not_reference< const __wchar_t *const> (), ((void)__va_start(&_ArgList, _Format))); 
#line 2158
_Result = _vsnwscanf_s_l(_Buffer, _BufferCount, _Format, 0, _ArgList); 
#line 2159
(void)(_ArgList = ((va_list)0)); 
#line 2160
return _Result; 
#line 2161
} 
#line 2169 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
}__pragma( pack ( pop )) 
#line 2171
#pragma warning(pop)
#line 15 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\stdio.h"
#pragma warning(push)
#pragma warning(disable: 4324 4514 4574 4710 4793 4820 4995 4996 28719 28726 28727 )
#line 19
__pragma( pack ( push, 8 )) extern "C" {
#line 73 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\stdio.h"
typedef __int64 fpos_t; 
#line 80
__declspec(dllimport) errno_t __cdecl _get_stream_buffer_pointers(FILE * _Stream, char *** _Base, char *** _Pointer, int ** _Count); 
#line 96
__declspec(dllimport) errno_t __cdecl clearerr_s(FILE * _Stream); 
#line 102
__declspec(dllimport) errno_t __cdecl fopen_s(FILE ** _Stream, const char * _FileName, const char * _Mode); 
#line 110
__declspec(dllimport) size_t __cdecl fread_s(void * _Buffer, size_t _BufferSize, size_t _ElementSize, size_t _ElementCount, FILE * _Stream); 
#line 119
__declspec(dllimport) errno_t __cdecl freopen_s(FILE ** _Stream, const char * _FileName, const char * _Mode, FILE * _OldStream); 
#line 127
__declspec(dllimport) char *__cdecl gets_s(char * _Buffer, rsize_t _Size); 
#line 133
__declspec(dllimport) errno_t __cdecl tmpfile_s(FILE ** _Stream); 
#line 139
__declspec(dllimport) errno_t __cdecl tmpnam_s(char * _Buffer, rsize_t _Size); 
#line 146 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\stdio.h"
__declspec(dllimport) void __cdecl clearerr(FILE * _Stream); 
#line 152
__declspec(dllimport) int __cdecl fclose(FILE * _Stream); 
#line 157
__declspec(dllimport) int __cdecl _fcloseall(); 
#line 160
__declspec(dllimport) FILE *__cdecl _fdopen(int _FileHandle, const char * _Mode); 
#line 166
__declspec(dllimport) int __cdecl feof(FILE * _Stream); 
#line 171
__declspec(dllimport) int __cdecl ferror(FILE * _Stream); 
#line 176
__declspec(dllimport) int __cdecl fflush(FILE * _Stream); 
#line 182
__declspec(dllimport) int __cdecl fgetc(FILE * _Stream); 
#line 187
__declspec(dllimport) int __cdecl _fgetchar(); 
#line 191
__declspec(dllimport) int __cdecl fgetpos(FILE * _Stream, fpos_t * _Position); 
#line 198
__declspec(dllimport) char *__cdecl fgets(char * _Buffer, int _MaxCount, FILE * _Stream); 
#line 205
__declspec(dllimport) int __cdecl _fileno(FILE * _Stream); 
#line 210
__declspec(dllimport) int __cdecl _flushall(); 
#line 213
__declspec(dllimport) FILE *__cdecl fopen(const char * _FileName, const char * _Mode); 
#line 221
__declspec(dllimport) int __cdecl fputc(int _Character, FILE * _Stream); 
#line 227
__declspec(dllimport) int __cdecl _fputchar(int _Character); 
#line 233
__declspec(dllimport) int __cdecl fputs(const char * _Buffer, FILE * _Stream); 
#line 239
__declspec(dllimport) size_t __cdecl fread(void * _Buffer, size_t _ElementSize, size_t _ElementCount, FILE * _Stream); 
#line 248
__declspec(dllimport) FILE *__cdecl freopen(const char * _FileName, const char * _Mode, FILE * _Stream); 
#line 255
__declspec(dllimport) FILE *__cdecl _fsopen(const char * _FileName, const char * _Mode, int _ShFlag); 
#line 263
__declspec(dllimport) int __cdecl fsetpos(FILE * _Stream, const fpos_t * _Position); 
#line 270
__declspec(dllimport) int __cdecl fseek(FILE * _Stream, long _Offset, int _Origin); 
#line 278
__declspec(dllimport) int __cdecl _fseeki64(FILE * _Stream, __int64 _Offset, int _Origin); 
#line 286
__declspec(dllimport) long __cdecl ftell(FILE * _Stream); 
#line 292
__declspec(dllimport) __int64 __cdecl _ftelli64(FILE * _Stream); 
#line 297
__declspec(dllimport) size_t __cdecl fwrite(const void * _Buffer, size_t _ElementSize, size_t _ElementCount, FILE * _Stream); 
#line 306
__declspec(dllimport) int __cdecl getc(FILE * _Stream); 
#line 311
__declspec(dllimport) int __cdecl getchar(); 
#line 314
__declspec(dllimport) int __cdecl _getmaxstdio(); 
#line 316
extern "C++" {template < size_t _Size > inline char * __cdecl gets_s ( char ( & _Buffer ) [ _Size ] ) throw ( ) { return gets_s ( _Buffer, _Size ); }}
#line 321 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\stdio.h"
__declspec(dllimport) int __cdecl _getw(FILE * _Stream); 
#line 325
__declspec(dllimport) void __cdecl perror(const char * _ErrorMessage); 
#line 333
__declspec(dllimport) int __cdecl _pclose(FILE * _Stream); 
#line 338
__declspec(dllimport) FILE *__cdecl _popen(const char * _Command, const char * _Mode); 
#line 347 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\stdio.h"
__declspec(dllimport) int __cdecl putc(int _Character, FILE * _Stream); 
#line 353
__declspec(dllimport) int __cdecl putchar(int _Character); 
#line 358
__declspec(dllimport) int __cdecl puts(const char * _Buffer); 
#line 364
__declspec(dllimport) int __cdecl _putw(int _Word, FILE * _Stream); 
#line 369
__declspec(dllimport) int __cdecl remove(const char * _FileName); 
#line 374
__declspec(dllimport) int __cdecl rename(const char * _OldFileName, const char * _NewFileName); 
#line 379
__declspec(dllimport) int __cdecl _unlink(const char * _FileName); 
#line 386
__declspec(dllimport) int __cdecl unlink(const char * _FileName); 
#line 392 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\stdio.h"
__declspec(dllimport) void __cdecl rewind(FILE * _Stream); 
#line 397
__declspec(dllimport) int __cdecl _rmtmp(); 
#line 400
__declspec(dllimport) void __cdecl setbuf(FILE * _Stream, char * _Buffer); 
#line 406
__declspec(dllimport) int __cdecl _setmaxstdio(int _Maximum); 
#line 412
__declspec(dllimport) int __cdecl setvbuf(FILE * _Stream, char * _Buffer, int _Mode, size_t _Size); 
#line 425 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\stdio.h"
__declspec(dllimport) __declspec(allocator) char *__cdecl _tempnam(const char * _DirectoryName, const char * _FilePrefix); 
#line 435 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\stdio.h"
__declspec(dllimport) FILE *__cdecl tmpfile(); 
#line 437
extern "C++" {template < size_t _Size > inline errno_t __cdecl tmpnam_s ( char ( & _Buffer ) [ _Size ] ) throw ( ) { return tmpnam_s ( _Buffer, _Size ); }}
#line 443 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\stdio.h"
__declspec(dllimport) char *__cdecl tmpnam(char * _Buffer); 
#line 451 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\stdio.h"
__declspec(dllimport) int __cdecl ungetc(int _Character, FILE * _Stream); 
#line 463
__declspec(dllimport) void __cdecl _lock_file(FILE * _Stream); 
#line 467
__declspec(dllimport) void __cdecl _unlock_file(FILE * _Stream); 
#line 473
__declspec(dllimport) int __cdecl _fclose_nolock(FILE * _Stream); 
#line 479
__declspec(dllimport) int __cdecl _fflush_nolock(FILE * _Stream); 
#line 485
__declspec(dllimport) int __cdecl _fgetc_nolock(FILE * _Stream); 
#line 491
__declspec(dllimport) int __cdecl _fputc_nolock(int _Character, FILE * _Stream); 
#line 497
__declspec(dllimport) size_t __cdecl _fread_nolock(void * _Buffer, size_t _ElementSize, size_t _ElementCount, FILE * _Stream); 
#line 506
__declspec(dllimport) size_t __cdecl _fread_nolock_s(void * _Buffer, size_t _BufferSize, size_t _ElementSize, size_t _ElementCount, FILE * _Stream); 
#line 515
__declspec(dllimport) int __cdecl _fseek_nolock(FILE * _Stream, long _Offset, int _Origin); 
#line 522
__declspec(dllimport) int __cdecl _fseeki64_nolock(FILE * _Stream, __int64 _Offset, int _Origin); 
#line 529
__declspec(dllimport) long __cdecl _ftell_nolock(FILE * _Stream); 
#line 534
__declspec(dllimport) __int64 __cdecl _ftelli64_nolock(FILE * _Stream); 
#line 539
__declspec(dllimport) size_t __cdecl _fwrite_nolock(const void * _Buffer, size_t _ElementSize, size_t _ElementCount, FILE * _Stream); 
#line 547
__declspec(dllimport) int __cdecl _getc_nolock(FILE * _Stream); 
#line 552
__declspec(dllimport) int __cdecl _putc_nolock(int _Character, FILE * _Stream); 
#line 558
__declspec(dllimport) int __cdecl _ungetc_nolock(int _Character, FILE * _Stream); 
#line 589 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\stdio.h"
__declspec(dllimport) int *__cdecl __p__commode(); 
#line 609 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\stdio.h"
__declspec(dllimport) int __cdecl __stdio_common_vfprintf(unsigned __int64 _Options, FILE * _Stream, const char * _Format, _locale_t _Locale, va_list _ArgList); 
#line 617
__declspec(dllimport) int __cdecl __stdio_common_vfprintf_s(unsigned __int64 _Options, FILE * _Stream, const char * _Format, _locale_t _Locale, va_list _ArgList); 
#line 626
__declspec(dllimport) int __cdecl __stdio_common_vfprintf_p(unsigned __int64 _Options, FILE * _Stream, const char * _Format, _locale_t _Locale, va_list _ArgList); 
#line 635
__inline int __cdecl _vfprintf_l(FILE *const 
#line 636
_Stream, const char *const 
#line 637
_Format, const _locale_t 
#line 638
_Locale, va_list 
#line 639
_ArgList) 
#line 644 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\stdio.h"
{ 
#line 645
return __stdio_common_vfprintf(*__local_stdio_printf_options(), _Stream, _Format, _Locale, _ArgList); 
#line 646
} 
#line 650 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\stdio.h"
__inline int __cdecl vfprintf(FILE *const 
#line 651
_Stream, const char *const 
#line 652
_Format, va_list 
#line 653
_ArgList) 
#line 658 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\stdio.h"
{ 
#line 659
return _vfprintf_l(_Stream, _Format, 0, _ArgList); 
#line 660
} 
#line 664 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\stdio.h"
__inline int __cdecl _vfprintf_s_l(FILE *const 
#line 665
_Stream, const char *const 
#line 666
_Format, const _locale_t 
#line 667
_Locale, va_list 
#line 668
_ArgList) 
#line 673 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\stdio.h"
{ 
#line 674
return __stdio_common_vfprintf_s(*__local_stdio_printf_options(), _Stream, _Format, _Locale, _ArgList); 
#line 675
} 
#line 681 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\stdio.h"
__inline int __cdecl vfprintf_s(FILE *const 
#line 682
_Stream, const char *const 
#line 683
_Format, va_list 
#line 684
_ArgList) 
#line 689 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\stdio.h"
{ 
#line 690
return _vfprintf_s_l(_Stream, _Format, 0, _ArgList); 
#line 691
} 
#line 697 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\stdio.h"
__inline int __cdecl _vfprintf_p_l(FILE *const 
#line 698
_Stream, const char *const 
#line 699
_Format, const _locale_t 
#line 700
_Locale, va_list 
#line 701
_ArgList) 
#line 706 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\stdio.h"
{ 
#line 707
return __stdio_common_vfprintf_p(*__local_stdio_printf_options(), _Stream, _Format, _Locale, _ArgList); 
#line 708
} 
#line 712 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\stdio.h"
__inline int __cdecl _vfprintf_p(FILE *const 
#line 713
_Stream, const char *const 
#line 714
_Format, va_list 
#line 715
_ArgList) 
#line 720 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\stdio.h"
{ 
#line 721
return _vfprintf_p_l(_Stream, _Format, 0, _ArgList); 
#line 722
} 
#line 726 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\stdio.h"
__inline int __cdecl _vprintf_l(const char *const 
#line 727
_Format, const _locale_t 
#line 728
_Locale, va_list 
#line 729
_ArgList) 
#line 734 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\stdio.h"
{ 
#line 735
return _vfprintf_l(__acrt_iob_func(1), _Format, _Locale, _ArgList); 
#line 736
} 
#line 740 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\stdio.h"
__inline int __cdecl vprintf(const char *const 
#line 741
_Format, va_list 
#line 742
_ArgList) 
#line 747 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\stdio.h"
{ 
#line 748
return _vfprintf_l(__acrt_iob_func(1), _Format, 0, _ArgList); 
#line 749
} 
#line 753 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\stdio.h"
__inline int __cdecl _vprintf_s_l(const char *const 
#line 754
_Format, const _locale_t 
#line 755
_Locale, va_list 
#line 756
_ArgList) 
#line 761 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\stdio.h"
{ 
#line 762
return _vfprintf_s_l(__acrt_iob_func(1), _Format, _Locale, _ArgList); 
#line 763
} 
#line 769 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\stdio.h"
__inline int __cdecl vprintf_s(const char *const 
#line 770
_Format, va_list 
#line 771
_ArgList) 
#line 776 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\stdio.h"
{ 
#line 777
return _vfprintf_s_l(__acrt_iob_func(1), _Format, 0, _ArgList); 
#line 778
} 
#line 784 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\stdio.h"
__inline int __cdecl _vprintf_p_l(const char *const 
#line 785
_Format, const _locale_t 
#line 786
_Locale, va_list 
#line 787
_ArgList) 
#line 792 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\stdio.h"
{ 
#line 793
return _vfprintf_p_l(__acrt_iob_func(1), _Format, _Locale, _ArgList); 
#line 794
} 
#line 798 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\stdio.h"
__inline int __cdecl _vprintf_p(const char *const 
#line 799
_Format, va_list 
#line 800
_ArgList) 
#line 805 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\stdio.h"
{ 
#line 806
return _vfprintf_p_l(__acrt_iob_func(1), _Format, 0, _ArgList); 
#line 807
} 
#line 811 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\stdio.h"
__inline int __cdecl _fprintf_l(FILE *const 
#line 812
_Stream, const char *const 
#line 813
_Format, const _locale_t 
#line 814
_Locale, ...) 
#line 819 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\stdio.h"
{ 
#line 820
int _Result; 
#line 821
va_list _ArgList; 
#line 822
(void)(__vcrt_assert_va_start_is_not_reference< __crt_locale_pointers *const> (), ((void)__va_start(&_ArgList, _Locale))); 
#line 823
_Result = _vfprintf_l(_Stream, _Format, _Locale, _ArgList); 
#line 824
(void)(_ArgList = ((va_list)0)); 
#line 825
return _Result; 
#line 826
} 
#line 830 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\stdio.h"
__inline int __cdecl fprintf(FILE *const 
#line 831
_Stream, const char *const 
#line 832
_Format, ...) 
#line 837 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\stdio.h"
{ 
#line 838
int _Result; 
#line 839
va_list _ArgList; 
#line 840
(void)(__vcrt_assert_va_start_is_not_reference< const char *const> (), ((void)__va_start(&_ArgList, _Format))); 
#line 841
_Result = _vfprintf_l(_Stream, _Format, 0, _ArgList); 
#line 842
(void)(_ArgList = ((va_list)0)); 
#line 843
return _Result; 
#line 844
} 
#line 847 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\stdio.h"
__declspec(dllimport) int __cdecl _set_printf_count_output(int _Value); 
#line 851
__declspec(dllimport) int __cdecl _get_printf_count_output(); 
#line 854
__inline int __cdecl _fprintf_s_l(FILE *const 
#line 855
_Stream, const char *const 
#line 856
_Format, const _locale_t 
#line 857
_Locale, ...) 
#line 862 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\stdio.h"
{ 
#line 863
int _Result; 
#line 864
va_list _ArgList; 
#line 865
(void)(__vcrt_assert_va_start_is_not_reference< __crt_locale_pointers *const> (), ((void)__va_start(&_ArgList, _Locale))); 
#line 866
_Result = _vfprintf_s_l(_Stream, _Format, _Locale, _ArgList); 
#line 867
(void)(_ArgList = ((va_list)0)); 
#line 868
return _Result; 
#line 869
} 
#line 875 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\stdio.h"
__inline int __cdecl fprintf_s(FILE *const 
#line 876
_Stream, const char *const 
#line 877
_Format, ...) 
#line 882 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\stdio.h"
{ 
#line 883
int _Result; 
#line 884
va_list _ArgList; 
#line 885
(void)(__vcrt_assert_va_start_is_not_reference< const char *const> (), ((void)__va_start(&_ArgList, _Format))); 
#line 886
_Result = _vfprintf_s_l(_Stream, _Format, 0, _ArgList); 
#line 887
(void)(_ArgList = ((va_list)0)); 
#line 888
return _Result; 
#line 889
} 
#line 895 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\stdio.h"
__inline int __cdecl _fprintf_p_l(FILE *const 
#line 896
_Stream, const char *const 
#line 897
_Format, const _locale_t 
#line 898
_Locale, ...) 
#line 903 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\stdio.h"
{ 
#line 904
int _Result; 
#line 905
va_list _ArgList; 
#line 906
(void)(__vcrt_assert_va_start_is_not_reference< __crt_locale_pointers *const> (), ((void)__va_start(&_ArgList, _Locale))); 
#line 907
_Result = _vfprintf_p_l(_Stream, _Format, _Locale, _ArgList); 
#line 908
(void)(_ArgList = ((va_list)0)); 
#line 909
return _Result; 
#line 910
} 
#line 914 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\stdio.h"
__inline int __cdecl _fprintf_p(FILE *const 
#line 915
_Stream, const char *const 
#line 916
_Format, ...) 
#line 921 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\stdio.h"
{ 
#line 922
int _Result; 
#line 923
va_list _ArgList; 
#line 924
(void)(__vcrt_assert_va_start_is_not_reference< const char *const> (), ((void)__va_start(&_ArgList, _Format))); 
#line 925
_Result = _vfprintf_p_l(_Stream, _Format, 0, _ArgList); 
#line 926
(void)(_ArgList = ((va_list)0)); 
#line 927
return _Result; 
#line 928
} 
#line 932 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\stdio.h"
__inline int __cdecl _printf_l(const char *const 
#line 933
_Format, const _locale_t 
#line 934
_Locale, ...) 
#line 939 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\stdio.h"
{ 
#line 940
int _Result; 
#line 941
va_list _ArgList; 
#line 942
(void)(__vcrt_assert_va_start_is_not_reference< __crt_locale_pointers *const> (), ((void)__va_start(&_ArgList, _Locale))); 
#line 943
_Result = _vfprintf_l(__acrt_iob_func(1), _Format, _Locale, _ArgList); 
#line 944
(void)(_ArgList = ((va_list)0)); 
#line 945
return _Result; 
#line 946
} 
#line 950 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\stdio.h"
__inline int __cdecl printf(const char *const 
#line 951
_Format, ...) 
#line 956 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\stdio.h"
{ 
#line 957
int _Result; 
#line 958
va_list _ArgList; 
#line 959
(void)(__vcrt_assert_va_start_is_not_reference< const char *const> (), ((void)__va_start(&_ArgList, _Format))); 
#line 960
_Result = _vfprintf_l(__acrt_iob_func(1), _Format, 0, _ArgList); 
#line 961
(void)(_ArgList = ((va_list)0)); 
#line 962
return _Result; 
#line 963
} 
#line 967 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\stdio.h"
__inline int __cdecl _printf_s_l(const char *const 
#line 968
_Format, const _locale_t 
#line 969
_Locale, ...) 
#line 974 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\stdio.h"
{ 
#line 975
int _Result; 
#line 976
va_list _ArgList; 
#line 977
(void)(__vcrt_assert_va_start_is_not_reference< __crt_locale_pointers *const> (), ((void)__va_start(&_ArgList, _Locale))); 
#line 978
_Result = _vfprintf_s_l(__acrt_iob_func(1), _Format, _Locale, _ArgList); 
#line 979
(void)(_ArgList = ((va_list)0)); 
#line 980
return _Result; 
#line 981
} 
#line 987 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\stdio.h"
__inline int __cdecl printf_s(const char *const 
#line 988
_Format, ...) 
#line 993 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\stdio.h"
{ 
#line 994
int _Result; 
#line 995
va_list _ArgList; 
#line 996
(void)(__vcrt_assert_va_start_is_not_reference< const char *const> (), ((void)__va_start(&_ArgList, _Format))); 
#line 997
_Result = _vfprintf_s_l(__acrt_iob_func(1), _Format, 0, _ArgList); 
#line 998
(void)(_ArgList = ((va_list)0)); 
#line 999
return _Result; 
#line 1000
} 
#line 1006 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\stdio.h"
__inline int __cdecl _printf_p_l(const char *const 
#line 1007
_Format, const _locale_t 
#line 1008
_Locale, ...) 
#line 1013 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\stdio.h"
{ 
#line 1014
int _Result; 
#line 1015
va_list _ArgList; 
#line 1016
(void)(__vcrt_assert_va_start_is_not_reference< __crt_locale_pointers *const> (), ((void)__va_start(&_ArgList, _Locale))); 
#line 1017
_Result = _vfprintf_p_l(__acrt_iob_func(1), _Format, _Locale, _ArgList); 
#line 1018
(void)(_ArgList = ((va_list)0)); 
#line 1019
return _Result; 
#line 1020
} 
#line 1024 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\stdio.h"
__inline int __cdecl _printf_p(const char *const 
#line 1025
_Format, ...) 
#line 1030 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\stdio.h"
{ 
#line 1031
int _Result; 
#line 1032
va_list _ArgList; 
#line 1033
(void)(__vcrt_assert_va_start_is_not_reference< const char *const> (), ((void)__va_start(&_ArgList, _Format))); 
#line 1034
_Result = _vfprintf_p_l(__acrt_iob_func(1), _Format, 0, _ArgList); 
#line 1035
(void)(_ArgList = ((va_list)0)); 
#line 1036
return _Result; 
#line 1037
} 
#line 1046 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\stdio.h"
__declspec(dllimport) int __cdecl __stdio_common_vfscanf(unsigned __int64 _Options, FILE * _Stream, const char * _Format, _locale_t _Locale, va_list _Arglist); 
#line 1055
__inline int __cdecl _vfscanf_l(FILE *const 
#line 1056
_Stream, const char *const 
#line 1057
_Format, const _locale_t 
#line 1058
_Locale, va_list 
#line 1059
_ArgList) 
#line 1064 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\stdio.h"
{ 
#line 1065
return __stdio_common_vfscanf(*__local_stdio_scanf_options(), _Stream, _Format, _Locale, _ArgList); 
#line 1068
} 
#line 1072 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\stdio.h"
__inline int __cdecl vfscanf(FILE *const 
#line 1073
_Stream, const char *const 
#line 1074
_Format, va_list 
#line 1075
_ArgList) 
#line 1080 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\stdio.h"
{ 
#line 1081
return _vfscanf_l(_Stream, _Format, 0, _ArgList); 
#line 1082
} 
#line 1086 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\stdio.h"
__inline int __cdecl _vfscanf_s_l(FILE *const 
#line 1087
_Stream, const char *const 
#line 1088
_Format, const _locale_t 
#line 1089
_Locale, va_list 
#line 1090
_ArgList) 
#line 1095 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\stdio.h"
{ 
#line 1096
return __stdio_common_vfscanf((*__local_stdio_scanf_options()) | (1Ui64 << 0), _Stream, _Format, _Locale, _ArgList); 
#line 1099
} 
#line 1106 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\stdio.h"
__inline int __cdecl vfscanf_s(FILE *const 
#line 1107
_Stream, const char *const 
#line 1108
_Format, va_list 
#line 1109
_ArgList) 
#line 1114 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\stdio.h"
{ 
#line 1115
return _vfscanf_s_l(_Stream, _Format, 0, _ArgList); 
#line 1116
} 
#line 1122 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\stdio.h"
__inline int __cdecl _vscanf_l(const char *const 
#line 1123
_Format, const _locale_t 
#line 1124
_Locale, va_list 
#line 1125
_ArgList) 
#line 1130 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\stdio.h"
{ 
#line 1131
return _vfscanf_l(__acrt_iob_func(0), _Format, _Locale, _ArgList); 
#line 1132
} 
#line 1136 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\stdio.h"
__inline int __cdecl vscanf(const char *const 
#line 1137
_Format, va_list 
#line 1138
_ArgList) 
#line 1143 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\stdio.h"
{ 
#line 1144
return _vfscanf_l(__acrt_iob_func(0), _Format, 0, _ArgList); 
#line 1145
} 
#line 1149 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\stdio.h"
__inline int __cdecl _vscanf_s_l(const char *const 
#line 1150
_Format, const _locale_t 
#line 1151
_Locale, va_list 
#line 1152
_ArgList) 
#line 1157 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\stdio.h"
{ 
#line 1158
return _vfscanf_s_l(__acrt_iob_func(0), _Format, _Locale, _ArgList); 
#line 1159
} 
#line 1165 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\stdio.h"
__inline int __cdecl vscanf_s(const char *const 
#line 1166
_Format, va_list 
#line 1167
_ArgList) 
#line 1172 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\stdio.h"
{ 
#line 1173
return _vfscanf_s_l(__acrt_iob_func(0), _Format, 0, _ArgList); 
#line 1174
} 
#line 1180 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\stdio.h"
__inline int __cdecl _fscanf_l(FILE *const 
#line 1181
_Stream, const char *const 
#line 1182
_Format, const _locale_t 
#line 1183
_Locale, ...) 
#line 1188 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\stdio.h"
{ 
#line 1189
int _Result; 
#line 1190
va_list _ArgList; 
#line 1191
(void)(__vcrt_assert_va_start_is_not_reference< __crt_locale_pointers *const> (), ((void)__va_start(&_ArgList, _Locale))); 
#line 1192
_Result = _vfscanf_l(_Stream, _Format, _Locale, _ArgList); 
#line 1193
(void)(_ArgList = ((va_list)0)); 
#line 1194
return _Result; 
#line 1195
} 
#line 1199 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\stdio.h"
__inline int __cdecl fscanf(FILE *const 
#line 1200
_Stream, const char *const 
#line 1201
_Format, ...) 
#line 1206 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\stdio.h"
{ 
#line 1207
int _Result; 
#line 1208
va_list _ArgList; 
#line 1209
(void)(__vcrt_assert_va_start_is_not_reference< const char *const> (), ((void)__va_start(&_ArgList, _Format))); 
#line 1210
_Result = _vfscanf_l(_Stream, _Format, 0, _ArgList); 
#line 1211
(void)(_ArgList = ((va_list)0)); 
#line 1212
return _Result; 
#line 1213
} 
#line 1217 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\stdio.h"
__inline int __cdecl _fscanf_s_l(FILE *const 
#line 1218
_Stream, const char *const 
#line 1219
_Format, const _locale_t 
#line 1220
_Locale, ...) 
#line 1225 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\stdio.h"
{ 
#line 1226
int _Result; 
#line 1227
va_list _ArgList; 
#line 1228
(void)(__vcrt_assert_va_start_is_not_reference< __crt_locale_pointers *const> (), ((void)__va_start(&_ArgList, _Locale))); 
#line 1229
_Result = _vfscanf_s_l(_Stream, _Format, _Locale, _ArgList); 
#line 1230
(void)(_ArgList = ((va_list)0)); 
#line 1231
return _Result; 
#line 1232
} 
#line 1238 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\stdio.h"
__inline int __cdecl fscanf_s(FILE *const 
#line 1239
_Stream, const char *const 
#line 1240
_Format, ...) 
#line 1245 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\stdio.h"
{ 
#line 1246
int _Result; 
#line 1247
va_list _ArgList; 
#line 1248
(void)(__vcrt_assert_va_start_is_not_reference< const char *const> (), ((void)__va_start(&_ArgList, _Format))); 
#line 1249
_Result = _vfscanf_s_l(_Stream, _Format, 0, _ArgList); 
#line 1250
(void)(_ArgList = ((va_list)0)); 
#line 1251
return _Result; 
#line 1252
} 
#line 1258 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\stdio.h"
__inline int __cdecl _scanf_l(const char *const 
#line 1259
_Format, const _locale_t 
#line 1260
_Locale, ...) 
#line 1265 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\stdio.h"
{ 
#line 1266
int _Result; 
#line 1267
va_list _ArgList; 
#line 1268
(void)(__vcrt_assert_va_start_is_not_reference< __crt_locale_pointers *const> (), ((void)__va_start(&_ArgList, _Locale))); 
#line 1269
_Result = _vfscanf_l(__acrt_iob_func(0), _Format, _Locale, _ArgList); 
#line 1270
(void)(_ArgList = ((va_list)0)); 
#line 1271
return _Result; 
#line 1272
} 
#line 1276 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\stdio.h"
__inline int __cdecl scanf(const char *const 
#line 1277
_Format, ...) 
#line 1282 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\stdio.h"
{ 
#line 1283
int _Result; 
#line 1284
va_list _ArgList; 
#line 1285
(void)(__vcrt_assert_va_start_is_not_reference< const char *const> (), ((void)__va_start(&_ArgList, _Format))); 
#line 1286
_Result = _vfscanf_l(__acrt_iob_func(0), _Format, 0, _ArgList); 
#line 1287
(void)(_ArgList = ((va_list)0)); 
#line 1288
return _Result; 
#line 1289
} 
#line 1293 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\stdio.h"
__inline int __cdecl _scanf_s_l(const char *const 
#line 1294
_Format, const _locale_t 
#line 1295
_Locale, ...) 
#line 1300 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\stdio.h"
{ 
#line 1301
int _Result; 
#line 1302
va_list _ArgList; 
#line 1303
(void)(__vcrt_assert_va_start_is_not_reference< __crt_locale_pointers *const> (), ((void)__va_start(&_ArgList, _Locale))); 
#line 1304
_Result = _vfscanf_s_l(__acrt_iob_func(0), _Format, _Locale, _ArgList); 
#line 1305
(void)(_ArgList = ((va_list)0)); 
#line 1306
return _Result; 
#line 1307
} 
#line 1313 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\stdio.h"
__inline int __cdecl scanf_s(const char *const 
#line 1314
_Format, ...) 
#line 1319 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\stdio.h"
{ 
#line 1320
int _Result; 
#line 1321
va_list _ArgList; 
#line 1322
(void)(__vcrt_assert_va_start_is_not_reference< const char *const> (), ((void)__va_start(&_ArgList, _Format))); 
#line 1323
_Result = _vfscanf_s_l(__acrt_iob_func(0), _Format, 0, _ArgList); 
#line 1324
(void)(_ArgList = ((va_list)0)); 
#line 1325
return _Result; 
#line 1326
} 
#line 1339 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\stdio.h"
__declspec(dllimport) int __cdecl __stdio_common_vsprintf(unsigned __int64 _Options, char * _Buffer, size_t _BufferCount, const char * _Format, _locale_t _Locale, va_list _ArgList); 
#line 1349
__declspec(dllimport) int __cdecl __stdio_common_vsprintf_s(unsigned __int64 _Options, char * _Buffer, size_t _BufferCount, const char * _Format, _locale_t _Locale, va_list _ArgList); 
#line 1359
__declspec(dllimport) int __cdecl __stdio_common_vsnprintf_s(unsigned __int64 _Options, char * _Buffer, size_t _BufferCount, size_t _MaxCount, const char * _Format, _locale_t _Locale, va_list _ArgList); 
#line 1370
__declspec(dllimport) int __cdecl __stdio_common_vsprintf_p(unsigned __int64 _Options, char * _Buffer, size_t _BufferCount, const char * _Format, _locale_t _Locale, va_list _ArgList); 
#line 1381
__inline int __cdecl _vsnprintf_l(char *const 
#line 1382
_Buffer, const size_t 
#line 1383
_BufferCount, const char *const 
#line 1384
_Format, const _locale_t 
#line 1385
_Locale, va_list 
#line 1386
_ArgList) 
#line 1391 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\stdio.h"
{ 
#line 1392
const int _Result = __stdio_common_vsprintf((*__local_stdio_printf_options()) | (1Ui64 << 0), _Buffer, _BufferCount, _Format, _Locale, _ArgList); 
#line 1396
return (_Result < 0) ? -1 : _Result; 
#line 1397
} 
#line 1402 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\stdio.h"
__inline int __cdecl _vsnprintf(char *const 
#line 1403
_Buffer, const size_t 
#line 1404
_BufferCount, const char *const 
#line 1405
_Format, va_list 
#line 1406
_ArgList) 
#line 1411 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\stdio.h"
{ 
#line 1412
return _vsnprintf_l(_Buffer, _BufferCount, _Format, 0, _ArgList); 
#line 1413
} 
#line 1429 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\stdio.h"
__inline int __cdecl vsnprintf(char *const 
#line 1430
_Buffer, const size_t 
#line 1431
_BufferCount, const char *const 
#line 1432
_Format, va_list 
#line 1433
_ArgList) 
#line 1438 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\stdio.h"
{ 
#line 1439
const int _Result = __stdio_common_vsprintf((*__local_stdio_printf_options()) | (1Ui64 << 1), _Buffer, _BufferCount, _Format, 0, _ArgList); 
#line 1443
return (_Result < 0) ? -1 : _Result; 
#line 1444
} 
#line 1449 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\stdio.h"
__inline int __cdecl _vsprintf_l(char *const 
#line 1450
_Buffer, const char *const 
#line 1451
_Format, const _locale_t 
#line 1452
_Locale, va_list 
#line 1453
_ArgList) 
#line 1458 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\stdio.h"
{ 
#line 1459
return _vsnprintf_l(_Buffer, (size_t)(-1), _Format, _Locale, _ArgList); 
#line 1460
} 
#line 1465 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\stdio.h"
__inline int __cdecl vsprintf(char *const 
#line 1466
_Buffer, const char *const 
#line 1467
_Format, va_list 
#line 1468
_ArgList) 
#line 1473 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\stdio.h"
{ 
#line 1474
return _vsnprintf_l(_Buffer, (size_t)(-1), _Format, 0, _ArgList); 
#line 1475
} 
#line 1480 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\stdio.h"
__inline int __cdecl _vsprintf_s_l(char *const 
#line 1481
_Buffer, const size_t 
#line 1482
_BufferCount, const char *const 
#line 1483
_Format, const _locale_t 
#line 1484
_Locale, va_list 
#line 1485
_ArgList) 
#line 1490 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\stdio.h"
{ 
#line 1491
const int _Result = __stdio_common_vsprintf_s(*__local_stdio_printf_options(), _Buffer, _BufferCount, _Format, _Locale, _ArgList); 
#line 1495
return (_Result < 0) ? -1 : _Result; 
#line 1496
} 
#line 1503 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\stdio.h"
__inline int __cdecl vsprintf_s(char *const 
#line 1504
_Buffer, const size_t 
#line 1505
_BufferCount, const char *const 
#line 1506
_Format, va_list 
#line 1507
_ArgList) 
#line 1512 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\stdio.h"
{ 
#line 1513
return _vsprintf_s_l(_Buffer, _BufferCount, _Format, 0, _ArgList); 
#line 1514
} 
#line 1517 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\stdio.h"
extern "C++" {template < size_t _Size > inline int __cdecl vsprintf_s ( char ( & _Buffer ) [ _Size ], char const * _Format, va_list _ArgList ) throw ( ) { return vsprintf_s ( _Buffer, _Size, _Format, _ArgList ); }}
#line 1529 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\stdio.h"
__inline int __cdecl _vsprintf_p_l(char *const 
#line 1530
_Buffer, const size_t 
#line 1531
_BufferCount, const char *const 
#line 1532
_Format, const _locale_t 
#line 1533
_Locale, va_list 
#line 1534
_ArgList) 
#line 1539 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\stdio.h"
{ 
#line 1540
const int _Result = __stdio_common_vsprintf_p(*__local_stdio_printf_options(), _Buffer, _BufferCount, _Format, _Locale, _ArgList); 
#line 1544
return (_Result < 0) ? -1 : _Result; 
#line 1545
} 
#line 1550 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\stdio.h"
__inline int __cdecl _vsprintf_p(char *const 
#line 1551
_Buffer, const size_t 
#line 1552
_BufferCount, const char *const 
#line 1553
_Format, va_list 
#line 1554
_ArgList) 
#line 1559 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\stdio.h"
{ 
#line 1560
return _vsprintf_p_l(_Buffer, _BufferCount, _Format, 0, _ArgList); 
#line 1561
} 
#line 1566 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\stdio.h"
__inline int __cdecl _vsnprintf_s_l(char *const 
#line 1567
_Buffer, const size_t 
#line 1568
_BufferCount, const size_t 
#line 1569
_MaxCount, const char *const 
#line 1570
_Format, const _locale_t 
#line 1571
_Locale, va_list 
#line 1572
_ArgList) 
#line 1577 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\stdio.h"
{ 
#line 1578
const int _Result = __stdio_common_vsnprintf_s(*__local_stdio_printf_options(), _Buffer, _BufferCount, _MaxCount, _Format, _Locale, _ArgList); 
#line 1582
return (_Result < 0) ? -1 : _Result; 
#line 1583
} 
#line 1588 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\stdio.h"
__inline int __cdecl _vsnprintf_s(char *const 
#line 1589
_Buffer, const size_t 
#line 1590
_BufferCount, const size_t 
#line 1591
_MaxCount, const char *const 
#line 1592
_Format, va_list 
#line 1593
_ArgList) 
#line 1598 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\stdio.h"
{ 
#line 1599
return _vsnprintf_s_l(_Buffer, _BufferCount, _MaxCount, _Format, 0, _ArgList); 
#line 1600
} 
#line 1603 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\stdio.h"
extern "C++" {template < size_t _Size > inline int __cdecl _vsnprintf_s ( char ( & _Buffer ) [ _Size ], size_t _BufferCount, char const * _Format, va_list _ArgList ) throw ( ) { return _vsnprintf_s ( _Buffer, _Size, _BufferCount, _Format, _ArgList ); }}
#line 1616 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\stdio.h"
__inline int __cdecl vsnprintf_s(char *const 
#line 1617
_Buffer, const size_t 
#line 1618
_BufferCount, const size_t 
#line 1619
_MaxCount, const char *const 
#line 1620
_Format, va_list 
#line 1621
_ArgList) 
#line 1626 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\stdio.h"
{ 
#line 1627
return _vsnprintf_s_l(_Buffer, _BufferCount, _MaxCount, _Format, 0, _ArgList); 
#line 1628
} 
#line 1631 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\stdio.h"
extern "C++" {template < size_t _Size > inline int __cdecl vsnprintf_s ( char ( & _Buffer ) [ _Size ], size_t _BufferCount, char const * _Format, va_list _ArgList ) throw ( ) { return vsnprintf_s ( _Buffer, _Size, _BufferCount, _Format, _ArgList ); }}
#line 1643 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\stdio.h"
__inline int __cdecl _vscprintf_l(const char *const 
#line 1644
_Format, const _locale_t 
#line 1645
_Locale, va_list 
#line 1646
_ArgList) 
#line 1651 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\stdio.h"
{ 
#line 1652
const int _Result = __stdio_common_vsprintf((*__local_stdio_printf_options()) | (1Ui64 << 1), 0, 0, _Format, _Locale, _ArgList); 
#line 1656
return (_Result < 0) ? -1 : _Result; 
#line 1657
} 
#line 1661 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\stdio.h"
__inline int __cdecl _vscprintf(const char *const 
#line 1662
_Format, va_list 
#line 1663
_ArgList) 
#line 1668 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\stdio.h"
{ 
#line 1669
return _vscprintf_l(_Format, 0, _ArgList); 
#line 1670
} 
#line 1674 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\stdio.h"
__inline int __cdecl _vscprintf_p_l(const char *const 
#line 1675
_Format, const _locale_t 
#line 1676
_Locale, va_list 
#line 1677
_ArgList) 
#line 1682 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\stdio.h"
{ 
#line 1683
const int _Result = __stdio_common_vsprintf_p((*__local_stdio_printf_options()) | (1Ui64 << 1), 0, 0, _Format, _Locale, _ArgList); 
#line 1687
return (_Result < 0) ? -1 : _Result; 
#line 1688
} 
#line 1692 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\stdio.h"
__inline int __cdecl _vscprintf_p(const char *const 
#line 1693
_Format, va_list 
#line 1694
_ArgList) 
#line 1699 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\stdio.h"
{ 
#line 1700
return _vscprintf_p_l(_Format, 0, _ArgList); 
#line 1701
} 
#line 1705 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\stdio.h"
__inline int __cdecl _vsnprintf_c_l(char *const 
#line 1706
_Buffer, const size_t 
#line 1707
_BufferCount, const char *const 
#line 1708
_Format, const _locale_t 
#line 1709
_Locale, va_list 
#line 1710
_ArgList) 
#line 1715 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\stdio.h"
{ 
#line 1716
const int _Result = __stdio_common_vsprintf(*__local_stdio_printf_options(), _Buffer, _BufferCount, _Format, _Locale, _ArgList); 
#line 1720
return (_Result < 0) ? -1 : _Result; 
#line 1721
} 
#line 1726 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\stdio.h"
__inline int __cdecl _vsnprintf_c(char *const 
#line 1727
_Buffer, const size_t 
#line 1728
_BufferCount, const char *const 
#line 1729
_Format, va_list 
#line 1730
_ArgList) 
#line 1735 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\stdio.h"
{ 
#line 1736
return _vsnprintf_c_l(_Buffer, _BufferCount, _Format, 0, _ArgList); 
#line 1737
} 
#line 1742 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\stdio.h"
__inline int __cdecl _sprintf_l(char *const 
#line 1743
_Buffer, const char *const 
#line 1744
_Format, const _locale_t 
#line 1745
_Locale, ...) 
#line 1750 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\stdio.h"
{ 
#line 1751
int _Result; 
#line 1752
va_list _ArgList; 
#line 1753
(void)(__vcrt_assert_va_start_is_not_reference< __crt_locale_pointers *const> (), ((void)__va_start(&_ArgList, _Locale))); 
#line 1755
_Result = _vsprintf_l(_Buffer, _Format, _Locale, _ArgList); 
#line 1757
(void)(_ArgList = ((va_list)0)); 
#line 1758
return _Result; 
#line 1759
} 
#line 1764 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\stdio.h"
__inline int __cdecl sprintf(char *const 
#line 1765
_Buffer, const char *const 
#line 1766
_Format, ...) 
#line 1771 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\stdio.h"
{ 
#line 1772
int _Result; 
#line 1773
va_list _ArgList; 
#line 1774
(void)(__vcrt_assert_va_start_is_not_reference< const char *const> (), ((void)__va_start(&_ArgList, _Format))); 
#line 1776
_Result = _vsprintf_l(_Buffer, _Format, 0, _ArgList); 
#line 1778
(void)(_ArgList = ((va_list)0)); 
#line 1779
return _Result; 
#line 1780
} 
#line 1783 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\stdio.h"
__inline int __cdecl sprintf(char * _Buffer, const char * _Format, ...); __inline int __cdecl vsprintf(char * _Buffer, const char * _Format, va_list _Args); 
#line 1792 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\stdio.h"
__inline int __cdecl _sprintf_s_l(char *const 
#line 1793
_Buffer, const size_t 
#line 1794
_BufferCount, const char *const 
#line 1795
_Format, const _locale_t 
#line 1796
_Locale, ...) 
#line 1801 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\stdio.h"
{ 
#line 1802
int _Result; 
#line 1803
va_list _ArgList; 
#line 1804
(void)(__vcrt_assert_va_start_is_not_reference< __crt_locale_pointers *const> (), ((void)__va_start(&_ArgList, _Locale))); 
#line 1805
_Result = _vsprintf_s_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList); 
#line 1806
(void)(_ArgList = ((va_list)0)); 
#line 1807
return _Result; 
#line 1808
} 
#line 1815 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\stdio.h"
__inline int __cdecl sprintf_s(char *const 
#line 1816
_Buffer, const size_t 
#line 1817
_BufferCount, const char *const 
#line 1818
_Format, ...) 
#line 1823 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\stdio.h"
{ 
#line 1824
int _Result; 
#line 1825
va_list _ArgList; 
#line 1826
(void)(__vcrt_assert_va_start_is_not_reference< const char *const> (), ((void)__va_start(&_ArgList, _Format))); 
#line 1827
_Result = _vsprintf_s_l(_Buffer, _BufferCount, _Format, 0, _ArgList); 
#line 1828
(void)(_ArgList = ((va_list)0)); 
#line 1829
return _Result; 
#line 1830
} 
#line 1835 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\stdio.h"
extern "C++" {template < size_t _Size > inline int __cdecl sprintf_s ( char ( & _Buffer ) [ _Size ], char const * _Format, ... ) throw ( ) { va_list _ArgList; ( ( void ) ( __vcrt_assert_va_start_is_not_reference < decltype ( _Format ) > ( ), ( ( void ) ( __va_start ( & _ArgList, _Format ) ) ) ) ); return vsprintf_s ( _Buffer, _Size, _Format, _ArgList ); }}
#line 1844 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\stdio.h"
__inline int __cdecl _sprintf_p_l(char *const 
#line 1845
_Buffer, const size_t 
#line 1846
_BufferCount, const char *const 
#line 1847
_Format, const _locale_t 
#line 1848
_Locale, ...) 
#line 1853 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\stdio.h"
{ 
#line 1854
int _Result; 
#line 1855
va_list _ArgList; 
#line 1856
(void)(__vcrt_assert_va_start_is_not_reference< __crt_locale_pointers *const> (), ((void)__va_start(&_ArgList, _Locale))); 
#line 1857
_Result = _vsprintf_p_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList); 
#line 1858
(void)(_ArgList = ((va_list)0)); 
#line 1859
return _Result; 
#line 1860
} 
#line 1865 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\stdio.h"
__inline int __cdecl _sprintf_p(char *const 
#line 1866
_Buffer, const size_t 
#line 1867
_BufferCount, const char *const 
#line 1868
_Format, ...) 
#line 1873 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\stdio.h"
{ 
#line 1874
int _Result; 
#line 1875
va_list _ArgList; 
#line 1876
(void)(__vcrt_assert_va_start_is_not_reference< const char *const> (), ((void)__va_start(&_ArgList, _Format))); 
#line 1877
_Result = _vsprintf_p_l(_Buffer, _BufferCount, _Format, 0, _ArgList); 
#line 1878
(void)(_ArgList = ((va_list)0)); 
#line 1879
return _Result; 
#line 1880
} 
#line 1885 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\stdio.h"
__inline int __cdecl _snprintf_l(char *const 
#line 1886
_Buffer, const size_t 
#line 1887
_BufferCount, const char *const 
#line 1888
_Format, const _locale_t 
#line 1889
_Locale, ...) 
#line 1894 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\stdio.h"
{ 
#line 1895
int _Result; 
#line 1896
va_list _ArgList; 
#line 1897
(void)(__vcrt_assert_va_start_is_not_reference< __crt_locale_pointers *const> (), ((void)__va_start(&_ArgList, _Locale))); 
#line 1899
_Result = _vsnprintf_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList); 
#line 1901
(void)(_ArgList = ((va_list)0)); 
#line 1902
return _Result; 
#line 1903
} 
#line 1919 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\stdio.h"
__inline int __cdecl snprintf(char *const 
#line 1920
_Buffer, const size_t 
#line 1921
_BufferCount, const char *const 
#line 1922
_Format, ...) 
#line 1927 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\stdio.h"
{ 
#line 1928
int _Result; 
#line 1929
va_list _ArgList; 
#line 1930
(void)(__vcrt_assert_va_start_is_not_reference< const char *const> (), ((void)__va_start(&_ArgList, _Format))); 
#line 1931
_Result = vsnprintf(_Buffer, _BufferCount, _Format, _ArgList); 
#line 1932
(void)(_ArgList = ((va_list)0)); 
#line 1933
return _Result; 
#line 1934
} 
#line 1939 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\stdio.h"
__inline int __cdecl _snprintf(char *const 
#line 1940
_Buffer, const size_t 
#line 1941
_BufferCount, const char *const 
#line 1942
_Format, ...) 
#line 1947 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\stdio.h"
{ 
#line 1948
int _Result; 
#line 1949
va_list _ArgList; 
#line 1950
(void)(__vcrt_assert_va_start_is_not_reference< const char *const> (), ((void)__va_start(&_ArgList, _Format))); 
#line 1951
_Result = _vsnprintf(_Buffer, _BufferCount, _Format, _ArgList); 
#line 1952
(void)(_ArgList = ((va_list)0)); 
#line 1953
return _Result; 
#line 1954
} 
#line 1957 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\stdio.h"
__inline int __cdecl _snprintf(char * _Buffer, size_t _BufferCount, const char * _Format, ...); __inline int __cdecl _vsnprintf(char * _Buffer, size_t _BufferCount, const char * _Format, va_list _Args); 
#line 1968 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\stdio.h"
__inline int __cdecl _snprintf_c_l(char *const 
#line 1969
_Buffer, const size_t 
#line 1970
_BufferCount, const char *const 
#line 1971
_Format, const _locale_t 
#line 1972
_Locale, ...) 
#line 1977 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\stdio.h"
{ 
#line 1978
int _Result; 
#line 1979
va_list _ArgList; 
#line 1980
(void)(__vcrt_assert_va_start_is_not_reference< __crt_locale_pointers *const> (), ((void)__va_start(&_ArgList, _Locale))); 
#line 1981
_Result = _vsnprintf_c_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList); 
#line 1982
(void)(_ArgList = ((va_list)0)); 
#line 1983
return _Result; 
#line 1984
} 
#line 1989 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\stdio.h"
__inline int __cdecl _snprintf_c(char *const 
#line 1990
_Buffer, const size_t 
#line 1991
_BufferCount, const char *const 
#line 1992
_Format, ...) 
#line 1997 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\stdio.h"
{ 
#line 1998
int _Result; 
#line 1999
va_list _ArgList; 
#line 2000
(void)(__vcrt_assert_va_start_is_not_reference< const char *const> (), ((void)__va_start(&_ArgList, _Format))); 
#line 2001
_Result = _vsnprintf_c_l(_Buffer, _BufferCount, _Format, 0, _ArgList); 
#line 2002
(void)(_ArgList = ((va_list)0)); 
#line 2003
return _Result; 
#line 2004
} 
#line 2009 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\stdio.h"
__inline int __cdecl _snprintf_s_l(char *const 
#line 2010
_Buffer, const size_t 
#line 2011
_BufferCount, const size_t 
#line 2012
_MaxCount, const char *const 
#line 2013
_Format, const _locale_t 
#line 2014
_Locale, ...) 
#line 2019 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\stdio.h"
{ 
#line 2020
int _Result; 
#line 2021
va_list _ArgList; 
#line 2022
(void)(__vcrt_assert_va_start_is_not_reference< __crt_locale_pointers *const> (), ((void)__va_start(&_ArgList, _Locale))); 
#line 2023
_Result = _vsnprintf_s_l(_Buffer, _BufferCount, _MaxCount, _Format, _Locale, _ArgList); 
#line 2024
(void)(_ArgList = ((va_list)0)); 
#line 2025
return _Result; 
#line 2026
} 
#line 2031 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\stdio.h"
__inline int __cdecl _snprintf_s(char *const 
#line 2032
_Buffer, const size_t 
#line 2033
_BufferCount, const size_t 
#line 2034
_MaxCount, const char *const 
#line 2035
_Format, ...) 
#line 2040 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\stdio.h"
{ 
#line 2041
int _Result; 
#line 2042
va_list _ArgList; 
#line 2043
(void)(__vcrt_assert_va_start_is_not_reference< const char *const> (), ((void)__va_start(&_ArgList, _Format))); 
#line 2044
_Result = _vsnprintf_s_l(_Buffer, _BufferCount, _MaxCount, _Format, 0, _ArgList); 
#line 2045
(void)(_ArgList = ((va_list)0)); 
#line 2046
return _Result; 
#line 2047
} 
#line 2050 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\stdio.h"
extern "C++" {template < size_t _Size > inline int __cdecl _snprintf_s ( char ( & _Buffer ) [ _Size ], size_t _BufferCount, char const * _Format, ... ) throw ( ) { va_list _ArgList; ( ( void ) ( __vcrt_assert_va_start_is_not_reference < decltype ( _Format ) > ( ), ( ( void ) ( __va_start ( & _ArgList, _Format ) ) ) ) ); return _vsnprintf_s ( _Buffer, _Size, _BufferCount, _Format, _ArgList ); }}
#line 2059 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\stdio.h"
__inline int __cdecl _scprintf_l(const char *const 
#line 2060
_Format, const _locale_t 
#line 2061
_Locale, ...) 
#line 2066 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\stdio.h"
{ 
#line 2067
int _Result; 
#line 2068
va_list _ArgList; 
#line 2069
(void)(__vcrt_assert_va_start_is_not_reference< __crt_locale_pointers *const> (), ((void)__va_start(&_ArgList, _Locale))); 
#line 2070
_Result = _vscprintf_l(_Format, _Locale, _ArgList); 
#line 2071
(void)(_ArgList = ((va_list)0)); 
#line 2072
return _Result; 
#line 2073
} 
#line 2077 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\stdio.h"
__inline int __cdecl _scprintf(const char *const 
#line 2078
_Format, ...) 
#line 2083 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\stdio.h"
{ 
#line 2084
int _Result; 
#line 2085
va_list _ArgList; 
#line 2086
(void)(__vcrt_assert_va_start_is_not_reference< const char *const> (), ((void)__va_start(&_ArgList, _Format))); 
#line 2087
_Result = _vscprintf_l(_Format, 0, _ArgList); 
#line 2088
(void)(_ArgList = ((va_list)0)); 
#line 2089
return _Result; 
#line 2090
} 
#line 2094 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\stdio.h"
__inline int __cdecl _scprintf_p_l(const char *const 
#line 2095
_Format, const _locale_t 
#line 2096
_Locale, ...) 
#line 2101 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\stdio.h"
{ 
#line 2102
int _Result; 
#line 2103
va_list _ArgList; 
#line 2104
(void)(__vcrt_assert_va_start_is_not_reference< __crt_locale_pointers *const> (), ((void)__va_start(&_ArgList, _Locale))); 
#line 2105
_Result = _vscprintf_p_l(_Format, _Locale, _ArgList); 
#line 2106
(void)(_ArgList = ((va_list)0)); 
#line 2107
return _Result; 
#line 2108
} 
#line 2112 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\stdio.h"
__inline int __cdecl _scprintf_p(const char *const 
#line 2113
_Format, ...) 
#line 2118 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\stdio.h"
{ 
#line 2119
int _Result; 
#line 2120
va_list _ArgList; 
#line 2121
(void)(__vcrt_assert_va_start_is_not_reference< const char *const> (), ((void)__va_start(&_ArgList, _Format))); 
#line 2122
_Result = _vscprintf_p(_Format, _ArgList); 
#line 2123
(void)(_ArgList = ((va_list)0)); 
#line 2124
return _Result; 
#line 2125
} 
#line 2133 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\stdio.h"
__declspec(dllimport) int __cdecl __stdio_common_vsscanf(unsigned __int64 _Options, const char * _Buffer, size_t _BufferCount, const char * _Format, _locale_t _Locale, va_list _ArgList); 
#line 2143
__inline int __cdecl _vsscanf_l(const char *const 
#line 2144
_Buffer, const char *const 
#line 2145
_Format, const _locale_t 
#line 2146
_Locale, va_list 
#line 2147
_ArgList) 
#line 2152 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\stdio.h"
{ 
#line 2153
return __stdio_common_vsscanf(*__local_stdio_scanf_options(), _Buffer, (size_t)(-1), _Format, _Locale, _ArgList); 
#line 2156
} 
#line 2160 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\stdio.h"
__inline int __cdecl vsscanf(const char *const 
#line 2161
_Buffer, const char *const 
#line 2162
_Format, va_list 
#line 2163
_ArgList) 
#line 2168 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\stdio.h"
{ 
#line 2169
return _vsscanf_l(_Buffer, _Format, 0, _ArgList); 
#line 2170
} 
#line 2174 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\stdio.h"
__inline int __cdecl _vsscanf_s_l(const char *const 
#line 2175
_Buffer, const char *const 
#line 2176
_Format, const _locale_t 
#line 2177
_Locale, va_list 
#line 2178
_ArgList) 
#line 2183 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\stdio.h"
{ 
#line 2184
return __stdio_common_vsscanf((*__local_stdio_scanf_options()) | (1Ui64 << 0), _Buffer, (size_t)(-1), _Format, _Locale, _ArgList); 
#line 2187
} 
#line 2192 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\stdio.h"
#pragma warning(push)
#pragma warning(disable: 6530)
#line 2196
__inline int __cdecl vsscanf_s(const char *const 
#line 2197
_Buffer, const char *const 
#line 2198
_Format, va_list 
#line 2199
_ArgList) 
#line 2204 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\stdio.h"
{ 
#line 2205
return _vsscanf_s_l(_Buffer, _Format, 0, _ArgList); 
#line 2206
} 
#line 2209 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\stdio.h"
extern "C++" {template < size_t _Size > inline int __cdecl vsscanf_s ( char const ( & _Buffer ) [ _Size ], char const * _Format, va_list _ArgList ) throw ( ) { return vsscanf_s ( _Buffer, _Size, _Format, _ArgList ); }}
#line 2216 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\stdio.h"
#pragma warning(pop)
#line 2221 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\stdio.h"
__inline int __cdecl _sscanf_l(const char *const 
#line 2222
_Buffer, const char *const 
#line 2223
_Format, const _locale_t 
#line 2224
_Locale, ...) 
#line 2229 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\stdio.h"
{ 
#line 2230
int _Result; 
#line 2231
va_list _ArgList; 
#line 2232
(void)(__vcrt_assert_va_start_is_not_reference< __crt_locale_pointers *const> (), ((void)__va_start(&_ArgList, _Locale))); 
#line 2233
_Result = _vsscanf_l(_Buffer, _Format, _Locale, _ArgList); 
#line 2234
(void)(_ArgList = ((va_list)0)); 
#line 2235
return _Result; 
#line 2236
} 
#line 2240 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\stdio.h"
__inline int __cdecl sscanf(const char *const 
#line 2241
_Buffer, const char *const 
#line 2242
_Format, ...) 
#line 2247 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\stdio.h"
{ 
#line 2248
int _Result; 
#line 2249
va_list _ArgList; 
#line 2250
(void)(__vcrt_assert_va_start_is_not_reference< const char *const> (), ((void)__va_start(&_ArgList, _Format))); 
#line 2251
_Result = _vsscanf_l(_Buffer, _Format, 0, _ArgList); 
#line 2252
(void)(_ArgList = ((va_list)0)); 
#line 2253
return _Result; 
#line 2254
} 
#line 2258 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\stdio.h"
__inline int __cdecl _sscanf_s_l(const char *const 
#line 2259
_Buffer, const char *const 
#line 2260
_Format, const _locale_t 
#line 2261
_Locale, ...) 
#line 2266 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\stdio.h"
{ 
#line 2267
int _Result; 
#line 2268
va_list _ArgList; 
#line 2269
(void)(__vcrt_assert_va_start_is_not_reference< __crt_locale_pointers *const> (), ((void)__va_start(&_ArgList, _Locale))); 
#line 2270
_Result = _vsscanf_s_l(_Buffer, _Format, _Locale, _ArgList); 
#line 2271
(void)(_ArgList = ((va_list)0)); 
#line 2272
return _Result; 
#line 2273
} 
#line 2279 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\stdio.h"
__inline int __cdecl sscanf_s(const char *const 
#line 2280
_Buffer, const char *const 
#line 2281
_Format, ...) 
#line 2286 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\stdio.h"
{ 
#line 2287
int _Result; 
#line 2288
va_list _ArgList; 
#line 2289
(void)(__vcrt_assert_va_start_is_not_reference< const char *const> (), ((void)__va_start(&_ArgList, _Format))); 
#line 2291
_Result = vsscanf_s(_Buffer, _Format, _ArgList); 
#line 2293
(void)(_ArgList = ((va_list)0)); 
#line 2294
return _Result; 
#line 2295
} 
#line 2300 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\stdio.h"
#pragma warning(push)
#pragma warning(disable: 6530)
#line 2304
__inline int __cdecl _snscanf_l(const char *const 
#line 2305
_Buffer, const size_t 
#line 2306
_BufferCount, const char *const 
#line 2307
_Format, const _locale_t 
#line 2308
_Locale, ...) 
#line 2313 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\stdio.h"
{ 
#line 2314
int _Result; 
#line 2315
va_list _ArgList; 
#line 2316
(void)(__vcrt_assert_va_start_is_not_reference< __crt_locale_pointers *const> (), ((void)__va_start(&_ArgList, _Locale))); 
#line 2318
_Result = __stdio_common_vsscanf(*__local_stdio_scanf_options(), _Buffer, _BufferCount, _Format, _Locale, _ArgList); 
#line 2322
(void)(_ArgList = ((va_list)0)); 
#line 2323
return _Result; 
#line 2324
} 
#line 2328 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\stdio.h"
__inline int __cdecl _snscanf(const char *const 
#line 2329
_Buffer, const size_t 
#line 2330
_BufferCount, const char *const 
#line 2331
_Format, ...) 
#line 2336 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\stdio.h"
{ 
#line 2337
int _Result; 
#line 2338
va_list _ArgList; 
#line 2339
(void)(__vcrt_assert_va_start_is_not_reference< const char *const> (), ((void)__va_start(&_ArgList, _Format))); 
#line 2341
_Result = __stdio_common_vsscanf(*__local_stdio_scanf_options(), _Buffer, _BufferCount, _Format, 0, _ArgList); 
#line 2345
(void)(_ArgList = ((va_list)0)); 
#line 2346
return _Result; 
#line 2347
} 
#line 2352 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\stdio.h"
__inline int __cdecl _snscanf_s_l(const char *const 
#line 2353
_Buffer, const size_t 
#line 2354
_BufferCount, const char *const 
#line 2355
_Format, const _locale_t 
#line 2356
_Locale, ...) 
#line 2361 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\stdio.h"
{ 
#line 2362
int _Result; 
#line 2363
va_list _ArgList; 
#line 2364
(void)(__vcrt_assert_va_start_is_not_reference< __crt_locale_pointers *const> (), ((void)__va_start(&_ArgList, _Locale))); 
#line 2366
_Result = __stdio_common_vsscanf((*__local_stdio_scanf_options()) | (1Ui64 << 0), _Buffer, _BufferCount, _Format, _Locale, _ArgList); 
#line 2370
(void)(_ArgList = ((va_list)0)); 
#line 2371
return _Result; 
#line 2372
} 
#line 2376 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\stdio.h"
__inline int __cdecl _snscanf_s(const char *const 
#line 2377
_Buffer, const size_t 
#line 2378
_BufferCount, const char *const 
#line 2379
_Format, ...) 
#line 2384 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\stdio.h"
{ 
#line 2385
int _Result; 
#line 2386
va_list _ArgList; 
#line 2387
(void)(__vcrt_assert_va_start_is_not_reference< const char *const> (), ((void)__va_start(&_ArgList, _Format))); 
#line 2389
_Result = __stdio_common_vsscanf((*__local_stdio_scanf_options()) | (1Ui64 << 0), _Buffer, _BufferCount, _Format, 0, _ArgList); 
#line 2393
(void)(_ArgList = ((va_list)0)); 
#line 2394
return _Result; 
#line 2395
} 
#line 2398 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\stdio.h"
#pragma warning(pop)
#line 2421 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\stdio.h"
__declspec(dllimport) char *__cdecl tempnam(const char * _Directory, const char * _FilePrefix); 
#line 2430 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\stdio.h"
__declspec(dllimport) int __cdecl fcloseall(); 
#line 2431
__declspec(dllimport) FILE *__cdecl fdopen(int _FileHandle, const char * _Format); 
#line 2432
__declspec(dllimport) int __cdecl fgetchar(); 
#line 2433
__declspec(dllimport) int __cdecl fileno(FILE * _Stream); 
#line 2434
__declspec(dllimport) int __cdecl flushall(); 
#line 2435
__declspec(dllimport) int __cdecl fputchar(int _Ch); 
#line 2436
__declspec(dllimport) int __cdecl getw(FILE * _Stream); 
#line 2437
__declspec(dllimport) int __cdecl putw(int _Ch, FILE * _Stream); 
#line 2438
__declspec(dllimport) int __cdecl rmtmp(); 
#line 2445 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\stdio.h"
}__pragma( pack ( pop )) 
#line 2447
#pragma warning(pop)
#line 14 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\cstdio"
#pragma pack ( push, 8 )
#pragma warning(push, 3)
#pragma warning(disable : 4180 4412 4455 4494 4514 4574 4582 4583 4587 4588 4619 4623 4625 4626 4643 4648 4702 4793 4820 4988 5026 5027 5045 6294 4984 5053 )
#line 33
namespace std { 
#pragma warning(push)
#pragma warning(disable : 4995)
#line 37
using ::_Mbstatet;
#line 40
using ::fpos_t;
#line 41
using ::FILE;
#line 42
using ::clearerr;
#line 43
using ::fclose;
#line 44
using ::feof;
#line 45
using ::ferror;
#line 46
using ::fflush;
#line 47
using ::fgetc;
#line 48
using ::fgetpos;
#line 49
using ::fgets;
#line 50
using ::fopen;
#line 51
using ::fprintf;
#line 52
using ::fputc;
#line 53
using ::fputs;
#line 54
using ::fread;
#line 55
using ::freopen;
#line 56
using ::fscanf;
#line 57
using ::fseek;
#line 58
using ::fsetpos;
#line 59
using ::ftell;
#line 60
using ::fwrite;
#line 61
using ::getc;
#line 62
using ::getchar;
#line 63
using ::perror;
#line 64
using ::putc;
#line 65
using ::putchar;
#line 66
using ::printf;
#line 67
using ::puts;
#line 68
using ::remove;
#line 69
using ::rename;
#line 70
using ::rewind;
#line 71
using ::scanf;
#line 72
using ::setbuf;
#line 73
using ::setvbuf;
#line 74
using ::sprintf;
#line 75
using ::sscanf;
#line 76
using ::tmpfile;
#line 77
using ::tmpnam;
#line 78
using ::ungetc;
#line 79
using ::vfprintf;
#line 80
using ::vprintf;
#line 81
using ::vsprintf;
#line 83
using ::snprintf;
#line 84
using ::vsnprintf;
#line 85
using ::vfscanf;
#line 86
using ::vscanf;
#line 87
using ::vsscanf;
#line 89
#pragma warning(pop)
}
#line 94
#pragma warning(pop)
#pragma pack ( pop )
#line 14 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\cstring"
#pragma pack ( push, 8 )
#pragma warning(push, 3)
#pragma warning(disable : 4180 4412 4455 4494 4514 4574 4582 4583 4587 4588 4619 4623 4625 4626 4643 4648 4702 4793 4820 4988 5026 5027 5045 6294 4984 5053 )
#line 21
namespace std { 
#pragma warning(push)
#pragma warning(disable : 4995)
#line 26
using ::memchr;
#line 27
using ::memcmp;
#line 28
using ::memcpy;
#line 29
using ::memmove;
#line 30
using ::memset;
#line 31
using ::strcat;
#line 32
using ::strchr;
#line 33
using ::strcmp;
#line 34
using ::strcoll;
#line 35
using ::strcpy;
#line 36
using ::strcspn;
#line 37
using ::strerror;
#line 38
using ::strlen;
#line 39
using ::strncat;
#line 40
using ::strncmp;
#line 41
using ::strncpy;
#line 42
using ::strpbrk;
#line 43
using ::strrchr;
#line 44
using ::strspn;
#line 45
using ::strstr;
#line 46
using ::strtok;
#line 47
using ::strxfrm;
#line 49
#pragma warning(pop)
}
#line 54
#pragma warning(pop)
#pragma pack ( pop )
#line 14 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_wconio.h"
#pragma warning(push)
#pragma warning(disable: 4324 4514 4574 4710 4793 4820 4995 4996 28719 28726 28727 )
#line 18
__pragma( pack ( push, 8 )) extern "C" {
#line 28
__declspec(dllimport) errno_t __cdecl _cgetws_s(__wchar_t * _Buffer, size_t _BufferCount, size_t * _SizeRead); 
#line 34
extern "C++" {template < size_t _Size > inline errno_t __cdecl _cgetws_s ( wchar_t ( & _Buffer ) [ _Size ], size_t * _SizeRead ) throw ( ) { return _cgetws_s ( _Buffer, _Size, _SizeRead ); }}
#line 42 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_wconio.h"
__declspec(dllimport) int __cdecl _cputws(const __wchar_t * _Buffer); 
#line 46
__declspec(dllimport) wint_t __cdecl _getwch(); 
#line 47
__declspec(dllimport) wint_t __cdecl _getwche(); 
#line 48
__declspec(dllimport) wint_t __cdecl _putwch(__wchar_t _Character); 
#line 49
__declspec(dllimport) wint_t __cdecl _ungetwch(wint_t _Character); 
#line 51
__declspec(dllimport) wint_t __cdecl _getwch_nolock(); 
#line 52
__declspec(dllimport) wint_t __cdecl _getwche_nolock(); 
#line 53
__declspec(dllimport) wint_t __cdecl _putwch_nolock(__wchar_t _Character); 
#line 54
__declspec(dllimport) wint_t __cdecl _ungetwch_nolock(wint_t _Character); 
#line 64
__declspec(dllimport) int __cdecl __conio_common_vcwprintf(unsigned __int64 _Options, const __wchar_t * _Format, _locale_t _Locale, va_list _ArgList); 
#line 72
__declspec(dllimport) int __cdecl __conio_common_vcwprintf_s(unsigned __int64 _Options, const __wchar_t * _Format, _locale_t _Locale, va_list _ArgList); 
#line 80
__declspec(dllimport) int __cdecl __conio_common_vcwprintf_p(unsigned __int64 _Options, const __wchar_t * _Format, _locale_t _Locale, va_list _ArgList); 
#line 88
__inline int __cdecl _vcwprintf_l(const __wchar_t *const 
#line 89
_Format, const _locale_t 
#line 90
_Locale, va_list 
#line 91
_ArgList) 
#line 96 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_wconio.h"
{ 
#line 97
return __conio_common_vcwprintf(*__local_stdio_printf_options(), _Format, _Locale, _ArgList); 
#line 98
} 
#line 102 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_wconio.h"
__inline int __cdecl _vcwprintf(const __wchar_t *const 
#line 103
_Format, va_list 
#line 104
_ArgList) 
#line 109 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_wconio.h"
{ 
#line 110
return _vcwprintf_l(_Format, 0, _ArgList); 
#line 111
} 
#line 115 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_wconio.h"
__inline int __cdecl _vcwprintf_s_l(const __wchar_t *const 
#line 116
_Format, const _locale_t 
#line 117
_Locale, va_list 
#line 118
_ArgList) 
#line 123 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_wconio.h"
{ 
#line 124
return __conio_common_vcwprintf_s(*__local_stdio_printf_options(), _Format, _Locale, _ArgList); 
#line 125
} 
#line 129 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_wconio.h"
__inline int __cdecl _vcwprintf_s(const __wchar_t *const 
#line 130
_Format, va_list 
#line 131
_ArgList) 
#line 136 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_wconio.h"
{ 
#line 137
return _vcwprintf_s_l(_Format, 0, _ArgList); 
#line 138
} 
#line 142 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_wconio.h"
__inline int __cdecl _vcwprintf_p_l(const __wchar_t *const 
#line 143
_Format, const _locale_t 
#line 144
_Locale, va_list 
#line 145
_ArgList) 
#line 150 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_wconio.h"
{ 
#line 151
return __conio_common_vcwprintf_p(*__local_stdio_printf_options(), _Format, _Locale, _ArgList); 
#line 152
} 
#line 156 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_wconio.h"
__inline int __cdecl _vcwprintf_p(const __wchar_t *const 
#line 157
_Format, va_list 
#line 158
_ArgList) 
#line 163 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_wconio.h"
{ 
#line 164
return _vcwprintf_p_l(_Format, 0, _ArgList); 
#line 165
} 
#line 169 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_wconio.h"
__inline int __cdecl _cwprintf_l(const __wchar_t *const 
#line 170
_Format, const _locale_t 
#line 171
_Locale, ...) 
#line 176 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_wconio.h"
{ 
#line 177
int _Result; 
#line 178
va_list _ArgList; 
#line 179
(void)(__vcrt_assert_va_start_is_not_reference< __crt_locale_pointers *const> (), ((void)__va_start(&_ArgList, _Locale))); 
#line 180
_Result = _vcwprintf_l(_Format, _Locale, _ArgList); 
#line 181
(void)(_ArgList = ((va_list)0)); 
#line 182
return _Result; 
#line 183
} 
#line 187 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_wconio.h"
__inline int __cdecl _cwprintf(const __wchar_t *const 
#line 188
_Format, ...) 
#line 193 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_wconio.h"
{ 
#line 194
int _Result; 
#line 195
va_list _ArgList; 
#line 196
(void)(__vcrt_assert_va_start_is_not_reference< const __wchar_t *const> (), ((void)__va_start(&_ArgList, _Format))); 
#line 197
_Result = _vcwprintf_l(_Format, 0, _ArgList); 
#line 198
(void)(_ArgList = ((va_list)0)); 
#line 199
return _Result; 
#line 200
} 
#line 204 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_wconio.h"
__inline int __cdecl _cwprintf_s_l(const __wchar_t *const 
#line 205
_Format, const _locale_t 
#line 206
_Locale, ...) 
#line 211 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_wconio.h"
{ 
#line 212
int _Result; 
#line 213
va_list _ArgList; 
#line 214
(void)(__vcrt_assert_va_start_is_not_reference< __crt_locale_pointers *const> (), ((void)__va_start(&_ArgList, _Locale))); 
#line 215
_Result = _vcwprintf_s_l(_Format, _Locale, _ArgList); 
#line 216
(void)(_ArgList = ((va_list)0)); 
#line 217
return _Result; 
#line 218
} 
#line 222 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_wconio.h"
__inline int __cdecl _cwprintf_s(const __wchar_t *const 
#line 223
_Format, ...) 
#line 228 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_wconio.h"
{ 
#line 229
int _Result; 
#line 230
va_list _ArgList; 
#line 231
(void)(__vcrt_assert_va_start_is_not_reference< const __wchar_t *const> (), ((void)__va_start(&_ArgList, _Format))); 
#line 232
_Result = _vcwprintf_s_l(_Format, 0, _ArgList); 
#line 233
(void)(_ArgList = ((va_list)0)); 
#line 234
return _Result; 
#line 235
} 
#line 239 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_wconio.h"
__inline int __cdecl _cwprintf_p_l(const __wchar_t *const 
#line 240
_Format, const _locale_t 
#line 241
_Locale, ...) 
#line 246 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_wconio.h"
{ 
#line 247
int _Result; 
#line 248
va_list _ArgList; 
#line 249
(void)(__vcrt_assert_va_start_is_not_reference< __crt_locale_pointers *const> (), ((void)__va_start(&_ArgList, _Locale))); 
#line 250
_Result = _vcwprintf_p_l(_Format, _Locale, _ArgList); 
#line 251
(void)(_ArgList = ((va_list)0)); 
#line 252
return _Result; 
#line 253
} 
#line 257 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_wconio.h"
__inline int __cdecl _cwprintf_p(const __wchar_t *const 
#line 258
_Format, ...) 
#line 263 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_wconio.h"
{ 
#line 264
int _Result; 
#line 265
va_list _ArgList; 
#line 266
(void)(__vcrt_assert_va_start_is_not_reference< const __wchar_t *const> (), ((void)__va_start(&_ArgList, _Format))); 
#line 267
_Result = _vcwprintf_p_l(_Format, 0, _ArgList); 
#line 268
(void)(_ArgList = ((va_list)0)); 
#line 269
return _Result; 
#line 270
} 
#line 281 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_wconio.h"
__declspec(dllimport) int __cdecl __conio_common_vcwscanf(unsigned __int64 _Options, const __wchar_t * _Format, _locale_t _Locale, va_list _ArgList); 
#line 289
__inline int __cdecl _vcwscanf_l(const __wchar_t *const 
#line 290
_Format, const _locale_t 
#line 291
_Locale, va_list 
#line 292
_ArgList) 
#line 297 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_wconio.h"
{ 
#line 298
return __conio_common_vcwscanf(*__local_stdio_scanf_options(), _Format, _Locale, _ArgList); 
#line 301
} 
#line 305 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_wconio.h"
__inline int __cdecl _vcwscanf(const __wchar_t *const 
#line 306
_Format, va_list 
#line 307
_ArgList) 
#line 312 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_wconio.h"
{ 
#line 313
return _vcwscanf_l(_Format, 0, _ArgList); 
#line 314
} 
#line 318 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_wconio.h"
__inline int __cdecl _vcwscanf_s_l(const __wchar_t *const 
#line 319
_Format, const _locale_t 
#line 320
_Locale, va_list 
#line 321
_ArgList) 
#line 326 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_wconio.h"
{ 
#line 327
return __conio_common_vcwscanf((*__local_stdio_scanf_options()) | (1Ui64 << 0), _Format, _Locale, _ArgList); 
#line 330
} 
#line 334 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_wconio.h"
__inline int __cdecl _vcwscanf_s(const __wchar_t *const 
#line 335
_Format, va_list 
#line 336
_ArgList) 
#line 341 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_wconio.h"
{ 
#line 342
return _vcwscanf_s_l(_Format, 0, _ArgList); 
#line 343
} 
#line 347 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_wconio.h"
__inline int __cdecl _cwscanf_l(const __wchar_t *const 
#line 348
_Format, const _locale_t 
#line 349
_Locale, ...) 
#line 354 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_wconio.h"
{ 
#line 355
int _Result; 
#line 356
va_list _ArgList; 
#line 357
(void)(__vcrt_assert_va_start_is_not_reference< __crt_locale_pointers *const> (), ((void)__va_start(&_ArgList, _Locale))); 
#line 359
_Result = _vcwscanf_l(_Format, _Locale, _ArgList); 
#line 361
(void)(_ArgList = ((va_list)0)); 
#line 362
return _Result; 
#line 363
} 
#line 367 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_wconio.h"
__inline int __cdecl _cwscanf(const __wchar_t *const 
#line 368
_Format, ...) 
#line 373 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_wconio.h"
{ 
#line 374
int _Result; 
#line 375
va_list _ArgList; 
#line 376
(void)(__vcrt_assert_va_start_is_not_reference< const __wchar_t *const> (), ((void)__va_start(&_ArgList, _Format))); 
#line 378
_Result = _vcwscanf_l(_Format, 0, _ArgList); 
#line 380
(void)(_ArgList = ((va_list)0)); 
#line 381
return _Result; 
#line 382
} 
#line 386 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_wconio.h"
__inline int __cdecl _cwscanf_s_l(const __wchar_t *const 
#line 387
_Format, const _locale_t 
#line 388
_Locale, ...) 
#line 393 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_wconio.h"
{ 
#line 394
int _Result; 
#line 395
va_list _ArgList; 
#line 396
(void)(__vcrt_assert_va_start_is_not_reference< __crt_locale_pointers *const> (), ((void)__va_start(&_ArgList, _Locale))); 
#line 397
_Result = _vcwscanf_s_l(_Format, _Locale, _ArgList); 
#line 398
(void)(_ArgList = ((va_list)0)); 
#line 399
return _Result; 
#line 400
} 
#line 404 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_wconio.h"
__inline int __cdecl _cwscanf_s(const __wchar_t *const 
#line 405
_Format, ...) 
#line 410 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_wconio.h"
{ 
#line 411
int _Result; 
#line 412
va_list _ArgList; 
#line 413
(void)(__vcrt_assert_va_start_is_not_reference< const __wchar_t *const> (), ((void)__va_start(&_ArgList, _Format))); 
#line 414
_Result = _vcwscanf_s_l(_Format, 0, _ArgList); 
#line 415
(void)(_ArgList = ((va_list)0)); 
#line 416
return _Result; 
#line 417
} 
#line 422 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_wconio.h"
}__pragma( pack ( pop )) 
#line 424
#pragma warning(pop)
#line 13 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_wctype.h"
#pragma warning(push)
#pragma warning(disable: 4324 4514 4574 4710 4793 4820 4995 4996 28719 28726 28727 )
#line 17
__pragma( pack ( push, 8 )) extern "C" {
#line 35 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_wctype.h"
__declspec(dllimport) const unsigned short *__cdecl __pctype_func(); 
#line 36
__declspec(dllimport) const wctype_t *__cdecl __pwctype_func(); 
#line 67 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_wctype.h"
__declspec(dllimport) int __cdecl iswalnum(wint_t _C); 
#line 68
__declspec(dllimport) int __cdecl iswalpha(wint_t _C); 
#line 69
__declspec(dllimport) int __cdecl iswascii(wint_t _C); 
#line 70
__declspec(dllimport) int __cdecl iswblank(wint_t _C); 
#line 71
__declspec(dllimport) int __cdecl iswcntrl(wint_t _C); 
#line 74
__declspec(dllimport) int __cdecl iswdigit(wint_t _C); 
#line 76
__declspec(dllimport) int __cdecl iswgraph(wint_t _C); 
#line 77
__declspec(dllimport) int __cdecl iswlower(wint_t _C); 
#line 78
__declspec(dllimport) int __cdecl iswprint(wint_t _C); 
#line 79
__declspec(dllimport) int __cdecl iswpunct(wint_t _C); 
#line 80
__declspec(dllimport) int __cdecl iswspace(wint_t _C); 
#line 81
__declspec(dllimport) int __cdecl iswupper(wint_t _C); 
#line 82
__declspec(dllimport) int __cdecl iswxdigit(wint_t _C); 
#line 83
__declspec(dllimport) int __cdecl __iswcsymf(wint_t _C); 
#line 84
__declspec(dllimport) int __cdecl __iswcsym(wint_t _C); 
#line 86
__declspec(dllimport) int __cdecl _iswalnum_l(wint_t _C, _locale_t _Locale); 
#line 87
__declspec(dllimport) int __cdecl _iswalpha_l(wint_t _C, _locale_t _Locale); 
#line 88
__declspec(dllimport) int __cdecl _iswblank_l(wint_t _C, _locale_t _Locale); 
#line 89
__declspec(dllimport) int __cdecl _iswcntrl_l(wint_t _C, _locale_t _Locale); 
#line 90
__declspec(dllimport) int __cdecl _iswdigit_l(wint_t _C, _locale_t _Locale); 
#line 91
__declspec(dllimport) int __cdecl _iswgraph_l(wint_t _C, _locale_t _Locale); 
#line 92
__declspec(dllimport) int __cdecl _iswlower_l(wint_t _C, _locale_t _Locale); 
#line 93
__declspec(dllimport) int __cdecl _iswprint_l(wint_t _C, _locale_t _Locale); 
#line 94
__declspec(dllimport) int __cdecl _iswpunct_l(wint_t _C, _locale_t _Locale); 
#line 95
__declspec(dllimport) int __cdecl _iswspace_l(wint_t _C, _locale_t _Locale); 
#line 96
__declspec(dllimport) int __cdecl _iswupper_l(wint_t _C, _locale_t _Locale); 
#line 97
__declspec(dllimport) int __cdecl _iswxdigit_l(wint_t _C, _locale_t _Locale); 
#line 98
__declspec(dllimport) int __cdecl _iswcsymf_l(wint_t _C, _locale_t _Locale); 
#line 99
__declspec(dllimport) int __cdecl _iswcsym_l(wint_t _C, _locale_t _Locale); 
#line 102
__declspec(dllimport) wint_t __cdecl towupper(wint_t _C); 
#line 103
__declspec(dllimport) wint_t __cdecl towlower(wint_t _C); 
#line 104
__declspec(dllimport) int __cdecl iswctype(wint_t _C, wctype_t _Type); 
#line 106
__declspec(dllimport) wint_t __cdecl _towupper_l(wint_t _C, _locale_t _Locale); 
#line 107
__declspec(dllimport) wint_t __cdecl _towlower_l(wint_t _C, _locale_t _Locale); 
#line 108
__declspec(dllimport) int __cdecl _iswctype_l(wint_t _C, wctype_t _Type, _locale_t _Locale); 
#line 112
__declspec(dllimport) int __cdecl isleadbyte(int _C); 
#line 113
__declspec(dllimport) int __cdecl _isleadbyte_l(int _C, _locale_t _Locale); 
#line 115
__declspec(deprecated("This function or variable has been superceded by newer library or operating system functionality. Consider using iswctype instea" "d. See online help for details.")) __declspec(dllimport) int __cdecl is_wctype(wint_t _C, wctype_t _Type); 
#line 203 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_wctype.h"
}__pragma( pack ( pop )) 
#line 205
#pragma warning(pop)
#line 13 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_wdirect.h"
#pragma warning(push)
#pragma warning(disable: 4324 4514 4574 4710 4793 4820 4995 4996 28719 28726 28727 )
#line 17
__pragma( pack ( push, 8 )) extern "C" {
#line 26
__declspec(dllimport) __declspec(allocator) __wchar_t *__cdecl _wgetcwd(__wchar_t * _DstBuf, int _SizeInWords); 
#line 33
__declspec(dllimport) __declspec(allocator) __wchar_t *__cdecl _wgetdcwd(int _Drive, __wchar_t * _DstBuf, int _SizeInWords); 
#line 45
__declspec(dllimport) int __cdecl _wchdir(const __wchar_t * _Path); 
#line 50
__declspec(dllimport) int __cdecl _wmkdir(const __wchar_t * _Path); 
#line 55
__declspec(dllimport) int __cdecl _wrmdir(const __wchar_t * _Path); 
#line 61
}__pragma( pack ( pop )) 
#line 63
#pragma warning(pop)
#line 13 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_share.h"
#pragma warning(push)
#pragma warning(disable: 4324 4514 4574 4710 4793 4820 4995 4996 28719 28726 28727 )
#line 33 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_share.h"
#pragma warning(pop)
#line 14 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_wio.h"
#pragma warning(push)
#pragma warning(disable: 4324 4514 4574 4710 4793 4820 4995 4996 28719 28726 28727 )
#line 18
__pragma( pack ( push, 8 )) extern "C" {
#line 33 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_wio.h"
typedef unsigned long _fsize_t; 
#line 35
struct _wfinddata32_t { 
#line 37
unsigned attrib; 
#line 38
__time32_t time_create; 
#line 39
__time32_t time_access; 
#line 40
__time32_t time_write; 
#line 41
_fsize_t size; 
#line 42
__wchar_t name[260]; 
#line 43
}; 
#line 45
struct _wfinddata32i64_t { 
#line 47
unsigned attrib; 
#line 48
__time32_t time_create; 
#line 49
__time32_t time_access; 
#line 50
__time32_t time_write; 
#line 51
__int64 size; 
#line 52
__wchar_t name[260]; 
#line 53
}; 
#line 55
struct _wfinddata64i32_t { 
#line 57
unsigned attrib; 
#line 58
__time64_t time_create; 
#line 59
__time64_t time_access; 
#line 60
__time64_t time_write; 
#line 61
_fsize_t size; 
#line 62
__wchar_t name[260]; 
#line 63
}; 
#line 65
struct _wfinddata64_t { 
#line 67
unsigned attrib; 
#line 68
__time64_t time_create; 
#line 69
__time64_t time_access; 
#line 70
__time64_t time_write; 
#line 71
__int64 size; 
#line 72
__wchar_t name[260]; 
#line 73
}; 
#line 95 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_wio.h"
__declspec(dllimport) int __cdecl _waccess(const __wchar_t * _FileName, int _AccessMode); 
#line 101
__declspec(dllimport) errno_t __cdecl _waccess_s(const __wchar_t * _FileName, int _AccessMode); 
#line 107
__declspec(dllimport) int __cdecl _wchmod(const __wchar_t * _FileName, int _Mode); 
#line 113
__declspec(dllimport) int __cdecl _wcreat(const __wchar_t * _FileName, int _PermissionMode); 
#line 120
__declspec(dllimport) intptr_t __cdecl _wfindfirst32(const __wchar_t * _FileName, _wfinddata32_t * _FindData); 
#line 127
__declspec(dllimport) int __cdecl _wfindnext32(intptr_t _FindHandle, _wfinddata32_t * _FindData); 
#line 132
__declspec(dllimport) int __cdecl _wunlink(const __wchar_t * _FileName); 
#line 137
__declspec(dllimport) int __cdecl _wrename(const __wchar_t * _OldFileName, const __wchar_t * _NewFileName); 
#line 142
__declspec(dllimport) errno_t __cdecl _wmktemp_s(__wchar_t * _TemplateName, size_t _SizeInWords); 
#line 147
extern "C++" {template < size_t _Size > inline errno_t __cdecl _wmktemp_s ( wchar_t ( & _TemplateName ) [ _Size ] ) throw ( ) { return _wmktemp_s ( _TemplateName, _Size ); }}
#line 153 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_wio.h"
__declspec(dllimport) __wchar_t *__cdecl _wmktemp(__wchar_t * _TemplateName); 
#line 160 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_wio.h"
__declspec(dllimport) intptr_t __cdecl _wfindfirst32i64(const __wchar_t * _FileName, _wfinddata32i64_t * _FindData); 
#line 167
__declspec(dllimport) intptr_t __cdecl _wfindfirst64i32(const __wchar_t * _FileName, _wfinddata64i32_t * _FindData); 
#line 174
__declspec(dllimport) intptr_t __cdecl _wfindfirst64(const __wchar_t * _FileName, _wfinddata64_t * _FindData); 
#line 181
__declspec(dllimport) int __cdecl _wfindnext32i64(intptr_t _FindHandle, _wfinddata32i64_t * _FindData); 
#line 188
__declspec(dllimport) int __cdecl _wfindnext64i32(intptr_t _FindHandle, _wfinddata64i32_t * _FindData); 
#line 195
__declspec(dllimport) int __cdecl _wfindnext64(intptr_t _FindHandle, _wfinddata64_t * _FindData); 
#line 201
__declspec(dllimport) errno_t __cdecl _wsopen_s(int * _FileHandle, const __wchar_t * _FileName, int _OpenFlag, int _ShareFlag, int _PermissionFlag); 
#line 209
__declspec(dllimport) errno_t __cdecl _wsopen_dispatch(const __wchar_t * _FileName, int _OFlag, int _ShFlag, int _PMode, int * _PFileHandle, int _BSecure); 
#line 224
extern "C++" inline int __cdecl _wopen(const __wchar_t *
#line 225
_FileName, int 
#line 226
_OFlag, int 
#line 227
_PMode = 0) 
#line 229
{ 
#line 230
int _FileHandle; 
#line 232
const errno_t _Result = _wsopen_dispatch(_FileName, _OFlag, 64, _PMode, &_FileHandle, 0); 
#line 233
return (_Result) ? -1 : _FileHandle; 
#line 234
} 
#line 237
extern "C++" inline int __cdecl _wsopen(const __wchar_t *
#line 238
_FileName, int 
#line 239
_OFlag, int 
#line 240
_ShFlag, int 
#line 241
_PMode = 0) 
#line 243
{ 
#line 244
int _FileHandle; 
#line 246
const errno_t _Result = _wsopen_dispatch(_FileName, _OFlag, _ShFlag, _PMode, &_FileHandle, 0); 
#line 247
return (_Result) ? -1 : _FileHandle; 
#line 248
} 
#line 268 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_wio.h"
}__pragma( pack ( pop )) 
#line 270
#pragma warning(pop)
#line 13 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_wprocess.h"
#pragma warning(push)
#pragma warning(disable: 4324 4514 4574 4710 4793 4820 4995 4996 28719 28726 28727 )
#line 17
__pragma( pack ( push, 8 )) extern "C" {
#line 24
__declspec(dllimport) intptr_t __cdecl _wexecl(const __wchar_t * _FileName, const __wchar_t * _ArgList, ...); 
#line 29
__declspec(dllimport) intptr_t __cdecl _wexecle(const __wchar_t * _FileName, const __wchar_t * _ArgList, ...); 
#line 34
__declspec(dllimport) intptr_t __cdecl _wexeclp(const __wchar_t * _FileName, const __wchar_t * _ArgList, ...); 
#line 39
__declspec(dllimport) intptr_t __cdecl _wexeclpe(const __wchar_t * _FileName, const __wchar_t * _ArgList, ...); 
#line 44
__declspec(dllimport) intptr_t __cdecl _wexecv(const __wchar_t * _FileName, const __wchar_t *const * _ArgList); 
#line 49
__declspec(dllimport) intptr_t __cdecl _wexecve(const __wchar_t * _FileName, const __wchar_t *const * _ArgList, const __wchar_t *const * _Env); 
#line 55
__declspec(dllimport) intptr_t __cdecl _wexecvp(const __wchar_t * _FileName, const __wchar_t *const * _ArgList); 
#line 60
__declspec(dllimport) intptr_t __cdecl _wexecvpe(const __wchar_t * _FileName, const __wchar_t *const * _ArgList, const __wchar_t *const * _Env); 
#line 66
__declspec(dllimport) intptr_t __cdecl _wspawnl(int _Mode, const __wchar_t * _FileName, const __wchar_t * _ArgList, ...); 
#line 72
__declspec(dllimport) intptr_t __cdecl _wspawnle(int _Mode, const __wchar_t * _FileName, const __wchar_t * _ArgList, ...); 
#line 78
__declspec(dllimport) intptr_t __cdecl _wspawnlp(int _Mode, const __wchar_t * _FileName, const __wchar_t * _ArgList, ...); 
#line 84
__declspec(dllimport) intptr_t __cdecl _wspawnlpe(int _Mode, const __wchar_t * _FileName, const __wchar_t * _ArgList, ...); 
#line 90
__declspec(dllimport) intptr_t __cdecl _wspawnv(int _Mode, const __wchar_t * _FileName, const __wchar_t *const * _ArgList); 
#line 96
__declspec(dllimport) intptr_t __cdecl _wspawnve(int _Mode, const __wchar_t * _FileName, const __wchar_t *const * _ArgList, const __wchar_t *const * _Env); 
#line 103
__declspec(dllimport) intptr_t __cdecl _wspawnvp(int _Mode, const __wchar_t * _FileName, const __wchar_t *const * _ArgList); 
#line 109
__declspec(dllimport) intptr_t __cdecl _wspawnvpe(int _Mode, const __wchar_t * _FileName, const __wchar_t *const * _ArgList, const __wchar_t *const * _Env); 
#line 116
__declspec(dllimport) int __cdecl _wsystem(const __wchar_t * _Command); 
#line 125 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_wprocess.h"
}__pragma( pack ( pop )) 
#line 127
#pragma warning(pop)
#line 12 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\sys/types.h"
#pragma warning(push)
#pragma warning(disable: 4324 4514 4574 4710 4793 4820 4995 4996 28719 28726 28727 )
#line 19
typedef unsigned short _ino_t; 
#line 22
typedef _ino_t ino_t; 
#line 31 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\sys/types.h"
typedef unsigned _dev_t; 
#line 34
typedef _dev_t dev_t; 
#line 43 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\sys/types.h"
typedef long _off_t; 
#line 46
typedef _off_t off_t; 
#line 51 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\sys/types.h"
#pragma warning(pop)
#line 13 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\sys/stat.h"
#pragma warning(push)
#pragma warning(disable: 4324 4514 4574 4710 4793 4820 4995 4996 28719 28726 28727 )
#line 17
__pragma( pack ( push, 8 )) extern "C" {
#line 24
struct _stat32 { 
#line 26
_dev_t st_dev; 
#line 27
_ino_t st_ino; 
#line 28
unsigned short st_mode; 
#line 29
short st_nlink; 
#line 30
short st_uid; 
#line 31
short st_gid; 
#line 32
_dev_t st_rdev; 
#line 33
_off_t st_size; 
#line 34
__time32_t st_atime; 
#line 35
__time32_t st_mtime; 
#line 36
__time32_t st_ctime; 
#line 37
}; 
#line 39
struct _stat32i64 { 
#line 41
_dev_t st_dev; 
#line 42
_ino_t st_ino; 
#line 43
unsigned short st_mode; 
#line 44
short st_nlink; 
#line 45
short st_uid; 
#line 46
short st_gid; 
#line 47
_dev_t st_rdev; 
#line 48
__int64 st_size; 
#line 49
__time32_t st_atime; 
#line 50
__time32_t st_mtime; 
#line 51
__time32_t st_ctime; 
#line 52
}; 
#line 54
struct _stat64i32 { 
#line 56
_dev_t st_dev; 
#line 57
_ino_t st_ino; 
#line 58
unsigned short st_mode; 
#line 59
short st_nlink; 
#line 60
short st_uid; 
#line 61
short st_gid; 
#line 62
_dev_t st_rdev; 
#line 63
_off_t st_size; 
#line 64
__time64_t st_atime; 
#line 65
__time64_t st_mtime; 
#line 66
__time64_t st_ctime; 
#line 67
}; 
#line 69
struct _stat64 { 
#line 71
_dev_t st_dev; 
#line 72
_ino_t st_ino; 
#line 73
unsigned short st_mode; 
#line 74
short st_nlink; 
#line 75
short st_uid; 
#line 76
short st_gid; 
#line 77
_dev_t st_rdev; 
#line 78
__int64 st_size; 
#line 79
__time64_t st_atime; 
#line 80
__time64_t st_mtime; 
#line 81
__time64_t st_ctime; 
#line 82
}; 
#line 87
struct stat { 
#line 89
_dev_t st_dev; 
#line 90
_ino_t st_ino; 
#line 91
unsigned short st_mode; 
#line 92
short st_nlink; 
#line 93
short st_uid; 
#line 94
short st_gid; 
#line 95
_dev_t st_rdev; 
#line 96
_off_t st_size; 
#line 97
time_t st_atime; 
#line 98
time_t st_mtime; 
#line 99
time_t st_ctime; 
#line 100
}; 
#line 154 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\sys/stat.h"
__declspec(dllimport) int __cdecl _fstat32(int _FileHandle, struct _stat32 * _Stat); 
#line 159
__declspec(dllimport) int __cdecl _fstat32i64(int _FileHandle, struct _stat32i64 * _Stat); 
#line 164
__declspec(dllimport) int __cdecl _fstat64i32(int _FileHandle, struct _stat64i32 * _Stat); 
#line 169
__declspec(dllimport) int __cdecl _fstat64(int _FileHandle, struct _stat64 * _Stat); 
#line 174
__declspec(dllimport) int __cdecl _stat32(const char * _FileName, struct _stat32 * _Stat); 
#line 179
__declspec(dllimport) int __cdecl _stat32i64(const char * _FileName, struct _stat32i64 * _Stat); 
#line 184
__declspec(dllimport) int __cdecl _stat64i32(const char * _FileName, struct _stat64i32 * _Stat); 
#line 189
__declspec(dllimport) int __cdecl _stat64(const char * _FileName, struct _stat64 * _Stat); 
#line 194
__declspec(dllimport) int __cdecl _wstat32(const __wchar_t * _FileName, struct _stat32 * _Stat); 
#line 199
__declspec(dllimport) int __cdecl _wstat32i64(const __wchar_t * _FileName, struct _stat32i64 * _Stat); 
#line 204
__declspec(dllimport) int __cdecl _wstat64i32(const __wchar_t * _FileName, struct _stat64i32 * _Stat); 
#line 209
__declspec(dllimport) int __cdecl _wstat64(const __wchar_t * _FileName, struct _stat64 * _Stat); 
#line 233
static __inline int __cdecl fstat(const int _FileHandle, struct stat *const _Stat) 
#line 234
{ 
#line 235
static_assert((sizeof(struct stat) == sizeof(struct _stat64i32)), "sizeof(struct stat) == sizeof(struct _stat64i32)");
#line 236
return _fstat64i32(_FileHandle, (struct _stat64i32 *)_Stat); 
#line 237
} 
#line 238
static __inline int __cdecl stat(const char *const _FileName, struct stat *const _Stat) 
#line 239
{ 
#line 240
static_assert((sizeof(struct stat) == sizeof(struct _stat64i32)), "sizeof(struct stat) == sizeof(struct _stat64i32)");
#line 241
return _stat64i32(_FileName, (struct _stat64i32 *)_Stat); 
#line 242
} 
#line 247 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\sys/stat.h"
}__pragma( pack ( pop )) 
#line 249
#pragma warning(pop)
#line 29 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\wchar.h"
#pragma warning(push)
#pragma warning(disable: 4324 4514 4574 4710 4793 4820 4995 4996 28719 28726 28727 )
#line 33
__pragma( pack ( push, 8 )) extern "C" {
#line 42
typedef __wchar_t _Wint_t; 
#line 49
__declspec(dllimport) __wchar_t *__cdecl _wsetlocale(int _Category, const __wchar_t * _Locale); 
#line 55
__declspec(dllimport) _locale_t __cdecl _wcreate_locale(int _Category, const __wchar_t * _Locale); 
#line 62
__declspec(dllimport) wint_t __cdecl btowc(int _Ch); 
#line 66
__declspec(dllimport) size_t __cdecl mbrlen(const char * _Ch, size_t _SizeInBytes, mbstate_t * _State); 
#line 72
__declspec(dllimport) size_t __cdecl mbrtowc(__wchar_t * _DstCh, const char * _SrcCh, size_t _SizeInBytes, mbstate_t * _State); 
#line 80
__declspec(dllimport) errno_t __cdecl mbsrtowcs_s(size_t * _Retval, __wchar_t * _Dst, size_t _Size, const char ** _PSrc, size_t _N, mbstate_t * _State); 
#line 89
extern "C++" {template < size_t _Size > inline errno_t __cdecl mbsrtowcs_s ( size_t * _Retval, wchar_t ( & _Dest ) [ _Size ], char const * * _PSource, size_t _Count, mbstate_t * _State ) throw ( ) { return mbsrtowcs_s ( _Retval, _Dest, _Size, _PSource, _Count, _State ); }}
#line 99 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\wchar.h"
__declspec(dllimport) size_t __cdecl mbsrtowcs(__wchar_t * _Dest, const char ** _PSrc, size_t _Count, mbstate_t * _State); 
#line 108 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\wchar.h"
__declspec(dllimport) errno_t __cdecl wcrtomb_s(size_t * _Retval, char * _Dst, size_t _SizeInBytes, __wchar_t _Ch, mbstate_t * _State); 
#line 116
extern "C++" {template < size_t _Size > inline errno_t __cdecl wcrtomb_s ( size_t * _Retval, char ( & _Dest ) [ _Size ], wchar_t _Source, mbstate_t * _State ) throw ( ) { return wcrtomb_s ( _Retval, _Dest, _Size, _Source, _State ); }}
#line 125 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\wchar.h"
__declspec(dllimport) size_t __cdecl wcrtomb(char * _Dest, __wchar_t _Source, mbstate_t * _State); 
#line 133 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\wchar.h"
__declspec(dllimport) errno_t __cdecl wcsrtombs_s(size_t * _Retval, char * _Dst, size_t _SizeInBytes, const __wchar_t ** _Src, size_t _Size, mbstate_t * _State); 
#line 142
extern "C++" {template < size_t _Size > inline errno_t __cdecl wcsrtombs_s ( size_t * _Retval, char ( & _Dest ) [ _Size ], wchar_t const * * _PSrc, size_t _Count, mbstate_t * _State ) throw ( ) { return wcsrtombs_s ( _Retval, _Dest, _Size, _PSrc, _Count, _State ); }}
#line 152 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\wchar.h"
__declspec(dllimport) size_t __cdecl wcsrtombs(char * _Dest, const __wchar_t ** _PSource, size_t _Count, mbstate_t * _State); 
#line 160 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\wchar.h"
__declspec(dllimport) int __cdecl wctob(wint_t _WCh); 
#line 167
errno_t __cdecl wmemcpy_s(__wchar_t * _S1, rsize_t _N1, const __wchar_t * _S2, rsize_t _N); 
#line 175
errno_t __cdecl wmemmove_s(__wchar_t * _S1, rsize_t _N1, const __wchar_t * _S2, rsize_t _N); 
#line 184 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\wchar.h"
__inline int __cdecl fwide(FILE *
#line 185
_F, int 
#line 186
_M) 
#line 188
{ 
#line 189
(void)_F; 
#line 190
return _M; 
#line 191
} 
#line 193
__inline int __cdecl mbsinit(const mbstate_t *
#line 194
_P) 
#line 196
{ 
#line 197
return (_P == (0)) || ((_P->_Wchar) == (0)); 
#line 198
} 
#line 200
__inline const __wchar_t *__cdecl wmemchr(const __wchar_t *
#line 201
_S, __wchar_t 
#line 202
_C, size_t 
#line 203
_N) 
#line 205
{ 
#line 206
for (; (0) < _N; (++_S), (--_N)) { 
#line 207
if ((*_S) == _C) { 
#line 208
return (const __wchar_t *)_S; }  }  
#line 210
return 0; 
#line 211
} 
#line 213
__inline int __cdecl wmemcmp(const __wchar_t *
#line 214
_S1, const __wchar_t *
#line 215
_S2, size_t 
#line 216
_N) 
#line 218
{ 
#line 219
for (; (0) < _N; ((++_S1), (++_S2)), (--_N)) { 
#line 220
if ((*_S1) != (*_S2)) { 
#line 221
return ((*_S1) < (*_S2)) ? -1 : 1; }  }  
#line 223
return 0; 
#line 224
} 
#line 229
__inline __wchar_t *__cdecl wmemcpy(__wchar_t *
#line 230
_S1, const __wchar_t *
#line 231
_S2, size_t 
#line 232
_N) 
#line 234
{ 
#pragma warning(suppress: 6386)
return (__wchar_t *)memcpy(_S1, _S2, _N * sizeof(__wchar_t)); 
#line 237
} 
#line 240
__inline __wchar_t *__cdecl wmemmove(__wchar_t *
#line 241
_S1, const __wchar_t *
#line 242
_S2, size_t 
#line 243
_N) 
#line 245
{ 
#pragma warning(suppress: 6386)
return (__wchar_t *)memmove(_S1, _S2, _N * sizeof(__wchar_t)); 
#line 248
} 
#line 252
__inline __wchar_t *__cdecl wmemset(__wchar_t *
#line 253
_S, __wchar_t 
#line 254
_C, size_t 
#line 255
_N) 
#line 257
{ 
#line 258
__wchar_t *_Su = _S; 
#line 259
for (; (0) < _N; (++_Su), (--_N)) 
#line 260
{ 
#line 261
(*_Su) = _C; 
#line 262
}  
#line 263
return _S; 
#line 264
} 
#line 268
extern "C++" inline __wchar_t *__cdecl wmemchr(__wchar_t *
#line 269
_S, __wchar_t 
#line 270
_C, size_t 
#line 271
_N) 
#line 273
{ 
#line 274
const __wchar_t *const _SC = _S; 
#line 275
return const_cast< __wchar_t *>(wmemchr(_SC, _C, _N)); 
#line 276
} 
#line 283 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\wchar.h"
}__pragma( pack ( pop )) 
#line 285
#pragma warning(pop)
#line 15 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\cwchar"
#pragma pack ( push, 8 )
#pragma warning(push, 3)
#pragma warning(disable : 4180 4412 4455 4494 4514 4574 4582 4583 4587 4588 4619 4623 4625 4626 4643 4648 4702 4793 4820 4988 5026 5027 5045 6294 4984 5053 )
#line 22
extern "C" { using _Mbstatet = mbstate_t; }
#line 24
namespace std { 
#pragma warning(push)
#pragma warning(disable : 4995)
#line 30
using ::mbstate_t;
#line 32
using ::tm;
#line 33
using ::wint_t;
#line 35
using ::btowc;
#line 36
using ::fgetwc;
#line 37
using ::fgetws;
#line 38
using ::fputwc;
#line 39
using ::fputws;
#line 40
using ::fwide;
#line 41
using ::fwprintf;
#line 42
using ::fwscanf;
#line 43
using ::getwc;
#line 44
using ::getwchar;
#line 45
using ::mbrlen;
#line 46
using ::mbrtowc;
#line 47
using ::mbsrtowcs;
#line 48
using ::mbsinit;
#line 49
using ::putwc;
#line 50
using ::putwchar;
#line 51
using ::swprintf;
#line 52
using ::swscanf;
#line 53
using ::ungetwc;
#line 54
using ::vfwprintf;
#line 55
using ::vswprintf;
#line 56
using ::vwprintf;
#line 57
using ::wcrtomb;
#line 58
using ::wprintf;
#line 59
using ::wscanf;
#line 60
using ::wcsrtombs;
#line 61
using ::wcstol;
#line 62
using ::wcscat;
#line 63
using ::wcschr;
#line 64
using ::wcscmp;
#line 65
using ::wcscoll;
#line 66
using ::wcscpy;
#line 67
using ::wcscspn;
#line 68
using ::wcslen;
#line 69
using ::wcsncat;
#line 70
using ::wcsncmp;
#line 71
using ::wcsncpy;
#line 72
using ::wcspbrk;
#line 73
using ::wcsrchr;
#line 74
using ::wcsspn;
#line 75
using ::wcstod;
#line 76
using ::wcstoul;
#line 77
using ::wcsstr;
#line 78
using ::wcstok;
#line 79
using ::wcsxfrm;
#line 80
using ::wctob;
#line 81
using ::wmemchr;
#line 82
using ::wmemcmp;
#line 83
using ::wmemcpy;
#line 84
using ::wmemmove;
#line 85
using ::wmemset;
#line 86
using ::wcsftime;
#line 88
using ::vfwscanf;
#line 89
using ::vswscanf;
#line 90
using ::vwscanf;
#line 91
using ::wcstof;
#line 92
using ::wcstold;
#line 93
using ::wcstoll;
#line 94
using ::wcstoull;
#line 96
#pragma warning(pop)
}
#line 101
#pragma warning(pop)
#pragma pack ( pop )
#line 15 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\cstddef"
#pragma pack ( push, 8 )
#pragma warning(push, 3)
#pragma warning(disable : 4180 4412 4455 4494 4514 4574 4582 4583 4587 4588 4619 4623 4625 4626 4643 4648 4702 4793 4820 4988 5026 5027 5045 6294 4984 5053 )
#line 22
namespace std { 
#line 23
using ::ptrdiff_t;
#line 25
using max_align_t = double; 
#line 26
using nullptr_t = decltype(nullptr); 
#line 94
}
#line 96
using std::max_align_t;
#line 100
#pragma warning(pop)
#pragma pack ( pop )
#line 13 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\initializer_list"
#pragma pack ( push, 8 )
#pragma warning(push, 3)
#pragma warning(disable : 4180 4412 4455 4494 4514 4574 4582 4583 4587 4588 4619 4623 4625 4626 4643 4648 4702 4793 4820 4988 5026 5027 5045 6294 4984 5053 )
#line 20
namespace std { 
#line 21
template < class _Elem >
class initializer_list {
public :
    using value_type = _Elem;
    using reference = const _Elem &;
    using const_reference = const _Elem &;
    using size_type = size_t;

    using iterator = const _Elem *;
    using const_iterator = const _Elem *;

    constexpr initializer_list ( ) noexcept : _First ( nullptr ), _Last ( nullptr ) { }

    constexpr initializer_list ( const _Elem * _First_arg, const _Elem * _Last_arg ) noexcept
        : _First ( _First_arg ), _Last ( _Last_arg ) { }

    [ [ nodiscard ] ] constexpr const _Elem * begin ( ) const noexcept {
        return _First;
    }

    [ [ nodiscard ] ] constexpr const _Elem * end ( ) const noexcept {
        return _Last;
    }

    [ [ nodiscard ] ] constexpr size_t size ( ) const noexcept {
        return static_cast < size_t > ( _Last - _First );
    }

private :
    const _Elem * _First;
    const _Elem * _Last;
};
#line 54
template < class _Elem >
[ [ nodiscard ] ] constexpr const _Elem * begin ( initializer_list < _Elem > _Ilist ) noexcept {
    return _Ilist . begin ( );
}
#line 59
template < class _Elem >
[ [ nodiscard ] ] constexpr const _Elem * end ( initializer_list < _Elem > _Ilist ) noexcept {
    return _Ilist . end ( );
}
#line 63
}
#line 66
#pragma warning(pop)
#pragma pack ( pop )
#line 16 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\xstddef"
#pragma pack ( push, 8 )
#pragma warning(push, 3)
#pragma warning(disable : 4180 4412 4455 4494 4514 4574 4582 4583 4587 4588 4619 4623 4625 4626 4643 4648 4702 4793 4820 4988 5026 5027 5045 6294 4984 5053 )
#line 23
namespace std { 
#line 24
template< class > constexpr bool 
#line 26
_Always_false = false; 
#line 30
template< class _Arg, class _Result> 
#line 31
struct unary_function { 
#line 32
using argument_type = _Arg; 
#line 33
using result_type = _Result; 
#line 34
}; 
#line 36
template< class _Arg1, class _Arg2, class _Result> 
#line 37
struct binary_function { 
#line 38
using first_argument_type = _Arg1; 
#line 39
using second_argument_type = _Arg2; 
#line 40
using result_type = _Result; 
#line 41
}; 
#line 44 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\xstddef"
#pragma warning(push)
#pragma warning(disable : 5215)
#pragma warning(disable : 5216)
#line 53
template< class _Ty> 
#line 54
[[nodiscard]] _Ty 
#line 53
_Fake_copy_init(_Ty) noexcept; 
#line 64
#pragma warning(pop)
#line 66
template < class _Ty = void >
struct plus {
    using first_argument_type = _Ty;
    using second_argument_type = _Ty;
    using result_type = _Ty;

    [ [ nodiscard ] ] constexpr _Ty operator ( ) ( const _Ty & _Left, const _Ty & _Right ) const {
        return _Left + _Right;
    }
};
#line 77
template < class _Ty = void >
struct minus {
    using first_argument_type = _Ty;
    using second_argument_type = _Ty;
    using result_type = _Ty;

    [ [ nodiscard ] ] constexpr _Ty operator ( ) ( const _Ty & _Left, const _Ty & _Right ) const {
        return _Left - _Right;
    }
};
#line 88
template < class _Ty = void >
struct multiplies {
    using first_argument_type = _Ty;
    using second_argument_type = _Ty;
    using result_type = _Ty;

    [ [ nodiscard ] ] constexpr _Ty operator ( ) ( const _Ty & _Left, const _Ty & _Right ) const {
        return _Left * _Right;
    }
};
#line 99
template < class _Ty = void >
struct equal_to {
    using first_argument_type = _Ty;
    using second_argument_type = _Ty;
    using result_type = bool;

    [ [ nodiscard ] ] constexpr bool operator ( ) ( const _Ty & _Left, const _Ty & _Right ) const
        noexcept ( noexcept ( _Fake_copy_init < bool > ( _Left == _Right ) ) ) {
        return _Left == _Right;
    }
};
#line 111
template < class _Ty = void >
struct not_equal_to {
    using first_argument_type = _Ty;
    using second_argument_type = _Ty;
    using result_type = bool;

    [ [ nodiscard ] ] constexpr bool operator ( ) ( const _Ty & _Left, const _Ty & _Right ) const
        noexcept ( noexcept ( _Fake_copy_init < bool > ( _Left != _Right ) ) ) {
        return _Left != _Right;
    }
};
#line 123
template < class _Ty = void >
struct greater {
    using first_argument_type = _Ty;
    using second_argument_type = _Ty;
    using result_type = bool;

    [ [ nodiscard ] ] constexpr bool operator ( ) ( const _Ty & _Left, const _Ty & _Right ) const
        noexcept ( noexcept ( _Fake_copy_init < bool > ( _Left > _Right ) ) ) {
        return _Left > _Right;
    }
};
#line 135
template < class _Ty = void >
struct less {
    using first_argument_type = _Ty;
    using second_argument_type = _Ty;
    using result_type = bool;

    [ [ nodiscard ] ] constexpr bool operator ( ) ( const _Ty & _Left, const _Ty & _Right ) const
        noexcept ( noexcept ( _Fake_copy_init < bool > ( _Left < _Right ) ) ) {
        return _Left < _Right;
    }
};
#line 147
template < class _Ty = void >
struct greater_equal {
    using first_argument_type = _Ty;
    using second_argument_type = _Ty;
    using result_type = bool;

    [ [ nodiscard ] ] constexpr bool operator ( ) ( const _Ty & _Left, const _Ty & _Right ) const
        noexcept ( noexcept ( _Fake_copy_init < bool > ( _Left >= _Right ) ) ) {
        return _Left >= _Right;
    }
};
#line 159
template < class _Ty = void >
struct less_equal {
    using first_argument_type = _Ty;
    using second_argument_type = _Ty;
    using result_type = bool;

    [ [ nodiscard ] ] constexpr bool operator ( ) ( const _Ty & _Left, const _Ty & _Right ) const
        noexcept ( noexcept ( _Fake_copy_init < bool > ( _Left <= _Right ) ) ) {
        return _Left <= _Right;
    }
};
#line 172
template<> struct plus< void>  { 
#line 173
template < class _Ty1, class _Ty2 >
    [ [ nodiscard ] ] constexpr auto operator ( ) ( _Ty1 && _Left, _Ty2 && _Right ) const
        noexcept ( noexcept ( static_cast < _Ty1 && > ( _Left ) + static_cast < _Ty2 && > ( _Right ) ) )
        -> decltype ( static_cast < _Ty1 && > ( _Left ) + static_cast < _Ty2 && > ( _Right ) ) {
        return static_cast < _Ty1 && > ( _Left ) + static_cast < _Ty2 && > ( _Right );
    }
#line 180
using is_transparent = int; 
#line 181
}; 
#line 184
template<> struct minus< void>  { 
#line 185
template < class _Ty1, class _Ty2 >
    [ [ nodiscard ] ] constexpr auto operator ( ) ( _Ty1 && _Left, _Ty2 && _Right ) const
        noexcept ( noexcept ( static_cast < _Ty1 && > ( _Left ) - static_cast < _Ty2 && > ( _Right ) ) )
        -> decltype ( static_cast < _Ty1 && > ( _Left ) - static_cast < _Ty2 && > ( _Right ) ) {
        return static_cast < _Ty1 && > ( _Left ) - static_cast < _Ty2 && > ( _Right );
    }
#line 192
using is_transparent = int; 
#line 193
}; 
#line 196
template<> struct multiplies< void>  { 
#line 197
template < class _Ty1, class _Ty2 >
    [ [ nodiscard ] ] constexpr auto operator ( ) ( _Ty1 && _Left, _Ty2 && _Right ) const
        noexcept ( noexcept ( static_cast < _Ty1 && > ( _Left ) * static_cast < _Ty2 && > ( _Right ) ) )
        -> decltype ( static_cast < _Ty1 && > ( _Left ) * static_cast < _Ty2 && > ( _Right ) ) {
        return static_cast < _Ty1 && > ( _Left ) * static_cast < _Ty2 && > ( _Right );
    }
#line 204
using is_transparent = int; 
#line 205
}; 
#line 208
template<> struct equal_to<>  { 
#line 209
template < class _Ty1, class _Ty2 >
    [ [ nodiscard ] ] constexpr auto operator ( ) ( _Ty1 && _Left, _Ty2 && _Right ) const
        noexcept ( noexcept ( static_cast < _Ty1 && > ( _Left ) == static_cast < _Ty2 && > ( _Right ) ) )
        -> decltype ( static_cast < _Ty1 && > ( _Left ) == static_cast < _Ty2 && > ( _Right ) ) {
        return static_cast < _Ty1 && > ( _Left ) == static_cast < _Ty2 && > ( _Right );
    }
#line 216
using is_transparent = int; 
#line 217
}; 
#line 220
template<> struct not_equal_to< void>  { 
#line 221
template < class _Ty1, class _Ty2 >
    [ [ nodiscard ] ] constexpr auto operator ( ) ( _Ty1 && _Left, _Ty2 && _Right ) const
        noexcept ( noexcept ( static_cast < _Ty1 && > ( _Left ) != static_cast < _Ty2 && > ( _Right ) ) )
        -> decltype ( static_cast < _Ty1 && > ( _Left ) != static_cast < _Ty2 && > ( _Right ) ) {
        return static_cast < _Ty1 && > ( _Left ) != static_cast < _Ty2 && > ( _Right );
    }
#line 228
using is_transparent = int; 
#line 229
}; 
#line 232
template<> struct greater<>  { 
#line 233
template < class _Ty1, class _Ty2 >
    [ [ nodiscard ] ] constexpr auto operator ( ) ( _Ty1 && _Left, _Ty2 && _Right ) const
        noexcept ( noexcept ( static_cast < _Ty1 && > ( _Left ) > static_cast < _Ty2 && > ( _Right ) ) )
        -> decltype ( static_cast < _Ty1 && > ( _Left ) > static_cast < _Ty2 && > ( _Right ) ) {
        return static_cast < _Ty1 && > ( _Left ) > static_cast < _Ty2 && > ( _Right );
    }
#line 240
using is_transparent = int; 
#line 241
}; 
#line 244
template<> struct less<>  { 
#line 245
template < class _Ty1, class _Ty2 >
    [ [ nodiscard ] ] constexpr auto operator ( ) ( _Ty1 && _Left, _Ty2 && _Right ) const
        noexcept ( noexcept ( static_cast < _Ty1 && > ( _Left ) < static_cast < _Ty2 && > ( _Right ) ) )
        -> decltype ( static_cast < _Ty1 && > ( _Left ) < static_cast < _Ty2 && > ( _Right ) ) {
        return static_cast < _Ty1 && > ( _Left ) < static_cast < _Ty2 && > ( _Right );
    }
#line 252
using is_transparent = int; 
#line 253
}; 
#line 256
template<> struct greater_equal< void>  { 
#line 257
template < class _Ty1, class _Ty2 >
    [ [ nodiscard ] ] constexpr auto operator ( ) ( _Ty1 && _Left, _Ty2 && _Right ) const
        noexcept ( noexcept ( static_cast < _Ty1 && > ( _Left ) >= static_cast < _Ty2 && > ( _Right ) ) )
        -> decltype ( static_cast < _Ty1 && > ( _Left ) >= static_cast < _Ty2 && > ( _Right ) ) {
        return static_cast < _Ty1 && > ( _Left ) >= static_cast < _Ty2 && > ( _Right );
    }
#line 264
using is_transparent = int; 
#line 265
}; 
#line 268
template<> struct less_equal< void>  { 
#line 269
template < class _Ty1, class _Ty2 >
    [ [ nodiscard ] ] constexpr auto operator ( ) ( _Ty1 && _Left, _Ty2 && _Right ) const
        noexcept ( noexcept ( static_cast < _Ty1 && > ( _Left ) <= static_cast < _Ty2 && > ( _Right ) ) )
        -> decltype ( static_cast < _Ty1 && > ( _Left ) <= static_cast < _Ty2 && > ( _Right ) ) {
        return static_cast < _Ty1 && > ( _Left ) <= static_cast < _Ty2 && > ( _Right );
    }
#line 276
using is_transparent = int; 
#line 277
}; 
#line 279
template < class _Ty >
[ [ nodiscard ] ] constexpr _Ty * addressof ( _Ty & _Val ) noexcept {
    return __builtin_addressof ( _Val );
}
#line 284
template < class _Ty >
const _Ty * addressof ( const _Ty && ) = delete;
#line 287
template < class _Ptrty >
[ [ nodiscard ] ] constexpr auto _Unfancy ( _Ptrty _Ptr ) noexcept {
    return :: std :: addressof ( * _Ptr );
}
#line 292
template < class _Ty >
[ [ nodiscard ] ] constexpr _Ty * _Unfancy ( _Ty * _Ptr ) noexcept {
    return _Ptr;
}
#line 296
}
#line 427 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\xstddef"
#pragma warning(pop)
#pragma pack ( pop )
#line 17 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\iosfwd"
#pragma pack ( push, 8 )
#pragma warning(push, 3)
#pragma warning(disable : 4180 4412 4455 4494 4514 4574 4582 4583 4587 4588 4619 4623 4625 4626 4643 4648 4702 4793 4820 4988 5026 5027 5045 6294 4984 5053 )
#line 24
namespace std { 
#line 47 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\iosfwd"
using streamoff = __int64; 
#line 48
using streamsize = __int64; 
#line 50
template < class _Statetype >
class fpos {
public :
     fpos ( streamoff _Off = 0 ) : _Myoff ( _Off ), _Fpos ( 0 ), _Mystate ( ) { }

    fpos ( _Statetype _State, fpos_t _Fileposition ) : _Myoff ( _Fileposition ), _Fpos ( 0 ), _Mystate ( _State ) { }

    [ [ nodiscard ] ] _Statetype state ( ) const {
        return _Mystate;
    }

    void state ( _Statetype _State ) {
        _Mystate = _State;
    }

    operator streamoff ( ) const noexcept {


        return _Myoff + _Fpos;
    }


    [ [ deprecated ( "warning STL4019: The member std::fpos::seekpos() is non-Standard, and is preserved only for compatibility with workarounds for o" "ld versions of Visual C++. It will be removed in a future release, and in this release always returns 0. Please use standards-co" "nforming mechanisms to manipulate fpos, such as conversions to and from streamoff, or an integral type, instead. If you are rece" "iving this message while compiling Boost.IOStreams, a fix has been submitted upstream to make Boost use standards-conforming mec" "hanisms, as it does for other compilers. You can define _SILENCE_FPOS_SEEKPOS_DEPRECATION_WARNING to suppress this warning, or d" "efine _REMOVE_FPOS_SEEKPOS to remove std::fpos::seekpos entirely." ) ] ] fpos_t seekpos ( ) const noexcept {
        return { };
    }


    [ [ nodiscard ] ] streamoff operator - ( const fpos & _Right ) const noexcept {
        return static_cast < streamoff > ( * this ) - static_cast < streamoff > ( _Right );
    }

    fpos & operator += ( streamoff _Off ) noexcept {
        _Myoff += _Off;
        return * this;
    }

    fpos & operator -= ( streamoff _Off ) noexcept {
        _Myoff -= _Off;
        return * this;
    }

    [ [ nodiscard ] ] fpos operator + ( streamoff _Off ) const {
        fpos _Tmp = * this;
        _Tmp += _Off;
        return _Tmp;
    }

    [ [ nodiscard ] ] fpos operator - ( streamoff _Off ) const {
        fpos _Tmp = * this;
        _Tmp -= _Off;
        return _Tmp;
    }

    [ [ nodiscard ] ] bool operator == ( const fpos & _Right ) const noexcept {
        return static_cast < streamoff > ( * this ) == static_cast < streamoff > ( _Right );
    }

    template < class _Int, enable_if_t < is_integral_v < _Int >, int > = 0 >
    friend bool operator == ( const fpos & _Left, const _Int _Right ) noexcept {
        return static_cast < streamoff > ( _Left ) == _Right;
    }


    template < class _Int, enable_if_t < is_integral_v < _Int >, int > = 0 >
    friend bool operator == ( const _Int _Left, const fpos & _Right ) noexcept {
        return _Left == static_cast < streamoff > ( _Right );
    }

    [ [ nodiscard ] ] bool operator != ( const fpos & _Right ) const noexcept {
        return static_cast < streamoff > ( * this ) != static_cast < streamoff > ( _Right );
    }

    template < class _Int, enable_if_t < is_integral_v < _Int >, int > = 0 >
    friend bool operator != ( const fpos & _Left, const _Int _Right ) noexcept {
        return static_cast < streamoff > ( _Left ) != _Right;
    }

    template < class _Int, enable_if_t < is_integral_v < _Int >, int > = 0 >
    friend bool operator != ( const _Int _Left, const fpos & _Right ) noexcept {
        return _Left != static_cast < streamoff > ( _Right );
    }


private :
    streamoff _Myoff;
    fpos_t _Fpos;
    _Statetype _Mystate;
};
#line 139 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\iosfwd"
using streampos = fpos< _Mbstatet> ; 
#line 140
using wstreampos = streampos; 
#line 144
using u16streampos = streampos; 
#line 145
using u32streampos = streampos; 
#line 147
class locale; 
#line 148
template < class _Facet >
const _Facet & __cdecl use_facet ( const locale & );
#line 151
template< class _Elem> struct char_traits; 
#line 154
template<> struct char_traits< char> ; 
#line 160
template<> struct char_traits< char16_t> ; 
#line 162
template<> struct char_traits< char32_t> ; 
#line 164
template<> struct char_traits< __wchar_t> ; 
#line 170
template < class _Ty >
class allocator;
#line 172
class ios_base; 
#line 173
template < class _Elem, class _Traits = char_traits < _Elem > >
class basic_ios;
#line 175
template < class _Elem, class _Traits = char_traits < _Elem > >
class istreambuf_iterator;
#line 177
template < class _Elem, class _Traits = char_traits < _Elem > >
class ostreambuf_iterator;
#line 179
template < class _Elem, class _Traits = char_traits < _Elem > >
class basic_streambuf;
#line 182
#pragma vtordisp(push, 2)
template < class _Elem, class _Traits = char_traits < _Elem > >
class basic_istream;
#line 185
template < class _Elem, class _Traits = char_traits < _Elem > >
class basic_ostream;
#pragma vtordisp(pop)
#line 189
template < class _Elem, class _Traits = char_traits < _Elem > >
class basic_iostream;
#line 191
template< class _Elem, class _Traits = char_traits< _Elem> , class _Alloc = allocator< _Elem> > class basic_stringbuf; 
#line 193
template< class _Elem, class _Traits = char_traits< _Elem> , class _Alloc = allocator< _Elem> > class basic_istringstream; 
#line 195
template< class _Elem, class _Traits = char_traits< _Elem> , class _Alloc = allocator< _Elem> > class basic_ostringstream; 
#line 197
template< class _Elem, class _Traits = char_traits< _Elem> , class _Alloc = allocator< _Elem> > class basic_stringstream; 
#line 209 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\iosfwd"
template< class _Elem, class _Traits = char_traits< _Elem> > class basic_filebuf; 
#line 211
template< class _Elem, class _Traits = char_traits< _Elem> > class basic_ifstream; 
#line 213
template< class _Elem, class _Traits = char_traits< _Elem> > class basic_ofstream; 
#line 215
template< class _Elem, class _Traits = char_traits< _Elem> > class basic_fstream; 
#line 227 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\iosfwd"
template < class _Elem, class _InIt >
class num_get;
#line 229
template < class _Elem, class _OutIt >
class num_put;
#line 231
template< class _Elem> class collate; 
#line 235 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\iosfwd"
using ios = basic_ios< char, char_traits< char> > ; 
#line 236
using streambuf = basic_streambuf< char, char_traits< char> > ; 
#line 237
using istream = basic_istream< char, char_traits< char> > ; 
#line 238
using ostream = basic_ostream< char, char_traits< char> > ; 
#line 239
using iostream = basic_iostream< char, char_traits< char> > ; 
#line 240
using stringbuf = basic_stringbuf< char, char_traits< char> , allocator< char> > ; 
#line 241
using istringstream = basic_istringstream< char, char_traits< char> , allocator< char> > ; 
#line 242
using ostringstream = basic_ostringstream< char, char_traits< char> , allocator< char> > ; 
#line 243
using stringstream = basic_stringstream< char, char_traits< char> , allocator< char> > ; 
#line 244
using filebuf = basic_filebuf< char, char_traits< char> > ; 
#line 245
using ifstream = basic_ifstream< char, char_traits< char> > ; 
#line 246
using ofstream = basic_ofstream< char, char_traits< char> > ; 
#line 247
using fstream = basic_fstream< char, char_traits< char> > ; 
#line 259 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\iosfwd"
using wios = basic_ios< __wchar_t, char_traits< __wchar_t> > ; 
#line 260
using wstreambuf = basic_streambuf< __wchar_t, char_traits< __wchar_t> > ; 
#line 261
using wistream = basic_istream< __wchar_t, char_traits< __wchar_t> > ; 
#line 262
using wostream = basic_ostream< __wchar_t, char_traits< __wchar_t> > ; 
#line 263
using wiostream = basic_iostream< __wchar_t, char_traits< __wchar_t> > ; 
#line 264
using wstringbuf = basic_stringbuf< __wchar_t, char_traits< __wchar_t> , allocator< __wchar_t> > ; 
#line 265
using wistringstream = basic_istringstream< __wchar_t, char_traits< __wchar_t> , allocator< __wchar_t> > ; 
#line 266
using wostringstream = basic_ostringstream< __wchar_t, char_traits< __wchar_t> , allocator< __wchar_t> > ; 
#line 267
using wstringstream = basic_stringstream< __wchar_t, char_traits< __wchar_t> , allocator< __wchar_t> > ; 
#line 268
using wfilebuf = basic_filebuf< __wchar_t, char_traits< __wchar_t> > ; 
#line 269
using wifstream = basic_ifstream< __wchar_t, char_traits< __wchar_t> > ; 
#line 270
using wofstream = basic_ofstream< __wchar_t, char_traits< __wchar_t> > ; 
#line 271
using wfstream = basic_fstream< __wchar_t, char_traits< __wchar_t> > ; 
#line 283 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\iosfwd"
}
#line 287
#pragma warning(pop)
#pragma pack ( pop )
#line 15 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\stdint.h"
#pragma warning(push)
#pragma warning(disable: 4514 4820 )
#line 18
typedef signed char int8_t; 
#line 19
typedef short int16_t; 
#line 20
typedef int int32_t; 
#line 21
typedef __int64 int64_t; 
#line 22
typedef unsigned char uint8_t; 
#line 23
typedef unsigned short uint16_t; 
#line 24
typedef unsigned uint32_t; 
#line 25
typedef unsigned __int64 uint64_t; 
#line 27
typedef signed char int_least8_t; 
#line 28
typedef short int_least16_t; 
#line 29
typedef int int_least32_t; 
#line 30
typedef __int64 int_least64_t; 
#line 31
typedef unsigned char uint_least8_t; 
#line 32
typedef unsigned short uint_least16_t; 
#line 33
typedef unsigned uint_least32_t; 
#line 34
typedef unsigned __int64 uint_least64_t; 
#line 36
typedef signed char int_fast8_t; 
#line 37
typedef int int_fast16_t; 
#line 38
typedef int int_fast32_t; 
#line 39
typedef __int64 int_fast64_t; 
#line 40
typedef unsigned char uint_fast8_t; 
#line 41
typedef unsigned uint_fast16_t; 
#line 42
typedef unsigned uint_fast32_t; 
#line 43
typedef unsigned __int64 uint_fast64_t; 
#line 45
typedef __int64 intmax_t; 
#line 46
typedef unsigned __int64 uintmax_t; 
#line 136 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\stdint.h"
#pragma warning(pop)
#line 14 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\cstdint"
#pragma pack ( push, 8 )
#pragma warning(push, 3)
#pragma warning(disable : 4180 4412 4455 4494 4514 4574 4582 4583 4587 4588 4619 4623 4625 4626 4643 4648 4702 4793 4820 4988 5026 5027 5045 6294 4984 5053 )
#line 21
namespace std { 
#line 22
using ::int8_t;
#line 23
using ::int16_t;
#line 24
using ::int32_t;
#line 25
using ::int64_t;
#line 26
using ::uint8_t;
#line 27
using ::uint16_t;
#line 28
using ::uint32_t;
#line 29
using ::uint64_t;
#line 31
using ::int_least8_t;
#line 32
using ::int_least16_t;
#line 33
using ::int_least32_t;
#line 34
using ::int_least64_t;
#line 35
using ::uint_least8_t;
#line 36
using ::uint_least16_t;
#line 37
using ::uint_least32_t;
#line 38
using ::uint_least64_t;
#line 40
using ::int_fast8_t;
#line 41
using ::int_fast16_t;
#line 42
using ::int_fast32_t;
#line 43
using ::int_fast64_t;
#line 44
using ::uint_fast8_t;
#line 45
using ::uint_fast16_t;
#line 46
using ::uint_fast32_t;
#line 47
using ::uint_fast64_t;
#line 49
using ::intmax_t;
#line 50
using ::intptr_t;
#line 51
using ::uintmax_t;
#line 52
using ::uintptr_t;
#line 55
namespace [[deprecated("warning STL4002: The non-Standard std::tr1 namespace and TR1-only machinery are deprecated and will be REMOVED. You can define _" "SILENCE_TR1_NAMESPACE_DEPRECATION_WARNING to suppress this warning.")]] tr1 { 
#line 56
using ::int8_t;
#line 57
using ::int16_t;
#line 58
using ::int32_t;
#line 59
using ::int64_t;
#line 60
using ::uint8_t;
#line 61
using ::uint16_t;
#line 62
using ::uint32_t;
#line 63
using ::uint64_t;
#line 65
using ::int_least8_t;
#line 66
using ::int_least16_t;
#line 67
using ::int_least32_t;
#line 68
using ::int_least64_t;
#line 69
using ::uint_least8_t;
#line 70
using ::uint_least16_t;
#line 71
using ::uint_least32_t;
#line 72
using ::uint_least64_t;
#line 74
using ::int_fast8_t;
#line 75
using ::int_fast16_t;
#line 76
using ::int_fast32_t;
#line 77
using ::int_fast64_t;
#line 78
using ::uint_fast8_t;
#line 79
using ::uint_fast16_t;
#line 80
using ::uint_fast32_t;
#line 81
using ::uint_fast64_t;
#line 83
using ::intmax_t;
#line 84
using ::intptr_t;
#line 85
using ::uintmax_t;
#line 86
using ::uintptr_t;
#line 87
}
#line 89 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\cstdint"
}
#line 93
#pragma warning(pop)
#pragma pack ( pop )
#line 14 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\type_traits"
#pragma pack ( push, 8 )
#pragma warning(push, 3)
#pragma warning(disable : 4180 4412 4455 4494 4514 4574 4582 4583 4587 4588 4619 4623 4625 4626 4643 4648 4702 4793 4820 4988 5026 5027 5045 6294 4984 5053 )
#line 21
namespace std { 
#line 22
template < class _Ty, _Ty ... _Vals >
struct integer_sequence {
    static_assert ( is_integral_v < _Ty >, "integer_sequence<T, I...> requires T to be an integral type." );

    using value_type = _Ty;

    [ [ nodiscard ] ] static constexpr size_t size ( ) noexcept {
        return sizeof ... ( _Vals );
    }
};
#line 33
template< class _Ty, _Ty _Size> using make_integer_sequence = __make_integer_seq< integer_sequence, _Ty, _Size> ; 
#line 36
template< size_t ..._Vals> using index_sequence = integer_sequence< unsigned __int64, _Vals...> ; 
#line 39
template< size_t _Size> using make_index_sequence = make_integer_sequence< unsigned __int64, _Size> ; 
#line 42
template< class ..._Types> using index_sequence_for = make_index_sequence< sizeof...(_Types)> ; 
#line 45
template< bool _First_value, class _First, class ..._Rest> 
#line 46
struct _Conjunction { 
#line 47
using type = _First; 
#line 48
}; 
#line 50
template< class _True, class _Next, class ..._Rest> 
#line 51
struct _Conjunction< true, _True, _Next, _Rest...>  { 
#line 52
using type = typename std::_Conjunction< _Next::value, _Next, _Rest...> ::type; 
#line 53
}; 
#line 55
template< class ..._Traits> 
#line 56
struct conjunction : public true_type { }; 
#line 58
template< class _First, class ..._Rest> 
#line 59
struct conjunction< _First, _Rest...>  : public _Conjunction< _First::value, _First, _Rest...> ::type { 
#line 61
}; 
#line 63
template< class ..._Traits> constexpr bool 
#line 64
conjunction_v = (conjunction< _Traits...> ::value); 
#line 66
template< class _Trait> 
#line 67
struct negation : public bool_constant< !(static_cast< bool>(_Trait::value))>  { }; 
#line 69
template< class _Trait> constexpr bool 
#line 70
negation_v = (negation< _Trait> ::value); 
#line 72
template< class _Ty> constexpr bool 
#line 73
is_void_v = is_same_v< remove_cv_t< _Ty> , void> ; 
#line 75
template< class _Ty> 
#line 76
struct is_void : public bool_constant< is_void_v< _Ty> >  { }; 
#line 78
template< class ..._Types> using void_t = void; 
#line 81
template< class _Ty> 
#line 82
struct _Identity { 
#line 83
using type = _Ty; 
#line 84
}; 
#line 85
template< class _Ty> using _Identity_t = typename _Identity< _Ty> ::type; 
#line 89
template< class _Ty> 
#line 90
struct add_const { 
#line 91
using type = const _Ty; 
#line 92
}; 
#line 94
template< class _Ty> using add_const_t = typename add_const< _Ty> ::type; 
#line 97
template< class _Ty> 
#line 98
struct add_volatile { 
#line 99
using type = volatile _Ty; 
#line 100
}; 
#line 102
template< class _Ty> using add_volatile_t = typename add_volatile< _Ty> ::type; 
#line 105
template< class _Ty> 
#line 106
struct add_cv { 
#line 107
using type = const volatile _Ty; 
#line 108
}; 
#line 110
template< class _Ty> using add_cv_t = typename add_cv< _Ty> ::type; 
#line 113
template< class _Ty, class  = void> 
#line 114
struct _Add_reference { 
#line 115
using _Lvalue = _Ty; 
#line 116
using _Rvalue = _Ty; 
#line 117
}; 
#line 119
template< class _Ty> 
#line 120
struct _Add_reference< _Ty, void_t< _Ty &> >  { 
#line 121
using _Lvalue = _Ty &; 
#line 122
using _Rvalue = _Ty &&; 
#line 123
}; 
#line 125
template< class _Ty> 
#line 126
struct add_lvalue_reference { 
#line 127
using type = typename _Add_reference< _Ty> ::_Lvalue; 
#line 128
}; 
#line 130
template< class _Ty> using add_lvalue_reference_t = typename _Add_reference< _Ty> ::_Lvalue; 
#line 133
template< class _Ty> 
#line 134
struct add_rvalue_reference { 
#line 135
using type = typename _Add_reference< _Ty> ::_Rvalue; 
#line 136
}; 
#line 138
template< class _Ty> using add_rvalue_reference_t = typename _Add_reference< _Ty> ::_Rvalue; 
#line 141
template < class _Ty >
add_rvalue_reference_t < _Ty > declval ( ) noexcept {
    static_assert ( _Always_false < _Ty >, "Calling declval is ill-formed, see N4928 [declval]/2." );
}
#line 146
template< class _Ty> 
#line 147
struct remove_extent { 
#line 148
using type = _Ty; 
#line 149
}; 
#line 151
template< class _Ty, size_t _Ix> 
#line 152
struct remove_extent< _Ty [_Ix]>  { 
#line 153
using type = _Ty; 
#line 154
}; 
#line 156
template< class _Ty> 
#line 157
struct remove_extent< _Ty []>  { 
#line 158
using type = _Ty; 
#line 159
}; 
#line 161
template< class _Ty> using remove_extent_t = typename remove_extent< _Ty> ::type; 
#line 164
template< class _Ty> 
#line 165
struct remove_all_extents { 
#line 166
using type = _Ty; 
#line 167
}; 
#line 169
template< class _Ty, size_t _Ix> 
#line 170
struct remove_all_extents< _Ty [_Ix]>  { 
#line 171
using type = typename std::remove_all_extents< _Ty> ::type; 
#line 172
}; 
#line 174
template< class _Ty> 
#line 175
struct remove_all_extents< _Ty []>  { 
#line 176
using type = typename std::remove_all_extents< _Ty> ::type; 
#line 177
}; 
#line 179
template< class _Ty> using remove_all_extents_t = typename remove_all_extents< _Ty> ::type; 
#line 182
template< class _Ty> 
#line 183
struct remove_pointer { 
#line 184
using type = _Ty; 
#line 185
}; 
#line 187
template< class _Ty> 
#line 188
struct remove_pointer< _Ty *>  { 
#line 189
using type = _Ty; 
#line 190
}; 
#line 192
template< class _Ty> 
#line 193
struct remove_pointer< _Ty *const>  { 
#line 194
using type = _Ty; 
#line 195
}; 
#line 197
template< class _Ty> 
#line 198
struct remove_pointer< _Ty *volatile>  { 
#line 199
using type = _Ty; 
#line 200
}; 
#line 202
template< class _Ty> 
#line 203
struct remove_pointer< _Ty *const volatile>  { 
#line 204
using type = _Ty; 
#line 205
}; 
#line 207
template< class _Ty> using remove_pointer_t = typename remove_pointer< _Ty> ::type; 
#line 210
template< class _Ty, class  = void> 
#line 211
struct _Add_pointer { 
#line 212
using type = _Ty; 
#line 213
}; 
#line 215
template< class _Ty> 
#line 216
struct _Add_pointer< _Ty, void_t< remove_reference_t< _Ty>  *> >  { 
#line 217
using type = remove_reference_t< _Ty>  *; 
#line 218
}; 
#line 220
template< class _Ty> 
#line 221
struct add_pointer { 
#line 222
using type = typename _Add_pointer< _Ty> ::type; 
#line 223
}; 
#line 225
template< class _Ty> using add_pointer_t = typename _Add_pointer< _Ty> ::type; 
#line 228
template< class > constexpr bool 
#line 229
is_array_v = false; 
#line 231
template< class _Ty, size_t _Nx> constexpr bool 
#line 232
is_array_v< _Ty [_Nx]>  = true; 
#line 234
template< class _Ty> constexpr bool 
#line 235
is_array_v< _Ty []>  = true; 
#line 237
template< class _Ty> 
#line 238
struct is_array : public bool_constant< is_array_v< _Ty> >  { }; 
#line 260 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\type_traits"
template< class > constexpr bool 
#line 261
is_lvalue_reference_v = false; 
#line 263
template< class _Ty> constexpr bool 
#line 264
is_lvalue_reference_v< _Ty &>  = true; 
#line 266
template< class _Ty> 
#line 267
struct is_lvalue_reference : public bool_constant< is_lvalue_reference_v< _Ty> >  { }; 
#line 269
template< class > constexpr bool 
#line 270
is_rvalue_reference_v = false; 
#line 272
template< class _Ty> constexpr bool 
#line 273
is_rvalue_reference_v< _Ty &&>  = true; 
#line 275
template< class _Ty> 
#line 276
struct is_rvalue_reference : public bool_constant< is_rvalue_reference_v< _Ty> >  { }; 
#line 278
template< class > constexpr bool 
#line 279
is_reference_v = false; 
#line 281
template< class _Ty> constexpr bool 
#line 282
is_reference_v< _Ty &>  = true; 
#line 284
template< class _Ty> constexpr bool 
#line 285
is_reference_v< _Ty &&>  = true; 
#line 287
template< class _Ty> 
#line 288
struct is_reference : public bool_constant< is_reference_v< _Ty> >  { }; 
#line 290
template< class > constexpr bool 
#line 291
is_pointer_v = false; 
#line 293
template< class _Ty> constexpr bool 
#line 294
is_pointer_v< _Ty *>  = true; 
#line 296
template< class _Ty> constexpr bool 
#line 297
is_pointer_v< _Ty *const>  = true; 
#line 299
template< class _Ty> constexpr bool 
#line 300
is_pointer_v< _Ty *volatile>  = true; 
#line 302
template< class _Ty> constexpr bool 
#line 303
is_pointer_v< _Ty *const volatile>  = true; 
#line 305
template< class _Ty> 
#line 306
struct is_pointer : public bool_constant< is_pointer_v< _Ty> >  { }; 
#line 308
template< class _Ty> constexpr bool 
#line 309
is_null_pointer_v = is_same_v< remove_cv_t< _Ty> , std::nullptr_t> ; 
#line 312
template< class _Ty> 
#line 313
struct is_null_pointer : public bool_constant< is_null_pointer_v< _Ty> >  { }; 
#line 315
template< class _Ty> 
#line 316
struct is_union : public bool_constant< __is_union(_Ty)>  { }; 
#line 318
template< class _Ty> constexpr bool 
#line 319
is_union_v = __is_union(_Ty); 
#line 321
template< class _Ty> 
#line 322
struct is_class : public bool_constant< __is_class(_Ty)>  { }; 
#line 324
template< class _Ty> constexpr bool 
#line 325
is_class_v = __is_class(_Ty); 
#line 327
template< class _Ty> constexpr bool 
#line 328
is_fundamental_v = (is_arithmetic_v< _Ty>  || is_void_v< _Ty> ) || is_null_pointer_v< _Ty> ; 
#line 330
template< class _Ty> 
#line 331
struct is_fundamental : public bool_constant< is_fundamental_v< _Ty> >  { }; 
#line 333
template< class _From, class _To> 
#line 334
struct is_convertible : public bool_constant< __is_convertible_to(_From, _To)>  { 
#line 336
}; 
#line 338
template< class _From, class _To> constexpr bool 
#line 339
is_convertible_v = __is_convertible_to(_From, _To); 
#line 342
template< class _Ty> 
#line 343
struct is_convertible< _Ty &, volatile _Ty &>  : public true_type { }; 
#line 345
template< class _Ty> 
#line 346
struct is_convertible< volatile _Ty &, volatile _Ty &>  : public true_type { }; 
#line 348
template< class _Ty> 
#line 349
struct is_convertible< _Ty &, const volatile _Ty &>  : public true_type { }; 
#line 351
template< class _Ty> 
#line 352
struct is_convertible< volatile _Ty &, const volatile _Ty &>  : public true_type { }; 
#line 354
template< class _Ty> constexpr bool 
#line 355
is_convertible_v< _Ty &, volatile _Ty &>  = true; 
#line 357
template< class _Ty> constexpr bool 
#line 358
is_convertible_v< volatile _Ty &, volatile _Ty &>  = true; 
#line 360
template< class _Ty> constexpr bool 
#line 361
is_convertible_v< _Ty &, const volatile _Ty &>  = true; 
#line 363
template< class _Ty> constexpr bool 
#line 364
is_convertible_v< volatile _Ty &, const volatile _Ty &>  = true; 
#line 367 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\type_traits"
template< class _Ty> 
#line 368
struct is_enum : public bool_constant< __is_enum(_Ty)>  { }; 
#line 370
template< class _Ty> constexpr bool 
#line 371
is_enum_v = __is_enum(_Ty); 
#line 381 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\type_traits"
template< class _Ty> 
#line 382
struct is_compound : public bool_constant< !is_fundamental_v< _Ty> >  { }; 
#line 384
template< class _Ty> constexpr bool 
#line 385
is_compound_v = (!is_fundamental_v< _Ty> ); 
#line 387
template< class ..._Types> 
#line 388
struct _Arg_types { }; 
#line 390
template< class _Ty1> 
#line 391
struct _Arg_types< _Ty1>  { 
#line 392
using argument_type = _Ty1; 
#line 393
}; 
#line 395
template< class _Ty1, class _Ty2> 
#line 396
struct _Arg_types< _Ty1, _Ty2>  { 
#line 397
using first_argument_type = _Ty1; 
#line 398
using second_argument_type = _Ty2; 
#line 399
}; 
#line 401
template< class _Ty> 
#line 402
struct _Is_memfunptr { 
#line 403
using _Bool_type = false_type; 
#line 404
}; 
#line 416
template< class _Ret, class _Arg0, class ..._Types> struct _Is_memfunptr< _Ret (__cdecl _Arg0::*)(_Types ...)>  : public _Arg_types< _Arg0 *, _Types...>  { using _Bool_type = std::true_type; using result_type = _Ret; using _Class_type = _Arg0; using _Guide_type = enable_if< true, _Ret (_Types ...)> ; }; template< class _Ret, class _Arg0, class ..._Types> struct _Is_memfunptr< _Ret (__vectorcall _Arg0::*)(_Types ...)>  : public _Arg_types< _Arg0 *, _Types...>  { using _Bool_type = std::true_type; using result_type = _Ret; using _Class_type = _Arg0; using _Guide_type = enable_if< true, _Ret (_Types ...)> ; }; template< class _Ret, class _Arg0, class ..._Types> struct _Is_memfunptr< _Ret (__cdecl _Arg0::*)(_Types ...) const>  : public _Arg_types< const _Arg0 *, _Types...>  { using _Bool_type = std::true_type; using result_type = _Ret; using _Class_type = _Arg0; using _Guide_type = enable_if< true, _Ret (_Types ...)> ; }; template< class _Ret, class _Arg0, class ..._Types> struct _Is_memfunptr< _Ret (__vectorcall _Arg0::*)(_Types ...) const>  : public _Arg_types< const _Arg0 *, _Types...>  { using _Bool_type = std::true_type; using result_type = _Ret; using _Class_type = _Arg0; using _Guide_type = enable_if< true, _Ret (_Types ...)> ; }; template< class _Ret, class _Arg0, class ..._Types> struct _Is_memfunptr< _Ret (__cdecl _Arg0::*)(_Types ...) volatile>  : public _Arg_types< volatile _Arg0 *, _Types...>  { using _Bool_type = std::true_type; using result_type = _Ret; using _Class_type = _Arg0; using _Guide_type = enable_if< true, _Ret (_Types ...)> ; }; template< class _Ret, class _Arg0, class ..._Types> struct _Is_memfunptr< _Ret (__vectorcall _Arg0::*)(_Types ...) volatile>  : public _Arg_types< volatile _Arg0 *, _Types...>  { using _Bool_type = std::true_type; using result_type = _Ret; using _Class_type = _Arg0; using _Guide_type = enable_if< true, _Ret (_Types ...)> ; }; template< class _Ret, class _Arg0, class ..._Types> struct _Is_memfunptr< _Ret (__cdecl _Arg0::*)(_Types ...) const volatile>  : public _Arg_types< const volatile _Arg0 *, _Types...>  { using _Bool_type = std::true_type; using result_type = _Ret; using _Class_type = _Arg0; using _Guide_type = enable_if< true, _Ret (_Types ...)> ; }; template< class _Ret, class _Arg0, class ..._Types> struct _Is_memfunptr< _Ret (__vectorcall _Arg0::*)(_Types ...) const volatile>  : public _Arg_types< const volatile _Arg0 *, _Types...>  { using _Bool_type = std::true_type; using result_type = _Ret; using _Class_type = _Arg0; using _Guide_type = enable_if< true, _Ret (_Types ...)> ; }; template< class _Ret, class _Arg0, class ..._Types> struct _Is_memfunptr< _Ret (__cdecl _Arg0::*)(_Types ...) &>  : public _Arg_types< _Arg0 *, _Types...>  { using _Bool_type = std::true_type; using result_type = _Ret; using _Class_type = _Arg0; using _Guide_type = enable_if< true, _Ret (_Types ...)> ; }; template< class _Ret, class _Arg0, class ..._Types> struct _Is_memfunptr< _Ret (__vectorcall _Arg0::*)(_Types ...) &>  : public _Arg_types< _Arg0 *, _Types...>  { using _Bool_type = std::true_type; using result_type = _Ret; using _Class_type = _Arg0; using _Guide_type = enable_if< true, _Ret (_Types ...)> ; }; template< class _Ret, class _Arg0, class ..._Types> struct _Is_memfunptr< _Ret (__cdecl _Arg0::*)(_Types ...) const &>  : public _Arg_types< const _Arg0 *, _Types...>  { using _Bool_type = std::true_type; using result_type = _Ret; using _Class_type = _Arg0; using _Guide_type = enable_if< true, _Ret (_Types ...)> ; }; template< class _Ret, class _Arg0, class ..._Types> struct _Is_memfunptr< _Ret (__vectorcall _Arg0::*)(_Types ...) const &>  : public _Arg_types< const _Arg0 *, _Types...>  { using _Bool_type = std::true_type; using result_type = _Ret; using _Class_type = _Arg0; using _Guide_type = enable_if< true, _Ret (_Types ...)> ; }; template< class _Ret, class _Arg0, class ..._Types> struct _Is_memfunptr< _Ret (__cdecl _Arg0::*)(_Types ...) volatile &>  : public _Arg_types< volatile _Arg0 *, _Types...>  { using _Bool_type = std::true_type; using result_type = _Ret; using _Class_type = _Arg0; using _Guide_type = enable_if< true, _Ret (_Types ...)> ; }; template< class _Ret, class _Arg0, class ..._Types> struct _Is_memfunptr< _Ret (__vectorcall _Arg0::*)(_Types ...) volatile &>  : public _Arg_types< volatile _Arg0 *, _Types...>  { using _Bool_type = std::true_type; using result_type = _Ret; using _Class_type = _Arg0; using _Guide_type = enable_if< true, _Ret (_Types ...)> ; }; template< class _Ret, class _Arg0, class ..._Types> struct _Is_memfunptr< _Ret (__cdecl _Arg0::*)(_Types ...) const volatile &>  : public _Arg_types< const volatile _Arg0 *, _Types...>  { using _Bool_type = std::true_type; using result_type = _Ret; using _Class_type = _Arg0; using _Guide_type = enable_if< true, _Ret (_Types ...)> ; }; template< class _Ret, class _Arg0, class ..._Types> struct _Is_memfunptr< _Ret (__vectorcall _Arg0::*)(_Types ...) const volatile &>  : public _Arg_types< const volatile _Arg0 *, _Types...>  { using _Bool_type = std::true_type; using result_type = _Ret; using _Class_type = _Arg0; using _Guide_type = enable_if< true, _Ret (_Types ...)> ; }; template< class _Ret, class _Arg0, class ..._Types> struct _Is_memfunptr< _Ret (__cdecl _Arg0::*)(_Types ...) &&>  : public _Arg_types< _Arg0 *, _Types...>  { using _Bool_type = std::true_type; using result_type = _Ret; using _Class_type = _Arg0; using _Guide_type = enable_if< false, _Ret (_Types ...)> ; }; template< class _Ret, class _Arg0, class ..._Types> struct _Is_memfunptr< _Ret (__vectorcall _Arg0::*)(_Types ...) &&>  : public _Arg_types< _Arg0 *, _Types...>  { using _Bool_type = std::true_type; using result_type = _Ret; using _Class_type = _Arg0; using _Guide_type = enable_if< false, _Ret (_Types ...)> ; }; template< class _Ret, class _Arg0, class ..._Types> struct _Is_memfunptr< _Ret (__cdecl _Arg0::*)(_Types ...) const &&>  : public _Arg_types< const _Arg0 *, _Types...>  { using _Bool_type = std::true_type; using result_type = _Ret; using _Class_type = _Arg0; using _Guide_type = enable_if< false, _Ret (_Types ...)> ; }; template< class _Ret, class _Arg0, class ..._Types> struct _Is_memfunptr< _Ret (__vectorcall _Arg0::*)(_Types ...) const &&>  : public _Arg_types< const _Arg0 *, _Types...>  { using _Bool_type = std::true_type; using result_type = _Ret; using _Class_type = _Arg0; using _Guide_type = enable_if< false, _Ret (_Types ...)> ; }; template< class _Ret, class _Arg0, class ..._Types> struct _Is_memfunptr< _Ret (__cdecl _Arg0::*)(_Types ...) volatile &&>  : public _Arg_types< volatile _Arg0 *, _Types...>  { using _Bool_type = std::true_type; using result_type = _Ret; using _Class_type = _Arg0; using _Guide_type = enable_if< false, _Ret (_Types ...)> ; }; template< class _Ret, class _Arg0, class ..._Types> struct _Is_memfunptr< _Ret (__vectorcall _Arg0::*)(_Types ...) volatile &&>  : public _Arg_types< volatile _Arg0 *, _Types...>  { using _Bool_type = std::true_type; using result_type = _Ret; using _Class_type = _Arg0; using _Guide_type = enable_if< false, _Ret (_Types ...)> ; }; template< class _Ret, class _Arg0, class ..._Types> struct _Is_memfunptr< _Ret (__cdecl _Arg0::*)(_Types ...) const volatile &&>  : public _Arg_types< const volatile _Arg0 *, _Types...>  { using _Bool_type = std::true_type; using result_type = _Ret; using _Class_type = _Arg0; using _Guide_type = enable_if< false, _Ret (_Types ...)> ; }; template< class _Ret, class _Arg0, class ..._Types> struct _Is_memfunptr< _Ret (__vectorcall _Arg0::*)(_Types ...) const volatile &&>  : public _Arg_types< const volatile _Arg0 *, _Types...>  { using _Bool_type = std::true_type; using result_type = _Ret; using _Class_type = _Arg0; using _Guide_type = enable_if< false, _Ret (_Types ...)> ; }; 
#line 429
template< class _Ret, class _Arg0, class ..._Types> struct _Is_memfunptr< _Ret (_Arg0::*)(_Types ..., ...)>  { using _Bool_type = true_type; using result_type = _Ret; using _Class_type = _Arg0; using _Guide_type = enable_if< false> ; }; template< class _Ret, class _Arg0, class ..._Types> struct _Is_memfunptr< _Ret (_Arg0::*)(_Types ..., ...) const>  { using _Bool_type = true_type; using result_type = _Ret; using _Class_type = _Arg0; using _Guide_type = enable_if< false> ; }; template< class _Ret, class _Arg0, class ..._Types> struct _Is_memfunptr< _Ret (_Arg0::*)(_Types ..., ...) volatile>  { using _Bool_type = true_type; using result_type = _Ret; using _Class_type = _Arg0; using _Guide_type = enable_if< false> ; }; template< class _Ret, class _Arg0, class ..._Types> struct _Is_memfunptr< _Ret (_Arg0::*)(_Types ..., ...) const volatile>  { using _Bool_type = true_type; using result_type = _Ret; using _Class_type = _Arg0; using _Guide_type = enable_if< false> ; }; template< class _Ret, class _Arg0, class ..._Types> struct _Is_memfunptr< _Ret (_Arg0::*)(_Types ..., ...) &>  { using _Bool_type = true_type; using result_type = _Ret; using _Class_type = _Arg0; using _Guide_type = enable_if< false> ; }; template< class _Ret, class _Arg0, class ..._Types> struct _Is_memfunptr< _Ret (_Arg0::*)(_Types ..., ...) const &>  { using _Bool_type = true_type; using result_type = _Ret; using _Class_type = _Arg0; using _Guide_type = enable_if< false> ; }; template< class _Ret, class _Arg0, class ..._Types> struct _Is_memfunptr< _Ret (_Arg0::*)(_Types ..., ...) volatile &>  { using _Bool_type = true_type; using result_type = _Ret; using _Class_type = _Arg0; using _Guide_type = enable_if< false> ; }; template< class _Ret, class _Arg0, class ..._Types> struct _Is_memfunptr< _Ret (_Arg0::*)(_Types ..., ...) const volatile &>  { using _Bool_type = true_type; using result_type = _Ret; using _Class_type = _Arg0; using _Guide_type = enable_if< false> ; }; template< class _Ret, class _Arg0, class ..._Types> struct _Is_memfunptr< _Ret (_Arg0::*)(_Types ..., ...) &&>  { using _Bool_type = true_type; using result_type = _Ret; using _Class_type = _Arg0; using _Guide_type = enable_if< false> ; }; template< class _Ret, class _Arg0, class ..._Types> struct _Is_memfunptr< _Ret (_Arg0::*)(_Types ..., ...) const &&>  { using _Bool_type = true_type; using result_type = _Ret; using _Class_type = _Arg0; using _Guide_type = enable_if< false> ; }; template< class _Ret, class _Arg0, class ..._Types> struct _Is_memfunptr< _Ret (_Arg0::*)(_Types ..., ...) volatile &&>  { using _Bool_type = true_type; using result_type = _Ret; using _Class_type = _Arg0; using _Guide_type = enable_if< false> ; }; template< class _Ret, class _Arg0, class ..._Types> struct _Is_memfunptr< _Ret (_Arg0::*)(_Types ..., ...) const volatile &&>  { using _Bool_type = true_type; using result_type = _Ret; using _Class_type = _Arg0; using _Guide_type = enable_if< false> ; }; 
#line 452 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\type_traits"
template< class _Ty> constexpr bool 
#line 453
is_member_function_pointer_v = (_Is_memfunptr< remove_cv_t< _Ty> > ::_Bool_type::value); 
#line 456 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\type_traits"
template< class _Ty> 
#line 457
struct is_member_function_pointer : public bool_constant< is_member_function_pointer_v< _Ty> >  { }; 
#line 459
template< class > constexpr bool 
#line 460
is_const_v = false; 
#line 462
template< class _Ty> constexpr bool 
#line 463
is_const_v< const _Ty>  = true; 
#line 465
template< class _Ty> 
#line 466
struct is_const : public bool_constant< is_const_v< _Ty> >  { }; 
#line 468
template< class > constexpr bool 
#line 469
is_volatile_v = false; 
#line 471
template< class _Ty> constexpr bool 
#line 472
is_volatile_v< volatile _Ty>  = true; 
#line 474
template< class _Ty> 
#line 475
struct is_volatile : public bool_constant< is_volatile_v< _Ty> >  { }; 
#line 477
template< class _Ty> constexpr bool 
#line 478
is_function_v = ((!is_const_v< const _Ty> ) && (!is_reference_v< _Ty> )); 
#line 481
template< class _Ty> 
#line 482
struct is_function : public bool_constant< is_function_v< _Ty> >  { }; 
#line 484
template< class _Ty> constexpr bool 
#line 485
is_object_v = is_const_v< const _Ty>  && (!is_void_v< _Ty> ); 
#line 488
template< class _Ty> 
#line 489
struct is_object : public bool_constant< is_object_v< _Ty> >  { }; 
#line 491
template< class > 
#line 492
struct _Is_member_object_pointer { 
#line 493
static constexpr bool value = false; 
#line 494
}; 
#line 496
template< class _Ty1, class _Ty2> 
#line 497
struct _Is_member_object_pointer< _Ty1 _Ty2::*>  { 
#line 498
static constexpr bool value = (!is_function_v< _Ty1> ); 
#line 499
using _Class_type = _Ty2; 
#line 500
}; 
#line 506
template< class _Ty> constexpr bool 
#line 507
is_member_object_pointer_v = (_Is_member_object_pointer< remove_cv_t< _Ty> > ::value); 
#line 510 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\type_traits"
template< class _Ty> 
#line 511
struct is_member_object_pointer : public bool_constant< is_member_object_pointer_v< _Ty> >  { }; 
#line 517
template< class _Ty> constexpr bool 
#line 518
is_member_pointer_v = is_member_object_pointer_v< _Ty>  || is_member_function_pointer_v< _Ty> ; 
#line 521 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\type_traits"
template< class _Ty> 
#line 522
struct is_member_pointer : public bool_constant< is_member_pointer_v< _Ty> >  { }; 
#line 524
template< class _Ty> constexpr bool 
#line 525
is_scalar_v = (((is_arithmetic_v< _Ty>  || is_enum_v< _Ty> ) || is_pointer_v< _Ty> ) || is_member_pointer_v< _Ty> ) || is_null_pointer_v< _Ty> ; 
#line 528
template< class _Ty> 
#line 529
struct is_scalar : public bool_constant< is_scalar_v< _Ty> >  { }; 
#line 531
template< class _Ty> 
#line 532
struct is_pod : public bool_constant< __is_pod(_Ty)>  { }; 
#line 534
template< class _Ty> constexpr bool 
#line 535
is_pod_v = __is_pod(_Ty); 
#line 537
template< class _Ty> 
#line 538
struct is_empty : public bool_constant< __is_empty(_Ty)>  { }; 
#line 540
template< class _Ty> constexpr bool 
#line 541
is_empty_v = __is_empty(_Ty); 
#line 543
template< class _Ty> 
#line 544
struct is_polymorphic : public bool_constant< __is_polymorphic(_Ty)>  { }; 
#line 546
template< class _Ty> constexpr bool 
#line 547
is_polymorphic_v = __is_polymorphic(_Ty); 
#line 549
template< class _Ty> 
#line 550
struct is_abstract : public bool_constant< __is_abstract(_Ty)>  { }; 
#line 552
template< class _Ty> constexpr bool 
#line 553
is_abstract_v = __is_abstract(_Ty); 
#line 555
template< class _Ty> 
#line 556
struct is_final : public bool_constant< __is_final(_Ty)>  { }; 
#line 558
template< class _Ty> constexpr bool 
#line 559
is_final_v = __is_final(_Ty); 
#line 561
template< class _Ty> 
#line 562
struct is_standard_layout : public bool_constant< __is_standard_layout(_Ty)>  { }; 
#line 564
template< class _Ty> constexpr bool 
#line 565
is_standard_layout_v = __is_standard_layout(_Ty); 
#line 568
template< class _Ty> 
#line 569
struct is_literal_type : public bool_constant< __is_literal_type(_Ty)>  { 
#line 571
}; 
#line 573
template< class _Ty> constexpr bool 
#line 574
is_literal_type_v = __is_literal_type(_Ty); 
#line 578 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\type_traits"
template< class _Ty> 
#line 579
struct is_trivial : public bool_constant< __is_trivially_constructible(_Ty) && __is_trivially_copyable(_Ty)>  { 
#line 581
}; 
#line 583
template< class _Ty> constexpr bool 
#line 584
is_trivial_v = (__is_trivially_constructible(_Ty) && __is_trivially_copyable(_Ty)); 
#line 593 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\type_traits"
template< class _Ty> 
#line 594
struct is_trivially_copyable : public bool_constant< __is_trivially_copyable(_Ty)>  { 
#line 596
}; 
#line 598
template< class _Ty> constexpr bool 
#line 599
is_trivially_copyable_v = __is_trivially_copyable(_Ty); 
#line 601
template< class _Ty> 
#line 602
struct has_virtual_destructor : public bool_constant< __has_virtual_destructor(_Ty)>  { 
#line 604
}; 
#line 606
template< class _Ty> constexpr bool 
#line 607
has_virtual_destructor_v = __has_virtual_destructor(_Ty); 
#line 637 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\type_traits"
template< class _Ty, class ..._Args> 
#line 638
struct is_constructible : public bool_constant< __is_constructible(_Ty, _Args...)>  { 
#line 640
}; 
#line 642
template< class _Ty, class ..._Args> constexpr bool 
#line 643
is_constructible_v = __is_constructible(_Ty, _Args...); 
#line 645
template< class _Ty> 
#line 646
struct is_copy_constructible : public bool_constant< __is_constructible(_Ty, add_lvalue_reference_t< const _Ty> )>  { 
#line 648
}; 
#line 650
template< class _Ty> constexpr bool 
#line 651
is_copy_constructible_v = __is_constructible(_Ty, add_lvalue_reference_t< const _Ty> ); 
#line 653
template< class _Ty> 
#line 654
struct is_default_constructible : public bool_constant< __is_constructible(_Ty)>  { 
#line 656
}; 
#line 658
template< class _Ty> constexpr bool 
#line 659
is_default_constructible_v = __is_constructible(_Ty); 
#line 661
template< class _Ty, class  = void> 
#line 662
struct _Is_implicitly_default_constructible : public false_type { 
#line 664
}; 
#line 666
template< class _Ty> void _Implicitly_default_construct(const _Ty &); 
#line 669
template< class _Ty> 
#line 670
struct _Is_implicitly_default_constructible< _Ty, void_t< decltype(_Implicitly_default_construct< _Ty> ({}))> >  : public true_type { 
#line 671
}; 
#line 673
template< class _Ty> 
#line 674
struct is_move_constructible : public bool_constant< __is_constructible(_Ty, _Ty)>  { 
#line 676
}; 
#line 678
template< class _Ty> constexpr bool 
#line 679
is_move_constructible_v = __is_constructible(_Ty, _Ty); 
#line 681
template< class _To, class _From> 
#line 682
struct is_assignable : public bool_constant< __is_assignable(_To, _From)>  { }; 
#line 684
template< class _To, class _From> constexpr bool 
#line 685
is_assignable_v = __is_assignable(_To, _From); 
#line 691 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\type_traits"
template< class _To, class _From> using _Is_assignable_no_precondition_check = is_assignable< _To, _From> ; 
#line 695 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\type_traits"
template< class _Ty> 
#line 696
struct is_copy_assignable : public bool_constant< __is_assignable(add_lvalue_reference_t< _Ty> , add_lvalue_reference_t< const _Ty> )>  { 
#line 699
}; 
#line 701
template< class _Ty> constexpr bool 
#line 702
is_copy_assignable_v = __is_assignable(add_lvalue_reference_t< _Ty> , add_lvalue_reference_t< const _Ty> ); 
#line 715 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\type_traits"
template< class _Ty> using _Is_copy_assignable_no_precondition_check = is_copy_assignable< _Ty> ; 
#line 718
template< class _Ty> constexpr bool 
#line 719
_Is_copy_assignable_unchecked_v = is_copy_assignable_v< _Ty> ; 
#line 722 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\type_traits"
template< class _Ty> 
#line 723
struct is_move_assignable : public bool_constant< __is_assignable(add_lvalue_reference_t< _Ty> , _Ty)>  { 
#line 725
}; 
#line 727
template< class _Ty> constexpr bool 
#line 728
is_move_assignable_v = __is_assignable(add_lvalue_reference_t< _Ty> , _Ty); 
#line 739 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\type_traits"
template< class _Ty> using _Is_move_assignable_no_precondition_check = is_move_assignable< _Ty> ; 
#line 742
template< class _Ty> constexpr bool 
#line 743
_Is_move_assignable_unchecked_v = is_move_assignable_v< _Ty> ; 
#line 746 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\type_traits"
template< class _Ty> 
#line 747
struct is_destructible : public bool_constant< __is_destructible(_Ty)>  { 
#line 749
}; 
#line 751
template< class _Ty> constexpr bool 
#line 752
is_destructible_v = __is_destructible(_Ty); 
#line 754
template< class _Ty, class ..._Args> 
#line 755
struct is_trivially_constructible : public bool_constant< __is_trivially_constructible(_Ty, _Args...)>  { 
#line 757
}; 
#line 759
template< class _Ty, class ..._Args> constexpr bool 
#line 760
is_trivially_constructible_v = __is_trivially_constructible(_Ty, _Args...); 
#line 762
template< class _Ty> 
#line 763
struct is_trivially_copy_constructible : public bool_constant< __is_trivially_constructible(_Ty, add_lvalue_reference_t< const _Ty> )>  { 
#line 766
}; 
#line 768
template< class _Ty> constexpr bool 
#line 769
is_trivially_copy_constructible_v = __is_trivially_constructible(_Ty, add_lvalue_reference_t< const _Ty> ); 
#line 772
template< class _Ty> 
#line 773
struct is_trivially_default_constructible : public bool_constant< __is_trivially_constructible(_Ty)>  { 
#line 775
}; 
#line 777
template< class _Ty> constexpr bool 
#line 778
is_trivially_default_constructible_v = __is_trivially_constructible(_Ty); 
#line 780
template< class _Ty> 
#line 781
struct is_trivially_move_constructible : public bool_constant< __is_trivially_constructible(_Ty, _Ty)>  { 
#line 783
}; 
#line 785
template< class _Ty> constexpr bool 
#line 786
is_trivially_move_constructible_v = __is_trivially_constructible(_Ty, _Ty); 
#line 788
template< class _To, class _From> 
#line 789
struct is_trivially_assignable : public bool_constant< __is_trivially_assignable(_To, _From)>  { 
#line 791
}; 
#line 793
template< class _To, class _From> constexpr bool 
#line 794
is_trivially_assignable_v = __is_trivially_assignable(_To, _From); 
#line 796
template< class _Ty> 
#line 797
struct is_trivially_copy_assignable : public bool_constant< __is_trivially_assignable(add_lvalue_reference_t< _Ty> , add_lvalue_reference_t< const _Ty> )>  { 
#line 800
}; 
#line 802
template< class _Ty> constexpr bool 
#line 803
is_trivially_copy_assignable_v = __is_trivially_assignable(add_lvalue_reference_t< _Ty> , add_lvalue_reference_t< const _Ty> ); 
#line 806
template< class _Ty> 
#line 807
struct is_trivially_move_assignable : public bool_constant< __is_trivially_assignable(add_lvalue_reference_t< _Ty> , _Ty)>  { 
#line 809
}; 
#line 811
template< class _Ty> constexpr bool 
#line 812
is_trivially_move_assignable_v = __is_trivially_assignable(add_lvalue_reference_t< _Ty> , _Ty); 
#line 814
template< class _Ty> 
#line 815
struct is_trivially_destructible : public bool_constant< __is_trivially_destructible(_Ty)>  { 
#line 817
}; 
#line 819
template< class _Ty> constexpr bool 
#line 820
is_trivially_destructible_v = __is_trivially_destructible(_Ty); 
#line 822
template< class _Ty, class ..._Args> 
#line 823
struct is_nothrow_constructible : public bool_constant< __is_nothrow_constructible(_Ty, _Args...)>  { 
#line 825
}; 
#line 827
template< class _Ty, class ..._Args> constexpr bool 
#line 828
is_nothrow_constructible_v = __is_nothrow_constructible(_Ty, _Args...); 
#line 830
template< class _Ty> 
#line 831
struct is_nothrow_copy_constructible : public bool_constant< __is_nothrow_constructible(_Ty, add_lvalue_reference_t< const _Ty> )>  { 
#line 835
}; 
#line 837
template< class _Ty> constexpr bool 
#line 838
is_nothrow_copy_constructible_v = __is_nothrow_constructible(_Ty, add_lvalue_reference_t< const _Ty> ); 
#line 841
template< class _Ty> 
#line 842
struct is_nothrow_default_constructible : public bool_constant< __is_nothrow_constructible(_Ty)>  { 
#line 844
}; 
#line 846
template< class _Ty> constexpr bool 
#line 847
is_nothrow_default_constructible_v = __is_nothrow_constructible(_Ty); 
#line 849
template< class _Ty> 
#line 850
struct is_nothrow_move_constructible : public bool_constant< __is_nothrow_constructible(_Ty, _Ty)>  { 
#line 852
}; 
#line 854
template< class _Ty> constexpr bool 
#line 855
is_nothrow_move_constructible_v = __is_nothrow_constructible(_Ty, _Ty); 
#line 857
template< class _To, class _From> 
#line 858
struct is_nothrow_assignable : public bool_constant< __is_nothrow_assignable(_To, _From)>  { 
#line 860
}; 
#line 862
template< class _To, class _From> constexpr bool 
#line 863
is_nothrow_assignable_v = __is_nothrow_assignable(_To, _From); 
#line 865
template< class _Ty> 
#line 866
struct is_nothrow_copy_assignable : public bool_constant< __is_nothrow_assignable(add_lvalue_reference_t< _Ty> , add_lvalue_reference_t< const _Ty> )>  { 
#line 869
}; 
#line 871
template< class _Ty> constexpr bool 
#line 872
is_nothrow_copy_assignable_v = __is_nothrow_assignable(add_lvalue_reference_t< _Ty> , add_lvalue_reference_t< const _Ty> ); 
#line 875
template< class _Ty> 
#line 876
struct is_nothrow_move_assignable : public bool_constant< __is_nothrow_assignable(add_lvalue_reference_t< _Ty> , _Ty)>  { 
#line 878
}; 
#line 880
template< class _Ty> constexpr bool 
#line 881
is_nothrow_move_assignable_v = __is_nothrow_assignable(add_lvalue_reference_t< _Ty> , _Ty); 
#line 883
template< class _Ty> 
#line 884
struct is_nothrow_destructible : public bool_constant< __is_nothrow_destructible(_Ty)>  { 
#line 887
}; 
#line 889
template< class _Ty> constexpr bool 
#line 890
is_nothrow_destructible_v = __is_nothrow_destructible(_Ty); 
#line 892
template< class _Ty, bool  = is_integral_v< _Ty> > 
#line 893
struct _Sign_base { 
#line 894
using _Uty = remove_cv_t< _Ty> ; 
#line 896
static constexpr bool _Signed = ((static_cast< _Uty>(-1)) < (static_cast< _Uty>(0))); 
#line 897
static constexpr bool _Unsigned = (!_Signed); 
#line 898
}; 
#line 900
template< class _Ty> 
#line 901
struct _Sign_base< _Ty, false>  { 
#line 903
static constexpr bool _Signed = is_floating_point_v< _Ty> ; 
#line 904
static constexpr bool _Unsigned = false; 
#line 905
}; 
#line 907
template< class _Ty> 
#line 908
struct is_signed : public bool_constant< _Sign_base< _Ty> ::_Signed>  { }; 
#line 910
template< class _Ty> constexpr bool 
#line 911
is_signed_v = (_Sign_base< _Ty> ::_Signed); 
#line 913
template< class _Ty> 
#line 914
struct is_unsigned : public bool_constant< _Sign_base< _Ty> ::_Unsigned>  { }; 
#line 916
template< class _Ty> constexpr bool 
#line 917
is_unsigned_v = (_Sign_base< _Ty> ::_Unsigned); 
#line 919
template< class _Ty> constexpr bool 
#line 920
_Is_nonbool_integral = is_integral_v< _Ty>  && (!is_same_v< remove_cv_t< _Ty> , bool> ); 
#line 922
template< bool > 
#line 923
struct _Select { 
#line 924
template< class _Ty1, class > using _Apply = _Ty1; 
#line 926
}; 
#line 929
template<> struct _Select< false>  { 
#line 930
template< class , class _Ty2> using _Apply = _Ty2; 
#line 932
}; 
#line 934
template< size_t > struct _Make_signed2; 
#line 938
template<> struct _Make_signed2< 1Ui64>  { 
#line 939
template< class > using _Apply = signed char; 
#line 941
}; 
#line 944
template<> struct _Make_signed2< 2Ui64>  { 
#line 945
template< class > using _Apply = short; 
#line 947
}; 
#line 950
template<> struct _Make_signed2< 4Ui64>  { 
#line 951
template< class _Ty> using _Apply = typename _Select< is_same_v< _Ty, long>  || is_same_v< _Ty, unsigned long> > ::template _Apply< long, int> ; 
#line 954
}; 
#line 957
template<> struct _Make_signed2< 8Ui64>  { 
#line 958
template< class > using _Apply = __int64; 
#line 960
}; 
#line 962
template< class _Ty> using _Make_signed1 = typename _Make_signed2< sizeof(_Ty)> ::template _Apply< _Ty> ; 
#line 966
template< class _Ty> 
#line 967
struct make_signed { 
#line 968
static_assert((_Is_nonbool_integral< _Ty>  || is_enum_v< _Ty> ), "make_signed<T> requires that T shall be a (possibly cv-qualified) integral type or enumeration but not a bool type.");
#line 972
using type = typename remove_cv< _Ty> ::template _Apply< _Make_signed1> ; 
#line 973
}; 
#line 975
template< class _Ty> using make_signed_t = typename make_signed< _Ty> ::type; 
#line 978
template< size_t > struct _Make_unsigned2; 
#line 982
template<> struct _Make_unsigned2< 1Ui64>  { 
#line 983
template< class > using _Apply = unsigned char; 
#line 985
}; 
#line 988
template<> struct _Make_unsigned2< 2Ui64>  { 
#line 989
template< class > using _Apply = unsigned short; 
#line 991
}; 
#line 994
template<> struct _Make_unsigned2< 4Ui64>  { 
#line 995
template< class _Ty> using _Apply = typename _Select< is_same_v< _Ty, long>  || is_same_v< _Ty, unsigned long> > ::template _Apply< unsigned long, unsigned> ; 
#line 999
}; 
#line 1002
template<> struct _Make_unsigned2< 8Ui64>  { 
#line 1003
template< class > using _Apply = unsigned __int64; 
#line 1005
}; 
#line 1007
template< class _Ty> using _Make_unsigned1 = typename _Make_unsigned2< sizeof(_Ty)> ::template _Apply< _Ty> ; 
#line 1011
template< class _Ty> 
#line 1012
struct make_unsigned { 
#line 1013
static_assert((_Is_nonbool_integral< _Ty>  || is_enum_v< _Ty> ), "make_unsigned<T> requires that T shall be a (possibly cv-qualified) integral type or enumeration but not a bool type.");
#line 1017
using type = typename remove_cv< _Ty> ::template _Apply< _Make_unsigned1> ; 
#line 1018
}; 
#line 1020
template< class _Ty> using make_unsigned_t = typename make_unsigned< _Ty> ::type; 
#line 1023
template < class _Rep >
constexpr make_unsigned_t < _Rep > _Unsigned_value ( _Rep _Val ) {
    return static_cast < make_unsigned_t < _Rep >> ( _Val );
}
#line 1028
template< class _Ty> 
#line 1029
struct alignment_of : public integral_constant< unsigned __int64, __alignof(_Ty)>  { }; 
#line 1031
template< class _Ty> constexpr size_t 
#line 1032
alignment_of_v = __alignof(_Ty); 
#line 1034
template< class _Ty, size_t _Len> 
#line 1035
union _Align_type { 
#line 1036
_Ty _Val; 
#line 1037
char _Pad[_Len]; 
#line 1038
}; 
#line 1040
template< size_t _Len, size_t _Align, class _Ty, bool _Ok> struct _Aligned; 
#line 1043
template< size_t _Len, size_t _Align, class _Ty> 
#line 1044
struct _Aligned< _Len, _Align, _Ty, true>  { 
#line 1045
using type = _Align_type< _Ty, _Len> ; 
#line 1046
}; 
#line 1048
template< size_t _Len, size_t _Align> 
#line 1049
struct _Aligned< _Len, _Align, double, false>  { 
#line 1056
static_assert((_Always_false< _Aligned> ), "You\'ve instantiated std::aligned_storage<Len, Align> with an extended alignment (in other words, Align > alignof(max_align_t))." " Before VS 2017 15.8, the member \"type\" would non-conformingly have an alignment of only alignof(max_align_t). VS 2017 15.8 wa" "s fixed to handle this correctly, but the fix inherently changes layout and breaks binary compatibility (*only* for uses of alig" "ned_storage with extended alignments). To suppress this error, please define either (1) _ENABLE_EXTENDED_ALIGNED_STORAGE to conf" "irm that you want a type with an extended alignment, or (2) _DISABLE_EXTENDED_ALIGNED_STORAGE to get the old non-conforming beha" "vior.");
#line 1066 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\type_traits"
using type = _Align_type< max_align_t, _Len> ; 
#line 1068 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\type_traits"
}; 
#line 1070
template< size_t _Len, size_t _Align> 
#line 1071
struct _Aligned< _Len, _Align, int, false>  { 
#line 1072
using _Next = double; 
#line 1073
static constexpr bool _Fits = (_Align <= __alignof(_Next)); 
#line 1074
using type = typename std::_Aligned< _Len, _Align, double, _Fits> ::type; 
#line 1075
}; 
#line 1077
template< size_t _Len, size_t _Align> 
#line 1078
struct _Aligned< _Len, _Align, short, false>  { 
#line 1079
using _Next = int; 
#line 1080
static constexpr bool _Fits = (_Align <= __alignof(_Next)); 
#line 1081
using type = typename std::_Aligned< _Len, _Align, int, _Fits> ::type; 
#line 1082
}; 
#line 1084
template< size_t _Len, size_t _Align> 
#line 1085
struct _Aligned< _Len, _Align, char, false>  { 
#line 1086
using _Next = short; 
#line 1087
static constexpr bool _Fits = (_Align <= __alignof(_Next)); 
#line 1088
using type = typename std::_Aligned< _Len, _Align, short, _Fits> ::type; 
#line 1089
}; 
#line 1092
template< size_t _Len, size_t _Align = 8Ui64> 
#line 1093
struct _Aligned_storage { 
#line 1094
using _Next = char; 
#line 1095
static constexpr bool _Fits = (_Align <= __alignof(_Next)); 
#line 1096
using type = typename _Aligned< _Len, _Align, char, _Fits> ::type; 
#line 1097
}; 
#line 1099
template< size_t _Len, size_t _Align = 8Ui64> using _Aligned_storage_t = typename _Aligned_storage< _Len, _Align> ::type; 
#line 1102
template< size_t _Len, size_t _Align = 8Ui64> 
#line 1103
struct aligned_storage { 
#line 1104
using type = _Aligned_storage_t< _Len, _Align> ; 
#line 1105
}; 
#line 1107
template< size_t _Len, size_t _Align = 8Ui64> using aligned_storage_t = _Aligned_storage_t< _Len, _Align> ; 
#line 1110
template< size_t ..._Vals> struct _Maximum; 
#line 1114
template<> struct _Maximum< >  : public integral_constant< unsigned __int64, 0Ui64>  { }; 
#line 1116
template< size_t _Val> 
#line 1117
struct _Maximum< _Val>  : public integral_constant< unsigned __int64, _Val>  { }; 
#line 1119
template< size_t _First, size_t _Second, size_t ..._Rest> 
#line 1120
struct _Maximum< _First, _Second, _Rest...>  : public std::_Maximum< (((_First) < _Second) ? _Second : _First), _Rest...> ::type { 
#line 1122
}; 
#line 1124
template< size_t _Len, class ..._Types> 
#line 1125
struct aligned_union { 
#line 1127
static constexpr size_t _Max_len = (_Maximum< _Len, sizeof(_Types)...> ::value); 
#line 1128
static constexpr size_t alignment_value = (_Maximum< __alignof(_Types)...> ::value); 
#line 1130
using type = _Aligned_storage_t< _Max_len, alignment_value> ; 
#line 1131
}; 
#line 1133
__pragma( warning(push)) __pragma( warning(disable : 4996)) 
#line 1134
template< size_t _Len, class ..._Types> using aligned_union_t = typename aligned_union< _Len, _Types...> ::type; 
#line 1136
__pragma( warning(pop)) 
#line 1138
template< class _Ty, bool  = is_enum_v< _Ty> > 
#line 1139
struct _Underlying_type { 
#line 1140
using type = __underlying_type(_Ty); 
#line 1141
}; 
#line 1143
template< class _Ty> 
#line 1144
struct _Underlying_type< _Ty, false>  { }; 
#line 1146
template< class _Ty> 
#line 1147
struct underlying_type : public _Underlying_type< _Ty>  { }; 
#line 1149
template< class _Ty> using underlying_type_t = typename _Underlying_type< _Ty> ::type; 
#line 1152
template< class _Ty> constexpr size_t 
#line 1153
rank_v = (0); 
#line 1155
template< class _Ty, size_t _Nx> constexpr size_t 
#line 1156
rank_v< _Ty [_Nx]>  = rank_v< _Ty>  + 1; 
#line 1158
template< class _Ty> constexpr size_t 
#line 1159
rank_v< _Ty []>  = rank_v< _Ty>  + 1; 
#line 1161
template< class _Ty> 
#line 1162
struct rank : public integral_constant< unsigned __int64, rank_v< _Ty> >  { }; 
#line 1164
template< class _Ty, unsigned _Ix = 0U> constexpr size_t 
#line 1165
extent_v = (0); 
#line 1167
template< class _Ty, size_t _Nx> constexpr size_t 
#line 1168
extent_v< _Ty [_Nx], 0>  = _Nx; 
#line 1170
template< class _Ty, unsigned _Ix, size_t _Nx> constexpr size_t 
#line 1171
extent_v< _Ty [_Nx], _Ix>  = extent_v< _Ty, _Ix - (1)> ; 
#line 1173
template< class _Ty, unsigned _Ix> constexpr size_t 
#line 1174
extent_v< _Ty [], _Ix>  = extent_v< _Ty, _Ix - (1)> ; 
#line 1176
template< class _Ty, unsigned _Ix = 0U> 
#line 1177
struct extent : public integral_constant< unsigned __int64, extent_v< _Ty, _Ix> >  { }; 
#line 1179
template< class _Base, class _Derived> 
#line 1180
struct is_base_of : public bool_constant< __is_base_of(_Base, _Derived)>  { 
#line 1182
}; 
#line 1184
template< class _Base, class _Derived> constexpr bool 
#line 1185
is_base_of_v = __is_base_of(_Base, _Derived); 
#line 1187
template< class _Ty> 
#line 1188
struct decay { 
#line 1189
using _Ty1 = remove_reference_t< _Ty> ; 
#line 1190
using _Ty2 = typename _Select< is_function_v< _Ty1> > ::template _Apply< add_pointer< _Ty1> , remove_cv< _Ty1> > ; 
#line 1191
using type = typename _Select< is_array_v< _Ty1> > ::template _Apply< add_pointer< remove_extent_t< _Ty1> > , _Ty2> ::type; 
#line 1192
}; 
#line 1194
template< class _Ty> using decay_t = typename decay< _Ty> ::type; 
#line 1197
template< class _Ty1, class _Ty2> using _Conditional_type = decltype(false ? std::declval< _Ty1> () : std::declval< _Ty2> ()); 
#line 1214 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\type_traits"
template< class _Ty1, class _Ty2, class  = void> 
#line 1215
struct _Decayed_cond_oper { }; 
#line 1218 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\type_traits"
template< class _Ty1, class _Ty2> 
#line 1219
struct _Decayed_cond_oper< _Ty1, _Ty2, void_t< _Conditional_type< _Ty1, _Ty2> > >  { 
#line 1220
using type = decay_t< _Conditional_type< _Ty1, _Ty2> > ; 
#line 1221
}; 
#line 1223
template< class ..._Ty> struct common_type; 
#line 1226
template< class ..._Ty> using common_type_t = typename common_type< _Ty...> ::type; 
#line 1230
template<> struct common_type< >  { }; 
#line 1232
template< class _Ty1> 
#line 1233
struct common_type< _Ty1>  : public std::common_type< _Ty1, _Ty1>  { }; 
#line 1235
template< class _Ty1, class _Ty2, class _Decayed1 = decay_t< _Ty1> , class _Decayed2 = decay_t< _Ty2> > 
#line 1236
struct _Common_type2 : public common_type< _Decayed1, _Decayed2>  { }; 
#line 1238
template< class _Ty1, class _Ty2> 
#line 1239
struct _Common_type2< _Ty1, _Ty2, _Ty1, _Ty2>  : public _Decayed_cond_oper< _Ty1, _Ty2>  { }; 
#line 1241
template< class _Ty1, class _Ty2> 
#line 1242
struct common_type< _Ty1, _Ty2>  : public _Common_type2< _Ty1, _Ty2>  { }; 
#line 1244
template< class _Void, class _Ty1, class _Ty2, class ..._Rest> 
#line 1245
struct _Common_type3 { }; 
#line 1247
template< class _Ty1, class _Ty2, class ..._Rest> 
#line 1248
struct _Common_type3< void_t< common_type_t< _Ty1, _Ty2> > , _Ty1, _Ty2, _Rest...>  : public common_type< common_type_t< _Ty1, _Ty2> , _Rest...>  { 
#line 1249
}; 
#line 1251
template< class _Ty1, class _Ty2, class ..._Rest> 
#line 1252
struct common_type< _Ty1, _Ty2, _Rest...>  : public _Common_type3< void, _Ty1, _Ty2, _Rest...>  { }; 
#line 1254
template< class _Ty> _Ty _Returns_exactly() noexcept; 
#line 1443 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\type_traits"
template< class _Type, template< class ...>  class _Template> constexpr bool 
#line 1444
_Is_specialization_v = false; 
#line 1445
template< template< class ...>  class _Template, class ..._Types> constexpr bool 
#line 1446
_Is_specialization_v< _Template< _Types...> , _Template>  = true; 
#line 1448
template< class _Type, template< class ...>  class _Template> 
#line 1449
struct _Is_specialization : public bool_constant< _Is_specialization_v< _Type, _Template> >  { }; 
#line 1451
template< class _Ty> 
#line 1452
[[nodiscard]] constexpr _Ty &&forward(remove_reference_t< _Ty>  &_Arg) noexcept { 
#line 1453
return static_cast< _Ty &&>(_Arg); 
#line 1454
} 
#line 1456
template< class _Ty> 
#line 1457
[[nodiscard]] constexpr _Ty &&forward(remove_reference_t< _Ty>  &&_Arg) noexcept { 
#line 1458
static_assert((!is_lvalue_reference_v< _Ty> ), "bad forward call");
#line 1459
return static_cast< _Ty &&>(_Arg); 
#line 1460
} 
#line 1462
template< class _Ty> 
#line 1463
[[nodiscard]] constexpr remove_reference_t< _Ty>  &&move(_Ty &&_Arg) noexcept { 
#line 1464
return static_cast< remove_reference_t< _Ty>  &&>(_Arg); 
#line 1465
} 
#line 1467
template < class _Ty >
[ [ nodiscard ] ] constexpr
    conditional_t < ! is_nothrow_move_constructible_v < _Ty > && is_copy_constructible_v < _Ty >, const _Ty &, _Ty && >
    move_if_noexcept ( _Ty & _Arg ) noexcept {
    return :: std :: move ( _Arg );
}
#line 1474
template < class _Ty >
class reference_wrapper;
#line 1481
enum class _Invoker_strategy { 
#line 1482
_Functor, 
#line 1483
_Pmf_object, 
#line 1484
_Pmf_refwrap, 
#line 1485
_Pmf_pointer, 
#line 1486
_Pmd_object, 
#line 1487
_Pmd_refwrap, 
#line 1488
_Pmd_pointer
#line 1489
}; 
#line 1491
struct _Invoker_functor { 
#line 1492
static constexpr _Invoker_strategy _Strategy = _Invoker_strategy::_Functor; 
#line 1494
template < class _Callable, class ... _Types >
    static constexpr auto _Call ( _Callable && _Obj, _Types && ... _Args ) noexcept (
        noexcept ( static_cast < _Callable && > ( _Obj ) ( static_cast < _Types && > ( _Args ) ... ) ) )
        -> decltype ( static_cast < _Callable && > ( _Obj ) ( static_cast < _Types && > ( _Args ) ... ) ) {
        return static_cast < _Callable && > ( _Obj ) ( static_cast < _Types && > ( _Args ) ... );
    }
#line 1500
}; 
#line 1502
struct _Invoker_pmf_object { 
#line 1503
static constexpr _Invoker_strategy _Strategy = _Invoker_strategy::_Pmf_object; 
#line 1505
template < class _Decayed, class _Ty1, class ... _Types2 >
    static constexpr auto _Call ( _Decayed _Pmf, _Ty1 && _Arg1, _Types2 && ... _Args2 ) noexcept (
        noexcept ( ( static_cast < _Ty1 && > ( _Arg1 ) .* _Pmf ) ( static_cast < _Types2 && > ( _Args2 ) ... ) ) )
        -> decltype ( ( static_cast < _Ty1 && > ( _Arg1 ) .* _Pmf ) ( static_cast < _Types2 && > ( _Args2 ) ... ) ) {
        return ( static_cast < _Ty1 && > ( _Arg1 ) .* _Pmf ) ( static_cast < _Types2 && > ( _Args2 ) ... );
    }
#line 1511
}; 
#line 1513
struct _Invoker_pmf_refwrap { 
#line 1514
static constexpr _Invoker_strategy _Strategy = _Invoker_strategy::_Pmf_refwrap; 
#line 1516
template < class _Decayed, class _Refwrap, class ... _Types2 >
    static constexpr auto _Call ( _Decayed _Pmf, _Refwrap _Rw, _Types2 && ... _Args2 ) noexcept (
        noexcept ( ( _Rw . get ( ) .* _Pmf ) ( static_cast < _Types2 && > ( _Args2 ) ... ) ) )
        -> decltype ( ( _Rw . get ( ) .* _Pmf ) ( static_cast < _Types2 && > ( _Args2 ) ... ) ) {
        return ( _Rw . get ( ) .* _Pmf ) ( static_cast < _Types2 && > ( _Args2 ) ... );
    }
#line 1522
}; 
#line 1524
struct _Invoker_pmf_pointer { 
#line 1525
static constexpr _Invoker_strategy _Strategy = _Invoker_strategy::_Pmf_pointer; 
#line 1527
template < class _Decayed, class _Ty1, class ... _Types2 >
    static constexpr auto _Call ( _Decayed _Pmf, _Ty1 && _Arg1, _Types2 && ... _Args2 ) noexcept (
        noexcept ( ( ( * static_cast < _Ty1 && > ( _Arg1 ) ) .* _Pmf ) ( static_cast < _Types2 && > ( _Args2 ) ... ) ) )
        -> decltype ( ( ( * static_cast < _Ty1 && > ( _Arg1 ) ) .* _Pmf ) ( static_cast < _Types2 && > ( _Args2 ) ... ) ) {
        return ( ( * static_cast < _Ty1 && > ( _Arg1 ) ) .* _Pmf ) ( static_cast < _Types2 && > ( _Args2 ) ... );
    }
#line 1533
}; 
#line 1535
struct _Invoker_pmd_object { 
#line 1536
static constexpr _Invoker_strategy _Strategy = _Invoker_strategy::_Pmd_object; 
#line 1538
template < class _Decayed, class _Ty1 >
    static constexpr auto _Call ( _Decayed _Pmd, _Ty1 && _Arg1 ) noexcept -> decltype ( static_cast < _Ty1 && > ( _Arg1 ) .* _Pmd ) {
        return static_cast < _Ty1 && > ( _Arg1 ) .* _Pmd;
    }
#line 1542
}; 
#line 1544
struct _Invoker_pmd_refwrap { 
#line 1545
static constexpr _Invoker_strategy _Strategy = _Invoker_strategy::_Pmd_refwrap; 
#line 1547
template < class _Decayed, class _Refwrap >
    static constexpr auto _Call ( _Decayed _Pmd, _Refwrap _Rw ) noexcept -> decltype ( _Rw . get ( ) .* _Pmd ) {
        return _Rw . get ( ) .* _Pmd;
    }
#line 1551
}; 
#line 1553
struct _Invoker_pmd_pointer { 
#line 1554
static constexpr _Invoker_strategy _Strategy = _Invoker_strategy::_Pmd_pointer; 
#line 1556
template < class _Decayed, class _Ty1 >
    static constexpr auto _Call ( _Decayed _Pmd, _Ty1 && _Arg1 ) noexcept ( noexcept ( ( * static_cast < _Ty1 && > ( _Arg1 ) ) .* _Pmd ) )
        -> decltype ( ( * static_cast < _Ty1 && > ( _Arg1 ) ) .* _Pmd ) {
        return ( * static_cast < _Ty1 && > ( _Arg1 ) ) .* _Pmd;
    }
#line 1561
}; 
#line 1563
template< class _Callable, class _Ty1, class _Removed_cvref = _Remove_cvref_t< _Callable> , bool 
#line 1564
_Is_pmf = is_member_function_pointer_v< _Removed_cvref> , bool 
#line 1565
_Is_pmd = is_member_object_pointer_v< _Removed_cvref> > struct _Invoker1; 
#line 1568
template< class _Callable, class _Ty1, class _Removed_cvref> 
#line 1569
struct _Invoker1< _Callable, _Ty1, _Removed_cvref, true, false>  : public conditional_t< is_same_v< typename _Is_memfunptr< _Removed_cvref> ::_Class_type, _Remove_cvref_t< _Ty1> >  || is_base_of_v< typename _Is_memfunptr< _Removed_cvref> ::_Class_type, _Remove_cvref_t< _Ty1> > , _Invoker_pmf_object, conditional_t< _Is_specialization_v< _Remove_cvref_t< _Ty1> , reference_wrapper> , _Invoker_pmf_refwrap, _Invoker_pmf_pointer> >  { 
#line 1574
}; 
#line 1576
template< class _Callable, class _Ty1, class _Removed_cvref> 
#line 1577
struct _Invoker1< _Callable, _Ty1, _Removed_cvref, false, true>  : public conditional_t< is_same_v< typename _Is_member_object_pointer< _Removed_cvref> ::_Class_type, _Remove_cvref_t< _Ty1> >  || is_base_of_v< typename _Is_member_object_pointer< _Removed_cvref> ::_Class_type, _Remove_cvref_t< _Ty1> > , _Invoker_pmd_object, conditional_t< _Is_specialization_v< _Remove_cvref_t< _Ty1> , reference_wrapper> , _Invoker_pmd_refwrap, _Invoker_pmd_pointer> >  { 
#line 1583
}; 
#line 1585
template< class _Callable, class _Ty1, class _Removed_cvref> 
#line 1586
struct _Invoker1< _Callable, _Ty1, _Removed_cvref, false, false>  : public _Invoker_functor { }; 
#line 1588
template < class _Callable >
inline auto invoke ( _Callable && _Obj ) noexcept ( noexcept ( static_cast < _Callable && > ( _Obj ) ( ) ) )
    -> decltype ( static_cast < _Callable && > ( _Obj ) ( ) ) {
    return static_cast < _Callable && > ( _Obj ) ( );
}
#line 1594
template < class _Callable, class _Ty1, class ... _Types2 >
inline auto invoke ( _Callable && _Obj, _Ty1 && _Arg1, _Types2 && ... _Args2 ) noexcept (
    noexcept ( _Invoker1 < _Callable, _Ty1 > :: _Call (
        static_cast < _Callable && > ( _Obj ), static_cast < _Ty1 && > ( _Arg1 ), static_cast < _Types2 && > ( _Args2 ) ... ) ) )
    -> decltype ( _Invoker1 < _Callable, _Ty1 > :: _Call (
        static_cast < _Callable && > ( _Obj ), static_cast < _Ty1 && > ( _Arg1 ), static_cast < _Types2 && > ( _Args2 ) ... ) ) {
    if constexpr ( _Invoker1 < _Callable, _Ty1 > :: _Strategy == _Invoker_strategy :: _Functor ) {
        return static_cast < _Callable && > ( _Obj ) ( static_cast < _Ty1 && > ( _Arg1 ), static_cast < _Types2 && > ( _Args2 ) ... );
    } else if constexpr ( _Invoker1 < _Callable, _Ty1 > :: _Strategy == _Invoker_strategy :: _Pmf_object ) {
        return ( static_cast < _Ty1 && > ( _Arg1 ) .* _Obj ) ( static_cast < _Types2 && > ( _Args2 ) ... );
    } else if constexpr ( _Invoker1 < _Callable, _Ty1 > :: _Strategy == _Invoker_strategy :: _Pmf_refwrap ) {
        return ( _Arg1 . get ( ) .* _Obj ) ( static_cast < _Types2 && > ( _Args2 ) ... );
    } else if constexpr ( _Invoker1 < _Callable, _Ty1 > :: _Strategy == _Invoker_strategy :: _Pmf_pointer ) {
        return ( ( * static_cast < _Ty1 && > ( _Arg1 ) ) .* _Obj ) ( static_cast < _Types2 && > ( _Args2 ) ... );
    } else if constexpr ( _Invoker1 < _Callable, _Ty1 > :: _Strategy == _Invoker_strategy :: _Pmd_object ) {
        return static_cast < _Ty1 && > ( _Arg1 ) .* _Obj;
    } else if constexpr ( _Invoker1 < _Callable, _Ty1 > :: _Strategy == _Invoker_strategy :: _Pmd_refwrap ) {
        return _Arg1 . get ( ) .* _Obj;
    } else {
        ;
        return ( * static_cast < _Ty1 && > ( _Arg1 ) ) .* _Obj;
    }
}
#line 1618
#pragma warning(push)
#pragma warning(disable : 4242)
#pragma warning(disable : 4244)
#pragma warning(disable : 4365)
#line 1623
template< class _From, class _To, bool  = is_convertible_v< _From, _To> , bool  = is_void_v< _To> > constexpr bool 
#line 1624
_Is_nothrow_convertible_v = noexcept(_Fake_copy_init< _To> (std::declval< _From> ())); 
#line 1626
#pragma warning(pop)
#line 1628
template< class _From, class _To, bool _IsVoid> constexpr bool 
#line 1629
_Is_nothrow_convertible_v< _From, _To, false, _IsVoid>  = false; 
#line 1631
template< class _From, class _To> constexpr bool 
#line 1632
_Is_nothrow_convertible_v< _From, _To, true, true>  = true; 
#line 1634
template< class _From, class _To> 
#line 1635
struct _Is_nothrow_convertible : public bool_constant< _Is_nothrow_convertible_v< _From, _To, is_convertible_v< _From, _To> , is_void_v< _To> > >  { 
#line 1637
}; 
#line 1647 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\type_traits"
template< class _From, class _To, class  = void> 
#line 1648
struct _Invoke_convertible : public false_type { }; 
#line 1650
template< class _From, class _To> 
#line 1651
struct _Invoke_convertible< _From, _To, void_t< decltype(std::_Fake_copy_init< _To> (std::_Returns_exactly< _From> ()))> >  : public true_type { 
#line 1652
}; 
#line 1654
template< class _From, class _To> 
#line 1655
struct _Invoke_nothrow_convertible : public bool_constant< noexcept(std::_Fake_copy_init< _To> (std::_Returns_exactly< _From> ()))>  { 
#line 1656
}; 
#line 1658
template< class _Result, bool _Nothrow> 
#line 1659
struct _Invoke_traits_common { 
#line 1660
using type = _Result; 
#line 1661
using _Is_invocable = true_type; 
#line 1662
using _Is_nothrow_invocable = bool_constant< _Nothrow> ; 
#line 1663
template< class _Rx> using _Is_invocable_r = bool_constant< disjunction_v< is_void< _Rx> , _Invoke_convertible< type, _Rx> > > ; 
#line 1665
template< class _Rx> using _Is_nothrow_invocable_r = bool_constant< conjunction_v< _Is_nothrow_invocable, disjunction< is_void< _Rx> , conjunction< _Invoke_convertible< type, _Rx> , _Invoke_nothrow_convertible< type, _Rx> > > > > ; 
#line 1669
}; 
#line 1671
template< class _Void, class _Callable> 
#line 1672
struct _Invoke_traits_zero { 
#line 1674
using _Is_invocable = false_type; 
#line 1675
using _Is_nothrow_invocable = false_type; 
#line 1676
template< class _Rx> using _Is_invocable_r = false_type; 
#line 1678
template< class _Rx> using _Is_nothrow_invocable_r = false_type; 
#line 1680
}; 
#line 1682
template< class _Callable> using _Decltype_invoke_zero = decltype(std::declval< _Callable> ()()); 
#line 1685
template< class _Callable> 
#line 1686
struct _Invoke_traits_zero< void_t< _Decltype_invoke_zero< _Callable> > , _Callable>  : public _Invoke_traits_common< _Decltype_invoke_zero< _Callable> , noexcept(std::declval< _Callable> ()())>  { 
#line 1687
}; 
#line 1689
template< class _Void, class ..._Types> 
#line 1690
struct _Invoke_traits_nonzero { 
#line 1692
using _Is_invocable = false_type; 
#line 1693
using _Is_nothrow_invocable = false_type; 
#line 1694
template< class _Rx> using _Is_invocable_r = false_type; 
#line 1696
template< class _Rx> using _Is_nothrow_invocable_r = false_type; 
#line 1698
}; 
#line 1700
template< class _Callable, class _Ty1, class ..._Types2> using _Decltype_invoke_nonzero = decltype(_Invoker1< _Callable, _Ty1> ::_Call(std::declval< _Callable> (), std::declval< _Ty1> (), std::declval< _Types2> ()...)); 
#line 1704
template< class _Callable, class _Ty1, class ..._Types2> 
#line 1705
struct _Invoke_traits_nonzero< void_t< _Decltype_invoke_nonzero< _Callable, _Ty1, _Types2...> > , _Callable, _Ty1, _Types2...>  : public _Invoke_traits_common< _Decltype_invoke_nonzero< _Callable, _Ty1, _Types2...> , noexcept(_Invoker1< _Callable, _Ty1> ::_Call(std::declval< _Callable> (), std::declval< _Ty1> (), std::declval< _Types2> ()...))>  { 
#line 1708
}; 
#line 1710
template< class _Callable, class ..._Args> using _Select_invoke_traits = conditional_t< sizeof...(_Args) == (0), _Invoke_traits_zero< void, _Callable> , _Invoke_traits_nonzero< void, _Callable, _Args...> > ; 
#line 1715
template< class _Fty> 
#line 1716
struct result_of { 
#line 1717
static_assert((_Always_false< _Fty> ), "result_of<CallableType> is invalid; use result_of<CallableType(zero or more argument types)> instead.");
#line 1719
}; 
#line 1727
template< class _Callable, class ..._Args> struct result_of< _Callable __cdecl (_Args ...)>  : public _Select_invoke_traits< _Callable, _Args...>  { }; template< class _Callable, class ..._Args> struct result_of< _Callable __vectorcall (_Args ...)>  : public _Select_invoke_traits< _Callable, _Args...>  { }; 
#line 1730
__pragma( warning(push)) __pragma( warning(disable : 4996)) 
#line 1731
template< class _Ty> using result_of_t = typename result_of< _Ty> ::type; 
#line 1733
__pragma( warning(pop)) 
#line 1736 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\type_traits"
template< class _Callable, class ..._Args> using _Invoke_result_t = typename _Select_invoke_traits< _Callable, _Args...> ::type; 
#line 1739
template< class _Rx, class _Callable, class ..._Args> using _Is_invocable_r_ = typename conditional< sizeof...(_Args) == (0), _Invoke_traits_zero< void, _Callable> , _Invoke_traits_nonzero< void, _Callable, _Args...> > ::type::template _Is_invocable_r< _Rx> ; 
#line 1742
template< class _Rx, class _Callable, class ..._Args> 
#line 1743
struct _Is_invocable_r : public _Is_invocable_r_< _Rx, _Callable, _Args...>  { 
#line 1745
}; 
#line 1818 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\type_traits"
template< class _Ty> 
#line 1819
struct _Function_args { }; 
#line 1827
template< class _Ret, class ..._Types> struct _Function_args< _Ret __cdecl (_Types ...)>  : public _Arg_types< _Types...>  { using result_type = _Ret; }; template< class _Ret, class ..._Types> struct _Function_args< _Ret __vectorcall (_Types ...)>  : public _Arg_types< _Types...>  { using result_type = _Ret; }; template< class _Ret, class ..._Types> struct _Function_args< _Ret __cdecl (_Types ...) const>  : public _Arg_types< _Types...>  { using result_type = _Ret; }; template< class _Ret, class ..._Types> struct _Function_args< _Ret __vectorcall (_Types ...) const>  : public _Arg_types< _Types...>  { using result_type = _Ret; }; template< class _Ret, class ..._Types> struct _Function_args< _Ret __cdecl (_Types ...) volatile>  : public _Arg_types< _Types...>  { using result_type = _Ret; }; template< class _Ret, class ..._Types> struct _Function_args< _Ret __vectorcall (_Types ...) volatile>  : public _Arg_types< _Types...>  { using result_type = _Ret; }; template< class _Ret, class ..._Types> struct _Function_args< _Ret __cdecl (_Types ...) const volatile>  : public _Arg_types< _Types...>  { using result_type = _Ret; }; template< class _Ret, class ..._Types> struct _Function_args< _Ret __vectorcall (_Types ...) const volatile>  : public _Arg_types< _Types...>  { using result_type = _Ret; }; template< class _Ret, class ..._Types> struct _Function_args< _Ret __cdecl (_Types ...) &>  : public _Arg_types< _Types...>  { using result_type = _Ret; }; template< class _Ret, class ..._Types> struct _Function_args< _Ret __vectorcall (_Types ...) &>  : public _Arg_types< _Types...>  { using result_type = _Ret; }; template< class _Ret, class ..._Types> struct _Function_args< _Ret __cdecl (_Types ...) const &>  : public _Arg_types< _Types...>  { using result_type = _Ret; }; template< class _Ret, class ..._Types> struct _Function_args< _Ret __vectorcall (_Types ...) const &>  : public _Arg_types< _Types...>  { using result_type = _Ret; }; template< class _Ret, class ..._Types> struct _Function_args< _Ret __cdecl (_Types ...) volatile &>  : public _Arg_types< _Types...>  { using result_type = _Ret; }; template< class _Ret, class ..._Types> struct _Function_args< _Ret __vectorcall (_Types ...) volatile &>  : public _Arg_types< _Types...>  { using result_type = _Ret; }; template< class _Ret, class ..._Types> struct _Function_args< _Ret __cdecl (_Types ...) const volatile &>  : public _Arg_types< _Types...>  { using result_type = _Ret; }; template< class _Ret, class ..._Types> struct _Function_args< _Ret __vectorcall (_Types ...) const volatile &>  : public _Arg_types< _Types...>  { using result_type = _Ret; }; template< class _Ret, class ..._Types> struct _Function_args< _Ret __cdecl (_Types ...) &&>  : public _Arg_types< _Types...>  { using result_type = _Ret; }; template< class _Ret, class ..._Types> struct _Function_args< _Ret __vectorcall (_Types ...) &&>  : public _Arg_types< _Types...>  { using result_type = _Ret; }; template< class _Ret, class ..._Types> struct _Function_args< _Ret __cdecl (_Types ...) const &&>  : public _Arg_types< _Types...>  { using result_type = _Ret; }; template< class _Ret, class ..._Types> struct _Function_args< _Ret __vectorcall (_Types ...) const &&>  : public _Arg_types< _Types...>  { using result_type = _Ret; }; template< class _Ret, class ..._Types> struct _Function_args< _Ret __cdecl (_Types ...) volatile &&>  : public _Arg_types< _Types...>  { using result_type = _Ret; }; template< class _Ret, class ..._Types> struct _Function_args< _Ret __vectorcall (_Types ...) volatile &&>  : public _Arg_types< _Types...>  { using result_type = _Ret; }; template< class _Ret, class ..._Types> struct _Function_args< _Ret __cdecl (_Types ...) const volatile &&>  : public _Arg_types< _Types...>  { using result_type = _Ret; }; template< class _Ret, class ..._Types> struct _Function_args< _Ret __vectorcall (_Types ...) const volatile &&>  : public _Arg_types< _Types...>  { using result_type = _Ret; }; 
#line 1836
template< class _Ret, class ..._Types> struct _Function_args< _Ret (_Types ..., ...)>  { using result_type = _Ret; }; template< class _Ret, class ..._Types> struct _Function_args< _Ret (_Types ..., ...) const>  { using result_type = _Ret; }; template< class _Ret, class ..._Types> struct _Function_args< _Ret (_Types ..., ...) volatile>  { using result_type = _Ret; }; template< class _Ret, class ..._Types> struct _Function_args< _Ret (_Types ..., ...) const volatile>  { using result_type = _Ret; }; template< class _Ret, class ..._Types> struct _Function_args< _Ret (_Types ..., ...) &>  { using result_type = _Ret; }; template< class _Ret, class ..._Types> struct _Function_args< _Ret (_Types ..., ...) const &>  { using result_type = _Ret; }; template< class _Ret, class ..._Types> struct _Function_args< _Ret (_Types ..., ...) volatile &>  { using result_type = _Ret; }; template< class _Ret, class ..._Types> struct _Function_args< _Ret (_Types ..., ...) const volatile &>  { using result_type = _Ret; }; template< class _Ret, class ..._Types> struct _Function_args< _Ret (_Types ..., ...) &&>  { using result_type = _Ret; }; template< class _Ret, class ..._Types> struct _Function_args< _Ret (_Types ..., ...) const &&>  { using result_type = _Ret; }; template< class _Ret, class ..._Types> struct _Function_args< _Ret (_Types ..., ...) volatile &&>  { using result_type = _Ret; }; template< class _Ret, class ..._Types> struct _Function_args< _Ret (_Types ..., ...) const volatile &&>  { using result_type = _Ret; }; 
#line 1839
template< class _Ty, class  = void> 
#line 1840
struct _Weak_result_type { }; 
#line 1842
__pragma( warning(push)) __pragma( warning(disable : 4996)) 
#line 1843
template< class _Ty> 
#line 1844
struct _Weak_result_type< _Ty, void_t< typename _Ty::result_type> >  { 
#line 1845
using result_type = typename _Ty::result_type; 
#line 1846
}; 
#line 1847
__pragma( warning(pop)) 
#line 1849
template< class _Ty, class  = void> 
#line 1850
struct _Weak_argument_type : public _Weak_result_type< _Ty>  { }; 
#line 1852
__pragma( warning(push)) __pragma( warning(disable : 4996)) 
#line 1853
template< class _Ty> 
#line 1854
struct _Weak_argument_type< _Ty, void_t< typename _Ty::argument_type> >  : public _Weak_result_type< _Ty>  { 
#line 1856
using argument_type = typename _Ty::argument_type; 
#line 1857
}; 
#line 1858
__pragma( warning(pop)) 
#line 1860
template< class _Ty, class  = void> 
#line 1861
struct _Weak_binary_args : public _Weak_argument_type< _Ty>  { }; 
#line 1863
__pragma( warning(push)) __pragma( warning(disable : 4996)) 
#line 1864
template< class _Ty> 
#line 1865
struct _Weak_binary_args< _Ty, void_t< typename _Ty::first_argument_type, typename _Ty::second_argument_type> >  : public _Weak_argument_type< _Ty>  { 
#line 1868
using first_argument_type = typename _Ty::first_argument_type; 
#line 1869
using second_argument_type = typename _Ty::second_argument_type; 
#line 1870
}; 
#line 1871
__pragma( warning(pop)) 
#line 1873
template< class _Ty> using _Weak_types = conditional_t< is_function_v< remove_pointer_t< _Ty> > , _Function_args< remove_pointer_t< _Ty> > , conditional_t< is_member_function_pointer_v< _Ty> , _Is_memfunptr< remove_cv_t< _Ty> > , _Weak_binary_args< _Ty> > > ; 
#line 1877
template< class _Ty> void _Refwrap_ctor_fun(_Identity_t< _Ty &> ) noexcept; 
#line 1879
template < class _Ty >
void _Refwrap_ctor_fun ( _Identity_t < _Ty && > ) = delete;
#line 1882
template< class _Ty, class _Uty, class  = void> 
#line 1883
struct _Refwrap_has_ctor_from : public false_type { }; 
#line 1885
template< class _Ty, class _Uty> 
#line 1886
struct _Refwrap_has_ctor_from< _Ty, _Uty, void_t< decltype(std::_Refwrap_ctor_fun< _Ty> (std::declval< _Uty> ()))> >  : public true_type { 
#line 1887
}; 
#line 1889
template < class _Ty >
class reference_wrapper

    : public _Weak_types < _Ty >

{
public :
    static_assert ( is_object_v < _Ty > || is_function_v < _Ty >,
        "reference_wrapper<T> requires T to be an object type or a function type." );

    using type = _Ty;

    template < class _Uty, enable_if_t < conjunction_v < negation < is_same < _Remove_cvref_t < _Uty >, reference_wrapper >>,
                                          _Refwrap_has_ctor_from < _Ty, _Uty >>,
                              int > = 0 >
    inline reference_wrapper ( _Uty && _Val ) noexcept (
        noexcept ( :: std :: _Refwrap_ctor_fun < _Ty > ( :: std :: declval < _Uty > ( ) ) ) ) {
        _Ty & _Ref = static_cast < _Uty && > ( _Val );
        _Ptr = :: std :: addressof ( _Ref );
    }

    inline operator _Ty & ( ) const noexcept {
        return * _Ptr;
    }

    [ [ nodiscard ] ] inline _Ty & get ( ) const noexcept {
        return * _Ptr;
    }

private :
    _Ty * _Ptr { };

public :
    template < class ... _Types >
    inline auto operator ( ) ( _Types && ... _Args ) const
        noexcept ( noexcept ( :: std :: invoke ( * _Ptr, static_cast < _Types && > ( _Args ) ... ) ) )
            -> decltype ( :: std :: invoke ( * _Ptr, static_cast < _Types && > ( _Args ) ... ) ) {
        return :: std :: invoke ( * _Ptr, static_cast < _Types && > ( _Args ) ... );
    }
};
#line 1935 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\type_traits"
template < class _Ty >
[ [ nodiscard ] ] inline reference_wrapper < _Ty > ref ( _Ty & _Val ) noexcept {
    return reference_wrapper < _Ty > ( _Val );
}
#line 1940
template < class _Ty >
void ref ( const _Ty && ) = delete;
#line 1943
template < class _Ty >
[ [ nodiscard ] ] inline reference_wrapper < _Ty > ref ( reference_wrapper < _Ty > _Val ) noexcept {
    return _Val;
}
#line 1948
template < class _Ty >
[ [ nodiscard ] ] inline reference_wrapper < const _Ty > cref ( const _Ty & _Val ) noexcept {
    return reference_wrapper < const _Ty > ( _Val );
}
#line 1953
template < class _Ty >
void cref ( const _Ty && ) = delete;
#line 1956
template < class _Ty >
[ [ nodiscard ] ] inline reference_wrapper < const _Ty > cref ( reference_wrapper < _Ty > _Val ) noexcept {
    return _Val;
}
#line 1981 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\type_traits"
template< class _Ty> struct _Is_swappable; 
#line 1984
template< class _Ty> struct _Is_nothrow_swappable; 
#line 1990 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\type_traits"
template < class _Ty, int _Enabled = 0 >

inline void swap ( _Ty &, _Ty & ) noexcept ( is_nothrow_move_constructible_v < _Ty > && is_nothrow_move_assignable_v < _Ty > );
#line 1994 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\type_traits"
template < class _Ty, size_t _Size, enable_if_t < _Is_swappable < _Ty > :: value, int > = 0 >
inline void swap ( _Ty ( & ) [ _Size ], _Ty ( & ) [ _Size ] ) noexcept ( _Is_nothrow_swappable < _Ty > :: value );
#line 1997
template< class _Ty1, class _Ty2, class  = void> 
#line 1998
struct _Swappable_with_helper : public false_type { }; 
#line 2000
template< class _Ty1, class _Ty2> 
#line 2001
struct _Swappable_with_helper< _Ty1, _Ty2, void_t< decltype(swap(std::declval< _Ty1> (), std::declval< _Ty2> ()))> >  : public true_type { 
#line 2002
}; 
#line 2004
template< class _Ty1, class _Ty2> 
#line 2005
struct _Is_swappable_with : public bool_constant< conjunction_v< _Swappable_with_helper< _Ty1, _Ty2> , _Swappable_with_helper< _Ty2, _Ty1> > >  { 
#line 2008
}; 
#line 2010
template< class _Ty> 
#line 2011
struct _Is_swappable : public _Is_swappable_with< add_lvalue_reference_t< _Ty> , add_lvalue_reference_t< _Ty> > ::type { 
#line 2013
}; 
#line 2015
template< class _Ty1, class _Ty2> 
#line 2016
struct _Swap_cannot_throw : public bool_constant< noexcept(swap(std::declval< _Ty1> (), std::declval< _Ty2> ())) && noexcept(swap(std::declval< _Ty2> (), std::declval< _Ty1> ()))>  { 
#line 2020
}; 
#line 2022
template< class _Ty1, class _Ty2> 
#line 2023
struct _Is_nothrow_swappable_with : public bool_constant< conjunction_v< _Is_swappable_with< _Ty1, _Ty2> , _Swap_cannot_throw< _Ty1, _Ty2> > >  { 
#line 2027
}; 
#line 2029
template< class _Ty> 
#line 2030
struct _Is_nothrow_swappable : public _Is_nothrow_swappable_with< add_lvalue_reference_t< _Ty> , add_lvalue_reference_t< _Ty> > ::type { 
#line 2033
}; 
#line 2070 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\type_traits"
namespace _Has_ADL_swap_detail { 
#line 2074 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\type_traits"
void swap(); 
#line 2077 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\type_traits"
template< class , class  = void> 
#line 2078
struct _Has_ADL_swap : public false_type { }; 
#line 2079
template< class _Ty> 
#line 2080
struct _Has_ADL_swap< _Ty, void_t< decltype(swap(std::declval< _Ty &> (), std::declval< _Ty &> ()))> >  : public true_type { }; 
#line 2081
}
#line 2082
using _Has_ADL_swap_detail::_Has_ADL_swap;
#line 2084
template< class _Ty> constexpr bool 
#line 2085
_Is_trivially_swappable_v = conjunction_v< is_trivially_destructible< _Ty> , is_trivially_move_constructible< _Ty> , is_trivially_move_assignable< _Ty> , negation< _Has_ADL_swap_detail::_Has_ADL_swap< _Ty> > > ; 
#line 2093
template< class _Ty> 
#line 2094
struct _Is_trivially_swappable : public bool_constant< _Is_trivially_swappable_v< _Ty> >  { 
#line 2096
}; 
#line 2162
template < class _Bitmask >
[ [ nodiscard ] ] constexpr bool _Bitmask_includes_any ( _Bitmask _Left, _Bitmask _Elements ) noexcept {
    return ( _Left & _Elements ) != _Bitmask { };
}
#line 2167
template < class _Bitmask >
[ [ nodiscard ] ] constexpr bool _Bitmask_includes_all ( _Bitmask _Left, _Bitmask _Elements ) noexcept {
    return ( _Left & _Elements ) == _Elements;
}
#line 2175
constexpr size_t _FNV_offset_basis = 14695981039346656037Ui64; 
#line 2176
constexpr size_t _FNV_prime = 1099511628211Ui64; 
#line 2182 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\type_traits"
[[nodiscard]] inline size_t _Fnv1a_append_bytes(size_t _Val, const unsigned char *const _First, const size_t 
#line 2183
_Count) noexcept { 
#line 2184
for (size_t _Idx = (0); _Idx < _Count; ++_Idx) { 
#line 2185
_Val ^= (static_cast< size_t>(_First[_Idx])); 
#line 2186
_Val *= _FNV_prime; 
#line 2187
}  
#line 2189
return _Val; 
#line 2190
} 
#line 2192
template < class _Ty >
[ [ nodiscard ] ] size_t _Fnv1a_append_range ( const size_t _Val, const _Ty * const _First,
    const _Ty * const _Last ) noexcept {
    static_assert ( is_trivial_v < _Ty >, "Only trivial types can be directly hashed." );
    const auto _Firstb = reinterpret_cast < const unsigned char * > ( _First );
    const auto _Lastb = reinterpret_cast < const unsigned char * > ( _Last );
    return _Fnv1a_append_bytes ( _Val, _Firstb, static_cast < size_t > ( _Lastb - _Firstb ) );
}
#line 2201
template < class _Kty >
[ [ nodiscard ] ] size_t _Fnv1a_append_value (
    const size_t _Val, const _Kty & _Keyval ) noexcept {
    static_assert ( is_trivial_v < _Kty >, "Only trivial types can be directly hashed." );
    return _Fnv1a_append_bytes ( _Val, & reinterpret_cast < const unsigned char & > ( _Keyval ), sizeof ( _Kty ) );
}
#line 2208
template < class _Kty >
[ [ nodiscard ] ] size_t _Hash_representation ( const _Kty & _Keyval ) noexcept {
    return _Fnv1a_append_value ( _FNV_offset_basis, _Keyval );
}
#line 2213
template < class _Kty >
[ [ nodiscard ] ] size_t _Hash_array_representation (
    const _Kty * const _First, const size_t _Count ) noexcept {
    static_assert ( is_trivial_v < _Kty >, "Only trivial types can be directly hashed." );
    return _Fnv1a_append_bytes (
        _FNV_offset_basis, reinterpret_cast < const unsigned char * > ( _First ), _Count * sizeof ( _Kty ) );
}
#line 2221
template < class _Kty >
struct hash;
#line 2224
template < class _Kty, bool _Enabled >
struct _Conditionally_enabled_hash {
    using argument_type = _Kty;
    using result_type = size_t;

    [ [ nodiscard ] ] size_t operator ( ) ( const _Kty & _Keyval ) const
        noexcept ( noexcept ( hash < _Kty > :: _Do_hash ( _Keyval ) ) ) {
        return hash < _Kty > :: _Do_hash ( _Keyval );
    }
};
#line 2235
template< class _Kty> 
#line 2236
struct _Conditionally_enabled_hash< _Kty, false>  { 
#line 2237
_Conditionally_enabled_hash() = delete;
#line 2238
_Conditionally_enabled_hash(const _Conditionally_enabled_hash &) = delete;
#line 2239
_Conditionally_enabled_hash(_Conditionally_enabled_hash &&) = delete;
#line 2240
_Conditionally_enabled_hash &operator=(const _Conditionally_enabled_hash &) = delete;
#line 2241
_Conditionally_enabled_hash &operator=(_Conditionally_enabled_hash &&) = delete;
#line 2242
}; 
#line 2244
template < class _Kty >
struct hash : _Conditionally_enabled_hash < _Kty, ! is_const_v < _Kty > && ! is_volatile_v < _Kty >
                                                    && ( is_enum_v < _Kty > || is_integral_v < _Kty > || is_pointer_v < _Kty > ) > {

    static size_t _Do_hash ( const _Kty & _Keyval ) noexcept {
        return _Hash_representation ( _Keyval );
    }
};
#line 2254
#pragma pack(8)
template<> 
#line 2254
struct hash< float>  { 
#line 2255
using argument_type = float; 
#line 2256
using result_type = size_t; 
#line 2257
[[nodiscard]] size_t operator()(const float _Keyval) const noexcept { 
#line 2258
return _Hash_representation((_Keyval == (0.0F)) ? (0.0F) : _Keyval); 
#line 2259
} 
#line 2260
}; 
#pragma pack()
#line 2263
#pragma pack(8)
template<> 
#line 2263
struct hash< double>  { 
#line 2264
using argument_type = double; 
#line 2265
using result_type = size_t; 
#line 2266
[[nodiscard]] size_t operator()(const double _Keyval) const noexcept { 
#line 2267
return _Hash_representation((_Keyval == (0.0)) ? (0.0) : _Keyval); 
#line 2268
} 
#line 2269
}; 
#pragma pack()
#line 2272
#pragma pack(8)
template<> 
#line 2272
struct hash< long double>  { 
#line 2273
using argument_type = long double; 
#line 2274
using result_type = size_t; 
#line 2275
[[nodiscard]] size_t operator()(const long double _Keyval) const noexcept { 
#line 2276
return _Hash_representation((_Keyval == (0.0L)) ? (0.0L) : _Keyval); 
#line 2277
} 
#line 2278
}; 
#pragma pack()
#line 2281
#pragma pack(8)
template<> 
#line 2281
struct hash< std::nullptr_t>  { 
#line 2282
using argument_type = nullptr_t; 
#line 2283
using result_type = size_t; 
#line 2284
[[nodiscard]] size_t operator()(nullptr_t) const noexcept { 
#line 2285
void *_Null{((void *)0i64)}; 
#line 2286
return _Hash_representation(_Null); 
#line 2287
} 
#line 2288
}; 
#pragma pack()
template< class _Kty, class  = void> 
#pragma pack(8)
#line 2291
struct _Is_nothrow_hashable : public false_type { }; 
#pragma pack()
template< class _Kty> 
#pragma pack(8)
#line 2294
struct _Is_nothrow_hashable< _Kty, void_t< decltype(hash< _Kty> {}(std::declval< const _Kty &> ()))> >  : public bool_constant< noexcept(hash< _Kty> {}(std::declval< const _Kty &> ()))>  { 
#line 2295
}; 
#pragma pack()
#line 2299
template< class _FloatingType> struct _Floating_type_traits; 
#line 2303
#pragma pack(8)
template<> 
#line 2303
struct _Floating_type_traits< float>  { 
#line 2304
static constexpr int32_t _Mantissa_bits = 24; 
#line 2305
static constexpr int32_t _Exponent_bits = 8; 
#line 2306
static constexpr int32_t _Maximum_binary_exponent = 127; 
#line 2307
static constexpr int32_t _Minimum_binary_exponent = (-126); 
#line 2308
static constexpr int32_t _Exponent_bias = 127; 
#line 2309
static constexpr int32_t _Sign_shift = 31; 
#line 2310
static constexpr int32_t _Exponent_shift = 23; 
#line 2312
using _Uint_type = uint32_t; 
#line 2314
static constexpr uint32_t _Exponent_mask = 255U; 
#line 2315
static constexpr uint32_t _Normal_mantissa_mask = 16777215U; 
#line 2316
static constexpr uint32_t _Denormal_mantissa_mask = 8388607U; 
#line 2317
static constexpr uint32_t _Special_nan_mantissa_mask = 4194304U; 
#line 2318
static constexpr uint32_t _Shifted_sign_mask = 2147483648U; 
#line 2319
static constexpr uint32_t _Shifted_exponent_mask = 2139095040U; 
#line 2320
}; 
#pragma pack()
#line 2323
#pragma pack(8)
template<> 
#line 2323
struct _Floating_type_traits< double>  { 
#line 2324
static constexpr int32_t _Mantissa_bits = 53; 
#line 2325
static constexpr int32_t _Exponent_bits = 11; 
#line 2326
static constexpr int32_t _Maximum_binary_exponent = 1023; 
#line 2327
static constexpr int32_t _Minimum_binary_exponent = (-1022); 
#line 2328
static constexpr int32_t _Exponent_bias = 1023; 
#line 2329
static constexpr int32_t _Sign_shift = 63; 
#line 2330
static constexpr int32_t _Exponent_shift = 52; 
#line 2332
using _Uint_type = uint64_t; 
#line 2334
static constexpr uint64_t _Exponent_mask = (2047U); 
#line 2335
static constexpr uint64_t _Normal_mantissa_mask = 9007199254740991Ui64; 
#line 2336
static constexpr uint64_t _Denormal_mantissa_mask = 4503599627370495Ui64; 
#line 2337
static constexpr uint64_t _Special_nan_mantissa_mask = 2251799813685248Ui64; 
#line 2338
static constexpr uint64_t _Shifted_sign_mask = 9223372036854775808Ui64; 
#line 2339
static constexpr uint64_t _Shifted_exponent_mask = 9218868437227405312Ui64; 
#line 2340
}; 
#pragma pack()
#line 2343
#pragma pack(8)
template<> 
#line 2343
struct _Floating_type_traits< long double>  : public std::_Floating_type_traits< double>  { }; 
#pragma pack()
#line 2348
__pragma( warning(push)) __pragma( warning(disable : 4996)) 
#line 2349
namespace [[deprecated("warning STL4002: The non-Standard std::tr1 namespace and TR1-only machinery are deprecated and will be REMOVED. You can define _" "SILENCE_TR1_NAMESPACE_DEPRECATION_WARNING to suppress this warning.")]] tr1 { 
#line 2350
using std::add_const;
#line 2351
using std::add_cv;
#line 2352
using std::add_pointer;
#line 2353
using std::add_volatile;
#line 2354
using std::aligned_storage;
#line 2355
using std::alignment_of;
#line 2356
using std::conditional;
#line 2357
using std::decay;
#line 2358
using std::enable_if;
#line 2359
using std::extent;
#line 2360
using std::false_type;
#line 2361
using std::has_virtual_destructor;
#line 2362
using std::integral_constant;
#line 2363
using std::is_abstract;
#line 2364
using std::is_arithmetic;
#line 2365
using std::is_array;
#line 2366
using std::is_base_of;
#line 2367
using std::is_class;
#line 2368
using std::is_compound;
#line 2369
using std::is_const;
#line 2370
using std::is_convertible;
#line 2371
using std::is_empty;
#line 2372
using std::is_enum;
#line 2373
using std::is_floating_point;
#line 2374
using std::is_function;
#line 2375
using std::is_fundamental;
#line 2376
using std::is_integral;
#line 2377
using std::is_member_function_pointer;
#line 2378
using std::is_member_object_pointer;
#line 2379
using std::is_member_pointer;
#line 2380
using std::is_object;
#line 2381
using std::is_pod;
#line 2382
using std::is_pointer;
#line 2383
using std::is_polymorphic;
#line 2384
using std::is_reference;
#line 2385
using std::is_same;
#line 2386
using std::is_scalar;
#line 2387
using std::is_signed;
#line 2388
using std::is_union;
#line 2389
using std::is_unsigned;
#line 2390
using std::is_void;
#line 2391
using std::is_volatile;
#line 2392
using std::make_signed;
#line 2393
using std::make_unsigned;
#line 2394
using std::rank;
#line 2395
using std::remove_all_extents;
#line 2396
using std::remove_const;
#line 2397
using std::remove_cv;
#line 2398
using std::remove_extent;
#line 2399
using std::remove_pointer;
#line 2400
using std::remove_reference;
#line 2401
using std::remove_volatile;
#line 2402
using std::true_type;
#line 2403
using std::cref;
#line 2404
using std::ref;
#line 2405
using std::reference_wrapper;
#line 2407
using std::result_of;
#line 2409 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\type_traits"
using std::hash;
#line 2410
}
#line 2411
__pragma( warning(pop)) 
#line 2414 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\type_traits"
}
#line 2418
#pragma warning(pop)
#pragma pack ( pop )
#line 22 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\utility"
#pragma pack ( push, 8 )
#pragma warning(push, 3)
#pragma warning(disable : 4180 4412 4455 4494 4514 4574 4582 4583 4587 4588 4619 4623 4625 4626 4643 4648 4702 4793 4820 4988 5026 5027 5045 6294 4984 5053 )
#line 29
namespace std { 
#line 30
template < class _Ty, class _Pr >
[ [ nodiscard ] ] constexpr const _Ty & ( max ) ( const _Ty & _Left, const _Ty & _Right, _Pr _Pred ) noexcept (
    noexcept ( _Pred ( _Left, _Right ) ) ) {

    return _Pred ( _Left, _Right ) ? _Right : _Left;
}
#line 37
#pragma warning(push)
#pragma warning(disable : 28285)
template < class _Ty >
[ [ nodiscard ] ] constexpr const _Ty &
    ( max ) ( const _Ty & _Left, const _Ty & _Right ) noexcept ( noexcept ( _Left < _Right ) ) {

    return _Left < _Right ? _Right : _Left;
}
#pragma warning(pop)
#line 47
template < class _Ty, class _Pr >
[ [ nodiscard ] ] constexpr _Ty ( max ) ( initializer_list < _Ty >, _Pr );
#line 50
template < class _Ty >
[ [ nodiscard ] ] constexpr _Ty ( max ) ( initializer_list < _Ty > );
#line 53
template < class _Ty, class _Pr >
[ [ nodiscard ] ] constexpr const _Ty & ( min ) ( const _Ty & _Left, const _Ty & _Right, _Pr _Pred ) noexcept (
    noexcept ( _Pred ( _Right, _Left ) ) ) {

    return _Pred ( _Right, _Left ) ? _Right : _Left;
}
#line 60
#pragma warning(push)
#pragma warning(disable : 28285)
template < class _Ty >
[ [ nodiscard ] ] constexpr const _Ty &
    ( min ) ( const _Ty & _Left, const _Ty & _Right ) noexcept ( noexcept ( _Right < _Left ) ) {

    return _Right < _Left ? _Right : _Left;
}
#pragma warning(pop)
#line 70
template < class _Ty, class _Pr >
[ [ nodiscard ] ] constexpr _Ty ( min ) ( initializer_list < _Ty >, _Pr );
#line 73
template < class _Ty >
[ [ nodiscard ] ] constexpr _Ty ( min ) ( initializer_list < _Ty > );
#line 76
template < class _FwdIt1, class _FwdIt2 >
inline void iter_swap ( _FwdIt1 _Left, _FwdIt2 _Right ) {
    swap ( * _Left, * _Right );
}
#line 81
template < class _Ty, size_t _Size, enable_if_t < _Is_swappable < _Ty > :: value, int > >
inline void swap ( _Ty ( & _Left ) [ _Size ], _Ty ( & _Right ) [ _Size ] ) noexcept ( _Is_nothrow_swappable < _Ty > :: value ) {
    if ( & _Left != & _Right ) {
        _Ty * _First1 = _Left;
        _Ty * _Last1 = _First1 + _Size;
        _Ty * _First2 = _Right;
        for (; _First1 != _Last1; ++ _First1, ++ _First2 ) {
            :: std :: iter_swap ( _First1, _First2 );
        }
    }
}
#line 96 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\utility"
template < class _Ty, int _Enabled >

inline void swap ( _Ty & _Left, _Ty & _Right ) noexcept (
    is_nothrow_move_constructible_v < _Ty > && is_nothrow_move_assignable_v < _Ty > ) {
    _Ty _Tmp = :: std :: move ( _Left );
    _Left = :: std :: move ( _Right );
    _Right = :: std :: move ( _Tmp );
}
#line 105 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\utility"
template < class _Ty >
inline void _Swap_adl ( _Ty & _Left, _Ty & _Right ) noexcept ( _Is_nothrow_swappable < _Ty > :: value ) {
    swap ( _Left, _Right );
}
#line 110
struct piecewise_construct_t { 
#line 111
explicit piecewise_construct_t() = default;
#line 112
}; 
#line 114
constexpr piecewise_construct_t piecewise_construct{}; 
#line 116
template< class _Ty, class _Alloc, class  = void> 
#line 117
struct _Has_allocator_type : public false_type { }; 
#line 119
template< class _Ty, class _Alloc> 
#line 120
struct _Has_allocator_type< _Ty, _Alloc, void_t< typename _Ty::allocator_type> >  : public is_convertible< _Alloc, typename _Ty::allocator_type> ::type { 
#line 121
}; 
#line 123
struct allocator_arg_t { 
#line 124
explicit allocator_arg_t() = default;
#line 125
}; 
#line 127
constexpr allocator_arg_t allocator_arg{}; 
#line 129
template< class _Ty, class _Alloc> 
#line 130
struct uses_allocator : public _Has_allocator_type< _Ty, _Alloc> ::type { 
#line 132
}; 
#line 134
template< class _Ty, class _Alloc> constexpr bool 
#line 135
uses_allocator_v = (uses_allocator< _Ty, _Alloc> ::value); 
#line 137
template< class ..._Types> class tuple; 
#line 140
template < class _Ty1, class _Ty2 >
struct pair;
#line 143
template< class _Ty, size_t _Size> class array; 
#line 146
template< class _Tuple> struct tuple_size; 
#line 149
template< class _Ty> constexpr size_t 
#line 150
tuple_size_v = (tuple_size< _Ty> ::value); 
#line 152
template< size_t _Index, class _Tuple> struct tuple_element; 
#line 155
template< size_t _Index, class _Tuple> using tuple_element_t = typename tuple_element< _Index, _Tuple> ::type; 
#line 158
template< size_t _Index, class ..._Types> 
#line 159
[[nodiscard]] constexpr auto &&
#line 158
_Tuple_get(tuple< _Types...>  && _Tuple) noexcept; 
#line 161
template< size_t _Index, class ..._Types> 
#line 162
[[nodiscard]] constexpr tuple_element_t< _Index, tuple< _Types...> >  &
#line 161
get(tuple< _Types...>  & _Tuple) noexcept; 
#line 164
template< size_t _Index, class ..._Types> 
#line 165
[[nodiscard]] constexpr const tuple_element_t< _Index, tuple< _Types...> >  &
#line 164
get(const tuple< _Types...>  & _Tuple) noexcept; 
#line 167
template< size_t _Index, class ..._Types> 
#line 168
[[nodiscard]] constexpr tuple_element_t< _Index, tuple< _Types...> >  &&
#line 167
get(tuple< _Types...>  && _Tuple) noexcept; 
#line 170
template< size_t _Index, class ..._Types> 
#line 171
[[nodiscard]] constexpr const tuple_element_t< _Index, tuple< _Types...> >  &&
#line 170
get(const tuple< _Types...>  && _Tuple) noexcept; 
#line 173
template< size_t _Idx, class _Ty, size_t _Size> 
#line 174
[[nodiscard]] constexpr _Ty &
#line 173
get(array< _Ty, _Size>  & _Arr) noexcept; 
#line 176
template< size_t _Idx, class _Ty, size_t _Size> 
#line 177
[[nodiscard]] constexpr const _Ty &
#line 176
get(const array< _Ty, _Size>  & _Arr) noexcept; 
#line 179
template< size_t _Idx, class _Ty, size_t _Size> 
#line 180
[[nodiscard]] constexpr _Ty &&
#line 179
get(array< _Ty, _Size>  && _Arr) noexcept; 
#line 182
template< size_t _Idx, class _Ty, size_t _Size> 
#line 183
[[nodiscard]] constexpr const _Ty &&
#line 182
get(const array< _Ty, _Size>  && _Arr) noexcept; 
#line 218
template < class _Ty1, class _Ty2 >
struct pair {
    using first_type = _Ty1;
    using second_type = _Ty2;

    template < class _Uty1 = _Ty1, class _Uty2 = _Ty2,
        enable_if_t < conjunction_v < is_default_constructible < _Uty1 >, is_default_constructible < _Uty2 >>, int > = 0 >
    constexpr explicit (
        ! conjunction_v < _Is_implicitly_default_constructible < _Uty1 >, _Is_implicitly_default_constructible < _Uty2 >> )
        pair ( ) noexcept (
            is_nothrow_default_constructible_v < _Uty1 > && is_nothrow_default_constructible_v < _Uty2 > )
        : first ( ), second ( ) { }

    template < class _Uty1 = _Ty1, class _Uty2 = _Ty2,
        enable_if_t < conjunction_v < is_copy_constructible < _Uty1 >, is_copy_constructible < _Uty2 >>, int > = 0 >
    constexpr explicit ( ! conjunction_v < is_convertible < const _Uty1 &, _Uty1 >, is_convertible < const _Uty2 &, _Uty2 >> )
        pair ( const _Ty1 & _Val1, const _Ty2 & _Val2 ) noexcept (
            is_nothrow_copy_constructible_v < _Uty1 > && is_nothrow_copy_constructible_v < _Uty2 > )
        : first ( _Val1 ), second ( _Val2 ) { }




    template < class _Other1, class _Other2,

        enable_if_t < conjunction_v < is_constructible < _Ty1, _Other1 >, is_constructible < _Ty2, _Other2 >>, int > = 0 >
    constexpr explicit ( ! conjunction_v < is_convertible < _Other1, _Ty1 >, is_convertible < _Other2, _Ty2 >> )
        pair ( _Other1 && _Val1, _Other2 && _Val2 ) noexcept (
            is_nothrow_constructible_v < _Ty1, _Other1 > && is_nothrow_constructible_v < _Ty2, _Other2 > )
        : first ( :: std :: forward < _Other1 > ( _Val1 ) ), second ( :: std :: forward < _Other2 > ( _Val2 ) ) {
    }

    pair ( const pair & ) = default;
    pair ( pair && ) = default;










    template < class _Other1, class _Other2,
        enable_if_t < conjunction_v < is_constructible < _Ty1, const _Other1 & >, is_constructible < _Ty2, const _Other2 & >>,
            int > = 0 >
    constexpr explicit ( ! conjunction_v < is_convertible < const _Other1 &, _Ty1 >, is_convertible < const _Other2 &, _Ty2 >> )
        pair ( const pair < _Other1, _Other2 > & _Right ) noexcept ( is_nothrow_constructible_v < _Ty1, const _Other1 & > &&
                is_nothrow_constructible_v < _Ty2, const _Other2 & > )
        : first ( _Right . first ), second ( _Right . second ) { }

    template < class _Other1, class _Other2,
        enable_if_t < conjunction_v < is_constructible < _Ty1, _Other1 >, is_constructible < _Ty2, _Other2 >>, int > = 0 >
    constexpr explicit ( ! conjunction_v < is_convertible < _Other1, _Ty1 >, is_convertible < _Other2, _Ty2 >> )
        pair ( pair < _Other1, _Other2 > && _Right ) noexcept (
            is_nothrow_constructible_v < _Ty1, _Other1 > && is_nothrow_constructible_v < _Ty2, _Other2 > )
        : first ( :: std :: forward < _Other1 > ( _Right . first ) ), second ( :: std :: forward < _Other2 > ( _Right . second ) ) { }




























    template < class _Tuple1, class _Tuple2, size_t ... _Indices1, size_t ... _Indices2 >
    constexpr pair ( _Tuple1 & _Val1, _Tuple2 & _Val2, index_sequence < _Indices1 ... >, index_sequence < _Indices2 ... > )
        : first ( _Tuple_get < _Indices1 > ( :: std :: move ( _Val1 ) ) ... ), second ( _Tuple_get < _Indices2 > ( :: std :: move ( _Val2 ) ) ... ) { }

    template < class ... _Types1, class ... _Types2 >
    inline pair ( piecewise_construct_t, tuple < _Types1 ... > _Val1, tuple < _Types2 ... > _Val2 )
        : pair ( _Val1, _Val2, index_sequence_for < _Types1 ... > { }, index_sequence_for < _Types2 ... > { } ) { }

    pair & operator = ( const volatile pair & ) = delete;

    template < class _Myself = pair,
        enable_if_t < conjunction_v < _Is_copy_assignable_no_precondition_check < typename _Myself :: first_type >,
                        _Is_copy_assignable_no_precondition_check < typename _Myself :: second_type >>,
            int > = 0 >
    inline pair & operator = ( _Identity_t < const _Myself & > _Right ) noexcept (
        conjunction_v < is_nothrow_copy_assignable < _Ty1 >, is_nothrow_copy_assignable < _Ty2 >> ) {
        first = _Right . first;
        second = _Right . second;
        return * this;
    }















    template < class _Myself = pair,
        enable_if_t < conjunction_v < _Is_move_assignable_no_precondition_check < typename _Myself :: first_type >,
                        _Is_move_assignable_no_precondition_check < typename _Myself :: second_type >>,
            int > = 0 >
    inline pair & operator = ( _Identity_t < _Myself && > _Right ) noexcept (
        conjunction_v < is_nothrow_move_assignable < _Ty1 >, is_nothrow_move_assignable < _Ty2 >> ) {
        first = :: std :: forward < _Ty1 > ( _Right . first );
        second = :: std :: forward < _Ty2 > ( _Right . second );
        return * this;
    }















    template < class _Other1, class _Other2,
        enable_if_t < conjunction_v < negation < is_same < pair, pair < _Other1, _Other2 >> >, is_assignable < _Ty1 &, const _Other1 & >,
                        is_assignable < _Ty2 &, const _Other2 & >>,
            int > = 0 >
    inline pair & operator = ( const pair < _Other1, _Other2 > & _Right ) noexcept (
        is_nothrow_assignable_v < _Ty1 &, const _Other1 & > &&
            is_nothrow_assignable_v < _Ty2 &, const _Other2 & > ) {
        first = _Right . first;
        second = _Right . second;
        return * this;
    }















    template < class _Other1, class _Other2,
        enable_if_t < conjunction_v < negation < is_same < pair, pair < _Other1, _Other2 >> >, is_assignable < _Ty1 &, _Other1 >,
                        is_assignable < _Ty2 &, _Other2 >>,
            int > = 0 >
    inline pair & operator = ( pair < _Other1, _Other2 > && _Right ) noexcept (
        is_nothrow_assignable_v < _Ty1 &, _Other1 > && is_nothrow_assignable_v < _Ty2 &, _Other2 > ) {
        first = :: std :: forward < _Other1 > ( _Right . first );
        second = :: std :: forward < _Other2 > ( _Right . second );
        return * this;
    }









































    inline void swap ( pair & _Right ) noexcept (
        _Is_nothrow_swappable < _Ty1 > :: value && _Is_nothrow_swappable < _Ty2 > :: value ) {
        if ( this != :: std :: addressof ( _Right ) ) {
            _Swap_adl ( first, _Right . first );
            _Swap_adl ( second, _Right . second );
        }
    }












    _Ty1 first;
    _Ty2 second;
};
#line 469 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\utility"
template < class _Ty1, class _Ty2,
    enable_if_t < _Is_swappable < _Ty1 > :: value && _Is_swappable < _Ty2 > :: value, int > = 0 >
inline void swap ( pair < _Ty1, _Ty2 > & _Left, pair < _Ty1, _Ty2 > & _Right ) noexcept ( noexcept ( _Left . swap ( _Right ) ) ) {
    _Left . swap ( _Right );
}
#line 484 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\utility"
template < class _Ty1, class _Ty2, class _Uty1, class _Uty2 >
[ [ nodiscard ] ] constexpr bool operator == ( const pair < _Ty1, _Ty2 > & _Left, const pair < _Uty1, _Uty2 > & _Right ) {
    return _Left . first == _Right . first && _Left . second == _Right . second;
}
#line 501
template < class _Ty1, class _Ty2, class _Uty1, class _Uty2 >
[ [ nodiscard ] ] constexpr bool operator != ( const pair < _Ty1, _Ty2 > & _Left, const pair < _Uty1, _Uty2 > & _Right ) {
    return ! ( _Left == _Right );
}
#line 507 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\utility"
template < class _Ty1, class _Ty2, class _Uty1, class _Uty2 >
[ [ nodiscard ] ] constexpr bool operator < ( const pair < _Ty1, _Ty2 > & _Left, const pair < _Uty1, _Uty2 > & _Right ) {
    return _Left . first < _Right . first || ( ! ( _Right . first < _Left . first ) && _Left . second < _Right . second );
}
#line 512
template < class _Ty1, class _Ty2, class _Uty1, class _Uty2 >
[ [ nodiscard ] ] constexpr bool operator > ( const pair < _Ty1, _Ty2 > & _Left, const pair < _Uty1, _Uty2 > & _Right ) {
    return _Right < _Left;
}
#line 517
template < class _Ty1, class _Ty2, class _Uty1, class _Uty2 >
[ [ nodiscard ] ] constexpr bool operator <= ( const pair < _Ty1, _Ty2 > & _Left, const pair < _Uty1, _Uty2 > & _Right ) {
    return ! ( _Right < _Left );
}
#line 522
template < class _Ty1, class _Ty2, class _Uty1, class _Uty2 >
[ [ nodiscard ] ] constexpr bool operator >= ( const pair < _Ty1, _Ty2 > & _Left, const pair < _Uty1, _Uty2 > & _Right ) {
    return ! ( _Left < _Right );
}
#line 546 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\utility"
template< class _Ty> 
#line 547
struct _Unrefwrap_helper { 
#line 548
using type = _Ty; 
#line 549
}; 
#line 551
template< class _Ty> 
#line 552
struct _Unrefwrap_helper< reference_wrapper< _Ty> >  { 
#line 553
using type = _Ty &; 
#line 554
}; 
#line 557
template< class _Ty> using _Unrefwrap_t = typename _Unrefwrap_helper< decay_t< _Ty> > ::type; 
#line 560
template < class _Ty1, class _Ty2 >
[ [ nodiscard ] ] constexpr pair < _Unrefwrap_t < _Ty1 >, _Unrefwrap_t < _Ty2 > > make_pair ( _Ty1 && _Val1, _Ty2 && _Val2 ) noexcept (
    is_nothrow_constructible_v < _Unrefwrap_t < _Ty1 >, _Ty1 > &&
        is_nothrow_constructible_v < _Unrefwrap_t < _Ty2 >, _Ty2 > ) {

    using _Mypair = pair < _Unrefwrap_t < _Ty1 >, _Unrefwrap_t < _Ty2 >>;
    return _Mypair ( :: std :: forward < _Ty1 > ( _Val1 ), :: std :: forward < _Ty2 > ( _Val2 ) );
}
#line 569
namespace rel_ops { 
#line 570
template < class _Ty >
     [ [ nodiscard ] ] bool operator != ( const _Ty & _Left, const _Ty & _Right ) {
        return ! ( _Left == _Right );
    }
#line 575
template < class _Ty >
     [ [ nodiscard ] ] bool operator > ( const _Ty & _Left, const _Ty & _Right ) {
        return _Right < _Left;
    }
#line 580
template < class _Ty >
     [ [ nodiscard ] ] bool operator <= ( const _Ty & _Left, const _Ty & _Right ) {
        return ! ( _Right < _Left );
    }
#line 585
template < class _Ty >
     [ [ nodiscard ] ] bool operator >= ( const _Ty & _Left, const _Ty & _Right ) {
        return ! ( _Left < _Right );
    }
#line 589
}
#line 591
template< class _Tuple, class  = void> 
#line 592
struct _Tuple_size_sfinae { }; 
#line 594
template< class _Tuple> 
#line 595
struct _Tuple_size_sfinae< _Tuple, void_t< decltype(tuple_size< _Tuple> ::value)> >  : public integral_constant< unsigned __int64, tuple_size< _Tuple> ::value>  { 
#line 596
}; 
#line 598
template< class _Tuple> 
#line 599
struct tuple_size< const _Tuple>  : public _Tuple_size_sfinae< _Tuple>  { }; 
#line 601
template< class _Tuple> 
#line 602
struct tuple_size< volatile _Tuple>  : public _Tuple_size_sfinae< _Tuple>  { }; 
#line 604
template< class _Tuple> 
#line 605
struct tuple_size< const volatile _Tuple>  : public _Tuple_size_sfinae< _Tuple>  { }; 
#line 607
template< size_t _Index, class _Tuple> 
#line 608
struct tuple_element< _Index, const _Tuple>  : public std::tuple_element< _Index, _Tuple>  { 
#line 609
using _Mybase = std::tuple_element< _Index, _Tuple> ; 
#line 610
using type = std::add_const_t< typename std::tuple_element< _Index, _Tuple> ::type> ; 
#line 611
}; 
#line 613
template< size_t _Index, class _Tuple> 
#line 614
struct tuple_element< _Index, volatile _Tuple>  : public std::tuple_element< _Index, _Tuple>  { 
#line 616
using _Mybase = std::tuple_element< _Index, _Tuple> ; 
#line 617
using type = std::add_volatile_t< typename std::tuple_element< _Index, _Tuple> ::type> ; 
#line 618
}; 
#line 620
template< size_t _Index, class _Tuple> 
#line 621
struct tuple_element< _Index, const volatile _Tuple>  : public std::tuple_element< _Index, _Tuple>  { 
#line 623
using _Mybase = std::tuple_element< _Index, _Tuple> ; 
#line 624
using type = std::add_cv_t< typename std::tuple_element< _Index, _Tuple> ::type> ; 
#line 625
}; 
#line 627
template< class _Ty, size_t _Size> 
#line 628
struct tuple_size< array< _Ty, _Size> >  : public integral_constant< unsigned __int64, _Size>  { }; 
#line 630
template< size_t _Idx, class _Ty, size_t _Size> 
#line 631
struct tuple_element< _Idx, array< _Ty, _Size> >  { 
#line 632
static_assert((_Idx < _Size), "array index out of bounds");
#line 634
using type = _Ty; 
#line 635
}; 
#line 637
template< class ..._Types> 
#line 638
struct tuple_size< tuple< _Types...> >  : public integral_constant< unsigned __int64, sizeof...(_Types)>  { }; 
#line 640
template< size_t _Index> 
#line 641
struct tuple_element< _Index, tuple< > >  { 
#line 642
static_assert((_Always_false< integral_constant< size_t, _Index> > ), "tuple index out of bounds");
#line 643
}; 
#line 645
template< class _This, class ..._Rest> 
#line 646
struct tuple_element< 0, tuple< _This, _Rest...> >  { 
#line 647
using type = _This; 
#line 649
using _Ttype = tuple< _This, _Rest...> ; 
#line 650
}; 
#line 652
template< size_t _Index, class _This, class ..._Rest> 
#line 653
struct tuple_element< _Index, tuple< _This, _Rest...> >  : public std::tuple_element< _Index - (1), tuple< _Rest...> >  { 
#line 654
}; 
#line 656
template< class _Ty1, class _Ty2> 
#line 657
struct tuple_size< pair< _Ty1, _Ty2> >  : public integral_constant< unsigned __int64, 2Ui64>  { }; 
#line 659
template< size_t _Idx, class _Ty1, class _Ty2> 
#line 660
struct tuple_element< _Idx, pair< _Ty1, _Ty2> >  { 
#line 661
static_assert((_Idx < (2)), "pair index out of bounds");
#line 663
using type = conditional_t< _Idx == (0), _Ty1, _Ty2> ; 
#line 664
}; 
#line 666
template < size_t _Idx, class _Ty1, class _Ty2 >
[ [ nodiscard ] ] constexpr tuple_element_t < _Idx, pair < _Ty1, _Ty2 > > & get ( pair < _Ty1, _Ty2 > & _Pr ) noexcept {

    if constexpr ( _Idx == 0 ) {
        return _Pr . first;
    } else {
        return _Pr . second;
    }
}
#line 676
template < class _Ty1, class _Ty2 >
[ [ nodiscard ] ] constexpr _Ty1 & get ( pair < _Ty1, _Ty2 > & _Pr ) noexcept {

    return _Pr . first;
}
#line 682
template < class _Ty2, class _Ty1 >
[ [ nodiscard ] ] constexpr _Ty2 & get ( pair < _Ty1, _Ty2 > & _Pr ) noexcept {

    return _Pr . second;
}
#line 688
template < size_t _Idx, class _Ty1, class _Ty2 >
[ [ nodiscard ] ] constexpr const tuple_element_t < _Idx, pair < _Ty1, _Ty2 > > & get ( const pair < _Ty1, _Ty2 > & _Pr ) noexcept {

    if constexpr ( _Idx == 0 ) {
        return _Pr . first;
    } else {
        return _Pr . second;
    }
}
#line 698
template < class _Ty1, class _Ty2 >
[ [ nodiscard ] ] constexpr const _Ty1 & get ( const pair < _Ty1, _Ty2 > & _Pr ) noexcept {

    return _Pr . first;
}
#line 704
template < class _Ty2, class _Ty1 >
[ [ nodiscard ] ] constexpr const _Ty2 & get ( const pair < _Ty1, _Ty2 > & _Pr ) noexcept {

    return _Pr . second;
}
#line 710
template < size_t _Idx, class _Ty1, class _Ty2 >
[ [ nodiscard ] ] constexpr tuple_element_t < _Idx, pair < _Ty1, _Ty2 > > && get ( pair < _Ty1, _Ty2 > && _Pr ) noexcept {

    if constexpr ( _Idx == 0 ) {
        return :: std :: forward < _Ty1 > ( _Pr . first );
    } else {
        return :: std :: forward < _Ty2 > ( _Pr . second );
    }
}
#line 720
template < class _Ty1, class _Ty2 >
[ [ nodiscard ] ] constexpr _Ty1 && get ( pair < _Ty1, _Ty2 > && _Pr ) noexcept {

    return :: std :: forward < _Ty1 > ( _Pr . first );
}
#line 726
template < class _Ty2, class _Ty1 >
[ [ nodiscard ] ] constexpr _Ty2 && get ( pair < _Ty1, _Ty2 > && _Pr ) noexcept {

    return :: std :: forward < _Ty2 > ( _Pr . second );
}
#line 732
template < size_t _Idx, class _Ty1, class _Ty2 >
[ [ nodiscard ] ] constexpr const tuple_element_t < _Idx, pair < _Ty1, _Ty2 > > && get ( const pair < _Ty1, _Ty2 > && _Pr ) noexcept {

    if constexpr ( _Idx == 0 ) {
        return :: std :: forward < const _Ty1 > ( _Pr . first );
    } else {
        return :: std :: forward < const _Ty2 > ( _Pr . second );
    }
}
#line 742
template < class _Ty1, class _Ty2 >
[ [ nodiscard ] ] constexpr const _Ty1 && get ( const pair < _Ty1, _Ty2 > && _Pr ) noexcept {

    return :: std :: forward < const _Ty1 > ( _Pr . first );
}
#line 748
template < class _Ty2, class _Ty1 >
[ [ nodiscard ] ] constexpr const _Ty2 && get ( const pair < _Ty1, _Ty2 > && _Pr ) noexcept {

    return :: std :: forward < const _Ty2 > ( _Pr . second );
}
#line 754
template < class _Ty, class _Other = _Ty >
inline _Ty exchange ( _Ty & _Val, _Other && _New_val ) noexcept (
    conjunction_v < is_nothrow_move_constructible < _Ty >, is_nothrow_assignable < _Ty &, _Other >> ) {

    _Ty _Old_val = static_cast < _Ty && > ( _Val );
    _Val = static_cast < _Other && > ( _New_val );
    return _Old_val;
}
#line 763
template < class _Ty >
[ [ nodiscard ] ] constexpr add_const_t < _Ty > & as_const ( _Ty & _Val ) noexcept {
    return _Val;
}
#line 768
template < class _Ty >
void as_const ( const _Ty && ) = delete;
#line 952 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\utility"
namespace [[deprecated("warning STL4002: The non-Standard std::tr1 namespace and TR1-only machinery are deprecated and will be REMOVED. You can define _" "SILENCE_TR1_NAMESPACE_DEPRECATION_WARNING to suppress this warning.")]] tr1 { 
#line 953
using std::get;
#line 954
using std::tuple_element;
#line 955
using std::tuple_size;
#line 956
}
#line 959 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\utility"
}
#line 963
#pragma warning(pop)
#pragma pack ( pop )
#line 13 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\__msvc_iter_core.hpp"
#pragma pack ( push, 8 )
#pragma warning(push, 3)
#pragma warning(disable : 4180 4412 4455 4494 4514 4574 4582 4583 4587 4588 4619 4623 4625 4626 4643 4648 4702 4793 4820 4988 5026 5027 5045 6294 4984 5053 )
#line 20
namespace std { 
#line 22
struct input_iterator_tag { }; 
#line 24
struct output_iterator_tag { }; 
#line 26
struct forward_iterator_tag : public input_iterator_tag { }; 
#line 28
struct bidirectional_iterator_tag : public forward_iterator_tag { }; 
#line 30
struct random_access_iterator_tag : public bidirectional_iterator_tag { }; 
#line 462
template< class , class  = void> 
#line 463
struct _Iterator_traits_base { }; 
#line 465
template< class _Iter> 
#line 466
struct _Iterator_traits_base< _Iter, void_t< typename _Iter::iterator_category, typename _Iter::value_type, typename _Iter::difference_type, typename _Iter::pointer, typename _Iter::reference> >  { 
#line 470
using iterator_category = typename _Iter::iterator_category; 
#line 471
using value_type = typename _Iter::value_type; 
#line 472
using difference_type = typename _Iter::difference_type; 
#line 473
using pointer = typename _Iter::pointer; 
#line 474
using reference = typename _Iter::reference; 
#line 475
}; 
#line 477
template< class _Ty, bool  = is_object_v< _Ty> > 
#line 478
struct _Iterator_traits_pointer_base { 
#line 479
using iterator_category = random_access_iterator_tag; 
#line 480
using value_type = remove_cv_t< _Ty> ; 
#line 481
using difference_type = ptrdiff_t; 
#line 482
using pointer = _Ty *; 
#line 483
using reference = _Ty &; 
#line 484
}; 
#line 486
template< class _Ty> 
#line 487
struct _Iterator_traits_pointer_base< _Ty, false>  { }; 
#line 489
template< class _Iter> 
#line 490
struct iterator_traits : public _Iterator_traits_base< _Iter>  { }; 
#line 492
template< class _Ty> 
#line 493
struct iterator_traits< _Ty *>  : public _Iterator_traits_pointer_base< _Ty>  { }; 
#line 495 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\__msvc_iter_core.hpp"
}
#line 499
#pragma warning(pop)
#pragma pack ( pop )
#line 17 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\xutility"
#pragma pack ( push, 8 )
#pragma warning(push, 3)
#pragma warning(disable : 4180 4412 4455 4494 4514 4574 4582 4583 4587 4588 4619 4623 4625 4626 4643 4648 4702 4793 4820 4988 5026 5027 5045 6294 4984 5053 )
#line 47 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\xutility"
extern "C" {
#line 55
__declspec(noalias) void __cdecl __std_reverse_trivially_swappable_1(void * _First, void * _Last) noexcept; 
#line 56
__declspec(noalias) void __cdecl __std_reverse_trivially_swappable_2(void * _First, void * _Last) noexcept; 
#line 57
__declspec(noalias) void __cdecl __std_reverse_trivially_swappable_4(void * _First, void * _Last) noexcept; 
#line 58
__declspec(noalias) void __cdecl __std_reverse_trivially_swappable_8(void * _First, void * _Last) noexcept; 
#line 59
__declspec(noalias) void __cdecl __std_swap_ranges_trivially_swappable_noalias(void * _First1, void * _Last1, void * _First2) noexcept; 
#line 62
__declspec(noalias) size_t __stdcall 
#line 63
__std_count_trivial_1(const void * _First, const void * _Last, uint8_t _Val) noexcept; 
#line 64
__declspec(noalias) size_t __stdcall 
#line 65
__std_count_trivial_2(const void * _First, const void * _Last, uint16_t _Val) noexcept; 
#line 66
__declspec(noalias) size_t __stdcall 
#line 67
__std_count_trivial_4(const void * _First, const void * _Last, uint32_t _Val) noexcept; 
#line 68
__declspec(noalias) size_t __stdcall 
#line 69
__std_count_trivial_8(const void * _First, const void * _Last, uint64_t _Val) noexcept; 
#line 71
const void *__stdcall __std_find_trivial_1(const void * _First, const void * _Last, uint8_t _Val) noexcept; 
#line 72
const void *__stdcall __std_find_trivial_2(const void * _First, const void * _Last, uint16_t _Val) noexcept; 
#line 73
const void *__stdcall __std_find_trivial_4(const void * _First, const void * _Last, uint32_t _Val) noexcept; 
#line 74
const void *__stdcall __std_find_trivial_8(const void * _First, const void * _Last, uint64_t _Val) noexcept; 
#line 76
const void *__stdcall __std_find_trivial_unsized_1(const void * _First, uint8_t _Val) noexcept; 
#line 77
const void *__stdcall __std_find_trivial_unsized_2(const void * _First, uint16_t _Val) noexcept; 
#line 78
const void *__stdcall __std_find_trivial_unsized_4(const void * _First, uint32_t _Val) noexcept; 
#line 79
const void *__stdcall __std_find_trivial_unsized_8(const void * _First, uint64_t _Val) noexcept; 
#line 81
const void *__stdcall __std_min_element_1(const void * _First, const void * _Last, bool _Signed) noexcept; 
#line 82
const void *__stdcall __std_min_element_2(const void * _First, const void * _Last, bool _Signed) noexcept; 
#line 83
const void *__stdcall __std_min_element_4(const void * _First, const void * _Last, bool _Signed) noexcept; 
#line 84
const void *__stdcall __std_min_element_8(const void * _First, const void * _Last, bool _Signed) noexcept; 
#line 86
const void *__stdcall __std_max_element_1(const void * _First, const void * _Last, bool _Signed) noexcept; 
#line 87
const void *__stdcall __std_max_element_2(const void * _First, const void * _Last, bool _Signed) noexcept; 
#line 88
const void *__stdcall __std_max_element_4(const void * _First, const void * _Last, bool _Signed) noexcept; 
#line 89
const void *__stdcall __std_max_element_8(const void * _First, const void * _Last, bool _Signed) noexcept; 
#line 90
}
#line 92
template < class _Ty, class _TVal >
__declspec ( noalias ) size_t __std_count_trivial ( _Ty * _First, _Ty * _Last, const _TVal _Val ) noexcept {
    if constexpr ( :: std :: is_pointer_v < _TVal > || :: std :: is_null_pointer_v < _TVal > ) {
        return __std_count_trivial ( _First, _Last, reinterpret_cast < uintptr_t > ( _Val ) );
    } else if constexpr ( sizeof ( _Ty ) == 1 ) {
        return __std_count_trivial_1 ( _First, _Last, static_cast < uint8_t > ( _Val ) );
    } else if constexpr ( sizeof ( _Ty ) == 2 ) {
        return __std_count_trivial_2 ( _First, _Last, static_cast < uint16_t > ( _Val ) );
    } else if constexpr ( sizeof ( _Ty ) == 4 ) {
        return __std_count_trivial_4 ( _First, _Last, static_cast < uint32_t > ( _Val ) );
    } else if constexpr ( sizeof ( _Ty ) == 8 ) {
        return __std_count_trivial_8 ( _First, _Last, static_cast < uint64_t > ( _Val ) );
    } else {
        static_assert ( :: std :: _Always_false < _Ty >, "Unexpected size" );
    }
}
#line 109
template < class _Ty, class _TVal >
_Ty * __std_find_trivial ( _Ty * _First, _Ty * _Last, const _TVal _Val ) noexcept {
    if constexpr ( :: std :: is_pointer_v < _TVal > || :: std :: is_null_pointer_v < _TVal > ) {
        return __std_find_trivial ( _First, _Last, reinterpret_cast < uintptr_t > ( _Val ) );
    } else if constexpr ( sizeof ( _Ty ) == 1 ) {
        return const_cast < _Ty * > (
            static_cast < const _Ty * > ( __std_find_trivial_1 ( _First, _Last, static_cast < uint8_t > ( _Val ) ) ) );
    } else if constexpr ( sizeof ( _Ty ) == 2 ) {
        return const_cast < _Ty * > (
            static_cast < const _Ty * > ( __std_find_trivial_2 ( _First, _Last, static_cast < uint16_t > ( _Val ) ) ) );
    } else if constexpr ( sizeof ( _Ty ) == 4 ) {
        return const_cast < _Ty * > (
            static_cast < const _Ty * > ( __std_find_trivial_4 ( _First, _Last, static_cast < uint32_t > ( _Val ) ) ) );
    } else if constexpr ( sizeof ( _Ty ) == 8 ) {
        return const_cast < _Ty * > (
            static_cast < const _Ty * > ( __std_find_trivial_8 ( _First, _Last, static_cast < uint64_t > ( _Val ) ) ) );
    } else {
        static_assert ( :: std :: _Always_false < _Ty >, "Unexpected size" );
    }
}
#line 130
template < class _Ty, class _TVal >
_Ty * __std_find_trivial_unsized ( _Ty * _First, const _TVal _Val ) noexcept {
    if constexpr ( :: std :: is_pointer_v < _TVal > || :: std :: is_null_pointer_v < _TVal > ) {
        return __std_find_trivial_unsized ( _First, reinterpret_cast < uintptr_t > ( _Val ) );
    } else if constexpr ( sizeof ( _Ty ) == 1 ) {
        return const_cast < _Ty * > (
            static_cast < const _Ty * > ( __std_find_trivial_unsized_1 ( _First, static_cast < uint8_t > ( _Val ) ) ) );
    } else if constexpr ( sizeof ( _Ty ) == 2 ) {
        return const_cast < _Ty * > (
            static_cast < const _Ty * > ( __std_find_trivial_unsized_2 ( _First, static_cast < uint16_t > ( _Val ) ) ) );
    } else if constexpr ( sizeof ( _Ty ) == 4 ) {
        return const_cast < _Ty * > (
            static_cast < const _Ty * > ( __std_find_trivial_unsized_4 ( _First, static_cast < uint32_t > ( _Val ) ) ) );
    } else if constexpr ( sizeof ( _Ty ) == 8 ) {
        return const_cast < _Ty * > (
            static_cast < const _Ty * > ( __std_find_trivial_unsized_8 ( _First, static_cast < uint64_t > ( _Val ) ) ) );
    } else {
        static_assert ( :: std :: _Always_false < _Ty >, "Unexpected size" );
    }
}
#line 151
template < class _Ty >
_Ty * __std_min_element ( _Ty * _First, _Ty * _Last ) noexcept {
    constexpr bool _Signed = :: std :: is_signed_v < _Ty >;

    if constexpr ( sizeof ( _Ty ) == 1 ) {
        return const_cast < _Ty * > ( static_cast < const _Ty * > ( __std_min_element_1 ( _First, _Last, _Signed ) ) );
    } else if constexpr ( sizeof ( _Ty ) == 2 ) {
        return const_cast < _Ty * > ( static_cast < const _Ty * > ( __std_min_element_2 ( _First, _Last, _Signed ) ) );
    } else if constexpr ( sizeof ( _Ty ) == 4 ) {
        return const_cast < _Ty * > ( static_cast < const _Ty * > ( __std_min_element_4 ( _First, _Last, _Signed ) ) );
    } else if constexpr ( sizeof ( _Ty ) == 8 ) {
        return const_cast < _Ty * > ( static_cast < const _Ty * > ( __std_min_element_8 ( _First, _Last, _Signed ) ) );
    } else {
        static_assert ( :: std :: _Always_false < _Ty >, "Unexpected size" );
    }
}
#line 168
template < class _Ty >
_Ty * __std_max_element ( _Ty * _First, _Ty * _Last ) noexcept {
    constexpr bool _Signed = :: std :: is_signed_v < _Ty >;

    if constexpr ( sizeof ( _Ty ) == 1 ) {
        return const_cast < _Ty * > ( static_cast < const _Ty * > ( __std_max_element_1 ( _First, _Last, _Signed ) ) );
    } else if constexpr ( sizeof ( _Ty ) == 2 ) {
        return const_cast < _Ty * > ( static_cast < const _Ty * > ( __std_max_element_2 ( _First, _Last, _Signed ) ) );
    } else if constexpr ( sizeof ( _Ty ) == 4 ) {
        return const_cast < _Ty * > ( static_cast < const _Ty * > ( __std_max_element_4 ( _First, _Last, _Signed ) ) );
    } else if constexpr ( sizeof ( _Ty ) == 8 ) {
        return const_cast < _Ty * > ( static_cast < const _Ty * > ( __std_max_element_8 ( _First, _Last, _Signed ) ) );
    } else {
        static_assert ( :: std :: _Always_false < _Ty >, "Unexpected size" );
    }
}
#line 187 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\xutility"
namespace std { 
#line 189
template < class _To, class _From,
    enable_if_t < conjunction_v < bool_constant < sizeof ( _To ) == sizeof ( _From ) >, is_trivially_copyable < _To >,
                    is_trivially_copyable < _From > >,
        int > = 0 >
[ [ nodiscard ] ] constexpr _To _Bit_cast ( const _From & _Val ) noexcept {
    return __builtin_bit_cast ( _To, _Val );
}
#line 197
template< class _Ty> struct _Get_first_parameter; 
#line 200
template< template< class , class ...>  class _Ty, class _First, class ..._Rest> 
#line 201
struct _Get_first_parameter< _Ty< _First, _Rest...> >  { 
#line 202
using type = _First; 
#line 203
}; 
#line 205
template< class _Newfirst, class _Ty> struct _Replace_first_parameter; 
#line 208
template< class _Newfirst, template< class , class ...>  class _Ty, class _First, class ..._Rest> 
#line 209
struct _Replace_first_parameter< _Newfirst, _Ty< _First, _Rest...> >  { 
#line 210
using type = _Ty< _Newfirst, _Rest...> ; 
#line 211
}; 
#line 213
template< class _Ty, class  = void> 
#line 214
struct _Get_ptr_difference_type { 
#line 215
using type = ptrdiff_t; 
#line 216
}; 
#line 218
template< class _Ty> 
#line 219
struct _Get_ptr_difference_type< _Ty, void_t< typename _Ty::difference_type> >  { 
#line 220
using type = typename _Ty::difference_type; 
#line 221
}; 
#line 223
template< class _Ty, class _Other, class  = void> 
#line 224
struct _Get_rebind_alias { 
#line 225
using type = typename _Replace_first_parameter< _Other, _Ty> ::type; 
#line 226
}; 
#line 228
template< class _Ty, class _Other> 
#line 229
struct _Get_rebind_alias< _Ty, _Other, void_t< typename _Ty::template rebind< _Other> > >  { 
#line 230
using type = typename _Ty::template rebind< _Other> ; 
#line 231
}; 
#line 233
template < class _Iter >
[ [ nodiscard ] ] constexpr void * _Voidify_iter ( _Iter _It ) noexcept {
    if constexpr ( is_pointer_v < _Iter > ) {
        return const_cast < void * > ( static_cast < const volatile void * > ( _It ) );
    } else {
        return const_cast < void * > ( static_cast < const volatile void * > ( :: std :: addressof ( * _It ) ) );
    }
}
#line 256 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\xutility"
template < class _Ty, class ... _Types >
inline void _Construct_in_place ( _Ty & _Obj, _Types && ... _Args ) noexcept (
    is_nothrow_constructible_v < _Ty, _Types ... > ) {





    {
        :: new ( _Voidify_iter ( :: std :: addressof ( _Obj ) ) ) _Ty ( :: std :: forward < _Types > ( _Args ) ... );
    }
}
#line 269 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\xutility"
template < class _Ty >
void _Default_construct_in_place ( _Ty & _Obj ) noexcept ( is_nothrow_default_constructible_v < _Ty > ) {
    :: new ( _Voidify_iter ( :: std :: addressof ( _Obj ) ) ) _Ty;
}
#line 274
template < class _Ty, class _Elem >
struct _Ptr_traits_base {
    using pointer = _Ty;
    using element_type = _Elem;
    using difference_type = typename _Get_ptr_difference_type < _Ty > :: type;

    template < class _Other >
    using rebind = typename _Get_rebind_alias < _Ty, _Other > :: type;

    using _Reftype = conditional_t < is_void_v < _Elem >, char, _Elem > &;

    [ [ nodiscard ] ] static inline pointer pointer_to ( _Reftype _Val ) noexcept (
        noexcept ( _Ty :: pointer_to ( _Val ) ) ) {
        return _Ty :: pointer_to ( _Val );
    }
};
#line 291
template< class , class  = void, class  = void> 
#line 292
struct _Ptr_traits_sfinae_layer { }; 
#line 294
template< class _Ty, class _Uty> 
#line 295
struct _Ptr_traits_sfinae_layer< _Ty, _Uty, void_t< typename _Get_first_parameter< _Ty> ::type> >  : public _Ptr_traits_base< _Ty, typename _Get_first_parameter< _Ty> ::type>  { 
#line 296
}; 
#line 298
template< class _Ty> 
#line 299
struct _Ptr_traits_sfinae_layer< _Ty, void_t< typename _Ty::element_type> , void>  : public _Ptr_traits_base< _Ty, typename _Ty::element_type>  { 
#line 300
}; 
#line 302
template< class _Ty> 
#line 303
struct pointer_traits : public _Ptr_traits_sfinae_layer< _Ty>  { }; 
#line 305
template < class _Ty >
struct pointer_traits < _Ty * > {
    using pointer = _Ty *;
    using element_type = _Ty;
    using difference_type = ptrdiff_t;

    template < class _Other >
    using rebind = _Other *;

    using _Reftype = conditional_t < is_void_v < _Ty >, char, _Ty > &;

    [ [ nodiscard ] ] static inline pointer pointer_to ( _Reftype _Val ) noexcept {
        return :: std :: addressof ( _Val );
    }
};
#line 363 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\xutility"
template< class _Fx> 
#line 364
struct _Ref_fn { 
#line 365
template < class ... _Args >
    constexpr decltype ( auto ) operator ( ) ( _Args && ... _Vals ) {
        if constexpr ( is_member_pointer_v < _Fx > ) {
            return :: std :: invoke ( _Fn, :: std :: forward < _Args > ( _Vals ) ... );
        } else {
            return _Fn ( :: std :: forward < _Args > ( _Vals ) ... );
        }
    }
#line 374
_Fx &_Fn; 
#line 375
}; 
#line 377
template < class _Fn >
[ [ nodiscard ] ] constexpr auto _Pass_fn ( _Fn & _Func ) noexcept {
    constexpr bool _Pass_by_value = conjunction_v < bool_constant < sizeof ( _Fn ) <= sizeof ( void * ) >,
        is_trivially_copy_constructible < _Fn >, is_trivially_destructible < _Fn >>;
    if constexpr ( _Pass_by_value ) {
        return _Func;
    } else {
        return _Ref_fn < _Fn > { _Func };
    }
}
#line 401 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\xutility"
struct _Unused_parameter { 
#line 402
constexpr _Unused_parameter() noexcept = default;
#line 403
template < class _Ty >
    constexpr _Unused_parameter ( _Ty && ) noexcept { }
#line 405
}; 
#line 407
template< class _Ty> using _Algorithm_int_t = conditional_t< is_integral_v< _Ty> , _Ty, __int64> ; 
#line 858
template< class _Iter> using _Iter_ref_t = typename iterator_traits< _Iter> ::reference; 
#line 861
template< class _Iter> using _Iter_value_t = typename iterator_traits< _Iter> ::value_type; 
#line 864
template< class _Iter> using _Iter_diff_t = typename iterator_traits< _Iter> ::difference_type; 
#line 867
template< class _Ty> using _Make_unsigned_like_t = make_unsigned_t< _Ty> ; 
#line 871 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\xutility"
template< class ..._Iters> using _Common_diff_t = common_type_t< _Iter_diff_t< _Iters> ...> ; 
#line 874
template< class _Iter> using _Iter_cat_t = typename iterator_traits< _Iter> ::iterator_category; 
#line 877
template< class _Ty, class  = void> constexpr bool 
#line 878
_Is_iterator_v = false; 
#line 880
template< class _Ty> constexpr bool 
#line 881
_Is_iterator_v< _Ty, void_t< _Iter_cat_t< _Ty> > >  = true; 
#line 883
template< class _Ty> 
#line 884
struct _Is_iterator : public bool_constant< _Is_iterator_v< _Ty, void> >  { }; 
#line 886
template< class _Iter> constexpr bool 
#line 887
_Is_cpp17_input_iter_v = is_convertible_v< _Iter_cat_t< _Iter> , input_iterator_tag> ; 
#line 889
template< class _Iter> constexpr bool 
#line 890
_Is_ranges_input_iter_v = _Is_cpp17_input_iter_v< _Iter> ; 
#line 896
template< class _Iter> constexpr bool 
#line 897
_Is_cpp17_fwd_iter_v = is_convertible_v< _Iter_cat_t< _Iter> , forward_iterator_tag> ; 
#line 899
template< class _Iter> constexpr bool 
#line 900
_Is_ranges_fwd_iter_v = _Is_cpp17_fwd_iter_v< _Iter> ; 
#line 906
template< class _Iter> constexpr bool 
#line 907
_Is_cpp17_bidi_iter_v = is_convertible_v< _Iter_cat_t< _Iter> , bidirectional_iterator_tag> ; 
#line 909
template< class _Iter> constexpr bool 
#line 910
_Is_ranges_bidi_iter_v = _Is_cpp17_bidi_iter_v< _Iter> ; 
#line 916
template< class _Iter> constexpr bool 
#line 917
_Is_cpp17_random_iter_v = is_convertible_v< _Iter_cat_t< _Iter> , random_access_iterator_tag> ; 
#line 919
template< class _Iter> constexpr bool 
#line 920
_Is_ranges_random_iter_v = _Is_cpp17_random_iter_v< _Iter> ; 
#line 930
template< class , class  = void> 
#line 931
struct _Is_checked_helper { }; 
#line 934
template < class _Ty >
constexpr void _Verify_range ( const _Ty * const _First, const _Ty * const _Last ) noexcept {

    do { if ( _First <= _Last ) { } else { do { ( void ) ( ( 1 != _CrtDbgReport ( 2, "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\xutility", 937, 0, "%s", "transposed pointer range" ) ) || ( __debugbreak ( ), 0 ) ); :: _invalid_parameter ( L"\x22\x74\x72\x61\x6e\x73\x70\x6f\x73\x65\x64\x20\x70\x6f\x69\x6e\x74\x65\x72\x20\x72\x61\x6e\x67\x65\x22", L"", L"\x45\x3a\x5c\x56\x69\x73\x75\x61\x6c\x53\x74\x75\x64\x69\x6f\x5c\x32\x30\x32\x32\x5c\x50\x72\x65\x76\x69\x65\x77\x5c\x56\x43\x5c" L"\x54\x6f\x6f\x6c\x73\x5c\x4d\x53\x56\x43\x5c\x31\x34\x2e\x33\x37\x2e\x33\x32\x37\x30\x35\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x78" L"\x75\x74\x69\x6c\x69\x74\x79", 937, 0 ); } while ( false ); }; } while ( false );
}
#line 941 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\xutility"
template< class _Iter, class  = void> constexpr bool 
#line 942
_Allow_inheriting_unwrap_v = true; 
#line 944
template< class _Iter> constexpr bool 
#line 945
_Allow_inheriting_unwrap_v< _Iter, void_t< typename _Iter::_Prevent_inheriting_unwrap> >  = is_same_v< _Iter, typename _Iter::_Prevent_inheriting_unwrap> ; 
#line 948
template< class _Iter, class _Sentinel = _Iter, class  = void> constexpr bool 
#line 949
_Range_verifiable_v = false; 
#line 951
template< class _Iter, class _Sentinel> constexpr bool 
#line 952
_Range_verifiable_v< _Iter, _Sentinel, void_t< decltype(_Verify_range(std::declval< const _Iter &> (), std::declval< const _Sentinel &> ()))> >  = _Allow_inheriting_unwrap_v< _Iter, void> ; 
#line 956
template < class _Iter, class _Sentinel >
constexpr void _Adl_verify_range ( const _Iter & _First, const _Sentinel & _Last ) {

    if constexpr ( _Range_verifiable_v < _Iter, _Sentinel > ) {
        _Verify_range ( _First, _Last );
    }
}
#line 964
template< class _Iter, class  = void> constexpr bool 
#line 965
_Unwrappable_v = false; 
#line 967
template< class _Iter> constexpr bool 
#line 968
_Unwrappable_v< _Iter, void_t< decltype(std::declval< _Remove_cvref_t< _Iter>  &> ()._Seek_to(std::declval< _Iter> ()._Unwrapped()))> >  = _Allow_inheriting_unwrap_v< _Remove_cvref_t< _Iter> , void> ; 
#line 972
template< class _Iter, class  = void> constexpr bool 
#line 973
_Has_nothrow_unwrapped = false; 
#line 974
template< class _Iter> constexpr bool 
#line 975
_Has_nothrow_unwrapped< _Iter, void_t< decltype(std::declval< _Iter> ()._Unwrapped())> >  = noexcept(std::declval< _Iter> ()._Unwrapped()); 
#line 978
template < class _Iter >
[ [ nodiscard ] ] constexpr decltype ( auto ) _Get_unwrapped ( _Iter && _It ) noexcept (
    ! _Unwrappable_v < _Iter > || _Has_nothrow_unwrapped < _Iter > ) {

    if constexpr ( is_pointer_v < decay_t < _Iter >> ) {
        return _It + 0;
    } else if constexpr ( _Unwrappable_v < _Iter > ) {
        return static_cast < _Iter && > ( _It ) . _Unwrapped ( );
    } else {
        return static_cast < _Iter && > ( _It );
    }
}
#line 991
template< class _Iter> using _Unwrapped_t = _Remove_cvref_t< decltype(_Get_unwrapped(std::declval< _Iter> ()))> ; 
#line 994
template< class _Iter, class  = bool> constexpr bool 
#line 995
_Do_unwrap_when_unverified_v = false; 
#line 997
template< class _Iter> constexpr bool 
#line 999
_Do_unwrap_when_unverified_v< _Iter, decltype(static_cast< bool>(_Iter::_Unwrap_when_unverified))>  = (static_cast< bool>(_Iter::_Unwrap_when_unverified)); 
#line 1002
template< class _Iter> constexpr bool 
#line 1003
_Unwrappable_for_unverified_v = _Unwrappable_v< _Iter, void>  && _Do_unwrap_when_unverified_v< _Remove_cvref_t< _Iter> , bool> ; 
#line 1006
template < class _Iter >
[ [ nodiscard ] ] constexpr decltype ( auto ) _Get_unwrapped_unverified ( _Iter && _It ) {

    if constexpr ( is_pointer_v < decay_t < _Iter >> ) {
        return _It + 0;
    } else if constexpr ( _Unwrappable_for_unverified_v < _Iter > ) {
        return static_cast < _Iter && > ( _It ) . _Unwrapped ( );
    } else {
        return static_cast < _Iter && > ( _It );
    }
}
#line 1018
template< class _Iter> using _Unwrapped_unverified_t = _Remove_cvref_t< decltype(_Get_unwrapped_unverified(std::declval< _Iter> ()))> ; 
#line 1021
struct _Distance_unknown { 
#line 1022
constexpr _Distance_unknown operator-() const noexcept { 
#line 1023
return {}; 
#line 1024
} 
#line 1025
}; 
#line 1027
template< class _Diff> constexpr _Diff 
#line 1028
_Max_possible_v{((static_cast< _Make_unsigned_like_t< _Diff> >(-1)) >> 1)}; 
#line 1030
template< class _Diff> constexpr _Diff 
#line 1031
_Min_possible_v{((-_Max_possible_v< _Diff> ) - 1)}; 
#line 1033
template< class _Iter, class  = void> constexpr bool 
#line 1034
_Offset_verifiable_v = false; 
#line 1036
template< class _Iter> constexpr bool 
#line 1038
_Offset_verifiable_v< _Iter, void_t< decltype(std::declval< const _Iter &> ()._Verify_offset(_Iter_diff_t< _Iter> {}))> >  = true; 
#line 1041
template< class _Iter> constexpr bool 
#line 1042
_Unwrappable_for_offset_v = _Unwrappable_v< _Iter, void>  && _Offset_verifiable_v< _Remove_cvref_t< _Iter> , void> ; 
#line 1045
template < class _Iter, class _Diff >
[ [ nodiscard ] ] constexpr decltype ( auto ) _Get_unwrapped_n ( _Iter && _It, const _Diff _Off ) {
    if constexpr ( is_pointer_v < decay_t < _Iter >> ) {
        return _It + 0;
    } else if constexpr ( _Unwrappable_for_offset_v < _Iter > && is_integral_v < _Diff > ) {

        using _IDiff = _Iter_diff_t < _Remove_cvref_t < _Iter >>;
        using _CDiff = common_type_t < _Diff, _IDiff >;
        const auto _COff = static_cast < _CDiff > ( _Off );

        do { if ( _COff <= static_cast < _CDiff > ( _Max_possible_v < _IDiff > ) && ( is_unsigned_v < _Diff > || static_cast < _CDiff > ( _Min_possible_v < _IDiff > ) <= _COff ) ) { } else { do { ( void ) ( ( 1 != _CrtDbgReport ( 2, "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\xutility", 1057, 0, "%s", "integer overflow" ) ) || ( __debugbreak ( ), 0 ) ); :: _invalid_parameter ( L"\x22\x69\x6e\x74\x65\x67\x65\x72\x20\x6f\x76\x65\x72\x66\x6c\x6f\x77\x22", L"", L"\x45\x3a\x5c\x56\x69\x73\x75\x61\x6c\x53\x74\x75\x64\x69\x6f\x5c\x32\x30\x32\x32\x5c\x50\x72\x65\x76\x69\x65\x77\x5c\x56\x43\x5c" L"\x54\x6f\x6f\x6c\x73\x5c\x4d\x53\x56\x43\x5c\x31\x34\x2e\x33\x37\x2e\x33\x32\x37\x30\x35\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x78" L"\x75\x74\x69\x6c\x69\x74\x79", 1057, 0 ); } while ( false ); }; } while ( false );

        ( void ) _COff;

        _It . _Verify_offset ( static_cast < _IDiff > ( _Off ) );
        return static_cast < _Iter && > ( _It ) . _Unwrapped ( );
    } else if constexpr ( _Unwrappable_for_unverified_v < _Iter > ) {

        return static_cast < _Iter && > ( _It ) . _Unwrapped ( );
    } else {

        return static_cast < _Iter && > ( _It );
    }
}
#line 1071 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\xutility"
template< class _Iter, class _UIter, class  = void> constexpr bool 
#line 1072
_Wrapped_seekable_v = false; 
#line 1074
template< class _Iter, class _UIter> constexpr bool 
#line 1076
_Wrapped_seekable_v< _Iter, _UIter, void_t< decltype(std::declval< _Iter &> ()._Seek_to(std::declval< _UIter> ()))> >  = true; 
#line 1079
template < class _Iter, class _UIter >
constexpr void _Seek_wrapped ( _Iter & _It, _UIter && _UIt ) {
    if constexpr ( _Wrapped_seekable_v < _Iter, _UIter > ) {
        _It . _Seek_to ( :: std :: forward < _UIter > ( _UIt ) );
    } else {
        _It = :: std :: forward < _UIter > ( _UIt );
    }
}
#line 1140 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\xutility"
template < class _Checked, class _Iter >
[ [ nodiscard ] ] constexpr auto _Idl_distance ( const _Iter & _First, const _Iter & _Last ) {

    if constexpr ( _Is_ranges_random_iter_v < _Iter > ) {
        return static_cast < _Iter_diff_t < _Checked >> ( _Last - _First );
    } else {
        return _Distance_unknown { };
    }
}
#line 1150
template< class _Elem, bool _Is_enum = is_enum_v< _Elem> > 
#line 1151
struct _Unwrap_enum { 
#line 1152
using type = underlying_type_t< _Elem> ; 
#line 1153
}; 
#line 1155
template< class _Elem> 
#line 1156
struct _Unwrap_enum< _Elem, false>  { 
#line 1157
using type = _Elem; 
#line 1158
}; 
#line 1160
template< class _Elem> using _Unwrap_enum_t = typename _Unwrap_enum< _Elem> ::type; 
#line 1174 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\xutility"
template < class _Pr, class _Ty1, class _Ty2,
    enable_if_t < is_same_v < _Remove_cvref_t < _Ty1 >, _Remove_cvref_t < _Ty2 > >, int > = 0 >
constexpr bool _Debug_lt_pred ( _Pr && _Pred, _Ty1 && _Left, _Ty2 && _Right ) noexcept (
    noexcept ( _Pred ( _Left, _Right ) ) && noexcept ( _Pred ( _Right, _Left ) ) ) {

    const auto _Result = static_cast < bool > ( _Pred ( _Left, _Right ) );
    if ( _Result ) {
        do { if ( ! _Pred ( _Right, _Left ) ) { } else { do { ( void ) ( ( 1 != _CrtDbgReport ( 2, "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\xutility", 1181, 0, "%s", "invalid comparator" ) ) || ( __debugbreak ( ), 0 ) ); :: _invalid_parameter ( L"\x22\x69\x6e\x76\x61\x6c\x69\x64\x20\x63\x6f\x6d\x70\x61\x72\x61\x74\x6f\x72\x22", L"", L"\x45\x3a\x5c\x56\x69\x73\x75\x61\x6c\x53\x74\x75\x64\x69\x6f\x5c\x32\x30\x32\x32\x5c\x50\x72\x65\x76\x69\x65\x77\x5c\x56\x43\x5c" L"\x54\x6f\x6f\x6c\x73\x5c\x4d\x53\x56\x43\x5c\x31\x34\x2e\x33\x37\x2e\x33\x32\x37\x30\x35\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x78" L"\x75\x74\x69\x6c\x69\x74\x79", 1181, 0 ); } while ( false ); }; } while ( false );
    }

    return _Result;
}
#line 1187
template < class _Pr, class _Ty1, class _Ty2,
    enable_if_t < ! is_same_v < _Remove_cvref_t < _Ty1 >, _Remove_cvref_t < _Ty2 > >, int > = 0 >
constexpr bool _Debug_lt_pred ( _Pr && _Pred, _Ty1 && _Left, _Ty2 && _Right ) noexcept ( noexcept ( _Pred ( _Left, _Right ) ) ) {

    return static_cast < bool > ( _Pred ( _Left, _Right ) );
}
#line 1194
template < class _InIt, class _Sentinel, class _Pr >
constexpr void _Debug_order_unchecked ( _InIt _First, _Sentinel _Last, _Pr && _Pred ) {

    if constexpr ( _Is_ranges_fwd_iter_v < _InIt > ) {
        if ( _First != _Last ) {
            for ( auto _Next = _First; ++ _Next != _Last; _First = _Next ) {
                do { if ( ! static_cast < bool > ( _Pred ( * _Next, * _First ) ) ) { } else { do { ( void ) ( ( 1 != _CrtDbgReport ( 2, "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\xutility", 1200, 0, "%s", "sequence not ordered" ) ) || ( __debugbreak ( ), 0 ) ); :: _invalid_parameter ( L"\x22\x73\x65\x71\x75\x65\x6e\x63\x65\x20\x6e\x6f\x74\x20\x6f\x72\x64\x65\x72\x65\x64\x22", L"", L"\x45\x3a\x5c\x56\x69\x73\x75\x61\x6c\x53\x74\x75\x64\x69\x6f\x5c\x32\x30\x32\x32\x5c\x50\x72\x65\x76\x69\x65\x77\x5c\x56\x43\x5c" L"\x54\x6f\x6f\x6c\x73\x5c\x4d\x53\x56\x43\x5c\x31\x34\x2e\x33\x37\x2e\x33\x32\x37\x30\x35\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x78" L"\x75\x74\x69\x6c\x69\x74\x79", 1200, 0 ); } while ( false ); }; } while ( false );
            }
        }
    }
}
#line 1206
template < class _OtherIt, class _InIt, class _Pr >
constexpr void _Debug_order_set_unchecked ( _InIt _First, _InIt _Last, _Pr && _Pred ) {

    if constexpr ( is_same_v < _Iter_value_t < _OtherIt >, _Iter_value_t < _InIt >> ) {
        _Debug_order_unchecked ( _First, _Last, _Pred );
    }
}
#line 1216 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\xutility"
template < class _InIt, class _Diff >
inline void advance ( _InIt & _Where, _Diff _Off ) {
    if constexpr ( _Is_ranges_random_iter_v < _InIt > ) {
        _Where += _Off;
    } else {
        if constexpr ( is_signed_v < _Diff > && ! _Is_ranges_bidi_iter_v < _InIt > ) {
            do { if ( _Off >= 0 ) { } else { do { ( void ) ( ( 1 != _CrtDbgReport ( 2, "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\xutility", 1222, 0, "%s", "negative advance of non-bidirectional iterator" ) ) || ( __debugbreak ( ), 0 ) ); :: _invalid_parameter ( L"\x22\x6e\x65\x67\x61\x74\x69\x76\x65\x20\x61\x64\x76\x61\x6e\x63\x65\x20\x6f\x66\x20\x6e\x6f\x6e\x2d\x62\x69\x64\x69\x72\x65\x63" L"\x74\x69\x6f\x6e\x61\x6c\x20\x69\x74\x65\x72\x61\x74\x6f\x72\x22", L"", L"\x45\x3a\x5c\x56\x69\x73\x75\x61\x6c\x53\x74\x75\x64\x69\x6f\x5c\x32\x30\x32\x32\x5c\x50\x72\x65\x76\x69\x65\x77\x5c\x56\x43\x5c" L"\x54\x6f\x6f\x6c\x73\x5c\x4d\x53\x56\x43\x5c\x31\x34\x2e\x33\x37\x2e\x33\x32\x37\x30\x35\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x78" L"\x75\x74\x69\x6c\x69\x74\x79", 1222, 0 ); } while ( false ); }; } while ( false );
        }

        decltype ( auto ) _UWhere = _Get_unwrapped_n ( :: std :: move ( _Where ), _Off );
        constexpr bool _Need_rewrap = ! is_reference_v < decltype ( _Get_unwrapped_n ( :: std :: move ( _Where ), _Off ) ) >;

        if constexpr ( is_signed_v < _Diff > && _Is_ranges_bidi_iter_v < _InIt > ) {
            for (; _Off < 0; ++ _Off ) {
                -- _UWhere;
            }
        }

        for (; 0 < _Off; -- _Off ) {
            ++ _UWhere;
        }

        if constexpr ( _Need_rewrap ) {
            _Seek_wrapped ( _Where, :: std :: move ( _UWhere ) );
        }
    }
}
#line 1244
template < class _InIt >
[ [ nodiscard ] ] inline _Iter_diff_t < _InIt > distance ( _InIt _First, _InIt _Last ) {
    if constexpr ( _Is_ranges_random_iter_v < _InIt > ) {
        return _Last - _First;
    } else {
        _Adl_verify_range ( _First, _Last );
        auto _UFirst = _Get_unwrapped ( _First );
        const auto _ULast = _Get_unwrapped ( _Last );
        _Iter_diff_t < _InIt > _Off = 0;
        for (; _UFirst != _ULast; ++ _UFirst ) {
            ++ _Off;
        }

        return _Off;
    }
}
#line 1261
template < class _InIt >
constexpr _InIt _Next_iter ( _InIt _First ) {
    return ++ _First;
}
#line 1266
template < class _InIt >
[ [ nodiscard ] ] inline _InIt next ( _InIt _First, _Iter_diff_t < _InIt > _Off = 1 ) {
    static_assert ( _Is_ranges_input_iter_v < _InIt >, "next requires input iterator" );

    :: std :: advance ( _First, _Off );
    return _First;
}
#line 1274
template < class _BidIt >
constexpr _BidIt _Prev_iter ( _BidIt _First ) {
    return -- _First;
}
#line 1279
template < class _BidIt >
[ [ nodiscard ] ] inline _BidIt prev ( _BidIt _First, _Iter_diff_t < _BidIt > _Off = 1 ) {
    static_assert ( _Is_ranges_bidi_iter_v < _BidIt >, "prev requires bidirectional iterator" );

    :: std :: advance ( _First, - _Off );
    return _First;
}
#line 1287
template< class _Iter, class _Pointer, bool  = is_pointer_v< _Remove_cvref_t< _Iter> > > constexpr bool 
#line 1288
_Has_nothrow_operator_arrow = _Is_nothrow_convertible_v< _Iter, _Pointer, is_convertible_v< _Iter, _Pointer> , is_void_v< _Pointer> > ; 
#line 1290
template< class _Iter, class _Pointer> constexpr bool 
#line 1291
_Has_nothrow_operator_arrow< _Iter, _Pointer, false>  = noexcept(_Fake_copy_init< _Pointer> (std::declval< _Iter> ().operator->())); 
#line 1294
template < class _BidIt >
class reverse_iterator {
public :
    using iterator_type = _BidIt;







    using iterator_category = _Iter_cat_t < _BidIt >;

    using value_type = _Iter_value_t < _BidIt >;
    using difference_type = _Iter_diff_t < _BidIt >;
    using pointer = typename iterator_traits < _BidIt > :: pointer;
    using reference = _Iter_ref_t < _BidIt >;

    template < class >
    friend class reverse_iterator;

    inline reverse_iterator ( ) = default;

    inline explicit reverse_iterator ( _BidIt _Right ) noexcept (
        is_nothrow_move_constructible_v < _BidIt > )
        : current ( :: std :: move ( _Right ) ) { }


    template < class _Other >



    inline reverse_iterator ( const reverse_iterator < _Other > & _Right ) noexcept (
        is_nothrow_constructible_v < _BidIt, const _Other & > )
        : current ( _Right . current ) { }

    template < class _Other >




    inline reverse_iterator & operator = ( const reverse_iterator < _Other > & _Right ) noexcept (
        is_nothrow_assignable_v < _BidIt &, const _Other & > ) {
        current = _Right . current;
        return * this;
    }


    [ [ nodiscard ] ] inline _BidIt base ( ) const noexcept ( is_nothrow_copy_constructible_v < _BidIt > ) {
        return current;
    }

    [ [ nodiscard ] ] inline reference operator * ( ) const
        noexcept ( is_nothrow_copy_constructible_v < _BidIt > && noexcept ( * -- ( :: std :: declval < _BidIt & > ( ) ) ) ) {
        _BidIt _Tmp = current;
        return * -- _Tmp;
    }

    [ [ nodiscard ] ] inline pointer operator -> ( ) const
        noexcept ( is_nothrow_copy_constructible_v < _BidIt > && noexcept ( -- ( :: std :: declval < _BidIt & > ( ) ) )
                 && _Has_nothrow_operator_arrow < _BidIt &, pointer > )



    {
        _BidIt _Tmp = current;
        -- _Tmp;
        if constexpr ( is_pointer_v < _BidIt > ) {
            return _Tmp;
        } else {
            return _Tmp . operator -> ( );
        }
    }

    inline reverse_iterator & operator ++ ( ) noexcept ( noexcept ( -- current ) ) {
        -- current;
        return * this;
    }

    inline reverse_iterator operator ++ ( int ) noexcept (
        is_nothrow_copy_constructible_v < _BidIt > && noexcept ( -- current ) ) {
        reverse_iterator _Tmp = * this;
        -- current;
        return _Tmp;
    }

    inline reverse_iterator & operator -- ( ) noexcept ( noexcept ( ++ current ) ) {
        ++ current;
        return * this;
    }

    inline reverse_iterator operator -- ( int ) noexcept (
        is_nothrow_copy_constructible_v < _BidIt > && noexcept ( ++ current ) ) {
        reverse_iterator _Tmp = * this;
        ++ current;
        return _Tmp;
    }

    [ [ nodiscard ] ] inline reverse_iterator operator + ( const difference_type _Off ) const
        noexcept ( noexcept ( reverse_iterator ( current - _Off ) ) ) {
        return reverse_iterator ( current - _Off );
    }

    inline reverse_iterator & operator += ( const difference_type _Off ) noexcept (
        noexcept ( current -= _Off ) ) {
        current -= _Off;
        return * this;
    }

    [ [ nodiscard ] ] inline reverse_iterator operator - ( const difference_type _Off ) const
        noexcept ( noexcept ( reverse_iterator ( current + _Off ) ) ) {
        return reverse_iterator ( current + _Off );
    }

    inline reverse_iterator & operator -= ( const difference_type _Off ) noexcept (
        noexcept ( current += _Off ) ) {
        current += _Off;
        return * this;
    }

    [ [ nodiscard ] ] inline reference operator [ ] ( const difference_type _Off ) const
        noexcept ( noexcept ( _Fake_copy_init < reference > ( current [ _Off ] ) ) ) {
        return current [ static_cast < difference_type > ( - _Off - 1 ) ];
    }





















    using _Prevent_inheriting_unwrap = reverse_iterator;

    template < class _BidIt2, enable_if_t < _Range_verifiable_v < _BidIt, _BidIt2 >, int > = 0 >
    friend constexpr void _Verify_range (
        const reverse_iterator & _First, const reverse_iterator < _BidIt2 > & _Last ) noexcept {
        _Verify_range ( _Last . _Get_current ( ), _First . current );
    }

    template < class _BidIt2 = _BidIt, enable_if_t < _Offset_verifiable_v < _BidIt2 >, int > = 0 >
    constexpr void _Verify_offset ( const difference_type _Off ) const noexcept {
        do { if ( _Off != _Min_possible_v < difference_type > ) { } else { do { ( void ) ( ( 1 != _CrtDbgReport ( 2, "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\xutility", 1449, 0, "%s", "integer overflow" ) ) || ( __debugbreak ( ), 0 ) ); :: _invalid_parameter ( L"\x22\x69\x6e\x74\x65\x67\x65\x72\x20\x6f\x76\x65\x72\x66\x6c\x6f\x77\x22", L"", L"\x45\x3a\x5c\x56\x69\x73\x75\x61\x6c\x53\x74\x75\x64\x69\x6f\x5c\x32\x30\x32\x32\x5c\x50\x72\x65\x76\x69\x65\x77\x5c\x56\x43\x5c" L"\x54\x6f\x6f\x6c\x73\x5c\x4d\x53\x56\x43\x5c\x31\x34\x2e\x33\x37\x2e\x33\x32\x37\x30\x35\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x78" L"\x75\x74\x69\x6c\x69\x74\x79", 1449, 0 ); } while ( false ); }; } while ( false );
        current . _Verify_offset ( - _Off );
    }

    template < class _BidIt2 = _BidIt, enable_if_t < _Unwrappable_v < const _BidIt2 & >, int > = 0 >
    [ [ nodiscard ] ] constexpr reverse_iterator < _Unwrapped_t < const _BidIt2 & >> _Unwrapped ( ) const & noexcept (
        noexcept ( static_cast < reverse_iterator < _Unwrapped_t < const _BidIt2 & >> > ( current . _Unwrapped ( ) ) ) ) {
        return static_cast < reverse_iterator < _Unwrapped_t < const _BidIt2 & >> > ( current . _Unwrapped ( ) );
    }
    template < class _BidIt2 = _BidIt, enable_if_t < _Unwrappable_v < _BidIt2 >, int > = 0 >
    [ [ nodiscard ] ] constexpr reverse_iterator < _Unwrapped_t < _BidIt2 >> _Unwrapped ( ) && noexcept (
        noexcept ( static_cast < reverse_iterator < _Unwrapped_t < _BidIt2 >> > ( :: std :: move ( current ) . _Unwrapped ( ) ) ) ) {
        return static_cast < reverse_iterator < _Unwrapped_t < _BidIt2 >> > ( :: std :: move ( current ) . _Unwrapped ( ) );
    }

    static constexpr bool _Unwrap_when_unverified = _Do_unwrap_when_unverified_v < _BidIt >;

    template < class _Src, enable_if_t < _Wrapped_seekable_v < _BidIt, const _Src & >, int > = 0 >
    constexpr void _Seek_to ( const reverse_iterator < _Src > & _It ) noexcept ( noexcept ( current . _Seek_to ( _It . current ) ) ) {
        current . _Seek_to ( _It . current );
    }

    [ [ nodiscard ] ] constexpr const _BidIt & _Get_current ( ) const noexcept {
        return current;
    }

protected :
    _BidIt current { };
};
#line 1479 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\xutility"
template < class _BidIt1, class _BidIt2 >
[ [ nodiscard ] ] inline bool
    operator == ( const reverse_iterator < _BidIt1 > & _Left, const reverse_iterator < _BidIt2 > & _Right ) noexcept (
        noexcept ( _Fake_copy_init < bool > ( _Left . _Get_current ( ) == _Right . _Get_current ( ) ) ) )







{
    return _Left . _Get_current ( ) == _Right . _Get_current ( );
}
#line 1494
template < class _BidIt1, class _BidIt2 >
[ [ nodiscard ] ] inline bool
    operator != ( const reverse_iterator < _BidIt1 > & _Left, const reverse_iterator < _BidIt2 > & _Right ) noexcept (
        noexcept ( _Fake_copy_init < bool > ( _Left . _Get_current ( ) != _Right . _Get_current ( ) ) ) )







{
    return _Left . _Get_current ( ) != _Right . _Get_current ( );
}
#line 1509
template < class _BidIt1, class _BidIt2 >
[ [ nodiscard ] ] inline bool
    operator < ( const reverse_iterator < _BidIt1 > & _Left, const reverse_iterator < _BidIt2 > & _Right ) noexcept (
        noexcept ( _Fake_copy_init < bool > ( _Left . _Get_current ( ) > _Right . _Get_current ( ) ) ) )







{
    return _Left . _Get_current ( ) > _Right . _Get_current ( );
}
#line 1524
template < class _BidIt1, class _BidIt2 >
[ [ nodiscard ] ] inline bool
    operator > ( const reverse_iterator < _BidIt1 > & _Left, const reverse_iterator < _BidIt2 > & _Right ) noexcept (
        noexcept ( _Fake_copy_init < bool > ( _Left . _Get_current ( ) < _Right . _Get_current ( ) ) ) )







{
    return _Left . _Get_current ( ) < _Right . _Get_current ( );
}
#line 1539
template < class _BidIt1, class _BidIt2 >
[ [ nodiscard ] ] inline bool
    operator <= ( const reverse_iterator < _BidIt1 > & _Left, const reverse_iterator < _BidIt2 > & _Right ) noexcept (
        noexcept ( _Fake_copy_init < bool > ( _Left . _Get_current ( ) >= _Right . _Get_current ( ) ) ) )







{
    return _Left . _Get_current ( ) >= _Right . _Get_current ( );
}
#line 1554
template < class _BidIt1, class _BidIt2 >
[ [ nodiscard ] ] inline bool
    operator >= ( const reverse_iterator < _BidIt1 > & _Left, const reverse_iterator < _BidIt2 > & _Right ) noexcept (
        noexcept ( _Fake_copy_init < bool > ( _Left . _Get_current ( ) <= _Right . _Get_current ( ) ) ) )







{
    return _Left . _Get_current ( ) <= _Right . _Get_current ( );
}
#line 1578
template < class _BidIt1, class _BidIt2 >
[ [ nodiscard ] ] inline auto
    operator - ( const reverse_iterator < _BidIt1 > & _Left, const reverse_iterator < _BidIt2 > & _Right ) noexcept (
        noexcept ( _Right . _Get_current ( ) - _Left . _Get_current ( ) ) )
    -> decltype ( _Right . _Get_current ( ) - _Left . _Get_current ( ) ) {
    return _Right . _Get_current ( ) - _Left . _Get_current ( );
}
#line 1586
template < class _BidIt >
[ [ nodiscard ] ] inline reverse_iterator < _BidIt > operator + ( typename reverse_iterator < _BidIt > :: difference_type _Off,
    const reverse_iterator < _BidIt > & _Right ) noexcept ( noexcept ( _Right + _Off ) ) {
    return _Right + _Off;
}
#line 1592
template < class _BidIt >
[ [ nodiscard ] ] inline reverse_iterator < _BidIt > make_reverse_iterator ( _BidIt _Iter ) noexcept (
    is_nothrow_move_constructible_v < _BidIt > ) {
    return reverse_iterator < _BidIt > ( :: std :: move ( _Iter ) );
}
#line 1604
template < class _Container >
[ [ nodiscard ] ] inline auto begin ( _Container & _Cont ) noexcept ( noexcept ( _Cont . begin ( ) ) )
    -> decltype ( _Cont . begin ( ) ) {
    return _Cont . begin ( );
}
#line 1610
template < class _Container >
[ [ nodiscard ] ] inline auto begin ( const _Container & _Cont ) noexcept ( noexcept ( _Cont . begin ( ) ) )
    -> decltype ( _Cont . begin ( ) ) {
    return _Cont . begin ( );
}
#line 1616
template < class _Container >
[ [ nodiscard ] ] inline auto end ( _Container & _Cont ) noexcept ( noexcept ( _Cont . end ( ) ) )
    -> decltype ( _Cont . end ( ) ) {
    return _Cont . end ( );
}
#line 1622
template < class _Container >
[ [ nodiscard ] ] inline auto end ( const _Container & _Cont ) noexcept ( noexcept ( _Cont . end ( ) ) )
    -> decltype ( _Cont . end ( ) ) {
    return _Cont . end ( );
}
#line 1628
template < class _Ty, size_t _Size >
[ [ nodiscard ] ] constexpr _Ty * begin ( _Ty ( & _Array ) [ _Size ] ) noexcept {
    return _Array;
}
#line 1633
template < class _Ty, size_t _Size >
[ [ nodiscard ] ] constexpr _Ty * end ( _Ty ( & _Array ) [ _Size ] ) noexcept {
    return _Array + _Size;
}
#line 1638
template < class _Container >
[ [ nodiscard ] ] constexpr auto cbegin ( const _Container & _Cont ) noexcept ( noexcept ( :: std :: begin ( _Cont ) ) )
    -> decltype ( :: std :: begin ( _Cont ) ) {
    return :: std :: begin ( _Cont );
}
#line 1644
template < class _Container >
[ [ nodiscard ] ] constexpr auto cend ( const _Container & _Cont ) noexcept ( noexcept ( :: std :: end ( _Cont ) ) )
    -> decltype ( :: std :: end ( _Cont ) ) {
    return :: std :: end ( _Cont );
}
#line 1650
template < class _Container >
[ [ nodiscard ] ] inline auto rbegin ( _Container & _Cont ) noexcept ( noexcept ( _Cont . rbegin ( ) ) )
    -> decltype ( _Cont . rbegin ( ) ) {
    return _Cont . rbegin ( );
}
#line 1656
template < class _Container >
[ [ nodiscard ] ] inline auto rbegin ( const _Container & _Cont ) noexcept ( noexcept ( _Cont . rbegin ( ) ) )
    -> decltype ( _Cont . rbegin ( ) ) {
    return _Cont . rbegin ( );
}
#line 1662
template < class _Container >
[ [ nodiscard ] ] inline auto rend ( _Container & _Cont ) noexcept ( noexcept ( _Cont . rend ( ) ) )
    -> decltype ( _Cont . rend ( ) ) {
    return _Cont . rend ( );
}
#line 1668
template < class _Container >
[ [ nodiscard ] ] inline auto rend ( const _Container & _Cont ) noexcept ( noexcept ( _Cont . rend ( ) ) )
    -> decltype ( _Cont . rend ( ) ) {
    return _Cont . rend ( );
}
#line 1674
template < class _Ty, size_t _Size >
[ [ nodiscard ] ] inline reverse_iterator < _Ty * > rbegin ( _Ty ( & _Array ) [ _Size ] ) noexcept {
    return reverse_iterator < _Ty * > ( _Array + _Size );
}
#line 1679
template < class _Ty, size_t _Size >
[ [ nodiscard ] ] inline reverse_iterator < _Ty * > rend ( _Ty ( & _Array ) [ _Size ] ) noexcept {
    return reverse_iterator < _Ty * > ( _Array );
}
#line 1684
template < class _Elem >
[ [ nodiscard ] ] inline reverse_iterator < const _Elem * > rbegin ( initializer_list < _Elem > _Ilist ) noexcept
 {
    return reverse_iterator < const _Elem * > ( _Ilist . end ( ) );
}
#line 1690
template < class _Elem >
[ [ nodiscard ] ] inline reverse_iterator < const _Elem * > rend ( initializer_list < _Elem > _Ilist ) noexcept
 {
    return reverse_iterator < const _Elem * > ( _Ilist . begin ( ) );
}
#line 1696
template < class _Container >
[ [ nodiscard ] ] inline auto crbegin ( const _Container & _Cont ) noexcept ( noexcept ( :: std :: rbegin ( _Cont ) ) )
    -> decltype ( :: std :: rbegin ( _Cont ) ) {
    return :: std :: rbegin ( _Cont );
}
#line 1702
template < class _Container >
[ [ nodiscard ] ] inline auto crend ( const _Container & _Cont ) noexcept ( noexcept ( :: std :: rend ( _Cont ) ) )
    -> decltype ( :: std :: rend ( _Cont ) ) {
    return :: std :: rend ( _Cont );
}
#line 1708
template < class _Container >
[ [ nodiscard ] ] constexpr auto size ( const _Container & _Cont ) noexcept ( noexcept ( _Cont . size ( ) ) )
    -> decltype ( _Cont . size ( ) ) {
    return _Cont . size ( );
}
#line 1714
template < class _Ty, size_t _Size >
[ [ nodiscard ] ] constexpr size_t size ( const _Ty ( & ) [ _Size ] ) noexcept {
    return _Size;
}
#line 1734 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\xutility"
template < class _Container >
[ [ nodiscard ( "This function returns a bool indicating whether the container or container-like object is empty and has no other effects. It is " "not useful to call this function and discard the return value." ) ] ] constexpr auto empty ( const _Container & _Cont ) noexcept (
    noexcept ( _Cont . empty ( ) ) )
    -> decltype ( _Cont . empty ( ) ) {
    return _Cont . empty ( );
}
#line 1741
template < class _Ty, size_t _Size >
[ [ nodiscard ( "This function returns a bool indicating whether the container or container-like object is empty and has no other effects. It is " "not useful to call this function and discard the return value." ) ] ] constexpr bool empty ( const _Ty ( & ) [ _Size ] ) noexcept {
    return false;
}
#line 1746
template < class _Elem >
[ [ nodiscard ( "This function returns a bool indicating whether the container or container-like object is empty and has no other effects. It is " "not useful to call this function and discard the return value." ) ] ] constexpr bool empty ( initializer_list < _Elem > _Ilist ) noexcept {
    return _Ilist . size ( ) == 0;
}
#line 1751
template < class _Container >
[ [ nodiscard ] ] constexpr auto data ( _Container & _Cont ) noexcept ( noexcept ( _Cont . data ( ) ) )
    -> decltype ( _Cont . data ( ) ) {
    return _Cont . data ( );
}
#line 1757
template < class _Container >
[ [ nodiscard ] ] constexpr auto data ( const _Container & _Cont ) noexcept ( noexcept ( _Cont . data ( ) ) )
    -> decltype ( _Cont . data ( ) ) {
    return _Cont . data ( );
}
#line 1763
template < class _Ty, size_t _Size >
[ [ nodiscard ] ] constexpr _Ty * data ( _Ty ( & _Array ) [ _Size ] ) noexcept {
    return _Array;
}
#line 1768
template < class _Elem >
[ [ nodiscard ] ] constexpr const _Elem * data ( initializer_list < _Elem > _Ilist ) noexcept {
    return _Ilist . begin ( );
}
#line 3902
struct _Container_proxy; 
#line 3903
struct _Iterator_base12; 
#line 3905
struct _Default_sentinel { }; 
#line 3923
template< class _Iter> 
#line 3924
struct _Move_iterator_category { 
#line 3925
using iterator_category = _Iter_cat_t< _Iter> ; 
#line 3926
}; 
#line 3929 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\xutility"
template < class _Iter >
class move_iterator : public _Move_iterator_category < _Iter > {
public :
    using iterator_type = _Iter;
    using value_type = _Iter_value_t < _Iter >;
    using difference_type = _Iter_diff_t < _Iter >;
    using pointer = _Iter;




















    using reference =
        conditional_t < is_reference_v < _Iter_ref_t < _Iter >>, remove_reference_t < _Iter_ref_t < _Iter >> &&, _Iter_ref_t < _Iter >>;


    inline move_iterator ( ) = default;

    inline explicit move_iterator ( _Iter _Right ) noexcept ( is_nothrow_move_constructible_v < _Iter > )
        : _Current ( :: std :: move ( _Right ) ) { }


    template < class _Other >



    inline move_iterator ( const move_iterator < _Other > & _Right ) noexcept (
        is_nothrow_constructible_v < _Iter, const _Other & > )
        : _Current ( _Right . base ( ) ) { }

    template < class _Other >




    inline move_iterator & operator = ( const move_iterator < _Other > & _Right ) noexcept (
        is_nothrow_assignable_v < _Iter &, const _Other & > ) {
        _Current = _Right . base ( );
        return * this;
    }










    [ [ nodiscard ] ] inline iterator_type base ( ) const
        noexcept ( is_nothrow_copy_constructible_v < _Iter > ) {
        return _Current;
    }


    [ [ nodiscard ] ] inline reference operator * ( ) const





        noexcept ( noexcept ( static_cast < reference > ( * _Current ) ) ) {
        return static_cast < reference > ( * _Current );
    }


     [ [ nodiscard ] ] inline pointer operator -> ( ) const
        noexcept ( is_nothrow_copy_constructible_v < _Iter > ) {
        return _Current;
    }

    inline move_iterator & operator ++ ( ) noexcept ( noexcept ( ++ _Current ) ) {
        ++ _Current;
        return * this;
    }

    inline auto operator ++ ( int ) noexcept (
        is_nothrow_copy_constructible_v < _Iter > && noexcept ( ++ _Current ) ) {



            move_iterator _Tmp = * this;
            ++ _Current;
            return _Tmp;





    }

    inline move_iterator & operator -- ( ) noexcept ( noexcept ( -- _Current ) ) {
        -- _Current;
        return * this;
    }

    inline move_iterator operator -- ( int ) noexcept (
        is_nothrow_copy_constructible_v < _Iter > && noexcept ( -- _Current ) ) {
        move_iterator _Tmp = * this;
        -- _Current;
        return _Tmp;
    }

    template < class _Iter2 = _Iter >
    [ [ nodiscard ] ] auto operator == ( _Default_sentinel _Sentinel ) const noexcept
        -> decltype ( :: std :: declval < const _Iter2 & > ( ) == _Sentinel ) {
        return _Current == _Sentinel;
    }

    template < class _Iter2 = _Iter >
    [ [ nodiscard ] ] auto operator != ( _Default_sentinel _Sentinel ) const noexcept
        -> decltype ( :: std :: declval < const _Iter2 & > ( ) != _Sentinel ) {
        return _Current != _Sentinel;
    }

    [ [ nodiscard ] ] inline move_iterator operator + ( const difference_type _Off ) const
        noexcept ( noexcept ( move_iterator ( _Current + _Off ) ) ) {
        return move_iterator ( _Current + _Off );
    }

    inline move_iterator & operator += ( const difference_type _Off ) noexcept (
        noexcept ( _Current += _Off ) ) {
        _Current += _Off;
        return * this;
    }

    [ [ nodiscard ] ] inline move_iterator operator - ( const difference_type _Off ) const
        noexcept ( noexcept ( move_iterator ( _Current - _Off ) ) ) {
        return move_iterator ( _Current - _Off );
    }

    inline move_iterator & operator -= ( const difference_type _Off ) noexcept (
        noexcept ( _Current -= _Off ) ) {
        _Current -= _Off;
        return * this;
    }

    [ [ nodiscard ] ] inline reference operator [ ] ( const difference_type _Off ) const




        noexcept ( noexcept ( :: std :: move ( _Current [ _Off ] ) ) ) {
        return :: std :: move ( _Current [ _Off ] );

    }











































    template < class _Iter2, enable_if_t < _Range_verifiable_v < _Iter, _Iter2 >, int > = 0 >
    friend constexpr void _Verify_range ( const move_iterator & _First, const move_iterator < _Iter2 > & _Last ) noexcept {
        _Verify_range ( _First . _Current, _Last . _Get_current ( ) );
    }







    using _Prevent_inheriting_unwrap = move_iterator;

    template < class _Iter2 = iterator_type, enable_if_t < _Offset_verifiable_v < _Iter2 >, int > = 0 >
    constexpr void _Verify_offset ( const difference_type _Off ) const noexcept {
        _Current . _Verify_offset ( _Off );
    }

    template < class _Iter2 = iterator_type, enable_if_t < _Unwrappable_v < const _Iter2 & >, int > = 0 >
    [ [ nodiscard ] ] constexpr move_iterator < _Unwrapped_t < const _Iter2 & >> _Unwrapped ( ) const & noexcept (
        noexcept ( static_cast < move_iterator < _Unwrapped_t < const _Iter2 & >> > ( _Current . _Unwrapped ( ) ) ) ) {
        return static_cast < move_iterator < _Unwrapped_t < const _Iter2 & >> > ( _Current . _Unwrapped ( ) );
    }
    template < class _Iter2 = iterator_type, enable_if_t < _Unwrappable_v < _Iter2 >, int > = 0 >
    [ [ nodiscard ] ] constexpr move_iterator < _Unwrapped_t < _Iter2 >> _Unwrapped ( ) && noexcept (
        noexcept ( static_cast < move_iterator < _Unwrapped_t < _Iter2 >> > ( :: std :: move ( _Current ) . _Unwrapped ( ) ) ) ) {
        return static_cast < move_iterator < _Unwrapped_t < _Iter2 >> > ( :: std :: move ( _Current ) . _Unwrapped ( ) );
    }

    static constexpr bool _Unwrap_when_unverified = _Do_unwrap_when_unverified_v < iterator_type >;

    template < class _Src, enable_if_t < _Wrapped_seekable_v < iterator_type, const _Src & >, int > = 0 >
    constexpr void _Seek_to ( const move_iterator < _Src > & _It ) noexcept ( noexcept ( _Current . _Seek_to ( _It . _Get_current ( ) ) ) ) {
        _Current . _Seek_to ( _It . _Get_current ( ) );
    }
    template < class _Src, enable_if_t < _Wrapped_seekable_v < iterator_type, _Src >, int > = 0 >
    constexpr void _Seek_to ( move_iterator < _Src > && _It ) noexcept (
        noexcept ( _Current . _Seek_to ( :: std :: move ( _It ) . _Get_current ( ) ) ) ) {
        _Current . _Seek_to ( :: std :: move ( _It ) . _Get_current ( ) );
    }

    [ [ nodiscard ] ] constexpr const iterator_type & _Get_current ( ) const & noexcept {
        return _Current;
    }
    [ [ nodiscard ] ] constexpr iterator_type && _Get_current ( ) && noexcept {
        return :: std :: move ( _Current );
    }

private :
    iterator_type _Current { };
};
#line 4186 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\xutility"
template < class _Iter1, class _Iter2 >
[ [ nodiscard ] ] inline bool
    operator == ( const move_iterator < _Iter1 > & _Left, const move_iterator < _Iter2 > & _Right ) noexcept (
        noexcept ( _Fake_copy_init < bool > ( _Left . base ( ) == _Right . base ( ) ) ) )







{
    return _Left . base ( ) == _Right . base ( );
}
#line 4202
template < class _Iter1, class _Iter2 >
[ [ nodiscard ] ] inline bool operator != ( const move_iterator < _Iter1 > & _Left,
    const move_iterator < _Iter2 > & _Right ) noexcept ( noexcept ( _Left == _Right ) ) {
    return ! ( _Left == _Right );
}
#line 4209 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\xutility"
template < class _Iter1, class _Iter2 >
[ [ nodiscard ] ] inline bool
    operator < ( const move_iterator < _Iter1 > & _Left, const move_iterator < _Iter2 > & _Right ) noexcept (
        noexcept ( _Fake_copy_init < bool > ( _Left . base ( ) < _Right . base ( ) ) ) )







{
    return _Left . base ( ) < _Right . base ( );
}
#line 4224
template < class _Iter1, class _Iter2 >
[ [ nodiscard ] ] inline bool operator > ( const move_iterator < _Iter1 > & _Left,
    const move_iterator < _Iter2 > & _Right ) noexcept ( noexcept ( _Right < _Left ) )



{
    return _Right < _Left;
}
#line 4234
template < class _Iter1, class _Iter2 >
[ [ nodiscard ] ] inline bool operator <= ( const move_iterator < _Iter1 > & _Left,
    const move_iterator < _Iter2 > & _Right ) noexcept ( noexcept ( _Right < _Left ) )



{
    return ! ( _Right < _Left );
}
#line 4244
template < class _Iter1, class _Iter2 >
[ [ nodiscard ] ] inline bool operator >= ( const move_iterator < _Iter1 > & _Left,
    const move_iterator < _Iter2 > & _Right ) noexcept ( noexcept ( _Left < _Right ) )



{
    return ! ( _Left < _Right );
}
#line 4262
template < class _Iter1, class _Iter2 >
[ [ nodiscard ] ] inline auto operator - ( const move_iterator < _Iter1 > & _Left,
    const move_iterator < _Iter2 > & _Right ) noexcept ( noexcept ( _Left . base ( ) - _Right . base ( ) ) )
    -> decltype ( _Left . base ( ) - _Right . base ( ) ) {
    return _Left . base ( ) - _Right . base ( );
}
#line 4269
template < class _Iter >
[ [ nodiscard ] ] inline move_iterator < _Iter >
    operator + ( typename move_iterator < _Iter > :: difference_type _Off, const move_iterator < _Iter > & _Right ) noexcept (
        noexcept ( move_iterator < _Iter > ( _Right . base ( ) + _Off ) ) )







{
    return move_iterator < _Iter > ( _Right . base ( ) + _Off );
}
#line 4284
template < class _Iter >
[ [ nodiscard ] ] inline move_iterator < _Iter > make_move_iterator ( _Iter _It ) noexcept (
    is_nothrow_move_constructible_v < _Iter > ) {
    return move_iterator < _Iter > ( :: std :: move ( _It ) );
}
#line 4324
template< class _Iter> constexpr bool 
#line 4325
_Iterator_is_contiguous = is_pointer_v< _Iter> ; 
#line 4327
template < class _Iter >
[ [ nodiscard ] ] constexpr auto _To_address ( const _Iter & _Val ) noexcept {
    ;
    return _Val;
}
#line 4334 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\xutility"
template < class _Iter >
[ [ nodiscard ] ] constexpr auto _To_address ( const move_iterator < _Iter > & _Val ) noexcept {
    return _To_address ( _Val . base ( ) );
}
#line 4341
template< class _Iter1, class _Iter2> constexpr bool 
#line 4342
_Iterators_are_contiguous = _Iterator_is_contiguous< _Iter1>  && _Iterator_is_contiguous< _Iter2> ; 
#line 4345
template< class _Iter> constexpr bool 
#line 4346
_Iterator_is_volatile = is_volatile_v< remove_reference_t< _Iter_ref_t< _Iter> > > ; 
#line 4348
template< class _Source, class _Dest> constexpr bool 
#line 4349
_Is_pointer_address_convertible = (is_void_v< _Source>  || is_void_v< _Dest> ) || is_same_v< remove_cv_t< _Source> , remove_cv_t< _Dest> > ; 
#line 4358
template< class _Source, class _Dest, class _SourceRef, class _DestRef> 
#line 4359
struct _Trivial_cat { 
#line 4360
using _USource = _Unwrap_enum_t< _Source> ; 
#line 4361
using _UDest = _Unwrap_enum_t< _Dest> ; 
#line 4363
static constexpr bool _Same_size_and_compatible = (((sizeof(_Source) == sizeof(_Dest)) && (is_same_v< bool, _USource>  >= is_same_v< bool, _UDest> )) && ((is_same_v< _USource, _UDest>  || (is_integral_v< _USource>  && is_integral_v< _UDest> )) || (is_floating_point_v< _USource>  && is_floating_point_v< _UDest> ))); 
#line 4372
static constexpr bool _Bitcopy_constructible = (_Same_size_and_compatible && is_trivially_constructible_v< _Dest, _SourceRef> ); 
#line 4375
static constexpr bool _Bitcopy_assignable = (_Same_size_and_compatible && is_trivially_assignable_v< _DestRef, _SourceRef> ); 
#line 4377
}; 
#line 4379
template< class _Source, class _Dest, class _SourceRef, class _DestRef> 
#line 4380
struct _Trivial_cat< _Source *, _Dest *, _SourceRef, _DestRef>  { 
#line 4381
static constexpr bool _Bitcopy_constructible = (_Is_pointer_address_convertible< _Source, _Dest>  && is_trivially_constructible_v< _Dest *, _SourceRef> ); 
#line 4384
static constexpr bool _Bitcopy_assignable = (_Is_pointer_address_convertible< _Source, _Dest>  && is_trivially_assignable_v< _DestRef, _SourceRef> ); 
#line 4386
}; 
#line 4388
struct _False_trivial_cat { 
#line 4389
static constexpr bool _Bitcopy_constructible = false; 
#line 4390
static constexpr bool _Bitcopy_assignable = false; 
#line 4391
}; 
#line 4393
template< class _SourceIt, class _DestIt, bool 
#line 4394
_Are_contiguous = (_Iterators_are_contiguous< _SourceIt, _DestIt>  && (!_Iterator_is_volatile< _SourceIt> )) && (!_Iterator_is_volatile< _DestIt> )> 
#line 4396
struct _Iter_move_cat : public _Trivial_cat< _Iter_value_t< _SourceIt> , _Iter_value_t< _DestIt> , remove_reference_t< _Iter_ref_t< _SourceIt> >  &&, _Iter_ref_t< _DestIt> >  { 
#line 4397
}; 
#line 4399
template< class _SourceIt, class _DestIt> 
#line 4400
struct _Iter_move_cat< _SourceIt, _DestIt, false>  : public _False_trivial_cat { }; 
#line 4402
template< class _SourceIt, class _DestIt> 
#line 4403
struct _Iter_move_cat< move_iterator< _SourceIt> , _DestIt, false>  : public std::_Iter_move_cat< _SourceIt, _DestIt>  { }; 
#line 4405
template< class _SourceIt, class _DestIt, bool 
#line 4406
_Are_contiguous = (_Iterators_are_contiguous< _SourceIt, _DestIt>  && (!_Iterator_is_volatile< _SourceIt> )) && (!_Iterator_is_volatile< _DestIt> )> 
#line 4408
struct _Iter_copy_cat : public _Trivial_cat< _Iter_value_t< _SourceIt> , _Iter_value_t< _DestIt> , _Iter_ref_t< _SourceIt> , _Iter_ref_t< _DestIt> >  { 
#line 4409
}; 
#line 4411
template< class _SourceIt, class _DestIt> 
#line 4412
struct _Iter_copy_cat< _SourceIt, _DestIt, false>  : public _False_trivial_cat { }; 
#line 4414
template< class _SourceIt, class _DestIt> 
#line 4415
struct _Iter_copy_cat< move_iterator< _SourceIt> , _DestIt, false>  : public _Iter_move_cat< _SourceIt, _DestIt>  { }; 
#line 4417
template < class _Iter1, class _Sent1, class _Iter2 >
inline void _Verify_ranges_do_not_overlap ( const _Iter1 & _First1, const _Sent1 & _Last1, const _Iter2 & _First2 ) {

    if constexpr ( _Iterators_are_contiguous < _Iter1, _Iter2 >



    ) {






        const auto _Offset = _Last1 - _First1;
        const auto _Ptr1Offset = _Offset * sizeof ( * _To_address ( _First1 ) );
        const auto _Ptr2Offset = _Offset * sizeof ( * _To_address ( _First2 ) );


        const auto _PtrFirst1 = reinterpret_cast < const volatile char * > ( _To_address ( _First1 ) );
        const auto _PtrLast1 = _PtrFirst1 + _Ptr1Offset;
        const auto _PtrFirst2 = reinterpret_cast < const volatile char * > ( _To_address ( _First2 ) );
        const auto _PtrLast2 = _PtrFirst2 + _Ptr2Offset;
        do { if ( _PtrLast1 <= _PtrFirst2 || _PtrLast2 <= _PtrFirst1 ) { } else { do { ( void ) ( ( 1 != _CrtDbgReport ( 2, "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\xutility", 4440, 0, "%s", "ranges should not overlap each other" ) ) || ( __debugbreak ( ), 0 ) ); :: _invalid_parameter ( L"\x22\x72\x61\x6e\x67\x65\x73\x20\x73\x68\x6f\x75\x6c\x64\x20\x6e\x6f\x74\x20\x6f\x76\x65\x72\x6c\x61\x70\x20\x65\x61\x63\x68\x20" L"\x6f\x74\x68\x65\x72\x22", L"", L"\x45\x3a\x5c\x56\x69\x73\x75\x61\x6c\x53\x74\x75\x64\x69\x6f\x5c\x32\x30\x32\x32\x5c\x50\x72\x65\x76\x69\x65\x77\x5c\x56\x43\x5c" L"\x54\x6f\x6f\x6c\x73\x5c\x4d\x53\x56\x43\x5c\x31\x34\x2e\x33\x37\x2e\x33\x32\x37\x30\x35\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x78" L"\x75\x74\x69\x6c\x69\x74\x79", 4440, 0 ); } while ( false ); }; } while ( false );
    }





}
#line 4449 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\xutility"
template < class _CtgIt, class _OutCtgIt >
_OutCtgIt _Copy_memmove ( _CtgIt _First, _CtgIt _Last, _OutCtgIt _Dest ) {
    auto _FirstPtr = _To_address ( _First );
    auto _LastPtr = _To_address ( _Last );
    auto _DestPtr = _To_address ( _Dest );
    const char * const _First_ch = const_cast < const char * > ( reinterpret_cast < const volatile char * > ( _FirstPtr ) );
    const char * const _Last_ch = const_cast < const char * > ( reinterpret_cast < const volatile char * > ( _LastPtr ) );
    char * const _Dest_ch = const_cast < char * > ( reinterpret_cast < const volatile char * > ( _DestPtr ) );
    const auto _Count = static_cast < size_t > ( _Last_ch - _First_ch );
    :: memmove ( _Dest_ch, _First_ch, _Count );
    if constexpr ( is_pointer_v < _OutCtgIt > ) {
        return reinterpret_cast < _OutCtgIt > ( _Dest_ch + _Count );
    } else {
        return _Dest + ( _LastPtr - _FirstPtr );
    }
}
#line 4466
template < class _CtgIt, class _OutCtgIt >
_OutCtgIt _Copy_memmove_n ( _CtgIt _First, const size_t _Count, _OutCtgIt _Dest ) {
    const auto _Result = _Copy_memmove ( _First, _First + _Count, _Dest );
    if constexpr ( is_pointer_v < _OutCtgIt > ) {
        return _Result;
    } else {
        return _Dest + static_cast < _Iter_diff_t < _OutCtgIt >> ( _Count );
    }
}
#line 4476
template< class _It, bool _RequiresMutable = false> constexpr bool 
#line 4477
_Is_vb_iterator = false; 
#line 4479
template < class _InIt, class _SizeTy, class _OutIt >
inline _OutIt _Copy_n_unchecked4 ( _InIt _First, _SizeTy _Count, _OutIt _Dest ) {






    if constexpr ( _Iter_copy_cat < _InIt, _OutIt > :: _Bitcopy_assignable ) {



        {
            return _Copy_memmove_n ( _First, static_cast < size_t > ( _Count ), _Dest );
        }
    }

    for (; _Count != 0; ++ _Dest, ( void ) ++ _First, -- _Count ) {
        * _Dest = * _First;
    }

    return _Dest;
}
#line 4503 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\xutility"
template< class _InIt, class _Sent, class _OutIt> using _Sent_copy_cat = conditional_t< is_same_v< _Sent, _InIt> , _Iter_copy_cat< _InIt, _OutIt> , _False_trivial_cat> ; 
#line 4512 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\xutility"
template < class _InIt, class _Sent, class _OutIt >
inline _OutIt _Copy_unchecked ( _InIt _First, _Sent _Last, _OutIt _Dest ) {


    if constexpr ( _Sent_copy_cat < _InIt, _Sent, _OutIt > :: _Bitcopy_assignable ) {



        {



            {
                return _Copy_memmove ( _First, _Last, _Dest );
            }





        }
    }

    for (; _First != _Last; ++ _Dest, ( void ) ++ _First ) {
        * _Dest = * _First;
    }

    return _Dest;
}
#line 4542 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\xutility"
template < class _InIt, class _OutIt >
inline _OutIt copy ( _InIt _First, _InIt _Last, _OutIt _Dest ) {
    _Adl_verify_range ( _First, _Last );
    const auto _UFirst = _Get_unwrapped ( _First );
    const auto _ULast = _Get_unwrapped ( _Last );
    const auto _UDest = _Get_unwrapped_n ( _Dest, _Idl_distance < _InIt > ( _UFirst, _ULast ) );
    _Seek_wrapped ( _Dest, :: std :: _Copy_unchecked ( _UFirst, _ULast, _UDest ) );
    return _Dest;
}
#line 4709 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\xutility"
template < class _InIt, class _Diff, class _OutIt >
inline _OutIt copy_n ( _InIt _First, _Diff _Count_raw, _OutIt _Dest ) {

    _Algorithm_int_t < _Diff > _Count = _Count_raw;
    if ( 0 < _Count ) {
        auto _UFirst = _Get_unwrapped_n ( _First, _Count );
        auto _UDest = _Get_unwrapped_n ( _Dest, _Count );
        if constexpr ( _Iter_copy_cat < decltype ( _UFirst ), decltype ( _UDest ) > :: _Bitcopy_assignable ) {



            {
                _UDest = _Copy_memmove_n ( _UFirst, static_cast < size_t > ( _Count ), _UDest );
                _Seek_wrapped ( _Dest, _UDest );
                return _Dest;
            }
        }

        for (;; ) {
            * _UDest = * _UFirst;
            ++ _UDest;
            -- _Count;
            if ( _Count == 0 ) {

                break;
            }

            ++ _UFirst;
        }

        _Seek_wrapped ( _Dest, _UDest );
    }

    return _Dest;
}
#line 4756 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\xutility"
template < class _CtgIt1, class _CtgIt2 >
_CtgIt2 _Copy_backward_memmove ( _CtgIt1 _First, _CtgIt1 _Last, _CtgIt2 _Dest ) {

    auto _FirstPtr = _To_address ( _First );
    auto _LastPtr = _To_address ( _Last );
    auto _DestPtr = _To_address ( _Dest );
    const char * const _First_ch = const_cast < const char * > ( reinterpret_cast < const volatile char * > ( _FirstPtr ) );
    const char * const _Last_ch = const_cast < const char * > ( reinterpret_cast < const volatile char * > ( _LastPtr ) );
    char * const _Dest_ch = const_cast < char * > ( reinterpret_cast < const volatile char * > ( _DestPtr ) );
    const auto _Count = static_cast < size_t > ( _Last_ch - _First_ch );
    auto _Result = :: memmove ( _Dest_ch - _Count, _First_ch, _Count );
    if constexpr ( is_pointer_v < _CtgIt2 > ) {
        return static_cast < _CtgIt2 > ( _Result );
    } else {
        return _Dest - ( _LastPtr - _FirstPtr );
    }
}
#line 4774
template < class _BidIt1, class _BidIt2 >
_BidIt2 _Copy_backward_memmove ( move_iterator < _BidIt1 > _First, move_iterator < _BidIt1 > _Last, _BidIt2 _Dest ) {
    return _Copy_backward_memmove ( _First . base ( ), _Last . base ( ), _Dest );
}
#line 4779
template < class _BidIt1, class _BidIt2 >
[ [ nodiscard ] ] inline _BidIt2 _Copy_backward_unchecked ( _BidIt1 _First, _BidIt1 _Last, _BidIt2 _Dest ) {

    if constexpr ( _Iter_copy_cat < _BidIt1, _BidIt2 > :: _Bitcopy_assignable ) {



        {
            return _Copy_backward_memmove ( _First, _Last, _Dest );
        }
    }

    while ( _First != _Last ) {
        * -- _Dest = * -- _Last;
    }

    return _Dest;
}
#line 4798 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\xutility"
template < class _BidIt1, class _BidIt2 >
inline _BidIt2 copy_backward ( _BidIt1 _First, _BidIt1 _Last, _BidIt2 _Dest ) {

    _Adl_verify_range ( _First, _Last );
    const auto _UFirst = _Get_unwrapped ( _First );
    const auto _ULast = _Get_unwrapped ( _Last );
    const auto _UDest = _Get_unwrapped_n ( _Dest, - _Idl_distance < _BidIt1 > ( _UFirst, _ULast ) );
    _Seek_wrapped ( _Dest, _Copy_backward_unchecked ( _UFirst, _ULast, _UDest ) );
    return _Dest;
}
#line 4809
template < class _InIt, class _OutIt >
inline _OutIt _Move_unchecked ( _InIt _First, _InIt _Last, _OutIt _Dest ) {


    if constexpr ( _Iter_move_cat < _InIt, _OutIt > :: _Bitcopy_assignable ) {



        {
            return _Copy_memmove ( _First, _Last, _Dest );
        }
    }

    for (; _First != _Last; ++ _Dest, ( void ) ++ _First ) {
        * _Dest = :: std :: move ( * _First );
    }

    return _Dest;
}
#line 4829 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\xutility"
template < class _InIt, class _OutIt >
inline _OutIt move ( _InIt _First, _InIt _Last, _OutIt _Dest ) {

    _Adl_verify_range ( _First, _Last );
    const auto _UFirst = _Get_unwrapped ( _First );
    const auto _ULast = _Get_unwrapped ( _Last );
    const auto _UDest = _Get_unwrapped_n ( _Dest, _Idl_distance < _InIt > ( _UFirst, _ULast ) );
    _Seek_wrapped ( _Dest, :: std :: _Move_unchecked ( _UFirst, _ULast, _UDest ) );
    return _Dest;
}
#line 4851 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\xutility"
template < class _BidIt1, class _BidIt2 >
inline _BidIt2 _Move_backward_unchecked ( _BidIt1 _First, _BidIt1 _Last, _BidIt2 _Dest ) {


    if constexpr ( _Iter_move_cat < _BidIt1, _BidIt2 > :: _Bitcopy_assignable ) {



        {
            return _Copy_backward_memmove ( _First, _Last, _Dest );
        }
    }

    while ( _First != _Last ) {
        * -- _Dest = :: std :: move ( * -- _Last );
    }

    return _Dest;
}
#line 4871 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\xutility"
template < class _BidIt1, class _BidIt2 >
inline _BidIt2 move_backward ( _BidIt1 _First, _BidIt1 _Last, _BidIt2 _Dest ) {

    _Adl_verify_range ( _First, _Last );
    const auto _UFirst = _Get_unwrapped ( _First );
    const auto _ULast = _Get_unwrapped ( _Last );
    const auto _UDest = _Get_unwrapped_n ( _Dest, - _Idl_distance < _BidIt1 > ( _UFirst, _ULast ) );
    _Seek_wrapped ( _Dest, _Move_backward_unchecked ( _UFirst, _ULast, _UDest ) );
    return _Dest;
}
#line 4882
template< class _Ty> 
#line 4883
struct _Is_character : public false_type { }; 
#line 4886
template<> struct _Is_character< char>  : public true_type { }; 
#line 4889
template<> struct _Is_character< signed char>  : public true_type { }; 
#line 4892
template<> struct _Is_character< unsigned char>  : public true_type { }; 
#line 4899
template< class _Ty> 
#line 4900
struct _Is_character_or_bool : public _Is_character< _Ty> ::type { }; 
#line 4903
template<> struct _Is_character_or_bool< bool>  : public true_type { }; 
#line 4905
template< class _Ty> 
#line 4906
struct _Is_character_or_byte_or_bool : public _Is_character_or_bool< _Ty> ::type { }; 
#line 4915
template< class _FwdIt, class _Ty, bool  = _Iterator_is_contiguous< _FwdIt> > constexpr bool 
#line 4916
_Fill_memset_is_safe = conjunction_v< is_scalar< _Ty> , _Is_character_or_byte_or_bool< _Unwrap_enum_t< remove_reference_t< _Iter_ref_t< _FwdIt> > > > , negation< is_volatile< remove_reference_t< _Iter_ref_t< _FwdIt> > > > , is_assignable< _Iter_ref_t< _FwdIt> , const _Ty &> > ; 
#line 4920
template< class _FwdIt, class _Ty> constexpr bool 
#line 4921
_Fill_memset_is_safe< _FwdIt, _Ty, false>  = false; 
#line 4923
template< class _FwdIt, class _Ty, bool  = _Iterator_is_contiguous< _FwdIt> > constexpr bool 
#line 4924
_Fill_zero_memset_is_safe = conjunction_v< is_scalar< _Ty> , is_scalar< _Iter_value_t< _FwdIt> > , negation< is_member_pointer< _Iter_value_t< _FwdIt> > > , negation< is_volatile< remove_reference_t< _Iter_ref_t< _FwdIt> > > > , is_assignable< _Iter_ref_t< _FwdIt> , const _Ty &> > ; 
#line 4928
template< class _FwdIt, class _Ty> constexpr bool 
#line 4929
_Fill_zero_memset_is_safe< _FwdIt, _Ty, false>  = false; 
#line 4931
template < class _CtgIt, class _Ty >
void _Fill_memset ( _CtgIt _Dest, const _Ty _Val, const size_t _Count ) {

    _Iter_value_t < _CtgIt > _Dest_val = _Val;
    :: memset ( _To_address ( _Dest ), static_cast < unsigned char > ( _Dest_val ), _Count );
}
#line 4938
template < class _CtgIt >
void _Fill_zero_memset ( _CtgIt _Dest, const size_t _Count ) {
    :: memset ( _To_address ( _Dest ), 0, _Count * sizeof ( _Iter_value_t < _CtgIt > ) );
}
#line 4943
template < class _Ty >
[ [ nodiscard ] ] bool _Is_all_bits_zero ( const _Ty & _Val ) {

    ;
    if constexpr ( is_same_v < _Ty, nullptr_t > ) {
        return true;
    } else {
        constexpr _Ty _Zero { };
        return :: memcmp ( & _Val, & _Zero, sizeof ( _Ty ) ) == 0;
    }
}
#line 4955
template < class _FwdIt, class _Ty >
inline void fill ( const _FwdIt _First, const _FwdIt _Last, const _Ty & _Val ) {

    _Adl_verify_range ( _First, _Last );
    if constexpr ( _Is_vb_iterator < _FwdIt, true > ) {
        _Fill_vbool ( _First, _Last, _Val );
    } else {
        auto _UFirst = _Get_unwrapped ( _First );
        const auto _ULast = _Get_unwrapped ( _Last );



        {
            if constexpr ( _Fill_memset_is_safe < decltype ( _UFirst ), _Ty > ) {
                _Fill_memset ( _UFirst, _Val, static_cast < size_t > ( _ULast - _UFirst ) );
                return;
            } else if constexpr ( _Fill_zero_memset_is_safe < decltype ( _UFirst ), _Ty > ) {
                if ( _Is_all_bits_zero ( _Val ) ) {
                    _Fill_zero_memset ( _UFirst, static_cast < size_t > ( _ULast - _UFirst ) );
                    return;
                }
            }
        }

        for (; _UFirst != _ULast; ++ _UFirst ) {
            * _UFirst = _Val;
        }
    }
}
#line 4995 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\xutility"
template < class _OutIt, class _Diff, class _Ty >
inline _OutIt fill_n ( _OutIt _Dest, const _Diff _Count_raw, const _Ty & _Val ) {

    _Algorithm_int_t < _Diff > _Count = _Count_raw;
    if ( 0 < _Count ) {
        if constexpr ( _Is_vb_iterator < _OutIt, true > ) {
            const auto _Last = _Dest + static_cast < typename _OutIt :: difference_type > ( _Count );
            _Fill_vbool ( _Dest, _Last, _Val );
            return _Last;
        } else {
            auto _UDest = _Get_unwrapped_n ( _Dest, _Count );



            {
                if constexpr ( _Fill_memset_is_safe < decltype ( _UDest ), _Ty > ) {
                    _Fill_memset ( _UDest, _Val, static_cast < size_t > ( _Count ) );
                    _Seek_wrapped ( _Dest, _UDest + _Count );
                    return _Dest;
                } else if constexpr ( _Fill_zero_memset_is_safe < decltype ( _UDest ), _Ty > ) {
                    if ( _Is_all_bits_zero ( _Val ) ) {
                        _Fill_zero_memset ( _UDest, static_cast < size_t > ( _Count ) );
                        _Seek_wrapped ( _Dest, _UDest + _Count );
                        return _Dest;
                    }
                }
            }

            for (; 0 < _Count; -- _Count, ( void ) ++ _UDest ) {
                * _UDest = _Val;
            }

            _Seek_wrapped ( _Dest, _UDest );
        }
    }
    return _Dest;
}
#line 5082 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\xutility"
template< class _Ty1, class _Ty2, class  = void> constexpr bool 
#line 5083
_Can_compare_with_operator_equal = false; 
#line 5085
template< class _Ty1, class _Ty2> constexpr bool 
#line 5087
_Can_compare_with_operator_equal< _Ty1, _Ty2, void_t< decltype(std::declval< _Ty1 &> () == std::declval< _Ty2 &> ())> >  = true; 
#line 5090
template< class _Ty1, class _Ty2> constexpr bool 
#line 5091
_Is_pointer_address_comparable = _Can_compare_with_operator_equal< _Ty1 *, _Ty2 *, void>  && (_Is_pointer_address_convertible< _Ty1, _Ty2>  || _Is_pointer_address_convertible< _Ty2, _Ty1> ); 
#line 5102
#pragma warning(push)
#pragma warning(disable : 4806)
template< class _Elem1, class _Elem2, bool 
#line 5105
 = ((sizeof(_Elem1) == sizeof(_Elem2)) && is_integral_v< _Elem1> ) && is_integral_v< _Elem2> > constexpr bool 
#line 5106
_Can_memcmp_elements = (is_same_v< _Elem1, bool>  || is_same_v< _Elem2, bool> ) || ((static_cast< _Elem1>(-1)) == (static_cast< _Elem2>(-1))); 
#line 5108
#pragma warning(pop)
#line 5120
template< class _Ty1, class _Ty2> constexpr bool 
#line 5121
_Can_memcmp_elements< _Ty1 *, _Ty2 *, false>  = _Is_pointer_address_comparable< _Ty1, _Ty2> ; 
#line 5123
template< class _Elem1, class _Elem2> constexpr bool 
#line 5124
_Can_memcmp_elements< _Elem1, _Elem2, false>  = false; 
#line 5129
template< class _Elem1, class _Elem2, class _Pr> constexpr bool 
#line 5130
_Can_memcmp_elements_with_pred = false; 
#line 5134
template< class _Elem1, class _Elem2, class _Elem3> constexpr bool 
#line 5135
_Can_memcmp_elements_with_pred< _Elem1, _Elem2, equal_to< _Elem3> >  = (_Iter_copy_cat< _Elem1 *, _Elem3 *> ::_Bitcopy_constructible && _Iter_copy_cat< _Elem2 *, _Elem3 *> ::_Bitcopy_constructible) && _Can_memcmp_elements< remove_cv_t< _Elem3> , remove_cv_t< _Elem3> , ((sizeof(remove_cv_t< _Elem3> ) == sizeof(remove_cv_t< _Elem3> )) && is_integral_v< remove_cv_t< _Elem3> > ) && is_integral_v< remove_cv_t< _Elem3> > > ; 
#line 5140
template< class _Elem1, class _Elem2> constexpr bool 
#line 5141
_Can_memcmp_elements_with_pred< _Elem1, _Elem2, equal_to<> >  = _Can_memcmp_elements< _Elem1, _Elem2, ((sizeof(_Elem1) == sizeof(_Elem2)) && is_integral_v< _Elem1> ) && is_integral_v< _Elem2> > ; 
#line 5154
template< class _Iter1, class _Iter2, class _Pr> constexpr bool 
#line 5155
_Equal_memcmp_is_safe_helper = ((_Iterators_are_contiguous< _Iter1, _Iter2>  && (!_Iterator_is_volatile< _Iter1> )) && (!_Iterator_is_volatile< _Iter2> )) && _Can_memcmp_elements_with_pred< _Iter_value_t< _Iter1> , _Iter_value_t< _Iter2> , _Pr> ; 
#line 5160
template< class _Iter1, class _Iter2, class _Pr> constexpr bool 
#line 5161
_Equal_memcmp_is_safe = _Equal_memcmp_is_safe_helper< remove_const_t< _Iter1> , remove_const_t< _Iter2> , _Pr> ; 
#line 5164
template < class _CtgIt1, class _CtgIt2 >
[ [ nodiscard ] ] int _Memcmp_ranges ( _CtgIt1 _First1, _CtgIt1 _Last1, _CtgIt2 _First2 ) {
    ;
    const auto _First1_ch = reinterpret_cast < const char * > ( _To_address ( _First1 ) );
    const auto _Last1_ch = reinterpret_cast < const char * > ( _To_address ( _Last1 ) );
    const auto _First2_ch = reinterpret_cast < const char * > ( _To_address ( _First2 ) );
    return :: memcmp ( _First1_ch, _First2_ch, static_cast < size_t > ( _Last1_ch - _First1_ch ) );
}
#line 5173
template < class _CtgIt1, class _CtgIt2 >
[ [ nodiscard ] ] int _Memcmp_count ( _CtgIt1 _First1, _CtgIt2 _First2, const size_t _Count ) {
    ;
    const auto _First1_ch = reinterpret_cast < const char * > ( _To_address ( _First1 ) );
    const auto _First2_ch = reinterpret_cast < const char * > ( _To_address ( _First2 ) );
    return :: memcmp ( _First1_ch, _First2_ch, _Count * sizeof ( _Iter_value_t < _CtgIt1 > ) );
}
#line 5181
template < class _InIt1, class _InIt2, class _Pr >
[ [ nodiscard ] ] inline bool equal ( const _InIt1 _First1, const _InIt1 _Last1, const _InIt2 _First2, _Pr _Pred ) {

    _Adl_verify_range ( _First1, _Last1 );
    auto _UFirst1 = _Get_unwrapped ( _First1 );
    const auto _ULast1 = _Get_unwrapped ( _Last1 );
    auto _UFirst2 = _Get_unwrapped_n ( _First2, _Idl_distance < _InIt1 > ( _UFirst1, _ULast1 ) );
    if constexpr ( _Equal_memcmp_is_safe < decltype ( _UFirst1 ), decltype ( _UFirst2 ), _Pr > ) {



        {
            return _Memcmp_ranges ( _UFirst1, _ULast1, _UFirst2 ) == 0;
        }
    }

    for (; _UFirst1 != _ULast1; ++ _UFirst1, ( void ) ++ _UFirst2 ) {
        if ( ! _Pred ( * _UFirst1, * _UFirst2 ) ) {
            return false;
        }
    }

    return true;
}
#line 5212 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\xutility"
template < class _InIt1, class _InIt2 >
[ [ nodiscard ] ] inline bool equal ( const _InIt1 _First1, const _InIt1 _Last1, const _InIt2 _First2 ) {

    return :: std :: equal ( _First1, _Last1, _First2, equal_to < > { } );
}
#line 5227 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\xutility"
template < class _InIt1, class _InIt2, class _Pr >
[ [ nodiscard ] ] inline bool equal (
    const _InIt1 _First1, const _InIt1 _Last1, const _InIt2 _First2, const _InIt2 _Last2, _Pr _Pred ) {

    _Adl_verify_range ( _First1, _Last1 );
    _Adl_verify_range ( _First2, _Last2 );
    auto _UFirst1 = _Get_unwrapped ( _First1 );
    const auto _ULast1 = _Get_unwrapped ( _Last1 );
    auto _UFirst2 = _Get_unwrapped ( _First2 );
    const auto _ULast2 = _Get_unwrapped ( _Last2 );
    if constexpr ( _Is_ranges_random_iter_v < _InIt1 > && _Is_ranges_random_iter_v < _InIt2 > ) {
        if ( _ULast1 - _UFirst1 != _ULast2 - _UFirst2 ) {
            return false;
        }

        return :: std :: equal ( _UFirst1, _ULast1, _UFirst2, _Pass_fn ( _Pred ) );
    } else {
        for (;; ) {
            if ( _UFirst1 == _ULast1 ) {
                return _UFirst2 == _ULast2;
            }

            if ( _UFirst2 == _ULast2 ) {
                return false;
            }

            if ( ! _Pred ( * _UFirst1, * _UFirst2 ) ) {
                return false;
            }

            ++ _UFirst1;
            ++ _UFirst2;
        }
    }
}
#line 5269 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\xutility"
template < class _InIt1, class _InIt2 >
[ [ nodiscard ] ] inline bool equal (
    const _InIt1 _First1, const _InIt1 _Last1, const _InIt2 _First2, const _InIt2 _Last2 ) {

    return :: std :: equal ( _First1, _Last1, _First2, _Last2, equal_to < > { } );
}
#line 5422 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\xutility"
template< class _Elem1, class _Elem2> constexpr bool 
#line 5423
_Lex_compare_memcmp_classify_elements = conjunction_v< _Is_character_or_bool< _Elem1> , _Is_character_or_bool< _Elem2> , is_unsigned< _Elem1> , is_unsigned< _Elem2> > ; 
#line 5431
template< class _Elem1, class _Elem2, class _Pr> 
#line 5432
struct _Lex_compare_memcmp_classify_pred { 
#line 5433
using _Pred = void; 
#line 5434
}; 
#line 5436
template< class _Elem1, class _Elem2, class _Elem3> 
#line 5437
struct _Lex_compare_memcmp_classify_pred< _Elem1, _Elem2, less< _Elem3> >  { 
#line 5438
using _Pred = conditional_t< (_Lex_compare_memcmp_classify_elements< _Elem3, _Elem3>  && _Iter_copy_cat< _Elem1 *, _Elem3 *> ::_Bitcopy_constructible) && _Iter_copy_cat< _Elem2 *, _Elem3 *> ::_Bitcopy_constructible, less< int> , void> ; 
#line 5442
}; 
#line 5444
template< class _Elem1, class _Elem2> 
#line 5445
struct _Lex_compare_memcmp_classify_pred< _Elem1, _Elem2, less<> >  { 
#line 5446
using _Pred = conditional_t< _Lex_compare_memcmp_classify_elements< _Elem1, _Elem2> , less< int> , void> ; 
#line 5447
}; 
#line 5449
template< class _Elem1, class _Elem2, class _Elem3> 
#line 5450
struct _Lex_compare_memcmp_classify_pred< _Elem1, _Elem2, greater< _Elem3> >  { 
#line 5451
using _Pred = conditional_t< (_Lex_compare_memcmp_classify_elements< _Elem3, _Elem3>  && _Iter_copy_cat< _Elem1 *, _Elem3 *> ::_Bitcopy_constructible) && _Iter_copy_cat< _Elem2 *, _Elem3 *> ::_Bitcopy_constructible, greater< int> , void> ; 
#line 5455
}; 
#line 5457
template< class _Elem1, class _Elem2> 
#line 5458
struct _Lex_compare_memcmp_classify_pred< _Elem1, _Elem2, greater<> >  { 
#line 5459
using _Pred = conditional_t< _Lex_compare_memcmp_classify_elements< _Elem1, _Elem2> , greater< int> , void> ; 
#line 5460
}; 
#line 5474
template< class _It1, class _It2, class _Pr> using _Lex_compare_memcmp_classify = conditional_t< (_Iterators_are_contiguous< _It1, _It2>  && (!_Iterator_is_volatile< _It1> )) && (!_Iterator_is_volatile< _It2> ), typename _Lex_compare_memcmp_classify_pred< _Iter_value_t< _It1> , _Iter_value_t< _It2> , _Pr> ::_Pred, void> ; 
#line 5479
template < class _InIt1, class _InIt2, class _Pr >
[ [ nodiscard ] ] inline bool lexicographical_compare (
    const _InIt1 _First1, const _InIt1 _Last1, const _InIt2 _First2, const _InIt2 _Last2, _Pr _Pred ) {

    _Adl_verify_range ( _First1, _Last1 );
    _Adl_verify_range ( _First2, _Last2 );
    auto _UFirst1 = _Get_unwrapped ( _First1 );
    const auto _ULast1 = _Get_unwrapped ( _Last1 );
    auto _UFirst2 = _Get_unwrapped ( _First2 );
    const auto _ULast2 = _Get_unwrapped ( _Last2 );

    using _Memcmp_pred = _Lex_compare_memcmp_classify < decltype ( _UFirst1 ), decltype ( _UFirst2 ), _Pr >;
    if constexpr ( ! is_void_v < _Memcmp_pred > ) {



        {
            const auto _Num1 = static_cast < size_t > ( _ULast1 - _UFirst1 );
            const auto _Num2 = static_cast < size_t > ( _ULast2 - _UFirst2 );
            const int _Ans = _Memcmp_count ( _UFirst1, _UFirst2, ( :: std :: min ) ( _Num1, _Num2 ) );
            return _Memcmp_pred { } ( _Ans, 0 ) || ( _Ans == 0 && _Num1 < _Num2 );
        }
    }

    for (; _UFirst1 != _ULast1 && _UFirst2 != _ULast2; ++ _UFirst1, ( void ) ++ _UFirst2 ) {
        if ( _Debug_lt_pred ( _Pred, * _UFirst1, * _UFirst2 ) ) {
            return true;
        } else if ( _Pred ( * _UFirst2, * _UFirst1 ) ) {
            return false;
        }
    }

    return _UFirst1 == _ULast1 && _UFirst2 != _ULast2;
}
#line 5514 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\xutility"
template < class _InIt1, class _InIt2 >
[ [ nodiscard ] ] inline bool lexicographical_compare (
    const _InIt1 _First1, const _InIt1 _Last1, const _InIt2 _First2, const _InIt2 _Last2 ) {

    return :: std :: lexicographical_compare ( _First1, _Last1, _First2, _Last2, less < > { } );
}
#line 5632 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\xutility"
template< class _Ty, class _Elem> 
#line 5633
struct _Vector_alg_in_find_is_safe_object_pointers : public false_type { }; 
#line 5634
template< class _Ty1, class _Ty2> 
#line 5635
struct _Vector_alg_in_find_is_safe_object_pointers< _Ty1 *, _Ty2 *>  : public conjunction< disjunction< is_object< _Ty1> , is_void< _Ty1> > , disjunction< is_object< _Ty2> , is_void< _Ty2> > , disjunction< is_same< remove_cv_t< _Ty1> , remove_cv_t< _Ty2> > , is_void< _Ty1> , is_void< _Ty2> > >  { 
#line 5642
}; 
#line 5645
template< class _Iter, class _Ty, class _Elem = _Iter_value_t< _Iter> > constexpr bool 
#line 5646
_Vector_alg_in_find_is_safe = (_Iterator_is_contiguous< _Iter>  && (!_Iterator_is_volatile< _Iter> )) && disjunction_v< conjunction< is_integral< _Ty> , is_integral< _Elem> > , conjunction< is_pointer< _Ty> , is_same< _Ty, _Elem> > , conjunction< is_same< _Ty, std::nullptr_t> , is_pointer< _Elem> > , _Vector_alg_in_find_is_safe_object_pointers< _Ty, _Elem> > ; 
#line 5669
template < class _InIt, class _Ty >
[ [ nodiscard ] ] constexpr bool _Could_compare_equal_to_value_type ( const _Ty & _Val ) {

    ;

    if constexpr ( disjunction_v <



                      is_same < _Ty, bool >, is_pointer < _Ty >, is_same < _Ty, nullptr_t >> ) {
        return true;
    } else {
        using _Elem = _Iter_value_t < _InIt >;
        ;

        if constexpr ( is_same_v < _Elem, bool > ) {
            return _Val == true || _Val == false;
        } else if constexpr ( is_signed_v < _Elem > ) {

            constexpr _Elem _Min = static_cast < _Elem > ( _Elem { 1 } << ( sizeof ( _Elem ) * 8 - 1 ) );
            constexpr _Elem _Max = static_cast < _Elem > ( ~ _Min );

            if constexpr ( is_signed_v < _Ty > ) {

                return _Min <= _Val && _Val <= _Max;
            } else {

                if constexpr ( _Elem { - 1 } == static_cast < _Ty > ( - 1 ) ) {

                    return _Val <= _Max || static_cast < _Ty > ( _Min ) <= _Val;
                } else {

                    return _Val <= _Max;
                }
            }
        } else {
            constexpr _Elem _Max = static_cast < _Elem > ( ~ _Elem { 0 } );

            if constexpr ( is_unsigned_v < _Ty > ) {

                return _Val <= _Max;
            } else {

                if constexpr ( _Ty { - 1 } == static_cast < _Elem > ( - 1 ) ) {

                    return _Val <= _Max;
                } else {

                    return 0 <= _Val && _Val <= _Max;
                }
            }
        }
    }
}
#line 5724
template < class _InIt, class _Ty >
[ [ nodiscard ] ] inline _InIt _Find_unchecked ( _InIt _First, const _InIt _Last, const _Ty & _Val ) {


    if constexpr ( _Vector_alg_in_find_is_safe < _InIt, _Ty > ) {



        {
            if ( ! :: std :: _Could_compare_equal_to_value_type < _InIt > ( _Val ) ) {
                return _Last;
            }

            const auto _First_ptr = _To_address ( _First );
            const auto _Result = __std_find_trivial ( _First_ptr, _To_address ( _Last ), _Val );
            if constexpr ( is_pointer_v < _InIt > ) {
                return _Result;
            } else {
                return _First + ( _Result - _First_ptr );
            }













        }
    }

    for (; _First != _Last; ++ _First ) {
        if ( * _First == _Val ) {
            break;
        }
    }

    return _First;
}
#line 5769 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\xutility"
template < class _InIt, class _Ty >
[ [ nodiscard ] ] inline _InIt find ( _InIt _First, const _InIt _Last, const _Ty & _Val ) {
    _Adl_verify_range ( _First, _Last );
    if constexpr ( _Is_vb_iterator < _InIt > && is_same_v < _Ty, bool > ) {
        return _Find_vbool ( _First, _Last, _Val );
    } else {
        _Seek_wrapped ( _First, :: std :: _Find_unchecked ( _Get_unwrapped ( _First ), _Get_unwrapped ( _Last ), _Val ) );
        return _First;
    }
}
#line 5904 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\xutility"
template < class _InIt, class _Ty >
[ [ nodiscard ] ] inline _Iter_diff_t < _InIt > count ( const _InIt _First, const _InIt _Last, const _Ty & _Val ) {

    _Adl_verify_range ( _First, _Last );
    if constexpr ( _Is_vb_iterator < _InIt > && is_same_v < _Ty, bool > ) {
        return _Count_vbool ( _First, _Last, _Val );
    } else {
        auto _UFirst = _Get_unwrapped ( _First );
        const auto _ULast = _Get_unwrapped ( _Last );


        if constexpr ( _Vector_alg_in_find_is_safe < decltype ( _UFirst ), _Ty > ) {



            {
                if ( ! :: std :: _Could_compare_equal_to_value_type < decltype ( _UFirst ) > ( _Val ) ) {
                    return 0;
                }

                return static_cast < _Iter_diff_t < _InIt >> (
                    __std_count_trivial ( _To_address ( _UFirst ), _To_address ( _ULast ), _Val ) );
            }
        }


        _Iter_diff_t < _InIt > _Count = 0;

        for (; _UFirst != _ULast; ++ _UFirst ) {
            if ( * _UFirst == _Val ) {
                ++ _Count;
            }
        }

        return _Count;
    }
}
#line 5948 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\xutility"
template < class _InIt, class _Ty, class _Pr >
[ [ nodiscard ] ] constexpr _InIt _Find_pr ( _InIt _First, const _InIt _Last, const _Ty & _Val, _Pr _Pred ) {
    for (; _First != _Last; ++ _First ) {
        if ( _Pred ( * _First, _Val ) ) {
            break;
        }
    }

    return _First;
}
#line 5959
template < class _InIt, class _Ty, class _Pr >
[ [ nodiscard ] ] constexpr _Iter_diff_t < _InIt > _Count_pr ( _InIt _First, const _InIt _Last, const _Ty & _Val, _Pr _Pred ) {
    _Iter_diff_t < _InIt > _Count = 0;

    for (; _First != _Last; ++ _First ) {
        if ( _Pred ( * _First, _Val ) ) {
            ++ _Count;
        }
    }

    return _Count;
}
#line 5972
enum class _TrimResult: unsigned char { _KeepTrimming, _HaveWorkAfterTrimming, _ReturnFalse, _ReturnTrue}; 
#line 5974
template < class _BidIt1, class _BidIt2, class _Pr >
[ [ nodiscard ] ] inline _TrimResult _Trim_equal (
    _BidIt1 & _First1, _BidIt1 & _Back1, _BidIt2 & _First2, _BidIt2 & _Back2, _Pr _Pred ) {


    ;
    ;
    if ( _Pred ( * _First1, * _First2 ) ) {
        do {
            ++ _First1;
            ++ _First2;
            if ( _First1 == _Back1 ) {

                return _Pred ( * _First1, * _First2 ) ? _TrimResult :: _ReturnTrue : _TrimResult :: _ReturnFalse;
            }
        } while ( _Pred ( * _First1, * _First2 ) );
    } else {
        if ( ! _Pred ( * _Back1, * _Back2 ) ) {

            return _TrimResult :: _HaveWorkAfterTrimming;
        }
        -- _Back1;
        -- _Back2;
    }

    for (;; ) {
        if ( _First1 == _Back1 ) {

            return _TrimResult :: _ReturnFalse;
        }

        if ( ! _Pred ( * _Back1, * _Back2 ) ) {
            return _TrimResult :: _KeepTrimming;
        }
        -- _Back1;
        -- _Back2;
    }
}
#line 6013
template < class _BidIt1, class _BidIt2, class _Pr >
[ [ nodiscard ] ] inline _TrimResult _Trim_reversed (
    _BidIt1 & _First1, _BidIt1 & _Back1, _BidIt2 & _First2, _BidIt2 & _Back2, _Pr _Pred ) {


    ;
    ;
    if ( _Pred ( * _First1, * _Back2 ) ) {
        do {
            ++ _First1;
            -- _Back2;
            if ( _First1 == _Back1 ) {

                return _Pred ( * _First1, * _First2 ) ? _TrimResult :: _ReturnTrue : _TrimResult :: _ReturnFalse;
            }
        } while ( _Pred ( * _First1, * _Back2 ) );
    } else {
        if ( ! _Pred ( * _Back1, * _First2 ) ) {

            return _TrimResult :: _HaveWorkAfterTrimming;
        }
        -- _Back1;
        ++ _First2;
    }

    for (;; ) {
        if ( _First1 == _Back1 ) {

            return _TrimResult :: _ReturnFalse;
        }

        if ( ! _Pred ( * _Back1, * _First2 ) ) {
            return _TrimResult :: _KeepTrimming;
        }
        -- _Back1;
        ++ _First2;
    }
}
#line 6052
template < class _BidIt1, class _BidIt2, class _Pr >
[ [ nodiscard ] ] inline _TrimResult _Trim_completely (
    _BidIt1 & _First1, _BidIt1 & _Back1, _BidIt2 & _First2, _BidIt2 & _Back2, _Pr _Pred ) {

    _TrimResult _Res = _TrimResult :: _KeepTrimming;

    for ( bool _Check_reversed = true; _Res == _TrimResult :: _KeepTrimming; _Check_reversed = ! _Check_reversed ) {
        if ( _Check_reversed ) {
            _Res = _Trim_reversed ( _First1, _Back1, _First2, _Back2, _Pred );
        } else {
            _Res = _Trim_equal ( _First1, _Back1, _First2, _Back2, _Pred );
        }
    }

    return _Res;
}
#line 6069
template < class _FwdIt1, class _FwdIt2, class _Pr >
[ [ nodiscard ] ] inline bool _Check_match_counts (
    _FwdIt1 _First1, _FwdIt1 _Last1, _FwdIt2 _First2, _FwdIt2 _Last2, _Pr _Pred ) {

    ;
    ;
    if constexpr ( _Is_ranges_bidi_iter_v < _FwdIt1 > && _Is_ranges_bidi_iter_v < _FwdIt2 > ) {
        do {
            -- _Last1;
            -- _Last2;
        } while ( _Pred ( * _Last1, * _Last2 ) );

        if ( _First1 == _Last1 ) {
            return false;
        }

        const _TrimResult _Res = _Trim_completely ( _First1, _Last1, _First2, _Last2, _Pred );

        if ( _Res != _TrimResult :: _HaveWorkAfterTrimming ) {
            return _Res == _TrimResult :: _ReturnTrue;
        }

        ++ _Last1;
        ++ _Last2;
    }

    for ( _FwdIt1 _Next1 = _First1; _Next1 != _Last1; ++ _Next1 ) {
        if ( _Next1 == _Find_pr ( _First1, _Next1, * _Next1, _Pred ) ) {
            _Iter_diff_t < _FwdIt2 > _Count2 = _Count_pr ( _First2, _Last2, * _Next1, _Pred );
            if ( _Count2 == 0 ) {
                return false;
            }

            _FwdIt1 _Skip1 = _Next_iter ( _Next1 );
            _Iter_diff_t < _FwdIt1 > _Count1 = _Count_pr ( _Skip1, _Last1, * _Next1, _Pred ) + 1;
            if ( _Count2 != _Count1 ) {
                return false;
            }
        }
    }

    return true;
}
#line 6113
template < class _BidIt >
inline void reverse ( const _BidIt _First, const _BidIt _Last ) {
    _Adl_verify_range ( _First, _Last );
    auto _UFirst = _Get_unwrapped ( _First );
    auto _ULast = _Get_unwrapped ( _Last );

    using _Elem = remove_reference_t < _Iter_ref_t < decltype ( _UFirst ) >>;
    constexpr bool _Allow_vectorization = conjunction_v < bool_constant < _Iterator_is_contiguous < decltype ( _UFirst ) >>,
        _Is_trivially_swappable < _Elem >, negation < is_volatile < _Elem >> >;
    constexpr size_t _Nx = sizeof ( _Elem );

    if constexpr ( _Allow_vectorization && _Nx <= 8 && ( _Nx & ( _Nx - 1 ) ) == 0 ) {



        {
            if constexpr ( _Nx == 1 ) {
                __std_reverse_trivially_swappable_1 ( _To_address ( _UFirst ), _To_address ( _ULast ) );
            } else if constexpr ( _Nx == 2 ) {
                __std_reverse_trivially_swappable_2 ( _To_address ( _UFirst ), _To_address ( _ULast ) );
            } else if constexpr ( _Nx == 4 ) {
                __std_reverse_trivially_swappable_4 ( _To_address ( _UFirst ), _To_address ( _ULast ) );
            } else {
                __std_reverse_trivially_swappable_8 ( _To_address ( _UFirst ), _To_address ( _ULast ) );
            }

            return;
        }
    }


    for (; _UFirst != _ULast && _UFirst != -- _ULast; ++ _UFirst ) {
        :: std :: iter_swap ( _UFirst, _ULast );
    }
}
#line 6158 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\xutility"
template < class _BidIt >
constexpr pair < _BidIt, _BidIt > _Reverse_until_sentinel_unchecked ( _BidIt _First, _BidIt _Sentinel, _BidIt _Last ) {

    while ( _First != _Sentinel && _Last != _Sentinel ) {
        :: std :: iter_swap ( _First, -- _Last );
        ++ _First;
    }

    return pair < _BidIt, _BidIt > ( _First, _Last );
}
#line 6169
template < class _FwdIt >
inline _FwdIt rotate ( _FwdIt _First, _FwdIt _Mid, _FwdIt _Last ) {



    _Adl_verify_range ( _First, _Mid );
    _Adl_verify_range ( _Mid, _Last );
    auto _UFirst = _Get_unwrapped ( _First );
    auto _UMid = _Get_unwrapped ( _Mid );
    const auto _ULast = _Get_unwrapped ( _Last );
    if ( _UFirst == _UMid ) {
        return _Last;
    }

    if ( _UMid == _ULast ) {
        return _First;
    }

    if constexpr ( _Is_cpp17_random_iter_v < _FwdIt > ) {
        :: std :: reverse ( _UFirst, _UMid );
        :: std :: reverse ( _UMid, _ULast );
        :: std :: reverse ( _UFirst, _ULast );
        _Seek_wrapped ( _First, _UFirst + ( _ULast - _UMid ) );
    } else if constexpr ( _Is_cpp17_bidi_iter_v < _FwdIt > ) {
        :: std :: reverse ( _UFirst, _UMid );
        :: std :: reverse ( _UMid, _ULast );
        auto _Tmp = _Reverse_until_sentinel_unchecked ( _UFirst, _UMid, _ULast );
        :: std :: reverse ( _Tmp . first, _Tmp . second );
        _Seek_wrapped ( _First, _UMid != _Tmp . first ? _Tmp . first : _Tmp . second );
    } else {
        auto _UNext = _UMid;
        do {
            :: std :: iter_swap ( _UFirst, _UNext );
            ++ _UFirst;
            ++ _UNext;
            if ( _UFirst == _UMid ) {
                _UMid = _UNext;
            }
        } while ( _UNext != _ULast );
        _Seek_wrapped ( _First, _UFirst );
        while ( _UMid != _ULast ) {
            _UNext = _UMid;
            do {
                :: std :: iter_swap ( _UFirst, _UNext );
                ++ _UFirst;
                ++ _UNext;
                if ( _UFirst == _UMid ) {
                    _UMid = _UNext;
                }
            } while ( _UNext != _ULast );
        }
    }

    return _First;
}
#line 6234 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\xutility"
template < class _InIt, class _Pr >
[ [ nodiscard ] ] inline _InIt find_if ( _InIt _First, const _InIt _Last, _Pr _Pred ) {
    _Adl_verify_range ( _First, _Last );
    auto _UFirst = _Get_unwrapped ( _First );
    const auto _ULast = _Get_unwrapped ( _Last );
    for (; _UFirst != _ULast; ++ _UFirst ) {
        if ( _Pred ( * _UFirst ) ) {
            break;
        }
    }

    _Seek_wrapped ( _First, _UFirst );
    return _First;
}
#line 6561
template< class _Iter, class _Pr, class _Elem = _Iter_value_t< _Iter> > constexpr bool 
#line 6562
_Is_min_max_optimization_safe = (_Iterator_is_contiguous< _Iter>  && (!_Iterator_is_volatile< _Iter> )) && conjunction_v< disjunction< is_integral< _Elem> , is_pointer< _Elem> > , disjunction< is_same< _Pr, less<> > , is_same< _Pr, less< _Elem> > > > ; 
#line 6572
template < class _FwdIt, class _Pr >
constexpr _FwdIt _Max_element_unchecked ( _FwdIt _First, _FwdIt _Last, _Pr _Pred ) {

    if constexpr ( _Is_min_max_optimization_safe < _FwdIt, _Pr > ) {
        if ( ! _Is_constant_evaluated ( ) ) {
            const auto _First_ptr = _To_address ( _First );
            const auto _Result = __std_max_element ( _First_ptr, _To_address ( _Last ) );
            if constexpr ( is_pointer_v < _FwdIt > ) {
                return _Result;
            } else {
                return _First + ( _Result - _First_ptr );
            }
        }
    }


    _FwdIt _Found = _First;
    if ( _First != _Last ) {
        while ( ++ _First != _Last ) {
            if ( _Debug_lt_pred ( _Pred, * _Found, * _First ) ) {
                _Found = _First;
            }
        }
    }

    return _Found;
}
#line 6600 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\xutility"
template < class _FwdIt, class _Pr >
[ [ nodiscard ] ] constexpr _FwdIt max_element ( _FwdIt _First, _FwdIt _Last, _Pr _Pred ) {
    _Adl_verify_range ( _First, _Last );
    _Seek_wrapped ( _First, :: std :: _Max_element_unchecked ( _Get_unwrapped ( _First ), _Get_unwrapped ( _Last ), _Pass_fn ( _Pred ) ) );
    return _First;
}
#line 6607
template < class _FwdIt >
[ [ nodiscard ] ] constexpr _FwdIt max_element ( _FwdIt _First, _FwdIt _Last ) {
    return :: std :: max_element ( _First, _Last, less < > { } );
}
#line 6692 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\xutility"
template < class _Ty, class _Pr >
[ [ nodiscard ] ] constexpr _Ty ( max ) ( initializer_list < _Ty > _Ilist, _Pr _Pred ) {

    const _Ty * _Res = :: std :: _Max_element_unchecked ( _Ilist . begin ( ), _Ilist . end ( ), _Pass_fn ( _Pred ) );
    return * _Res;
}
#line 6699
template < class _Ty >
[ [ nodiscard ] ] constexpr _Ty ( max ) ( initializer_list < _Ty > _Ilist ) {

    return ( :: std :: max ) ( _Ilist, less < > { } );
}
#line 6766
template < class _FwdIt, class _Pr >
constexpr _FwdIt _Min_element_unchecked ( _FwdIt _First, _FwdIt _Last, _Pr _Pred ) {

    if constexpr ( _Is_min_max_optimization_safe < _FwdIt, _Pr > ) {
        if ( ! _Is_constant_evaluated ( ) ) {
            const auto _First_ptr = _To_address ( _First );
            const auto _Result = __std_min_element ( _First_ptr, _To_address ( _Last ) );
            if constexpr ( is_pointer_v < _FwdIt > ) {
                return _Result;
            } else {
                return _First + ( _Result - _First_ptr );
            }
        }
    }


    _FwdIt _Found = _First;
    if ( _First != _Last ) {
        while ( ++ _First != _Last ) {
            if ( _Debug_lt_pred ( _Pred, * _First, * _Found ) ) {
                _Found = _First;
            }
        }
    }

    return _Found;
}
#line 6794 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\xutility"
template < class _FwdIt, class _Pr >
[ [ nodiscard ] ] constexpr _FwdIt min_element ( _FwdIt _First, _FwdIt _Last, _Pr _Pred ) {
    _Adl_verify_range ( _First, _Last );
    _Seek_wrapped ( _First, :: std :: _Min_element_unchecked ( _Get_unwrapped ( _First ), _Get_unwrapped ( _Last ), _Pass_fn ( _Pred ) ) );
    return _First;
}
#line 6801
template < class _FwdIt >
[ [ nodiscard ] ] constexpr _FwdIt min_element ( _FwdIt _First, _FwdIt _Last ) {
    return :: std :: min_element ( _First, _Last, less < > { } );
}
#line 6886 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\xutility"
template < class _Ty, class _Pr >
[ [ nodiscard ] ] constexpr _Ty ( min ) ( initializer_list < _Ty > _Ilist, _Pr _Pred ) {

    const _Ty * _Res = :: std :: _Min_element_unchecked ( _Ilist . begin ( ), _Ilist . end ( ), _Pass_fn ( _Pred ) );
    return * _Res;
}
#line 6893
template < class _Ty >
[ [ nodiscard ] ] constexpr _Ty ( min ) ( initializer_list < _Ty > _Ilist ) {

    return ( :: std :: min ) ( _Ilist, less < > { } );
}
#line 6954
template < class _FwdIt, class _Ty, class _Pr >
[ [ nodiscard ] ] inline _FwdIt lower_bound ( _FwdIt _First, const _FwdIt _Last, const _Ty & _Val, _Pr _Pred ) {

    _Adl_verify_range ( _First, _Last );
    auto _UFirst = _Get_unwrapped ( _First );
    _Iter_diff_t < _FwdIt > _Count = :: std :: distance ( _UFirst, _Get_unwrapped ( _Last ) );

    while ( 0 < _Count ) {
        const _Iter_diff_t < _FwdIt > _Count2 = _Count / 2;
        const auto _UMid = :: std :: next ( _UFirst, _Count2 );
        if ( _Pred ( * _UMid, _Val ) ) {
            _UFirst = _Next_iter ( _UMid );
            _Count -= _Count2 + 1;
        } else {
            _Count = _Count2;
        }
    }

    _Seek_wrapped ( _First, _UFirst );
    return _First;
}
#line 6976
template < class _FwdIt, class _Ty >
[ [ nodiscard ] ] inline _FwdIt lower_bound ( _FwdIt _First, _FwdIt _Last, const _Ty & _Val ) {

    return :: std :: lower_bound ( _First, _Last, _Val, less < > { } );
}
#line 6982
template < class _FwdIt, class _Ty, class _Pr >
[ [ nodiscard ] ] inline _FwdIt upper_bound ( _FwdIt _First, _FwdIt _Last, const _Ty & _Val, _Pr _Pred ) {

    _Adl_verify_range ( _First, _Last );
    auto _UFirst = _Get_unwrapped ( _First );
    _Iter_diff_t < _FwdIt > _Count = :: std :: distance ( _UFirst, _Get_unwrapped ( _Last ) );

    while ( 0 < _Count ) {
        _Iter_diff_t < _FwdIt > _Count2 = _Count / 2;
        const auto _UMid = :: std :: next ( _UFirst, _Count2 );
        if ( _Pred ( _Val, * _UMid ) ) {
            _Count = _Count2;
        } else {
            _UFirst = _Next_iter ( _UMid );
            _Count -= _Count2 + 1;
        }
    }

    _Seek_wrapped ( _First, _UFirst );
    return _First;
}
#line 7004
template < class _FwdIt, class _Ty >
[ [ nodiscard ] ] inline _FwdIt upper_bound ( _FwdIt _First, _FwdIt _Last, const _Ty & _Val ) {

    return :: std :: upper_bound ( _First, _Last, _Val, less < > { } );
}
#line 7010
template < class _FwdIt1, class _FwdIt2 >
inline _FwdIt2 _Swap_ranges_unchecked ( _FwdIt1 _First1, const _FwdIt1 _Last1, _FwdIt2 _First2 ) {



    using _Elem1 = remove_reference_t < _Iter_ref_t < _FwdIt1 >>;
    using _Elem2 = remove_reference_t < _Iter_ref_t < _FwdIt2 >>;
    if constexpr ( is_same_v < _Elem1, _Elem2 > && _Is_trivially_swappable_v < _Elem1 >
                  && _Iterators_are_contiguous < _FwdIt1, _FwdIt2 > ) {



        {
            __std_swap_ranges_trivially_swappable_noalias (
                _To_address ( _First1 ), _To_address ( _Last1 ), _To_address ( _First2 ) );
            return _First2 + ( _Last1 - _First1 );
        }
    }


    for (; _First1 != _Last1; ++ _First1, ( void ) ++ _First2 ) {
        :: std :: iter_swap ( _First1, _First2 );
    }

    return _First2;
}
#line 7037 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\xutility"
[[noreturn]] void __cdecl _Xbad_alloc(); 
#line 7038
[[noreturn]] void __cdecl _Xinvalid_argument(const char *); 
#line 7039
[[noreturn]] void __cdecl _Xlength_error(const char *); 
#line 7040
[[noreturn]] void __cdecl _Xout_of_range(const char *); 
#line 7041
[[noreturn]] void __cdecl _Xoverflow_error(const char *); 
#line 7042
[[noreturn]] void __cdecl _Xruntime_error(const char *); 
#line 7043
[[noreturn]] void __cdecl _XGetLastError(); 
#line 7045
template< class _Category, class _Ty, class _Diff = ptrdiff_t, class _Pointer = _Ty *, class 
#line 7046
_Reference = _Ty &> 
#line 7047
struct iterator { 
#line 7048
using iterator_category = _Category; 
#line 7049
using value_type = _Ty; 
#line 7050
using difference_type = _Diff; 
#line 7051
using pointer = _Pointer; 
#line 7052
using reference = _Reference; 
#line 7053
}; 
#line 7055
template < class _Ty, enable_if_t < is_floating_point_v < _Ty >, int > = 0 >
[ [ nodiscard ] ] constexpr auto _Float_abs_bits ( const _Ty & _Xx ) {
    using _Traits = _Floating_type_traits < _Ty >;
    using _Uint_type = typename _Traits :: _Uint_type;
    const auto _Bits = _Bit_cast < _Uint_type > ( _Xx );
    return _Bits & ~ _Traits :: _Shifted_sign_mask;
}
#line 7063
template < class _Ty, enable_if_t < is_floating_point_v < _Ty >, int > = 0 >
[ [ nodiscard ] ] constexpr _Ty _Float_abs ( const _Ty _Xx ) {
    return _Bit_cast < _Ty > ( _Float_abs_bits ( _Xx ) );
}
#line 7068
template < class _Ty, enable_if_t < is_floating_point_v < _Ty >, int > = 0 >
[ [ nodiscard ] ] constexpr _Ty _Float_copysign ( const _Ty _Magnitude, const _Ty _Sign ) {
    using _Traits = _Floating_type_traits < _Ty >;
    using _Uint_type = typename _Traits :: _Uint_type;
    const auto _Signbit = _Bit_cast < _Uint_type > ( _Sign ) & _Traits :: _Shifted_sign_mask;
    return _Bit_cast < _Ty > ( _Float_abs_bits ( _Magnitude ) | _Signbit );
}
#line 7076
template < class _Ty, enable_if_t < is_floating_point_v < _Ty >, int > = 0 >
[ [ nodiscard ] ] constexpr bool _Is_nan ( const _Ty _Xx ) {
    using _Traits = _Floating_type_traits < _Ty >;
    return _Float_abs_bits ( _Xx ) > _Traits :: _Shifted_exponent_mask;
}
#line 7086
template < class _Ty, enable_if_t < is_floating_point_v < _Ty >, int > = 0 >
[ [ nodiscard ] ] constexpr bool _Is_signaling_nan ( const _Ty & _Xx ) {
    using _Traits = _Floating_type_traits < _Ty >;
    const auto _Abs_bits = _Float_abs_bits ( _Xx );
    return _Abs_bits > _Traits :: _Shifted_exponent_mask && ( ( _Abs_bits & _Traits :: _Special_nan_mantissa_mask ) == 0 );
}
#line 7093
template < class _Ty, enable_if_t < is_floating_point_v < _Ty >, int > = 0 >
[ [ nodiscard ] ] constexpr bool _Is_inf ( const _Ty _Xx ) {
    using _Traits = _Floating_type_traits < _Ty >;
    return _Float_abs_bits ( _Xx ) == _Traits :: _Shifted_exponent_mask;
}
#line 7099
template < class _Ty, enable_if_t < is_floating_point_v < _Ty >, int > = 0 >
[ [ nodiscard ] ] constexpr bool _Is_finite ( const _Ty _Xx ) {
    using _Traits = _Floating_type_traits < _Ty >;
    return _Float_abs_bits ( _Xx ) < _Traits :: _Shifted_exponent_mask;
}
#line 7109 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\xutility"
}
#line 7112
#pragma warning(pop)
#pragma pack ( pop )
#line 14 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\iterator"
#pragma pack ( push, 8 )
#pragma warning(push, 3)
#pragma warning(disable : 4180 4412 4455 4494 4514 4574 4582 4583 4587 4588 4619 4623 4625 4626 4643 4648 4702 4793 4820 4988 5026 5027 5045 6294 4984 5053 )
#line 21
namespace std { 
#line 22
template < class _Container >
class back_insert_iterator {
public :
    using iterator_category = output_iterator_tag;
    using value_type = void;
    using pointer = void;
    using reference = void;

    using container_type = _Container;




    using difference_type = void;


    inline explicit back_insert_iterator ( _Container & _Cont ) noexcept
        : container ( :: std :: addressof ( _Cont ) ) { }

    inline back_insert_iterator & operator = ( const typename _Container :: value_type & _Val ) {
        container -> push_back ( _Val );
        return * this;
    }

    inline back_insert_iterator & operator = ( typename _Container :: value_type && _Val ) {
        container -> push_back ( :: std :: move ( _Val ) );
        return * this;
    }

    [ [ nodiscard ] ] inline back_insert_iterator & operator * ( ) noexcept {
        return * this;
    }

    inline back_insert_iterator & operator ++ ( ) noexcept {
        return * this;
    }

    inline back_insert_iterator operator ++ ( int ) noexcept {
        return * this;
    }

protected :
    _Container * container;
};
#line 67 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\iterator"
template < class _Container >
[ [ nodiscard ] ] inline back_insert_iterator < _Container > back_inserter ( _Container & _Cont ) noexcept {

    return back_insert_iterator < _Container > ( _Cont );
}
#line 73
template < class _Container >
class front_insert_iterator {
public :
    using iterator_category = output_iterator_tag;
    using value_type = void;
    using pointer = void;
    using reference = void;

    using container_type = _Container;




    using difference_type = void;


    inline explicit front_insert_iterator ( _Container & _Cont ) : container ( :: std :: addressof ( _Cont ) ) { }

    inline front_insert_iterator & operator = ( const typename _Container :: value_type & _Val ) {

        container -> push_front ( _Val );
        return * this;
    }

    inline front_insert_iterator & operator = ( typename _Container :: value_type && _Val ) {
        container -> push_front ( :: std :: move ( _Val ) );
        return * this;
    }

    [ [ nodiscard ] ] inline front_insert_iterator & operator * ( ) {
        return * this;
    }

    inline front_insert_iterator & operator ++ ( ) {
        return * this;
    }

    inline front_insert_iterator operator ++ ( int ) {
        return * this;
    }

protected :
    _Container * container;
};
#line 118 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\iterator"
template < class _Container >
[ [ nodiscard ] ] inline front_insert_iterator < _Container > front_inserter ( _Container & _Cont ) {
    return front_insert_iterator < _Container > ( _Cont );
}
#line 123
template < class _Container >
class insert_iterator {
public :
    using iterator_category = output_iterator_tag;
    using value_type = void;
    using pointer = void;
    using reference = void;

    using container_type = _Container;




    using difference_type = void;
    using _Wrapped_iter = typename _Container :: iterator;


    inline insert_iterator ( _Container & _Cont, _Wrapped_iter _Where )
        : container ( :: std :: addressof ( _Cont ) ), iter ( :: std :: move ( _Where ) ) { }

    inline insert_iterator & operator = ( const typename _Container :: value_type & _Val ) {

        iter = container -> insert ( iter, _Val );
        ++ iter;
        return * this;
    }

    inline insert_iterator & operator = ( typename _Container :: value_type && _Val ) {
        iter = container -> insert ( iter, :: std :: move ( _Val ) );
        ++ iter;
        return * this;
    }

    [ [ nodiscard ] ] inline insert_iterator & operator * ( ) {
        return * this;
    }

    inline insert_iterator & operator ++ ( ) {
        return * this;
    }

    inline insert_iterator & operator ++ ( int ) {
        return * this;
    }

protected :
    _Container * container;
    _Wrapped_iter iter;
};
#line 174 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\iterator"
template < class _Container >
[ [ nodiscard ] ] inline insert_iterator < _Container > inserter ( _Container & _Cont, typename _Container :: iterator _Where ) {
    return insert_iterator < _Container > ( _Cont, _Where );
}
#line 236 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\iterator"
template < class _Ty, class _Elem = char, class _Traits = char_traits < _Elem >, class _Diff = ptrdiff_t >
class istream_iterator {
public :
    using iterator_category = input_iterator_tag;
    using value_type = _Ty;
    using difference_type = _Diff;
    using pointer = const _Ty *;
    using reference = const _Ty &;
    using char_type = _Elem;
    using traits_type = _Traits;
    using istream_type = basic_istream < _Elem, _Traits >;

    static_assert ( conjunction_v < is_default_constructible < _Ty >, is_copy_constructible < _Ty >, is_copy_assignable < _Ty >>,
        "istream_iterator<T> requires T to be default constructible, copy constructible, and copy assignable. (N4835 [istream.iterator]/2" ")"
                                      );

    constexpr istream_iterator ( ) noexcept ( is_nothrow_default_constructible_v < _Ty > ) { }






    istream_iterator ( istream_type & _Istr ) : _Myistr ( :: std :: addressof ( _Istr ) ) {
        _Getval ( );
    }

    [ [ nodiscard ] ] const _Ty & operator * ( ) const noexcept {
        do { if ( _Myistr ) { } else { do { ( void ) ( ( 1 != _CrtDbgReport ( 2, "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\iterator", 264, 0, "%s", "The stored stream pointer in_stream must be non-null" ) ) || ( __debugbreak ( ), 0 ) ); :: _invalid_parameter ( L"\x22\x54\x68\x65\x20\x73\x74\x6f\x72\x65\x64\x20\x73\x74\x72\x65\x61\x6d\x20\x70\x6f\x69\x6e\x74\x65\x72\x20\x69\x6e\x5f\x73\x74" L"\x72\x65\x61\x6d\x20\x6d\x75\x73\x74\x20\x62\x65\x20\x6e\x6f\x6e\x2d\x6e\x75\x6c\x6c\x22", L"", L"\x45\x3a\x5c\x56\x69\x73\x75\x61\x6c\x53\x74\x75\x64\x69\x6f\x5c\x32\x30\x32\x32\x5c\x50\x72\x65\x76\x69\x65\x77\x5c\x56\x43\x5c" L"\x54\x6f\x6f\x6c\x73\x5c\x4d\x53\x56\x43\x5c\x31\x34\x2e\x33\x37\x2e\x33\x32\x37\x30\x35\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x69" L"\x74\x65\x72\x61\x74\x6f\x72", 264, 0 ); } while ( false ); }; } while ( false );
        return _Myval;
    }

    [ [ nodiscard ] ] const _Ty * operator -> ( ) const noexcept {
        do { if ( _Myistr ) { } else { do { ( void ) ( ( 1 != _CrtDbgReport ( 2, "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\iterator", 269, 0, "%s", "The stored stream pointer in_stream must be non-null" ) ) || ( __debugbreak ( ), 0 ) ); :: _invalid_parameter ( L"\x22\x54\x68\x65\x20\x73\x74\x6f\x72\x65\x64\x20\x73\x74\x72\x65\x61\x6d\x20\x70\x6f\x69\x6e\x74\x65\x72\x20\x69\x6e\x5f\x73\x74" L"\x72\x65\x61\x6d\x20\x6d\x75\x73\x74\x20\x62\x65\x20\x6e\x6f\x6e\x2d\x6e\x75\x6c\x6c\x22", L"", L"\x45\x3a\x5c\x56\x69\x73\x75\x61\x6c\x53\x74\x75\x64\x69\x6f\x5c\x32\x30\x32\x32\x5c\x50\x72\x65\x76\x69\x65\x77\x5c\x56\x43\x5c" L"\x54\x6f\x6f\x6c\x73\x5c\x4d\x53\x56\x43\x5c\x31\x34\x2e\x33\x37\x2e\x33\x32\x37\x30\x35\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x69" L"\x74\x65\x72\x61\x74\x6f\x72", 269, 0 ); } while ( false ); }; } while ( false );
        return :: std :: addressof ( _Myval );
    }

    istream_iterator & operator ++ ( ) {
        _Getval ( );
        return * this;
    }

    istream_iterator operator ++ ( int ) {
        istream_iterator _Tmp = * this;
        _Getval ( );
        return _Tmp;
    }

    [ [ nodiscard ] ] bool _Equal ( const istream_iterator & _Right ) const noexcept {
        return _Myistr == _Right . _Myistr;
    }







private :
    void _Getval ( ) {
        do { if ( _Myistr ) { } else { do { ( void ) ( ( 1 != _CrtDbgReport ( 2, "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\iterator", 296, 0, "%s", "The stored stream pointer in_stream must be non-null" ) ) || ( __debugbreak ( ), 0 ) ); :: _invalid_parameter ( L"\x22\x54\x68\x65\x20\x73\x74\x6f\x72\x65\x64\x20\x73\x74\x72\x65\x61\x6d\x20\x70\x6f\x69\x6e\x74\x65\x72\x20\x69\x6e\x5f\x73\x74" L"\x72\x65\x61\x6d\x20\x6d\x75\x73\x74\x20\x62\x65\x20\x6e\x6f\x6e\x2d\x6e\x75\x6c\x6c\x22", L"", L"\x45\x3a\x5c\x56\x69\x73\x75\x61\x6c\x53\x74\x75\x64\x69\x6f\x5c\x32\x30\x32\x32\x5c\x50\x72\x65\x76\x69\x65\x77\x5c\x56\x43\x5c" L"\x54\x6f\x6f\x6c\x73\x5c\x4d\x53\x56\x43\x5c\x31\x34\x2e\x33\x37\x2e\x33\x32\x37\x30\x35\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x69" L"\x74\x65\x72\x61\x74\x6f\x72", 296, 0 ); } while ( false ); }; } while ( false );
        if ( ! ( * _Myistr >> _Myval ) ) {
            _Myistr = nullptr;
        }
    }

    istream_type * _Myistr { nullptr };
    _Ty _Myval { };
};
#line 306
template < class _Ty, class _Elem, class _Traits, class _Diff >
[ [ nodiscard ] ] bool operator == ( const istream_iterator < _Ty, _Elem, _Traits, _Diff > & _Left,
    const istream_iterator < _Ty, _Elem, _Traits, _Diff > & _Right ) noexcept {
    return _Left . _Equal ( _Right );
}
#line 313
template < class _Ty, class _Elem, class _Traits, class _Diff >
[ [ nodiscard ] ] bool operator != ( const istream_iterator < _Ty, _Elem, _Traits, _Diff > & _Left,
    const istream_iterator < _Ty, _Elem, _Traits, _Diff > & _Right ) noexcept {
    return ! ( _Left == _Right );
}
#line 320 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\iterator"
template < class _Ty, class _Elem = char, class _Traits = char_traits < _Elem > >
class ostream_iterator {
public :
    using iterator_category = output_iterator_tag;
    using value_type = void;



    using difference_type = void;

    using pointer = void;
    using reference = void;
    using char_type = _Elem;
    using traits_type = _Traits;
    using ostream_type = basic_ostream < _Elem, _Traits >;

    ostream_iterator ( ostream_type & _Ostr, const _Elem * const _Delim = nullptr ) noexcept
        : _Mydelim ( _Delim ), _Myostr ( :: std :: addressof ( _Ostr ) ) { }

    ostream_iterator & operator = ( const _Ty & _Val ) {
        * _Myostr << _Val;
        if ( _Mydelim ) {
            * _Myostr << _Mydelim;
        }

        return * this;
    }

    [ [ nodiscard ] ] ostream_iterator & operator * ( ) noexcept {
        return * this;
    }

    ostream_iterator & operator ++ ( ) noexcept {
        return * this;
    }

    ostream_iterator & operator ++ ( int ) noexcept {
        return * this;
    }

private :
    const _Elem * _Mydelim;
    ostream_type * _Myostr;
};
#line 365 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\iterator"
template < class _Elem, class _Traits >
class istreambuf_iterator {
public :
    using iterator_category = input_iterator_tag;
    using value_type = _Elem;
    using difference_type = typename _Traits :: off_type;
    using pointer = const _Elem *;
    using reference = _Elem;
    using char_type = _Elem;
    using traits_type = _Traits;
    using int_type = typename traits_type :: int_type;
    using streambuf_type = basic_streambuf < _Elem, _Traits >;
    using istream_type = basic_istream < _Elem, _Traits >;

    constexpr istreambuf_iterator ( ) noexcept : _Strbuf ( nullptr ), _Got ( true ), _Val ( ) { }




    istreambuf_iterator ( istream_type & _Istr ) noexcept : _Strbuf ( _Istr . rdbuf ( ) ), _Got ( ! _Strbuf ), _Val ( ) { }

    istreambuf_iterator ( streambuf_type * _Sb ) noexcept : _Strbuf ( _Sb ), _Got ( ! _Sb ), _Val ( ) { }

private :
    class _Istreambuf_proxy {
    public :
        [ [ nodiscard ] ] _Elem operator * ( ) const noexcept ( is_nothrow_copy_constructible_v < _Elem > ) {
            return _Keep;
        }

    private :
        friend istreambuf_iterator;
        _Istreambuf_proxy ( streambuf_type * _Strbuf_, _Elem _Keep_ ) noexcept (
            is_nothrow_copy_constructible_v < _Elem > )
            : _Strbuf ( _Strbuf_ ), _Keep ( _Keep_ ) { }

        streambuf_type * _Strbuf;
        _Elem _Keep;
    };

public :
    istreambuf_iterator ( const _Istreambuf_proxy & _Px ) noexcept : _Strbuf ( _Px . _Strbuf ), _Got ( ! _Strbuf ), _Val ( ) { }

    [ [ nodiscard ] ] _Elem operator * ( ) const {
        if ( ! _Got ) {
            _Peek ( );
        }


        do { if ( _Strbuf ) { } else { do { ( void ) ( ( 1 != _CrtDbgReport ( 2, "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\iterator", 414, 0, "%s", "istreambuf_iterator is not dereferenceable" ) ) || ( __debugbreak ( ), 0 ) ); :: _invalid_parameter ( L"\x22\x69\x73\x74\x72\x65\x61\x6d\x62\x75\x66\x5f\x69\x74\x65\x72\x61\x74\x6f\x72\x20\x69\x73\x20\x6e\x6f\x74\x20\x64\x65\x72\x65" L"\x66\x65\x72\x65\x6e\x63\x65\x61\x62\x6c\x65\x22", L"", L"\x45\x3a\x5c\x56\x69\x73\x75\x61\x6c\x53\x74\x75\x64\x69\x6f\x5c\x32\x30\x32\x32\x5c\x50\x72\x65\x76\x69\x65\x77\x5c\x56\x43\x5c" L"\x54\x6f\x6f\x6c\x73\x5c\x4d\x53\x56\x43\x5c\x31\x34\x2e\x33\x37\x2e\x33\x32\x37\x30\x35\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x69" L"\x74\x65\x72\x61\x74\x6f\x72", 414, 0 ); } while ( false ); }; } while ( false );


        return _Val;
    }

    istreambuf_iterator & operator ++ ( ) {

        do { if ( _Strbuf ) { } else { do { ( void ) ( ( 1 != _CrtDbgReport ( 2, "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\iterator", 422, 0, "%s", "istreambuf_iterator is not incrementable" ) ) || ( __debugbreak ( ), 0 ) ); :: _invalid_parameter ( L"\x22\x69\x73\x74\x72\x65\x61\x6d\x62\x75\x66\x5f\x69\x74\x65\x72\x61\x74\x6f\x72\x20\x69\x73\x20\x6e\x6f\x74\x20\x69\x6e\x63\x72" L"\x65\x6d\x65\x6e\x74\x61\x62\x6c\x65\x22", L"", L"\x45\x3a\x5c\x56\x69\x73\x75\x61\x6c\x53\x74\x75\x64\x69\x6f\x5c\x32\x30\x32\x32\x5c\x50\x72\x65\x76\x69\x65\x77\x5c\x56\x43\x5c" L"\x54\x6f\x6f\x6c\x73\x5c\x4d\x53\x56\x43\x5c\x31\x34\x2e\x33\x37\x2e\x33\x32\x37\x30\x35\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x69" L"\x74\x65\x72\x61\x74\x6f\x72", 422, 0 ); } while ( false ); }; } while ( false );


        _Inc ( );
        return * this;
    }

    _Istreambuf_proxy operator ++ ( int ) {
        if ( ! _Got ) {
            _Peek ( );
        }

        _Istreambuf_proxy _Tmp { _Strbuf, _Val };
        ++ * this;
        return _Tmp;
    }

    [ [ nodiscard ] ] bool equal ( const istreambuf_iterator & _Right ) const {
        if ( ! _Got ) {
            _Peek ( );
        }

        if ( ! _Right . _Got ) {
            _Right . _Peek ( );
        }

        return ( ! _Strbuf && ! _Right . _Strbuf ) || ( _Strbuf && _Right . _Strbuf );
    }











private :
    void _Inc ( ) {
        if ( ! _Strbuf || traits_type :: eq_int_type ( traits_type :: eof ( ), _Strbuf -> sbumpc ( ) ) ) {
            _Strbuf = nullptr;
            _Got = true;
        } else {
            _Got = false;
        }
    }

    _Elem _Peek ( ) const {
        int_type _Meta;
        if ( ! _Strbuf || traits_type :: eq_int_type ( traits_type :: eof ( ), _Meta = _Strbuf -> sgetc ( ) ) ) {
            _Strbuf = nullptr;
        } else {
            _Val = traits_type :: to_char_type ( _Meta );
        }

        _Got = true;
        return _Val;
    }

    mutable streambuf_type * _Strbuf;
    mutable bool _Got;
    mutable _Elem _Val;
};
#line 488 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\iterator"
template < class _Elem, class _Traits >
[ [ nodiscard ] ] bool operator == (
    const istreambuf_iterator < _Elem, _Traits > & _Left, const istreambuf_iterator < _Elem, _Traits > & _Right ) {
    return _Left . equal ( _Right );
}
#line 495
template < class _Elem, class _Traits >
[ [ nodiscard ] ] bool operator != (
    const istreambuf_iterator < _Elem, _Traits > & _Left, const istreambuf_iterator < _Elem, _Traits > & _Right ) {
    return ! ( _Left == _Right );
}
#line 502 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\iterator"
template < class _Elem, class _Traits >
class ostreambuf_iterator {
public :
    using iterator_category = output_iterator_tag;
    using value_type = void;



    using difference_type = void;

    using pointer = void;
    using reference = void;
    using char_type = _Elem;
    using traits_type = _Traits;
    using streambuf_type = basic_streambuf < _Elem, _Traits >;
    using ostream_type = basic_ostream < _Elem, _Traits >;

    ostreambuf_iterator ( streambuf_type * _Sb ) noexcept : _Strbuf ( _Sb ) { }

    ostreambuf_iterator ( ostream_type & _Ostr ) noexcept : _Strbuf ( _Ostr . rdbuf ( ) ) { }

    ostreambuf_iterator & operator = ( _Elem _Right ) {
        if ( ! _Strbuf || traits_type :: eq_int_type ( _Traits :: eof ( ), _Strbuf -> sputc ( _Right ) ) ) {
            _Failed = true;
        }

        return * this;
    }

    [ [ nodiscard ] ] ostreambuf_iterator & operator * ( ) noexcept {
        return * this;
    }

    ostreambuf_iterator & operator ++ ( ) noexcept {
        return * this;
    }

    ostreambuf_iterator & operator ++ ( int ) noexcept {
        return * this;
    }

    [ [ nodiscard ] ] bool failed ( ) const noexcept {
        return _Failed;
    }

private :
    bool _Failed = false;
    streambuf_type * _Strbuf;
};
#line 1453 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\iterator"
}
#line 1455
namespace stdext { 
#line 1456
using std::iterator_traits;
#line 1457
using std::size_t;
#line 1459
template < class _Ptr >
class checked_array_iterator {
    static_assert ( :: std :: is_pointer_v < _Ptr >, "checked_array_iterator requires pointers" );

public :
    using iterator_category = typename iterator_traits < _Ptr > :: iterator_category;
    using value_type = typename iterator_traits < _Ptr > :: value_type;
    using difference_type = typename iterator_traits < _Ptr > :: difference_type;
    using pointer = typename iterator_traits < _Ptr > :: pointer;
    using reference = typename iterator_traits < _Ptr > :: reference;

    constexpr checked_array_iterator ( ) noexcept : _Myarray ( nullptr ), _Mysize ( 0 ), _Myindex ( 0 ) { }

    constexpr checked_array_iterator ( const _Ptr _Array, const size_t _Size, const size_t _Index = 0 ) noexcept
        : _Myarray ( _Array ), _Mysize ( _Size ), _Myindex ( _Index ) {
        do { if ( _Index <= _Size ) { } else { do { ( void ) ( ( 1 != _CrtDbgReport ( 2, "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\iterator", 1474, 0, "%s", "checked_array_iterator construction index out of range" ) ) || ( __debugbreak ( ), 0 ) ); :: _invalid_parameter ( L"\x22\x63\x68\x65\x63\x6b\x65\x64\x5f\x61\x72\x72\x61\x79\x5f\x69\x74\x65\x72\x61\x74\x6f\x72\x20\x63\x6f\x6e\x73\x74\x72\x75\x63" L"\x74\x69\x6f\x6e\x20\x69\x6e\x64\x65\x78\x20\x6f\x75\x74\x20\x6f\x66\x20\x72\x61\x6e\x67\x65\x22", L"", L"\x45\x3a\x5c\x56\x69\x73\x75\x61\x6c\x53\x74\x75\x64\x69\x6f\x5c\x32\x30\x32\x32\x5c\x50\x72\x65\x76\x69\x65\x77\x5c\x56\x43\x5c" L"\x54\x6f\x6f\x6c\x73\x5c\x4d\x53\x56\x43\x5c\x31\x34\x2e\x33\x37\x2e\x33\x32\x37\x30\x35\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x69" L"\x74\x65\x72\x61\x74\x6f\x72", 1474, 0 ); } while ( false ); }; } while ( false );
    }

    [ [ nodiscard ] ] constexpr _Ptr base ( ) const noexcept {
        return _Myarray + _Myindex;
    }

    [ [ nodiscard ] ] constexpr reference operator * ( ) const noexcept {
        return * operator -> ( );
    }

    [ [ nodiscard ] ] constexpr pointer operator -> ( ) const noexcept {
        do { if ( _Myarray ) { } else { do { ( void ) ( ( 1 != _CrtDbgReport ( 2, "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\iterator", 1486, 0, "%s", "cannot dereference value-initialized or null checked_array_iterator" ) ) || ( __debugbreak ( ), 0 ) ); :: _invalid_parameter ( L"\x22\x63\x61\x6e\x6e\x6f\x74\x20\x64\x65\x72\x65\x66\x65\x72\x65\x6e\x63\x65\x20\x76\x61\x6c\x75\x65\x2d\x69\x6e\x69\x74\x69\x61" L"\x6c\x69\x7a\x65\x64\x20\x6f\x72\x20\x6e\x75\x6c\x6c\x20\x63\x68\x65\x63\x6b\x65\x64\x5f\x61\x72\x72\x61\x79\x5f\x69\x74\x65\x72" L"\x61\x74\x6f\x72\x22", L"", L"\x45\x3a\x5c\x56\x69\x73\x75\x61\x6c\x53\x74\x75\x64\x69\x6f\x5c\x32\x30\x32\x32\x5c\x50\x72\x65\x76\x69\x65\x77\x5c\x56\x43\x5c" L"\x54\x6f\x6f\x6c\x73\x5c\x4d\x53\x56\x43\x5c\x31\x34\x2e\x33\x37\x2e\x33\x32\x37\x30\x35\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x69" L"\x74\x65\x72\x61\x74\x6f\x72", 1486, 0 ); } while ( false ); }; } while ( false );
        do { if ( _Myindex < _Mysize ) { } else { do { ( void ) ( ( 1 != _CrtDbgReport ( 2, "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\iterator", 1487, 0, "%s", "cannot dereference end checked_array_iterator" ) ) || ( __debugbreak ( ), 0 ) ); :: _invalid_parameter ( L"\x22\x63\x61\x6e\x6e\x6f\x74\x20\x64\x65\x72\x65\x66\x65\x72\x65\x6e\x63\x65\x20\x65\x6e\x64\x20\x63\x68\x65\x63\x6b\x65\x64\x5f" L"\x61\x72\x72\x61\x79\x5f\x69\x74\x65\x72\x61\x74\x6f\x72\x22", L"", L"\x45\x3a\x5c\x56\x69\x73\x75\x61\x6c\x53\x74\x75\x64\x69\x6f\x5c\x32\x30\x32\x32\x5c\x50\x72\x65\x76\x69\x65\x77\x5c\x56\x43\x5c" L"\x54\x6f\x6f\x6c\x73\x5c\x4d\x53\x56\x43\x5c\x31\x34\x2e\x33\x37\x2e\x33\x32\x37\x30\x35\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x69" L"\x74\x65\x72\x61\x74\x6f\x72", 1487, 0 ); } while ( false ); }; } while ( false );
        return _Myarray + _Myindex;
    }

    constexpr checked_array_iterator & operator ++ ( ) noexcept {
        do { if ( _Myarray ) { } else { do { ( void ) ( ( 1 != _CrtDbgReport ( 2, "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\iterator", 1492, 0, "%s", "cannot increment value-initialized or null checked_array_iterator" ) ) || ( __debugbreak ( ), 0 ) ); :: _invalid_parameter ( L"\x22\x63\x61\x6e\x6e\x6f\x74\x20\x69\x6e\x63\x72\x65\x6d\x65\x6e\x74\x20\x76\x61\x6c\x75\x65\x2d\x69\x6e\x69\x74\x69\x61\x6c\x69" L"\x7a\x65\x64\x20\x6f\x72\x20\x6e\x75\x6c\x6c\x20\x63\x68\x65\x63\x6b\x65\x64\x5f\x61\x72\x72\x61\x79\x5f\x69\x74\x65\x72\x61\x74" L"\x6f\x72\x22", L"", L"\x45\x3a\x5c\x56\x69\x73\x75\x61\x6c\x53\x74\x75\x64\x69\x6f\x5c\x32\x30\x32\x32\x5c\x50\x72\x65\x76\x69\x65\x77\x5c\x56\x43\x5c" L"\x54\x6f\x6f\x6c\x73\x5c\x4d\x53\x56\x43\x5c\x31\x34\x2e\x33\x37\x2e\x33\x32\x37\x30\x35\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x69" L"\x74\x65\x72\x61\x74\x6f\x72", 1492, 0 ); } while ( false ); }; } while ( false );
        do { if ( _Myindex < _Mysize ) { } else { do { ( void ) ( ( 1 != _CrtDbgReport ( 2, "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\iterator", 1493, 0, "%s", "cannot increment checked_array_iterator past end" ) ) || ( __debugbreak ( ), 0 ) ); :: _invalid_parameter ( L"\x22\x63\x61\x6e\x6e\x6f\x74\x20\x69\x6e\x63\x72\x65\x6d\x65\x6e\x74\x20\x63\x68\x65\x63\x6b\x65\x64\x5f\x61\x72\x72\x61\x79\x5f" L"\x69\x74\x65\x72\x61\x74\x6f\x72\x20\x70\x61\x73\x74\x20\x65\x6e\x64\x22", L"", L"\x45\x3a\x5c\x56\x69\x73\x75\x61\x6c\x53\x74\x75\x64\x69\x6f\x5c\x32\x30\x32\x32\x5c\x50\x72\x65\x76\x69\x65\x77\x5c\x56\x43\x5c" L"\x54\x6f\x6f\x6c\x73\x5c\x4d\x53\x56\x43\x5c\x31\x34\x2e\x33\x37\x2e\x33\x32\x37\x30\x35\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x69" L"\x74\x65\x72\x61\x74\x6f\x72", 1493, 0 ); } while ( false ); }; } while ( false );
        ++ _Myindex;
        return * this;
    }

    constexpr checked_array_iterator operator ++ ( int ) noexcept {
        checked_array_iterator _Tmp = * this;
        ++ * this;
        return _Tmp;
    }

    constexpr checked_array_iterator & operator -- ( ) noexcept {
        do { if ( _Myarray ) { } else { do { ( void ) ( ( 1 != _CrtDbgReport ( 2, "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\iterator", 1505, 0, "%s", "cannot decrement value-initialized or null checked_array_iterator" ) ) || ( __debugbreak ( ), 0 ) ); :: _invalid_parameter ( L"\x22\x63\x61\x6e\x6e\x6f\x74\x20\x64\x65\x63\x72\x65\x6d\x65\x6e\x74\x20\x76\x61\x6c\x75\x65\x2d\x69\x6e\x69\x74\x69\x61\x6c\x69" L"\x7a\x65\x64\x20\x6f\x72\x20\x6e\x75\x6c\x6c\x20\x63\x68\x65\x63\x6b\x65\x64\x5f\x61\x72\x72\x61\x79\x5f\x69\x74\x65\x72\x61\x74" L"\x6f\x72\x22", L"", L"\x45\x3a\x5c\x56\x69\x73\x75\x61\x6c\x53\x74\x75\x64\x69\x6f\x5c\x32\x30\x32\x32\x5c\x50\x72\x65\x76\x69\x65\x77\x5c\x56\x43\x5c" L"\x54\x6f\x6f\x6c\x73\x5c\x4d\x53\x56\x43\x5c\x31\x34\x2e\x33\x37\x2e\x33\x32\x37\x30\x35\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x69" L"\x74\x65\x72\x61\x74\x6f\x72", 1505, 0 ); } while ( false ); }; } while ( false );
        do { if ( _Myindex != 0 ) { } else { do { ( void ) ( ( 1 != _CrtDbgReport ( 2, "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\iterator", 1506, 0, "%s", "cannot decrement checked_array_iterator before begin" ) ) || ( __debugbreak ( ), 0 ) ); :: _invalid_parameter ( L"\x22\x63\x61\x6e\x6e\x6f\x74\x20\x64\x65\x63\x72\x65\x6d\x65\x6e\x74\x20\x63\x68\x65\x63\x6b\x65\x64\x5f\x61\x72\x72\x61\x79\x5f" L"\x69\x74\x65\x72\x61\x74\x6f\x72\x20\x62\x65\x66\x6f\x72\x65\x20\x62\x65\x67\x69\x6e\x22", L"", L"\x45\x3a\x5c\x56\x69\x73\x75\x61\x6c\x53\x74\x75\x64\x69\x6f\x5c\x32\x30\x32\x32\x5c\x50\x72\x65\x76\x69\x65\x77\x5c\x56\x43\x5c" L"\x54\x6f\x6f\x6c\x73\x5c\x4d\x53\x56\x43\x5c\x31\x34\x2e\x33\x37\x2e\x33\x32\x37\x30\x35\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x69" L"\x74\x65\x72\x61\x74\x6f\x72", 1506, 0 ); } while ( false ); }; } while ( false );
        -- _Myindex;
        return * this;
    }

    constexpr checked_array_iterator operator -- ( int ) noexcept {
        checked_array_iterator _Tmp = * this;
        -- * this;
        return _Tmp;
    }

    constexpr checked_array_iterator & operator += ( const difference_type _Off ) noexcept {
        if ( _Off != 0 ) {
            do { if ( _Myarray ) { } else { do { ( void ) ( ( 1 != _CrtDbgReport ( 2, "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\iterator", 1519, 0, "%s", "cannot seek value-initialized or null checked_array_iterator" ) ) || ( __debugbreak ( ), 0 ) ); :: _invalid_parameter ( L"\x22\x63\x61\x6e\x6e\x6f\x74\x20\x73\x65\x65\x6b\x20\x76\x61\x6c\x75\x65\x2d\x69\x6e\x69\x74\x69\x61\x6c\x69\x7a\x65\x64\x20\x6f" L"\x72\x20\x6e\x75\x6c\x6c\x20\x63\x68\x65\x63\x6b\x65\x64\x5f\x61\x72\x72\x61\x79\x5f\x69\x74\x65\x72\x61\x74\x6f\x72\x22", L"", L"\x45\x3a\x5c\x56\x69\x73\x75\x61\x6c\x53\x74\x75\x64\x69\x6f\x5c\x32\x30\x32\x32\x5c\x50\x72\x65\x76\x69\x65\x77\x5c\x56\x43\x5c" L"\x54\x6f\x6f\x6c\x73\x5c\x4d\x53\x56\x43\x5c\x31\x34\x2e\x33\x37\x2e\x33\x32\x37\x30\x35\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x69" L"\x74\x65\x72\x61\x74\x6f\x72", 1519, 0 ); } while ( false ); }; } while ( false );
        }

        if ( _Off < 0 ) {
            do { if ( _Myindex >= size_t { 0 } - static_cast < size_t > ( _Off ) ) { } else { do { ( void ) ( ( 1 != _CrtDbgReport ( 2, "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\iterator", 1524, 0, "%s", "cannot seek checked_array_iterator before begin" ) ) || ( __debugbreak ( ), 0 ) ); :: _invalid_parameter ( L"\x22\x63\x61\x6e\x6e\x6f\x74\x20\x73\x65\x65\x6b\x20\x63\x68\x65\x63\x6b\x65\x64\x5f\x61\x72\x72\x61\x79\x5f\x69\x74\x65\x72\x61" L"\x74\x6f\x72\x20\x62\x65\x66\x6f\x72\x65\x20\x62\x65\x67\x69\x6e\x22", L"", L"\x45\x3a\x5c\x56\x69\x73\x75\x61\x6c\x53\x74\x75\x64\x69\x6f\x5c\x32\x30\x32\x32\x5c\x50\x72\x65\x76\x69\x65\x77\x5c\x56\x43\x5c" L"\x54\x6f\x6f\x6c\x73\x5c\x4d\x53\x56\x43\x5c\x31\x34\x2e\x33\x37\x2e\x33\x32\x37\x30\x35\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x69" L"\x74\x65\x72\x61\x74\x6f\x72", 1524, 0 ); } while ( false ); }; } while ( false );

        }

        if ( _Off > 0 ) {
            do { if ( _Mysize - _Myindex >= static_cast < size_t > ( _Off ) ) { } else { do { ( void ) ( ( 1 != _CrtDbgReport ( 2, "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\iterator", 1529, 0, "%s", "cannot seek checked_array_iterator after end" ) ) || ( __debugbreak ( ), 0 ) ); :: _invalid_parameter ( L"\x22\x63\x61\x6e\x6e\x6f\x74\x20\x73\x65\x65\x6b\x20\x63\x68\x65\x63\x6b\x65\x64\x5f\x61\x72\x72\x61\x79\x5f\x69\x74\x65\x72\x61" L"\x74\x6f\x72\x20\x61\x66\x74\x65\x72\x20\x65\x6e\x64\x22", L"", L"\x45\x3a\x5c\x56\x69\x73\x75\x61\x6c\x53\x74\x75\x64\x69\x6f\x5c\x32\x30\x32\x32\x5c\x50\x72\x65\x76\x69\x65\x77\x5c\x56\x43\x5c" L"\x54\x6f\x6f\x6c\x73\x5c\x4d\x53\x56\x43\x5c\x31\x34\x2e\x33\x37\x2e\x33\x32\x37\x30\x35\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x69" L"\x74\x65\x72\x61\x74\x6f\x72", 1529, 0 ); } while ( false ); }; } while ( false );

        }

        _Myindex += _Off;
        return * this;
    }

    [ [ nodiscard ] ] constexpr checked_array_iterator operator + ( const difference_type _Off ) const noexcept {
        checked_array_iterator _Tmp = * this;
        _Tmp += _Off;
        return _Tmp;
    }

    friend constexpr checked_array_iterator operator + (
        const difference_type _Off, const checked_array_iterator < _Ptr > & _Next ) noexcept {
        return _Next + _Off;
    }

    constexpr checked_array_iterator & operator -= ( const difference_type _Off ) noexcept {
        if ( _Off != 0 ) {
            do { if ( _Myarray ) { } else { do { ( void ) ( ( 1 != _CrtDbgReport ( 2, "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\iterator", 1549, 0, "%s", "cannot seek value-initialized or null checked_array_iterator" ) ) || ( __debugbreak ( ), 0 ) ); :: _invalid_parameter ( L"\x22\x63\x61\x6e\x6e\x6f\x74\x20\x73\x65\x65\x6b\x20\x76\x61\x6c\x75\x65\x2d\x69\x6e\x69\x74\x69\x61\x6c\x69\x7a\x65\x64\x20\x6f" L"\x72\x20\x6e\x75\x6c\x6c\x20\x63\x68\x65\x63\x6b\x65\x64\x5f\x61\x72\x72\x61\x79\x5f\x69\x74\x65\x72\x61\x74\x6f\x72\x22", L"", L"\x45\x3a\x5c\x56\x69\x73\x75\x61\x6c\x53\x74\x75\x64\x69\x6f\x5c\x32\x30\x32\x32\x5c\x50\x72\x65\x76\x69\x65\x77\x5c\x56\x43\x5c" L"\x54\x6f\x6f\x6c\x73\x5c\x4d\x53\x56\x43\x5c\x31\x34\x2e\x33\x37\x2e\x33\x32\x37\x30\x35\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x69" L"\x74\x65\x72\x61\x74\x6f\x72", 1549, 0 ); } while ( false ); }; } while ( false );
        }

        if ( _Off > 0 ) {
            do { if ( _Myindex >= static_cast < size_t > ( _Off ) ) { } else { do { ( void ) ( ( 1 != _CrtDbgReport ( 2, "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\iterator", 1553, 0, "%s", "cannot seek checked_array_iterator before begin" ) ) || ( __debugbreak ( ), 0 ) ); :: _invalid_parameter ( L"\x22\x63\x61\x6e\x6e\x6f\x74\x20\x73\x65\x65\x6b\x20\x63\x68\x65\x63\x6b\x65\x64\x5f\x61\x72\x72\x61\x79\x5f\x69\x74\x65\x72\x61" L"\x74\x6f\x72\x20\x62\x65\x66\x6f\x72\x65\x20\x62\x65\x67\x69\x6e\x22", L"", L"\x45\x3a\x5c\x56\x69\x73\x75\x61\x6c\x53\x74\x75\x64\x69\x6f\x5c\x32\x30\x32\x32\x5c\x50\x72\x65\x76\x69\x65\x77\x5c\x56\x43\x5c" L"\x54\x6f\x6f\x6c\x73\x5c\x4d\x53\x56\x43\x5c\x31\x34\x2e\x33\x37\x2e\x33\x32\x37\x30\x35\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x69" L"\x74\x65\x72\x61\x74\x6f\x72", 1553, 0 ); } while ( false ); }; } while ( false );
        }

        if ( _Off < 0 ) {
            do { if ( _Mysize - _Myindex >= size_t { 0 } - static_cast < size_t > ( _Off ) ) { } else { do { ( void ) ( ( 1 != _CrtDbgReport ( 2, "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\iterator", 1558, 0, "%s", "cannot seek checked_array_iterator after end" ) ) || ( __debugbreak ( ), 0 ) ); :: _invalid_parameter ( L"\x22\x63\x61\x6e\x6e\x6f\x74\x20\x73\x65\x65\x6b\x20\x63\x68\x65\x63\x6b\x65\x64\x5f\x61\x72\x72\x61\x79\x5f\x69\x74\x65\x72\x61" L"\x74\x6f\x72\x20\x61\x66\x74\x65\x72\x20\x65\x6e\x64\x22", L"", L"\x45\x3a\x5c\x56\x69\x73\x75\x61\x6c\x53\x74\x75\x64\x69\x6f\x5c\x32\x30\x32\x32\x5c\x50\x72\x65\x76\x69\x65\x77\x5c\x56\x43\x5c" L"\x54\x6f\x6f\x6c\x73\x5c\x4d\x53\x56\x43\x5c\x31\x34\x2e\x33\x37\x2e\x33\x32\x37\x30\x35\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x69" L"\x74\x65\x72\x61\x74\x6f\x72", 1558, 0 ); } while ( false ); }; } while ( false );

        }

        _Myindex -= _Off;
        return * this;
    }

    [ [ nodiscard ] ] constexpr checked_array_iterator operator - ( const difference_type _Off ) const noexcept {
        checked_array_iterator _Tmp = * this;
        _Tmp -= _Off;
        return _Tmp;
    }

    [ [ nodiscard ] ] constexpr difference_type operator - ( const checked_array_iterator & _Right ) const noexcept {
        do { if ( _Myarray == _Right . _Myarray && _Mysize == _Right . _Mysize ) { } else { do { ( void ) ( ( 1 != _CrtDbgReport ( 2, "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\iterator", 1573, 0, "%s", "cannot subtract incompatible checked_array_iterators" ) ) || ( __debugbreak ( ), 0 ) ); :: _invalid_parameter ( L"\x22\x63\x61\x6e\x6e\x6f\x74\x20\x73\x75\x62\x74\x72\x61\x63\x74\x20\x69\x6e\x63\x6f\x6d\x70\x61\x74\x69\x62\x6c\x65\x20\x63\x68" L"\x65\x63\x6b\x65\x64\x5f\x61\x72\x72\x61\x79\x5f\x69\x74\x65\x72\x61\x74\x6f\x72\x73\x22", L"", L"\x45\x3a\x5c\x56\x69\x73\x75\x61\x6c\x53\x74\x75\x64\x69\x6f\x5c\x32\x30\x32\x32\x5c\x50\x72\x65\x76\x69\x65\x77\x5c\x56\x43\x5c" L"\x54\x6f\x6f\x6c\x73\x5c\x4d\x53\x56\x43\x5c\x31\x34\x2e\x33\x37\x2e\x33\x32\x37\x30\x35\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x69" L"\x74\x65\x72\x61\x74\x6f\x72", 1573, 0 ); } while ( false ); }; } while ( false );

        return static_cast < difference_type > ( _Myindex - _Right . _Myindex );
    }

    [ [ nodiscard ] ] constexpr reference operator [ ] ( const difference_type _Off ) const noexcept {
        return * ( * this + _Off );
    }

    [ [ nodiscard ] ] constexpr bool operator == ( const checked_array_iterator & _Right ) const noexcept {
        do { if ( _Myarray == _Right . _Myarray && _Mysize == _Right . _Mysize ) { } else { do { ( void ) ( ( 1 != _CrtDbgReport ( 2, "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\iterator", 1583, 0, "%s", "cannot compare incompatible checked_array_iterators for equality" ) ) || ( __debugbreak ( ), 0 ) ); :: _invalid_parameter ( L"\x22\x63\x61\x6e\x6e\x6f\x74\x20\x63\x6f\x6d\x70\x61\x72\x65\x20\x69\x6e\x63\x6f\x6d\x70\x61\x74\x69\x62\x6c\x65\x20\x63\x68\x65" L"\x63\x6b\x65\x64\x5f\x61\x72\x72\x61\x79\x5f\x69\x74\x65\x72\x61\x74\x6f\x72\x73\x20\x66\x6f\x72\x20\x65\x71\x75\x61\x6c\x69\x74" L"\x79\x22", L"", L"\x45\x3a\x5c\x56\x69\x73\x75\x61\x6c\x53\x74\x75\x64\x69\x6f\x5c\x32\x30\x32\x32\x5c\x50\x72\x65\x76\x69\x65\x77\x5c\x56\x43\x5c" L"\x54\x6f\x6f\x6c\x73\x5c\x4d\x53\x56\x43\x5c\x31\x34\x2e\x33\x37\x2e\x33\x32\x37\x30\x35\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x69" L"\x74\x65\x72\x61\x74\x6f\x72", 1583, 0 ); } while ( false ); }; } while ( false );

        return _Myindex == _Right . _Myindex;
    }








    [ [ nodiscard ] ] constexpr bool operator != ( const checked_array_iterator & _Right ) const noexcept {
        return ! ( * this == _Right );
    }

    [ [ nodiscard ] ] constexpr bool operator < ( const checked_array_iterator & _Right ) const noexcept {
        do { if ( _Myarray == _Right . _Myarray && _Mysize == _Right . _Mysize ) { } else { do { ( void ) ( ( 1 != _CrtDbgReport ( 2, "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\iterator", 1600, 0, "%s", "cannot compare incompatible checked_array_iterators" ) ) || ( __debugbreak ( ), 0 ) ); :: _invalid_parameter ( L"\x22\x63\x61\x6e\x6e\x6f\x74\x20\x63\x6f\x6d\x70\x61\x72\x65\x20\x69\x6e\x63\x6f\x6d\x70\x61\x74\x69\x62\x6c\x65\x20\x63\x68\x65" L"\x63\x6b\x65\x64\x5f\x61\x72\x72\x61\x79\x5f\x69\x74\x65\x72\x61\x74\x6f\x72\x73\x22", L"", L"\x45\x3a\x5c\x56\x69\x73\x75\x61\x6c\x53\x74\x75\x64\x69\x6f\x5c\x32\x30\x32\x32\x5c\x50\x72\x65\x76\x69\x65\x77\x5c\x56\x43\x5c" L"\x54\x6f\x6f\x6c\x73\x5c\x4d\x53\x56\x43\x5c\x31\x34\x2e\x33\x37\x2e\x33\x32\x37\x30\x35\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x69" L"\x74\x65\x72\x61\x74\x6f\x72", 1600, 0 ); } while ( false ); }; } while ( false );

        return _Myindex < _Right . _Myindex;
    }

    [ [ nodiscard ] ] constexpr bool operator > ( const checked_array_iterator & _Right ) const noexcept {
        return _Right < * this;
    }

    [ [ nodiscard ] ] constexpr bool operator <= ( const checked_array_iterator & _Right ) const noexcept {
        return ! ( _Right < * this );
    }

    [ [ nodiscard ] ] constexpr bool operator >= ( const checked_array_iterator & _Right ) const noexcept {
        return ! ( * this < _Right );
    }


    friend constexpr void _Verify_range (
        const checked_array_iterator & _First, const checked_array_iterator & _Last ) noexcept {
        do { if ( _First . _Myarray == _Last . _Myarray && _First . _Mysize == _Last . _Mysize ) { } else { do { ( void ) ( ( 1 != _CrtDbgReport ( 2, "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\iterator", 1620, 0, "%s", "mismatching checked_array_iterators" ) ) || ( __debugbreak ( ), 0 ) ); :: _invalid_parameter ( L"\x22\x6d\x69\x73\x6d\x61\x74\x63\x68\x69\x6e\x67\x20\x63\x68\x65\x63\x6b\x65\x64\x5f\x61\x72\x72\x61\x79\x5f\x69\x74\x65\x72\x61" L"\x74\x6f\x72\x73\x22", L"", L"\x45\x3a\x5c\x56\x69\x73\x75\x61\x6c\x53\x74\x75\x64\x69\x6f\x5c\x32\x30\x32\x32\x5c\x50\x72\x65\x76\x69\x65\x77\x5c\x56\x43\x5c" L"\x54\x6f\x6f\x6c\x73\x5c\x4d\x53\x56\x43\x5c\x31\x34\x2e\x33\x37\x2e\x33\x32\x37\x30\x35\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x69" L"\x74\x65\x72\x61\x74\x6f\x72", 1620, 0 ); } while ( false ); }; } while ( false );

        do { if ( _First . _Myindex <= _Last . _Myindex ) { } else { do { ( void ) ( ( 1 != _CrtDbgReport ( 2, "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\iterator", 1621, 0, "%s", "transposed checked_array_iterator range" ) ) || ( __debugbreak ( ), 0 ) ); :: _invalid_parameter ( L"\x22\x74\x72\x61\x6e\x73\x70\x6f\x73\x65\x64\x20\x63\x68\x65\x63\x6b\x65\x64\x5f\x61\x72\x72\x61\x79\x5f\x69\x74\x65\x72\x61\x74" L"\x6f\x72\x20\x72\x61\x6e\x67\x65\x22", L"", L"\x45\x3a\x5c\x56\x69\x73\x75\x61\x6c\x53\x74\x75\x64\x69\x6f\x5c\x32\x30\x32\x32\x5c\x50\x72\x65\x76\x69\x65\x77\x5c\x56\x43\x5c" L"\x54\x6f\x6f\x6c\x73\x5c\x4d\x53\x56\x43\x5c\x31\x34\x2e\x33\x37\x2e\x33\x32\x37\x30\x35\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x69" L"\x74\x65\x72\x61\x74\x6f\x72", 1621, 0 ); } while ( false ); }; } while ( false );
    }

    constexpr void _Verify_offset ( const difference_type _Off ) const noexcept {
        if ( _Off < 0 ) {
            do { if ( _Myindex >= size_t { 0 } - static_cast < size_t > ( _Off ) ) { } else { do { ( void ) ( ( 1 != _CrtDbgReport ( 2, "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\iterator", 1627, 0, "%s", "cannot seek checked_array_iterator iterator before begin" ) ) || ( __debugbreak ( ), 0 ) ); :: _invalid_parameter ( L"\x22\x63\x61\x6e\x6e\x6f\x74\x20\x73\x65\x65\x6b\x20\x63\x68\x65\x63\x6b\x65\x64\x5f\x61\x72\x72\x61\x79\x5f\x69\x74\x65\x72\x61" L"\x74\x6f\x72\x20\x69\x74\x65\x72\x61\x74\x6f\x72\x20\x62\x65\x66\x6f\x72\x65\x20\x62\x65\x67\x69\x6e\x22", L"", L"\x45\x3a\x5c\x56\x69\x73\x75\x61\x6c\x53\x74\x75\x64\x69\x6f\x5c\x32\x30\x32\x32\x5c\x50\x72\x65\x76\x69\x65\x77\x5c\x56\x43\x5c" L"\x54\x6f\x6f\x6c\x73\x5c\x4d\x53\x56\x43\x5c\x31\x34\x2e\x33\x37\x2e\x33\x32\x37\x30\x35\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x69" L"\x74\x65\x72\x61\x74\x6f\x72", 1627, 0 ); } while ( false ); }; } while ( false );

        }

        if ( _Off > 0 ) {
            do { if ( _Mysize - _Myindex >= static_cast < size_t > ( _Off ) ) { } else { do { ( void ) ( ( 1 != _CrtDbgReport ( 2, "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\iterator", 1632, 0, "%s", "cannot seek checked_array_iterator iterator after end" ) ) || ( __debugbreak ( ), 0 ) ); :: _invalid_parameter ( L"\x22\x63\x61\x6e\x6e\x6f\x74\x20\x73\x65\x65\x6b\x20\x63\x68\x65\x63\x6b\x65\x64\x5f\x61\x72\x72\x61\x79\x5f\x69\x74\x65\x72\x61" L"\x74\x6f\x72\x20\x69\x74\x65\x72\x61\x74\x6f\x72\x20\x61\x66\x74\x65\x72\x20\x65\x6e\x64\x22", L"", L"\x45\x3a\x5c\x56\x69\x73\x75\x61\x6c\x53\x74\x75\x64\x69\x6f\x5c\x32\x30\x32\x32\x5c\x50\x72\x65\x76\x69\x65\x77\x5c\x56\x43\x5c" L"\x54\x6f\x6f\x6c\x73\x5c\x4d\x53\x56\x43\x5c\x31\x34\x2e\x33\x37\x2e\x33\x32\x37\x30\x35\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x69" L"\x74\x65\x72\x61\x74\x6f\x72", 1632, 0 ); } while ( false ); }; } while ( false );

        }
    }

    using _Prevent_inheriting_unwrap = checked_array_iterator;

    [ [ nodiscard ] ] constexpr _Ptr _Unwrapped ( ) const noexcept {
        return _Myarray + _Myindex;
    }

    constexpr void _Seek_to ( _Ptr _It ) noexcept {
        _Myindex = static_cast < size_t > ( _It - _Myarray );
    }

private :
    _Ptr _Myarray;
    size_t _Mysize;
    size_t _Myindex;
};
#line 1652 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\iterator"
template < class _Ptr >
[ [ nodiscard ] ] constexpr checked_array_iterator < _Ptr > make_checked_array_iterator (
    const _Ptr _Array, const size_t _Size, const size_t _Index = 0 ) {
    return checked_array_iterator < _Ptr > ( _Array, _Size, _Index );
}
#line 1658
template < class _Ptr >
class unchecked_array_iterator {
    static_assert ( :: std :: is_pointer_v < _Ptr >, "unchecked_array_iterator requires pointers" );

public :
    using iterator_category = typename iterator_traits < _Ptr > :: iterator_category;
    using value_type = typename iterator_traits < _Ptr > :: value_type;
    using difference_type = typename iterator_traits < _Ptr > :: difference_type;
    using pointer = typename iterator_traits < _Ptr > :: pointer;
    using reference = typename iterator_traits < _Ptr > :: reference;

    constexpr unchecked_array_iterator ( ) noexcept : _Myptr ( nullptr ) { }

    constexpr explicit unchecked_array_iterator ( const _Ptr _Src ) noexcept : _Myptr ( _Src ) { }

    [ [ nodiscard ] ] constexpr _Ptr base ( ) const noexcept {
        return _Myptr;
    }

    [ [ nodiscard ] ] constexpr reference operator * ( ) const noexcept {
        return * _Myptr;
    }

    [ [ nodiscard ] ] constexpr pointer operator -> ( ) const noexcept {
        return _Myptr;
    }

    constexpr unchecked_array_iterator & operator ++ ( ) noexcept {
        ++ _Myptr;
        return * this;
    }

    constexpr unchecked_array_iterator operator ++ ( int ) noexcept {
        unchecked_array_iterator _Tmp = * this;
        ++ _Myptr;
        return _Tmp;
    }

    constexpr unchecked_array_iterator & operator -- ( ) noexcept {
        -- _Myptr;
        return * this;
    }

    constexpr unchecked_array_iterator operator -- ( int ) noexcept {
        unchecked_array_iterator _Tmp = * this;
        -- _Myptr;
        return _Tmp;
    }

    constexpr unchecked_array_iterator & operator += ( const difference_type _Off ) noexcept {
        _Myptr += _Off;
        return * this;
    }

    [ [ nodiscard ] ] constexpr unchecked_array_iterator operator + ( const difference_type _Off ) const noexcept {
        unchecked_array_iterator _Tmp = * this;
        _Tmp += _Off;
        return _Tmp;
    }

    friend constexpr unchecked_array_iterator operator + (
        const difference_type _Off, const unchecked_array_iterator & _Next ) noexcept {
        return _Next + _Off;
    }

    constexpr unchecked_array_iterator & operator -= ( const difference_type _Off ) noexcept {
        return * this += - _Off;
    }

    [ [ nodiscard ] ] constexpr unchecked_array_iterator operator - ( const difference_type _Off ) const noexcept {
        unchecked_array_iterator _Tmp = * this;
        _Tmp -= _Off;
        return _Tmp;
    }

    [ [ nodiscard ] ] constexpr difference_type operator - ( const unchecked_array_iterator & _Right ) const noexcept {
        return _Myptr - _Right . _Myptr;
    }

    [ [ nodiscard ] ] constexpr reference operator [ ] ( const difference_type _Off ) const noexcept {
        return * ( * this + _Off );
    }

    [ [ nodiscard ] ] constexpr bool operator == ( const unchecked_array_iterator & _Right ) const noexcept {
        return _Myptr == _Right . _Myptr;
    }






    [ [ nodiscard ] ] constexpr bool operator != ( const unchecked_array_iterator & _Right ) const noexcept {
        return ! ( * this == _Right );
    }

    [ [ nodiscard ] ] constexpr bool operator < ( const unchecked_array_iterator & _Right ) const noexcept {
        return _Myptr < _Right . _Myptr;
    }

    [ [ nodiscard ] ] constexpr bool operator > ( const unchecked_array_iterator & _Right ) const noexcept {
        return _Right < * this;
    }

    [ [ nodiscard ] ] constexpr bool operator <= ( const unchecked_array_iterator & _Right ) const noexcept {
        return ! ( _Right < * this );
    }

    [ [ nodiscard ] ] constexpr bool operator >= ( const unchecked_array_iterator & _Right ) const noexcept {
        return ! ( * this < _Right );
    }



    friend constexpr void _Verify_range (
        const unchecked_array_iterator _First, const unchecked_array_iterator _Last ) noexcept {
        :: std :: _Verify_range ( _First . _Myptr, _Last . _Myptr );
    }


    using _Prevent_inheriting_unwrap = unchecked_array_iterator;

    static constexpr bool _Unwrap_when_unverified = true;

    [ [ nodiscard ] ] constexpr _Ptr _Unwrapped ( ) const noexcept {
        return _Myptr;
    }

    constexpr void _Seek_to ( _Ptr _It ) noexcept {
        _Myptr = _It;
    }

private :
    _Ptr _Myptr;
};
#line 1794 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\iterator"
template < class _Ptr >
[ [ nodiscard ] ] unchecked_array_iterator < _Ptr > make_unchecked_array_iterator ( const _Ptr _It ) noexcept {
    return unchecked_array_iterator < _Ptr > ( _It );
}
#line 1798
}
#line 1802
#pragma warning(pop)
#pragma pack ( pop )
#line 13 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\__msvc_system_error_abi.hpp"
#pragma pack ( push, 8 )
#pragma warning(push, 3)
#pragma warning(disable : 4180 4412 4455 4494 4514 4574 4582 4583 4587 4588 4619 4623 4625 4626 4643 4648 4702 4793 4820 4988 5026 5027 5045 6294 4984 5053 )
#line 26 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\__msvc_system_error_abi.hpp"
extern "C" {
#line 27
[[nodiscard]] size_t __stdcall __std_get_string_size_without_trailing_whitespace(const char * _Str, size_t _Size) noexcept; 
#line 30
[[nodiscard]] size_t __stdcall __std_system_error_allocate_message(unsigned long _Message_id, char ** _Ptr_str) noexcept; 
#line 32
void __stdcall __std_system_error_deallocate_message(char * _Str) noexcept; 
#line 33
}
#line 37
#pragma warning(pop)
#pragma pack ( pop )
#line 14 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\exception"
#pragma pack ( push, 8 )
#pragma warning(push, 3)
#pragma warning(disable : 4180 4412 4455 4494 4514 4574 4582 4583 4587 4588 4619 4623 4625 4626 4643 4648 4702 4793 4820 4988 5026 5027 5045 6294 4984 5053 )
#line 21
namespace std { 
#line 25
bool __cdecl uncaught_exception() noexcept; 
#line 27 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\exception"
int __cdecl uncaught_exceptions() noexcept; 
#line 29
}
#line 15 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\malloc.h"
#pragma warning(push)
#pragma warning(disable: 4324 4514 4574 4710 4793 4820 4995 4996 28719 28726 28727 )
#line 19
__pragma( pack ( push, 8 )) extern "C" {
#line 47 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\malloc.h"
typedef 
#line 42
struct _heapinfo { 
#line 44
int *_pentry; 
#line 45
size_t _size; 
#line 46
int _useflag; 
#line 47
} _HEAPINFO; 
#line 55
void *__cdecl _alloca(size_t _Size); 
#line 61
__declspec(dllimport) intptr_t __cdecl _get_heap_handle(); 
#line 64
__declspec(dllimport) int __cdecl _heapmin(); 
#line 67
__declspec(dllimport) int __cdecl _heapwalk(_HEAPINFO * _EntryInfo); 
#line 71 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\malloc.h"
__declspec(dllimport) int __cdecl _heapchk(); 
#line 74 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\malloc.h"
__declspec(dllimport) int __cdecl _resetstkoflw(); 
#line 86 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\malloc.h"
static_assert((sizeof(unsigned) <= (16)), "sizeof(unsigned int) <= _ALLOCA_S_MARKER_SIZE");
#line 89
#pragma warning(push)
#pragma warning(disable: 6540)
#line 93
__inline void *_MarkAllocaS(void *_Ptr, unsigned _Marker) 
#line 94
{ 
#line 95
if (_Ptr) 
#line 96
{ 
#line 97
(*((unsigned *)_Ptr)) = _Marker; 
#line 98
_Ptr = (((char *)_Ptr) + 16); 
#line 99
}  
#line 100
return _Ptr; 
#line 101
} 
#line 103
__inline size_t _MallocaComputeSize(size_t _Size) 
#line 104
{ 
#line 105
size_t _MarkedSize = _Size + (16); 
#line 106
return (_MarkedSize > _Size) ? _MarkedSize : (0); 
#line 107
} 
#line 109
#pragma warning(pop)
#line 148 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\malloc.h"
#pragma warning(push)
#pragma warning(disable: 6014)
__inline void __cdecl _freea(void *_Memory) 
#line 151
{ 
#line 152
unsigned _Marker; 
#line 153
if (_Memory) 
#line 154
{ 
#line 155
_Memory = (((char *)_Memory) - 16); 
#line 156
_Marker = (*((unsigned *)_Memory)); 
#line 157
if (_Marker == (56797)) 
#line 158
{ 
#line 159
free(_Memory); 
#line 160
} else { 
#line 162
if (_Marker != (52428)) 
#line 163
{ 
#line 164
(void)(((!(!(("Corrupted pointer passed to _freea") && (0)))) || (1 != _CrtDbgReportW(2, L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x20\x28\x78\x38\x36\x29\x5c\x57\x69\x6e\x64\x6f\x77\x73\x20\x4b" L"\x69\x74\x73\x5c\x31\x30\x5c\x49\x6e\x63\x6c\x75\x64\x65\x5c\x31\x30\x2e\x30\x2e\x32\x32\x30\x30\x30\x2e\x30\x5c\x75\x63\x72\x74" L"\x5c\x6d\x61\x6c\x6c\x6f\x63\x2e\x68", 164, 0, L"\x25\x6c\x73", L"\x28\x22\x43\x6f\x72\x72\x75\x70\x74\x65\x64\x20\x70\x6f\x69\x6e\x74\x65\x72\x20\x70\x61\x73\x73\x65\x64\x20\x74\x6f\x20\x5f\x66" L"\x72\x65\x65\x61\x22\x20\x26\x26\x20\x30\x29"))) || (__debugbreak(), 0)); 
#line 165
}  }  
#line 167 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\malloc.h"
}  
#line 168
} 
#line 181 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\malloc.h"
}
#line 169 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\malloc.h"
#pragma warning(pop)
#line 181 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\malloc.h"
__pragma( pack ( pop )) 
#line 183
#pragma warning(pop)
#line 12 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_terminate.h"
#pragma warning(push)
#pragma warning(disable: 4324 4514 4574 4710 4793 4820 4995 4996 28719 28726 28727 )
#line 18
__pragma( pack ( push, 8 )) extern "C" {
#line 22
typedef void (__cdecl *terminate_handler)(void); 
#line 23
typedef void (__cdecl *terminate_function)(void); 
#line 32
__declspec(dllimport) __declspec(noreturn) void __cdecl abort(); 
#line 33
__declspec(dllimport) __declspec(noreturn) void __cdecl terminate() throw(); 
#line 37
__declspec(dllimport) terminate_handler __cdecl set_terminate(terminate_handler _NewTerminateHandler) throw(); 
#line 41
__declspec(dllimport) terminate_handler __cdecl _get_terminate(); 
#line 47 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_terminate.h"
}__pragma( pack ( pop )) 
#line 51 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\corecrt_terminate.h"
#pragma warning(pop)
#line 16 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\eh.h"
#pragma warning(push)
#pragma warning(disable: 4514 4820 )
#line 19
__pragma( pack ( push, 8 )) extern "C" {
#line 24
typedef void (__cdecl *unexpected_handler)(void); 
#line 25
typedef void (__cdecl *unexpected_function)(void); 
#line 33
__declspec(noreturn) void __cdecl unexpected() noexcept(false); 
#line 36
unexpected_handler __cdecl set_unexpected(unexpected_handler _NewUnexpectedHandler) noexcept; 
#line 39
unexpected_handler __cdecl _get_unexpected() noexcept; 
#line 44 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\eh.h"
struct _EXCEPTION_POINTERS; 
#line 48
typedef void (__cdecl *_se_translator_function)(unsigned, _EXCEPTION_POINTERS *); 
#line 50
_se_translator_function __cdecl _set_se_translator(_se_translator_function _NewSETranslator); 
#line 55 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\eh.h"
extern "C++" {
#line 56
class type_info; 
#line 57
}
#line 59
int __cdecl _is_exception_typeof(const type_info & _Type, _EXCEPTION_POINTERS * _ExceptionPtr); 
#line 64
bool __cdecl __uncaught_exception(); 
#line 65
int __cdecl __uncaught_exceptions(); 
#line 68 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\eh.h"
}__pragma( pack ( pop )) 
#line 70
#pragma warning(pop)
#line 18 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\vcruntime_exception.h"
#pragma warning(push)
#pragma warning(disable: 4514 4820 )
#line 21
#pragma pack ( push, 8 )
#line 23
__pragma( pack ( push, 8 )) extern "C" {
#line 25
struct __std_exception_data { 
#line 27
const char *_What; 
#line 28
bool _DoFree; 
#line 29
}; 
#line 31
void __cdecl __std_exception_copy(const __std_exception_data * _From, __std_exception_data * _To); 
#line 36
void __cdecl __std_exception_destroy(__std_exception_data * _Data); 
#line 40
}__pragma( pack ( pop )) 
#line 44
namespace std { 
#line 46
#pragma warning(push)
#pragma warning(disable: 4577)
class exception { 
#line 52
public: exception() noexcept : _Data() 
#line 54
{ 
#line 55
} 
#line 57
explicit exception(const char *const _Message) noexcept : _Data() 
#line 59
{ 
#line 60
__std_exception_data _InitData = {_Message, true}; 
#line 61
__std_exception_copy(&_InitData, &(_Data)); 
#line 62
} 
#line 64
exception(const char *const _Message, int) noexcept : _Data() 
#line 66
{ 
#line 67
((_Data)._What) = _Message; 
#line 68
} 
#line 70
exception(const exception &_Other) noexcept : _Data() 
#line 72
{ 
#line 73
__std_exception_copy(&(_Other._Data), &(_Data)); 
#line 74
} 
#line 76
exception &operator=(const exception &_Other) noexcept 
#line 77
{ 
#line 78
if (this == (&_Other)) 
#line 79
{ 
#line 80
return *this; 
#line 81
}  
#line 83
__std_exception_destroy(&(_Data)); 
#line 84
__std_exception_copy(&(_Other._Data), &(_Data)); 
#line 85
return *this; 
#line 86
} 
#line 88
virtual ~exception() noexcept 
#line 89
{ 
#line 90
__std_exception_destroy(&(_Data)); 
#line 91
} 
#line 93
[[nodiscard]] virtual const char *what() const 
#line 94
{ 
#line 95
return ((_Data)._What) ? (_Data)._What : ("Unknown exception"); 
#line 96
} 
#line 100
private: __std_exception_data _Data; 
#line 101
}; 
#line 103
class bad_exception : public exception { 
#line 108
public: bad_exception() noexcept : exception("bad exception", 1) 
#line 110
{ 
#line 111
} 
#line 112
}; 
#line 114
class bad_alloc : public exception { 
#line 119
public: bad_alloc() noexcept : exception("bad allocation", 1) 
#line 121
{ 
#line 122
} 
#line 126
friend class bad_array_new_length; 
#line 128
private: bad_alloc(const char *const _Message) noexcept : exception(_Message, 1) 
#line 130
{ 
#line 131
} 
#line 132
}; 
#line 134
class bad_array_new_length : public bad_alloc { 
#line 139
public: bad_array_new_length() noexcept : bad_alloc("bad array new length") 
#line 141
{ 
#line 142
} 
#line 143
}; 
#line 145
#pragma warning(pop)
#line 147
}
#line 149
#pragma pack ( pop )
#line 151
#pragma warning(pop)
#line 36 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\exception"
namespace std { 
#line 38
class exception; 
#line 39
class bad_exception; 
#line 41
using ::terminate;
#line 44
using ::set_terminate;
#line 45
using ::terminate_handler;
#line 47
[[nodiscard]] inline terminate_handler __cdecl get_terminate() noexcept { 
#line 49
return _get_terminate(); 
#line 50
} 
#line 54 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\exception"
using ::unexpected;
#line 57
using ::set_unexpected;
#line 58
using ::unexpected_handler;
#line 60
[[nodiscard]] inline unexpected_handler __cdecl get_unexpected() noexcept { 
#line 62
return _get_unexpected(); 
#line 63
} 
#line 67 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\exception"
}
#line 208 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\exception"
void __cdecl __ExceptionPtrCreate(void *) noexcept; 
#line 209
void __cdecl __ExceptionPtrDestroy(void *) noexcept; 
#line 210
void __cdecl __ExceptionPtrCopy(void *, const void *) noexcept; 
#line 211
void __cdecl __ExceptionPtrAssign(void *, const void *) noexcept; 
#line 212
bool __cdecl __ExceptionPtrCompare(const void *, const void *) noexcept; 
#line 214
bool __cdecl __ExceptionPtrToBool(const void *) noexcept; 
#line 215
void __cdecl __ExceptionPtrSwap(void *, void *) noexcept; 
#line 216
void __cdecl __ExceptionPtrCurrentException(void *) noexcept; 
#line 217
[[noreturn]] void __cdecl __ExceptionPtrRethrow(const void *); 
#line 218
void __cdecl __ExceptionPtrCopyException(void *, const void *, const void *) noexcept; 
#line 221
namespace std { 
#line 223
class exception_ptr { 
#line 225
public: exception_ptr() noexcept { 
#line 226
__ExceptionPtrCreate(this); 
#line 227
} 
#line 229
exception_ptr(nullptr_t) noexcept { 
#line 230
__ExceptionPtrCreate(this); 
#line 231
} 
#line 233
~exception_ptr() noexcept { 
#line 234
__ExceptionPtrDestroy(this); 
#line 235
} 
#line 237
exception_ptr(const exception_ptr &_Rhs) noexcept { 
#line 238
__ExceptionPtrCopy(this, &_Rhs); 
#line 239
} 
#line 241
exception_ptr &operator=(const exception_ptr &_Rhs) noexcept { 
#line 242
__ExceptionPtrAssign(this, &_Rhs); 
#line 243
return *this; 
#line 244
} 
#line 246
exception_ptr &operator=(nullptr_t) noexcept { 
#line 247
exception_ptr _Ptr; 
#line 248
__ExceptionPtrAssign(this, &_Ptr); 
#line 249
return *this; 
#line 250
} 
#line 252
explicit operator bool() const noexcept { 
#line 253
return __ExceptionPtrToBool(this); 
#line 254
} 
#line 256
static exception_ptr _Current_exception() noexcept { 
#line 257
exception_ptr _Retval; 
#line 258
__ExceptionPtrCurrentException(&_Retval); 
#line 259
return _Retval; 
#line 260
} 
#line 262
static exception_ptr _Copy_exception(void *_Except, const void *_Ptr) { 
#line 263
exception_ptr _Retval; 
#line 264
if (!_Ptr) { 
#line 266
return _Retval; 
#line 267
}  
#line 268
__ExceptionPtrCopyException(&_Retval, _Except, _Ptr); 
#line 269
return _Retval; 
#line 270
} 
#line 272
friend inline void swap(exception_ptr &_Lhs, exception_ptr &_Rhs) noexcept { 
#line 273
__ExceptionPtrSwap(&_Lhs, &_Rhs); 
#line 274
} 
#line 276
friend inline bool operator==(const exception_ptr &_Lhs, const exception_ptr &_Rhs) noexcept { 
#line 277
return __ExceptionPtrCompare(&_Lhs, &_Rhs); 
#line 278
} 
#line 280
friend inline bool operator==(const exception_ptr &_Lhs, std::nullptr_t) noexcept { 
#line 281
return !_Lhs; 
#line 282
} 
#line 285
friend inline bool operator==(std::nullptr_t, const exception_ptr &_Rhs) noexcept { 
#line 286
return !_Rhs; 
#line 287
} 
#line 289
friend inline bool operator!=(const exception_ptr &_Lhs, const exception_ptr &_Rhs) noexcept { 
#line 290
return !(_Lhs == _Rhs); 
#line 291
} 
#line 293
friend inline bool operator!=(const exception_ptr &_Lhs, std::nullptr_t _Rhs) noexcept { 
#line 294
return !(_Lhs == _Rhs); 
#line 295
} 
#line 297
friend inline bool operator!=(std::nullptr_t _Lhs, const exception_ptr &_Rhs) noexcept { 
#line 298
return !(_Lhs == _Rhs); 
#line 299
} 
#line 307 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\exception"
private: void *_Data1; 
#line 308
void *_Data2; 
#line 312
}; 
#line 314
[[nodiscard]] inline exception_ptr current_exception() noexcept { 
#line 315
return exception_ptr::_Current_exception(); 
#line 316
} 
#line 318
[[noreturn]] inline void rethrow_exception(exception_ptr _Ptr) { 
#line 319
__ExceptionPtrRethrow(&_Ptr); 
#line 320
} 
#line 322
template< class _Ex> void *__GetExceptionInfo(_Ex); 
#line 325
template < class _Ex >
[ [ nodiscard ( "This function constructs an object wrapped by a smart pointer and has no other effects; it is not useful to call this function a" "nd discard the return value." ) ] ] exception_ptr make_exception_ptr ( _Ex _Except ) noexcept {
    return exception_ptr :: _Copy_exception ( :: std :: addressof ( _Except ), __GetExceptionInfo ( _Except ) );
}
#line 330
[[noreturn]] inline void _Throw_bad_array_new_length() { 
#line 331
throw bad_array_new_length{}; 
#line 332
} 
#line 334
class nested_exception { 
#line 336
public: nested_exception() noexcept : _Exc(::std::current_exception()) { } 
#line 338
nested_exception(const nested_exception &) noexcept = default;
#line 339
nested_exception &operator=(const nested_exception &) noexcept = default;
#line 340
virtual ~nested_exception() noexcept { } 
#line 342
[[noreturn]] void rethrow_nested() const { 
#line 343
if ((_Exc)) { 
#line 344
::std::rethrow_exception(_Exc); 
#line 345
} else { 
#line 346
::std::terminate(); 
#line 347
}  
#line 348
} 
#line 350
[[nodiscard]] exception_ptr nested_ptr() const noexcept { 
#line 351
return _Exc; 
#line 352
} 
#line 355
private: exception_ptr _Exc; 
#line 356
}; 
#line 358
template < class _Ty, class _Uty >
struct _With_nested : _Uty, nested_exception {
    explicit _With_nested ( _Ty && _Arg )
        : _Uty ( :: std :: forward < _Ty > ( _Arg ) ), nested_exception ( ) { }
};
#line 364
template < class _Ty >
[ [ noreturn ] ] void throw_with_nested ( _Ty && _Arg ) {

    using _Uty = decay_t < _Ty >;

    if constexpr ( is_class_v < _Uty > && ! is_base_of_v < nested_exception, _Uty > && ! is_final_v < _Uty > ) {

        using _Glued = _With_nested < _Ty, _Uty >;
        throw _Glued ( :: std :: forward < _Ty > ( _Arg ) );
    } else {

        throw :: std :: forward < _Ty > ( _Arg );
    }
}
#line 380
template < class _Ty >
void rethrow_if_nested ( const _Ty & _Arg ) {

    constexpr bool _Can_use_dynamic_cast =
        is_polymorphic_v < _Ty > && ( ! is_base_of_v < nested_exception, _Ty > || is_convertible_v < _Ty *, nested_exception * > );

    if constexpr ( _Can_use_dynamic_cast ) {
        const auto _Nested = dynamic_cast < const nested_exception * > ( :: std :: addressof ( _Arg ) );

        if ( _Nested ) {
            _Nested -> rethrow_nested ( );
        }
    }
}
#line 399 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\exception"
class bad_variant_access : public exception { 
#line 402
public: bad_variant_access() noexcept = default;
#line 404
[[nodiscard]] virtual const char *what() const noexcept override { 
#line 405
return "bad variant access"; 
#line 406
} 
#line 414 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\exception"
}; 
#line 416
[[noreturn]] inline void _Throw_bad_variant_access() { 
#line 417
throw bad_variant_access{}; 
#line 418
} 
#line 420
}
#line 424
#pragma warning(pop)
#pragma pack ( pop )
#line 15 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\float.h"
#pragma warning(push)
#pragma warning(disable: 4324 4514 4574 4710 4793 4820 4995 4996 28719 28726 28727 )
#line 19
__pragma( pack ( push, 8 )) extern "C" {
#line 231 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\float.h"
__declspec(dllimport) unsigned __cdecl _clearfp(); 
#line 233
#pragma warning(push)
#pragma warning(disable: 4141)
#line 237
__declspec(dllimport) unsigned __cdecl _controlfp(unsigned _NewValue, unsigned _Mask); 
#line 242
#pragma warning(pop)
#line 245
__declspec(dllimport) void __cdecl _set_controlfp(unsigned _NewValue, unsigned _Mask); 
#line 251
__declspec(dllimport) errno_t __cdecl _controlfp_s(unsigned * _CurrentState, unsigned _NewValue, unsigned _Mask); 
#line 258
__declspec(dllimport) unsigned __cdecl _statusfp(); 
#line 261
__declspec(dllimport) void __cdecl _fpreset(); 
#line 277
__declspec(dllimport) unsigned __cdecl _control87(unsigned _NewValue, unsigned _Mask); 
#line 294
__declspec(dllimport) int *__cdecl __fpecode(); 
#line 299
__declspec(dllimport) int __cdecl __fpe_flt_rounds(); 
#line 312
__declspec(dllimport) double __cdecl _copysign(double _Number, double _Sign); 
#line 313
__declspec(dllimport) double __cdecl _chgsign(double _X); 
#line 314
__declspec(dllimport) double __cdecl _scalb(double _X, long _Y); 
#line 315
__declspec(dllimport) double __cdecl _logb(double _X); 
#line 316
__declspec(dllimport) double __cdecl _nextafter(double _X, double _Y); 
#line 317
__declspec(dllimport) int __cdecl _finite(double _X); 
#line 318
__declspec(dllimport) int __cdecl _isnan(double _X); 
#line 319
__declspec(dllimport) int __cdecl _fpclass(double _X); 
#line 322
__declspec(dllimport) float __cdecl _scalbf(float _X, long _Y); 
#line 339 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\float.h"
__declspec(dllimport) void __cdecl fpreset(); 
#line 406 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\float.h"
}__pragma( pack ( pop )) 
#line 408
#pragma warning(pop)
#line 15 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\isa_availability.h"
enum ISA_AVAILABILITY { 
#line 17
__ISA_AVAILABLE_X86, 
#line 18
__ISA_AVAILABLE_SSE2, 
#line 19
__ISA_AVAILABLE_SSE42, 
#line 20
__ISA_AVAILABLE_AVX, 
#line 21
__ISA_AVAILABLE_ENFSTRG, 
#line 22
__ISA_AVAILABLE_AVX2, 
#line 23
__ISA_AVAILABLE_AVX512, 
#line 25
__ISA_AVAILABLE_ARMNT = 0, 
#line 26
__ISA_AVAILABLE_NEON, 
#line 27
__ISA_AVAILABLE_NEON_ARM64
#line 29
}; 
#line 20 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\intrin0.inl.h"
#pragma warning(push)
#pragma warning(disable: 4514 4820 )
#line 24
extern "C" {
#line 123 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\intrin0.inl.h"
unsigned char _BitScanForward(unsigned long * _Index, unsigned long _Mask); 
#line 124
unsigned char _BitScanForward64(unsigned long * _Index, unsigned __int64 _Mask); 
#line 126
unsigned char _BitScanReverse(unsigned long * _Index, unsigned long _Mask); 
#line 127
unsigned char _BitScanReverse64(unsigned long * _Index, unsigned __int64 _Mask); 
#line 129
unsigned char _bittest(const long *, long); 
#line 132
long _InterlockedAnd(volatile long * _Value, long _Mask); 
#line 133
short _InterlockedAnd16(volatile short * _Value, short _Mask); 
#line 137
__int64 _InterlockedAnd64(volatile __int64 * _Value, __int64 _Mask); 
#line 138
__int64 _interlockedand64(volatile __int64 * _Value, __int64 _Mask); 
#line 142
char _InterlockedAnd8(volatile char * _Value, char _Mask); 
#line 149
long _InterlockedCompareExchange(volatile long * _Destination, long _Exchange, long _Comparand); 
#line 151
short _InterlockedCompareExchange16(volatile short * _Destination, short _Exchange, short _Comparand); 
#line 155
__int64 _InterlockedCompareExchange64(volatile __int64 * _Destination, __int64 _Exchange, __int64 _Comparand); 
#line 159
char _InterlockedCompareExchange8(volatile char * _Destination, char _Exchange, char _Comparand); 
#line 166
unsigned char _InterlockedCompareExchange128(volatile __int64 * _Destination, __int64 _ExchangeHigh, __int64 _ExchangeLow, __int64 * _ComparandResult); 
#line 170
long _InterlockedDecrement(volatile long * _Addend); 
#line 172
short _InterlockedDecrement16(volatile short * _Addend); 
#line 173
__int64 _InterlockedDecrement64(volatile __int64 * _Addend); 
#line 174
__int64 _interlockeddecrement64(volatile __int64 * _Addend); 
#line 175
long _InterlockedExchange(volatile long * _Target, long _Value); 
#line 177
short _InterlockedExchange16(volatile short * _Target, short _Value); 
#line 181
__int64 _InterlockedExchange64(volatile __int64 * _Target, __int64 _Value); 
#line 182
__int64 _interlockedexchange64(volatile __int64 * _Target, __int64 _Value); 
#line 186
char _InterlockedExchange8(volatile char * _Target, char _Value); 
#line 190
long _InterlockedExchangeAdd(volatile long * _Addend, long _Value); 
#line 191
short _InterlockedExchangeAdd16(volatile short * _Addend, short _Value); 
#line 195
__int64 _InterlockedExchangeAdd64(volatile __int64 * _Addend, __int64 _Value); 
#line 196
__int64 _interlockedexchangeadd64(volatile __int64 * _Addend, __int64 _Value); 
#line 200
char _InterlockedExchangeAdd8(volatile char * _Addend, char _Value); 
#line 210
long _InterlockedIncrement(volatile long * _Addend); 
#line 212
short _InterlockedIncrement16(volatile short * _Addend); 
#line 213
__int64 _InterlockedIncrement64(volatile __int64 * _Addend); 
#line 214
__int64 _interlockedincrement64(volatile __int64 * _Addend); 
#line 216
long _InterlockedOr(volatile long * _Value, long _Mask); 
#line 217
short _InterlockedOr16(volatile short * _Value, short _Mask); 
#line 221
__int64 _InterlockedOr64(volatile __int64 * _Value, __int64 _Mask); 
#line 222
__int64 _interlockedor64(volatile __int64 * _Value, __int64 _Mask); 
#line 226
char _InterlockedOr8(volatile char * _Value, char _Mask); 
#line 233
long _InterlockedXor(volatile long * _Value, long _Mask); 
#line 234
short _InterlockedXor16(volatile short * _Value, short _Mask); 
#line 238
__int64 _InterlockedXor64(volatile __int64 * _Value, __int64 _Mask); 
#line 239
__int64 _interlockedxor64(volatile __int64 * _Value, __int64 _Mask); 
#line 243
char _InterlockedXor8(volatile char * _Value, char _Mask); 
#line 250
void _ReadWriteBarrier(); 
#line 251
short __iso_volatile_load16(const volatile short *); 
#line 252
int __iso_volatile_load32(const volatile int *); 
#line 253
__int64 __iso_volatile_load64(const volatile __int64 *); 
#line 254
char __iso_volatile_load8(const volatile char *); 
#line 255
void __iso_volatile_store16(volatile short *, short); 
#line 256
void __iso_volatile_store32(volatile int *, int); 
#line 257
void __iso_volatile_store64(volatile __int64 *, __int64); 
#line 258
void __iso_volatile_store8(volatile char *, char); 
#line 261
void _mm_pause(); 
#line 262
unsigned __lzcnt(unsigned); 
#line 263
unsigned short __lzcnt16(unsigned short); 
#line 264
unsigned __int64 __lzcnt64(unsigned __int64); 
#line 265
unsigned __popcnt(unsigned); 
#line 266
unsigned short __popcnt16(unsigned short); 
#line 267
unsigned __int64 __popcnt64(unsigned __int64); 
#line 268
unsigned __cdecl _rotl(unsigned _Value, int _Shift); 
#line 269
unsigned short __cdecl _rotl16(unsigned short _Value, unsigned char _Shift); 
#line 270
unsigned __int64 __cdecl _rotl64(unsigned __int64 _Value, int _Shift); 
#line 271
unsigned char __cdecl _rotl8(unsigned char _Value, unsigned char _Shift); 
#line 272
unsigned __cdecl _rotr(unsigned _Value, int _Shift); 
#line 273
unsigned short __cdecl _rotr16(unsigned short _Value, unsigned char _Shift); 
#line 274
unsigned __int64 __cdecl _rotr64(unsigned __int64 _Value, int _Shift); 
#line 275
unsigned char __cdecl _rotr8(unsigned char _Value, unsigned char _Shift); 
#line 276
unsigned __int64 __shiftleft128(unsigned __int64 _LowPart, unsigned __int64 _HighPart, unsigned char _Shift); 
#line 277
unsigned __int64 __shiftright128(unsigned __int64 _LowPart, unsigned __int64 _HighPart, unsigned char _Shift); 
#line 279
unsigned _tzcnt_u32(unsigned); 
#line 280
unsigned __int64 _tzcnt_u64(unsigned __int64); 
#line 282 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\intrin0.inl.h"
unsigned __int64 _umul128(unsigned __int64 _Multiplier, unsigned __int64 _Multiplicand, unsigned __int64 * _HighProduct); 
#line 284
unsigned __int64 __cdecl _udiv128(unsigned __int64 _HighDividend, unsigned __int64 _LowDividend, unsigned __int64 _Divisor, unsigned __int64 * _Remainder); 
#line 285
unsigned char __cdecl _addcarry_u64(unsigned char, unsigned __int64, unsigned __int64, unsigned __int64 *); 
#line 286
unsigned char __cdecl _subborrow_u64(unsigned char, unsigned __int64, unsigned __int64, unsigned __int64 *); 
#line 287
double __ceil(double); 
#line 288
float __ceilf(float); 
#line 289
double __floor(double); 
#line 290
float __floorf(float); 
#line 291
double __round(double); 
#line 292
float __roundf(float); 
#line 293
double __trunc(double); 
#line 294
float __truncf(float); 
#line 295
double __copysign(double, double); 
#line 296
float __copysignf(float, float); 
#line 297
unsigned __signbitvalue(double); 
#line 298
unsigned __signbitvaluef(float); 
#line 320 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\intrin0.inl.h"
void *__cdecl __builtin_assume_aligned(const void *, size_t, ...) noexcept; 
#line 331 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\intrin0.inl.h"
}
#line 333 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\intrin0.inl.h"
#pragma warning(pop)
#line 31 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\limits"
#pragma pack ( push, 8 )
#pragma warning(push, 3)
#pragma warning(disable : 4180 4412 4455 4494 4514 4574 4582 4583 4587 4588 4619 4623 4625 4626 4643 4648 4702 4793 4820 4988 5026 5027 5045 6294 4984 5053 )
#line 38
namespace std { 
#line 39
enum float_denorm_style { 
#line 40
denorm_indeterminate = (-1), 
#line 41
denorm_absent = 0, 
#line 42
denorm_present
#line 43
}; 
#line 45
enum float_round_style { 
#line 46
round_indeterminate = (-1), 
#line 47
round_toward_zero = 0, 
#line 48
round_to_nearest, 
#line 49
round_toward_infinity, 
#line 50
round_toward_neg_infinity
#line 51
}; 
#line 53
struct _Num_base { 
#line 54
static constexpr float_denorm_style has_denorm = denorm_absent; 
#line 55
static constexpr bool has_denorm_loss = false; 
#line 56
static constexpr bool has_infinity = false; 
#line 57
static constexpr bool has_quiet_NaN = false; 
#line 58
static constexpr bool has_signaling_NaN = false; 
#line 59
static constexpr bool is_bounded = false; 
#line 60
static constexpr bool is_exact = false; 
#line 61
static constexpr bool is_iec559 = false; 
#line 62
static constexpr bool is_integer = false; 
#line 63
static constexpr bool is_modulo = false; 
#line 64
static constexpr bool is_signed = false; 
#line 65
static constexpr bool is_specialized = false; 
#line 66
static constexpr bool tinyness_before = false; 
#line 67
static constexpr bool traps = false; 
#line 68
static constexpr float_round_style round_style = round_toward_zero; 
#line 69
static constexpr int digits = 0; 
#line 70
static constexpr int digits10 = 0; 
#line 71
static constexpr int max_digits10 = 0; 
#line 72
static constexpr int max_exponent = 0; 
#line 73
static constexpr int max_exponent10 = 0; 
#line 74
static constexpr int min_exponent = 0; 
#line 75
static constexpr int min_exponent10 = 0; 
#line 76
static constexpr int radix = 0; 
#line 77
}; 
#line 79
template < class _Ty >
class numeric_limits : public _Num_base {
public :
    [ [ nodiscard ] ] static constexpr _Ty ( min ) ( ) noexcept {
        return _Ty ( );
    }

    [ [ nodiscard ] ] static constexpr _Ty ( max ) ( ) noexcept {
        return _Ty ( );
    }

    [ [ nodiscard ] ] static constexpr _Ty lowest ( ) noexcept {
        return _Ty ( );
    }

    [ [ nodiscard ] ] static constexpr _Ty epsilon ( ) noexcept {
        return _Ty ( );
    }

    [ [ nodiscard ] ] static constexpr _Ty round_error ( ) noexcept {
        return _Ty ( );
    }

    [ [ nodiscard ] ] static constexpr _Ty denorm_min ( ) noexcept {
        return _Ty ( );
    }

    [ [ nodiscard ] ] static constexpr _Ty infinity ( ) noexcept {
        return _Ty ( );
    }

    [ [ nodiscard ] ] static constexpr _Ty quiet_NaN ( ) noexcept {
        return _Ty ( );
    }

    [ [ nodiscard ] ] static constexpr _Ty signaling_NaN ( ) noexcept {
        return _Ty ( );
    }
};
#line 119
template< class _Ty> 
#line 120
class numeric_limits< const _Ty>  : public std::numeric_limits< _Ty>  { }; 
#line 122
template< class _Ty> 
#line 123
class numeric_limits< volatile _Ty>  : public std::numeric_limits< _Ty>  { }; 
#line 125
template< class _Ty> 
#line 126
class numeric_limits< const volatile _Ty>  : public std::numeric_limits< _Ty>  { }; 
#line 128
struct _Num_int_base : public _Num_base { 
#line 129
static constexpr bool is_bounded = true; 
#line 130
static constexpr bool is_exact = true; 
#line 131
static constexpr bool is_integer = true; 
#line 132
static constexpr bool is_specialized = true; 
#line 133
static constexpr int radix = 2; 
#line 134
}; 
#line 136
struct _Num_float_base : public _Num_base { 
#line 137
static constexpr float_denorm_style has_denorm = denorm_present; 
#line 138
static constexpr bool has_infinity = true; 
#line 139
static constexpr bool has_quiet_NaN = true; 
#line 140
static constexpr bool has_signaling_NaN = true; 
#line 141
static constexpr bool is_bounded = true; 
#line 142
static constexpr bool is_iec559 = true; 
#line 143
static constexpr bool is_signed = true; 
#line 144
static constexpr bool is_specialized = true; 
#line 145
static constexpr float_round_style round_style = round_to_nearest; 
#line 146
static constexpr int radix = 2; 
#line 147
}; 
#line 150
template<> class numeric_limits< bool>  : public _Num_int_base { 
#line 152
public: [[nodiscard]] static constexpr bool min() noexcept { 
#line 153
return false; 
#line 154
} 
#line 156
[[nodiscard]] static constexpr bool max() noexcept { 
#line 157
return true; 
#line 158
} 
#line 160
[[nodiscard]] static constexpr bool lowest() noexcept { 
#line 161
return min(); 
#line 162
} 
#line 164
[[nodiscard]] static constexpr bool epsilon() noexcept { 
#line 165
return 0; 
#line 166
} 
#line 168
[[nodiscard]] static constexpr bool round_error() noexcept { 
#line 169
return 0; 
#line 170
} 
#line 172
[[nodiscard]] static constexpr bool denorm_min() noexcept { 
#line 173
return 0; 
#line 174
} 
#line 176
[[nodiscard]] static constexpr bool infinity() noexcept { 
#line 177
return 0; 
#line 178
} 
#line 180
[[nodiscard]] static constexpr bool quiet_NaN() noexcept { 
#line 181
return 0; 
#line 182
} 
#line 184
[[nodiscard]] static constexpr bool signaling_NaN() noexcept { 
#line 185
return 0; 
#line 186
} 
#line 188
static constexpr int digits = 1; 
#line 189
}; 
#line 192
template<> class numeric_limits< char>  : public _Num_int_base { 
#line 194
public: [[nodiscard]] static constexpr char min() noexcept { 
#line 195
return (-128); 
#line 196
} 
#line 198
[[nodiscard]] static constexpr char max() noexcept { 
#line 199
return 127; 
#line 200
} 
#line 202
[[nodiscard]] static constexpr char lowest() noexcept { 
#line 203
return min(); 
#line 204
} 
#line 206
[[nodiscard]] static constexpr char epsilon() noexcept { 
#line 207
return 0; 
#line 208
} 
#line 210
[[nodiscard]] static constexpr char round_error() noexcept { 
#line 211
return 0; 
#line 212
} 
#line 214
[[nodiscard]] static constexpr char denorm_min() noexcept { 
#line 215
return 0; 
#line 216
} 
#line 218
[[nodiscard]] static constexpr char infinity() noexcept { 
#line 219
return 0; 
#line 220
} 
#line 222
[[nodiscard]] static constexpr char quiet_NaN() noexcept { 
#line 223
return 0; 
#line 224
} 
#line 226
[[nodiscard]] static constexpr char signaling_NaN() noexcept { 
#line 227
return 0; 
#line 228
} 
#line 230
static constexpr bool is_signed = ((-128) != 0); 
#line 231
static constexpr bool is_modulo = ((-128) == 0); 
#line 232
static constexpr int digits = (8 - ((-128) != 0)); 
#line 233
static constexpr int digits10 = 2; 
#line 234
}; 
#line 237
template<> class numeric_limits< signed char>  : public _Num_int_base { 
#line 239
public: [[nodiscard]] static constexpr signed char min() noexcept { 
#line 240
return (-128); 
#line 241
} 
#line 243
[[nodiscard]] static constexpr signed char max() noexcept { 
#line 244
return 127; 
#line 245
} 
#line 247
[[nodiscard]] static constexpr signed char lowest() noexcept { 
#line 248
return min(); 
#line 249
} 
#line 251
[[nodiscard]] static constexpr signed char epsilon() noexcept { 
#line 252
return 0; 
#line 253
} 
#line 255
[[nodiscard]] static constexpr signed char round_error() noexcept { 
#line 256
return 0; 
#line 257
} 
#line 259
[[nodiscard]] static constexpr signed char denorm_min() noexcept { 
#line 260
return 0; 
#line 261
} 
#line 263
[[nodiscard]] static constexpr signed char infinity() noexcept { 
#line 264
return 0; 
#line 265
} 
#line 267
[[nodiscard]] static constexpr signed char quiet_NaN() noexcept { 
#line 268
return 0; 
#line 269
} 
#line 271
[[nodiscard]] static constexpr signed char signaling_NaN() noexcept { 
#line 272
return 0; 
#line 273
} 
#line 275
static constexpr bool is_signed = true; 
#line 276
static constexpr int digits = 7; 
#line 277
static constexpr int digits10 = 2; 
#line 278
}; 
#line 281
template<> class numeric_limits< unsigned char>  : public _Num_int_base { 
#line 283
public: [[nodiscard]] static constexpr unsigned char min() noexcept { 
#line 284
return 0; 
#line 285
} 
#line 287
[[nodiscard]] static constexpr unsigned char max() noexcept { 
#line 288
return 255; 
#line 289
} 
#line 291
[[nodiscard]] static constexpr unsigned char lowest() noexcept { 
#line 292
return min(); 
#line 293
} 
#line 295
[[nodiscard]] static constexpr unsigned char epsilon() noexcept { 
#line 296
return 0; 
#line 297
} 
#line 299
[[nodiscard]] static constexpr unsigned char round_error() noexcept { 
#line 300
return 0; 
#line 301
} 
#line 303
[[nodiscard]] static constexpr unsigned char denorm_min() noexcept { 
#line 304
return 0; 
#line 305
} 
#line 307
[[nodiscard]] static constexpr unsigned char infinity() noexcept { 
#line 308
return 0; 
#line 309
} 
#line 311
[[nodiscard]] static constexpr unsigned char quiet_NaN() noexcept { 
#line 312
return 0; 
#line 313
} 
#line 315
[[nodiscard]] static constexpr unsigned char signaling_NaN() noexcept { 
#line 316
return 0; 
#line 317
} 
#line 319
static constexpr bool is_modulo = true; 
#line 320
static constexpr int digits = 8; 
#line 321
static constexpr int digits10 = 2; 
#line 322
}; 
#line 371
template<> class numeric_limits< char16_t>  : public _Num_int_base { 
#line 373
public: [[nodiscard]] static constexpr char16_t min() noexcept { 
#line 374
return 0; 
#line 375
} 
#line 377
[[nodiscard]] static constexpr char16_t max() noexcept { 
#line 378
return 65535; 
#line 379
} 
#line 381
[[nodiscard]] static constexpr char16_t lowest() noexcept { 
#line 382
return min(); 
#line 383
} 
#line 385
[[nodiscard]] static constexpr char16_t epsilon() noexcept { 
#line 386
return 0; 
#line 387
} 
#line 389
[[nodiscard]] static constexpr char16_t round_error() noexcept { 
#line 390
return 0; 
#line 391
} 
#line 393
[[nodiscard]] static constexpr char16_t denorm_min() noexcept { 
#line 394
return 0; 
#line 395
} 
#line 397
[[nodiscard]] static constexpr char16_t infinity() noexcept { 
#line 398
return 0; 
#line 399
} 
#line 401
[[nodiscard]] static constexpr char16_t quiet_NaN() noexcept { 
#line 402
return 0; 
#line 403
} 
#line 405
[[nodiscard]] static constexpr char16_t signaling_NaN() noexcept { 
#line 406
return 0; 
#line 407
} 
#line 409
static constexpr bool is_modulo = true; 
#line 410
static constexpr int digits = 16; 
#line 411
static constexpr int digits10 = 4; 
#line 412
}; 
#line 415
template<> class numeric_limits< char32_t>  : public _Num_int_base { 
#line 417
public: [[nodiscard]] static constexpr char32_t min() noexcept { 
#line 418
return 0; 
#line 419
} 
#line 421
[[nodiscard]] static constexpr char32_t max() noexcept { 
#line 422
return 4294967295U; 
#line 423
} 
#line 425
[[nodiscard]] static constexpr char32_t lowest() noexcept { 
#line 426
return min(); 
#line 427
} 
#line 429
[[nodiscard]] static constexpr char32_t epsilon() noexcept { 
#line 430
return 0; 
#line 431
} 
#line 433
[[nodiscard]] static constexpr char32_t round_error() noexcept { 
#line 434
return 0; 
#line 435
} 
#line 437
[[nodiscard]] static constexpr char32_t denorm_min() noexcept { 
#line 438
return 0; 
#line 439
} 
#line 441
[[nodiscard]] static constexpr char32_t infinity() noexcept { 
#line 442
return 0; 
#line 443
} 
#line 445
[[nodiscard]] static constexpr char32_t quiet_NaN() noexcept { 
#line 446
return 0; 
#line 447
} 
#line 449
[[nodiscard]] static constexpr char32_t signaling_NaN() noexcept { 
#line 450
return 0; 
#line 451
} 
#line 453
static constexpr bool is_modulo = true; 
#line 454
static constexpr int digits = 32; 
#line 455
static constexpr int digits10 = 9; 
#line 456
}; 
#line 459
template<> class numeric_limits< __wchar_t>  : public _Num_int_base { 
#line 461
public: [[nodiscard]] static constexpr __wchar_t min() noexcept { 
#line 462
return 0; 
#line 463
} 
#line 465
[[nodiscard]] static constexpr __wchar_t max() noexcept { 
#line 466
return 65535; 
#line 467
} 
#line 469
[[nodiscard]] static constexpr __wchar_t lowest() noexcept { 
#line 470
return min(); 
#line 471
} 
#line 473
[[nodiscard]] static constexpr __wchar_t epsilon() noexcept { 
#line 474
return 0; 
#line 475
} 
#line 477
[[nodiscard]] static constexpr __wchar_t round_error() noexcept { 
#line 478
return 0; 
#line 479
} 
#line 481
[[nodiscard]] static constexpr __wchar_t denorm_min() noexcept { 
#line 482
return 0; 
#line 483
} 
#line 485
[[nodiscard]] static constexpr __wchar_t infinity() noexcept { 
#line 486
return 0; 
#line 487
} 
#line 489
[[nodiscard]] static constexpr __wchar_t quiet_NaN() noexcept { 
#line 490
return 0; 
#line 491
} 
#line 493
[[nodiscard]] static constexpr __wchar_t signaling_NaN() noexcept { 
#line 494
return 0; 
#line 495
} 
#line 497
static constexpr bool is_modulo = true; 
#line 498
static constexpr int digits = 16; 
#line 499
static constexpr int digits10 = 4; 
#line 500
}; 
#line 503
template<> class numeric_limits< short>  : public _Num_int_base { 
#line 505
public: [[nodiscard]] static constexpr short min() noexcept { 
#line 506
return (-32768); 
#line 507
} 
#line 509
[[nodiscard]] static constexpr short max() noexcept { 
#line 510
return 32767; 
#line 511
} 
#line 513
[[nodiscard]] static constexpr short lowest() noexcept { 
#line 514
return min(); 
#line 515
} 
#line 517
[[nodiscard]] static constexpr short epsilon() noexcept { 
#line 518
return 0; 
#line 519
} 
#line 521
[[nodiscard]] static constexpr short round_error() noexcept { 
#line 522
return 0; 
#line 523
} 
#line 525
[[nodiscard]] static constexpr short denorm_min() noexcept { 
#line 526
return 0; 
#line 527
} 
#line 529
[[nodiscard]] static constexpr short infinity() noexcept { 
#line 530
return 0; 
#line 531
} 
#line 533
[[nodiscard]] static constexpr short quiet_NaN() noexcept { 
#line 534
return 0; 
#line 535
} 
#line 537
[[nodiscard]] static constexpr short signaling_NaN() noexcept { 
#line 538
return 0; 
#line 539
} 
#line 541
static constexpr bool is_signed = true; 
#line 542
static constexpr int digits = 15; 
#line 543
static constexpr int digits10 = 4; 
#line 544
}; 
#line 547
template<> class numeric_limits< int>  : public _Num_int_base { 
#line 549
public: [[nodiscard]] static constexpr int min() noexcept { 
#line 550
return ((-2147483647) - 1); 
#line 551
} 
#line 553
[[nodiscard]] static constexpr int max() noexcept { 
#line 554
return 2147483647; 
#line 555
} 
#line 557
[[nodiscard]] static constexpr int lowest() noexcept { 
#line 558
return min(); 
#line 559
} 
#line 561
[[nodiscard]] static constexpr int epsilon() noexcept { 
#line 562
return 0; 
#line 563
} 
#line 565
[[nodiscard]] static constexpr int round_error() noexcept { 
#line 566
return 0; 
#line 567
} 
#line 569
[[nodiscard]] static constexpr int denorm_min() noexcept { 
#line 570
return 0; 
#line 571
} 
#line 573
[[nodiscard]] static constexpr int infinity() noexcept { 
#line 574
return 0; 
#line 575
} 
#line 577
[[nodiscard]] static constexpr int quiet_NaN() noexcept { 
#line 578
return 0; 
#line 579
} 
#line 581
[[nodiscard]] static constexpr int signaling_NaN() noexcept { 
#line 582
return 0; 
#line 583
} 
#line 585
static constexpr bool is_signed = true; 
#line 586
static constexpr int digits = 31; 
#line 587
static constexpr int digits10 = 9; 
#line 588
}; 
#line 591
template<> class numeric_limits< long>  : public _Num_int_base { 
#line 593
public: [[nodiscard]] static constexpr long min() noexcept { 
#line 594
return ((-2147483647L) - (1)); 
#line 595
} 
#line 597
[[nodiscard]] static constexpr long max() noexcept { 
#line 598
return 2147483647L; 
#line 599
} 
#line 601
[[nodiscard]] static constexpr long lowest() noexcept { 
#line 602
return min(); 
#line 603
} 
#line 605
[[nodiscard]] static constexpr long epsilon() noexcept { 
#line 606
return 0; 
#line 607
} 
#line 609
[[nodiscard]] static constexpr long round_error() noexcept { 
#line 610
return 0; 
#line 611
} 
#line 613
[[nodiscard]] static constexpr long denorm_min() noexcept { 
#line 614
return 0; 
#line 615
} 
#line 617
[[nodiscard]] static constexpr long infinity() noexcept { 
#line 618
return 0; 
#line 619
} 
#line 621
[[nodiscard]] static constexpr long quiet_NaN() noexcept { 
#line 622
return 0; 
#line 623
} 
#line 625
[[nodiscard]] static constexpr long signaling_NaN() noexcept { 
#line 626
return 0; 
#line 627
} 
#line 629
static_assert((sizeof(int) == sizeof(long)), "LLP64 assumption");
#line 630
static constexpr bool is_signed = true; 
#line 631
static constexpr int digits = 31; 
#line 632
static constexpr int digits10 = 9; 
#line 633
}; 
#line 636
template<> class numeric_limits< __int64>  : public _Num_int_base { 
#line 638
public: [[nodiscard]] static constexpr __int64 min() noexcept { 
#line 639
return ((-9223372036854775807i64) - (1)); 
#line 640
} 
#line 642
[[nodiscard]] static constexpr __int64 max() noexcept { 
#line 643
return 9223372036854775807i64; 
#line 644
} 
#line 646
[[nodiscard]] static constexpr __int64 lowest() noexcept { 
#line 647
return min(); 
#line 648
} 
#line 650
[[nodiscard]] static constexpr __int64 epsilon() noexcept { 
#line 651
return 0; 
#line 652
} 
#line 654
[[nodiscard]] static constexpr __int64 round_error() noexcept { 
#line 655
return 0; 
#line 656
} 
#line 658
[[nodiscard]] static constexpr __int64 denorm_min() noexcept { 
#line 659
return 0; 
#line 660
} 
#line 662
[[nodiscard]] static constexpr __int64 infinity() noexcept { 
#line 663
return 0; 
#line 664
} 
#line 666
[[nodiscard]] static constexpr __int64 quiet_NaN() noexcept { 
#line 667
return 0; 
#line 668
} 
#line 670
[[nodiscard]] static constexpr __int64 signaling_NaN() noexcept { 
#line 671
return 0; 
#line 672
} 
#line 674
static constexpr bool is_signed = true; 
#line 675
static constexpr int digits = 63; 
#line 676
static constexpr int digits10 = 18; 
#line 677
}; 
#line 681
template<> class numeric_limits< unsigned short>  : public _Num_int_base { 
#line 683
public: [[nodiscard]] static constexpr unsigned short min() noexcept { 
#line 684
return 0; 
#line 685
} 
#line 687
[[nodiscard]] static constexpr unsigned short max() noexcept { 
#line 688
return 65535; 
#line 689
} 
#line 691
[[nodiscard]] static constexpr unsigned short lowest() noexcept { 
#line 692
return min(); 
#line 693
} 
#line 695
[[nodiscard]] static constexpr unsigned short epsilon() noexcept { 
#line 696
return 0; 
#line 697
} 
#line 699
[[nodiscard]] static constexpr unsigned short round_error() noexcept { 
#line 700
return 0; 
#line 701
} 
#line 703
[[nodiscard]] static constexpr unsigned short denorm_min() noexcept { 
#line 704
return 0; 
#line 705
} 
#line 707
[[nodiscard]] static constexpr unsigned short infinity() noexcept { 
#line 708
return 0; 
#line 709
} 
#line 711
[[nodiscard]] static constexpr unsigned short quiet_NaN() noexcept { 
#line 712
return 0; 
#line 713
} 
#line 715
[[nodiscard]] static constexpr unsigned short signaling_NaN() noexcept { 
#line 716
return 0; 
#line 717
} 
#line 719
static constexpr bool is_modulo = true; 
#line 720
static constexpr int digits = 16; 
#line 721
static constexpr int digits10 = 4; 
#line 722
}; 
#line 726 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\limits"
template<> class numeric_limits< unsigned>  : public _Num_int_base { 
#line 728
public: [[nodiscard]] static constexpr unsigned min() noexcept { 
#line 729
return 0; 
#line 730
} 
#line 732
[[nodiscard]] static constexpr unsigned max() noexcept { 
#line 733
return 4294967295U; 
#line 734
} 
#line 736
[[nodiscard]] static constexpr unsigned lowest() noexcept { 
#line 737
return min(); 
#line 738
} 
#line 740
[[nodiscard]] static constexpr unsigned epsilon() noexcept { 
#line 741
return 0; 
#line 742
} 
#line 744
[[nodiscard]] static constexpr unsigned round_error() noexcept { 
#line 745
return 0; 
#line 746
} 
#line 748
[[nodiscard]] static constexpr unsigned denorm_min() noexcept { 
#line 749
return 0; 
#line 750
} 
#line 752
[[nodiscard]] static constexpr unsigned infinity() noexcept { 
#line 753
return 0; 
#line 754
} 
#line 756
[[nodiscard]] static constexpr unsigned quiet_NaN() noexcept { 
#line 757
return 0; 
#line 758
} 
#line 760
[[nodiscard]] static constexpr unsigned signaling_NaN() noexcept { 
#line 761
return 0; 
#line 762
} 
#line 764
static constexpr bool is_modulo = true; 
#line 765
static constexpr int digits = 32; 
#line 766
static constexpr int digits10 = 9; 
#line 767
}; 
#line 770
template<> class numeric_limits< unsigned long>  : public _Num_int_base { 
#line 772
public: [[nodiscard]] static constexpr unsigned long min() noexcept { 
#line 773
return 0; 
#line 774
} 
#line 776
[[nodiscard]] static constexpr unsigned long max() noexcept { 
#line 777
return 4294967295UL; 
#line 778
} 
#line 780
[[nodiscard]] static constexpr unsigned long lowest() noexcept { 
#line 781
return min(); 
#line 782
} 
#line 784
[[nodiscard]] static constexpr unsigned long epsilon() noexcept { 
#line 785
return 0; 
#line 786
} 
#line 788
[[nodiscard]] static constexpr unsigned long round_error() noexcept { 
#line 789
return 0; 
#line 790
} 
#line 792
[[nodiscard]] static constexpr unsigned long denorm_min() noexcept { 
#line 793
return 0; 
#line 794
} 
#line 796
[[nodiscard]] static constexpr unsigned long infinity() noexcept { 
#line 797
return 0; 
#line 798
} 
#line 800
[[nodiscard]] static constexpr unsigned long quiet_NaN() noexcept { 
#line 801
return 0; 
#line 802
} 
#line 804
[[nodiscard]] static constexpr unsigned long signaling_NaN() noexcept { 
#line 805
return 0; 
#line 806
} 
#line 808
static_assert((sizeof(unsigned) == sizeof(unsigned long)), "LLP64 assumption");
#line 809
static constexpr bool is_modulo = true; 
#line 810
static constexpr int digits = 32; 
#line 811
static constexpr int digits10 = 9; 
#line 812
}; 
#line 815
template<> class numeric_limits< unsigned __int64>  : public _Num_int_base { 
#line 817
public: [[nodiscard]] static constexpr unsigned __int64 min() noexcept { 
#line 818
return 0; 
#line 819
} 
#line 821
[[nodiscard]] static constexpr unsigned __int64 max() noexcept { 
#line 822
return 18446744073709551615Ui64; 
#line 823
} 
#line 825
[[nodiscard]] static constexpr unsigned __int64 lowest() noexcept { 
#line 826
return min(); 
#line 827
} 
#line 829
[[nodiscard]] static constexpr unsigned __int64 epsilon() noexcept { 
#line 830
return 0; 
#line 831
} 
#line 833
[[nodiscard]] static constexpr unsigned __int64 round_error() noexcept { 
#line 834
return 0; 
#line 835
} 
#line 837
[[nodiscard]] static constexpr unsigned __int64 denorm_min() noexcept { 
#line 838
return 0; 
#line 839
} 
#line 841
[[nodiscard]] static constexpr unsigned __int64 infinity() noexcept { 
#line 842
return 0; 
#line 843
} 
#line 845
[[nodiscard]] static constexpr unsigned __int64 quiet_NaN() noexcept { 
#line 846
return 0; 
#line 847
} 
#line 849
[[nodiscard]] static constexpr unsigned __int64 signaling_NaN() noexcept { 
#line 850
return 0; 
#line 851
} 
#line 853
static constexpr bool is_modulo = true; 
#line 854
static constexpr int digits = 64; 
#line 855
static constexpr int digits10 = 19; 
#line 856
}; 
#line 859
template<> class numeric_limits< float>  : public _Num_float_base { 
#line 861
public: [[nodiscard]] static constexpr float min() noexcept { 
#line 862
return (1.175494351e-38F); 
#line 863
} 
#line 865
[[nodiscard]] static constexpr float max() noexcept { 
#line 866
return (3.402823466e+38F); 
#line 867
} 
#line 869
[[nodiscard]] static constexpr float lowest() noexcept { 
#line 870
return -max(); 
#line 871
} 
#line 873
[[nodiscard]] static constexpr float epsilon() noexcept { 
#line 874
return (1.192092896e-07F); 
#line 875
} 
#line 877
[[nodiscard]] static constexpr float round_error() noexcept { 
#line 878
return (0.5F); 
#line 879
} 
#line 881
[[nodiscard]] static constexpr float denorm_min() noexcept { 
#line 882
return (1.401298464e-45F); 
#line 883
} 
#line 885
[[nodiscard]] static constexpr float infinity() noexcept { 
#line 886
return __builtin_huge_valf(); 
#line 887
} 
#line 889
[[nodiscard]] static constexpr float quiet_NaN() noexcept { 
#line 890
return __builtin_nanf("0"); 
#line 891
} 
#line 893
[[nodiscard]] static constexpr float signaling_NaN() noexcept { 
#line 894
return __builtin_nansf("1"); 
#line 895
} 
#line 897
static constexpr int digits = 24; 
#line 898
static constexpr int digits10 = 6; 
#line 899
static constexpr int max_digits10 = 9; 
#line 900
static constexpr int max_exponent = 128; 
#line 901
static constexpr int max_exponent10 = 38; 
#line 902
static constexpr int min_exponent = (-125); 
#line 903
static constexpr int min_exponent10 = (-37); 
#line 904
}; 
#line 907
template<> class numeric_limits< double>  : public _Num_float_base { 
#line 909
public: [[nodiscard]] static constexpr double min() noexcept { 
#line 910
return (2.225073858507201383e-308); 
#line 911
} 
#line 913
[[nodiscard]] static constexpr double max() noexcept { 
#line 914
return (1.797693134862315708e+308); 
#line 915
} 
#line 917
[[nodiscard]] static constexpr double lowest() noexcept { 
#line 918
return -max(); 
#line 919
} 
#line 921
[[nodiscard]] static constexpr double epsilon() noexcept { 
#line 922
return (2.220446049250313081e-16); 
#line 923
} 
#line 925
[[nodiscard]] static constexpr double round_error() noexcept { 
#line 926
return (0.5); 
#line 927
} 
#line 929
[[nodiscard]] static constexpr double denorm_min() noexcept { 
#line 930
return (4.940656458412465442e-324); 
#line 931
} 
#line 933
[[nodiscard]] static constexpr double infinity() noexcept { 
#line 934
return __builtin_huge_val(); 
#line 935
} 
#line 937
[[nodiscard]] static constexpr double quiet_NaN() noexcept { 
#line 938
return __builtin_nan("0"); 
#line 939
} 
#line 941
[[nodiscard]] static constexpr double signaling_NaN() noexcept { 
#line 942
return __builtin_nans("1"); 
#line 943
} 
#line 945
static constexpr int digits = 53; 
#line 946
static constexpr int digits10 = 15; 
#line 947
static constexpr int max_digits10 = 17; 
#line 948
static constexpr int max_exponent = 1024; 
#line 949
static constexpr int max_exponent10 = 308; 
#line 950
static constexpr int min_exponent = (-1021); 
#line 951
static constexpr int min_exponent10 = (-307); 
#line 952
}; 
#line 955
template<> class numeric_limits< long double>  : public _Num_float_base { 
#line 957
public: [[nodiscard]] static constexpr long double min() noexcept { 
#line 958
return (2.225073858507201383e-308); 
#line 959
} 
#line 961
[[nodiscard]] static constexpr long double max() noexcept { 
#line 962
return (1.797693134862315708e+308); 
#line 963
} 
#line 965
[[nodiscard]] static constexpr long double lowest() noexcept { 
#line 966
return -max(); 
#line 967
} 
#line 969
[[nodiscard]] static constexpr long double epsilon() noexcept { 
#line 970
return (2.220446049250313081e-16); 
#line 971
} 
#line 973
[[nodiscard]] static constexpr long double round_error() noexcept { 
#line 974
return (0.5L); 
#line 975
} 
#line 977
[[nodiscard]] static constexpr long double denorm_min() noexcept { 
#line 978
return (4.940656458412465442e-324); 
#line 979
} 
#line 981
[[nodiscard]] static constexpr long double infinity() noexcept { 
#line 982
return __builtin_huge_val(); 
#line 983
} 
#line 985
[[nodiscard]] static constexpr long double quiet_NaN() noexcept { 
#line 986
return __builtin_nan("0"); 
#line 987
} 
#line 989
[[nodiscard]] static constexpr long double signaling_NaN() noexcept { 
#line 990
return __builtin_nans("1"); 
#line 991
} 
#line 993
static constexpr int digits = 53; 
#line 994
static constexpr int digits10 = 15; 
#line 995
static constexpr int max_digits10 = ((2) + (((53) * 301L) / (1000))); 
#line 996
static constexpr int max_exponent = 1024; 
#line 997
static constexpr int max_exponent10 = 308; 
#line 998
static constexpr int min_exponent = (-1021); 
#line 999
static constexpr int min_exponent10 = (-307); 
#line 1000
}; 
#line 1005
template < class _Ty >
[ [ nodiscard ] ] constexpr int _Countl_zero_fallback ( _Ty _Val ) noexcept {
    _Ty _Yy = 0;

    unsigned int _Nn = numeric_limits < _Ty > :: digits;
    unsigned int _Cc = numeric_limits < _Ty > :: digits / 2;
    do {
        _Yy = static_cast < _Ty > ( _Val >> _Cc );
        if ( _Yy != 0 ) {
            _Nn -= _Cc;
            _Val = _Yy;
        }
        _Cc >>= 1;
    } while ( _Cc != 0 );
    return static_cast < int > ( _Nn ) - static_cast < int > ( _Val );
}
#line 1025
template < class _Ty >
[ [ nodiscard ] ] constexpr int _Countr_zero_fallback ( const _Ty _Val ) noexcept {
    constexpr int _Digits = numeric_limits < _Ty > :: digits;
    return _Digits - _Countl_zero_fallback ( static_cast < _Ty > ( static_cast < _Ty > ( ~ _Val ) & static_cast < _Ty > ( _Val - 1 ) ) );
}
#line 1033
template < class _Ty >
[ [ nodiscard ] ] constexpr int _Popcount_fallback ( _Ty _Val ) noexcept {
    constexpr int _Digits = numeric_limits < _Ty > :: digits;









    _Val = static_cast < _Ty > ( _Val - ( ( _Val >> 1 ) & static_cast < _Ty > ( 6148914691236517205Ui64 ) ) );
    _Val = static_cast < _Ty > ( ( _Val & static_cast < _Ty > ( 3689348814741910323Ui64 ) )
                            + ( ( _Val >> 2 ) & static_cast < _Ty > ( 3689348814741910323Ui64 ) ) );
    _Val = static_cast < _Ty > ( ( _Val + ( _Val >> 4 ) ) & static_cast < _Ty > ( 1085102592571150095Ui64 ) );

    _Val = static_cast < _Ty > ( _Val * static_cast < _Ty > ( 72340172838076673Ui64 ) );

    return static_cast < int > ( _Val >> ( _Digits - 8 ) );
}
#line 1197 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\limits"
template< class _Ty> constexpr bool 
#line 1198
_Is_standard_unsigned_integer = _Is_any_of_v< remove_cv_t< _Ty> , unsigned char, unsigned short, unsigned, unsigned long, unsigned __int64> ; 
#line 1201
template < class _Ty, enable_if_t < _Is_standard_unsigned_integer < _Ty >, int > = 0 >
[ [ nodiscard ] ] inline int _Countr_zero ( const _Ty _Val ) noexcept {








    return _Countr_zero_fallback ( _Val );
}
#line 1214 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\limits"
template < class _Ty, class _Fn >
constexpr decltype ( auto ) _Select_countr_zero_impl ( _Fn _Callback ) {
















    return _Callback ( [ ] ( _Ty _Val ) { return _Countr_zero_fallback ( _Val ); } );
}
#line 1235 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\limits"
template < class _Ty, enable_if_t < _Is_standard_unsigned_integer < _Ty >, int > = 0 >
[ [ nodiscard ] ] inline int _Popcount ( const _Ty _Val ) noexcept {












    return _Popcount_fallback ( _Val );
}
#line 1252 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\limits"
template < class _Ty, class _Fn >
inline decltype ( auto ) _Select_popcount_impl ( _Fn _Callback ) {



















    return _Callback ( [ ] ( _Ty _Val ) { return _Popcount_fallback ( _Val ); } );
}
#line 1280 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\limits"
}
#line 1283
#pragma warning(pop)
#pragma pack ( pop )
#line 14 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\new"
#pragma pack ( push, 8 )
#pragma warning(push, 3)
#pragma warning(disable : 4180 4412 4455 4494 4514 4574 4582 4583 4587 4588 4619 4623 4625 4626 4643 4648 4702 4793 4820 4988 5026 5027 5045 6294 4984 5053 )
#line 78
namespace std { 
#line 80
class bad_alloc; 
#line 81
class bad_array_new_length; 
#line 110 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\new"
using new_handler = void (__cdecl *)(void); 
#line 112
new_handler __cdecl set_new_handler(new_handler) noexcept; 
#line 113
[[nodiscard]] new_handler __cdecl get_new_handler() noexcept; 
#line 114
}
#line 118
#pragma warning(pop)
#pragma pack ( pop )
#line 16 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\xatomic.h"
#pragma pack ( push, 8 )
#pragma warning(push, 3)
#pragma warning(disable : 4180 4412 4455 4494 4514 4574 4582 4583 4587 4588 4619 4623 4625 4626 4643 4648 4702 4793 4820 4988 5026 5027 5045 6294 4984 5053 )
#line 68 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\xatomic.h"
namespace std { 
#line 94 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\xatomic.h"
enum memory_order { 
#line 95
memory_order_relaxed, 
#line 96
memory_order_consume, 
#line 97
memory_order_acquire, 
#line 98
memory_order_release, 
#line 99
memory_order_acq_rel, 
#line 100
memory_order_seq_cst
#line 101
}; 
#line 104 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\xatomic.h"
using _Atomic_counter_t = unsigned long; 
#line 106
template < class _Integral, class _Ty >
[ [ nodiscard ] ] volatile _Integral * _Atomic_address_as ( _Ty & _Source ) noexcept {

    static_assert ( is_integral_v < _Integral >, "Tried to reinterpret memory as non-integral" );
    return & reinterpret_cast < volatile _Integral & > ( _Source );
}
#line 113
template < class _Integral, class _Ty >
[ [ nodiscard ] ] const volatile _Integral * _Atomic_address_as ( const _Ty & _Source ) noexcept {

    static_assert ( is_integral_v < _Integral >, "Tried to reinterpret memory as non-integral" );
    return & reinterpret_cast < const volatile _Integral & > ( _Source );
}
#line 120
}
#line 124
#pragma warning(pop)
#pragma pack ( pop )
#line 22 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\xmemory"
#pragma pack ( push, 8 )
#pragma warning(push, 3)
#pragma warning(disable : 4180 4412 4455 4494 4514 4574 4582 4583 4587 4588 4619 4623 4625 4626 4643 4648 4702 4793 4820 4988 5026 5027 5045 6294 4984 5053 )
#line 29
namespace std { 
#line 30
template < class _Ty >
struct [ [ nodiscard ] ] _Tidy_guard {
    _Ty * _Target;
    inline ~ _Tidy_guard ( ) {
        if ( _Target ) {
            _Target -> _Tidy ( );
        }
    }
};
#line 40
template < class _Ty >
struct [ [ nodiscard ] ] _Tidy_deallocate_guard {
    _Ty * _Target;
    inline ~ _Tidy_deallocate_guard ( ) {
        if ( _Target ) {
            _Target -> _Tidy_deallocate ( );
        }
    }
};
#line 50
template< class _Keycmp, class _Lhs, class _Rhs> constexpr bool 
#line 51
_Nothrow_compare = noexcept((static_cast< bool>(std::declval< const _Keycmp &> ()(std::declval< const _Lhs &> (), std::declval< const _Rhs &> ())))); 
#line 54
template < size_t _Ty_size >
[ [ nodiscard ] ] constexpr size_t _Get_size_of_n ( const size_t _Count ) {
    constexpr bool _Overflow_is_possible = _Ty_size > 1;

    if constexpr ( _Overflow_is_possible ) {
        constexpr size_t _Max_possible = static_cast < size_t > ( - 1 ) / _Ty_size;
        if ( _Count > _Max_possible ) {
            _Throw_bad_array_new_length ( );
        }
    }

    return _Count * _Ty_size;
}
#line 68
template< class _Ty> constexpr size_t 
#line 69
_New_alignof = (::std::max)(__alignof(_Ty), 16Ui64); 
#line 71
struct _Default_allocate_traits { 
#line 72
__declspec(allocator) static void *
#line 76
_Allocate(const size_t _Bytes) { 
#line 77
return ::operator new(_Bytes); 
#line 78
} 
#line 98
}; 
#line 100
constexpr bool _Is_pow_2(const size_t _Value) noexcept { 
#line 101
return (_Value != (0)) && ((_Value & (_Value - (1))) == (0)); 
#line 102
} 
#line 105
constexpr size_t _Big_allocation_threshold = (4096); 
#line 106
constexpr size_t _Big_allocation_alignment = (32); 
#line 115
constexpr size_t _Non_user_size = ((((2) * sizeof(void *)) + _Big_allocation_alignment) - (1)); 
#line 121 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\xmemory"
constexpr size_t _Big_allocation_sentinel = 18085043209519168250Ui64; 
#line 126 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\xmemory"
template < class _Traits >
__declspec ( allocator ) void * _Allocate_manually_vector_aligned ( const size_t _Bytes ) {

    const size_t _Block_size = _Non_user_size + _Bytes;
    if ( _Block_size <= _Bytes ) {
        _Throw_bad_array_new_length ( );
    }

    const uintptr_t _Ptr_container = reinterpret_cast < uintptr_t > ( _Traits :: _Allocate ( _Block_size ) );
    do { if ( _Ptr_container != 0 ) { } else { do { ( void ) ( ( 1 != _CrtDbgReport ( 2, "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\xmemory", 135, 0, "%s", "invalid argument" ) ) || ( __debugbreak ( ), 0 ) ); :: _invalid_parameter ( L"\x22\x69\x6e\x76\x61\x6c\x69\x64\x20\x61\x72\x67\x75\x6d\x65\x6e\x74\x22", L"", L"\x45\x3a\x5c\x56\x69\x73\x75\x61\x6c\x53\x74\x75\x64\x69\x6f\x5c\x32\x30\x32\x32\x5c\x50\x72\x65\x76\x69\x65\x77\x5c\x56\x43\x5c" L"\x54\x6f\x6f\x6c\x73\x5c\x4d\x53\x56\x43\x5c\x31\x34\x2e\x33\x37\x2e\x33\x32\x37\x30\x35\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x78" L"\x6d\x65\x6d\x6f\x72\x79", 135, 0 ); } while ( false ); }; } while ( false );
    void * const _Ptr = reinterpret_cast < void * > ( ( _Ptr_container + _Non_user_size ) & ~ ( _Big_allocation_alignment - 1 ) );
    static_cast < uintptr_t * > ( _Ptr ) [ - 1 ] = _Ptr_container;


    static_cast < uintptr_t * > ( _Ptr ) [ - 2 ] = _Big_allocation_sentinel;

    return _Ptr;
}
#line 145 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\xmemory"
inline void _Adjust_manually_vector_aligned(void *&_Ptr, size_t &_Bytes) { 
#line 147
_Bytes += _Non_user_size; 
#line 149
const uintptr_t *const _Ptr_user = static_cast< uintptr_t *>(_Ptr); 
#line 150
const uintptr_t _Ptr_container = _Ptr_user[-1]; 
#line 154
do { if ((_Ptr_user[-2]) == _Big_allocation_sentinel) { } else { do { (void)((1 != _CrtDbgReport(2, "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\xmemory", 154, 0, "%s", "invalid argument")) || (__debugbreak(), 0)); ::_invalid_parameter(L"\x22\x69\x6e\x76\x61\x6c\x69\x64\x20\x61\x72\x67\x75\x6d\x65\x6e\x74\x22", L"", L"\x45\x3a\x5c\x56\x69\x73\x75\x61\x6c\x53\x74\x75\x64\x69\x6f\x5c\x32\x30\x32\x32\x5c\x50\x72\x65\x76\x69\x65\x77\x5c\x56\x43\x5c" L"\x54\x6f\x6f\x6c\x73\x5c\x4d\x53\x56\x43\x5c\x31\x34\x2e\x33\x37\x2e\x33\x32\x37\x30\x35\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x78" L"\x6d\x65\x6d\x6f\x72\x79", 154, 0); } while (false); }  ; } while (false); 
#line 159
constexpr uintptr_t _Min_back_shift = ((2) * sizeof(void *)); 
#line 163 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\xmemory"
const uintptr_t _Back_shift = (reinterpret_cast< uintptr_t>(_Ptr)) - _Ptr_container; 
#line 164
do { if ((_Back_shift >= _Min_back_shift) && (_Back_shift <= _Non_user_size)) { } else { do { (void)((1 != _CrtDbgReport(2, "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\xmemory", 164, 0, "%s", "invalid argument")) || (__debugbreak(), 0)); ::_invalid_parameter(L"\x22\x69\x6e\x76\x61\x6c\x69\x64\x20\x61\x72\x67\x75\x6d\x65\x6e\x74\x22", L"", L"\x45\x3a\x5c\x56\x69\x73\x75\x61\x6c\x53\x74\x75\x64\x69\x6f\x5c\x32\x30\x32\x32\x5c\x50\x72\x65\x76\x69\x65\x77\x5c\x56\x43\x5c" L"\x54\x6f\x6f\x6c\x73\x5c\x4d\x53\x56\x43\x5c\x31\x34\x2e\x33\x37\x2e\x33\x32\x37\x30\x35\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x78" L"\x6d\x65\x6d\x6f\x72\x79", 164, 0); } while (false); }  ; } while (false); 
#line 165
_Ptr = (reinterpret_cast< void *>(_Ptr_container)); 
#line 166
} 
#line 219 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\xmemory"
template < size_t _Align, class _Traits = _Default_allocate_traits,
    enable_if_t < ( ! 0 || _Align <= 16Ui64 ), int > = 0 >
__declspec ( allocator ) inline void * _Allocate ( const size_t _Bytes ) {





    {
        if ( _Bytes >= _Big_allocation_threshold ) {
            return _Allocate_manually_vector_aligned < _Traits > ( _Bytes );
        }
    }


    if ( _Bytes != 0 ) {
        return _Traits :: _Allocate ( _Bytes );
    }

    return nullptr;
}
#line 241 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\xmemory"
template < size_t _Align, enable_if_t < ( ! 0 || _Align <= 16Ui64 ), int > = 0 >
inline void _Deallocate ( void * _Ptr, size_t _Bytes ) noexcept {






    {

        if ( _Bytes >= _Big_allocation_threshold ) {
            _Adjust_manually_vector_aligned ( _Ptr, _Bytes );
        }

        :: operator delete ( _Ptr, _Bytes );
    }
}
#line 261 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\xmemory"
template < class _Ty, class ... _Types >
_Ty * _Global_new ( _Types && ... _Args ) {
    struct [ [ nodiscard ] ] _Guard_type {
        void * _Result;
        ~ _Guard_type ( ) {
            if ( _Result ) {
                _Deallocate < _New_alignof < _Ty >> ( _Result, sizeof ( _Ty ) );
            }
        }
    };

    _Guard_type _Guard { _Allocate < _New_alignof < _Ty >> ( sizeof ( _Ty ) ) };
    :: new ( _Guard . _Result ) _Ty ( :: std :: forward < _Types > ( _Args ) ... );
    return static_cast < _Ty * > ( :: std :: exchange ( _Guard . _Result, nullptr ) );
}
#line 277
template< class _Ptr, class _Ty> using _Rebind_pointer_t = typename pointer_traits< _Ptr> ::template rebind< _Ty> ; 
#line 280
template < class _Pointer, enable_if_t < ! is_pointer_v < _Pointer >, int > = 0 >
inline _Pointer _Refancy ( typename pointer_traits < _Pointer > :: element_type * _Ptr ) noexcept {
    return pointer_traits < _Pointer > :: pointer_to ( * _Ptr );
}
#line 285
template < class _Pointer, enable_if_t < is_pointer_v < _Pointer >, int > = 0 >
inline _Pointer _Refancy ( _Pointer _Ptr ) noexcept {
    return _Ptr;
}
#line 290
template < class _NoThrowFwdIt, class _NoThrowSentinel >
inline void _Destroy_range ( _NoThrowFwdIt _First, _NoThrowSentinel _Last ) noexcept;
#line 293
template < class _Ty >
inline void _Destroy_in_place ( _Ty & _Obj ) noexcept {
    if constexpr ( is_array_v < _Ty > ) {
        _Destroy_range ( _Obj, _Obj + extent_v < _Ty > );
    } else {
        _Obj . ~ _Ty ( );
    }
}
#line 316 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\xmemory"
template < class _Ptrty >
auto _Const_cast ( _Ptrty _Ptr ) noexcept {
    using _Elem = typename pointer_traits < _Ptrty > :: element_type;
    using _Modifiable = remove_const_t < _Elem >;
    using _Dest = typename pointer_traits < _Ptrty > :: template rebind < _Modifiable >;

    return pointer_traits < _Dest > :: pointer_to ( const_cast < _Modifiable & > ( * _Ptr ) );
}
#line 325
template < class _Ty >
auto _Const_cast ( _Ty * _Ptr ) noexcept {
    return const_cast < remove_const_t < _Ty > * > ( _Ptr );
}
#line 330
template< class _Ty, class  = void> 
#line 331
struct _Get_pointer_type { 
#line 332
using type = typename _Ty::value_type *; 
#line 333
}; 
#line 335
__pragma( warning(push)) __pragma( warning(disable : 4996)) 
#line 336
template< class _Ty> 
#line 337
struct _Get_pointer_type< _Ty, void_t< typename _Ty::pointer> >  { 
#line 338
using type = typename _Ty::pointer; 
#line 339
}; 
#line 340
__pragma( warning(pop)) 
#line 342
template< class _Ty, class  = void> 
#line 343
struct _Get_const_pointer_type { 
#line 344
using _Ptrty = typename _Get_pointer_type< _Ty> ::type; 
#line 345
using _Valty = typename _Ty::value_type; 
#line 346
using type = typename pointer_traits< _Ptrty> ::template rebind< const _Valty> ; 
#line 347
}; 
#line 349
__pragma( warning(push)) __pragma( warning(disable : 4996)) 
#line 350
template< class _Ty> 
#line 351
struct _Get_const_pointer_type< _Ty, void_t< typename _Ty::const_pointer> >  { 
#line 352
using type = typename _Ty::const_pointer; 
#line 353
}; 
#line 354
__pragma( warning(pop)) 
#line 356
template< class _Ty, class  = void> 
#line 357
struct _Get_void_pointer_type { 
#line 358
using _Ptrty = typename _Get_pointer_type< _Ty> ::type; 
#line 359
using type = typename pointer_traits< _Ptrty> ::template rebind< void> ; 
#line 360
}; 
#line 362
template< class _Ty> 
#line 363
struct _Get_void_pointer_type< _Ty, void_t< typename _Ty::void_pointer> >  { 
#line 364
using type = typename _Ty::void_pointer; 
#line 365
}; 
#line 367
template< class _Ty, class  = void> 
#line 368
struct _Get_const_void_pointer_type { 
#line 369
using _Ptrty = typename _Get_pointer_type< _Ty> ::type; 
#line 370
using type = typename pointer_traits< _Ptrty> ::template rebind< const void> ; 
#line 371
}; 
#line 373
template< class _Ty> 
#line 374
struct _Get_const_void_pointer_type< _Ty, void_t< typename _Ty::const_void_pointer> >  { 
#line 375
using type = typename _Ty::const_void_pointer; 
#line 376
}; 
#line 378
template< class _Ty, class  = void> 
#line 379
struct _Get_difference_type { 
#line 380
using _Ptrty = typename _Get_pointer_type< _Ty> ::type; 
#line 381
using type = typename pointer_traits< _Ptrty> ::difference_type; 
#line 382
}; 
#line 384
template< class _Ty> 
#line 385
struct _Get_difference_type< _Ty, void_t< typename _Ty::difference_type> >  { 
#line 386
using type = typename _Ty::difference_type; 
#line 387
}; 
#line 389
template< class _Ty, class  = void> 
#line 390
struct _Get_size_type { 
#line 391
using type = make_unsigned_t< typename _Get_difference_type< _Ty> ::type> ; 
#line 392
}; 
#line 394
template< class _Ty> 
#line 395
struct _Get_size_type< _Ty, void_t< typename _Ty::size_type> >  { 
#line 396
using type = typename _Ty::size_type; 
#line 397
}; 
#line 399
template< class _Ty, class  = void> 
#line 400
struct _Get_propagate_on_container_copy { 
#line 401
using type = false_type; 
#line 402
}; 
#line 404
template< class _Ty> 
#line 405
struct _Get_propagate_on_container_copy< _Ty, void_t< typename _Ty::propagate_on_container_copy_assignment> >  { 
#line 406
using type = typename _Ty::propagate_on_container_copy_assignment; 
#line 407
}; 
#line 409
template< class _Ty, class  = void> 
#line 410
struct _Get_propagate_on_container_move { 
#line 411
using type = false_type; 
#line 412
}; 
#line 414
template< class _Ty> 
#line 415
struct _Get_propagate_on_container_move< _Ty, void_t< typename _Ty::propagate_on_container_move_assignment> >  { 
#line 416
using type = typename _Ty::propagate_on_container_move_assignment; 
#line 417
}; 
#line 419
template< class _Ty, class  = void> 
#line 420
struct _Get_propagate_on_container_swap { 
#line 421
using type = false_type; 
#line 422
}; 
#line 424
template< class _Ty> 
#line 425
struct _Get_propagate_on_container_swap< _Ty, void_t< typename _Ty::propagate_on_container_swap> >  { 
#line 426
using type = typename _Ty::propagate_on_container_swap; 
#line 427
}; 
#line 429
template< class _Ty, class  = void> 
#line 430
struct _Get_is_always_equal { 
#line 431
using type = bool_constant< is_empty_v< _Ty> > ; 
#line 432
}; 
#line 434
__pragma( warning(push)) __pragma( warning(disable : 4996)) 
#line 435
template< class _Ty> 
#line 436
struct _Get_is_always_equal< _Ty, void_t< typename _Ty::is_always_equal> >  { 
#line 437
using type = typename _Ty::is_always_equal; 
#line 438
}; 
#line 439
__pragma( warning(pop)) 
#line 441
template< class _Ty, class _Other, class  = void> 
#line 442
struct _Get_rebind_type { 
#line 443
using type = typename _Replace_first_parameter< _Other, _Ty> ::type; 
#line 444
}; 
#line 446
__pragma( warning(push)) __pragma( warning(disable : 4996)) 
#line 447
template< class _Ty, class _Other> 
#line 448
struct _Get_rebind_type< _Ty, _Other, void_t< typename _Ty::template rebind< _Other> ::other> >  { 
#line 449
using type = typename _Ty::template rebind< _Other> ::other; 
#line 450
}; 
#line 451
__pragma( warning(pop)) 
#line 453
template< class _Ty> class allocator; 
#line 456
template< class _Alloc, class  = void> 
#line 457
struct _Is_default_allocator : public false_type { }; 
#line 459
template< class _Ty> 
#line 460
struct _Is_default_allocator< allocator< _Ty> , void_t< typename allocator< _Ty> ::_From_primary> >  : public is_same< typename allocator< _Ty> ::_From_primary, allocator< _Ty> > ::type { 
#line 461
}; 
#line 472 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\xmemory"
template< class _Void, class ..._Types> 
#line 473
struct _Has_no_allocator_construct : public true_type { }; 
#line 475
__pragma( warning(push)) __pragma( warning(disable : 4996)) 
#line 476
template< class _Alloc, class _Ptr, class ..._Args> 
#line 477
struct _Has_no_allocator_construct< void_t< decltype(std::declval< _Alloc &> ().construct(std::declval< _Ptr> (), std::declval< _Args> ()...))> , _Alloc, _Ptr, _Args...>  : public false_type { 
#line 479
}; 
#line 480
__pragma( warning(pop)) 
#line 482
template< class _Alloc, class _Ptr, class ..._Args> using _Uses_default_construct = disjunction< _Is_default_allocator< _Alloc> , _Has_no_allocator_construct< void, _Alloc, _Ptr, _Args...> > ; 
#line 486
template< class _Alloc, class _Ptr, class  = void> 
#line 487
struct _Has_no_alloc_destroy : public true_type { }; 
#line 489
__pragma( warning(push)) __pragma( warning(disable : 4996)) 
#line 490
template< class _Alloc, class _Ptr> 
#line 491
struct _Has_no_alloc_destroy< _Alloc, _Ptr, void_t< decltype(std::declval< _Alloc &> ().destroy(std::declval< _Ptr> ()))> >  : public false_type { 
#line 492
}; 
#line 493
__pragma( warning(pop)) 
#line 495
template< class _Alloc, class _Ptr> using _Uses_default_destroy = disjunction< _Is_default_allocator< _Alloc> , _Has_no_alloc_destroy< _Alloc, _Ptr> > ; 
#line 498
template< class _Alloc, class _Size_type, class _Const_void_pointer, class  = void> 
#line 499
struct _Has_allocate_hint : public false_type { }; 
#line 501
__pragma( warning(push)) __pragma( warning(disable : 4996)) 
#line 502
template< class _Alloc, class _Size_type, class _Const_void_pointer> 
#line 503
struct _Has_allocate_hint< _Alloc, _Size_type, _Const_void_pointer, void_t< decltype(std::declval< _Alloc &> ().allocate(std::declval< const _Size_type &> (), std::declval< const _Const_void_pointer &> ()))> >  : public true_type { 
#line 505
}; 
#line 506
__pragma( warning(pop)) 
#line 508
template< class _Alloc, class  = void> 
#line 509
struct _Has_max_size : public false_type { }; 
#line 511
__pragma( warning(push)) __pragma( warning(disable : 4996)) 
#line 512
template< class _Alloc> 
#line 513
struct _Has_max_size< _Alloc, void_t< decltype(std::declval< const _Alloc &> ().max_size())> >  : public true_type { }; 
#line 514
__pragma( warning(pop)) 
#line 516
template< class _Alloc, class  = void> 
#line 517
struct _Has_select_on_container_copy_construction : public false_type { }; 
#line 519
template< class _Alloc> 
#line 520
struct _Has_select_on_container_copy_construction< _Alloc, void_t< decltype(std::declval< const _Alloc &> ().select_on_container_copy_construction())> >  : public true_type { 
#line 521
}; 
#line 531 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\xmemory"
template< class _Alloc> struct allocator_traits; 
#line 534
__pragma( warning(push)) __pragma( warning(disable : 4996)) 
#line 535
template < class _Alloc >
struct _Normal_allocator_traits {
    using allocator_type = _Alloc;
    using value_type = typename _Alloc :: value_type;

    using pointer = typename _Get_pointer_type < _Alloc > :: type;
    using const_pointer = typename _Get_const_pointer_type < _Alloc > :: type;
    using void_pointer = typename _Get_void_pointer_type < _Alloc > :: type;
    using const_void_pointer = typename _Get_const_void_pointer_type < _Alloc > :: type;

    using size_type = typename _Get_size_type < _Alloc > :: type;
    using difference_type = typename _Get_difference_type < _Alloc > :: type;

    using propagate_on_container_copy_assignment = typename _Get_propagate_on_container_copy < _Alloc > :: type;
    using propagate_on_container_move_assignment = typename _Get_propagate_on_container_move < _Alloc > :: type;
    using propagate_on_container_swap = typename _Get_propagate_on_container_swap < _Alloc > :: type;
    using is_always_equal = typename _Get_is_always_equal < _Alloc > :: type;

    template < class _Other >
    using rebind_alloc = typename _Get_rebind_type < _Alloc, _Other > :: type;

    template < class _Other >
    using rebind_traits = allocator_traits < rebind_alloc < _Other >>;

    [ [ nodiscard ( "This function allocates memory and returns a raw pointer. Discarding the return value will cause a memory leak." ) ] ] static inline __declspec ( allocator ) pointer
        allocate ( _Alloc & _Al, const size_type _Count ) {
        return _Al . allocate ( _Count );
    }

    [ [ nodiscard ( "This function allocates memory and returns a raw pointer. Discarding the return value will cause a memory leak." ) ] ] static inline __declspec ( allocator ) pointer
        allocate ( _Alloc & _Al, const size_type _Count, const const_void_pointer _Hint ) {
        if constexpr ( _Has_allocate_hint < _Alloc, size_type, const_void_pointer > :: value ) {
            return _Al . allocate ( _Count, _Hint );
        } else {
            return _Al . allocate ( _Count );
        }
    }












    static inline void deallocate ( _Alloc & _Al, pointer _Ptr, size_type _Count ) {
        _Al . deallocate ( _Ptr, _Count );
    }

    template < class _Ty, class ... _Types >
    static inline void construct ( _Alloc & _Al, _Ty * _Ptr, _Types && ... _Args ) {
        if constexpr ( _Uses_default_construct < _Alloc, _Ty *, _Types ... > :: value ) {



            :: new ( static_cast < void * > ( _Ptr ) ) _Ty ( :: std :: forward < _Types > ( _Args ) ... );

        } else {
            _Al . construct ( _Ptr, :: std :: forward < _Types > ( _Args ) ... );
        }
    }

    template < class _Ty >
    static inline void destroy ( _Alloc & _Al, _Ty * _Ptr ) {
        if constexpr ( _Uses_default_destroy < _Alloc, _Ty * > :: value ) {



            _Ptr -> ~ _Ty ( );

        } else {
            _Al . destroy ( _Ptr );
        }
    }

    [ [ nodiscard ] ] static inline size_type max_size ( const _Alloc & _Al ) noexcept {
        if constexpr ( _Has_max_size < _Alloc > :: value ) {
            return _Al . max_size ( );
        } else {
            return ( numeric_limits < size_type > :: max ) ( ) / sizeof ( value_type );
        }
    }

    [ [ nodiscard ] ] static inline _Alloc select_on_container_copy_construction ( const _Alloc & _Al ) {
        if constexpr ( _Has_select_on_container_copy_construction < _Alloc > :: value ) {
            return _Al . select_on_container_copy_construction ( );
        } else {
            return _Al;
        }
    }
};
#line 630 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\xmemory"
__pragma( warning(pop)) 
#line 632
template < class _Alloc >
struct _Default_allocator_traits {
    using allocator_type = _Alloc;
    using value_type = typename _Alloc :: value_type;

    using pointer = value_type *;
    using const_pointer = const value_type *;
    using void_pointer = void *;
    using const_void_pointer = const void *;

    using size_type = size_t;
    using difference_type = ptrdiff_t;

    using propagate_on_container_copy_assignment = false_type;
    using propagate_on_container_move_assignment = true_type;
    using propagate_on_container_swap = false_type;
    using is_always_equal = true_type;

    template < class _Other >
    using rebind_alloc = allocator < _Other >;

    template < class _Other >
    using rebind_traits = allocator_traits < allocator < _Other >>;

    [ [ nodiscard ( "This function allocates memory and returns a raw pointer. Discarding the return value will cause a memory leak." ) ] ] static inline __declspec ( allocator ) pointer
        allocate ( _Alloc & _Al, const size_type _Count ) {





        {
            ( void ) _Al;
            return static_cast < pointer > (
                _Allocate < _New_alignof < value_type >> ( _Get_size_of_n < sizeof ( value_type ) > ( _Count ) ) );
        }
    }

    [ [ nodiscard ( "This function allocates memory and returns a raw pointer. Discarding the return value will cause a memory leak." ) ] ] static inline __declspec ( allocator ) pointer
        allocate ( _Alloc & _Al, const size_type _Count, const_void_pointer ) {





        {
            ( void ) _Al;
            return static_cast < pointer > (
                _Allocate < _New_alignof < value_type >> ( _Get_size_of_n < sizeof ( value_type ) > ( _Count ) ) );
        }
    }








    static inline void deallocate ( _Alloc & _Al, const pointer _Ptr, const size_type _Count ) {






        {
            ( void ) _Al;
            _Deallocate < _New_alignof < value_type >> ( _Ptr, sizeof ( value_type ) * _Count );
        }
    }

    template < class _Objty, class ... _Types >
    static inline void construct ( _Alloc &, _Objty * const _Ptr, _Types && ... _Args ) {





        {
            :: new ( _Voidify_iter ( _Ptr ) ) _Objty ( :: std :: forward < _Types > ( _Args ) ... );
        }
    }

    template < class _Uty >
    static inline void destroy ( _Alloc &, _Uty * const _Ptr ) {



        _Ptr -> ~ _Uty ( );

    }

    [ [ nodiscard ] ] static inline size_type max_size ( const _Alloc & ) noexcept {
        return static_cast < size_t > ( - 1 ) / sizeof ( value_type );
    }

    [ [ nodiscard ] ] static inline _Alloc select_on_container_copy_construction ( const _Alloc & _Al ) {
        return _Al;
    }
};
#line 734 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\xmemory"
template< class _Alloc> 
#line 735
struct allocator_traits : public conditional_t< _Is_default_allocator< _Alloc> ::value, _Default_allocator_traits< _Alloc> , _Normal_allocator_traits< _Alloc> >  { 
#line 736
}; 
#line 740
template< class _Alloc> constexpr bool 
#line 741
_Choose_pocca_v = (allocator_traits< _Alloc> ::propagate_on_container_copy_assignment::value && (!allocator_traits< _Alloc> ::is_always_equal::value)); 
#line 744
enum class _Pocma_values { 
#line 745
_Equal_allocators, 
#line 746
_Propagate_allocators, 
#line 747
_No_propagate_allocators
#line 748
}; 
#line 750
template< class _Alloc> constexpr _Pocma_values 
#line 751
_Choose_pocma_v = ((allocator_traits< _Alloc> ::is_always_equal::value) ? _Pocma_values::_Equal_allocators : ((allocator_traits< _Alloc> ::propagate_on_container_move_assignment::value) ? _Pocma_values::_Propagate_allocators : _Pocma_values::_No_propagate_allocators)); 
#line 758
template< class _Alloc, class _Value_type> using _Rebind_alloc_t = typename allocator_traits< _Alloc> ::template rebind_alloc< _Value_type> ; 
#line 763
template< class _Alloc, class _Value_type> using _Maybe_rebind_alloc_t = typename _Select< is_same_v< typename _Alloc::value_type, _Value_type> > ::template _Apply< _Alloc &, _Rebind_alloc_t< _Alloc, _Value_type> > ; 
#line 768
template< class _Alloc> constexpr bool 
#line 769
_Is_simple_alloc_v = ((is_same_v< typename allocator_traits< _Alloc> ::size_type, unsigned __int64>  && is_same_v< typename allocator_traits< _Alloc> ::difference_type, __int64> ) && is_same_v< typename allocator_traits< _Alloc> ::pointer, typename _Alloc::value_type *> ) && is_same_v< typename allocator_traits< _Alloc> ::const_pointer, const typename _Alloc::value_type *> ; 
#line 775
template< class _Value_type> 
#line 776
struct _Simple_types { 
#line 778
using value_type = _Value_type; 
#line 779
using size_type = size_t; 
#line 780
using difference_type = ptrdiff_t; 
#line 781
using pointer = value_type *; 
#line 782
using const_pointer = const value_type *; 
#line 783
}; 
#line 786
constexpr size_t _Asan_granularity = (8); 
#line 787
constexpr size_t _Asan_granularity_mask = (_Asan_granularity - (1)); 
#line 789
struct _Asan_aligned_pointers { 
#line 790
const void *_First; 
#line 791
const void *_End; 
#line 793
[[nodiscard]] constexpr const void *_Clamp_to_end(const void *_Mid) const noexcept { 
#line 794
; 
#line 795
if (_Mid > (_End)) { 
#line 796
return _End; 
#line 797
} else { 
#line 798
return _Mid; 
#line 799
}  
#line 800
} 
#line 801
}; 
#line 883
[[nodiscard]] inline _Asan_aligned_pointers _Get_asan_aligned_first_end(const void *const 
#line 884
_First, const void *const _End) noexcept { 
#line 885
return {reinterpret_cast< const void *>((reinterpret_cast< uintptr_t>(_First)) & (~_Asan_granularity_mask)), reinterpret_cast< const void *>((reinterpret_cast< uintptr_t>(_End)) & (~_Asan_granularity_mask))}; 
#line 889
} 
#line 894
[[nodiscard]] inline const void *_Get_asan_aligned_after(const void *const _End) noexcept { 
#line 895
return reinterpret_cast< const void *>(((reinterpret_cast< uintptr_t>(_End)) + _Asan_granularity_mask) & (~_Asan_granularity_mask)); 
#line 897
} 
#line 899
template< class _Container, class  = void> constexpr size_t 
#line 900
_Container_allocation_minimum_asan_alignment = __alignof(typename _Container::value_type); 
#line 902
template< class _Container> constexpr size_t 
#line 903
_Container_allocation_minimum_asan_alignment< _Container, void_t< decltype(_Container::allocator_type::_Minimum_asan_allocation_alignment)> >  = (std::max)(__alignof(typename _Container::value_type), _Container::allocator_type::_Minimum_asan_allocation_alignment); 
#line 908
template < class _Ty >
class allocator {
public :
    static_assert ( ! is_const_v < _Ty >, "The C++ Standard forbids containers of const elements because allocator<const T> is ill-formed."
                                                                               );

    using _From_primary = allocator;

    using value_type = _Ty;


    using pointer = _Ty *;
    using const_pointer = const _Ty *;

    using reference = _Ty &;
    using const_reference = const _Ty &;


    using size_type = size_t;
    using difference_type = ptrdiff_t;

    using propagate_on_container_move_assignment = true_type;
    using is_always_equal = true_type;


    template < class _Other >
    struct rebind {
        using other = allocator < _Other >;
    };

     [ [ nodiscard ] ] _Ty * address ( _Ty & _Val ) const noexcept {
        return :: std :: addressof ( _Val );
    }

     [ [ nodiscard ] ] const _Ty * address ( const _Ty & _Val ) const noexcept {
        return :: std :: addressof ( _Val );
    }


    constexpr allocator ( ) noexcept { }

    constexpr allocator ( const allocator & ) noexcept = default;
    template < class _Other >
    constexpr allocator ( const allocator < _Other > & ) noexcept { }
    inline ~ allocator ( ) = default;
    inline allocator & operator = ( const allocator & ) = default;

    inline void deallocate ( _Ty * const _Ptr, const size_t _Count ) {
        do { if ( _Ptr != nullptr || _Count == 0 ) { } else { do { ( void ) ( ( 1 != _CrtDbgReport ( 2, "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\xmemory", 956, 0, "%s", "null pointer cannot point to a block of non-zero size" ) ) || ( __debugbreak ( ), 0 ) ); :: _invalid_parameter ( L"\x22\x6e\x75\x6c\x6c\x20\x70\x6f\x69\x6e\x74\x65\x72\x20\x63\x61\x6e\x6e\x6f\x74\x20\x70\x6f\x69\x6e\x74\x20\x74\x6f\x20\x61\x20" L"\x62\x6c\x6f\x63\x6b\x20\x6f\x66\x20\x6e\x6f\x6e\x2d\x7a\x65\x72\x6f\x20\x73\x69\x7a\x65\x22", L"", L"\x45\x3a\x5c\x56\x69\x73\x75\x61\x6c\x53\x74\x75\x64\x69\x6f\x5c\x32\x30\x32\x32\x5c\x50\x72\x65\x76\x69\x65\x77\x5c\x56\x43\x5c" L"\x54\x6f\x6f\x6c\x73\x5c\x4d\x53\x56\x43\x5c\x31\x34\x2e\x33\x37\x2e\x33\x32\x37\x30\x35\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x78" L"\x6d\x65\x6d\x6f\x72\x79", 956, 0 ); } while ( false ); }; } while ( false );

        _Deallocate < _New_alignof < _Ty >> ( _Ptr, sizeof ( _Ty ) * _Count );
    }

    [ [ nodiscard ( "This function allocates memory and returns a raw pointer. Discarding the return value will cause a memory leak." ) ] ] inline __declspec ( allocator ) _Ty * allocate ( const size_t _Count ) {
        static_assert ( sizeof ( value_type ) > 0, "value_type must be complete before calling allocate." );
        return static_cast < _Ty * > ( _Allocate < _New_alignof < _Ty >> ( _Get_size_of_n < sizeof ( _Ty ) > ( _Count ) ) );
    }









     [ [ nodiscard ( "This function allocates memory and returns a raw pointer. Discarding the return value will cause a memory leak." ) ] ] __declspec ( allocator ) _Ty * allocate (
         const size_t _Count, const void * ) {
        return allocate ( _Count );
    }

    template < class _Objty, class ... _Types >
     void construct ( _Objty * const _Ptr, _Types && ... _Args ) {
        :: new ( _Voidify_iter ( _Ptr ) ) _Objty ( :: std :: forward < _Types > ( _Args ) ... );
    }

    template < class _Uty >
     void destroy ( _Uty * const _Ptr ) {
        _Ptr -> ~ _Uty ( );
    }

     [ [ nodiscard ] ] size_t max_size ( ) const noexcept {
        return static_cast < size_t > ( - 1 ) / sizeof ( _Ty );
    }


    static constexpr size_t _Minimum_asan_allocation_alignment = _Asan_granularity;
};
#line 999 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\xmemory"
#pragma pack(8)
template<> 
#line 999
class allocator< void>  { 
#line 1001
public: using value_type = void; 
#line 1003
using pointer = void *; 
#line 1004
using const_pointer = const void *; 
#line 1006
template< class _Other> 
#line 1007
struct rebind { 
#line 1008
using other = std::allocator< _Other> ; 
#line 1009
}; 
#line 1019 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\xmemory"
}; 
#pragma pack()
#line 1022 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\xmemory"
template < class _Ty, class _Other >
[ [ nodiscard ] ] inline bool operator == ( const allocator < _Ty > &, const allocator < _Other > & ) noexcept {
    return true;
}
#line 1028
template < class _Ty, class _Other >
[ [ nodiscard ] ] bool operator != ( const allocator < _Ty > &, const allocator < _Other > & ) noexcept {
    return false;
}
#line 1041 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\xmemory"
template< class _Alloc> using _Alloc_ptr_t = typename allocator_traits< _Alloc> ::pointer; 
#line 1044
template< class _Alloc> using _Alloc_size_t = typename allocator_traits< _Alloc> ::size_type; 
#line 1047
template < class _Alloc >
inline void _Pocca ( _Alloc & _Left, const _Alloc & _Right ) noexcept {
    if constexpr ( allocator_traits < _Alloc > :: propagate_on_container_copy_assignment :: value ) {
        _Left = _Right;
    }
}
#line 1054
template < class _Alloc >
inline void _Pocma ( _Alloc & _Left, _Alloc & _Right ) noexcept {
    if constexpr ( allocator_traits < _Alloc > :: propagate_on_container_move_assignment :: value ) {
        _Left = :: std :: move ( _Right );
    }
}
#line 1061
template < class _Alloc >
inline void _Pocs ( _Alloc & _Left, _Alloc & _Right ) noexcept {
    if constexpr ( allocator_traits < _Alloc > :: propagate_on_container_swap :: value ) {
        _Swap_adl ( _Left, _Right );
    } else {
        do { if ( _Left == _Right ) { } else { do { ( void ) ( ( 1 != _CrtDbgReport ( 2, "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\xmemory", 1066, 0, "%s", "containers incompatible for swap" ) ) || ( __debugbreak ( ), 0 ) ); :: _invalid_parameter ( L"\x22\x63\x6f\x6e\x74\x61\x69\x6e\x65\x72\x73\x20\x69\x6e\x63\x6f\x6d\x70\x61\x74\x69\x62\x6c\x65\x20\x66\x6f\x72\x20\x73\x77\x61" L"\x70\x22", L"", L"\x45\x3a\x5c\x56\x69\x73\x75\x61\x6c\x53\x74\x75\x64\x69\x6f\x5c\x32\x30\x32\x32\x5c\x50\x72\x65\x76\x69\x65\x77\x5c\x56\x43\x5c" L"\x54\x6f\x6f\x6c\x73\x5c\x4d\x53\x56\x43\x5c\x31\x34\x2e\x33\x37\x2e\x33\x32\x37\x30\x35\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x78" L"\x6d\x65\x6d\x6f\x72\x79", 1066, 0 ); } while ( false ); }; } while ( false );
    }
}
#line 1070
template < class _Alloc >
inline void _Destroy_range ( _Alloc_ptr_t < _Alloc > _First, const _Alloc_ptr_t < _Alloc > _Last, _Alloc & _Al ) noexcept {

    using _Ty = typename _Alloc :: value_type;
    if constexpr ( ! conjunction_v < is_trivially_destructible < _Ty >, _Uses_default_destroy < _Alloc, _Ty * >> ) {
        for (; _First != _Last; ++ _First ) {
            allocator_traits < _Alloc > :: destroy ( _Al, _Unfancy ( _First ) );
        }
    }
}
#line 1081
template < class _NoThrowFwdIt, class _NoThrowSentinel >
inline void _Destroy_range ( _NoThrowFwdIt _First, const _NoThrowSentinel _Last ) noexcept {

    if constexpr ( ! is_trivially_destructible_v < _Iter_value_t < _NoThrowFwdIt >> ) {
        for (; _First != _Last; ++ _First ) {
            _Destroy_in_place ( * _First );
        }
    }
}
#line 1091
template < class _Size_type, class _Unsigned_type >
[ [ nodiscard ] ] constexpr _Size_type _Convert_size ( const _Unsigned_type _Len ) noexcept (
    sizeof ( _Unsigned_type ) <= sizeof ( _Size_type ) ) {

    ;
    ;

    if constexpr ( sizeof ( _Unsigned_type ) > sizeof ( _Size_type ) ) {
        if ( _Len > ( numeric_limits < _Size_type > :: max ) ( ) ) {
            _Xlength_error ( "size is too long for _Size_type" );
        }
    }

    return static_cast < _Size_type > ( _Len );
}
#line 1107
template < class _Alloc >
inline void _Deallocate_plain ( _Alloc & _Al, typename _Alloc :: value_type * const _Ptr ) noexcept {

    using _Alloc_traits = allocator_traits < _Alloc >;
    if constexpr ( is_same_v < _Alloc_ptr_t < _Alloc >, typename _Alloc :: value_type * > ) {
        _Alloc_traits :: deallocate ( _Al, _Ptr, 1 );
    } else {
        using _Ptr_traits = pointer_traits < _Alloc_ptr_t < _Alloc >>;
        _Alloc_traits :: deallocate ( _Al, _Ptr_traits :: pointer_to ( * _Ptr ), 1 );
    }
}
#line 1119
template < class _Alloc >
inline void _Delete_plain_internal ( _Alloc & _Al, typename _Alloc :: value_type * const _Ptr ) noexcept {

    using _Ty = typename _Alloc :: value_type;
    _Ptr -> ~ _Ty ( );
    _Deallocate_plain ( _Al, _Ptr );
}
#line 1127
template < class _Alloc >
struct _Alloc_construct_ptr {
    using pointer = _Alloc_ptr_t < _Alloc >;
    _Alloc & _Al;
    pointer _Ptr;

    inline explicit _Alloc_construct_ptr ( _Alloc & _Al_ ) : _Al ( _Al_ ), _Ptr ( nullptr ) { }

    [ [ nodiscard ] ] inline pointer _Release ( ) noexcept {
        return :: std :: exchange ( _Ptr, nullptr );
    }

    inline void _Allocate ( ) {
        _Ptr = nullptr;
        _Ptr = _Al . allocate ( 1 );
    }

    inline ~ _Alloc_construct_ptr ( ) {
        if ( _Ptr ) {
            _Al . deallocate ( _Ptr, 1 );
        }
    }

    _Alloc_construct_ptr ( const _Alloc_construct_ptr & ) = delete;
    _Alloc_construct_ptr & operator = ( const _Alloc_construct_ptr & ) = delete;
};
#line 1154
struct _Fake_allocator { }; 
#line 1156
struct _Container_base0 { 
#line 1157
void _Orphan_all() noexcept { } 
#line 1158
void _Swap_proxy_and_iterators(_Container_base0 &) noexcept { } 
#line 1159
void _Alloc_proxy(const _Fake_allocator &) noexcept { } 
#line 1160
void _Reload_proxy(const _Fake_allocator &, const _Fake_allocator &) noexcept { } 
#line 1161
}; 
#line 1163
struct _Iterator_base0 { 
#line 1164
void _Adopt(const void *) noexcept { } 
#line 1165
const _Container_base0 *_Getcont() const noexcept { 
#line 1166
return nullptr; 
#line 1167
} 
#line 1169
static constexpr bool _Unwrap_when_unverified = true; 
#line 1170
}; 
#line 1172
struct _Container_base12; 
#line 1173
struct _Container_proxy { 
#line 1174
_Container_proxy() noexcept = default;
#line 1175
_Container_proxy(_Container_base12 *_Mycont_) noexcept : _Mycont(_Mycont_) { } 
#line 1177
const _Container_base12 *_Mycont = (nullptr); 
#line 1178
mutable _Iterator_base12 *_Myfirstiter = (nullptr); 
#line 1179
}; 
#line 1181
struct _Container_base12 { 
#line 1183
_Container_base12() noexcept = default;
#line 1185
_Container_base12(const _Container_base12 &) = delete;
#line 1186
_Container_base12 &operator=(const _Container_base12 &) = delete;
#line 1188
inline void _Orphan_all() noexcept; 
#line 1189
inline void _Swap_proxy_and_iterators(_Container_base12 &) noexcept; 
#line 1191
template < class _Alloc >
    inline void _Alloc_proxy ( _Alloc && _Al ) {
        _Container_proxy * const _New_proxy = _Unfancy ( _Al . allocate ( 1 ) );
        _Construct_in_place ( * _New_proxy, this );
        _Myproxy = _New_proxy;
        _New_proxy -> _Mycont = this;
    }
#line 1199
template < class _Alloc >
    inline void _Reload_proxy ( _Alloc && _Old_alloc, _Alloc && _New_alloc ) {

        _Container_proxy * const _New_proxy = _Unfancy ( _New_alloc . allocate ( 1 ) );
        _Construct_in_place ( * _New_proxy, this );
        _New_proxy -> _Mycont = this;
        _Delete_plain_internal ( _Old_alloc, :: std :: exchange ( _Myproxy, _New_proxy ) );
    }
#line 1208
_Container_proxy *_Myproxy = (nullptr); 
#line 1211
private: inline void _Orphan_all_unlocked_v3() noexcept; 
#line 1212
inline void _Swap_proxy_and_iterators_unlocked(_Container_base12 &) noexcept; 
#line 1214
void _Orphan_all_locked_v3() noexcept { 
#line 1215
_Lockit _Lock(3); 
#line 1216
this->_Orphan_all_unlocked_v3(); 
#line 1217
} 
#line 1219
void _Swap_proxy_and_iterators_locked(_Container_base12 &_Right) noexcept { 
#line 1220
_Lockit _Lock(3); 
#line 1221
this->_Swap_proxy_and_iterators_unlocked(_Right); 
#line 1222
} 
#line 1223
}; 
#line 1225
struct _Iterator_base12 { 
#line 1227
_Iterator_base12() noexcept = default;
#line 1229
_Iterator_base12(const _Iterator_base12 &_Right) noexcept { 
#line 1230
((*this) = _Right); 
#line 1231
} 
#line 1233
_Iterator_base12 &operator=(const _Iterator_base12 &_Right) noexcept { 
#line 1240 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\xmemory"
{ 
#line 1241
this->_Assign_locked(_Right); 
#line 1242
} 
#line 1246 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\xmemory"
return *this; 
#line 1247
} 
#line 1250
~_Iterator_base12() noexcept { 
#line 1256 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\xmemory"
{ 
#line 1257
this->_Orphan_me_locked_v3(); 
#line 1258
} 
#line 1259
} 
#line 1261
void _Adopt(const _Container_base12 *_Parent) noexcept { 
#line 1267 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\xmemory"
{ 
#line 1268
this->_Adopt_locked(_Parent); 
#line 1269
} 
#line 1270
} 
#line 1281 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\xmemory"
const _Container_base12 *_Getcont() const noexcept { 
#line 1282
return (_Myproxy) ? (_Myproxy)->_Mycont : (nullptr); 
#line 1283
} 
#line 1285
static constexpr bool _Unwrap_when_unverified = (2 == 0); 
#line 1287
mutable _Container_proxy *_Myproxy = (nullptr); 
#line 1288
mutable _Iterator_base12 *_Mynextiter = (nullptr); 
#line 1292
private: void _Assign_unlocked(const _Iterator_base12 &_Right) noexcept { 
#line 1293
if ((_Myproxy) == (_Right._Myproxy)) { 
#line 1294
return; 
#line 1295
}  
#line 1297
if (_Right._Myproxy) { 
#line 1298
this->_Adopt_unlocked((_Right._Myproxy)->_Mycont); 
#line 1299
} else { 
#line 1300
this->_Orphan_me_unlocked_v3(); 
#line 1301
}  
#line 1302
} 
#line 1304
void _Assign_locked(const _Iterator_base12 &_Right) noexcept { 
#line 1305
_Lockit _Lock(3); 
#line 1306
this->_Assign_unlocked(_Right); 
#line 1307
} 
#line 1309
void _Adopt_unlocked(const _Container_base12 *_Parent) noexcept { 
#line 1310
if (!_Parent) { 
#line 1311
this->_Orphan_me_unlocked_v3(); 
#line 1312
return; 
#line 1313
}  
#line 1315
_Container_proxy *_Parent_proxy = _Parent->_Myproxy; 
#line 1316
if ((_Myproxy) != _Parent_proxy) { 
#line 1317
if (_Myproxy) { 
#line 1318
this->_Orphan_me_unlocked_v3(); 
#line 1319
}  
#line 1320
(_Mynextiter) = (_Parent_proxy->_Myfirstiter); 
#line 1321
(_Parent_proxy->_Myfirstiter) = this; 
#line 1322
(_Myproxy) = _Parent_proxy; 
#line 1323
}  
#line 1324
} 
#line 1326
void _Adopt_locked(const _Container_base12 *_Parent) noexcept { 
#line 1327
_Lockit _Lock(3); 
#line 1328
this->_Adopt_unlocked(_Parent); 
#line 1329
} 
#line 1331
void _Orphan_me_unlocked_v3() noexcept { 
#line 1332
if (!(_Myproxy)) { 
#line 1333
return; 
#line 1334
}  
#line 1337
_Iterator_base12 **_Pnext = &((_Myproxy)->_Myfirstiter); 
#line 1338
while ((*_Pnext) && ((*_Pnext) != this)) { 
#line 1339
_Pnext = (&((*_Pnext)->_Mynextiter)); 
#line 1340
}  
#line 1342
do { if (*_Pnext) { } else { do { (void)((1 != _CrtDbgReport(2, "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\xmemory", 1342, 0, "%s", "ITERATOR LIST CORRUPTED!")) || (__debugbreak(), 0)); ::_invalid_parameter(L"\x22\x49\x54\x45\x52\x41\x54\x4f\x52\x20\x4c\x49\x53\x54\x20\x43\x4f\x52\x52\x55\x50\x54\x45\x44\x21\x22", L"", L"\x45\x3a\x5c\x56\x69\x73\x75\x61\x6c\x53\x74\x75\x64\x69\x6f\x5c\x32\x30\x32\x32\x5c\x50\x72\x65\x76\x69\x65\x77\x5c\x56\x43\x5c" L"\x54\x6f\x6f\x6c\x73\x5c\x4d\x53\x56\x43\x5c\x31\x34\x2e\x33\x37\x2e\x33\x32\x37\x30\x35\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x78" L"\x6d\x65\x6d\x6f\x72\x79", 1342, 0); } while (false); }  ; } while (false); 
#line 1343
(*_Pnext) = (_Mynextiter); 
#line 1344
(_Myproxy) = (nullptr); 
#line 1345
} 
#line 1347
void _Orphan_me_locked_v3() noexcept { 
#line 1348
_Lockit _Lock(3); 
#line 1349
this->_Orphan_me_unlocked_v3(); 
#line 1350
} 
#line 1352 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\xmemory"
}; 
#line 1354
inline void _Container_base12::_Orphan_all_unlocked_v3() noexcept { 
#line 1355
if (!(_Myproxy)) { 
#line 1356
return; 
#line 1357
}  
#line 1360
for (auto _Pnext = ::std::exchange((_Myproxy)->_Myfirstiter, nullptr); _Pnext; _Pnext = (_Pnext->_Mynextiter)) { 
#line 1361
(_Pnext->_Myproxy) = (nullptr); 
#line 1362
}  
#line 1363
} 
#line 1365
inline void _Container_base12::_Orphan_all() noexcept { 
#line 1372 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\xmemory"
{ 
#line 1373
this->_Orphan_all_locked_v3(); 
#line 1374
} 
#line 1376 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\xmemory"
} 
#line 1378
inline void _Container_base12::_Swap_proxy_and_iterators_unlocked(_Container_base12 &_Right) noexcept { 
#line 1379
_Container_proxy *_Temp = _Myproxy; 
#line 1380
(_Myproxy) = (_Right._Myproxy); 
#line 1381
(_Right._Myproxy) = _Temp; 
#line 1383
if (_Myproxy) { 
#line 1384
((_Myproxy)->_Mycont) = this; 
#line 1385
}  
#line 1387
if (_Right._Myproxy) { 
#line 1388
((_Right._Myproxy)->_Mycont) = (&_Right); 
#line 1389
}  
#line 1390
} 
#line 1392
inline void _Container_base12::_Swap_proxy_and_iterators(_Container_base12 &_Right) noexcept { 
#line 1399 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\xmemory"
{ 
#line 1400
this->_Swap_proxy_and_iterators_locked(_Right); 
#line 1401
} 
#line 1405 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\xmemory"
} 
#line 1411 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\xmemory"
using _Container_base = _Container_base12; 
#line 1412
using _Iterator_base = _Iterator_base12; 
#line 1415 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\xmemory"
struct _Leave_proxy_unbound { 
#line 1416
explicit _Leave_proxy_unbound() = default;
#line 1417
}; 
#line 1419
struct _Fake_proxy_ptr_impl { 
#line 1420
_Fake_proxy_ptr_impl(const _Fake_proxy_ptr_impl &) = delete;
#line 1421
_Fake_proxy_ptr_impl &operator=(const _Fake_proxy_ptr_impl &) = delete;
#line 1422
_Fake_proxy_ptr_impl(const _Fake_allocator &, _Leave_proxy_unbound) noexcept { } 
#line 1423
_Fake_proxy_ptr_impl(const _Fake_allocator &, const _Container_base0 &) noexcept { } 
#line 1425
void _Bind(const _Fake_allocator &, _Container_base0 *) noexcept { } 
#line 1426
void _Release() noexcept { } 
#line 1427
}; 
#line 1429
struct _Basic_container_proxy_ptr12 { 
#line 1431
_Container_proxy *_Ptr = (nullptr); 
#line 1433
constexpr void _Release() noexcept { 
#line 1434
(_Ptr) = (nullptr); 
#line 1435
} 
#line 1438
protected: _Basic_container_proxy_ptr12() = default;
#line 1439
_Basic_container_proxy_ptr12(const _Basic_container_proxy_ptr12 &) = delete;
#line 1440
_Basic_container_proxy_ptr12(_Basic_container_proxy_ptr12 &&) = delete;
#line 1441
}; 
#line 1443
template < class _Alloc >
struct _Container_proxy_ptr12 : _Basic_container_proxy_ptr12 {

    _Alloc & _Al;

    inline _Container_proxy_ptr12 ( _Alloc & _Al_, _Leave_proxy_unbound ) : _Al ( _Al_ ) {

        _Ptr = _Unfancy ( _Al_ . allocate ( 1 ) );
        _Construct_in_place ( * _Ptr );
    }

    inline _Container_proxy_ptr12 ( _Alloc & _Al_, _Container_base12 & _Mycont ) : _Al ( _Al_ ) {

        _Ptr = _Unfancy ( _Al_ . allocate ( 1 ) );
        _Construct_in_place ( * _Ptr, :: std :: addressof ( _Mycont ) );
        _Mycont . _Myproxy = _Ptr;
    }

    inline void _Bind ( _Alloc & _Old_alloc, _Container_base12 * _Mycont ) noexcept {


        _Ptr -> _Mycont = _Mycont;
        _Delete_plain_internal ( _Old_alloc, :: std :: exchange ( _Mycont -> _Myproxy, :: std :: exchange ( _Ptr, nullptr ) ) );
    }

    inline ~ _Container_proxy_ptr12 ( ) {
        if ( _Ptr ) {
            _Delete_plain_internal ( _Al, _Ptr );
        }
    }
};
#line 1482 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\xmemory"
template< class _Alloc> using _Container_proxy_ptr = _Container_proxy_ptr12< _Rebind_alloc_t< _Alloc, _Container_proxy> > ; 
#line 1486 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\xmemory"
struct _Zero_then_variadic_args_t { 
#line 1487
explicit _Zero_then_variadic_args_t() = default;
#line 1488
}; 
#line 1490
struct _One_then_variadic_args_t { 
#line 1491
explicit _One_then_variadic_args_t() = default;
#line 1492
}; 
#line 1494
template < class _Ty1, class _Ty2, bool = is_empty_v < _Ty1 > && ! is_final_v < _Ty1 > >
class _Compressed_pair : private _Ty1 {
public :
    _Ty2 _Myval2;

    using _Mybase = _Ty1;

    template < class ... _Other2 >
    constexpr explicit _Compressed_pair ( _Zero_then_variadic_args_t, _Other2 && ... _Val2 ) noexcept (
        conjunction_v < is_nothrow_default_constructible < _Ty1 >, is_nothrow_constructible < _Ty2, _Other2 ... >> )
        : _Ty1 ( ), _Myval2 ( :: std :: forward < _Other2 > ( _Val2 ) ... ) { }

    template < class _Other1, class ... _Other2 >
    constexpr _Compressed_pair ( _One_then_variadic_args_t, _Other1 && _Val1, _Other2 && ... _Val2 ) noexcept (
        conjunction_v < is_nothrow_constructible < _Ty1, _Other1 >, is_nothrow_constructible < _Ty2, _Other2 ... >> )
        : _Ty1 ( :: std :: forward < _Other1 > ( _Val1 ) ), _Myval2 ( :: std :: forward < _Other2 > ( _Val2 ) ... ) { }

    constexpr _Ty1 & _Get_first ( ) noexcept {
        return * this;
    }

    constexpr const _Ty1 & _Get_first ( ) const noexcept {
        return * this;
    }
};
#line 1520
template < class _Ty1, class _Ty2 >
class _Compressed_pair < _Ty1, _Ty2, false > {
public :
    _Ty1 _Myval1;
    _Ty2 _Myval2;

    template < class ... _Other2 >
    constexpr explicit _Compressed_pair ( _Zero_then_variadic_args_t, _Other2 && ... _Val2 ) noexcept (
        conjunction_v < is_nothrow_default_constructible < _Ty1 >, is_nothrow_constructible < _Ty2, _Other2 ... >> )
        : _Myval1 ( ), _Myval2 ( :: std :: forward < _Other2 > ( _Val2 ) ... ) { }

    template < class _Other1, class ... _Other2 >
    constexpr _Compressed_pair ( _One_then_variadic_args_t, _Other1 && _Val1, _Other2 && ... _Val2 ) noexcept (
        conjunction_v < is_nothrow_constructible < _Ty1, _Other1 >, is_nothrow_constructible < _Ty2, _Other2 ... >> )
        : _Myval1 ( :: std :: forward < _Other1 > ( _Val1 ) ), _Myval2 ( :: std :: forward < _Other2 > ( _Val2 ) ... ) { }

    constexpr _Ty1 & _Get_first ( ) noexcept {
        return _Myval1;
    }

    constexpr const _Ty1 & _Get_first ( ) const noexcept {
        return _Myval1;
    }
};
#line 1545
struct _Move_allocator_tag { 
#line 1546
explicit _Move_allocator_tag() = default;
#line 1547
}; 
#line 1549
template < class _Ty >
pair < _Ty *, ptrdiff_t > _Get_temporary_buffer ( ptrdiff_t _Count ) noexcept {
    if ( static_cast < size_t > ( _Count ) <= static_cast < size_t > ( - 1 ) / sizeof ( _Ty ) ) {
        for (; 0 < _Count; _Count /= 2 ) {
            const auto _Size = static_cast < size_t > ( _Count ) * sizeof ( _Ty );
            void * _Pbuf;





            {
                _Pbuf = :: operator new ( _Size, nothrow );
            }

            if ( _Pbuf ) {
                return { static_cast < _Ty * > ( _Pbuf ), _Count };
            }
        }
    }

    return { nullptr, 0 };
}
#line 1573
template < class _Ty >
void _Return_temporary_buffer ( _Ty * const _Pbuf ) noexcept {





    {
        :: operator delete ( _Pbuf );
    }
}
#line 1585
template < class _NoThrowFwdIt >
struct [ [ nodiscard ] ] _Uninitialized_backout {

    _NoThrowFwdIt _First;
    _NoThrowFwdIt _Last;

    constexpr explicit _Uninitialized_backout ( _NoThrowFwdIt _Dest ) : _First ( _Dest ), _Last ( _Dest ) { }

    constexpr _Uninitialized_backout ( _NoThrowFwdIt _First_, _NoThrowFwdIt _Last_ ) : _First ( _First_ ), _Last ( _Last_ ) { }

    _Uninitialized_backout ( const _Uninitialized_backout & ) = delete;
    _Uninitialized_backout & operator = ( const _Uninitialized_backout & ) = delete;

    inline ~ _Uninitialized_backout ( ) {
        _Destroy_range ( _First, _Last );
    }

    template < class ... _Types >
    inline void _Emplace_back ( _Types && ... _Vals ) {

        _Construct_in_place ( * _Last, :: std :: forward < _Types > ( _Vals ) ... );
        ++ _Last;
    }

    constexpr _NoThrowFwdIt _Release ( ) {
        _First = _Last;
        return _Last;
    }
};
#line 1615
template < class _InIt, class _NoThrowFwdIt >
inline _NoThrowFwdIt _Uninitialized_move_unchecked ( _InIt _First, const _InIt _Last, _NoThrowFwdIt _Dest ) {

    if constexpr ( _Iter_move_cat < _InIt, _NoThrowFwdIt > :: _Bitcopy_constructible ) {



        {
            return _Copy_memmove ( _First, _Last, _Dest );
        }
    }
    _Uninitialized_backout < _NoThrowFwdIt > _Backout { _Dest };
    for (; _First != _Last; ++ _First ) {
        _Backout . _Emplace_back ( :: std :: move ( * _First ) );
    }

    return _Backout . _Release ( );
}
#line 1771 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\xmemory"
template < class _Alloc >
class [ [ nodiscard ] ] _Uninitialized_backout_al {

private :
    using pointer = _Alloc_ptr_t < _Alloc >;

public :
    inline _Uninitialized_backout_al ( pointer _Dest, _Alloc & _Al_ ) : _First ( _Dest ), _Last ( _Dest ), _Al ( _Al_ ) { }

    _Uninitialized_backout_al ( const _Uninitialized_backout_al & ) = delete;
    _Uninitialized_backout_al & operator = ( const _Uninitialized_backout_al & ) = delete;

    inline ~ _Uninitialized_backout_al ( ) {
        _Destroy_range ( _First, _Last, _Al );
    }

    template < class ... _Types >
    inline void _Emplace_back ( _Types && ... _Vals ) {
        allocator_traits < _Alloc > :: construct ( _Al, _Unfancy ( _Last ), :: std :: forward < _Types > ( _Vals ) ... );
        ++ _Last;
    }

    constexpr pointer _Release ( ) {
        _First = _Last;
        return _Last;
    }

private :
    pointer _First;
    pointer _Last;
    _Alloc & _Al;
};
#line 1804
template < class _InIt, class _Se, class _Alloc >
inline _Alloc_ptr_t < _Alloc > _Uninitialized_copy (
    _InIt _First, _Se _Last, _Alloc_ptr_t < _Alloc > _Dest, _Alloc & _Al ) {


    using _Ptrval = typename _Alloc :: value_type *;







    auto _UFirst = _Get_unwrapped ( :: std :: move ( _First ) );
    auto _ULast = _Get_unwrapped ( :: std :: move ( _Last ) );


    constexpr bool _Can_memmove = _Sent_copy_cat < decltype ( _UFirst ), decltype ( _ULast ), _Ptrval > :: _Bitcopy_constructible
                               && _Uses_default_construct < _Alloc, _Ptrval, decltype ( * _UFirst ) > :: value;

    if constexpr ( _Can_memmove ) {



        {
            if constexpr ( is_same_v < decltype ( _UFirst ), decltype ( _ULast ) > ) {
                _Copy_memmove ( _To_address ( _UFirst ), _To_address ( _ULast ), _Unfancy ( _Dest ) );
                _Dest += _ULast - _UFirst;
            } else {
                const auto _Count = static_cast < size_t > ( _ULast - _UFirst );
                _Copy_memmove_n ( _To_address ( _UFirst ), _Count, _Unfancy ( _Dest ) );
                _Dest += _Count;
            }
            return _Dest;
        }
    }

    _Uninitialized_backout_al < _Alloc > _Backout { _Dest, _Al };
    for (; _UFirst != _ULast; ++ _UFirst ) {
        _Backout . _Emplace_back ( * _UFirst );
    }

    return _Backout . _Release ( );
}
#line 1849 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\xmemory"
template < class _InIt, class _Alloc >
inline _Alloc_ptr_t < _Alloc > _Uninitialized_copy_n (
    _InIt _First, size_t _Count, _Alloc_ptr_t < _Alloc > _Dest, _Alloc & _Al ) {


    using _Ptrval = typename _Alloc :: value_type *;

    auto _UFirst = _Get_unwrapped ( :: std :: move ( _First ) );

    constexpr bool _Can_memmove =
        conjunction_v < bool_constant < _Iter_copy_cat < decltype ( _UFirst ), _Ptrval > :: _Bitcopy_constructible >,
            _Uses_default_construct < _Alloc, _Ptrval, decltype ( * _UFirst ) >>;

    if constexpr ( _Can_memmove ) {



        {
            _Copy_memmove_n ( _UFirst, _Count, _Unfancy ( _Dest ) );
            _Dest += _Count;
            return _Dest;
        }
    }

    _Uninitialized_backout_al < _Alloc > _Backout { _Dest, _Al };
    for (; _Count != 0; ++ _UFirst, ( void ) -- _Count ) {
        _Backout . _Emplace_back ( * _UFirst );
    }

    return _Backout . _Release ( );
}
#line 1881 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\xmemory"
template < class _InIt, class _NoThrowFwdIt >
inline _NoThrowFwdIt _Uninitialized_copy_unchecked ( _InIt _First, const _InIt _Last, _NoThrowFwdIt _Dest ) {

    if constexpr ( _Iter_copy_cat < _InIt, _NoThrowFwdIt > :: _Bitcopy_constructible ) {



        {
            return _Copy_memmove ( _First, _Last, _Dest );
        }
    }

    _Uninitialized_backout < _NoThrowFwdIt > _Backout { _Dest };
    for (; _First != _Last; ++ _First ) {
        _Backout . _Emplace_back ( * _First );
    }

    return _Backout . _Release ( );
}
#line 1901 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\xmemory"
template < class _InIt, class _NoThrowFwdIt >
_NoThrowFwdIt uninitialized_copy ( const _InIt _First, const _InIt _Last, _NoThrowFwdIt _Dest ) {

    _Adl_verify_range ( _First, _Last );
    auto _UFirst = _Get_unwrapped ( _First );
    const auto _ULast = _Get_unwrapped ( _Last );
    auto _UDest = _Get_unwrapped_n ( _Dest, _Idl_distance < _InIt > ( _UFirst, _ULast ) );
    _Seek_wrapped ( _Dest, _Uninitialized_copy_unchecked ( _UFirst, _ULast, _UDest ) );
    return _Dest;
}
#line 1912
template < class _InIt, class _Alloc >
inline _Alloc_ptr_t < _Alloc > _Uninitialized_move (
    const _InIt _First, const _InIt _Last, _Alloc_ptr_t < _Alloc > _Dest, _Alloc & _Al ) {


    using _Ptrval = typename _Alloc :: value_type *;
    auto _UFirst = _Get_unwrapped ( _First );
    const auto _ULast = _Get_unwrapped ( _Last );
    if constexpr ( conjunction_v < bool_constant < _Iter_move_cat < decltype ( _UFirst ), _Ptrval > :: _Bitcopy_constructible >,
                      _Uses_default_construct < _Alloc, _Ptrval, decltype ( :: std :: move ( * _UFirst ) ) >> ) {



        {
            _Copy_memmove ( _UFirst, _ULast, _Unfancy ( _Dest ) );
            return _Dest + ( _ULast - _UFirst );
        }
    }

    _Uninitialized_backout_al < _Alloc > _Backout { _Dest, _Al };
    for (; _UFirst != _ULast; ++ _UFirst ) {
        _Backout . _Emplace_back ( :: std :: move ( * _UFirst ) );
    }

    return _Backout . _Release ( );
}
#line 1939 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\xmemory"
template < class _Alloc >
inline _Alloc_ptr_t < _Alloc > _Uninitialized_fill_n (
    _Alloc_ptr_t < _Alloc > _First, _Alloc_size_t < _Alloc > _Count, const typename _Alloc :: value_type & _Val, _Alloc & _Al ) {

    using _Ty = typename _Alloc :: value_type;
    if constexpr ( _Fill_memset_is_safe < _Ty *, _Ty > && _Uses_default_construct < _Alloc, _Ty *, _Ty > :: value ) {



        {
            _Fill_memset ( _Unfancy ( _First ), _Val, static_cast < size_t > ( _Count ) );
            return _First + _Count;
        }
    } else if constexpr ( _Fill_zero_memset_is_safe < _Ty *, _Ty > && _Uses_default_construct < _Alloc, _Ty *, _Ty > :: value ) {



        {
            if ( _Is_all_bits_zero ( _Val ) ) {
                _Fill_zero_memset ( _Unfancy ( _First ), static_cast < size_t > ( _Count ) );
                return _First + _Count;
            }
        }
    }

    _Uninitialized_backout_al < _Alloc > _Backout { _First, _Al };
    for (; 0 < _Count; -- _Count ) {
        _Backout . _Emplace_back ( _Val );
    }

    return _Backout . _Release ( );
}
#line 1972 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\xmemory"
template < class _NoThrowFwdIt, class _Tval >
void uninitialized_fill ( const _NoThrowFwdIt _First, const _NoThrowFwdIt _Last, const _Tval & _Val ) {

    _Adl_verify_range ( _First, _Last );
    auto _UFirst = _Get_unwrapped ( _First );
    const auto _ULast = _Get_unwrapped ( _Last );
    if constexpr ( _Fill_memset_is_safe < _Unwrapped_t < const _NoThrowFwdIt & >, _Tval > ) {
        _Fill_memset ( _UFirst, _Val, static_cast < size_t > ( _ULast - _UFirst ) );
    } else {
        if constexpr ( _Fill_zero_memset_is_safe < _Unwrapped_t < const _NoThrowFwdIt & >, _Tval > ) {
            if ( _Is_all_bits_zero ( _Val ) ) {
                _Fill_zero_memset ( _UFirst, static_cast < size_t > ( _ULast - _UFirst ) );
                return;
            }
        }

        _Uninitialized_backout < _Unwrapped_t < const _NoThrowFwdIt & >> _Backout { _UFirst };
        while ( _Backout . _Last != _ULast ) {
            _Backout . _Emplace_back ( _Val );
        }

        _Backout . _Release ( );
    }
}
#line 1997
template< class _NoThrowFwdIt> constexpr bool 
#line 1998
_Use_memset_value_construct_v = conjunction_v< bool_constant< _Iterator_is_contiguous< _NoThrowFwdIt> > , is_scalar< _Iter_value_t< _NoThrowFwdIt> > , negation< is_volatile< remove_reference_t< _Iter_ref_t< _NoThrowFwdIt> > > > , negation< is_member_pointer< _Iter_value_t< _NoThrowFwdIt> > > > ; 
#line 2003
template < class _Ptr >
_Ptr _Zero_range ( const _Ptr _First, const _Ptr _Last ) {
    char * const _First_ch = reinterpret_cast < char * > ( _To_address ( _First ) );
    char * const _Last_ch = reinterpret_cast < char * > ( _To_address ( _Last ) );
    :: memset ( _First_ch, 0, static_cast < size_t > ( _Last_ch - _First_ch ) );
    return _Last;
}
#line 2011
template < class _Alloc >
inline _Alloc_ptr_t < _Alloc > _Uninitialized_value_construct_n (
    _Alloc_ptr_t < _Alloc > _First, _Alloc_size_t < _Alloc > _Count, _Alloc & _Al ) {

    using _Ptrty = typename _Alloc :: value_type *;
    if constexpr ( _Use_memset_value_construct_v < _Ptrty > && _Uses_default_construct < _Alloc, _Ptrty > :: value ) {



        {
            auto _PFirst = _Unfancy ( _First );
            _Zero_range ( _PFirst, _PFirst + _Count );
            return _First + _Count;
        }
    }

    _Uninitialized_backout_al < _Alloc > _Backout { _First, _Al };
    for (; 0 < _Count; -- _Count ) {
        _Backout . _Emplace_back ( );
    }

    return _Backout . _Release ( );
}
#line 2035 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\xmemory"
template < class _NoThrowFwdIt, class _Diff >
_NoThrowFwdIt _Uninitialized_value_construct_n_unchecked1 ( _NoThrowFwdIt _UFirst, _Diff _Count ) {

    ;
    if constexpr ( _Use_memset_value_construct_v < _NoThrowFwdIt > ) {
        return _Zero_range ( _UFirst, _UFirst + _Count );
    } else {
        _Uninitialized_backout < _NoThrowFwdIt > _Backout { _UFirst };
        for (; 0 < _Count; -- _Count ) {
            _Backout . _Emplace_back ( );
        }

        return _Backout . _Release ( );
    }
}
#line 2052
template < class _Ty >
 [ [ nodiscard ] ] pair < _Ty *, ptrdiff_t > get_temporary_buffer ( ptrdiff_t _Count ) noexcept {
    return _Get_temporary_buffer < _Ty > ( _Count );
}
#line 2057
template < class _Ty >
 void return_temporary_buffer ( _Ty * _Pbuf ) {
    _Return_temporary_buffer ( _Pbuf );
}
#line 2064 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\xmemory"
template< class _Key, class ..._Args> 
#line 2065
struct _In_place_key_extract_set { 
#line 2067
static constexpr bool _Extractable = false; 
#line 2068
}; 
#line 2070
template < class _Key >
struct _In_place_key_extract_set < _Key, _Key > {

    static constexpr bool _Extractable = true;
    static const _Key & _Extract ( const _Key & _Val ) noexcept {
        return _Val;
    }
};
#line 2080
template< class _Key, class ..._Args> 
#line 2081
struct _In_place_key_extract_map { 
#line 2083
static constexpr bool _Extractable = false; 
#line 2084
}; 
#line 2086
template < class _Key, class _Second >
struct _In_place_key_extract_map < _Key, _Key, _Second > {

    static constexpr bool _Extractable = true;
    static const _Key & _Extract ( const _Key & _Val, const _Second & ) noexcept {
        return _Val;
    }
};
#line 2095
template < class _Key, class _First, class _Second >
struct _In_place_key_extract_map < _Key, pair < _First, _Second > > {

    static constexpr bool _Extractable = is_same_v < _Key, _Remove_cvref_t < _First >>;
    static const _Key & _Extract ( const pair < _First, _Second > & _Val ) {
        return _Val . first;
    }
};
#line 2104
#pragma warning(push)
#pragma warning(disable : 4624)
template< class _Ty> 
#line 2107
struct _Wrap { 
#line 2108
_Ty _Value; 
#line 2109
}; 
#pragma warning(pop)
#line 2112
template < class _Alloc >
struct _Alloc_temporary2 {
    using value_type = typename _Alloc :: value_type;
    using _Traits = allocator_traits < _Alloc >;

    _Alloc & _Al;














    union {
        value_type _Value;
    };

    [ [ nodiscard ] ] inline value_type & _Get_value ( ) noexcept {
        return _Value;
    }

    [ [ nodiscard ] ] inline const value_type & _Get_value ( ) const noexcept {
        return _Value;
    }


    template < class ... _Args >
    inline explicit _Alloc_temporary2 ( _Alloc & _Al_, _Args && ... _Vals ) noexcept (
        noexcept ( _Traits :: construct ( _Al_, :: std :: addressof ( _Get_value ( ) ), :: std :: forward < _Args > ( _Vals ) ... ) ) )
        : _Al ( _Al_ ) {
        _Traits :: construct ( _Al, :: std :: addressof ( _Get_value ( ) ), :: std :: forward < _Args > ( _Vals ) ... );
    }

    _Alloc_temporary2 ( const _Alloc_temporary2 & ) = delete;
    _Alloc_temporary2 & operator = ( const _Alloc_temporary2 & ) = delete;

    inline ~ _Alloc_temporary2 ( ) {
        _Traits :: destroy ( _Al, :: std :: addressof ( _Get_value ( ) ) );
    }
};
#line 2160 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\xmemory"
template < class _Alloc >
[ [ nodiscard ] ] constexpr bool _Allocators_equal ( const _Alloc & _Lhs, const _Alloc & _Rhs ) noexcept {
    if constexpr ( allocator_traits < _Alloc > :: is_always_equal :: value ) {
        return true;
    } else {
        return _Lhs == _Rhs;
    }
}
#line 2169
template < class _FwdIt, class _Ty >
[ [ nodiscard ( "The \'remove\' and \'remove_if\' algorithms return the iterator past the last element that should be kept. You need to call cont" "ainer.erase(result, container.end()) afterwards. In C++20, \'std::erase\' and \'std::erase_if\' are simpler replacements for the" "se two steps." ) ] ] inline _FwdIt remove ( _FwdIt _First, const _FwdIt _Last, const _Ty & _Val ) {

    _Adl_verify_range ( _First, _Last );
    auto _UFirst = _Get_unwrapped ( _First );
    const auto _ULast = _Get_unwrapped ( _Last );
    _UFirst = :: std :: _Find_unchecked ( _UFirst, _ULast, _Val );
    auto _UNext = _UFirst;
    if ( _UFirst != _ULast ) {
        while ( ++ _UFirst != _ULast ) {
            if ( ! ( * _UFirst == _Val ) ) {
                * _UNext = :: std :: move ( * _UFirst );
                ++ _UNext;
            }
        }
    }

    _Seek_wrapped ( _First, _UNext );
    return _First;
}
#line 2190
template < class _FwdIt, class _Pr >
[ [ nodiscard ( "The \'remove\' and \'remove_if\' algorithms return the iterator past the last element that should be kept. You need to call cont" "ainer.erase(result, container.end()) afterwards. In C++20, \'std::erase\' and \'std::erase_if\' are simpler replacements for the" "se two steps." ) ] ] inline _FwdIt remove_if ( _FwdIt _First, const _FwdIt _Last, _Pr _Pred ) {

    _Adl_verify_range ( _First, _Last );
    auto _UFirst = _Get_unwrapped ( _First );
    const auto _ULast = _Get_unwrapped ( _Last );
    _UFirst = :: std :: find_if ( _UFirst, _ULast, _Pass_fn ( _Pred ) );
    auto _UNext = _UFirst;
    if ( _UFirst != _ULast ) {
        while ( ++ _UFirst != _ULast ) {
            if ( ! _Pred ( * _UFirst ) ) {
                * _UNext = :: std :: move ( * _UFirst );
                ++ _UNext;
            }
        }
    }

    _Seek_wrapped ( _First, _UNext );
    return _First;
}
#line 2211
template < class _Container, class _Uty >
inline typename _Container :: size_type _Erase_remove ( _Container & _Cont, const _Uty & _Val ) {

    auto _First = _Cont . begin ( );
    const auto _Last = _Cont . end ( );
    const auto _Old_size = _Cont . size ( );
    _Seek_wrapped ( _First, :: std :: remove ( _Get_unwrapped ( _First ), _Get_unwrapped ( _Last ), _Val ) );
    _Cont . erase ( _First, _Last );
    return _Old_size - _Cont . size ( );
}
#line 2222
template < class _Container, class _Pr >
inline typename _Container :: size_type _Erase_remove_if ( _Container & _Cont, _Pr _Pred ) {

    auto _First = _Cont . begin ( );
    const auto _Last = _Cont . end ( );
    const auto _Old_size = _Cont . size ( );
    _Seek_wrapped ( _First, :: std :: remove_if ( _Get_unwrapped ( _First ), _Get_unwrapped ( _Last ), _Pred ) );
    _Cont . erase ( _First, _Last );
    return _Old_size - _Cont . size ( );
}
#line 2233
template < class _Container, class _Pr >
typename _Container :: size_type _Erase_nodes_if ( _Container & _Cont, _Pr _Pred ) {

    auto _First = _Cont . begin ( );
    const auto _Last = _Cont . end ( );
    const auto _Old_size = _Cont . size ( );
    while ( _First != _Last ) {
        if ( _Pred ( * _First ) ) {
            _First = _Cont . erase ( _First );
        } else {
            ++ _First;
        }
    }
    return _Old_size - _Cont . size ( );
}
#line 2249
template< class _Ty1, class _Ty2> void _Deduce_as_pair(const pair< _Ty1, _Ty2>  &); 
#line 2252
template< class _Ty, class  = void> constexpr bool 
#line 2253
_Is_deducible_as_pair = false; 
#line 2255
template< class _Ty> constexpr bool 
#line 2256
_Is_deducible_as_pair< _Ty, decltype(std::_Deduce_as_pair(std::declval< _Ty> ()))>  = true; 
#line 2258
template< class _Ty> constexpr bool 
#line 2259
_Is_cv_pair = _Is_specialization_v< remove_cv_t< _Ty> , pair> ; 
#line 2261
template< class _Ty> const _Ty &_Normally_bind(_Identity_t< const _Ty &> ); 
#line 2264
template< class _Ty> _Ty &&_Normally_bind(_Identity_t< _Ty &&> ); 
#line 2267
template< class _Ty, class _Uty> using _Normally_bound_ref = decltype(std::_Normally_bind< _Ty> (std::declval< _Uty> ())); 
#line 2270
template< class _Ty, class _Uty, class  = void> constexpr bool 
#line 2271
_Is_normally_bindable = false; 
#line 2273
template< class _Ty, class _Uty> constexpr bool 
#line 2274
_Is_normally_bindable< _Ty, _Uty, void_t< _Normally_bound_ref< _Ty, _Uty> > >  = true; 
#line 2502 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\xmemory"
template < class _Ty,
    bool = is_empty_v < _Ty > && ! is_final_v < _Ty > >
class _Ebco_base : private _Ty {
private :
    using _Mybase = _Ty;

protected :
    template < class _Other, enable_if_t < ! is_same_v < _Remove_cvref_t < _Other >, _Ebco_base >, int > = 0 >
    constexpr explicit _Ebco_base ( _Other && _Val ) noexcept ( is_nothrow_constructible_v < _Ty, _Other > )
        : _Ty ( :: std :: forward < _Other > ( _Val ) ) { }

    constexpr _Ty & _Get_val ( ) noexcept {
        return * this;
    }

    constexpr const _Ty & _Get_val ( ) const noexcept {
        return * this;
    }
};
#line 2522
template < class _Ty >
class _Ebco_base < _Ty, false > {
private :
    _Ty _Myval;

protected :
    template < class _Other, enable_if_t < ! is_same_v < _Remove_cvref_t < _Other >, _Ebco_base >, int > = 0 >
    constexpr explicit _Ebco_base ( _Other && _Val ) noexcept ( is_nothrow_constructible_v < _Ty, _Other > )
        : _Myval ( :: std :: forward < _Other > ( _Val ) ) { }

    constexpr _Ty & _Get_val ( ) noexcept {
        return _Myval;
    }

    constexpr const _Ty & _Get_val ( ) const noexcept {
        return _Myval;
    }
};
#line 2541
inline void *align(size_t _Bound, size_t _Size, void *&_Ptr, size_t &_Space) noexcept { 
#line 2543
size_t _Off = static_cast< size_t>((reinterpret_cast< uintptr_t>(_Ptr)) & (_Bound - (1))); 
#line 2544
if (_Off != (0)) { 
#line 2545
_Off = (_Bound - _Off); 
#line 2546
}  
#line 2548
if ((_Space < _Off) || ((_Space - _Off) < _Size)) { 
#line 2549
return nullptr; 
#line 2550
}  
#line 2553
_Ptr = ((static_cast< char *>(_Ptr)) + _Off); 
#line 2554
_Space -= _Off; 
#line 2555
return _Ptr; 
#line 2556
} 
#line 2557
}
#line 2561
#pragma warning(pop)
#pragma pack ( pop )
#line 12 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\__msvc_sanitizer_annotate_container.hpp"
#pragma pack ( push, 8 )
#pragma warning(push, 3)
#pragma warning(disable : 4180 4412 4455 4494 4514 4574 4582 4583 4587 4588 4619 4623 4625 4626 4643 4648 4702 4793 4820 4988 5026 5027 5045 6294 4984 5053 )
#line 59 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\__msvc_sanitizer_annotate_container.hpp"
#pragma detect_mismatch("annotate_string", "0")
#line 62 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\__msvc_sanitizer_annotate_container.hpp"
#pragma detect_mismatch("annotate_vector", "0")
#line 77 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\__msvc_sanitizer_annotate_container.hpp"
extern "C" {
#line 85
}
#line 131 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\__msvc_sanitizer_annotate_container.hpp"
#pragma warning(pop)
#pragma pack ( pop )
#line 22 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\xstring"
#pragma pack ( push, 8 )
#pragma warning(push, 3)
#pragma warning(disable : 4180 4412 4455 4494 4514 4574 4582 4583 4587 4588 4619 4623 4625 4626 4643 4648 4702 4793 4820 4988 5026 5027 5045 6294 4984 5053 )
#line 35 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\xstring"
namespace std { 
#line 36
template < class _Elem, class _Int_type >
struct _Char_traits {
    using char_type = _Elem;
    using int_type = _Int_type;
    using pos_type = streampos;
    using off_type = streamoff;
    using state_type = _Mbstatet;






    static inline _Elem * copy ( _Elem * const _First1,
          const _Elem * const _First2, const size_t _Count ) noexcept {















        :: memcpy ( _First1, _First2, _Count * sizeof ( _Elem ) );


        return _First1;
    }

      static inline _Elem * _Copy_s (
                                                                                 _Elem * const _First1,
        const size_t _Dest_size, const _Elem * const _First2, const size_t _Count ) noexcept {

        do { if ( _Count <= _Dest_size ) { } else { do { ( void ) ( ( 1 != _CrtDbgReport ( 2, "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\xstring", 76, 0, "%s", "invalid argument" ) ) || ( __debugbreak ( ), 0 ) ); :: _invalid_parameter ( L"\x22\x69\x6e\x76\x61\x6c\x69\x64\x20\x61\x72\x67\x75\x6d\x65\x6e\x74\x22", L"", L"\x45\x3a\x5c\x56\x69\x73\x75\x61\x6c\x53\x74\x75\x64\x69\x6f\x5c\x32\x30\x32\x32\x5c\x50\x72\x65\x76\x69\x65\x77\x5c\x56\x43\x5c" L"\x54\x6f\x6f\x6c\x73\x5c\x4d\x53\x56\x43\x5c\x31\x34\x2e\x33\x37\x2e\x33\x32\x37\x30\x35\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x78" L"\x73\x74\x72\x69\x6e\x67", 76, 0 ); } while ( false ); }; } while ( false );
        return copy ( _First1, _First2, _Count );
    }

    static inline _Elem * move ( _Elem * const _First1,
          const _Elem * const _First2, const size_t _Count ) noexcept {





































        :: memmove ( _First1, _First2, _Count * sizeof ( _Elem ) );


        return _First1;
    }




    [ [ nodiscard ] ] static inline int compare ( const _Elem * _First1,
          const _Elem * _First2, size_t _Count ) noexcept {

        for (; 0 < _Count; -- _Count, ++ _First1, ++ _First2 ) {
            if ( * _First1 != * _First2 ) {
                return * _First1 < * _First2 ? - 1 : + 1;
            }
        }

        return 0;
    }

    [ [ nodiscard ] ] static inline size_t length ( const _Elem * _First ) noexcept {

        size_t _Count = 0;
        while ( * _First != _Elem ( ) ) {
            ++ _Count;
            ++ _First;
        }

        return _Count;
    }

    [ [ nodiscard ] ] static inline const _Elem * find (
          const _Elem * _First, size_t _Count, const _Elem & _Ch ) noexcept {

        for (; 0 < _Count; -- _Count, ++ _First ) {
            if ( * _First == _Ch ) {
                return _First;
            }
        }

        return nullptr;
    }

    static inline _Elem * assign (
          _Elem * const _First, size_t _Count, const _Elem _Ch ) noexcept {








        {
            for ( _Elem * _Next = _First; _Count > 0; -- _Count, ++ _Next ) {
                * _Next = _Ch;
            }
        }

        return _First;
    }

    static inline void assign ( _Elem & _Left, const _Elem & _Right ) noexcept {





        {
            _Left = _Right;
        }
    }

    [ [ nodiscard ] ] static constexpr bool eq ( const _Elem & _Left, const _Elem & _Right ) noexcept {
        return _Left == _Right;
    }

    [ [ nodiscard ] ] static constexpr bool lt ( const _Elem & _Left, const _Elem & _Right ) noexcept {
        return _Left < _Right;
    }

    [ [ nodiscard ] ] static constexpr _Elem to_char_type ( const int_type & _Meta ) noexcept {
        return static_cast < _Elem > ( _Meta );
    }

    [ [ nodiscard ] ] static constexpr int_type to_int_type ( const _Elem & _Ch ) noexcept {
        return static_cast < int_type > ( _Ch );
    }

    [ [ nodiscard ] ] static constexpr bool eq_int_type ( const int_type & _Left, const int_type & _Right ) noexcept {
        return _Left == _Right;
    }

    [ [ nodiscard ] ] static constexpr int_type not_eof ( const int_type & _Meta ) noexcept {
        return _Meta != eof ( ) ? _Meta : ! eof ( );
    }

    [ [ nodiscard ] ] static constexpr int_type eof ( ) noexcept {
        return static_cast < int_type > ( ( - 1 ) );
    }
};
#line 222 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\xstring"
template < class _Elem >
struct _WChar_traits : private _Char_traits < _Elem, unsigned short > {

private :
    using _Primary_char_traits = _Char_traits < _Elem, unsigned short >;

public :
    using char_type = _Elem;
    using int_type = unsigned short;
    using pos_type = streampos;
    using off_type = streamoff;
    using state_type = mbstate_t;




    using _Primary_char_traits :: _Copy_s;
    using _Primary_char_traits :: copy;
    using _Primary_char_traits :: move;

    [ [ nodiscard ] ] static inline int compare ( const _Elem * const _First1,
          const _Elem * const _First2, const size_t _Count ) noexcept {








        return :: wmemcmp (
            reinterpret_cast < const wchar_t * > ( _First1 ), reinterpret_cast < const wchar_t * > ( _First2 ), _Count );

    }

    [ [ nodiscard ] ] static inline size_t length ( const _Elem * _First ) noexcept {








        return :: wcslen ( reinterpret_cast < const wchar_t * > ( _First ) );

    }

    [ [ nodiscard ] ] static inline const _Elem * find (
          const _Elem * _First, const size_t _Count, const _Elem & _Ch ) noexcept {








        return reinterpret_cast < const _Elem * > ( :: wmemchr ( reinterpret_cast < const wchar_t * > ( _First ), _Ch, _Count ) );

    }

    static inline _Elem * assign (
          _Elem * const _First, size_t _Count, const _Elem _Ch ) noexcept {







        return reinterpret_cast < _Elem * > ( :: wmemset ( reinterpret_cast < wchar_t * > ( _First ), _Ch, _Count ) );
    }

    static inline void assign ( _Elem & _Left, const _Elem & _Right ) noexcept {





        _Left = _Right;
    }

    [ [ nodiscard ] ] static constexpr bool eq ( const _Elem & _Left, const _Elem & _Right ) noexcept {
        return _Left == _Right;
    }

    [ [ nodiscard ] ] static constexpr bool lt ( const _Elem & _Left, const _Elem & _Right ) noexcept {
        return _Left < _Right;
    }

    [ [ nodiscard ] ] static constexpr _Elem to_char_type ( const int_type & _Meta ) noexcept {
        return _Meta;
    }

    [ [ nodiscard ] ] static constexpr int_type to_int_type ( const _Elem & _Ch ) noexcept {
        return _Ch;
    }

    [ [ nodiscard ] ] static constexpr bool eq_int_type ( const int_type & _Left, const int_type & _Right ) noexcept {
        return _Left == _Right;
    }

    [ [ nodiscard ] ] static constexpr int_type not_eof ( const int_type & _Meta ) noexcept {
        return _Meta != eof ( ) ? _Meta : static_cast < int_type > ( ! eof ( ) );
    }

    [ [ nodiscard ] ] static constexpr int_type eof ( ) noexcept {
        return ( ( wint_t ) ( 65535 ) );
    }
};
#line 334 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\xstring"
template< class _Elem> 
#line 335
struct char_traits : public _Char_traits< _Elem, long>  { }; 
#line 338
template<> struct char_traits< char16_t>  : public _WChar_traits< char16_t>  { }; 
#line 341
template<> struct char_traits< char32_t>  : public _Char_traits< char32_t, unsigned>  { }; 
#line 344
template<> struct char_traits< __wchar_t>  : public _WChar_traits< __wchar_t>  { }; 
#line 357 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\xstring"
template < class _Elem, class _Int_type >
struct _Narrow_char_traits : private _Char_traits < _Elem, _Int_type > {

private :
    using _Primary_char_traits = _Char_traits < _Elem, _Int_type >;

public :
    using char_type = _Elem;
    using int_type = _Int_type;
    using pos_type = streampos;
    using off_type = streamoff;
    using state_type = mbstate_t;




    using _Primary_char_traits :: _Copy_s;
    using _Primary_char_traits :: copy;
    using _Primary_char_traits :: move;

    [ [ nodiscard ] ] static inline int compare ( const _Elem * const _First1,
          const _Elem * const _First2, const size_t _Count ) noexcept {




        return :: memcmp ( _First1, _First2, _Count );

    }

    [ [ nodiscard ] ] static inline size_t length ( const _Elem * const _First ) noexcept {















        return :: strlen ( reinterpret_cast < const char * > ( _First ) );

    }

    [ [ nodiscard ] ] static inline const _Elem * find ( const _Elem * const _First, const size_t _Count,
        const _Elem & _Ch ) noexcept {















        return static_cast < const _Elem * > ( :: memchr ( _First, _Ch, _Count ) );

    }

    static inline _Elem * assign (
          _Elem * const _First, size_t _Count, const _Elem _Ch ) noexcept {







        return static_cast < _Elem * > ( :: memset ( _First, _Ch, _Count ) );
    }

    static inline void assign ( _Elem & _Left, const _Elem & _Right ) noexcept {





        _Left = _Right;
    }

    [ [ nodiscard ] ] static constexpr bool eq ( const _Elem & _Left, const _Elem & _Right ) noexcept {
        return _Left == _Right;
    }

    [ [ nodiscard ] ] static constexpr bool lt ( const _Elem & _Left, const _Elem & _Right ) noexcept {
        return static_cast < unsigned char > ( _Left ) < static_cast < unsigned char > ( _Right );
    }

    [ [ nodiscard ] ] static constexpr _Elem to_char_type ( const int_type & _Meta ) noexcept {
        return static_cast < _Elem > ( _Meta );
    }

    [ [ nodiscard ] ] static constexpr int_type to_int_type ( const _Elem & _Ch ) noexcept {
        return static_cast < unsigned char > ( _Ch );
    }

    [ [ nodiscard ] ] static constexpr bool eq_int_type ( const int_type & _Left, const int_type & _Right ) noexcept {
        return _Left == _Right;
    }

    [ [ nodiscard ] ] static constexpr int_type not_eof ( const int_type & _Meta ) noexcept {
        return _Meta != eof ( ) ? _Meta : ! eof ( );
    }

    [ [ nodiscard ] ] static constexpr int_type eof ( ) noexcept {
        return static_cast < int_type > ( ( - 1 ) );
    }
};
#line 482 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\xstring"
template<> struct char_traits< char>  : public _Narrow_char_traits< char, int>  { }; 
#line 489
template < class _Elem, class _Traits, class _SizeT >
basic_ostream < _Elem, _Traits > & _Insert_string (
    basic_ostream < _Elem, _Traits > & _Ostr, const _Elem * const _Data, const _SizeT _Size ) {

    using _Ostr_t = basic_ostream < _Elem, _Traits >;
    typename _Ostr_t :: iostate _State = _Ostr_t :: goodbit;

    _SizeT _Pad;
    if ( _Ostr . width ( ) <= 0 || static_cast < _SizeT > ( _Ostr . width ( ) ) <= _Size ) {
        _Pad = 0;
    } else {
        _Pad = static_cast < _SizeT > ( _Ostr . width ( ) ) - _Size;
    }

    const typename _Ostr_t :: sentry _Ok ( _Ostr );

    if ( ! _Ok ) {
        _State |= _Ostr_t :: badbit;
    } else {
        try {
        if ( ( _Ostr . flags ( ) & _Ostr_t :: adjustfield ) != _Ostr_t :: left ) {
            for (; 0 < _Pad; -- _Pad ) {
                if ( _Traits :: eq_int_type ( _Traits :: eof ( ), _Ostr . rdbuf ( ) -> sputc ( _Ostr . fill ( ) ) ) ) {
                    _State |= _Ostr_t :: badbit;
                    break;
                }
            }
        }

        if ( _State == _Ostr_t :: goodbit
            && _Ostr . rdbuf ( ) -> sputn ( _Data, static_cast < streamsize > ( _Size ) ) != static_cast < streamsize > ( _Size ) ) {
            _State |= _Ostr_t :: badbit;
        } else {
            for (; 0 < _Pad; -- _Pad ) {
                if ( _Traits :: eq_int_type ( _Traits :: eof ( ), _Ostr . rdbuf ( ) -> sputc ( _Ostr . fill ( ) ) ) ) {
                    _State |= _Ostr_t :: badbit;
                    break;
                }
            }
        }

        _Ostr . width ( 0 );
        } catch ( ... ) { ( _Ostr ) . setstate ( _Ostr_t :: badbit, true ); }
    }

    _Ostr . setstate ( _State );
    return _Ostr;
}
#line 538
template < class _Traits >
struct _Char_traits_eq {
    using _Elem = typename _Traits :: char_type;

    bool operator ( ) ( _Elem _Left, _Elem _Right ) const noexcept {
        return _Traits :: eq ( _Left, _Right );
    }
};
#line 547
template < class _Traits >
struct _Char_traits_lt {
    using _Elem = typename _Traits :: char_type;

    bool operator ( ) ( _Elem _Left, _Elem _Right ) const noexcept {
        return _Traits :: lt ( _Left, _Right );
    }
};
#line 558
template< class _Elem> constexpr bool 
#line 559
_Can_memcmp_elements_with_pred< _Elem, _Elem, _Char_traits_eq< char_traits< _Elem> > >  = _Can_memcmp_elements< _Elem, _Elem, ((sizeof(_Elem) == sizeof(_Elem)) && is_integral_v< _Elem> ) && is_integral_v< _Elem> > ; 
#line 564
template< class _Elem> 
#line 565
struct _Lex_compare_memcmp_classify_pred< _Elem, _Elem, _Char_traits_lt< char_traits< _Elem> > >  { 
#line 566
using _UElem = make_unsigned_t< _Elem> ; 
#line 567
using _Pred = conditional_t< _Lex_compare_memcmp_classify_elements< _UElem, _UElem> , less< int> , void> ; 
#line 568
}; 
#line 570
template< class _Traits> using _Traits_ch_t = typename _Traits::char_type; 
#line 573
template< class _Traits> using _Traits_ptr_t = const typename _Traits::char_type *; 
#line 576
template < class _Traits >
constexpr bool _Traits_equal ( const _Traits_ptr_t < _Traits > _Left, const size_t _Left_size,
      const _Traits_ptr_t < _Traits > _Right, const size_t _Right_size ) noexcept {

    return _Left_size == _Right_size && _Traits :: compare ( _Left, _Right, _Left_size ) == 0;
}
#line 583
template < class _Traits >
constexpr int _Traits_compare ( const _Traits_ptr_t < _Traits > _Left, const size_t _Left_size,
      const _Traits_ptr_t < _Traits > _Right, const size_t _Right_size ) noexcept {

    const int _Ans = _Traits :: compare ( _Left, _Right, ( :: std :: min ) ( _Left_size, _Right_size ) );

    if ( _Ans != 0 ) {
        return _Ans;
    }

    if ( _Left_size < _Right_size ) {
        return - 1;
    }

    if ( _Left_size > _Right_size ) {
        return 1;
    }

    return 0;
}
#line 604
template < class _Traits >
constexpr size_t _Traits_find ( const _Traits_ptr_t < _Traits > _Haystack, const size_t _Hay_size,
    const size_t _Start_at, const _Traits_ptr_t < _Traits > _Needle,
    const size_t _Needle_size ) noexcept {

    if ( _Needle_size > _Hay_size || _Start_at > _Hay_size - _Needle_size ) {








        return static_cast < size_t > ( - 1 );
    }

    if ( _Needle_size == 0 ) {
        return _Start_at;
    }

    const auto _Possible_matches_end = _Haystack + ( _Hay_size - _Needle_size ) + 1;
    for ( auto _Match_try = _Haystack + _Start_at;; ++ _Match_try ) {
        _Match_try = _Traits :: find ( _Match_try, static_cast < size_t > ( _Possible_matches_end - _Match_try ), * _Needle );
        if ( ! _Match_try ) {
            return static_cast < size_t > ( - 1 );
        }

        if ( _Traits :: compare ( _Match_try, _Needle, _Needle_size ) == 0 ) {
            return static_cast < size_t > ( _Match_try - _Haystack );
        }
    }
}
#line 638
template < class _Traits >
constexpr size_t _Traits_find_ch ( const _Traits_ptr_t < _Traits > _Haystack, const size_t _Hay_size,
    const size_t _Start_at, const _Traits_ch_t < _Traits > _Ch ) noexcept {

    if ( _Start_at < _Hay_size ) {
        const auto _Found_at = _Traits :: find ( _Haystack + _Start_at, _Hay_size - _Start_at, _Ch );
        if ( _Found_at ) {
            return static_cast < size_t > ( _Found_at - _Haystack );
        }
    }

    return static_cast < size_t > ( - 1 );
}
#line 652
template < class _Traits >
constexpr size_t _Traits_rfind ( const _Traits_ptr_t < _Traits > _Haystack, const size_t _Hay_size,
    const size_t _Start_at, const _Traits_ptr_t < _Traits > _Needle,
    const size_t _Needle_size ) noexcept {

    if ( _Needle_size == 0 ) {
        return ( :: std :: min ) ( _Start_at, _Hay_size );
    }

    if ( _Needle_size <= _Hay_size ) {
        for ( auto _Match_try = _Haystack + ( :: std :: min ) ( _Start_at, _Hay_size - _Needle_size );; -- _Match_try ) {
            if ( _Traits :: eq ( * _Match_try, * _Needle ) && _Traits :: compare ( _Match_try, _Needle, _Needle_size ) == 0 ) {
                return static_cast < size_t > ( _Match_try - _Haystack );
            }

            if ( _Match_try == _Haystack ) {
                break;
            }
        }
    }

    return static_cast < size_t > ( - 1 );
}
#line 676
template < class _Traits >
constexpr size_t _Traits_rfind_ch ( const _Traits_ptr_t < _Traits > _Haystack, const size_t _Hay_size,
    const size_t _Start_at, const _Traits_ch_t < _Traits > _Ch ) noexcept {

    if ( _Hay_size != 0 ) {
        for ( auto _Match_try = _Haystack + ( :: std :: min ) ( _Start_at, _Hay_size - 1 );; -- _Match_try ) {
            if ( _Traits :: eq ( * _Match_try, _Ch ) ) {
                return static_cast < size_t > ( _Match_try - _Haystack );
            }

            if ( _Match_try == _Haystack ) {
                break;
            }
        }
    }

    return static_cast < size_t > ( - 1 );
}
#line 695
template < class _Elem, bool = _Is_character < _Elem > :: value >
class _String_bitmap {
public :
    constexpr bool _Mark ( const _Elem * _First, const _Elem * const _Last ) noexcept {


        for (; _First != _Last; ++ _First ) {
            _Matches [ static_cast < unsigned char > ( * _First ) ] = true;
        }

        return true;
    }

    constexpr bool _Match ( const _Elem _Ch ) const noexcept {
        return _Matches [ static_cast < unsigned char > ( _Ch ) ];
    }

private :
    bool _Matches [ 256 ] = { };
};
#line 716
template < class _Elem >
class _String_bitmap < _Elem, false > {
public :
    static_assert ( is_unsigned_v < _Elem >,
        "Standard char_traits is only provided for char, wchar_t, char16_t, and char32_t. See N5687 [char.traits]. Visual C++ accepts oth" "er unsigned integral types as an extension."
                                                                           );

    constexpr bool _Mark ( const _Elem * _First, const _Elem * const _Last ) noexcept {


        for (; _First != _Last; ++ _First ) {
            const auto _Ch = * _First;
            if ( _Ch >= 256U ) {
                return false;
            }

            _Matches [ static_cast < unsigned char > ( _Ch ) ] = true;
        }

        return true;
    }

    constexpr bool _Match ( const _Elem _Ch ) const noexcept {
        return _Ch < 256U && _Matches [ _Ch ];
    }

private :
    bool _Matches [ 256 ] = { };
};
#line 746
template < class _Traits, bool _Special = _Is_specialization_v < _Traits, char_traits > >
constexpr size_t _Traits_find_first_of ( const _Traits_ptr_t < _Traits > _Haystack,
    const size_t _Hay_size, const size_t _Start_at, const _Traits_ptr_t < _Traits > _Needle,
    const size_t _Needle_size ) noexcept {

    if ( _Needle_size != 0 && _Start_at < _Hay_size ) {
        if constexpr ( _Special ) {
            _String_bitmap < typename _Traits :: char_type > _Matches;
            if ( ! _Matches . _Mark ( _Needle, _Needle + _Needle_size ) ) {

                return _Traits_find_first_of < _Traits, false > ( _Haystack, _Hay_size, _Start_at, _Needle, _Needle_size );
            }

            const auto _End = _Haystack + _Hay_size;
            for ( auto _Match_try = _Haystack + _Start_at; _Match_try < _End; ++ _Match_try ) {
                if ( _Matches . _Match ( * _Match_try ) ) {
                    return static_cast < size_t > ( _Match_try - _Haystack );
                }
            }
        } else {
            const auto _End = _Haystack + _Hay_size;
            for ( auto _Match_try = _Haystack + _Start_at; _Match_try < _End; ++ _Match_try ) {
                if ( _Traits :: find ( _Needle, _Needle_size, * _Match_try ) ) {
                    return static_cast < size_t > ( _Match_try - _Haystack );
                }
            }
        }
    }

    return static_cast < size_t > ( - 1 );
}
#line 778
template < class _Traits, bool _Special = _Is_specialization_v < _Traits, char_traits > >
constexpr size_t _Traits_find_last_of ( const _Traits_ptr_t < _Traits > _Haystack,
    const size_t _Hay_size, const size_t _Start_at, const _Traits_ptr_t < _Traits > _Needle,
    const size_t _Needle_size ) noexcept {

    if ( _Needle_size != 0 && _Hay_size != 0 ) {
        if constexpr ( _Special ) {
            _String_bitmap < typename _Traits :: char_type > _Matches;
            if ( ! _Matches . _Mark ( _Needle, _Needle + _Needle_size ) ) {

                return _Traits_find_last_of < _Traits, false > ( _Haystack, _Hay_size, _Start_at, _Needle, _Needle_size );
            }

            for ( auto _Match_try = _Haystack + ( :: std :: min ) ( _Start_at, _Hay_size - 1 );; -- _Match_try ) {
                if ( _Matches . _Match ( * _Match_try ) ) {
                    return static_cast < size_t > ( _Match_try - _Haystack );
                }

                if ( _Match_try == _Haystack ) {
                    break;
                }
            }
        } else {
            for ( auto _Match_try = _Haystack + ( :: std :: min ) ( _Start_at, _Hay_size - 1 );; -- _Match_try ) {
                if ( _Traits :: find ( _Needle, _Needle_size, * _Match_try ) ) {
                    return static_cast < size_t > ( _Match_try - _Haystack );
                }

                if ( _Match_try == _Haystack ) {
                    break;
                }
            }
        }
    }

    return static_cast < size_t > ( - 1 );
}
#line 816
template < class _Traits, bool _Special = _Is_specialization_v < _Traits, char_traits > >
constexpr size_t _Traits_find_first_not_of ( const _Traits_ptr_t < _Traits > _Haystack,
    const size_t _Hay_size, const size_t _Start_at, const _Traits_ptr_t < _Traits > _Needle,
    const size_t _Needle_size ) noexcept {

    if ( _Start_at < _Hay_size ) {
        if constexpr ( _Special ) {
            _String_bitmap < typename _Traits :: char_type > _Matches;
            if ( ! _Matches . _Mark ( _Needle, _Needle + _Needle_size ) ) {

                return _Traits_find_first_not_of < _Traits, false > (
                    _Haystack, _Hay_size, _Start_at, _Needle, _Needle_size );
            }

            const auto _End = _Haystack + _Hay_size;
            for ( auto _Match_try = _Haystack + _Start_at; _Match_try < _End; ++ _Match_try ) {
                if ( ! _Matches . _Match ( * _Match_try ) ) {
                    return static_cast < size_t > ( _Match_try - _Haystack );
                }
            }
        } else {
            const auto _End = _Haystack + _Hay_size;
            for ( auto _Match_try = _Haystack + _Start_at; _Match_try < _End; ++ _Match_try ) {
                if ( ! _Traits :: find ( _Needle, _Needle_size, * _Match_try ) ) {
                    return static_cast < size_t > ( _Match_try - _Haystack );
                }
            }
        }
    }

    return static_cast < size_t > ( - 1 );
}
#line 849
template < class _Traits >
constexpr size_t _Traits_find_not_ch ( const _Traits_ptr_t < _Traits > _Haystack,
    const size_t _Hay_size, const size_t _Start_at, const _Traits_ch_t < _Traits > _Ch ) noexcept {

    if ( _Start_at < _Hay_size ) {
        const auto _End = _Haystack + _Hay_size;
        for ( auto _Match_try = _Haystack + _Start_at; _Match_try < _End; ++ _Match_try ) {
            if ( ! _Traits :: eq ( * _Match_try, _Ch ) ) {
                return static_cast < size_t > ( _Match_try - _Haystack );
            }
        }
    }

    return static_cast < size_t > ( - 1 );
}
#line 865
template < class _Traits, bool _Special = _Is_specialization_v < _Traits, char_traits > >
constexpr size_t _Traits_find_last_not_of ( const _Traits_ptr_t < _Traits > _Haystack,
    const size_t _Hay_size, const size_t _Start_at, const _Traits_ptr_t < _Traits > _Needle,
    const size_t _Needle_size ) noexcept {

    if ( _Hay_size != 0 ) {
        if constexpr ( _Special ) {
            _String_bitmap < typename _Traits :: char_type > _Matches;
            if ( ! _Matches . _Mark ( _Needle, _Needle + _Needle_size ) ) {

                return _Traits_find_last_not_of < _Traits, false > ( _Haystack, _Hay_size, _Start_at, _Needle, _Needle_size );
            }

            for ( auto _Match_try = _Haystack + ( :: std :: min ) ( _Start_at, _Hay_size - 1 );; -- _Match_try ) {
                if ( ! _Matches . _Match ( * _Match_try ) ) {
                    return static_cast < size_t > ( _Match_try - _Haystack );
                }

                if ( _Match_try == _Haystack ) {
                    break;
                }
            }
        } else {
            for ( auto _Match_try = _Haystack + ( :: std :: min ) ( _Start_at, _Hay_size - 1 );; -- _Match_try ) {
                if ( ! _Traits :: find ( _Needle, _Needle_size, * _Match_try ) ) {
                    return static_cast < size_t > ( _Match_try - _Haystack );
                }

                if ( _Match_try == _Haystack ) {
                    break;
                }
            }
        }
    }

    return static_cast < size_t > ( - 1 );
}
#line 903
template < class _Traits >
constexpr size_t _Traits_rfind_not_ch ( const _Traits_ptr_t < _Traits > _Haystack,
    const size_t _Hay_size, const size_t _Start_at, const _Traits_ch_t < _Traits > _Ch ) noexcept {

    if ( _Hay_size != 0 ) {
        for ( auto _Match_try = _Haystack + ( :: std :: min ) ( _Start_at, _Hay_size - 1 );; -- _Match_try ) {
            if ( ! _Traits :: eq ( * _Match_try, _Ch ) ) {
                return static_cast < size_t > ( _Match_try - _Haystack );
            }

            if ( _Match_try == _Haystack ) {
                break;
            }
        }
    }

    return static_cast < size_t > ( - 1 );
}
#line 922
template< class _Ty> constexpr bool 
#line 923
_Is_EcharT = _Is_any_of_v< _Ty, char, __wchar_t, char16_t, char32_t> ; 
#line 1870 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\xstring"
template < class _Mystr >
class _String_const_iterator : public _Iterator_base {
public :



    using iterator_category = random_access_iterator_tag;
    using value_type = typename _Mystr :: value_type;
    using difference_type = typename _Mystr :: difference_type;
    using pointer = typename _Mystr :: const_pointer;
    using reference = const value_type &;

    inline _String_const_iterator ( ) noexcept : _Ptr ( ) { }

    inline _String_const_iterator ( pointer _Parg, const _Container_base * _Pstring ) noexcept : _Ptr ( _Parg ) {
        this -> _Adopt ( _Pstring );
    }

    [ [ nodiscard ] ] inline reference operator * ( ) const noexcept {

        do { if ( _Ptr ) { } else { do { ( void ) ( ( 1 != _CrtDbgReport ( 2, "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\xstring", 1890, 0, "%s", "cannot dereference value-initialized string iterator" ) ) || ( __debugbreak ( ), 0 ) ); :: _invalid_parameter ( L"\x22\x63\x61\x6e\x6e\x6f\x74\x20\x64\x65\x72\x65\x66\x65\x72\x65\x6e\x63\x65\x20\x76\x61\x6c\x75\x65\x2d\x69\x6e\x69\x74\x69\x61" L"\x6c\x69\x7a\x65\x64\x20\x73\x74\x72\x69\x6e\x67\x20\x69\x74\x65\x72\x61\x74\x6f\x72\x22", L"", L"\x45\x3a\x5c\x56\x69\x73\x75\x61\x6c\x53\x74\x75\x64\x69\x6f\x5c\x32\x30\x32\x32\x5c\x50\x72\x65\x76\x69\x65\x77\x5c\x56\x43\x5c" L"\x54\x6f\x6f\x6c\x73\x5c\x4d\x53\x56\x43\x5c\x31\x34\x2e\x33\x37\x2e\x33\x32\x37\x30\x35\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x78" L"\x73\x74\x72\x69\x6e\x67", 1890, 0 ); } while ( false ); }; } while ( false );
        const auto _Mycont = static_cast < const _Mystr * > ( this -> _Getcont ( ) );
        do { if ( _Mycont ) { } else { do { ( void ) ( ( 1 != _CrtDbgReport ( 2, "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\xstring", 1893, 0, "%s", "cannot dereference string iterator because the iterator was invalidated (e.g. reallocation occurred, or the string was destroyed" ")" ) ) || ( __debugbreak ( ), 0 ) ); :: _invalid_parameter ( L"\x22\x63\x61\x6e\x6e\x6f\x74\x20\x64\x65\x72\x65\x66\x65\x72\x65\x6e\x63\x65\x20\x73\x74\x72\x69\x6e\x67\x20\x69\x74\x65\x72\x61" L"\x74\x6f\x72\x20\x62\x65\x63\x61\x75\x73\x65\x20\x74\x68\x65\x20\x69\x74\x65\x72\x61\x74\x6f\x72\x20\x77\x61\x73\x22\x20\x22\x20" L"\x69\x6e\x76\x61\x6c\x69\x64\x61\x74\x65\x64\x20\x28\x65\x2e\x67\x2e\x20\x72\x65\x61\x6c\x6c\x6f\x63\x61\x74\x69\x6f\x6e\x20\x6f" L"\x63\x63\x75\x72\x72\x65\x64\x2c\x20\x6f\x72\x20\x74\x68\x65\x20\x73\x74\x72\x69\x6e\x67\x20\x77\x61\x73\x20\x64\x65\x73\x74\x72" L"\x6f\x79\x65\x64\x29\x22", L"", L"\x45\x3a\x5c\x56\x69\x73\x75\x61\x6c\x53\x74\x75\x64\x69\x6f\x5c\x32\x30\x32\x32\x5c\x50\x72\x65\x76\x69\x65\x77\x5c\x56\x43\x5c" L"\x54\x6f\x6f\x6c\x73\x5c\x4d\x53\x56\x43\x5c\x31\x34\x2e\x33\x37\x2e\x33\x32\x37\x30\x35\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x78" L"\x73\x74\x72\x69\x6e\x67", 1893, 0 ); } while ( false ); }; } while ( false );

        const auto _Contptr = _Mycont -> _Myptr ( );
        const auto _Rawptr = _Unfancy ( _Ptr );
        do { if ( _Contptr <= _Rawptr && _Rawptr < _Contptr + _Mycont -> _Mysize ) { } else { do { ( void ) ( ( 1 != _CrtDbgReport ( 2, "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\xstring", 1897, 0, "%s", "cannot dereference string iterator because it is out of range (e.g. an end iterator)" ) ) || ( __debugbreak ( ), 0 ) ); :: _invalid_parameter ( L"\x22\x63\x61\x6e\x6e\x6f\x74\x20\x64\x65\x72\x65\x66\x65\x72\x65\x6e\x63\x65\x20\x73\x74\x72\x69\x6e\x67\x20\x69\x74\x65\x72\x61" L"\x74\x6f\x72\x20\x62\x65\x63\x61\x75\x73\x65\x20\x69\x74\x20\x69\x73\x20\x6f\x75\x74\x20\x6f\x66\x20\x72\x61\x6e\x67\x65\x20\x28" L"\x65\x2e\x67\x2e\x20\x61\x6e\x20\x65\x6e\x64\x20\x69\x74\x65\x72\x61\x74\x6f\x72\x29\x22", L"", L"\x45\x3a\x5c\x56\x69\x73\x75\x61\x6c\x53\x74\x75\x64\x69\x6f\x5c\x32\x30\x32\x32\x5c\x50\x72\x65\x76\x69\x65\x77\x5c\x56\x43\x5c" L"\x54\x6f\x6f\x6c\x73\x5c\x4d\x53\x56\x43\x5c\x31\x34\x2e\x33\x37\x2e\x33\x32\x37\x30\x35\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x78" L"\x73\x74\x72\x69\x6e\x67", 1897, 0 ); } while ( false ); }; } while ( false );



        ;
        return * _Ptr;
    }

    [ [ nodiscard ] ] inline pointer operator -> ( ) const noexcept {
        return pointer_traits < pointer > :: pointer_to ( * * this );
    }

    inline _String_const_iterator & operator ++ ( ) noexcept {

        do { if ( _Ptr ) { } else { do { ( void ) ( ( 1 != _CrtDbgReport ( 2, "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\xstring", 1910, 0, "%s", "cannot increment value-initialized string iterator" ) ) || ( __debugbreak ( ), 0 ) ); :: _invalid_parameter ( L"\x22\x63\x61\x6e\x6e\x6f\x74\x20\x69\x6e\x63\x72\x65\x6d\x65\x6e\x74\x20\x76\x61\x6c\x75\x65\x2d\x69\x6e\x69\x74\x69\x61\x6c\x69" L"\x7a\x65\x64\x20\x73\x74\x72\x69\x6e\x67\x20\x69\x74\x65\x72\x61\x74\x6f\x72\x22", L"", L"\x45\x3a\x5c\x56\x69\x73\x75\x61\x6c\x53\x74\x75\x64\x69\x6f\x5c\x32\x30\x32\x32\x5c\x50\x72\x65\x76\x69\x65\x77\x5c\x56\x43\x5c" L"\x54\x6f\x6f\x6c\x73\x5c\x4d\x53\x56\x43\x5c\x31\x34\x2e\x33\x37\x2e\x33\x32\x37\x30\x35\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x78" L"\x73\x74\x72\x69\x6e\x67", 1910, 0 ); } while ( false ); }; } while ( false );
        const auto _Mycont = static_cast < const _Mystr * > ( this -> _Getcont ( ) );
        do { if ( _Mycont ) { } else { do { ( void ) ( ( 1 != _CrtDbgReport ( 2, "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\xstring", 1913, 0, "%s", "cannot increment string iterator because the iterator was invalidated (e.g. reallocation occurred, or the string was destroyed)" ) ) || ( __debugbreak ( ), 0 ) ); :: _invalid_parameter ( L"\x22\x63\x61\x6e\x6e\x6f\x74\x20\x69\x6e\x63\x72\x65\x6d\x65\x6e\x74\x20\x73\x74\x72\x69\x6e\x67\x20\x69\x74\x65\x72\x61\x74\x6f" L"\x72\x20\x62\x65\x63\x61\x75\x73\x65\x20\x74\x68\x65\x20\x69\x74\x65\x72\x61\x74\x6f\x72\x20\x77\x61\x73\x22\x20\x22\x20\x69\x6e" L"\x76\x61\x6c\x69\x64\x61\x74\x65\x64\x20\x28\x65\x2e\x67\x2e\x20\x72\x65\x61\x6c\x6c\x6f\x63\x61\x74\x69\x6f\x6e\x20\x6f\x63\x63" L"\x75\x72\x72\x65\x64\x2c\x20\x6f\x72\x20\x74\x68\x65\x20\x73\x74\x72\x69\x6e\x67\x20\x77\x61\x73\x20\x64\x65\x73\x74\x72\x6f\x79" L"\x65\x64\x29\x22", L"", L"\x45\x3a\x5c\x56\x69\x73\x75\x61\x6c\x53\x74\x75\x64\x69\x6f\x5c\x32\x30\x32\x32\x5c\x50\x72\x65\x76\x69\x65\x77\x5c\x56\x43\x5c" L"\x54\x6f\x6f\x6c\x73\x5c\x4d\x53\x56\x43\x5c\x31\x34\x2e\x33\x37\x2e\x33\x32\x37\x30\x35\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x78" L"\x73\x74\x72\x69\x6e\x67", 1913, 0 ); } while ( false ); }; } while ( false );

        do { if ( _Unfancy ( _Ptr ) < _Mycont -> _Myptr ( ) + _Mycont -> _Mysize ) { } else { do { ( void ) ( ( 1 != _CrtDbgReport ( 2, "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\xstring", 1914, 0, "%s", "cannot increment string iterator past end" ) ) || ( __debugbreak ( ), 0 ) ); :: _invalid_parameter ( L"\x22\x63\x61\x6e\x6e\x6f\x74\x20\x69\x6e\x63\x72\x65\x6d\x65\x6e\x74\x20\x73\x74\x72\x69\x6e\x67\x20\x69\x74\x65\x72\x61\x74\x6f" L"\x72\x20\x70\x61\x73\x74\x20\x65\x6e\x64\x22", L"", L"\x45\x3a\x5c\x56\x69\x73\x75\x61\x6c\x53\x74\x75\x64\x69\x6f\x5c\x32\x30\x32\x32\x5c\x50\x72\x65\x76\x69\x65\x77\x5c\x56\x43\x5c" L"\x54\x6f\x6f\x6c\x73\x5c\x4d\x53\x56\x43\x5c\x31\x34\x2e\x33\x37\x2e\x33\x32\x37\x30\x35\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x78" L"\x73\x74\x72\x69\x6e\x67", 1914, 0 ); } while ( false ); }; } while ( false );


        ++ _Ptr;
        return * this;
    }

    inline _String_const_iterator operator ++ ( int ) noexcept {
        _String_const_iterator _Tmp = * this;
        ++ * this;
        return _Tmp;
    }

    inline _String_const_iterator & operator -- ( ) noexcept {

        do { if ( _Ptr ) { } else { do { ( void ) ( ( 1 != _CrtDbgReport ( 2, "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\xstring", 1929, 0, "%s", "cannot decrement value-initialized string iterator" ) ) || ( __debugbreak ( ), 0 ) ); :: _invalid_parameter ( L"\x22\x63\x61\x6e\x6e\x6f\x74\x20\x64\x65\x63\x72\x65\x6d\x65\x6e\x74\x20\x76\x61\x6c\x75\x65\x2d\x69\x6e\x69\x74\x69\x61\x6c\x69" L"\x7a\x65\x64\x20\x73\x74\x72\x69\x6e\x67\x20\x69\x74\x65\x72\x61\x74\x6f\x72\x22", L"", L"\x45\x3a\x5c\x56\x69\x73\x75\x61\x6c\x53\x74\x75\x64\x69\x6f\x5c\x32\x30\x32\x32\x5c\x50\x72\x65\x76\x69\x65\x77\x5c\x56\x43\x5c" L"\x54\x6f\x6f\x6c\x73\x5c\x4d\x53\x56\x43\x5c\x31\x34\x2e\x33\x37\x2e\x33\x32\x37\x30\x35\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x78" L"\x73\x74\x72\x69\x6e\x67", 1929, 0 ); } while ( false ); }; } while ( false );
        const auto _Mycont = static_cast < const _Mystr * > ( this -> _Getcont ( ) );
        do { if ( _Mycont ) { } else { do { ( void ) ( ( 1 != _CrtDbgReport ( 2, "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\xstring", 1932, 0, "%s", "cannot decrement string iterator because the iterator was invalidated (e.g. reallocation occurred, or the string was destroyed)" ) ) || ( __debugbreak ( ), 0 ) ); :: _invalid_parameter ( L"\x22\x63\x61\x6e\x6e\x6f\x74\x20\x64\x65\x63\x72\x65\x6d\x65\x6e\x74\x20\x73\x74\x72\x69\x6e\x67\x20\x69\x74\x65\x72\x61\x74\x6f" L"\x72\x20\x62\x65\x63\x61\x75\x73\x65\x20\x74\x68\x65\x20\x69\x74\x65\x72\x61\x74\x6f\x72\x20\x77\x61\x73\x22\x20\x22\x20\x69\x6e" L"\x76\x61\x6c\x69\x64\x61\x74\x65\x64\x20\x28\x65\x2e\x67\x2e\x20\x72\x65\x61\x6c\x6c\x6f\x63\x61\x74\x69\x6f\x6e\x20\x6f\x63\x63" L"\x75\x72\x72\x65\x64\x2c\x20\x6f\x72\x20\x74\x68\x65\x20\x73\x74\x72\x69\x6e\x67\x20\x77\x61\x73\x20\x64\x65\x73\x74\x72\x6f\x79" L"\x65\x64\x29\x22", L"", L"\x45\x3a\x5c\x56\x69\x73\x75\x61\x6c\x53\x74\x75\x64\x69\x6f\x5c\x32\x30\x32\x32\x5c\x50\x72\x65\x76\x69\x65\x77\x5c\x56\x43\x5c" L"\x54\x6f\x6f\x6c\x73\x5c\x4d\x53\x56\x43\x5c\x31\x34\x2e\x33\x37\x2e\x33\x32\x37\x30\x35\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x78" L"\x73\x74\x72\x69\x6e\x67", 1932, 0 ); } while ( false ); }; } while ( false );

        do { if ( _Mycont -> _Myptr ( ) < _Unfancy ( _Ptr ) ) { } else { do { ( void ) ( ( 1 != _CrtDbgReport ( 2, "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\xstring", 1933, 0, "%s", "cannot decrement string iterator before begin" ) ) || ( __debugbreak ( ), 0 ) ); :: _invalid_parameter ( L"\x22\x63\x61\x6e\x6e\x6f\x74\x20\x64\x65\x63\x72\x65\x6d\x65\x6e\x74\x20\x73\x74\x72\x69\x6e\x67\x20\x69\x74\x65\x72\x61\x74\x6f" L"\x72\x20\x62\x65\x66\x6f\x72\x65\x20\x62\x65\x67\x69\x6e\x22", L"", L"\x45\x3a\x5c\x56\x69\x73\x75\x61\x6c\x53\x74\x75\x64\x69\x6f\x5c\x32\x30\x32\x32\x5c\x50\x72\x65\x76\x69\x65\x77\x5c\x56\x43\x5c" L"\x54\x6f\x6f\x6c\x73\x5c\x4d\x53\x56\x43\x5c\x31\x34\x2e\x33\x37\x2e\x33\x32\x37\x30\x35\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x78" L"\x73\x74\x72\x69\x6e\x67", 1933, 0 ); } while ( false ); }; } while ( false );


        -- _Ptr;
        return * this;
    }

    inline _String_const_iterator operator -- ( int ) noexcept {
        _String_const_iterator _Tmp = * this;
        -- * this;
        return _Tmp;
    }

    inline void _Verify_offset ( const difference_type _Off ) const noexcept {

        if ( _Off == 0 ) {
            return;
        }

        do { if ( _Ptr ) { } else { do { ( void ) ( ( 1 != _CrtDbgReport ( 2, "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\xstring", 1952, 0, "%s", "cannot seek value-initialized string iterator" ) ) || ( __debugbreak ( ), 0 ) ); :: _invalid_parameter ( L"\x22\x63\x61\x6e\x6e\x6f\x74\x20\x73\x65\x65\x6b\x20\x76\x61\x6c\x75\x65\x2d\x69\x6e\x69\x74\x69\x61\x6c\x69\x7a\x65\x64\x20\x73" L"\x74\x72\x69\x6e\x67\x20\x69\x74\x65\x72\x61\x74\x6f\x72\x22", L"", L"\x45\x3a\x5c\x56\x69\x73\x75\x61\x6c\x53\x74\x75\x64\x69\x6f\x5c\x32\x30\x32\x32\x5c\x50\x72\x65\x76\x69\x65\x77\x5c\x56\x43\x5c" L"\x54\x6f\x6f\x6c\x73\x5c\x4d\x53\x56\x43\x5c\x31\x34\x2e\x33\x37\x2e\x33\x32\x37\x30\x35\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x78" L"\x73\x74\x72\x69\x6e\x67", 1952, 0 ); } while ( false ); }; } while ( false );
        const auto _Mycont = static_cast < const _Mystr * > ( this -> _Getcont ( ) );
        do { if ( _Mycont ) { } else { do { ( void ) ( ( 1 != _CrtDbgReport ( 2, "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\xstring", 1955, 0, "%s", "cannot seek string iterator because the iterator was invalidated (e.g. reallocation occurred, or the string was destroyed)" ) ) || ( __debugbreak ( ), 0 ) ); :: _invalid_parameter ( L"\x22\x63\x61\x6e\x6e\x6f\x74\x20\x73\x65\x65\x6b\x20\x73\x74\x72\x69\x6e\x67\x20\x69\x74\x65\x72\x61\x74\x6f\x72\x20\x62\x65\x63" L"\x61\x75\x73\x65\x20\x74\x68\x65\x20\x69\x74\x65\x72\x61\x74\x6f\x72\x20\x77\x61\x73\x22\x20\x22\x20\x69\x6e\x76\x61\x6c\x69\x64" L"\x61\x74\x65\x64\x20\x28\x65\x2e\x67\x2e\x20\x72\x65\x61\x6c\x6c\x6f\x63\x61\x74\x69\x6f\x6e\x20\x6f\x63\x63\x75\x72\x72\x65\x64" L"\x2c\x20\x6f\x72\x20\x74\x68\x65\x20\x73\x74\x72\x69\x6e\x67\x20\x77\x61\x73\x20\x64\x65\x73\x74\x72\x6f\x79\x65\x64\x29\x22", L"", L"\x45\x3a\x5c\x56\x69\x73\x75\x61\x6c\x53\x74\x75\x64\x69\x6f\x5c\x32\x30\x32\x32\x5c\x50\x72\x65\x76\x69\x65\x77\x5c\x56\x43\x5c" L"\x54\x6f\x6f\x6c\x73\x5c\x4d\x53\x56\x43\x5c\x31\x34\x2e\x33\x37\x2e\x33\x32\x37\x30\x35\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x78" L"\x73\x74\x72\x69\x6e\x67", 1955, 0 ); } while ( false ); }; } while ( false );

        const auto _Contptr = _Mycont -> _Myptr ( );
        const auto _Rawptr = _Unfancy ( _Ptr );

        if ( _Off < 0 ) {
            do { if ( _Contptr - _Rawptr <= _Off ) { } else { do { ( void ) ( ( 1 != _CrtDbgReport ( 2, "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\xstring", 1960, 0, "%s", "cannot seek string iterator before begin" ) ) || ( __debugbreak ( ), 0 ) ); :: _invalid_parameter ( L"\x22\x63\x61\x6e\x6e\x6f\x74\x20\x73\x65\x65\x6b\x20\x73\x74\x72\x69\x6e\x67\x20\x69\x74\x65\x72\x61\x74\x6f\x72\x20\x62\x65\x66" L"\x6f\x72\x65\x20\x62\x65\x67\x69\x6e\x22", L"", L"\x45\x3a\x5c\x56\x69\x73\x75\x61\x6c\x53\x74\x75\x64\x69\x6f\x5c\x32\x30\x32\x32\x5c\x50\x72\x65\x76\x69\x65\x77\x5c\x56\x43\x5c" L"\x54\x6f\x6f\x6c\x73\x5c\x4d\x53\x56\x43\x5c\x31\x34\x2e\x33\x37\x2e\x33\x32\x37\x30\x35\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x78" L"\x73\x74\x72\x69\x6e\x67", 1960, 0 ); } while ( false ); }; } while ( false );
        }

        if ( _Off > 0 ) {
            using _Size_type = typename _Mystr :: size_type;
            const auto _Left = _Mycont -> _Mysize - static_cast < _Size_type > ( _Rawptr - _Contptr );
            do { if ( static_cast < _Size_type > ( _Off ) <= _Left ) { } else { do { ( void ) ( ( 1 != _CrtDbgReport ( 2, "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\xstring", 1966, 0, "%s", "cannot seek string iterator after end" ) ) || ( __debugbreak ( ), 0 ) ); :: _invalid_parameter ( L"\x22\x63\x61\x6e\x6e\x6f\x74\x20\x73\x65\x65\x6b\x20\x73\x74\x72\x69\x6e\x67\x20\x69\x74\x65\x72\x61\x74\x6f\x72\x20\x61\x66\x74" L"\x65\x72\x20\x65\x6e\x64\x22", L"", L"\x45\x3a\x5c\x56\x69\x73\x75\x61\x6c\x53\x74\x75\x64\x69\x6f\x5c\x32\x30\x32\x32\x5c\x50\x72\x65\x76\x69\x65\x77\x5c\x56\x43\x5c" L"\x54\x6f\x6f\x6c\x73\x5c\x4d\x53\x56\x43\x5c\x31\x34\x2e\x33\x37\x2e\x33\x32\x37\x30\x35\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x78" L"\x73\x74\x72\x69\x6e\x67", 1966, 0 ); } while ( false ); }; } while ( false );
        }



    }

    inline _String_const_iterator & operator += ( const difference_type _Off ) noexcept {

        _Verify_offset ( _Off );

        _Ptr += _Off;
        return * this;
    }

    [ [ nodiscard ] ] inline _String_const_iterator operator + ( const difference_type _Off ) const noexcept {
        _String_const_iterator _Tmp = * this;
        _Tmp += _Off;
        return _Tmp;
    }

    friend inline _String_const_iterator operator + (
        const difference_type _Off, _String_const_iterator _Next ) noexcept {
        _Next += _Off;
        return _Next;
    }

    inline _String_const_iterator & operator -= ( const difference_type _Off ) noexcept {
        return * this += - _Off;
    }

    [ [ nodiscard ] ] inline _String_const_iterator operator - ( const difference_type _Off ) const noexcept {
        _String_const_iterator _Tmp = * this;
        _Tmp -= _Off;
        return _Tmp;
    }

    [ [ nodiscard ] ] inline difference_type operator - ( const _String_const_iterator & _Right ) const noexcept {
        _Compat ( _Right );
        return _Ptr - _Right . _Ptr;
    }

    [ [ nodiscard ] ] inline reference operator [ ] ( const difference_type _Off ) const noexcept {
        return * ( * this + _Off );
    }

    [ [ nodiscard ] ] inline bool operator == ( const _String_const_iterator & _Right ) const noexcept {
        _Compat ( _Right );
        return _Ptr == _Right . _Ptr;
    }







    [ [ nodiscard ] ] bool operator != ( const _String_const_iterator & _Right ) const noexcept {
        return ! ( * this == _Right );
    }

    [ [ nodiscard ] ] bool operator < ( const _String_const_iterator & _Right ) const noexcept {
        _Compat ( _Right );
        return _Ptr < _Right . _Ptr;
    }

    [ [ nodiscard ] ] bool operator > ( const _String_const_iterator & _Right ) const noexcept {
        return _Right < * this;
    }

    [ [ nodiscard ] ] bool operator <= ( const _String_const_iterator & _Right ) const noexcept {
        return ! ( _Right < * this );
    }

    [ [ nodiscard ] ] bool operator >= ( const _String_const_iterator & _Right ) const noexcept {
        return ! ( * this < _Right );
    }


    inline void _Compat ( const _String_const_iterator & _Right ) const noexcept {


        do { if ( this -> _Getcont ( ) == _Right . _Getcont ( ) ) { } else { do { ( void ) ( ( 1 != _CrtDbgReport ( 2, "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\xstring", 2049, 0, "%s", "string iterators incompatible (e.g. point to different string instances)" ) ) || ( __debugbreak ( ), 0 ) ); :: _invalid_parameter ( L"\x22\x73\x74\x72\x69\x6e\x67\x20\x69\x74\x65\x72\x61\x74\x6f\x72\x73\x20\x69\x6e\x63\x6f\x6d\x70\x61\x74\x69\x62\x6c\x65\x20\x28" L"\x65\x2e\x67\x2e\x22\x20\x22\x20\x70\x6f\x69\x6e\x74\x20\x74\x6f\x20\x64\x69\x66\x66\x65\x72\x65\x6e\x74\x20\x73\x74\x72\x69\x6e" L"\x67\x20\x69\x6e\x73\x74\x61\x6e\x63\x65\x73\x29\x22", L"", L"\x45\x3a\x5c\x56\x69\x73\x75\x61\x6c\x53\x74\x75\x64\x69\x6f\x5c\x32\x30\x32\x32\x5c\x50\x72\x65\x76\x69\x65\x77\x5c\x56\x43\x5c" L"\x54\x6f\x6f\x6c\x73\x5c\x4d\x53\x56\x43\x5c\x31\x34\x2e\x33\x37\x2e\x33\x32\x37\x30\x35\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x78" L"\x73\x74\x72\x69\x6e\x67", 2049, 0 ); } while ( false ); }; } while ( false );




    }


    friend inline void _Verify_range (
        const _String_const_iterator & _First, const _String_const_iterator & _Last ) noexcept {
        do { if ( _First . _Getcont ( ) == _Last . _Getcont ( ) ) { } else { do { ( void ) ( ( 1 != _CrtDbgReport ( 2, "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\xstring", 2058, 0, "%s", "string iterators in range are from different containers" ) ) || ( __debugbreak ( ), 0 ) ); :: _invalid_parameter ( L"\x22\x73\x74\x72\x69\x6e\x67\x20\x69\x74\x65\x72\x61\x74\x6f\x72\x73\x20\x69\x6e\x20\x72\x61\x6e\x67\x65\x20\x61\x72\x65\x20\x66" L"\x72\x6f\x6d\x20\x64\x69\x66\x66\x65\x72\x65\x6e\x74\x20\x63\x6f\x6e\x74\x61\x69\x6e\x65\x72\x73\x22", L"", L"\x45\x3a\x5c\x56\x69\x73\x75\x61\x6c\x53\x74\x75\x64\x69\x6f\x5c\x32\x30\x32\x32\x5c\x50\x72\x65\x76\x69\x65\x77\x5c\x56\x43\x5c" L"\x54\x6f\x6f\x6c\x73\x5c\x4d\x53\x56\x43\x5c\x31\x34\x2e\x33\x37\x2e\x33\x32\x37\x30\x35\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x78" L"\x73\x74\x72\x69\x6e\x67", 2058, 0 ); } while ( false ); }; } while ( false );
        do { if ( _First . _Ptr <= _Last . _Ptr ) { } else { do { ( void ) ( ( 1 != _CrtDbgReport ( 2, "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\xstring", 2059, 0, "%s", "string iterator range transposed" ) ) || ( __debugbreak ( ), 0 ) ); :: _invalid_parameter ( L"\x22\x73\x74\x72\x69\x6e\x67\x20\x69\x74\x65\x72\x61\x74\x6f\x72\x20\x72\x61\x6e\x67\x65\x20\x74\x72\x61\x6e\x73\x70\x6f\x73\x65" L"\x64\x22", L"", L"\x45\x3a\x5c\x56\x69\x73\x75\x61\x6c\x53\x74\x75\x64\x69\x6f\x5c\x32\x30\x32\x32\x5c\x50\x72\x65\x76\x69\x65\x77\x5c\x56\x43\x5c" L"\x54\x6f\x6f\x6c\x73\x5c\x4d\x53\x56\x43\x5c\x31\x34\x2e\x33\x37\x2e\x33\x32\x37\x30\x35\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x78" L"\x73\x74\x72\x69\x6e\x67", 2059, 0 ); } while ( false ); }; } while ( false );
    }


    using _Prevent_inheriting_unwrap = _String_const_iterator;

    [ [ nodiscard ] ] inline const value_type * _Unwrapped ( ) const noexcept {
        return _Unfancy ( _Ptr );
    }

    inline void _Seek_to ( const value_type * _It ) noexcept {
        _Ptr = _Refancy < pointer > ( const_cast < value_type * > ( _It ) );
    }

    pointer _Ptr;
};
#line 2107 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\xstring"
template < class _Mystr >
class _String_iterator : public _String_const_iterator < _Mystr > {
public :
    using _Mybase = _String_const_iterator < _Mystr >;




    using iterator_category = random_access_iterator_tag;
    using value_type = typename _Mystr :: value_type;
    using difference_type = typename _Mystr :: difference_type;
    using pointer = typename _Mystr :: pointer;
    using reference = value_type &;

    using _Mybase :: _Mybase;

    [ [ nodiscard ] ] inline reference operator * ( ) const noexcept {
        return const_cast < reference > ( _Mybase :: operator * ( ) );
    }

    [ [ nodiscard ] ] inline pointer operator -> ( ) const noexcept {
        return pointer_traits < pointer > :: pointer_to ( * * this );
    }

    inline _String_iterator & operator ++ ( ) noexcept {
        _Mybase :: operator ++ ( );
        return * this;
    }

    inline _String_iterator operator ++ ( int ) noexcept {
        _String_iterator _Tmp = * this;
        _Mybase :: operator ++ ( );
        return _Tmp;
    }

    inline _String_iterator & operator -- ( ) noexcept {
        _Mybase :: operator -- ( );
        return * this;
    }

    inline _String_iterator operator -- ( int ) noexcept {
        _String_iterator _Tmp = * this;
        _Mybase :: operator -- ( );
        return _Tmp;
    }

    inline _String_iterator & operator += ( const difference_type _Off ) noexcept {
        _Mybase :: operator += ( _Off );
        return * this;
    }

    [ [ nodiscard ] ] inline _String_iterator operator + ( const difference_type _Off ) const noexcept {
        _String_iterator _Tmp = * this;
        _Tmp += _Off;
        return _Tmp;
    }

    friend inline _String_iterator operator + (
        const difference_type _Off, _String_iterator _Next ) noexcept {
        _Next += _Off;
        return _Next;
    }

    inline _String_iterator & operator -= ( const difference_type _Off ) noexcept {
        _Mybase :: operator -= ( _Off );
        return * this;
    }

    using _Mybase :: operator -;

    [ [ nodiscard ] ] inline _String_iterator operator - ( const difference_type _Off ) const noexcept {
        _String_iterator _Tmp = * this;
        _Tmp -= _Off;
        return _Tmp;
    }

    [ [ nodiscard ] ] inline reference operator [ ] ( const difference_type _Off ) const noexcept {
        return const_cast < reference > ( _Mybase :: operator [ ] ( _Off ) );
    }

    using _Prevent_inheriting_unwrap = _String_iterator;

    [ [ nodiscard ] ] inline value_type * _Unwrapped ( ) const noexcept {
        return const_cast < value_type * > ( _Unfancy ( this -> _Ptr ) );
    }
};
#line 2225 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\xstring"
template< class _Value_type, class _Size_type, class _Difference_type, class _Pointer, class _Const_pointer, class 
#line 2226
_Reference, class _Const_reference> 
#line 2227
struct _String_iter_types { 
#line 2228
using value_type = _Value_type; 
#line 2229
using size_type = _Size_type; 
#line 2230
using difference_type = _Difference_type; 
#line 2231
using pointer = _Pointer; 
#line 2232
using const_pointer = _Const_pointer; 
#line 2233
}; 
#line 2235
template < class _Val_types >
class _String_val : public _Container_base {
public :
    using value_type = typename _Val_types :: value_type;
    using size_type = typename _Val_types :: size_type;
    using difference_type = typename _Val_types :: difference_type;
    using pointer = typename _Val_types :: pointer;
    using const_pointer = typename _Val_types :: const_pointer;
    using reference = value_type &;
    using const_reference = const value_type &;

    inline _String_val ( ) noexcept : _Bx ( ) { }


    static constexpr size_type _BUF_SIZE = 16 / sizeof ( value_type ) < 1 ? 1 : 16 / sizeof ( value_type );

    static constexpr size_type _ALLOC_MASK = sizeof ( value_type ) <= 1 ? 15
                                           : sizeof ( value_type ) <= 2 ? 7
                                           : sizeof ( value_type ) <= 4 ? 3
                                           : sizeof ( value_type ) <= 8 ? 1
                                                                     : 0;

    inline value_type * _Myptr ( ) noexcept {
        value_type * _Result = _Bx . _Buf;
        if ( _Large_string_engaged ( ) ) {
            _Result = _Unfancy ( _Bx . _Ptr );
        }

        return _Result;
    }

    inline const value_type * _Myptr ( ) const noexcept {
        const value_type * _Result = _Bx . _Buf;
        if ( _Large_string_engaged ( ) ) {
            _Result = _Unfancy ( _Bx . _Ptr );
        }

        return _Result;
    }

    inline bool _Large_string_engaged ( ) const noexcept {
        return _BUF_SIZE <= _Myres;
    }

    constexpr void _Activate_SSO_buffer ( ) noexcept {








    }

    inline void _Check_offset ( const size_type _Off ) const {

        if ( _Mysize < _Off ) {
            _Xran ( );
        }
    }

    inline void _Check_offset_exclusive ( const size_type _Off ) const {

        if ( _Mysize <= _Off ) {
            _Xran ( );
        }
    }

    [ [ noreturn ] ] static void _Xran ( ) {
        _Xout_of_range ( "invalid string position" );
    }

    inline size_type _Clamp_suffix_size ( const size_type _Off, const size_type _Size ) const noexcept {

        return ( :: std :: min ) ( _Size, _Mysize - _Off );
    }

    union _Bxty {


        inline _Bxty ( ) noexcept : _Buf ( ) { }
        inline ~ _Bxty ( ) noexcept { }

        value_type _Buf [ _BUF_SIZE ];
        pointer _Ptr;
        char _Alias [ _BUF_SIZE ];
    };
    _Bxty _Bx;

    size_type _Mysize = 0;
    size_type _Myres = 0;
};
#line 2330 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\xstring"
template< class _Ty> constexpr size_t 
#line 2331
_Size_after_ebco_v = (is_empty_v< _Ty> ) ? 0 : sizeof(_Ty); 
#line 2333
struct _String_constructor_concat_tag { 
#line 2335
explicit _String_constructor_concat_tag() = default;
#line 2336
}; 
#line 2338
struct _String_constructor_rvalue_allocator_tag { 
#line 2340
explicit _String_constructor_rvalue_allocator_tag() = default;
#line 2341
}; 
#line 2343
[[noreturn]] inline void _Xlen_string() { 
#line 2344
_Xlength_error("string too long"); 
#line 2345
} 
#line 2353 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\xstring"
template < class _Elem, class _Traits = char_traits < _Elem >, class _Alloc = allocator < _Elem > >
class basic_string {
private :
    friend _Tidy_deallocate_guard < basic_string >;
    friend basic_stringbuf < _Elem, _Traits, _Alloc >;

    using _Alty = _Rebind_alloc_t < _Alloc, _Elem >;
    using _Alty_traits = allocator_traits < _Alty >;

    using _Scary_val = _String_val < conditional_t < _Is_simple_alloc_v < _Alty >, _Simple_types < _Elem >,
        _String_iter_types < _Elem, typename _Alty_traits :: size_type, typename _Alty_traits :: difference_type,
            typename _Alty_traits :: pointer, typename _Alty_traits :: const_pointer, _Elem &, const _Elem & >> >;

    static_assert ( ! 0 || is_same_v < _Elem, typename _Alloc :: value_type >,
        "basic_string<T, Traits, Allocator> requires that Allocator\'s value_type match T (See N4659 26.2.1 [container.requirements.gener" "al]/16 allocator_type) Either fix the allocator value_type or define _ENFORCE_MATCHING_ALLOCATORS=0 to suppress this error." );

    static_assert ( is_same_v < _Elem, typename _Traits :: char_type >,
        "N4910 23.4.3.2 [string.require]/3 requires that the supplied char_traits character type match the string\'s character type."
                                                                       );

    static_assert ( ! is_array_v < _Elem > && is_trivial_v < _Elem > && is_standard_layout_v < _Elem >,
        "The character type of basic_string must be a non-array trivial standard-layout type. See N4910 23.1 [strings.general]/1."
                                   );

public :
    using traits_type = _Traits;
    using allocator_type = _Alloc;

    using value_type = _Elem;
    using size_type = typename _Alty_traits :: size_type;
    using difference_type = typename _Alty_traits :: difference_type;
    using pointer = typename _Alty_traits :: pointer;
    using const_pointer = typename _Alty_traits :: const_pointer;
    using reference = value_type &;
    using const_reference = const value_type &;

    using iterator = _String_iterator < _Scary_val >;
    using const_iterator = _String_const_iterator < _Scary_val >;

    using reverse_iterator = :: std :: reverse_iterator < iterator >;
    using const_reverse_iterator = :: std :: reverse_iterator < const_iterator >;

private :
    static constexpr auto _BUF_SIZE = _Scary_val :: _BUF_SIZE;
    static constexpr auto _ALLOC_MASK = _Scary_val :: _ALLOC_MASK;











    static constexpr bool _Can_memcpy_val = _Is_specialization_v < _Traits, char_traits > && is_trivial_v < pointer >;

    static constexpr size_t _Memcpy_val_offset = _Size_after_ebco_v < _Container_base >;
    static constexpr size_t _Memcpy_val_size = sizeof ( _Scary_val ) - _Memcpy_val_offset;

    template < class _Iter >


    using _Is_elem_cptr = bool_constant < _Is_any_of_v < _Iter, const _Elem * const, _Elem * const, const _Elem *, _Elem * >>;




























































































public :
    inline
    basic_string ( ) noexcept ( is_nothrow_default_constructible_v < _Alty > ) : _Mypair ( _Zero_then_variadic_args_t { } ) {
        _Mypair . _Myval2 . _Alloc_proxy ( static_cast < _Rebind_alloc_t < _Alty, _Container_proxy >> ( _Getal ( ) ) );
        _Tidy_init ( );
    }

    inline explicit basic_string ( const _Alloc & _Al ) noexcept : _Mypair ( _One_then_variadic_args_t { }, _Al ) {
        _Mypair . _Myval2 . _Alloc_proxy ( static_cast < _Rebind_alloc_t < _Alty, _Container_proxy >> ( _Getal ( ) ) );
        _Tidy_init ( );
    }

    inline basic_string ( const basic_string & _Right )
        : _Mypair ( _One_then_variadic_args_t { }, _Alty_traits :: select_on_container_copy_construction ( _Right . _Getal ( ) ) ) {
        _Construct < _Construct_strategy :: _From_string > ( _Right . _Mypair . _Myval2 . _Myptr ( ), _Right . _Mypair . _Myval2 . _Mysize );
    }

    inline basic_string ( const basic_string & _Right, const _Alloc & _Al )
        : _Mypair ( _One_then_variadic_args_t { }, _Al ) {
        _Construct < _Construct_strategy :: _From_string > ( _Right . _Mypair . _Myval2 . _Myptr ( ), _Right . _Mypair . _Myval2 . _Mysize );
    }

    inline basic_string ( const basic_string & _Right, const size_type _Roff, const _Alloc & _Al = _Alloc ( ) )
        : _Mypair ( _One_then_variadic_args_t { }, _Al ) {
        _Right . _Mypair . _Myval2 . _Check_offset ( _Roff );
        _Construct < _Construct_strategy :: _From_ptr > (
            _Right . _Mypair . _Myval2 . _Myptr ( ) + _Roff, _Right . _Mypair . _Myval2 . _Clamp_suffix_size ( _Roff, npos ) );
    }

    inline basic_string (
        const basic_string & _Right, const size_type _Roff, const size_type _Count, const _Alloc & _Al = _Alloc ( ) )
        : _Mypair ( _One_then_variadic_args_t { }, _Al ) {
        _Right . _Mypair . _Myval2 . _Check_offset ( _Roff );
        _Construct < _Construct_strategy :: _From_ptr > (
            _Right . _Mypair . _Myval2 . _Myptr ( ) + _Roff, _Right . _Mypair . _Myval2 . _Clamp_suffix_size ( _Roff, _Count ) );
    }














    inline basic_string ( const _Elem * const _Ptr, const size_type _Count )
        : _Mypair ( _Zero_then_variadic_args_t { } ) {
        _Construct < _Construct_strategy :: _From_ptr > ( _Ptr, _Count );
    }

    inline basic_string (
          const _Elem * const _Ptr, const size_type _Count, const _Alloc & _Al )
        : _Mypair ( _One_then_variadic_args_t { }, _Al ) {
        _Construct < _Construct_strategy :: _From_ptr > ( _Ptr, _Count );
    }

    inline basic_string ( const _Elem * const _Ptr ) : _Mypair ( _Zero_then_variadic_args_t { } ) {
        _Construct < _Construct_strategy :: _From_ptr > ( _Ptr, _Convert_size < size_type > ( _Traits :: length ( _Ptr ) ) );
    }








    inline basic_string ( const _Elem * const _Ptr, const _Alloc & _Al )
        : _Mypair ( _One_then_variadic_args_t { }, _Al ) {
        _Construct < _Construct_strategy :: _From_ptr > ( _Ptr, _Convert_size < size_type > ( _Traits :: length ( _Ptr ) ) );
    }

    inline basic_string ( const size_type _Count, const _Elem _Ch )
        : _Mypair ( _Zero_then_variadic_args_t { } ) {
        _Construct < _Construct_strategy :: _From_char > ( _Ch, _Count );
    }




    inline basic_string ( const size_type _Count, const _Elem _Ch, const _Alloc & _Al )
        : _Mypair ( _One_then_variadic_args_t { }, _Al ) {
        _Construct < _Construct_strategy :: _From_char > ( _Ch, _Count );
    }

    template < class _Iter, enable_if_t < _Is_iterator_v < _Iter >, int > = 0 >
    inline basic_string ( _Iter _First, _Iter _Last, const _Alloc & _Al = _Alloc ( ) )
        : _Mypair ( _One_then_variadic_args_t { }, _Al ) {
        _Adl_verify_range ( _First, _Last );
        auto _UFirst = _Get_unwrapped ( _First );
        auto _ULast = _Get_unwrapped ( _Last );
        if ( _UFirst == _ULast ) {
            _Mypair . _Myval2 . _Alloc_proxy ( static_cast < _Rebind_alloc_t < _Alty, _Container_proxy >> ( _Getal ( ) ) );
            _Tidy_init ( );
        } else {
            if constexpr ( _Is_elem_cptr < decltype ( _UFirst ) > :: value ) {
                _Construct < _Construct_strategy :: _From_ptr > (
                    _UFirst, _Convert_size < size_type > ( static_cast < size_t > ( _ULast - _UFirst ) ) );
            } else if constexpr ( _Is_cpp17_fwd_iter_v < decltype ( _UFirst ) > ) {
                const auto _Length = static_cast < size_t > ( :: std :: distance ( _UFirst, _ULast ) );
                const auto _Count = _Convert_size < size_type > ( _Length );
                _Construct_from_iter ( :: std :: move ( _UFirst ), :: std :: move ( _ULast ), _Count );
            } else {
                _Construct_from_iter ( :: std :: move ( _UFirst ), :: std :: move ( _ULast ) );
            }
        }
    }

private :
    static constexpr void _Start_element_lifetimes ( _Elem * const _Ptr, const size_type _Size ) {









        ( void ) _Ptr;
        ( void ) _Size;

    }

    enum class _Construct_strategy : uint8_t { _From_char, _From_ptr, _From_string };

    template < _Construct_strategy _Strat, class _Char_or_ptr >
    inline void _Construct ( const _Char_or_ptr _Arg, const size_type _Count ) {
        auto & _My_data = _Mypair . _Myval2;
        ;

        if constexpr ( _Strat == _Construct_strategy :: _From_char ) {
            ;
        } else {
            ;
        }

        if ( _Count > max_size ( ) ) {
            _Xlen_string ( );
        }

        auto & _Al = _Getal ( );
        auto && _Alproxy = static_cast < _Rebind_alloc_t < _Alty, _Container_proxy >> ( _Al );
        _Container_proxy_ptr < _Alty > _Proxy ( _Alproxy, _My_data );

        if ( _Count < _BUF_SIZE ) {
            _My_data . _Mysize = _Count;
            _My_data . _Myres = _BUF_SIZE - 1;

            if constexpr ( _Strat == _Construct_strategy :: _From_char ) {
                _Traits :: assign ( _My_data . _Bx . _Buf, _Count, _Arg );
                _Traits :: assign ( _My_data . _Bx . _Buf [ _Count ], _Elem ( ) );
            } else if constexpr ( _Strat == _Construct_strategy :: _From_ptr ) {
                _Traits :: copy ( _My_data . _Bx . _Buf, _Arg, _Count );
                _Traits :: assign ( _My_data . _Bx . _Buf [ _Count ], _Elem ( ) );
            } else {



                _Traits :: copy ( _My_data . _Bx . _Buf, _Arg, _BUF_SIZE );

            }

            _Proxy . _Release ( );
            return;
        }

        _My_data . _Myres = _BUF_SIZE - 1;
        const size_type _New_capacity = _Calculate_growth ( _Count );
        const pointer _New_ptr = _Al . allocate ( _New_capacity + 1 );
        _Construct_in_place ( _My_data . _Bx . _Ptr, _New_ptr );

        _Start_element_lifetimes ( _Unfancy ( _New_ptr ), _New_capacity + 1 );

        _My_data . _Mysize = _Count;
        _My_data . _Myres = _New_capacity;
        if constexpr ( _Strat == _Construct_strategy :: _From_char ) {
            _Traits :: assign ( _Unfancy ( _New_ptr ), _Count, _Arg );
            _Traits :: assign ( _Unfancy ( _New_ptr ) [ _Count ], _Elem ( ) );
        } else if constexpr ( _Strat == _Construct_strategy :: _From_ptr ) {
            _Traits :: copy ( _Unfancy ( _New_ptr ), _Arg, _Count );
            _Traits :: assign ( _Unfancy ( _New_ptr ) [ _Count ], _Elem ( ) );
        } else {
            _Traits :: copy ( _Unfancy ( _New_ptr ), _Arg, _Count + 1 );
        }

        ;
        _Proxy . _Release ( );
    }

    template < class _Iter, class _Sent, class _Size = nullptr_t >
    inline void _Construct_from_iter ( _Iter _First, const _Sent _Last, _Size _Count = { } ) {





        auto & _My_data = _Mypair . _Myval2;
        auto & _Al = _Getal ( );
        auto && _Alproxy = static_cast < _Rebind_alloc_t < _Alty, _Container_proxy >> ( _Al );
        _Container_proxy_ptr < _Alty > _Proxy ( _Alproxy, _My_data );

        _My_data . _Mysize = 0;
        _My_data . _Myres = _BUF_SIZE - 1;

        if constexpr ( is_same_v < _Size, size_type > ) {
            if ( _Count > max_size ( ) ) {
                _Xlen_string ( );
            }

            if ( _Count >= _BUF_SIZE ) {
                const size_type _New_capacity = _Calculate_growth ( _Count );
                const pointer _New_ptr = _Al . allocate ( _New_capacity + 1 );
                _Construct_in_place ( _My_data . _Bx . _Ptr, _New_ptr );
                _My_data . _Myres = _New_capacity;

                _Start_element_lifetimes ( _Unfancy ( _New_ptr ), _New_capacity + 1 );
            }
        }

        _Tidy_deallocate_guard < basic_string > _Guard { this };
        for (; _First != _Last; ++ _First ) {
            if constexpr ( ! is_same_v < _Size, size_type > ) {
                if ( _My_data . _Mysize == _My_data . _Myres ) {
                    if ( _My_data . _Mysize == max_size ( ) ) {
                        _Xlen_string ( );
                    }

                    const auto _Old_ptr = _My_data . _Myptr ( );
                    const size_type _New_capacity = _Calculate_growth ( _My_data . _Mysize );
                    const pointer _New_ptr = _Al . allocate ( _New_capacity + 1 );

                    _Start_element_lifetimes ( _Unfancy ( _New_ptr ), _New_capacity + 1 );
                    _Traits :: copy ( _Unfancy ( _New_ptr ), _Old_ptr, _My_data . _Mysize );
                    if ( _My_data . _Myres >= _BUF_SIZE ) {
                        _Al . deallocate ( _My_data . _Bx . _Ptr, _My_data . _Myres + 1 );
                        _My_data . _Bx . _Ptr = _New_ptr;
                    } else {
                        _Construct_in_place ( _My_data . _Bx . _Ptr, _New_ptr );
                    }
                    _My_data . _Myres = _New_capacity;
                }
            }

            _Elem * const _Ptr = _My_data . _Myptr ( );
            _Traits :: assign ( _Ptr [ _My_data . _Mysize ], * _First );
            ++ _My_data . _Mysize;
        }

        _Elem * const _Ptr = _My_data . _Myptr ( );
        _Traits :: assign ( _Ptr [ _My_data . _Mysize ], _Elem ( ) );
        ;
        _Guard . _Target = nullptr;
        _Proxy . _Release ( );
    }

public :


















    inline basic_string ( basic_string && _Right ) noexcept
        : _Mypair ( _One_then_variadic_args_t { }, :: std :: move ( _Right . _Getal ( ) ) ) {
        _Mypair . _Myval2 . _Alloc_proxy ( static_cast < _Rebind_alloc_t < _Alty, _Container_proxy >> ( _Getal ( ) ) );
        _Take_contents ( _Right );
    }

    inline basic_string ( basic_string && _Right, const _Alloc & _Al ) noexcept (
        _Alty_traits :: is_always_equal :: value )
        : _Mypair ( _One_then_variadic_args_t { }, _Al ) {
        if constexpr ( ! _Alty_traits :: is_always_equal :: value ) {
            if ( _Getal ( ) != _Right . _Getal ( ) ) {
                _Construct < _Construct_strategy :: _From_string > (
                    _Right . _Mypair . _Myval2 . _Myptr ( ), _Right . _Mypair . _Myval2 . _Mysize );
                return;
            }
        }

        _Mypair . _Myval2 . _Alloc_proxy ( static_cast < _Rebind_alloc_t < _Alty, _Container_proxy >> ( _Getal ( ) ) );
        _Take_contents ( _Right );
    }

    inline basic_string ( _String_constructor_concat_tag, const basic_string & _Source_of_al,
        const _Elem * const _Left_ptr, const size_type _Left_size, const _Elem * const _Right_ptr,
        const size_type _Right_size )
        : _Mypair (
            _One_then_variadic_args_t { }, _Alty_traits :: select_on_container_copy_construction ( _Source_of_al . _Getal ( ) ) ) {
        ;
        ;
        ;
        const auto _New_size = static_cast < size_type > ( _Left_size + _Right_size );
        size_type _New_capacity = _BUF_SIZE - 1;
        auto & _My_data = _Mypair . _Myval2;
        _Elem * _Ptr = _My_data . _Bx . _Buf;
        auto && _Alproxy = static_cast < _Rebind_alloc_t < _Alty, _Container_proxy >> ( _Getal ( ) );
        _Container_proxy_ptr < _Alty > _Proxy ( _Alproxy, _My_data );

        if ( _New_capacity < _New_size ) {
            _New_capacity = _Calculate_growth ( _New_size, _BUF_SIZE - 1, max_size ( ) );
            const pointer _Fancyptr = _Getal ( ) . allocate ( _New_capacity + 1 );
            _Ptr = _Unfancy ( _Fancyptr );
            _Construct_in_place ( _My_data . _Bx . _Ptr, _Fancyptr );

            _Start_element_lifetimes ( _Ptr, _New_capacity + 1 );
        }

        _My_data . _Mysize = _New_size;
        _My_data . _Myres = _New_capacity;
        _Traits :: copy ( _Ptr, _Left_ptr, _Left_size );
        _Traits :: copy ( _Ptr + static_cast < ptrdiff_t > ( _Left_size ), _Right_ptr, _Right_size );
        _Traits :: assign ( _Ptr [ _New_size ], _Elem ( ) );
        ;
        _Proxy . _Release ( );
    }

    inline basic_string ( _String_constructor_concat_tag, basic_string & _Left, basic_string & _Right )
        : _Mypair ( _One_then_variadic_args_t { }, _Left . _Getal ( ) ) {
        auto & _My_data = _Mypair . _Myval2;
        auto & _Left_data = _Left . _Mypair . _Myval2;
        auto & _Right_data = _Right . _Mypair . _Myval2;
        _Left_data . _Orphan_all ( );
        _Right_data . _Orphan_all ( );
        const auto _Left_size = _Left_data . _Mysize;
        const auto _Right_size = _Right_data . _Mysize;

        const auto _Left_capacity = _Left_data . _Myres;
        const auto _Right_capacity = _Right_data . _Myres;

        const auto _New_size = static_cast < size_type > ( _Left_size + _Right_size );
        const bool _Fits_in_left = _Right_size <= _Left_capacity - _Left_size;
        if ( _Fits_in_left && _Right_capacity <= _Left_capacity ) {

            _My_data . _Alloc_proxy ( static_cast < _Rebind_alloc_t < _Alty, _Container_proxy >> ( _Getal ( ) ) );
            _Take_contents ( _Left );
            const auto _Ptr = _My_data . _Myptr ( );
            ;
            _Traits :: copy ( _Ptr + _Left_size, _Right_data . _Myptr ( ), _Right_size + 1 );
            _My_data . _Mysize = _New_size;
            return;
        }

        const bool _Fits_in_right = _Left_size <= _Right_capacity - _Right_size;
        if ( _Allocators_equal ( _Getal ( ), _Right . _Getal ( ) ) && _Fits_in_right ) {









            ;
            _My_data . _Alloc_proxy ( static_cast < _Rebind_alloc_t < _Alty, _Container_proxy >> ( _Getal ( ) ) );
            _Take_contents ( _Right );
            const auto _Ptr = _Unfancy ( _My_data . _Bx . _Ptr );
            ;
            _Traits :: move ( _Ptr + _Left_size, _Ptr, _Right_size + 1 );
            _Traits :: copy ( _Ptr, _Left_data . _Myptr ( ), _Left_size );
            _My_data . _Mysize = _New_size;
            return;
        }


        const auto _Max = max_size ( );
        if ( _Max - _Left_size < _Right_size ) {
            _Xlen_string ( );
        }

        const auto _New_capacity = _Calculate_growth ( _New_size, _BUF_SIZE - 1, _Max );
        auto && _Alproxy = static_cast < _Rebind_alloc_t < _Alty, _Container_proxy >> ( _Getal ( ) );
        _Container_proxy_ptr < _Alty > _Proxy ( _Alproxy, _My_data );
        const pointer _Fancyptr = _Getal ( ) . allocate ( _New_capacity + 1 );

        _Start_element_lifetimes ( _Unfancy ( _Fancyptr ), _New_capacity + 1 );
        _Construct_in_place ( _My_data . _Bx . _Ptr, _Fancyptr );
        _My_data . _Mysize = _New_size;
        _My_data . _Myres = _New_capacity;
        const auto _Ptr = _Unfancy ( _Fancyptr );
        _Traits :: copy ( _Ptr, _Left_data . _Myptr ( ), _Left_size );
        _Traits :: copy ( _Ptr + _Left_size, _Right_data . _Myptr ( ), _Right_size + 1 );
        ;
        _Proxy . _Release ( );
    }














































































    inline basic_string & operator = ( basic_string && _Right ) noexcept (
        _Choose_pocma_v < _Alty > != _Pocma_values :: _No_propagate_allocators ) {
        if ( this == :: std :: addressof ( _Right ) ) {
            return * this;
        }

        auto & _Al = _Getal ( );
        auto & _Right_al = _Right . _Getal ( );
        constexpr auto _Pocma_val = _Choose_pocma_v < _Alty >;
        if constexpr ( _Pocma_val == _Pocma_values :: _Propagate_allocators ) {
            if ( _Al != _Right_al ) {

                _Mypair . _Myval2 . _Orphan_all ( );
                _Mypair . _Myval2 . _Reload_proxy ( static_cast < _Rebind_alloc_t < _Alty, _Container_proxy >> ( _Al ), static_cast < _Rebind_alloc_t < _Alty, _Container_proxy >> ( _Right_al ) );
            }
        } else if constexpr ( _Pocma_val == _Pocma_values :: _No_propagate_allocators ) {
            if ( _Al != _Right_al ) {
                assign ( _Right . _Mypair . _Myval2 . _Myptr ( ), _Right . _Mypair . _Myval2 . _Mysize );
                return * this;
            }
        }

        _Tidy_deallocate ( );
        _Pocma ( _Al, _Right_al );
        _Take_contents ( _Right );
        return * this;
    }

    inline basic_string & assign ( basic_string && _Right ) noexcept ( noexcept ( * this = :: std :: move ( _Right ) ) ) {
        * this = :: std :: move ( _Right );
        return * this;
    }

private :
    void _Memcpy_val_from ( const basic_string & _Right ) noexcept {
        ;
        const auto _My_data_mem =
            reinterpret_cast < unsigned char * > ( :: std :: addressof ( _Mypair . _Myval2 ) ) + _Memcpy_val_offset;
        const auto _Right_data_mem =
            reinterpret_cast < const unsigned char * > ( :: std :: addressof ( _Right . _Mypair . _Myval2 ) ) + _Memcpy_val_offset;
        :: memcpy ( _My_data_mem, _Right_data_mem, _Memcpy_val_size );
    }

    inline void _Take_contents ( basic_string & _Right ) noexcept {





        auto & _My_data = _Mypair . _Myval2;
        auto & _Right_data = _Right . _Mypair . _Myval2;


        if constexpr ( _Can_memcpy_val ) {



            {

                if ( _Right_data . _Large_string_engaged ( ) ) {

                    _Swap_proxy_and_iterators ( _Right );
                } else {
                    _Right_data . _Orphan_all ( );
                }


                _Memcpy_val_from ( _Right );
                _Right . _Tidy_init ( );
                return;
            }
        }


        if ( _Right_data . _Large_string_engaged ( ) ) {
            _Construct_in_place ( _My_data . _Bx . _Ptr, _Right_data . _Bx . _Ptr );
            _Right_data . _Bx . _Ptr = nullptr;
            _Swap_proxy_and_iterators ( _Right );
        } else {
            _My_data . _Activate_SSO_buffer ( );
            _Traits :: copy ( _My_data . _Bx . _Buf, _Right_data . _Bx . _Buf, _Right_data . _Mysize + 1 );
            _Right_data . _Orphan_all ( );
        }

        _My_data . _Myres = _Right_data . _Myres;
        _My_data . _Mysize = _Right_data . _Mysize;

        _Right . _Tidy_init ( );
    }























public :
    inline basic_string ( initializer_list < _Elem > _Ilist, const _Alloc & _Al = allocator_type ( ) )
        : _Mypair ( _One_then_variadic_args_t { }, _Al ) {
        auto && _Alproxy = static_cast < _Rebind_alloc_t < _Alty, _Container_proxy >> ( _Getal ( ) );
        _Container_proxy_ptr < _Alty > _Proxy ( _Alproxy, _Mypair . _Myval2 );
        _Tidy_init ( );
        assign ( _Ilist . begin ( ), _Convert_size < size_type > ( _Ilist . size ( ) ) );
        _Proxy . _Release ( );
    }

    inline basic_string & operator = ( initializer_list < _Elem > _Ilist ) {
        return assign ( _Ilist . begin ( ), _Convert_size < size_type > ( _Ilist . size ( ) ) );
    }

    inline basic_string & operator += ( initializer_list < _Elem > _Ilist ) {
        return append ( _Ilist . begin ( ), _Convert_size < size_type > ( _Ilist . size ( ) ) );
    }

    inline basic_string & assign ( initializer_list < _Elem > _Ilist ) {
        return assign ( _Ilist . begin ( ), _Convert_size < size_type > ( _Ilist . size ( ) ) );
    }

    inline basic_string & append ( initializer_list < _Elem > _Ilist ) {
        return append ( _Ilist . begin ( ), _Convert_size < size_type > ( _Ilist . size ( ) ) );
    }

    inline iterator insert ( const const_iterator _Where, const initializer_list < _Elem > _Ilist ) {

        do { if ( _Where . _Getcont ( ) == :: std :: addressof ( _Mypair . _Myval2 ) ) { } else { do { ( void ) ( ( 1 != _CrtDbgReport ( 2, "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\xstring", 3131, 0, "%s", "string iterator incompatible" ) ) || ( __debugbreak ( ), 0 ) ); :: _invalid_parameter ( L"\x22\x73\x74\x72\x69\x6e\x67\x20\x69\x74\x65\x72\x61\x74\x6f\x72\x20\x69\x6e\x63\x6f\x6d\x70\x61\x74\x69\x62\x6c\x65\x22", L"", L"\x45\x3a\x5c\x56\x69\x73\x75\x61\x6c\x53\x74\x75\x64\x69\x6f\x5c\x32\x30\x32\x32\x5c\x50\x72\x65\x76\x69\x65\x77\x5c\x56\x43\x5c" L"\x54\x6f\x6f\x6c\x73\x5c\x4d\x53\x56\x43\x5c\x31\x34\x2e\x33\x37\x2e\x33\x32\x37\x30\x35\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x78" L"\x73\x74\x72\x69\x6e\x67", 3131, 0 ); } while ( false ); }; } while ( false );

        const auto _Off = static_cast < size_type > ( _Unfancy ( _Where . _Ptr ) - _Mypair . _Myval2 . _Myptr ( ) );
        insert ( _Off, _Ilist . begin ( ), _Convert_size < size_type > ( _Ilist . size ( ) ) );
        return begin ( ) + static_cast < difference_type > ( _Off );
    }

    inline basic_string & replace (
        const const_iterator _First, const const_iterator _Last, const initializer_list < _Elem > _Ilist ) {

        _Adl_verify_range ( _First, _Last );

        do { if ( _First . _Getcont ( ) == :: std :: addressof ( _Mypair . _Myval2 ) ) { } else { do { ( void ) ( ( 1 != _CrtDbgReport ( 2, "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\xstring", 3143, 0, "%s", "string iterators incompatible" ) ) || ( __debugbreak ( ), 0 ) ); :: _invalid_parameter ( L"\x22\x73\x74\x72\x69\x6e\x67\x20\x69\x74\x65\x72\x61\x74\x6f\x72\x73\x20\x69\x6e\x63\x6f\x6d\x70\x61\x74\x69\x62\x6c\x65\x22", L"", L"\x45\x3a\x5c\x56\x69\x73\x75\x61\x6c\x53\x74\x75\x64\x69\x6f\x5c\x32\x30\x32\x32\x5c\x50\x72\x65\x76\x69\x65\x77\x5c\x56\x43\x5c" L"\x54\x6f\x6f\x6c\x73\x5c\x4d\x53\x56\x43\x5c\x31\x34\x2e\x33\x37\x2e\x33\x32\x37\x30\x35\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x78" L"\x73\x74\x72\x69\x6e\x67", 3143, 0 ); } while ( false ); }; } while ( false );

        const auto _Offset = static_cast < size_type > ( _Unfancy ( _First . _Ptr ) - _Mypair . _Myval2 . _Myptr ( ) );
        const auto _Length = static_cast < size_type > ( _Last . _Ptr - _First . _Ptr );
        return replace ( _Offset, _Length, _Ilist . begin ( ), _Convert_size < size_type > ( _Ilist . size ( ) ) );
    }

    inline ~ basic_string ( ) noexcept {
        _Tidy_deallocate ( );

        auto && _Alproxy = static_cast < _Rebind_alloc_t < _Alty, _Container_proxy >> ( _Getal ( ) );
        const auto _To_delete = _Mypair . _Myval2 . _Myproxy;
        _Mypair . _Myval2 . _Myproxy = nullptr;
        _Delete_plain_internal ( _Alproxy, _To_delete );

    }

    static constexpr auto npos { static_cast < size_type > ( - 1 ) };

private :
    inline void _Copy_assign_val_from_small ( const basic_string & _Right ) {

        _Tidy_deallocate ( );

        if constexpr ( _Can_memcpy_val ) {



            {
                _Memcpy_val_from ( _Right );
                return;
            }
        }


        auto & _My_data = _Mypair . _Myval2;
        auto & _Right_data = _Right . _Mypair . _Myval2;

        _Traits :: copy ( _My_data . _Bx . _Buf, _Right_data . _Bx . _Buf, _Right_data . _Mysize + 1 );
        _My_data . _Mysize = _Right_data . _Mysize;
        _My_data . _Myres = _Right_data . _Myres;
    }

public :
    inline basic_string & operator = ( const basic_string & _Right ) {
        if ( this == :: std :: addressof ( _Right ) ) {
            return * this;
        }

        auto & _Al = _Getal ( );
        const auto & _Right_al = _Right . _Getal ( );
        if constexpr ( _Choose_pocca_v < _Alty > ) {
            if ( _Al != _Right_al ) {
                auto && _Alproxy = static_cast < _Rebind_alloc_t < _Alty, _Container_proxy >> ( _Al );
                auto && _Right_alproxy = static_cast < _Rebind_alloc_t < _Alty, _Container_proxy >> ( _Right_al );
                _Container_proxy_ptr < _Alty > _New_proxy ( _Right_alproxy, _Leave_proxy_unbound { } );

                if ( _Right . _Mypair . _Myval2 . _Large_string_engaged ( ) ) {
                    const auto _New_size = _Right . _Mypair . _Myval2 . _Mysize;
                    const auto _New_capacity = _Calculate_growth ( _New_size, 0, _Right . max_size ( ) );
                    auto _Right_al_non_const = _Right_al;
                    const auto _New_ptr = _Right_al_non_const . allocate ( _New_capacity + 1 );

                    _Start_element_lifetimes ( _Unfancy ( _New_ptr ), _New_size + 1 );

                    _Traits :: copy ( _Unfancy ( _New_ptr ), _Unfancy ( _Right . _Mypair . _Myval2 . _Bx . _Ptr ), _New_size + 1 );
                    _Tidy_deallocate ( );
                    _Mypair . _Myval2 . _Bx . _Ptr = _New_ptr;
                    _Mypair . _Myval2 . _Mysize = _New_size;
                    _Mypair . _Myval2 . _Myres = _New_capacity;
                } else {
                    _Copy_assign_val_from_small ( _Right );
                }

                _Pocca ( _Al, _Right_al );
                _New_proxy . _Bind ( _Alproxy, :: std :: addressof ( _Mypair . _Myval2 ) );
                return * this;
            }
        }

        _Pocca ( _Al, _Right_al );
        assign ( _Right . _Mypair . _Myval2 . _Myptr ( ), _Right . _Mypair . _Myval2 . _Mysize );
        return * this;
    }








    inline basic_string & operator = ( const _Elem * const _Ptr ) {
        return assign ( _Ptr );
    }





    inline basic_string & operator = ( const _Elem _Ch ) {
        ;
        _Mypair . _Myval2 . _Mysize = 1;
        _Elem * const _Ptr = _Mypair . _Myval2 . _Myptr ( );
        _Traits :: assign ( _Ptr [ 0 ], _Ch );
        _Traits :: assign ( _Ptr [ 1 ], _Elem ( ) );
        return * this;
    }

    inline basic_string & operator += ( const basic_string & _Right ) {
        return append ( _Right );
    }








    inline basic_string & operator += ( const _Elem * const _Ptr ) {
        return append ( _Ptr );
    }

    inline basic_string & operator += ( _Elem _Ch ) {
        push_back ( _Ch );
        return * this;
    }

    inline basic_string & append ( const basic_string & _Right ) {
        return append ( _Right . _Mypair . _Myval2 . _Myptr ( ), _Right . _Mypair . _Myval2 . _Mysize );
    }

    inline basic_string & append ( const basic_string & _Right, const size_type _Roff, size_type _Count = npos ) {

        _Right . _Mypair . _Myval2 . _Check_offset ( _Roff );
        _Count = _Right . _Mypair . _Myval2 . _Clamp_suffix_size ( _Roff, _Count );
        return append ( _Right . _Mypair . _Myval2 . _Myptr ( ) + _Roff, _Count );
    }

















    inline basic_string & append (
          const _Elem * const _Ptr, const size_type _Count ) {

        const size_type _Old_size = _Mypair . _Myval2 . _Mysize;
        if ( _Count <= _Mypair . _Myval2 . _Myres - _Old_size ) {
            ;
            _Mypair . _Myval2 . _Mysize = _Old_size + _Count;
            _Elem * const _Old_ptr = _Mypair . _Myval2 . _Myptr ( );
            _Traits :: move ( _Old_ptr + _Old_size, _Ptr, _Count );
            _Traits :: assign ( _Old_ptr [ _Old_size + _Count ], _Elem ( ) );
            return * this;
        }

        return _Reallocate_grow_by (
            _Count,
            [ ] ( _Elem * const _New_ptr, const _Elem * const _Old_ptr, const size_type _Old_size, const _Elem * const _Ptr,
                const size_type _Count ) {
                _Traits :: copy ( _New_ptr, _Old_ptr, _Old_size );
                _Traits :: copy ( _New_ptr + _Old_size, _Ptr, _Count );
                _Traits :: assign ( _New_ptr [ _Old_size + _Count ], _Elem ( ) );
            },
            _Ptr, _Count );
    }

    inline basic_string & append ( const _Elem * const _Ptr ) {
        return append ( _Ptr, _Convert_size < size_type > ( _Traits :: length ( _Ptr ) ) );
    }

    inline basic_string & append ( const size_type _Count, const _Elem _Ch ) {

        const size_type _Old_size = _Mypair . _Myval2 . _Mysize;
        if ( _Count <= _Mypair . _Myval2 . _Myres - _Old_size ) {
            ;
            _Mypair . _Myval2 . _Mysize = _Old_size + _Count;
            _Elem * const _Old_ptr = _Mypair . _Myval2 . _Myptr ( );
            _Traits :: assign ( _Old_ptr + _Old_size, _Count, _Ch );
            _Traits :: assign ( _Old_ptr [ _Old_size + _Count ], _Elem ( ) );
            return * this;
        }

        return _Reallocate_grow_by (
            _Count,
            [ ] ( _Elem * const _New_ptr, const _Elem * const _Old_ptr, const size_type _Old_size, const size_type _Count,
                const _Elem _Ch ) {
                _Traits :: copy ( _New_ptr, _Old_ptr, _Old_size );
                _Traits :: assign ( _New_ptr + _Old_size, _Count, _Ch );
                _Traits :: assign ( _New_ptr [ _Old_size + _Count ], _Elem ( ) );
            },
            _Count, _Ch );
    }

    template < class _Iter, enable_if_t < _Is_iterator_v < _Iter >, int > = 0 >
    inline basic_string & append ( const _Iter _First, const _Iter _Last ) {

        _Adl_verify_range ( _First, _Last );
        const auto _UFirst = _Get_unwrapped ( _First );
        const auto _ULast = _Get_unwrapped ( _Last );
        if constexpr ( _Is_elem_cptr < decltype ( _UFirst ) > :: value ) {
            return append ( _UFirst, _Convert_size < size_type > ( static_cast < size_t > ( _ULast - _UFirst ) ) );
        } else {
            const basic_string _Right ( _UFirst, _ULast, get_allocator ( ) );
            return append ( _Right . _Mypair . _Myval2 . _Myptr ( ), _Right . _Mypair . _Myval2 . _Mysize );
        }
    }














    inline basic_string & assign ( const basic_string & _Right ) {
        * this = _Right;
        return * this;
    }

    inline basic_string & assign ( const basic_string & _Right, const size_type _Roff, size_type _Count = npos ) {

        _Right . _Mypair . _Myval2 . _Check_offset ( _Roff );
        _Count = _Right . _Mypair . _Myval2 . _Clamp_suffix_size ( _Roff, _Count );
        return assign ( _Right . _Mypair . _Myval2 . _Myptr ( ) + _Roff, _Count );
    }

















    inline basic_string & assign (
          const _Elem * const _Ptr, const size_type _Count ) {

        if ( _Count <= _Mypair . _Myval2 . _Myres ) {
            ;
            _Elem * const _Old_ptr = _Mypair . _Myval2 . _Myptr ( );
            _Mypair . _Myval2 . _Mysize = _Count;
            _Traits :: move ( _Old_ptr, _Ptr, _Count );
            _Traits :: assign ( _Old_ptr [ _Count ], _Elem ( ) );
            return * this;
        }

        return _Reallocate_for (
            _Count,
            [ ] ( _Elem * const _New_ptr, const size_type _Count, const _Elem * const _Ptr ) {
                _Traits :: copy ( _New_ptr, _Ptr, _Count );
                _Traits :: assign ( _New_ptr [ _Count ], _Elem ( ) );
            },
            _Ptr );
    }

    inline basic_string & assign ( const _Elem * const _Ptr ) {
        return assign ( _Ptr, _Convert_size < size_type > ( _Traits :: length ( _Ptr ) ) );
    }

    inline basic_string & assign ( const size_type _Count, const _Elem _Ch ) {

        if ( _Count <= _Mypair . _Myval2 . _Myres ) {
            ;
            _Elem * const _Old_ptr = _Mypair . _Myval2 . _Myptr ( );
            _Mypair . _Myval2 . _Mysize = _Count;
            _Traits :: assign ( _Old_ptr, _Count, _Ch );
            _Traits :: assign ( _Old_ptr [ _Count ], _Elem ( ) );
            return * this;
        }

        return _Reallocate_for (
            _Count,
            [ ] ( _Elem * const _New_ptr, const size_type _Count, const _Elem _Ch ) {
                _Traits :: assign ( _New_ptr, _Count, _Ch );
                _Traits :: assign ( _New_ptr [ _Count ], _Elem ( ) );
            },
            _Ch );
    }

    template < class _Iter, enable_if_t < _Is_iterator_v < _Iter >, int > = 0 >
    inline basic_string & assign ( const _Iter _First, const _Iter _Last ) {
        _Adl_verify_range ( _First, _Last );
        const auto _UFirst = _Get_unwrapped ( _First );
        const auto _ULast = _Get_unwrapped ( _Last );
        if constexpr ( _Is_elem_cptr < decltype ( _UFirst ) > :: value ) {
            return assign ( _UFirst, _Convert_size < size_type > ( static_cast < size_t > ( _ULast - _UFirst ) ) );
        } else {
            basic_string _Right ( _UFirst, _ULast, get_allocator ( ) );
            if ( _Mypair . _Myval2 . _Myres < _Right . _Mypair . _Myval2 . _Myres ) {
                _Mypair . _Myval2 . _Orphan_all ( );
                _Swap_data ( _Right );
                return * this;
            } else {
                return assign ( _Right . _Mypair . _Myval2 . _Myptr ( ), _Right . _Mypair . _Myval2 . _Mysize );
            }
        }
    }




















    inline basic_string & insert ( const size_type _Off, const basic_string & _Right ) {

        return insert ( _Off, _Right . _Mypair . _Myval2 . _Myptr ( ), _Right . _Mypair . _Myval2 . _Mysize );
    }

    inline basic_string & insert (
        const size_type _Off, const basic_string & _Right, const size_type _Roff, size_type _Count = npos ) {

        _Right . _Mypair . _Myval2 . _Check_offset ( _Roff );
        _Count = _Right . _Mypair . _Myval2 . _Clamp_suffix_size ( _Roff, _Count );
        return insert ( _Off, _Right . _Mypair . _Myval2 . _Myptr ( ) + _Roff, _Count );
    }


















    inline basic_string & insert (
        const size_type _Off, const _Elem * const _Ptr, const size_type _Count ) {

        _Mypair . _Myval2 . _Check_offset ( _Off );
        const size_type _Old_size = _Mypair . _Myval2 . _Mysize;






        const bool _Check_overlap = _Count <= _Mypair . _Myval2 . _Myres - _Old_size;


        if ( _Check_overlap ) {
            ;
            _Mypair . _Myval2 . _Mysize = _Old_size + _Count;
            _Elem * const _Old_ptr = _Mypair . _Myval2 . _Myptr ( );
            _Elem * const _Insert_at = _Old_ptr + _Off;


            size_type _Ptr_shifted_after;
            if ( _Ptr + _Count <= _Insert_at || _Ptr > _Old_ptr + _Old_size ) {

                _Ptr_shifted_after = _Count;
            } else if ( _Insert_at <= _Ptr ) {
                _Ptr_shifted_after = 0;
            } else {
                _Ptr_shifted_after = static_cast < size_type > ( _Insert_at - _Ptr );
            }

            _Traits :: move ( _Insert_at + _Count, _Insert_at, _Old_size - _Off + 1 );
            _Traits :: copy ( _Insert_at, _Ptr, _Ptr_shifted_after );
            _Traits :: copy (
                _Insert_at + _Ptr_shifted_after, _Ptr + _Count + _Ptr_shifted_after, _Count - _Ptr_shifted_after );
            return * this;
        }

        return _Reallocate_grow_by (
            _Count,
            [ ] ( _Elem * const _New_ptr, const _Elem * const _Old_ptr, const size_type _Old_size, const size_type _Off,
                const _Elem * const _Ptr, const size_type _Count ) {
                _Traits :: copy ( _New_ptr, _Old_ptr, _Off );
                _Traits :: copy ( _New_ptr + _Off, _Ptr, _Count );
                _Traits :: copy ( _New_ptr + _Off + _Count, _Old_ptr + _Off, _Old_size - _Off + 1 );
            },
            _Off, _Ptr, _Count );
    }

    inline basic_string & insert ( const size_type _Off, const _Elem * const _Ptr ) {

        return insert ( _Off, _Ptr, _Convert_size < size_type > ( _Traits :: length ( _Ptr ) ) );
    }

    inline basic_string & insert (
        const size_type _Off, const size_type _Count, const _Elem _Ch ) {

        _Mypair . _Myval2 . _Check_offset ( _Off );
        const size_type _Old_size = _Mypair . _Myval2 . _Mysize;
        if ( _Count <= _Mypair . _Myval2 . _Myres - _Old_size ) {
            ;
            _Mypair . _Myval2 . _Mysize = _Old_size + _Count;
            _Elem * const _Old_ptr = _Mypair . _Myval2 . _Myptr ( );
            _Elem * const _Insert_at = _Old_ptr + _Off;
            _Traits :: move ( _Insert_at + _Count, _Insert_at, _Old_size - _Off + 1 );
            _Traits :: assign ( _Insert_at, _Count, _Ch );
            return * this;
        }

        return _Reallocate_grow_by (
            _Count,
            [ ] ( _Elem * const _New_ptr, const _Elem * const _Old_ptr, const size_type _Old_size, const size_type _Off,
                const size_type _Count, const _Elem _Ch ) {
                _Traits :: copy ( _New_ptr, _Old_ptr, _Off );
                _Traits :: assign ( _New_ptr + _Off, _Count, _Ch );
                _Traits :: copy ( _New_ptr + _Off + _Count, _Old_ptr + _Off, _Old_size - _Off + 1 );
            },
            _Off, _Count, _Ch );
    }

    inline iterator insert ( const const_iterator _Where, const _Elem _Ch ) {

        do { if ( _Where . _Getcont ( ) == :: std :: addressof ( _Mypair . _Myval2 ) ) { } else { do { ( void ) ( ( 1 != _CrtDbgReport ( 2, "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\xstring", 3600, 0, "%s", "string iterator incompatible" ) ) || ( __debugbreak ( ), 0 ) ); :: _invalid_parameter ( L"\x22\x73\x74\x72\x69\x6e\x67\x20\x69\x74\x65\x72\x61\x74\x6f\x72\x20\x69\x6e\x63\x6f\x6d\x70\x61\x74\x69\x62\x6c\x65\x22", L"", L"\x45\x3a\x5c\x56\x69\x73\x75\x61\x6c\x53\x74\x75\x64\x69\x6f\x5c\x32\x30\x32\x32\x5c\x50\x72\x65\x76\x69\x65\x77\x5c\x56\x43\x5c" L"\x54\x6f\x6f\x6c\x73\x5c\x4d\x53\x56\x43\x5c\x31\x34\x2e\x33\x37\x2e\x33\x32\x37\x30\x35\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x78" L"\x73\x74\x72\x69\x6e\x67", 3600, 0 ); } while ( false ); }; } while ( false );

        const auto _Off = static_cast < size_type > ( _Unfancy ( _Where . _Ptr ) - _Mypair . _Myval2 . _Myptr ( ) );
        insert ( _Off, 1, _Ch );
        return begin ( ) + static_cast < difference_type > ( _Off );
    }

    inline iterator insert (
        const const_iterator _Where, const size_type _Count, const _Elem _Ch ) {


        do { if ( _Where . _Getcont ( ) == :: std :: addressof ( _Mypair . _Myval2 ) ) { } else { do { ( void ) ( ( 1 != _CrtDbgReport ( 2, "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\xstring", 3611, 0, "%s", "string iterator incompatible" ) ) || ( __debugbreak ( ), 0 ) ); :: _invalid_parameter ( L"\x22\x73\x74\x72\x69\x6e\x67\x20\x69\x74\x65\x72\x61\x74\x6f\x72\x20\x69\x6e\x63\x6f\x6d\x70\x61\x74\x69\x62\x6c\x65\x22", L"", L"\x45\x3a\x5c\x56\x69\x73\x75\x61\x6c\x53\x74\x75\x64\x69\x6f\x5c\x32\x30\x32\x32\x5c\x50\x72\x65\x76\x69\x65\x77\x5c\x56\x43\x5c" L"\x54\x6f\x6f\x6c\x73\x5c\x4d\x53\x56\x43\x5c\x31\x34\x2e\x33\x37\x2e\x33\x32\x37\x30\x35\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x78" L"\x73\x74\x72\x69\x6e\x67", 3611, 0 ); } while ( false ); }; } while ( false );

        const auto _Off = static_cast < size_type > ( _Unfancy ( _Where . _Ptr ) - _Mypair . _Myval2 . _Myptr ( ) );
        insert ( _Off, _Count, _Ch );
        return begin ( ) + static_cast < difference_type > ( _Off );
    }

    template < class _Iter, enable_if_t < _Is_iterator_v < _Iter >, int > = 0 >
    inline iterator insert ( const const_iterator _Where, const _Iter _First, const _Iter _Last ) {


        do { if ( _Where . _Getcont ( ) == :: std :: addressof ( _Mypair . _Myval2 ) ) { } else { do { ( void ) ( ( 1 != _CrtDbgReport ( 2, "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\xstring", 3622, 0, "%s", "string iterator incompatible" ) ) || ( __debugbreak ( ), 0 ) ); :: _invalid_parameter ( L"\x22\x73\x74\x72\x69\x6e\x67\x20\x69\x74\x65\x72\x61\x74\x6f\x72\x20\x69\x6e\x63\x6f\x6d\x70\x61\x74\x69\x62\x6c\x65\x22", L"", L"\x45\x3a\x5c\x56\x69\x73\x75\x61\x6c\x53\x74\x75\x64\x69\x6f\x5c\x32\x30\x32\x32\x5c\x50\x72\x65\x76\x69\x65\x77\x5c\x56\x43\x5c" L"\x54\x6f\x6f\x6c\x73\x5c\x4d\x53\x56\x43\x5c\x31\x34\x2e\x33\x37\x2e\x33\x32\x37\x30\x35\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x78" L"\x73\x74\x72\x69\x6e\x67", 3622, 0 ); } while ( false ); }; } while ( false );

        const auto _Off = static_cast < size_type > ( _Unfancy ( _Where . _Ptr ) - _Mypair . _Myval2 . _Myptr ( ) );
        _Adl_verify_range ( _First, _Last );
        const auto _UFirst = _Get_unwrapped ( _First );
        const auto _ULast = _Get_unwrapped ( _Last );
        if constexpr ( _Is_elem_cptr < decltype ( _UFirst ) > :: value ) {
            insert ( _Off, _UFirst, _Convert_size < size_type > ( static_cast < size_t > ( _ULast - _UFirst ) ) );
        } else {
            const basic_string _Right ( _UFirst, _ULast, get_allocator ( ) );
            insert ( _Off, _Right . _Mypair . _Myval2 . _Myptr ( ), _Right . _Mypair . _Myval2 . _Mysize );
        }

        return begin ( ) + static_cast < difference_type > ( _Off );
    }





















    inline basic_string & erase ( const size_type _Off = 0 ) {
        _Mypair . _Myval2 . _Check_offset ( _Off );
        _Eos ( _Off );
        return * this;
    }

private :
    inline basic_string & _Erase_noexcept ( const size_type _Off, size_type _Count ) noexcept {
        _Count = _Mypair . _Myval2 . _Clamp_suffix_size ( _Off, _Count );
        const size_type _Old_size = _Mypair . _Myval2 . _Mysize;
        _Elem * const _My_ptr = _Mypair . _Myval2 . _Myptr ( );
        _Elem * const _Erase_at = _My_ptr + _Off;
        const size_type _New_size = _Old_size - _Count;
        _Traits :: move ( _Erase_at, _Erase_at + _Count, _New_size - _Off + 1 );
        ;
        _Mypair . _Myval2 . _Mysize = _New_size;
        return * this;
    }

public :
    inline basic_string & erase ( const size_type _Off, const size_type _Count ) {

        _Mypair . _Myval2 . _Check_offset ( _Off );
        return _Erase_noexcept ( _Off, _Count );
    }

    inline iterator erase ( const const_iterator _Where ) noexcept {

        do { if ( _Where . _Getcont ( ) == :: std :: addressof ( _Mypair . _Myval2 ) ) { } else { do { ( void ) ( ( 1 != _CrtDbgReport ( 2, "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\xstring", 3686, 0, "%s", "string iterator incompatible" ) ) || ( __debugbreak ( ), 0 ) ); :: _invalid_parameter ( L"\x22\x73\x74\x72\x69\x6e\x67\x20\x69\x74\x65\x72\x61\x74\x6f\x72\x20\x69\x6e\x63\x6f\x6d\x70\x61\x74\x69\x62\x6c\x65\x22", L"", L"\x45\x3a\x5c\x56\x69\x73\x75\x61\x6c\x53\x74\x75\x64\x69\x6f\x5c\x32\x30\x32\x32\x5c\x50\x72\x65\x76\x69\x65\x77\x5c\x56\x43\x5c" L"\x54\x6f\x6f\x6c\x73\x5c\x4d\x53\x56\x43\x5c\x31\x34\x2e\x33\x37\x2e\x33\x32\x37\x30\x35\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x78" L"\x73\x74\x72\x69\x6e\x67", 3686, 0 ); } while ( false ); }; } while ( false );

        const auto _Off = static_cast < size_type > ( _Unfancy ( _Where . _Ptr ) - _Mypair . _Myval2 . _Myptr ( ) );
        _Erase_noexcept ( _Off, 1 );
        return begin ( ) + static_cast < difference_type > ( _Off );
    }

    inline iterator erase ( const const_iterator _First, const const_iterator _Last ) noexcept
     {
        _Adl_verify_range ( _First, _Last );

        do { if ( _First . _Getcont ( ) == :: std :: addressof ( _Mypair . _Myval2 ) ) { } else { do { ( void ) ( ( 1 != _CrtDbgReport ( 2, "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\xstring", 3697, 0, "%s", "string iterators incompatible" ) ) || ( __debugbreak ( ), 0 ) ); :: _invalid_parameter ( L"\x22\x73\x74\x72\x69\x6e\x67\x20\x69\x74\x65\x72\x61\x74\x6f\x72\x73\x20\x69\x6e\x63\x6f\x6d\x70\x61\x74\x69\x62\x6c\x65\x22", L"", L"\x45\x3a\x5c\x56\x69\x73\x75\x61\x6c\x53\x74\x75\x64\x69\x6f\x5c\x32\x30\x32\x32\x5c\x50\x72\x65\x76\x69\x65\x77\x5c\x56\x43\x5c" L"\x54\x6f\x6f\x6c\x73\x5c\x4d\x53\x56\x43\x5c\x31\x34\x2e\x33\x37\x2e\x33\x32\x37\x30\x35\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x78" L"\x73\x74\x72\x69\x6e\x67", 3697, 0 ); } while ( false ); }; } while ( false );

        const auto _Off = static_cast < size_type > ( _Unfancy ( _First . _Ptr ) - _Mypair . _Myval2 . _Myptr ( ) );
        _Erase_noexcept ( _Off, static_cast < size_type > ( _Last . _Ptr - _First . _Ptr ) );
        return begin ( ) + static_cast < difference_type > ( _Off );
    }

    inline void clear ( ) noexcept {
        _Eos ( 0 );
    }

    inline basic_string & replace ( const size_type _Off, const size_type _Nx, const basic_string & _Right ) {

        return replace ( _Off, _Nx, _Right . _Mypair . _Myval2 . _Myptr ( ), _Right . _Mypair . _Myval2 . _Mysize );
    }

    inline basic_string & replace ( const size_type _Off, size_type _Nx, const basic_string & _Right,
        const size_type _Roff, size_type _Count = npos ) {

        _Right . _Mypair . _Myval2 . _Check_offset ( _Roff );
        _Count = _Right . _Mypair . _Myval2 . _Clamp_suffix_size ( _Roff, _Count );
        return replace ( _Off, _Nx, _Right . _Mypair . _Myval2 . _Myptr ( ) + _Roff, _Count );
    }


















    inline basic_string & replace (
        const size_type _Off, size_type _Nx, const _Elem * const _Ptr, const size_type _Count ) {

        _Mypair . _Myval2 . _Check_offset ( _Off );
        _Nx = _Mypair . _Myval2 . _Clamp_suffix_size ( _Off, _Nx );
        if ( _Nx == _Count ) {
            _Traits :: move ( _Mypair . _Myval2 . _Myptr ( ) + _Off, _Ptr, _Count );
            return * this;
        }

        const size_type _Old_size = _Mypair . _Myval2 . _Mysize;
        const size_type _Suffix_size = _Old_size - _Nx - _Off + 1;
        if ( _Count < _Nx ) {
            _Elem * const _Old_ptr = _Mypair . _Myval2 . _Myptr ( );
            _Elem * const _Insert_at = _Old_ptr + _Off;
            _Traits :: move ( _Insert_at, _Ptr, _Count );
            _Traits :: move ( _Insert_at + _Count, _Insert_at + _Nx, _Suffix_size );

            const auto _New_size = _Old_size - ( _Nx - _Count );
            ;
            _Mypair . _Myval2 . _Mysize = _New_size;
            return * this;
        }

        const size_type _Growth = static_cast < size_type > ( _Count - _Nx );






        {
            if ( _Growth <= _Mypair . _Myval2 . _Myres - _Old_size ) {
                ;
                _Mypair . _Myval2 . _Mysize = _Old_size + _Growth;
                _Elem * const _Old_ptr = _Mypair . _Myval2 . _Myptr ( );
                _Elem * const _Insert_at = _Old_ptr + _Off;
                _Elem * const _Suffix_at = _Insert_at + _Nx;

                size_type _Ptr_shifted_after;
                if ( _Ptr + _Count <= _Insert_at || _Ptr > _Old_ptr + _Old_size ) {
                    _Ptr_shifted_after = _Count;
                } else if ( _Suffix_at <= _Ptr ) {
                    _Ptr_shifted_after = 0;
                } else {
                    _Ptr_shifted_after = static_cast < size_type > ( _Suffix_at - _Ptr );
                }

                _Traits :: move ( _Suffix_at + _Growth, _Suffix_at, _Suffix_size );



                _Traits :: move ( _Insert_at, _Ptr, _Ptr_shifted_after );


                _Traits :: copy (
                    _Insert_at + _Ptr_shifted_after, _Ptr + _Growth + _Ptr_shifted_after, _Count - _Ptr_shifted_after );
                return * this;
            }
        }

        return _Reallocate_grow_by (
            _Growth,
            [ ] ( _Elem * const _New_ptr, const _Elem * const _Old_ptr, const size_type _Old_size, const size_type _Off,
                const size_type _Nx, const _Elem * const _Ptr, const size_type _Count ) {
                _Traits :: copy ( _New_ptr, _Old_ptr, _Off );
                _Traits :: copy ( _New_ptr + _Off, _Ptr, _Count );
                _Traits :: copy ( _New_ptr + _Off + _Count, _Old_ptr + _Off + _Nx, _Old_size - _Nx - _Off + 1 );
            },
            _Off, _Nx, _Ptr, _Count );
    }

    inline basic_string & replace ( const size_type _Off, const size_type _Nx, const _Elem * const _Ptr ) {

        return replace ( _Off, _Nx, _Ptr, _Convert_size < size_type > ( _Traits :: length ( _Ptr ) ) );
    }

    inline basic_string & replace ( const size_type _Off, size_type _Nx, const size_type _Count, const _Elem _Ch ) {

        _Mypair . _Myval2 . _Check_offset ( _Off );
        _Nx = _Mypair . _Myval2 . _Clamp_suffix_size ( _Off, _Nx );
        if ( _Count == _Nx ) {
            _Traits :: assign ( _Mypair . _Myval2 . _Myptr ( ) + _Off, _Count, _Ch );
            return * this;
        }

        const size_type _Old_size = _Mypair . _Myval2 . _Mysize;
        if ( _Count < _Nx || _Count - _Nx <= _Mypair . _Myval2 . _Myres - _Old_size ) {


            const auto _New_size = _Old_size + _Count - _Nx;
            ;
            _Mypair . _Myval2 . _Mysize = _New_size;
            _Elem * const _Old_ptr = _Mypair . _Myval2 . _Myptr ( );
            _Elem * const _Insert_at = _Old_ptr + _Off;
            _Traits :: move ( _Insert_at + _Count, _Insert_at + _Nx, _Old_size - _Nx - _Off + 1 );
            _Traits :: assign ( _Insert_at, _Count, _Ch );
            return * this;
        }

        return _Reallocate_grow_by (
            _Count - _Nx,
            [ ] ( _Elem * const _New_ptr, const _Elem * const _Old_ptr, const size_type _Old_size, const size_type _Off,
                const size_type _Nx, const size_type _Count, const _Elem _Ch ) {
                _Traits :: copy ( _New_ptr, _Old_ptr, _Off );
                _Traits :: assign ( _New_ptr + _Off, _Count, _Ch );
                _Traits :: copy ( _New_ptr + _Off + _Count, _Old_ptr + _Off + _Nx, _Old_size - _Nx - _Off + 1 );
            },
            _Off, _Nx, _Count, _Ch );
    }

    inline basic_string & replace (
        const const_iterator _First, const const_iterator _Last, const basic_string & _Right ) {

        _Adl_verify_range ( _First, _Last );

        do { if ( _First . _Getcont ( ) == :: std :: addressof ( _Mypair . _Myval2 ) ) { } else { do { ( void ) ( ( 1 != _CrtDbgReport ( 2, "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\xstring", 3854, 0, "%s", "string iterators incompatible" ) ) || ( __debugbreak ( ), 0 ) ); :: _invalid_parameter ( L"\x22\x73\x74\x72\x69\x6e\x67\x20\x69\x74\x65\x72\x61\x74\x6f\x72\x73\x20\x69\x6e\x63\x6f\x6d\x70\x61\x74\x69\x62\x6c\x65\x22", L"", L"\x45\x3a\x5c\x56\x69\x73\x75\x61\x6c\x53\x74\x75\x64\x69\x6f\x5c\x32\x30\x32\x32\x5c\x50\x72\x65\x76\x69\x65\x77\x5c\x56\x43\x5c" L"\x54\x6f\x6f\x6c\x73\x5c\x4d\x53\x56\x43\x5c\x31\x34\x2e\x33\x37\x2e\x33\x32\x37\x30\x35\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x78" L"\x73\x74\x72\x69\x6e\x67", 3854, 0 ); } while ( false ); }; } while ( false );

        return replace ( static_cast < size_type > ( _Unfancy ( _First . _Ptr ) - _Mypair . _Myval2 . _Myptr ( ) ),
            static_cast < size_type > ( _Last . _Ptr - _First . _Ptr ), _Right );
    }















    inline basic_string & replace ( const const_iterator _First, const const_iterator _Last,
          const _Elem * const _Ptr, const size_type _Count ) {

        _Adl_verify_range ( _First, _Last );

        do { if ( _First . _Getcont ( ) == :: std :: addressof ( _Mypair . _Myval2 ) ) { } else { do { ( void ) ( ( 1 != _CrtDbgReport ( 2, "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\xstring", 3879, 0, "%s", "string iterators incompatible" ) ) || ( __debugbreak ( ), 0 ) ); :: _invalid_parameter ( L"\x22\x73\x74\x72\x69\x6e\x67\x20\x69\x74\x65\x72\x61\x74\x6f\x72\x73\x20\x69\x6e\x63\x6f\x6d\x70\x61\x74\x69\x62\x6c\x65\x22", L"", L"\x45\x3a\x5c\x56\x69\x73\x75\x61\x6c\x53\x74\x75\x64\x69\x6f\x5c\x32\x30\x32\x32\x5c\x50\x72\x65\x76\x69\x65\x77\x5c\x56\x43\x5c" L"\x54\x6f\x6f\x6c\x73\x5c\x4d\x53\x56\x43\x5c\x31\x34\x2e\x33\x37\x2e\x33\x32\x37\x30\x35\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x78" L"\x73\x74\x72\x69\x6e\x67", 3879, 0 ); } while ( false ); }; } while ( false );

        return replace ( static_cast < size_type > ( _Unfancy ( _First . _Ptr ) - _Mypair . _Myval2 . _Myptr ( ) ),
            static_cast < size_type > ( _Last . _Ptr - _First . _Ptr ), _Ptr, _Count );
    }

    inline basic_string & replace (
        const const_iterator _First, const const_iterator _Last, const _Elem * const _Ptr ) {

        _Adl_verify_range ( _First, _Last );

        do { if ( _First . _Getcont ( ) == :: std :: addressof ( _Mypair . _Myval2 ) ) { } else { do { ( void ) ( ( 1 != _CrtDbgReport ( 2, "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\xstring", 3890, 0, "%s", "string iterators incompatible" ) ) || ( __debugbreak ( ), 0 ) ); :: _invalid_parameter ( L"\x22\x73\x74\x72\x69\x6e\x67\x20\x69\x74\x65\x72\x61\x74\x6f\x72\x73\x20\x69\x6e\x63\x6f\x6d\x70\x61\x74\x69\x62\x6c\x65\x22", L"", L"\x45\x3a\x5c\x56\x69\x73\x75\x61\x6c\x53\x74\x75\x64\x69\x6f\x5c\x32\x30\x32\x32\x5c\x50\x72\x65\x76\x69\x65\x77\x5c\x56\x43\x5c" L"\x54\x6f\x6f\x6c\x73\x5c\x4d\x53\x56\x43\x5c\x31\x34\x2e\x33\x37\x2e\x33\x32\x37\x30\x35\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x78" L"\x73\x74\x72\x69\x6e\x67", 3890, 0 ); } while ( false ); }; } while ( false );

        return replace ( static_cast < size_type > ( _Unfancy ( _First . _Ptr ) - _Mypair . _Myval2 . _Myptr ( ) ),
            static_cast < size_type > ( _Last . _Ptr - _First . _Ptr ), _Ptr );
    }

    inline basic_string & replace (
        const const_iterator _First, const const_iterator _Last, const size_type _Count, const _Elem _Ch ) {

        _Adl_verify_range ( _First, _Last );

        do { if ( _First . _Getcont ( ) == :: std :: addressof ( _Mypair . _Myval2 ) ) { } else { do { ( void ) ( ( 1 != _CrtDbgReport ( 2, "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\xstring", 3901, 0, "%s", "string iterators incompatible" ) ) || ( __debugbreak ( ), 0 ) ); :: _invalid_parameter ( L"\x22\x73\x74\x72\x69\x6e\x67\x20\x69\x74\x65\x72\x61\x74\x6f\x72\x73\x20\x69\x6e\x63\x6f\x6d\x70\x61\x74\x69\x62\x6c\x65\x22", L"", L"\x45\x3a\x5c\x56\x69\x73\x75\x61\x6c\x53\x74\x75\x64\x69\x6f\x5c\x32\x30\x32\x32\x5c\x50\x72\x65\x76\x69\x65\x77\x5c\x56\x43\x5c" L"\x54\x6f\x6f\x6c\x73\x5c\x4d\x53\x56\x43\x5c\x31\x34\x2e\x33\x37\x2e\x33\x32\x37\x30\x35\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x78" L"\x73\x74\x72\x69\x6e\x67", 3901, 0 ); } while ( false ); }; } while ( false );

        return replace ( static_cast < size_type > ( _Unfancy ( _First . _Ptr ) - _Mypair . _Myval2 . _Myptr ( ) ),
            static_cast < size_type > ( _Last . _Ptr - _First . _Ptr ), _Count, _Ch );
    }

    template < class _Iter, enable_if_t < _Is_iterator_v < _Iter >, int > = 0 >
    inline basic_string & replace (
        const const_iterator _First, const const_iterator _Last, const _Iter _First2, const _Iter _Last2 ) {

        _Adl_verify_range ( _First, _Last );

        do { if ( _First . _Getcont ( ) == :: std :: addressof ( _Mypair . _Myval2 ) ) { } else { do { ( void ) ( ( 1 != _CrtDbgReport ( 2, "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\xstring", 3913, 0, "%s", "string iterators incompatible" ) ) || ( __debugbreak ( ), 0 ) ); :: _invalid_parameter ( L"\x22\x73\x74\x72\x69\x6e\x67\x20\x69\x74\x65\x72\x61\x74\x6f\x72\x73\x20\x69\x6e\x63\x6f\x6d\x70\x61\x74\x69\x62\x6c\x65\x22", L"", L"\x45\x3a\x5c\x56\x69\x73\x75\x61\x6c\x53\x74\x75\x64\x69\x6f\x5c\x32\x30\x32\x32\x5c\x50\x72\x65\x76\x69\x65\x77\x5c\x56\x43\x5c" L"\x54\x6f\x6f\x6c\x73\x5c\x4d\x53\x56\x43\x5c\x31\x34\x2e\x33\x37\x2e\x33\x32\x37\x30\x35\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x78" L"\x73\x74\x72\x69\x6e\x67", 3913, 0 ); } while ( false ); }; } while ( false );

        const auto _Off = static_cast < size_type > ( _Unfancy ( _First . _Ptr ) - _Mypair . _Myval2 . _Myptr ( ) );
        const auto _Length = static_cast < size_type > ( _Last . _Ptr - _First . _Ptr );
        _Adl_verify_range ( _First2, _Last2 );
        const auto _UFirst2 = _Get_unwrapped ( _First2 );
        const auto _ULast2 = _Get_unwrapped ( _Last2 );
        if constexpr ( _Is_elem_cptr < decltype ( _UFirst2 ) > :: value ) {
            return replace ( _Off, _Length, _UFirst2, _Convert_size < size_type > ( static_cast < size_t > ( _ULast2 - _UFirst2 ) ) );
        } else {
            const basic_string _Right ( _UFirst2, _ULast2, get_allocator ( ) );
            return replace ( _Off, _Length, _Right . _Mypair . _Myval2 . _Myptr ( ), _Right . _Mypair . _Myval2 . _Mysize );
        }
    }





















    [ [ nodiscard ] ] inline iterator begin ( ) noexcept {
        return iterator ( _Refancy < pointer > ( _Mypair . _Myval2 . _Myptr ( ) ), :: std :: addressof ( _Mypair . _Myval2 ) );
    }

    [ [ nodiscard ] ] inline const_iterator begin ( ) const noexcept {
        return const_iterator ( _Refancy < const_pointer > ( _Mypair . _Myval2 . _Myptr ( ) ), :: std :: addressof ( _Mypair . _Myval2 ) );
    }

    [ [ nodiscard ] ] inline iterator end ( ) noexcept {
        return iterator (
            _Refancy < pointer > ( _Mypair . _Myval2 . _Myptr ( ) ) + static_cast < difference_type > ( _Mypair . _Myval2 . _Mysize ),
            :: std :: addressof ( _Mypair . _Myval2 ) );
    }

    [ [ nodiscard ] ] inline const_iterator end ( ) const noexcept {
        return const_iterator (
            _Refancy < const_pointer > ( _Mypair . _Myval2 . _Myptr ( ) ) + static_cast < difference_type > ( _Mypair . _Myval2 . _Mysize ),
            :: std :: addressof ( _Mypair . _Myval2 ) );
    }

    [ [ nodiscard ] ] inline _Elem * _Unchecked_begin ( ) noexcept {
        return _Mypair . _Myval2 . _Myptr ( );
    }

    [ [ nodiscard ] ] inline const _Elem * _Unchecked_begin ( ) const noexcept {
        return _Mypair . _Myval2 . _Myptr ( );
    }

    [ [ nodiscard ] ] inline _Elem * _Unchecked_end ( ) noexcept {
        return _Mypair . _Myval2 . _Myptr ( ) + _Mypair . _Myval2 . _Mysize;
    }

    [ [ nodiscard ] ] inline const _Elem * _Unchecked_end ( ) const noexcept {
        return _Mypair . _Myval2 . _Myptr ( ) + _Mypair . _Myval2 . _Mysize;
    }

    [ [ nodiscard ] ] inline reverse_iterator rbegin ( ) noexcept {
        return reverse_iterator ( end ( ) );
    }

    [ [ nodiscard ] ] inline const_reverse_iterator rbegin ( ) const noexcept {
        return const_reverse_iterator ( end ( ) );
    }

    [ [ nodiscard ] ] inline reverse_iterator rend ( ) noexcept {
        return reverse_iterator ( begin ( ) );
    }

    [ [ nodiscard ] ] inline const_reverse_iterator rend ( ) const noexcept {
        return const_reverse_iterator ( begin ( ) );
    }

    [ [ nodiscard ] ] inline const_iterator cbegin ( ) const noexcept {
        return begin ( );
    }

    [ [ nodiscard ] ] inline const_iterator cend ( ) const noexcept {
        return end ( );
    }

    [ [ nodiscard ] ] inline const_reverse_iterator crbegin ( ) const noexcept {
        return rbegin ( );
    }

    [ [ nodiscard ] ] inline const_reverse_iterator crend ( ) const noexcept {
        return rend ( );
    }

    inline void shrink_to_fit ( ) {
        auto & _My_data = _Mypair . _Myval2;

        if ( ! _My_data . _Large_string_engaged ( ) ) {
            return;
        }

        if ( _My_data . _Mysize < _BUF_SIZE ) {
            _Become_small ( );
            return;
        }

        const size_type _Target_capacity = ( :: std :: min ) ( _My_data . _Mysize | _ALLOC_MASK, max_size ( ) );
        if ( _Target_capacity < _My_data . _Myres ) {
            auto & _Al = _Getal ( );
            const pointer _New_ptr = _Al . allocate ( _Target_capacity + 1 );
            ;

            _Start_element_lifetimes ( _Unfancy ( _New_ptr ), _Target_capacity + 1 );

            _My_data . _Orphan_all ( );
            _Traits :: copy ( _Unfancy ( _New_ptr ), _Unfancy ( _My_data . _Bx . _Ptr ), _My_data . _Mysize + 1 );
            _Al . deallocate ( _My_data . _Bx . _Ptr, _My_data . _Myres + 1 );
            _My_data . _Bx . _Ptr = _New_ptr;
            _My_data . _Myres = _Target_capacity;
            ;
        }
    }

    [ [ nodiscard ] ] inline reference at ( const size_type _Off ) {
        _Mypair . _Myval2 . _Check_offset_exclusive ( _Off );
        return _Mypair . _Myval2 . _Myptr ( ) [ _Off ];
    }

    [ [ nodiscard ] ] inline const_reference at ( const size_type _Off ) const {
        _Mypair . _Myval2 . _Check_offset_exclusive ( _Off );
        return _Mypair . _Myval2 . _Myptr ( ) [ _Off ];
    }

    [ [ nodiscard ] ] inline reference operator [ ] ( const size_type _Off ) noexcept {

        do { if ( _Off <= _Mypair . _Myval2 . _Mysize ) { } else { do { ( void ) ( ( 1 != _CrtDbgReport ( 2, "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\xstring", 4057, 0, "%s", "string subscript out of range" ) ) || ( __debugbreak ( ), 0 ) ); :: _invalid_parameter ( L"\x22\x73\x74\x72\x69\x6e\x67\x20\x73\x75\x62\x73\x63\x72\x69\x70\x74\x20\x6f\x75\x74\x20\x6f\x66\x20\x72\x61\x6e\x67\x65\x22", L"", L"\x45\x3a\x5c\x56\x69\x73\x75\x61\x6c\x53\x74\x75\x64\x69\x6f\x5c\x32\x30\x32\x32\x5c\x50\x72\x65\x76\x69\x65\x77\x5c\x56\x43\x5c" L"\x54\x6f\x6f\x6c\x73\x5c\x4d\x53\x56\x43\x5c\x31\x34\x2e\x33\x37\x2e\x33\x32\x37\x30\x35\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x78" L"\x73\x74\x72\x69\x6e\x67", 4057, 0 ); } while ( false ); }; } while ( false );

        return _Mypair . _Myval2 . _Myptr ( ) [ _Off ];
    }

    [ [ nodiscard ] ] inline const_reference operator [ ] ( const size_type _Off ) const noexcept
     {

        do { if ( _Off <= _Mypair . _Myval2 . _Mysize ) { } else { do { ( void ) ( ( 1 != _CrtDbgReport ( 2, "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\xstring", 4065, 0, "%s", "string subscript out of range" ) ) || ( __debugbreak ( ), 0 ) ); :: _invalid_parameter ( L"\x22\x73\x74\x72\x69\x6e\x67\x20\x73\x75\x62\x73\x63\x72\x69\x70\x74\x20\x6f\x75\x74\x20\x6f\x66\x20\x72\x61\x6e\x67\x65\x22", L"", L"\x45\x3a\x5c\x56\x69\x73\x75\x61\x6c\x53\x74\x75\x64\x69\x6f\x5c\x32\x30\x32\x32\x5c\x50\x72\x65\x76\x69\x65\x77\x5c\x56\x43\x5c" L"\x54\x6f\x6f\x6c\x73\x5c\x4d\x53\x56\x43\x5c\x31\x34\x2e\x33\x37\x2e\x33\x32\x37\x30\x35\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x78" L"\x73\x74\x72\x69\x6e\x67", 4065, 0 ); } while ( false ); }; } while ( false );

        return _Mypair . _Myval2 . _Myptr ( ) [ _Off ];
    }








    inline void push_back ( const _Elem _Ch ) {
        const size_type _Old_size = _Mypair . _Myval2 . _Mysize;
        if ( _Old_size < _Mypair . _Myval2 . _Myres ) {
            ;
            _Mypair . _Myval2 . _Mysize = _Old_size + 1;
            _Elem * const _Ptr = _Mypair . _Myval2 . _Myptr ( );
            _Traits :: assign ( _Ptr [ _Old_size ], _Ch );
            _Traits :: assign ( _Ptr [ _Old_size + 1 ], _Elem ( ) );
            return;
        }

        _Reallocate_grow_by (
            1,
            [ ] ( _Elem * const _New_ptr, const _Elem * const _Old_ptr, const size_type _Old_size, const _Elem _Ch ) {
                _Traits :: copy ( _New_ptr, _Old_ptr, _Old_size );
                _Traits :: assign ( _New_ptr [ _Old_size ], _Ch );
                _Traits :: assign ( _New_ptr [ _Old_size + 1 ], _Elem ( ) );
            },
            _Ch );
    }

    inline void pop_back ( ) noexcept {
        const size_type _Old_size = _Mypair . _Myval2 . _Mysize;

        do { if ( _Old_size != 0 ) { } else { do { ( void ) ( ( 1 != _CrtDbgReport ( 2, "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\xstring", 4101, 0, "%s", "invalid to pop_back empty string" ) ) || ( __debugbreak ( ), 0 ) ); :: _invalid_parameter ( L"\x22\x69\x6e\x76\x61\x6c\x69\x64\x20\x74\x6f\x20\x70\x6f\x70\x5f\x62\x61\x63\x6b\x20\x65\x6d\x70\x74\x79\x20\x73\x74\x72\x69\x6e" L"\x67\x22", L"", L"\x45\x3a\x5c\x56\x69\x73\x75\x61\x6c\x53\x74\x75\x64\x69\x6f\x5c\x32\x30\x32\x32\x5c\x50\x72\x65\x76\x69\x65\x77\x5c\x56\x43\x5c" L"\x54\x6f\x6f\x6c\x73\x5c\x4d\x53\x56\x43\x5c\x31\x34\x2e\x33\x37\x2e\x33\x32\x37\x30\x35\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x78" L"\x73\x74\x72\x69\x6e\x67", 4101, 0 ); } while ( false ); }; } while ( false );

        _Eos ( _Old_size - 1 );
    }

    [ [ nodiscard ] ] inline reference front ( ) noexcept {

        do { if ( _Mypair . _Myval2 . _Mysize != 0 ) { } else { do { ( void ) ( ( 1 != _CrtDbgReport ( 2, "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\xstring", 4108, 0, "%s", "front() called on empty string" ) ) || ( __debugbreak ( ), 0 ) ); :: _invalid_parameter ( L"\x22\x66\x72\x6f\x6e\x74\x28\x29\x20\x63\x61\x6c\x6c\x65\x64\x20\x6f\x6e\x20\x65\x6d\x70\x74\x79\x20\x73\x74\x72\x69\x6e\x67\x22" L"", L"", L"\x45\x3a\x5c\x56\x69\x73\x75\x61\x6c\x53\x74\x75\x64\x69\x6f\x5c\x32\x30\x32\x32\x5c\x50\x72\x65\x76\x69\x65\x77\x5c\x56\x43\x5c" L"\x54\x6f\x6f\x6c\x73\x5c\x4d\x53\x56\x43\x5c\x31\x34\x2e\x33\x37\x2e\x33\x32\x37\x30\x35\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x78" L"\x73\x74\x72\x69\x6e\x67", 4108, 0 ); } while ( false ); }; } while ( false );


        return _Mypair . _Myval2 . _Myptr ( ) [ 0 ];
    }

    [ [ nodiscard ] ] inline const_reference front ( ) const noexcept {

        do { if ( _Mypair . _Myval2 . _Mysize != 0 ) { } else { do { ( void ) ( ( 1 != _CrtDbgReport ( 2, "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\xstring", 4116, 0, "%s", "front() called on empty string" ) ) || ( __debugbreak ( ), 0 ) ); :: _invalid_parameter ( L"\x22\x66\x72\x6f\x6e\x74\x28\x29\x20\x63\x61\x6c\x6c\x65\x64\x20\x6f\x6e\x20\x65\x6d\x70\x74\x79\x20\x73\x74\x72\x69\x6e\x67\x22" L"", L"", L"\x45\x3a\x5c\x56\x69\x73\x75\x61\x6c\x53\x74\x75\x64\x69\x6f\x5c\x32\x30\x32\x32\x5c\x50\x72\x65\x76\x69\x65\x77\x5c\x56\x43\x5c" L"\x54\x6f\x6f\x6c\x73\x5c\x4d\x53\x56\x43\x5c\x31\x34\x2e\x33\x37\x2e\x33\x32\x37\x30\x35\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x78" L"\x73\x74\x72\x69\x6e\x67", 4116, 0 ); } while ( false ); }; } while ( false );


        return _Mypair . _Myval2 . _Myptr ( ) [ 0 ];
    }

    [ [ nodiscard ] ] inline reference back ( ) noexcept {

        do { if ( _Mypair . _Myval2 . _Mysize != 0 ) { } else { do { ( void ) ( ( 1 != _CrtDbgReport ( 2, "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\xstring", 4124, 0, "%s", "back() called on empty string" ) ) || ( __debugbreak ( ), 0 ) ); :: _invalid_parameter ( L"\x22\x62\x61\x63\x6b\x28\x29\x20\x63\x61\x6c\x6c\x65\x64\x20\x6f\x6e\x20\x65\x6d\x70\x74\x79\x20\x73\x74\x72\x69\x6e\x67\x22", L"", L"\x45\x3a\x5c\x56\x69\x73\x75\x61\x6c\x53\x74\x75\x64\x69\x6f\x5c\x32\x30\x32\x32\x5c\x50\x72\x65\x76\x69\x65\x77\x5c\x56\x43\x5c" L"\x54\x6f\x6f\x6c\x73\x5c\x4d\x53\x56\x43\x5c\x31\x34\x2e\x33\x37\x2e\x33\x32\x37\x30\x35\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x78" L"\x73\x74\x72\x69\x6e\x67", 4124, 0 ); } while ( false ); }; } while ( false );


        return _Mypair . _Myval2 . _Myptr ( ) [ _Mypair . _Myval2 . _Mysize - 1 ];
    }

    [ [ nodiscard ] ] inline const_reference back ( ) const noexcept {

        do { if ( _Mypair . _Myval2 . _Mysize != 0 ) { } else { do { ( void ) ( ( 1 != _CrtDbgReport ( 2, "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\xstring", 4132, 0, "%s", "back() called on empty string" ) ) || ( __debugbreak ( ), 0 ) ); :: _invalid_parameter ( L"\x22\x62\x61\x63\x6b\x28\x29\x20\x63\x61\x6c\x6c\x65\x64\x20\x6f\x6e\x20\x65\x6d\x70\x74\x79\x20\x73\x74\x72\x69\x6e\x67\x22", L"", L"\x45\x3a\x5c\x56\x69\x73\x75\x61\x6c\x53\x74\x75\x64\x69\x6f\x5c\x32\x30\x32\x32\x5c\x50\x72\x65\x76\x69\x65\x77\x5c\x56\x43\x5c" L"\x54\x6f\x6f\x6c\x73\x5c\x4d\x53\x56\x43\x5c\x31\x34\x2e\x33\x37\x2e\x33\x32\x37\x30\x35\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x78" L"\x73\x74\x72\x69\x6e\x67", 4132, 0 ); } while ( false ); }; } while ( false );


        return _Mypair . _Myval2 . _Myptr ( ) [ _Mypair . _Myval2 . _Mysize - 1 ];
    }

    [ [ nodiscard ] ] inline const _Elem * c_str ( ) const noexcept {
        return _Mypair . _Myval2 . _Myptr ( );
    }

    [ [ nodiscard ] ] inline const _Elem * data ( ) const noexcept {
        return _Mypair . _Myval2 . _Myptr ( );
    }







    [ [ nodiscard ] ] inline size_type length ( ) const noexcept {
        return _Mypair . _Myval2 . _Mysize;
    }

    [ [ nodiscard ] ] inline size_type size ( ) const noexcept {
        return _Mypair . _Myval2 . _Mysize;
    }

    [ [ nodiscard ] ] inline size_type max_size ( ) const noexcept {
        const size_type _Alloc_max = _Alty_traits :: max_size ( _Getal ( ) );
        const size_type _Storage_max =
            ( :: std :: max ) ( _Alloc_max, static_cast < size_type > ( _BUF_SIZE ) );
        return ( :: std :: min ) ( static_cast < size_type > ( ( numeric_limits < difference_type > :: max ) ( ) ),
            _Storage_max - 1
        );
    }

    inline void resize ( const size_type _New_size, const _Elem _Ch = _Elem ( ) ) {

        const size_type _Old_size = size ( );
        if ( _New_size <= _Old_size ) {
            _Eos ( _New_size );
        } else {
            append ( _New_size - _Old_size, _Ch );
        }
    }

























    [ [ nodiscard ] ] inline size_type capacity ( ) const noexcept {
        return _Mypair . _Myval2 . _Myres;
    }























    void reserve ( const size_type _Newcap = 0 ) {
        if ( _Mypair . _Myval2 . _Mysize > _Newcap ) {
            return;
        }

        if ( _Mypair . _Myval2 . _Myres == _Newcap ) {
            return;
        }

        if ( _Mypair . _Myval2 . _Myres < _Newcap ) {
            const size_type _Old_size = _Mypair . _Myval2 . _Mysize;
            _Reallocate_grow_by (
                _Newcap - _Old_size, [ ] ( _Elem * const _New_ptr, const _Elem * const _Old_ptr, const size_type _Old_size ) {
                    _Traits :: copy ( _New_ptr, _Old_ptr, _Old_size + 1 );
                } );

            _Mypair . _Myval2 . _Mysize = _Old_size;
            return;
        }

        if ( _BUF_SIZE > _Newcap && _Mypair . _Myval2 . _Large_string_engaged ( ) ) {

            _Become_small ( );
            return;
        }


    }


    [ [ nodiscard ( "This member function returns a bool indicating whether the container is empty and has no other effects. It is not useful to call" " this member function and discard the return value. Use the \'clear()\' member function if you want to erase all elements." ) ] ] inline bool empty ( ) const noexcept {
        return _Mypair . _Myval2 . _Mysize == 0;
    }

    inline size_type copy (
          _Elem * const _Ptr, size_type _Count, const size_type _Off = 0 ) const {

        _Mypair . _Myval2 . _Check_offset ( _Off );
        _Count = _Mypair . _Myval2 . _Clamp_suffix_size ( _Off, _Count );
        _Traits :: copy ( _Ptr, _Mypair . _Myval2 . _Myptr ( ) + _Off, _Count );
        return _Count;
    }

    inline size_type
        _Copy_s ( _Elem * const _Dest, const size_type _Dest_size, size_type _Count,
            const size_type _Off = 0 ) const {

        _Mypair . _Myval2 . _Check_offset ( _Off );
        _Count = _Mypair . _Myval2 . _Clamp_suffix_size ( _Off, _Count );
        _Traits :: _Copy_s ( _Dest, _Dest_size, _Mypair . _Myval2 . _Myptr ( ) + _Off, _Count );
        return _Count;
    }

    static inline void _Swap_bx_large_with_small ( _Scary_val & _Starts_large, _Scary_val & _Starts_small ) noexcept {

        const pointer _Ptr = _Starts_large . _Bx . _Ptr;
        _Destroy_in_place ( _Starts_large . _Bx . _Ptr );

        _Starts_large . _Activate_SSO_buffer ( );
        _Traits :: copy ( _Starts_large . _Bx . _Buf, _Starts_small . _Bx . _Buf, _BUF_SIZE );

        _Construct_in_place ( _Starts_small . _Bx . _Ptr, _Ptr );
    }

    inline void _Swap_data ( basic_string & _Right ) {
        auto & _My_data = _Mypair . _Myval2;
        auto & _Right_data = _Right . _Mypair . _Myval2;

        const bool _My_large = _My_data . _Large_string_engaged ( );
        const bool _Right_large = _Right_data . _Large_string_engaged ( );


        if constexpr ( _Can_memcpy_val ) {



            {
                const auto _My_data_mem =
                    reinterpret_cast < unsigned char * > ( :: std :: addressof ( _My_data ) ) + _Memcpy_val_offset;
                const auto _Right_data_mem =
                    reinterpret_cast < unsigned char * > ( :: std :: addressof ( _Right_data ) ) + _Memcpy_val_offset;
                unsigned char _Temp_mem [ _Memcpy_val_size ];
                :: memcpy ( _Temp_mem, _My_data_mem, _Memcpy_val_size );
                :: memcpy ( _My_data_mem, _Right_data_mem, _Memcpy_val_size );
                :: memcpy ( _Right_data_mem, _Temp_mem, _Memcpy_val_size );

                return;
            }
        }


        if ( _My_large && _Right_large ) {
            _Swap_adl ( _My_data . _Bx . _Ptr, _Right_data . _Bx . _Ptr );
        } else if ( _My_large ) {
            _Swap_bx_large_with_small ( _My_data, _Right_data );
        } else if ( _Right_large ) {
            _Swap_bx_large_with_small ( _Right_data, _My_data );
        } else {
            _Elem _Temp_buf [ _BUF_SIZE ];
            _Traits :: copy ( _Temp_buf, _My_data . _Bx . _Buf, _My_data . _Mysize + 1 );
            _Traits :: copy ( _My_data . _Bx . _Buf, _Right_data . _Bx . _Buf, _Right_data . _Mysize + 1 );
            _Traits :: copy ( _Right_data . _Bx . _Buf, _Temp_buf, _My_data . _Mysize + 1 );
        }

        :: std :: swap ( _My_data . _Mysize, _Right_data . _Mysize );
        :: std :: swap ( _My_data . _Myres, _Right_data . _Myres );
    }

    inline void swap ( basic_string & _Right ) noexcept {
        if ( this != :: std :: addressof ( _Right ) ) {
            _Pocs ( _Getal ( ), _Right . _Getal ( ) );


            auto & _My_data = _Mypair . _Myval2;
            auto & _Right_data = _Right . _Mypair . _Myval2;

            if ( ! _My_data . _Large_string_engaged ( ) ) {
                _My_data . _Orphan_all ( );
            }

            if ( ! _Right_data . _Large_string_engaged ( ) ) {
                _Right_data . _Orphan_all ( );
            }

            _My_data . _Swap_proxy_and_iterators ( _Right_data );


            _Swap_data ( _Right );
        }
    }












    [ [ nodiscard ] ] inline size_type find ( const basic_string & _Right, const size_type _Off = 0 ) const noexcept {

        return static_cast < size_type > ( _Traits_find < _Traits > ( _Mypair . _Myval2 . _Myptr ( ), _Mypair . _Myval2 . _Mysize, _Off,
            _Right . _Mypair . _Myval2 . _Myptr ( ), _Right . _Mypair . _Myval2 . _Mysize ) );
    }

    [ [ nodiscard ] ] inline size_type find ( const _Elem * const _Ptr, const size_type _Off,
        const size_type _Count ) const noexcept {

        return static_cast < size_type > (
            _Traits_find < _Traits > ( _Mypair . _Myval2 . _Myptr ( ), _Mypair . _Myval2 . _Mysize, _Off, _Ptr, _Count ) );
    }

    [ [ nodiscard ] ] inline size_type find ( const _Elem * const _Ptr, const size_type _Off = 0 ) const noexcept
     {

        return static_cast < size_type > ( _Traits_find < _Traits > (
            _Mypair . _Myval2 . _Myptr ( ), _Mypair . _Myval2 . _Mysize, _Off, _Ptr, _Traits :: length ( _Ptr ) ) );
    }

    [ [ nodiscard ] ] inline size_type find ( const _Elem _Ch, const size_type _Off = 0 ) const noexcept {

        return static_cast < size_type > (
            _Traits_find_ch < _Traits > ( _Mypair . _Myval2 . _Myptr ( ), _Mypair . _Myval2 . _Mysize, _Off, _Ch ) );
    }












    [ [ nodiscard ] ] inline size_type rfind ( const basic_string & _Right, const size_type _Off = npos ) const noexcept {

        return static_cast < size_type > ( _Traits_rfind < _Traits > ( _Mypair . _Myval2 . _Myptr ( ), _Mypair . _Myval2 . _Mysize, _Off,
            _Right . _Mypair . _Myval2 . _Myptr ( ), _Right . _Mypair . _Myval2 . _Mysize ) );
    }

    [ [ nodiscard ] ] inline size_type rfind ( const _Elem * const _Ptr, const size_type _Off,
        const size_type _Count ) const noexcept {

        return static_cast < size_type > (
            _Traits_rfind < _Traits > ( _Mypair . _Myval2 . _Myptr ( ), _Mypair . _Myval2 . _Mysize, _Off, _Ptr, _Count ) );
    }

    [ [ nodiscard ] ] inline size_type rfind ( const _Elem * const _Ptr, const size_type _Off = npos ) const noexcept
     {

        return static_cast < size_type > ( _Traits_rfind < _Traits > (
            _Mypair . _Myval2 . _Myptr ( ), _Mypair . _Myval2 . _Mysize, _Off, _Ptr, _Traits :: length ( _Ptr ) ) );
    }

    [ [ nodiscard ] ] inline size_type rfind ( const _Elem _Ch, const size_type _Off = npos ) const noexcept {

        return static_cast < size_type > (
            _Traits_rfind_ch < _Traits > ( _Mypair . _Myval2 . _Myptr ( ), _Mypair . _Myval2 . _Mysize, _Off, _Ch ) );
    }












    [ [ nodiscard ] ] inline size_type find_first_of (
        const basic_string & _Right, const size_type _Off = 0 ) const noexcept {

        return static_cast < size_type > ( _Traits_find_first_of < _Traits > ( _Mypair . _Myval2 . _Myptr ( ), _Mypair . _Myval2 . _Mysize,
            _Off, _Right . _Mypair . _Myval2 . _Myptr ( ), _Right . _Mypair . _Myval2 . _Mysize ) );
    }

    [ [ nodiscard ] ] inline size_type find_first_of ( const _Elem * const _Ptr, const size_type _Off,
        const size_type _Count ) const noexcept {

        return static_cast < size_type > (
            _Traits_find_first_of < _Traits > ( _Mypair . _Myval2 . _Myptr ( ), _Mypair . _Myval2 . _Mysize, _Off, _Ptr, _Count ) );
    }

    [ [ nodiscard ] ] inline size_type find_first_of (
          const _Elem * const _Ptr, const size_type _Off = 0 ) const noexcept
     {

        return static_cast < size_type > ( _Traits_find_first_of < _Traits > (
            _Mypair . _Myval2 . _Myptr ( ), _Mypair . _Myval2 . _Mysize, _Off, _Ptr, _Traits :: length ( _Ptr ) ) );
    }

    [ [ nodiscard ] ] inline size_type find_first_of ( const _Elem _Ch, const size_type _Off = 0 ) const noexcept {

        return static_cast < size_type > (
            _Traits_find_ch < _Traits > ( _Mypair . _Myval2 . _Myptr ( ), _Mypair . _Myval2 . _Mysize, _Off, _Ch ) );
    }












    [ [ nodiscard ] ] inline size_type find_last_of ( const basic_string & _Right, size_type _Off = npos ) const noexcept {

        return static_cast < size_type > ( _Traits_find_last_of < _Traits > ( _Mypair . _Myval2 . _Myptr ( ), _Mypair . _Myval2 . _Mysize,
            _Off, _Right . _Mypair . _Myval2 . _Myptr ( ), _Right . _Mypair . _Myval2 . _Mysize ) );
    }

    [ [ nodiscard ] ] inline size_type find_last_of ( const _Elem * const _Ptr, const size_type _Off,
        const size_type _Count ) const noexcept {

        return static_cast < size_type > (
            _Traits_find_last_of < _Traits > ( _Mypair . _Myval2 . _Myptr ( ), _Mypair . _Myval2 . _Mysize, _Off, _Ptr, _Count ) );
    }

    [ [ nodiscard ] ] inline size_type find_last_of (
          const _Elem * const _Ptr, const size_type _Off = npos ) const noexcept {

        return static_cast < size_type > ( _Traits_find_last_of < _Traits > (
            _Mypair . _Myval2 . _Myptr ( ), _Mypair . _Myval2 . _Mysize, _Off, _Ptr, _Traits :: length ( _Ptr ) ) );
    }

    [ [ nodiscard ] ] inline size_type find_last_of ( const _Elem _Ch, const size_type _Off = npos ) const noexcept {

        return static_cast < size_type > (
            _Traits_rfind_ch < _Traits > ( _Mypair . _Myval2 . _Myptr ( ), _Mypair . _Myval2 . _Mysize, _Off, _Ch ) );
    }












    [ [ nodiscard ] ] inline size_type find_first_not_of (
        const basic_string & _Right, const size_type _Off = 0 ) const noexcept {

        return static_cast < size_type > ( _Traits_find_first_not_of < _Traits > ( _Mypair . _Myval2 . _Myptr ( ),
            _Mypair . _Myval2 . _Mysize, _Off, _Right . _Mypair . _Myval2 . _Myptr ( ), _Right . _Mypair . _Myval2 . _Mysize ) );
    }

    [ [ nodiscard ] ] inline size_type find_first_not_of ( const _Elem * const _Ptr,
        const size_type _Off, const size_type _Count ) const noexcept {

        return static_cast < size_type > (
            _Traits_find_first_not_of < _Traits > ( _Mypair . _Myval2 . _Myptr ( ), _Mypair . _Myval2 . _Mysize, _Off, _Ptr, _Count ) );
    }

    [ [ nodiscard ] ] inline size_type find_first_not_of (
          const _Elem * const _Ptr, size_type _Off = 0 ) const noexcept
     {

        return static_cast < size_type > ( _Traits_find_first_not_of < _Traits > (
            _Mypair . _Myval2 . _Myptr ( ), _Mypair . _Myval2 . _Mysize, _Off, _Ptr, _Traits :: length ( _Ptr ) ) );
    }

    [ [ nodiscard ] ] inline size_type find_first_not_of ( const _Elem _Ch, const size_type _Off = 0 ) const noexcept {

        return static_cast < size_type > (
            _Traits_find_not_ch < _Traits > ( _Mypair . _Myval2 . _Myptr ( ), _Mypair . _Myval2 . _Mysize, _Off, _Ch ) );
    }












    [ [ nodiscard ] ] inline size_type find_last_not_of (
        const basic_string & _Right, const size_type _Off = npos ) const noexcept {

        return static_cast < size_type > ( _Traits_find_last_not_of < _Traits > ( _Mypair . _Myval2 . _Myptr ( ),
            _Mypair . _Myval2 . _Mysize, _Off, _Right . _Mypair . _Myval2 . _Myptr ( ), _Right . _Mypair . _Myval2 . _Mysize ) );
    }

    [ [ nodiscard ] ] inline size_type find_last_not_of ( const _Elem * const _Ptr, const size_type _Off,
        const size_type _Count ) const noexcept {

        return static_cast < size_type > (
            _Traits_find_last_not_of < _Traits > ( _Mypair . _Myval2 . _Myptr ( ), _Mypair . _Myval2 . _Mysize, _Off, _Ptr, _Count ) );
    }

    [ [ nodiscard ] ] inline size_type find_last_not_of (
          const _Elem * const _Ptr, const size_type _Off = npos ) const noexcept {

        return static_cast < size_type > ( _Traits_find_last_not_of < _Traits > (
            _Mypair . _Myval2 . _Myptr ( ), _Mypair . _Myval2 . _Mysize, _Off, _Ptr, _Traits :: length ( _Ptr ) ) );
    }

    [ [ nodiscard ] ] inline size_type find_last_not_of ( const _Elem _Ch, const size_type _Off = npos ) const noexcept {

        return static_cast < size_type > (
            _Traits_rfind_not_ch < _Traits > ( _Mypair . _Myval2 . _Myptr ( ), _Mypair . _Myval2 . _Mysize, _Off, _Ch ) );
    }








    [ [ nodiscard ] ] inline basic_string substr ( const size_type _Off = 0, const size_type _Count = npos )



        const

    {

        return basic_string { * this, _Off, _Count };
    }








    inline bool _Equal ( const basic_string & _Right ) const noexcept {

        return _Traits_equal < _Traits > ( _Mypair . _Myval2 . _Myptr ( ), _Mypair . _Myval2 . _Mysize,
            _Right . _Mypair . _Myval2 . _Myptr ( ), _Right . _Mypair . _Myval2 . _Mysize );
    }

    inline bool _Equal ( const _Elem * const _Ptr ) const noexcept {

        return _Traits_equal < _Traits > ( _Mypair . _Myval2 . _Myptr ( ), _Mypair . _Myval2 . _Mysize, _Ptr, _Traits :: length ( _Ptr ) );
    }
































    [ [ nodiscard ] ] inline int compare ( const basic_string & _Right ) const noexcept {

        return _Traits_compare < _Traits > ( _Mypair . _Myval2 . _Myptr ( ), _Mypair . _Myval2 . _Mysize,
            _Right . _Mypair . _Myval2 . _Myptr ( ), _Right . _Mypair . _Myval2 . _Mysize );
    }

    [ [ nodiscard ] ] inline int compare ( size_type _Off, size_type _Nx, const basic_string & _Right ) const {

        _Mypair . _Myval2 . _Check_offset ( _Off );
        return _Traits_compare < _Traits > ( _Mypair . _Myval2 . _Myptr ( ) + _Off, _Mypair . _Myval2 . _Clamp_suffix_size ( _Off, _Nx ),
            _Right . _Mypair . _Myval2 . _Myptr ( ), _Right . _Mypair . _Myval2 . _Mysize );
    }

    [ [ nodiscard ] ] inline int compare ( const size_type _Off, const size_type _Nx, const basic_string & _Right,
        const size_type _Roff, const size_type _Count = npos ) const {

        _Mypair . _Myval2 . _Check_offset ( _Off );
        _Right . _Mypair . _Myval2 . _Check_offset ( _Roff );
        return _Traits_compare < _Traits > ( _Mypair . _Myval2 . _Myptr ( ) + _Off, _Mypair . _Myval2 . _Clamp_suffix_size ( _Off, _Nx ),
            _Right . _Mypair . _Myval2 . _Myptr ( ) + _Roff, _Right . _Mypair . _Myval2 . _Clamp_suffix_size ( _Roff, _Count ) );
    }

    [ [ nodiscard ] ] inline int compare ( const _Elem * const _Ptr ) const noexcept {

        return _Traits_compare < _Traits > ( _Mypair . _Myval2 . _Myptr ( ), _Mypair . _Myval2 . _Mysize, _Ptr, _Traits :: length ( _Ptr ) );
    }

    [ [ nodiscard ] ] inline int compare (
        const size_type _Off, const size_type _Nx, const _Elem * const _Ptr ) const {

        _Mypair . _Myval2 . _Check_offset ( _Off );
        return _Traits_compare < _Traits > ( _Mypair . _Myval2 . _Myptr ( ) + _Off, _Mypair . _Myval2 . _Clamp_suffix_size ( _Off, _Nx ),
            _Ptr, _Traits :: length ( _Ptr ) );
    }

    [ [ nodiscard ] ] inline int compare ( const size_type _Off, const size_type _Nx,
          const _Elem * const _Ptr, const size_type _Count ) const {

        _Mypair . _Myval2 . _Check_offset ( _Off );
        return _Traits_compare < _Traits > (
            _Mypair . _Myval2 . _Myptr ( ) + _Off, _Mypair . _Myval2 . _Clamp_suffix_size ( _Off, _Nx ), _Ptr, _Count );
    }









































    [ [ nodiscard ] ] inline allocator_type get_allocator ( ) const noexcept {
        return static_cast < allocator_type > ( _Getal ( ) );
    }

private :
    [ [ nodiscard ] ] static inline size_type _Calculate_growth (
        const size_type _Requested, const size_type _Old, const size_type _Max ) noexcept {
        const size_type _Masked = _Requested | _ALLOC_MASK;
        if ( _Masked > _Max ) {
            return _Max;
        }

        if ( _Old > _Max - _Old / 2 ) {
            return _Max;
        }

        return ( :: std :: max ) ( _Masked, _Old + _Old / 2 );
    }

    [ [ nodiscard ] ] inline size_type _Calculate_growth ( const size_type _Requested ) const noexcept {
        return _Calculate_growth ( _Requested, _Mypair . _Myval2 . _Myres, max_size ( ) );
    }

    template < class _Fty, class ... _ArgTys >
    inline basic_string & _Reallocate_for ( const size_type _New_size, _Fty _Fn, _ArgTys ... _Args ) {


        if ( _New_size > max_size ( ) ) {
            _Xlen_string ( );
        }

        const size_type _Old_capacity = _Mypair . _Myval2 . _Myres;
        const size_type _New_capacity = _Calculate_growth ( _New_size );
        auto & _Al = _Getal ( );
        const pointer _New_ptr = _Al . allocate ( _New_capacity + 1 );

        _Start_element_lifetimes ( _Unfancy ( _New_ptr ), _New_capacity + 1 );
        _Mypair . _Myval2 . _Orphan_all ( );
        ;
        _Mypair . _Myval2 . _Mysize = _New_size;
        _Mypair . _Myval2 . _Myres = _New_capacity;
        _Fn ( _Unfancy ( _New_ptr ), _New_size, _Args ... );
        if ( _BUF_SIZE <= _Old_capacity ) {
            _Al . deallocate ( _Mypair . _Myval2 . _Bx . _Ptr, _Old_capacity + 1 );
            _Mypair . _Myval2 . _Bx . _Ptr = _New_ptr;
        } else {
            _Construct_in_place ( _Mypair . _Myval2 . _Bx . _Ptr, _New_ptr );
        }

        ;
        return * this;
    }

    template < class _Fty, class ... _ArgTys >
    inline basic_string & _Reallocate_grow_by ( const size_type _Size_increase, _Fty _Fn, _ArgTys ... _Args ) {


        auto & _My_data = _Mypair . _Myval2;
        const size_type _Old_size = _My_data . _Mysize;
        if ( max_size ( ) - _Old_size < _Size_increase ) {
            _Xlen_string ( );
        }

        const size_type _New_size = _Old_size + _Size_increase;
        const size_type _Old_capacity = _My_data . _Myres;
        const size_type _New_capacity = _Calculate_growth ( _New_size );
        auto & _Al = _Getal ( );
        const pointer _New_ptr = _Al . allocate ( _New_capacity + 1 );

        _Start_element_lifetimes ( _Unfancy ( _New_ptr ), _New_capacity + 1 );
        _My_data . _Orphan_all ( );
        ;
        _My_data . _Mysize = _New_size;
        _My_data . _Myres = _New_capacity;
        _Elem * const _Raw_new = _Unfancy ( _New_ptr );
        if ( _BUF_SIZE <= _Old_capacity ) {
            const pointer _Old_ptr = _My_data . _Bx . _Ptr;
            _Fn ( _Raw_new, _Unfancy ( _Old_ptr ), _Old_size, _Args ... );
            _Al . deallocate ( _Old_ptr, _Old_capacity + 1 );
            _My_data . _Bx . _Ptr = _New_ptr;
        } else {
            _Fn ( _Raw_new, _My_data . _Bx . _Buf, _Old_size, _Args ... );
            _Construct_in_place ( _My_data . _Bx . _Ptr, _New_ptr );
        }

        ;
        return * this;
    }

    inline void _Become_small ( ) {

        auto & _My_data = _Mypair . _Myval2;
        ;
        ;

        _My_data . _Orphan_all ( );
        ;
        const pointer _Ptr = _My_data . _Bx . _Ptr;
        auto & _Al = _Getal ( );
        _Destroy_in_place ( _My_data . _Bx . _Ptr );
        _My_data . _Activate_SSO_buffer ( );
        _Traits :: copy ( _My_data . _Bx . _Buf, _Unfancy ( _Ptr ), _My_data . _Mysize + 1 );
        _Al . deallocate ( _Ptr, _My_data . _Myres + 1 );
        _My_data . _Myres = _BUF_SIZE - 1;
    }

    inline void _Eos ( const size_type _New_size ) {
        ;
        _Traits :: assign ( _Mypair . _Myval2 . _Myptr ( ) [ _Mypair . _Myval2 . _Mysize = _New_size ], _Elem ( ) );
    }

    inline void _Tidy_init ( ) noexcept {

        auto & _My_data = _Mypair . _Myval2;
        _My_data . _Mysize = 0;
        _My_data . _Myres = _BUF_SIZE - 1;
        _My_data . _Activate_SSO_buffer ( );


        _Traits :: assign ( _My_data . _Bx . _Buf [ 0 ], _Elem ( ) );
    }

    inline void _Tidy_deallocate ( ) noexcept {
        auto & _My_data = _Mypair . _Myval2;
        _My_data . _Orphan_all ( );
        if ( _My_data . _Large_string_engaged ( ) ) {
            ;
            const pointer _Ptr = _My_data . _Bx . _Ptr;
            auto & _Al = _Getal ( );
            _Destroy_in_place ( _My_data . _Bx . _Ptr );
            _My_data . _Activate_SSO_buffer ( );
            _Al . deallocate ( _Ptr, _My_data . _Myres + 1 );
        }

        _My_data . _Mysize = 0;
        _My_data . _Myres = _BUF_SIZE - 1;

        _Traits :: assign ( _My_data . _Bx . _Buf [ 0 ], _Elem ( ) );
    }

public :
    inline void _Orphan_all ( ) noexcept {
        _Mypair . _Myval2 . _Orphan_all ( );
    }

private :
    inline void _Swap_proxy_and_iterators ( basic_string & _Right ) {
        _Mypair . _Myval2 . _Swap_proxy_and_iterators ( _Right . _Mypair . _Myval2 );
    }

    inline _Alty & _Getal ( ) noexcept {
        return _Mypair . _Get_first ( );
    }

    inline const _Alty & _Getal ( ) const noexcept {
        return _Mypair . _Get_first ( );
    }

    _Compressed_pair < _Alty, _Scary_val > _Mypair;
};
#line 4922 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\xstring"
template < class _Elem, class _Traits, class _Alloc >
inline void swap ( basic_string < _Elem, _Traits, _Alloc > & _Left,
    basic_string < _Elem, _Traits, _Alloc > & _Right ) noexcept {
    _Left . swap ( _Right );
}
#line 4928
template < class _Elem, class _Traits, class _Alloc >
[ [ nodiscard ] ] inline basic_string < _Elem, _Traits, _Alloc > operator + (
    const basic_string < _Elem, _Traits, _Alloc > & _Left, const basic_string < _Elem, _Traits, _Alloc > & _Right ) {
    const auto _Left_size = _Left . size ( );
    const auto _Right_size = _Right . size ( );
    if ( _Left . max_size ( ) - _Left_size < _Right_size ) {
        _Xlen_string ( );
    }

    return { _String_constructor_concat_tag { }, _Left, _Left . c_str ( ), _Left_size, _Right . c_str ( ), _Right_size };
}
#line 4940
template < class _Elem, class _Traits, class _Alloc >
[ [ nodiscard ] ] inline basic_string < _Elem, _Traits, _Alloc > operator + (
      const _Elem * const _Left, const basic_string < _Elem, _Traits, _Alloc > & _Right ) {
    using _Size_type = typename basic_string < _Elem, _Traits, _Alloc > :: size_type;
    const auto _Left_size = _Convert_size < _Size_type > ( _Traits :: length ( _Left ) );
    const auto _Right_size = _Right . size ( );
    if ( _Right . max_size ( ) - _Right_size < _Left_size ) {
        _Xlen_string ( );
    }

    return { _String_constructor_concat_tag { }, _Right, _Left, _Left_size, _Right . c_str ( ), _Right_size };
}
#line 4953
template < class _Elem, class _Traits, class _Alloc >
[ [ nodiscard ] ] inline basic_string < _Elem, _Traits, _Alloc > operator + (
    const _Elem _Left, const basic_string < _Elem, _Traits, _Alloc > & _Right ) {
    const auto _Right_size = _Right . size ( );
    if ( _Right_size == _Right . max_size ( ) ) {
        _Xlen_string ( );
    }

    return { _String_constructor_concat_tag { }, _Right, :: std :: addressof ( _Left ), 1, _Right . c_str ( ), _Right_size };
}
#line 4964
template < class _Elem, class _Traits, class _Alloc >
[ [ nodiscard ] ] inline basic_string < _Elem, _Traits, _Alloc > operator + (
    const basic_string < _Elem, _Traits, _Alloc > & _Left, const _Elem * const _Right ) {
    using _Size_type = typename basic_string < _Elem, _Traits, _Alloc > :: size_type;
    const auto _Left_size = _Left . size ( );
    const auto _Right_size = _Convert_size < _Size_type > ( _Traits :: length ( _Right ) );
    if ( _Left . max_size ( ) - _Left_size < _Right_size ) {
        _Xlen_string ( );
    }

    return { _String_constructor_concat_tag { }, _Left, _Left . c_str ( ), _Left_size, _Right, _Right_size };
}
#line 4977
template < class _Elem, class _Traits, class _Alloc >
[ [ nodiscard ] ] inline basic_string < _Elem, _Traits, _Alloc > operator + (
    const basic_string < _Elem, _Traits, _Alloc > & _Left, const _Elem _Right ) {
    const auto _Left_size = _Left . size ( );
    if ( _Left_size == _Left . max_size ( ) ) {
        _Xlen_string ( );
    }

    return { _String_constructor_concat_tag { }, _Left, _Left . c_str ( ), _Left_size, :: std :: addressof ( _Right ), 1 };
}
#line 4988
template < class _Elem, class _Traits, class _Alloc >
[ [ nodiscard ] ] inline basic_string < _Elem, _Traits, _Alloc > operator + (
    const basic_string < _Elem, _Traits, _Alloc > & _Left, basic_string < _Elem, _Traits, _Alloc > && _Right ) {
    return :: std :: move ( _Right . insert ( 0, _Left ) );
}
#line 4994
template < class _Elem, class _Traits, class _Alloc >
[ [ nodiscard ] ] inline basic_string < _Elem, _Traits, _Alloc > operator + (
    basic_string < _Elem, _Traits, _Alloc > && _Left, const basic_string < _Elem, _Traits, _Alloc > & _Right ) {
    return :: std :: move ( _Left . append ( _Right ) );
}
#line 5000
template < class _Elem, class _Traits, class _Alloc >
[ [ nodiscard ] ] inline basic_string < _Elem, _Traits, _Alloc > operator + (
    basic_string < _Elem, _Traits, _Alloc > && _Left, basic_string < _Elem, _Traits, _Alloc > && _Right ) {

    do { if ( :: std :: addressof ( _Left ) != :: std :: addressof ( _Right ) ) { } else { do { ( void ) ( ( 1 != _CrtDbgReport ( 2, "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\xstring", 5008, 0, "%s", "You cannot concatenate the same moved string to itself. See N4910 16.4.5.9 [res.on.arguments]/1.3: If a function argument is bou" "nd to an rvalue reference parameter, the implementation may assume that this parameter is a unique reference to this argument, e" "xcept that the argument passed to a move-assignment operator may be a reference to *this (16.4.6.15 [lib.types.movedfrom])." ) ) || ( __debugbreak ( ), 0 ) ); :: _invalid_parameter ( L"\x22\x59\x6f\x75\x20\x63\x61\x6e\x6e\x6f\x74\x20\x63\x6f\x6e\x63\x61\x74\x65\x6e\x61\x74\x65\x20\x74\x68\x65\x20\x73\x61\x6d\x65" L"\x20\x6d\x6f\x76\x65\x64\x20\x73\x74\x72\x69\x6e\x67\x20\x74\x6f\x20\x69\x74\x73\x65\x6c\x66\x2e\x20\x53\x65\x65\x20\x4e\x34\x39" L"\x31\x30\x20\x31\x36\x2e\x34\x2e\x35\x2e\x39\x20\x5b\x72\x65\x73\x2e\x6f\x6e\x2e\x61\x72\x67\x75\x6d\x65\x6e\x74\x73\x5d\x2f\x31" L"\x2e\x33\x3a\x20\x22\x20\x22\x49\x66\x20\x61\x20\x66\x75\x6e\x63\x74\x69\x6f\x6e\x20\x61\x72\x67\x75\x6d\x65\x6e\x74\x20\x69\x73" L"\x20\x62\x6f\x75\x6e\x64\x20\x74\x6f\x20\x61\x6e\x20\x72\x76\x61\x6c\x75\x65\x20\x72\x65\x66\x65\x72\x65\x6e\x63\x65\x20\x70\x61" L"\x72\x61\x6d\x65\x74\x65\x72\x2c\x20\x74\x68\x65\x20\x69\x6d\x70\x6c\x65\x6d\x65\x6e\x74\x61\x74\x69\x6f\x6e\x20\x6d\x61\x79\x20" L"\x61\x73\x73\x75\x6d\x65\x20\x74\x68\x61\x74\x20\x22\x20\x22\x74\x68\x69\x73\x20\x70\x61\x72\x61\x6d\x65\x74\x65\x72\x20\x69\x73" L"\x20\x61\x20\x75\x6e\x69\x71\x75\x65\x20\x72\x65\x66\x65\x72\x65\x6e\x63\x65\x20\x74\x6f\x20\x74\x68\x69\x73\x20\x61\x72\x67\x75" L"\x6d\x65\x6e\x74\x2c\x20\x65\x78\x63\x65\x70\x74\x20\x74\x68\x61\x74\x20\x74\x68\x65\x20\x61\x72\x67\x75\x6d\x65\x6e\x74\x20\x70" L"\x61\x73\x73\x65\x64\x20\x74\x6f\x20\x22\x20\x22\x61\x20\x6d\x6f\x76\x65\x2d\x61\x73\x73\x69\x67\x6e\x6d\x65\x6e\x74\x20\x6f\x70" L"\x65\x72\x61\x74\x6f\x72\x20\x6d\x61\x79\x20\x62\x65\x20\x61\x20\x72\x65\x66\x65\x72\x65\x6e\x63\x65\x20\x74\x6f\x20\x2a\x74\x68" L"\x69\x73\x20\x28\x31\x36\x2e\x34\x2e\x36\x2e\x31\x35\x20\x5b\x6c\x69\x62\x2e\x74\x79\x70\x65\x73\x2e\x6d\x6f\x76\x65\x64\x66\x72" L"\x6f\x6d\x5d\x29\x2e\x22", L"", L"\x45\x3a\x5c\x56\x69\x73\x75\x61\x6c\x53\x74\x75\x64\x69\x6f\x5c\x32\x30\x32\x32\x5c\x50\x72\x65\x76\x69\x65\x77\x5c\x56\x43\x5c" L"\x54\x6f\x6f\x6c\x73\x5c\x4d\x53\x56\x43\x5c\x31\x34\x2e\x33\x37\x2e\x33\x32\x37\x30\x35\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x78" L"\x73\x74\x72\x69\x6e\x67", 5008, 0 ); } while ( false ); }; } while ( false );


    return { _String_constructor_concat_tag { }, _Left, _Right };
}
#line 5013 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\xstring"
template < class _Elem, class _Traits, class _Alloc >
[ [ nodiscard ] ] inline basic_string < _Elem, _Traits, _Alloc > operator + (
      const _Elem * const _Left, basic_string < _Elem, _Traits, _Alloc > && _Right ) {
    return :: std :: move ( _Right . insert ( 0, _Left ) );
}
#line 5019
template < class _Elem, class _Traits, class _Alloc >
[ [ nodiscard ] ] inline basic_string < _Elem, _Traits, _Alloc > operator + (
    const _Elem _Left, basic_string < _Elem, _Traits, _Alloc > && _Right ) {
    return :: std :: move ( _Right . insert ( 0, 1, _Left ) );
}
#line 5025
template < class _Elem, class _Traits, class _Alloc >
[ [ nodiscard ] ] inline basic_string < _Elem, _Traits, _Alloc > operator + (
    basic_string < _Elem, _Traits, _Alloc > && _Left, const _Elem * const _Right ) {
    return :: std :: move ( _Left . append ( _Right ) );
}
#line 5031
template < class _Elem, class _Traits, class _Alloc >
[ [ nodiscard ] ] inline basic_string < _Elem, _Traits, _Alloc > operator + (
    basic_string < _Elem, _Traits, _Alloc > && _Left, const _Elem _Right ) {
    _Left . push_back ( _Right );
    return :: std :: move ( _Left );
}
#line 5038
template < class _Elem, class _Traits, class _Alloc >
[ [ nodiscard ] ] inline bool operator == (
    const basic_string < _Elem, _Traits, _Alloc > & _Left, const basic_string < _Elem, _Traits, _Alloc > & _Right ) noexcept {
    return _Left . _Equal ( _Right );
}
#line 5044
template < class _Elem, class _Traits, class _Alloc >
[ [ nodiscard ] ] inline bool operator == (
    const basic_string < _Elem, _Traits, _Alloc > & _Left, const _Elem * const _Right ) {
    return _Left . _Equal ( _Right );
}
#line 5063 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\xstring"
template < class _Elem, class _Traits, class _Alloc >
[ [ nodiscard ] ] bool operator == ( const _Elem * const _Left, const basic_string < _Elem, _Traits, _Alloc > & _Right ) {
    return _Right . _Equal ( _Left );
}
#line 5068
template < class _Elem, class _Traits, class _Alloc >
[ [ nodiscard ] ] bool operator != (
    const basic_string < _Elem, _Traits, _Alloc > & _Left, const basic_string < _Elem, _Traits, _Alloc > & _Right ) noexcept {
    return ! ( _Left == _Right );
}
#line 5074
template < class _Elem, class _Traits, class _Alloc >
[ [ nodiscard ] ] bool operator != ( const _Elem * const _Left, const basic_string < _Elem, _Traits, _Alloc > & _Right ) {
    return ! ( _Left == _Right );
}
#line 5079
template < class _Elem, class _Traits, class _Alloc >
[ [ nodiscard ] ] bool operator != ( const basic_string < _Elem, _Traits, _Alloc > & _Left, const _Elem * const _Right ) {
    return ! ( _Left == _Right );
}
#line 5084
template < class _Elem, class _Traits, class _Alloc >
[ [ nodiscard ] ] bool operator < (
    const basic_string < _Elem, _Traits, _Alloc > & _Left, const basic_string < _Elem, _Traits, _Alloc > & _Right ) noexcept {
    return _Left . compare ( _Right ) < 0;
}
#line 5090
template < class _Elem, class _Traits, class _Alloc >
[ [ nodiscard ] ] bool operator < ( const _Elem * const _Left, const basic_string < _Elem, _Traits, _Alloc > & _Right ) {
    return _Right . compare ( _Left ) > 0;
}
#line 5095
template < class _Elem, class _Traits, class _Alloc >
[ [ nodiscard ] ] bool operator < ( const basic_string < _Elem, _Traits, _Alloc > & _Left, const _Elem * const _Right ) {
    return _Left . compare ( _Right ) < 0;
}
#line 5100
template < class _Elem, class _Traits, class _Alloc >
[ [ nodiscard ] ] bool operator > (
    const basic_string < _Elem, _Traits, _Alloc > & _Left, const basic_string < _Elem, _Traits, _Alloc > & _Right ) noexcept {
    return _Right < _Left;
}
#line 5106
template < class _Elem, class _Traits, class _Alloc >
[ [ nodiscard ] ] bool operator > ( const _Elem * const _Left, const basic_string < _Elem, _Traits, _Alloc > & _Right ) {
    return _Right < _Left;
}
#line 5111
template < class _Elem, class _Traits, class _Alloc >
[ [ nodiscard ] ] bool operator > ( const basic_string < _Elem, _Traits, _Alloc > & _Left, const _Elem * const _Right ) {
    return _Right < _Left;
}
#line 5116
template < class _Elem, class _Traits, class _Alloc >
[ [ nodiscard ] ] bool operator <= (
    const basic_string < _Elem, _Traits, _Alloc > & _Left, const basic_string < _Elem, _Traits, _Alloc > & _Right ) noexcept {
    return ! ( _Right < _Left );
}
#line 5122
template < class _Elem, class _Traits, class _Alloc >
[ [ nodiscard ] ] bool operator <= ( const _Elem * const _Left, const basic_string < _Elem, _Traits, _Alloc > & _Right ) {
    return ! ( _Right < _Left );
}
#line 5127
template < class _Elem, class _Traits, class _Alloc >
[ [ nodiscard ] ] bool operator <= ( const basic_string < _Elem, _Traits, _Alloc > & _Left, const _Elem * const _Right ) {
    return ! ( _Right < _Left );
}
#line 5132
template < class _Elem, class _Traits, class _Alloc >
[ [ nodiscard ] ] bool operator >= (
    const basic_string < _Elem, _Traits, _Alloc > & _Left, const basic_string < _Elem, _Traits, _Alloc > & _Right ) noexcept {
    return ! ( _Left < _Right );
}
#line 5138
template < class _Elem, class _Traits, class _Alloc >
[ [ nodiscard ] ] bool operator >= ( const _Elem * const _Left, const basic_string < _Elem, _Traits, _Alloc > & _Right ) {
    return ! ( _Left < _Right );
}
#line 5143
template < class _Elem, class _Traits, class _Alloc >
[ [ nodiscard ] ] bool operator >= ( const basic_string < _Elem, _Traits, _Alloc > & _Left, const _Elem * const _Right ) {
    return ! ( _Left < _Right );
}
#line 5149 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\xstring"
using string = basic_string< char, char_traits< char> , allocator< char> > ; 
#line 5150
using wstring = basic_string< __wchar_t, char_traits< __wchar_t> , allocator< __wchar_t> > ; 
#line 5154
using u16string = basic_string< char16_t, char_traits< char16_t> , allocator< char16_t> > ; 
#line 5155
using u32string = basic_string< char32_t, char_traits< char32_t> , allocator< char32_t> > ; 
#line 5157
template < class _Elem, class _Alloc >
struct hash < basic_string < _Elem, char_traits < _Elem >, _Alloc > >
    : _Conditionally_enabled_hash < basic_string < _Elem, char_traits < _Elem >, _Alloc >, _Is_EcharT < _Elem > > {
    [ [ nodiscard ] ] static size_t _Do_hash ( const basic_string < _Elem, char_traits < _Elem >, _Alloc > & _Keyval ) noexcept {
        return _Hash_array_representation ( _Keyval . c_str ( ), _Keyval . size ( ) );
    }
};
#line 5165
template < class _Elem, class _Traits, class _Alloc >
basic_istream < _Elem, _Traits > & operator >> (
    basic_istream < _Elem, _Traits > & _Istr, basic_string < _Elem, _Traits, _Alloc > & _Str ) {
    using _Myis = basic_istream < _Elem, _Traits >;
    using _Ctype = typename _Myis :: _Ctype;
    using _Mystr = basic_string < _Elem, _Traits, _Alloc >;
    using _Mysizt = typename _Mystr :: size_type;

    typename _Myis :: iostate _State = _Myis :: goodbit;
    bool _Changed = false;
    const typename _Myis :: sentry _Ok ( _Istr );

    if ( _Ok ) {
        const _Ctype & _Ctype_fac = :: std :: use_facet < _Ctype > ( _Istr . getloc ( ) );
        _Str . erase ( );

        try {
        _Mysizt _Size;
        if ( 0 < _Istr . width ( ) && static_cast < _Mysizt > ( _Istr . width ( ) ) < _Str . max_size ( ) ) {
            _Size = static_cast < _Mysizt > ( _Istr . width ( ) );
        } else {
            _Size = _Str . max_size ( );
        }

        typename _Traits :: int_type _Meta = _Istr . rdbuf ( ) -> sgetc ( );

        for (; 0 < _Size; -- _Size, _Meta = _Istr . rdbuf ( ) -> snextc ( ) ) {
            if ( _Traits :: eq_int_type ( _Traits :: eof ( ), _Meta ) ) {
                _State |= _Myis :: eofbit;
                break;
            } else if ( _Ctype_fac . is ( _Ctype :: space, _Traits :: to_char_type ( _Meta ) ) ) {
                break;
            } else {
                _Str . push_back ( _Traits :: to_char_type ( _Meta ) );
                _Changed = true;
            }
        }
        } catch ( ... ) { ( _Istr ) . setstate ( _Myis :: badbit, true ); }
    }

    _Istr . width ( 0 );
    if ( ! _Changed ) {
        _State |= _Myis :: failbit;
    }

    _Istr . setstate ( _State );
    return _Istr;
}
#line 5214
template < class _Elem, class _Traits, class _Alloc >
basic_ostream < _Elem, _Traits > & operator << (
    basic_ostream < _Elem, _Traits > & _Ostr, const basic_string < _Elem, _Traits, _Alloc > & _Str ) {
    return _Insert_string ( _Ostr, _Str . data ( ), _Str . size ( ) );
}
#line 5220
inline namespace literals { 
#line 5221
inline namespace string_literals { 
#line 5222
[[nodiscard]] inline string operator ""s(const char *_Str, size_t _Len) { 
#line 5223
return string{_Str, _Len}; 
#line 5224
} 
#line 5226
[[nodiscard]] inline wstring operator ""s(const __wchar_t *_Str, size_t _Len) { 
#line 5227
return wstring{_Str, _Len}; 
#line 5228
} 
#line 5236
[[nodiscard]] inline u16string operator ""s(const char16_t *_Str, size_t _Len) { 
#line 5237
return u16string{_Str, _Len}; 
#line 5238
} 
#line 5240
[[nodiscard]] inline u32string operator ""s(const char32_t *_Str, size_t _Len) { 
#line 5241
return u32string{_Str, _Len}; 
#line 5242
} 
#line 5243
}
#line 5244
}
#line 5274 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\xstring"
}
#line 5283
#pragma warning(pop)
#pragma pack ( pop )
#line 14 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\stdexcept"
#pragma pack ( push, 8 )
#pragma warning(push, 3)
#pragma warning(disable : 4180 4412 4455 4494 4514 4574 4582 4583 4587 4588 4619 4623 4625 4626 4643 4648 4702 4793 4820 4988 5026 5027 5045 6294 4984 5053 )
#line 20
namespace std { 
#line 21
class logic_error : public exception { 
#line 23
public: using _Mybase = exception; 
#line 25
explicit logic_error(const string &_Message) : _Mybase(_Message.c_str()) { } 
#line 27
explicit logic_error(const char *_Message) : _Mybase(_Message) { } 
#line 35 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\stdexcept"
}; 
#line 37
class domain_error : public logic_error { 
#line 39
public: using _Mybase = logic_error; 
#line 41
explicit domain_error(const string &_Message) : _Mybase(_Message.c_str()) { } 
#line 43
explicit domain_error(const char *_Message) : _Mybase(_Message) { } 
#line 51 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\stdexcept"
}; 
#line 53
class invalid_argument : public logic_error { 
#line 55
public: using _Mybase = logic_error; 
#line 57
explicit invalid_argument(const string &_Message) : _Mybase(_Message.c_str()) { } 
#line 59
explicit invalid_argument(const char *_Message) : _Mybase(_Message) { } 
#line 67 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\stdexcept"
}; 
#line 69
class length_error : public logic_error { 
#line 71
public: using _Mybase = logic_error; 
#line 73
explicit length_error(const string &_Message) : _Mybase(_Message.c_str()) { } 
#line 75
explicit length_error(const char *_Message) : _Mybase(_Message) { } 
#line 83 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\stdexcept"
}; 
#line 85
class out_of_range : public logic_error { 
#line 87
public: using _Mybase = logic_error; 
#line 89
explicit out_of_range(const string &_Message) : _Mybase(_Message.c_str()) { } 
#line 91
explicit out_of_range(const char *_Message) : _Mybase(_Message) { } 
#line 99 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\stdexcept"
}; 
#line 101
class runtime_error : public exception { 
#line 103
public: using _Mybase = exception; 
#line 105
explicit runtime_error(const string &_Message) : _Mybase(_Message.c_str()) { } 
#line 107
explicit runtime_error(const char *_Message) : _Mybase(_Message) { } 
#line 115 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\stdexcept"
}; 
#line 117
class overflow_error : public runtime_error { 
#line 119
public: using _Mybase = runtime_error; 
#line 121
explicit overflow_error(const string &_Message) : _Mybase(_Message.c_str()) { } 
#line 123
explicit overflow_error(const char *_Message) : _Mybase(_Message) { } 
#line 131 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\stdexcept"
}; 
#line 133
class underflow_error : public runtime_error { 
#line 135
public: using _Mybase = runtime_error; 
#line 137
explicit underflow_error(const string &_Message) : _Mybase(_Message.c_str()) { } 
#line 139
explicit underflow_error(const char *_Message) : _Mybase(_Message) { } 
#line 147 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\stdexcept"
}; 
#line 149
class range_error : public runtime_error { 
#line 151
public: using _Mybase = runtime_error; 
#line 153
explicit range_error(const string &_Message) : _Mybase(_Message.c_str()) { } 
#line 155
explicit range_error(const char *_Message) : _Mybase(_Message) { } 
#line 163 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\stdexcept"
}; 
#line 165
[[noreturn]] inline void _Throw_range_error(const char *const _Message) { 
#line 166
throw range_error{_Message}; 
#line 167
} 
#line 168
}
#line 171
#pragma warning(pop)
#pragma pack ( pop )
#line 12 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\xcall_once.h"
#pragma pack ( push, 8 )
#pragma warning(push, 3)
#pragma warning(disable : 4180 4412 4455 4494 4514 4574 4582 4583 4587 4588 4619 4623 4625 4626 4643 4648 4702 4793 4820 4988 5026 5027 5045 6294 4984 5053 )
#line 19
namespace std { 
#line 20
struct once_flag { 
#line 21
constexpr once_flag() noexcept : _Opaque((nullptr)) { } 
#line 23
once_flag(const once_flag &) = delete;
#line 24
once_flag &operator=(const once_flag &) = delete;
#line 26
void *_Opaque; 
#line 27
}; 
#line 30
using _Execute_once_fp_t = int (__stdcall *)(void *, void *, void **); 
#line 33
int __cdecl _Execute_once(once_flag & _Flag, _Execute_once_fp_t _Callback, void * _Pv) noexcept; 
#line 36
template < class _Ty >
union _Immortalizer_impl {
    constexpr _Immortalizer_impl ( ) noexcept : _Storage { } { }
    _Immortalizer_impl ( const _Immortalizer_impl & ) = delete;
    _Immortalizer_impl & operator = ( const _Immortalizer_impl & ) = delete;
    ~ _Immortalizer_impl ( ) {

    }

    _Ty _Storage;
};
#line 47
}
#line 51
#pragma warning(pop)
#pragma pack ( pop )
#line 12 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\xerrc.h"
#pragma pack ( push, 8 )
#pragma warning(push, 3)
#pragma warning(disable : 4180 4412 4455 4494 4514 4574 4582 4583 4587 4588 4619 4623 4625 4626 4643 4648 4702 4793 4820 4988 5026 5027 5045 6294 4984 5053 )
#line 19
namespace std { 
#line 20
enum class errc { 
#line 21
address_family_not_supported = 102, 
#line 22
address_in_use = 100, 
#line 23
address_not_available, 
#line 24
already_connected = 113, 
#line 25
argument_list_too_long = 7, 
#line 26
argument_out_of_domain = 33, 
#line 27
bad_address = 14, 
#line 28
bad_file_descriptor = 9, 
#line 29
bad_message = 104, 
#line 30
broken_pipe = 32, 
#line 31
connection_aborted = 106, 
#line 32
connection_already_in_progress = 103, 
#line 33
connection_refused = 107, 
#line 34
connection_reset, 
#line 35
cross_device_link = 18, 
#line 36
destination_address_required = 109, 
#line 37
device_or_resource_busy = 16, 
#line 38
directory_not_empty = 41, 
#line 39
executable_format_error = 8, 
#line 40
file_exists = 17, 
#line 41
file_too_large = 27, 
#line 42
filename_too_long = 38, 
#line 43
function_not_supported = 40, 
#line 44
host_unreachable = 110, 
#line 45
identifier_removed, 
#line 46
illegal_byte_sequence = 42, 
#line 47
inappropriate_io_control_operation = 25, 
#line 48
interrupted = 4, 
#line 49
invalid_argument = 22, 
#line 50
invalid_seek = 29, 
#line 51
io_error = 5, 
#line 52
is_a_directory = 21, 
#line 53
message_size = 115, 
#line 54
network_down, 
#line 55
network_reset, 
#line 56
network_unreachable, 
#line 57
no_buffer_space, 
#line 58
no_child_process = 10, 
#line 59
no_link = 121, 
#line 60
no_lock_available = 39, 
#line 61
no_message_available = 120, 
#line 62
no_message = 122, 
#line 63
no_protocol_option, 
#line 64
no_space_on_device = 28, 
#line 65
no_stream_resources = 124, 
#line 66
no_such_device_or_address = 6, 
#line 67
no_such_device = 19, 
#line 68
no_such_file_or_directory = 2, 
#line 69
no_such_process, 
#line 70
not_a_directory = 20, 
#line 71
not_a_socket = 128, 
#line 72
not_a_stream = 125, 
#line 73
not_connected, 
#line 74
not_enough_memory = 12, 
#line 75
not_supported = 129, 
#line 76
operation_canceled = 105, 
#line 77
operation_in_progress = 112, 
#line 78
operation_not_permitted = 1, 
#line 79
operation_not_supported = 130, 
#line 80
operation_would_block = 140, 
#line 81
owner_dead = 133, 
#line 82
permission_denied = 13, 
#line 83
protocol_error = 134, 
#line 84
protocol_not_supported, 
#line 85
read_only_file_system = 30, 
#line 86
resource_deadlock_would_occur = 36, 
#line 87
resource_unavailable_try_again = 11, 
#line 88
result_out_of_range = 34, 
#line 89
state_not_recoverable = 127, 
#line 90
stream_timeout = 137, 
#line 91
text_file_busy = 139, 
#line 92
timed_out = 138, 
#line 93
too_many_files_open_in_system = 23, 
#line 94
too_many_files_open, 
#line 95
too_many_links = 31, 
#line 96
too_many_symbolic_link_levels = 114, 
#line 97
value_too_large = 132, 
#line 98
wrong_protocol_type = 136
#line 99
}; 
#line 101
}
#line 105
#pragma warning(pop)
#pragma pack ( pop )
#line 14 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\ctime"
#pragma pack ( push, 8 )
#pragma warning(push, 3)
#pragma warning(disable : 4180 4412 4455 4494 4514 4574 4582 4583 4587 4588 4619 4623 4625 4626 4643 4648 4702 4793 4820 4988 5026 5027 5045 6294 4984 5053 )
#line 21
namespace std { 
#line 22
using ::clock_t;
#line 24
using ::time_t;
#line 26
using ::asctime;
#line 27
using ::clock;
#line 28
using ::strftime;
#line 80 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\ctime"
using ::ctime;
#line 81
using ::difftime;
#line 82
using ::gmtime;
#line 83
using ::localtime;
#line 84
using ::mktime;
#line 85
using ::time;
#line 91 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\ctime"
}
#line 95
#pragma warning(pop)
#pragma pack ( pop )
#line 14 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\xtimec.h"
#pragma pack ( push, 8 )
#pragma warning(push, 3)
#pragma warning(disable : 4180 4412 4455 4494 4514 4574 4582 4583 4587 4588 4619 4623 4625 4626 4643 4648 4702 4793 4820 4988 5026 5027 5045 6294 4984 5053 )
#line 21
extern "C" {
#line 23
struct xtime { 
#line 24
__time64_t sec; 
#line 25
long nsec; 
#line 26
}; 
#line 28
long __cdecl _Xtime_diff_to_millis2(const xtime *, const xtime *); 
#line 29
__int64 __cdecl _Xtime_get_ticks(); 
#line 36
__int64 __cdecl _Query_perf_counter(); 
#line 37
__int64 __cdecl _Query_perf_frequency(); 
#line 39
}
#line 43
#pragma warning(pop)
#pragma pack ( pop )
#line 14 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\xthreads.h"
#pragma pack ( push, 8 )
#pragma warning(push, 3)
#pragma warning(disable : 4180 4412 4455 4494 4514 4574 4582 4583 4587 4588 4619 4623 4625 4626 4643 4648 4702 4793 4820 4988 5026 5027 5045 6294 4984 5053 )
#line 21
extern "C" {
#line 22
using _Thrd_id_t = unsigned; 
#line 23
struct _Thrd_t { 
#line 24
void *_Hnd; 
#line 25
_Thrd_id_t _Id; 
#line 26
}; 
#line 43
constexpr size_t _Mtx_internal_imp_size = (80); 
#line 44
constexpr size_t _Mtx_internal_imp_alignment = (8); 
#line 45
constexpr size_t _Cnd_internal_imp_size = (72); 
#line 46
constexpr size_t _Cnd_internal_imp_alignment = (8); 
#line 59 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\xthreads.h"
struct _Mtx_internal_imp_t; 
#line 60
struct _Cnd_internal_imp_t; 
#line 61
using _Mtx_t = _Mtx_internal_imp_t *; 
#line 62
using _Cnd_t = _Cnd_internal_imp_t *; 
#line 65 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\xthreads.h"
enum { _Thrd_success, _Thrd_nomem, _Thrd_timedout, _Thrd_busy, _Thrd_error}; 
#line 68
int __cdecl _Thrd_detach(_Thrd_t); 
#line 69
int __cdecl _Thrd_join(_Thrd_t, int *); 
#line 70
void __cdecl _Thrd_sleep(const xtime *); 
#line 71
void __cdecl _Thrd_yield(); 
#line 72
unsigned __cdecl _Thrd_hardware_concurrency(); 
#line 73
_Thrd_id_t __cdecl _Thrd_id(); 
#line 76
enum { 
#line 77
_Mtx_plain = 1, 
#line 78
_Mtx_try, 
#line 79
_Mtx_timed = 4, 
#line 80
_Mtx_recursive = 256
#line 81
}; 
#line 83
int __cdecl _Mtx_init(_Mtx_t *, int); 
#line 84
void __cdecl _Mtx_destroy(_Mtx_t); 
#line 85
void __cdecl _Mtx_init_in_situ(_Mtx_t, int); 
#line 86
void __cdecl _Mtx_destroy_in_situ(_Mtx_t); 
#line 87
int __cdecl _Mtx_current_owns(_Mtx_t); 
#line 88
int __cdecl _Mtx_lock(_Mtx_t); 
#line 89
int __cdecl _Mtx_trylock(_Mtx_t); 
#line 90
int __cdecl _Mtx_timedlock(_Mtx_t, const xtime *); 
#line 91
int __cdecl _Mtx_unlock(_Mtx_t); 
#line 93
void *__cdecl _Mtx_getconcrtcs(_Mtx_t); 
#line 94
void __cdecl _Mtx_clear_owner(_Mtx_t); 
#line 95
void __cdecl _Mtx_reset_owner(_Mtx_t); 
#line 99
using _Smtx_t = void *; 
#line 100
void __cdecl _Smtx_lock_exclusive(_Smtx_t *); 
#line 101
void __cdecl _Smtx_lock_shared(_Smtx_t *); 
#line 102
int __cdecl _Smtx_try_lock_exclusive(_Smtx_t *); 
#line 103
int __cdecl _Smtx_try_lock_shared(_Smtx_t *); 
#line 104
void __cdecl _Smtx_unlock_exclusive(_Smtx_t *); 
#line 105
void __cdecl _Smtx_unlock_shared(_Smtx_t *); 
#line 108
int __cdecl _Cnd_init(_Cnd_t *); 
#line 109
void __cdecl _Cnd_destroy(_Cnd_t); 
#line 110
void __cdecl _Cnd_init_in_situ(_Cnd_t); 
#line 111
void __cdecl _Cnd_destroy_in_situ(_Cnd_t); 
#line 112
int __cdecl _Cnd_wait(_Cnd_t, _Mtx_t); 
#line 113
int __cdecl _Cnd_timedwait(_Cnd_t, _Mtx_t, const xtime *); 
#line 114
int __cdecl _Cnd_broadcast(_Cnd_t); 
#line 115
int __cdecl _Cnd_signal(_Cnd_t); 
#line 116
void __cdecl _Cnd_register_at_thread_exit(_Cnd_t, _Mtx_t, int *); 
#line 117
void __cdecl _Cnd_unregister_at_thread_exit(_Mtx_t); 
#line 118
void __cdecl _Cnd_do_broadcast_at_thread_exit(); 
#line 119
}
#line 121
namespace std { 
#line 122
enum { 
#line 123
_DEVICE_OR_RESOURCE_BUSY, 
#line 124
_INVALID_ARGUMENT, 
#line 125
_NO_SUCH_PROCESS, 
#line 126
_NOT_ENOUGH_MEMORY, 
#line 127
_OPERATION_NOT_PERMITTED, 
#line 128
_RESOURCE_DEADLOCK_WOULD_OCCUR, 
#line 129
_RESOURCE_UNAVAILABLE_TRY_AGAIN
#line 130
}; 
#line 132
[[noreturn]] void __cdecl _Throw_Cpp_error(int _Code); 
#line 133
}
#line 136
#pragma warning(pop)
#pragma pack ( pop )
#line 25 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\atomic"
#pragma pack ( push, 8 )
#pragma warning(push, 3)
#pragma warning(disable : 4180 4412 4455 4494 4514 4574 4582 4583 4587 4588 4619 4623 4625 4626 4643 4648 4702 4793 4820 4988 5026 5027 5045 6294 4984 5053 )
#line 41 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\atomic"
extern "C" [[nodiscard]] unsigned char __stdcall __std_atomic_compare_exchange_128(__int64 * _Destination, __int64 _ExchangeHigh, __int64 _ExchangeLow, __int64 * _ComparandResult) noexcept; 
#line 44
extern "C" [[nodiscard]] char __stdcall __std_atomic_has_cmpxchg16b() noexcept; 
#line 87 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\atomic"
enum { 
#line 88
_Atomic_memory_order_relaxed, 
#line 89
_Atomic_memory_order_consume, 
#line 90
_Atomic_memory_order_acquire, 
#line 91
_Atomic_memory_order_release, 
#line 92
_Atomic_memory_order_acq_rel, 
#line 93
_Atomic_memory_order_seq_cst
#line 94
}; 
#line 104 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\atomic"
extern "C" inline void _Check_memory_order(const unsigned _Order) noexcept { 
#line 105
if (_Order > (_Atomic_memory_order_seq_cst)) { 
#line 106
do { (void)((1 != _CrtDbgReport(2, "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\atomic", 106, 0, "%s", "Invalid memory order")) || (__debugbreak(), 0)); ::_invalid_parameter(L"\x22\x49\x6e\x76\x61\x6c\x69\x64\x20\x6d\x65\x6d\x6f\x72\x79\x20\x6f\x72\x64\x65\x72\x22", L"", L"\x45\x3a\x5c\x56\x69\x73\x75\x61\x6c\x53\x74\x75\x64\x69\x6f\x5c\x32\x30\x32\x32\x5c\x50\x72\x65\x76\x69\x65\x77\x5c\x56\x43\x5c" L"\x54\x6f\x6f\x6c\x73\x5c\x4d\x53\x56\x43\x5c\x31\x34\x2e\x33\x37\x2e\x33\x32\x37\x30\x35\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x61" L"\x74\x6f\x6d\x69\x63", 106, 0); } while (false); 
#line 107
}  
#line 108
} 
#line 254 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\atomic"
#pragma warning(push)
#pragma warning(disable : 6001)
#pragma warning(disable : 28113)
#line 258
extern "C" inline void _Atomic_thread_fence(const unsigned _Order) noexcept { 
#line 259
if (_Order == (_Atomic_memory_order_relaxed)) { 
#line 260
return; 
#line 261
}  
#line 264
__pragma( warning(push)) __pragma( warning(disable : 4996)) _ReadWriteBarrier(); __pragma( warning(pop)) 
#line 265
if (_Order == (_Atomic_memory_order_seq_cst)) { 
#line 266
volatile long _Guard; 
#line 271
(void)_InterlockedIncrement(&_Guard); 
#line 272
__pragma( warning(push)) __pragma( warning(disable : 4996)) _ReadWriteBarrier(); __pragma( warning(pop)) 
#line 273
}  
#line 279 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\atomic"
} 
#pragma warning(pop)
#line 284
extern "C" {
#line 285
_Smtx_t *__stdcall __std_atomic_get_mutex(const void * _Key) noexcept; 
#line 286
}
#line 296 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\atomic"
namespace std { 
#line 302 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\atomic"
template < class _Ty >
struct _Storage_for {

    alignas ( _Ty ) unsigned char _Storage [ sizeof ( _Ty ) ];

    _Storage_for ( ) = default;
    _Storage_for ( const _Storage_for & ) = delete;
    _Storage_for & operator = ( const _Storage_for & ) = delete;








    [ [ nodiscard ] ] _Ty & _Ref ( ) noexcept {
        return reinterpret_cast < _Ty & > ( _Storage );
    }

    [ [ nodiscard ] ] _Ty * _Ptr ( ) noexcept {
        return reinterpret_cast < _Ty * > ( & _Storage );
    }
};
#line 333 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\atomic"
extern "C" inline void atomic_thread_fence(const memory_order _Order) noexcept { 
#line 334
::_Atomic_thread_fence(static_cast< unsigned>(_Order)); 
#line 335
} 
#line 337
extern "C" inline void atomic_signal_fence(const memory_order _Order) noexcept { 
#line 338
if (_Order != (memory_order_relaxed)) { 
#line 339
__pragma( warning(push)) __pragma( warning(disable : 4996)) _ReadWriteBarrier(); __pragma( warning(pop)) 
#line 340
}  
#line 341
} 
#line 343
template < class _Ty >
_Ty kill_dependency ( _Ty _Arg ) noexcept {
    return _Arg;
}
#line 348
inline void _Check_store_memory_order(const memory_order _Order) noexcept { 
#line 349
switch (_Order) { 
#line 350
case memory_order_relaxed:  
#line 351
case memory_order_release:  
#line 352
case memory_order_seq_cst:  
#line 354
break; 
#line 355
case memory_order_consume:  
#line 356
case memory_order_acquire:  
#line 357
case memory_order_acq_rel:  
#line 358
default:  
#line 359
do { (void)((1 != _CrtDbgReport(2, "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\atomic", 359, 0, "%s", "Invalid memory order")) || (__debugbreak(), 0)); ::_invalid_parameter(L"\x22\x49\x6e\x76\x61\x6c\x69\x64\x20\x6d\x65\x6d\x6f\x72\x79\x20\x6f\x72\x64\x65\x72\x22", L"", L"\x45\x3a\x5c\x56\x69\x73\x75\x61\x6c\x53\x74\x75\x64\x69\x6f\x5c\x32\x30\x32\x32\x5c\x50\x72\x65\x76\x69\x65\x77\x5c\x56\x43\x5c" L"\x54\x6f\x6f\x6c\x73\x5c\x4d\x53\x56\x43\x5c\x31\x34\x2e\x33\x37\x2e\x33\x32\x37\x30\x35\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x61" L"\x74\x6f\x6d\x69\x63", 359, 0); } while (false); 
#line 360
break; 
#line 361
}  
#line 362
} 
#line 364
inline void _Check_load_memory_order(const memory_order _Order) noexcept { 
#line 365
switch (_Order) { 
#line 366
case memory_order_relaxed:  
#line 367
case memory_order_consume:  
#line 368
case memory_order_acquire:  
#line 369
case memory_order_seq_cst:  
#line 371
break; 
#line 372
case memory_order_release:  
#line 373
case memory_order_acq_rel:  
#line 374
default:  
#line 375
do { (void)((1 != _CrtDbgReport(2, "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\atomic", 375, 0, "%s", "Invalid memory order")) || (__debugbreak(), 0)); ::_invalid_parameter(L"\x22\x49\x6e\x76\x61\x6c\x69\x64\x20\x6d\x65\x6d\x6f\x72\x79\x20\x6f\x72\x64\x65\x72\x22", L"", L"\x45\x3a\x5c\x56\x69\x73\x75\x61\x6c\x53\x74\x75\x64\x69\x6f\x5c\x32\x30\x32\x32\x5c\x50\x72\x65\x76\x69\x65\x77\x5c\x56\x43\x5c" L"\x54\x6f\x6f\x6c\x73\x5c\x4d\x53\x56\x43\x5c\x31\x34\x2e\x33\x37\x2e\x33\x32\x37\x30\x35\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x61" L"\x74\x6f\x6d\x69\x63", 375, 0); } while (false); 
#line 376
break; 
#line 377
}  
#line 378
} 
#line 380
[[nodiscard]] inline memory_order _Combine_cas_memory_orders(const memory_order 
#line 381
_Success, const memory_order _Failure) noexcept { 
#line 393
static constexpr memory_order _Combined_memory_orders[6][6] = {{memory_order_relaxed, memory_order_consume, memory_order_acquire, memory_order_release, memory_order_acq_rel, memory_order_seq_cst}, {memory_order_consume, memory_order_consume, memory_order_acquire, memory_order_acq_rel, memory_order_acq_rel, memory_order_seq_cst}, {memory_order_acquire, memory_order_acquire, memory_order_acquire, memory_order_acq_rel, memory_order_acq_rel, memory_order_seq_cst}, {memory_order_release, memory_order_acq_rel, memory_order_acq_rel, memory_order_release, memory_order_acq_rel, memory_order_seq_cst}, {memory_order_acq_rel, memory_order_acq_rel, memory_order_acq_rel, memory_order_acq_rel, memory_order_acq_rel, memory_order_seq_cst}, {memory_order_seq_cst, memory_order_seq_cst, memory_order_seq_cst, memory_order_seq_cst, memory_order_seq_cst, memory_order_seq_cst}}; 
#line 407
_Check_memory_order(static_cast< unsigned>(_Success)); 
#line 408
_Check_load_memory_order(_Failure); 
#line 409
return (_Combined_memory_orders[static_cast< int>(_Success)])[static_cast< int>(_Failure)]; 
#line 410
} 
#line 412
template < class _Integral, class _Ty >
[ [ nodiscard ] ] _Integral _Atomic_reinterpret_as ( const _Ty & _Source ) noexcept {

    static_assert ( is_integral_v < _Integral >, "Tried to reinterpret memory as non-integral" );
    if constexpr ( is_integral_v < _Ty > && sizeof ( _Integral ) == sizeof ( _Ty ) ) {
        return static_cast < _Integral > ( _Source );
    } else if constexpr ( is_pointer_v < _Ty > && sizeof ( _Integral ) == sizeof ( _Ty ) ) {
        return reinterpret_cast < _Integral > ( _Source );
    } else {
        _Integral _Result { };
        :: memcpy ( & _Result, :: std :: addressof ( _Source ), sizeof ( _Source ) );
        return _Result;
    }
}
#line 428
template< class _Ty> 
#line 429
struct _Atomic_padded { 
#line 430
alignas(sizeof(_Ty)) mutable _Ty _Value; 
#line 431
}; 
#line 473 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\atomic"
template< class _Ty> 
#line 474
struct _Atomic_storage_types { 
#line 475
using _TStorage = _Atomic_padded< _Ty> ; 
#line 476
using _Spinlock = long; 
#line 477
}; 
#line 479
template< class _Ty> 
#line 480
struct _Atomic_storage_types< _Ty &>  { 
#line 481
using _TStorage = _Ty &; 
#line 482
using _Spinlock = _Smtx_t *; 
#line 483
}; 
#line 486
template < class _Ty, size_t = sizeof ( remove_reference_t < _Ty > ) >



struct _Atomic_storage;
#line 522 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\atomic"
inline void _Atomic_lock_acquire(long &_Spinlock) noexcept { 
#line 527
int _Current_backoff = 1; 
#line 528
const int _Max_backoff = 64; 
#line 529
while (_InterlockedExchange(&_Spinlock, 1) != (0)) { 
#line 530
while (__iso_volatile_load32(&(reinterpret_cast< int &>(_Spinlock))) != 0) { 
#line 531
for (int _Count_down = _Current_backoff; _Count_down != 0; --_Count_down) { 
#line 532
_mm_pause(); 
#line 533
}  
#line 534
_Current_backoff = ((_Current_backoff < _Max_backoff) ? _Current_backoff << 1 : _Max_backoff); 
#line 535
}  
#line 536
}  
#line 546 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\atomic"
} 
#line 548
inline void _Atomic_lock_release(long &_Spinlock) noexcept { 
#line 550
_InterlockedExchange(&_Spinlock, 0); 
#line 558 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\atomic"
} 
#line 560
inline void _Atomic_lock_acquire(_Smtx_t *_Spinlock) noexcept { 
#line 561
_Smtx_lock_exclusive(_Spinlock); 
#line 562
} 
#line 564
inline void _Atomic_lock_release(_Smtx_t *_Spinlock) noexcept { 
#line 565
_Smtx_unlock_exclusive(_Spinlock); 
#line 566
} 
#line 568
template < class _Spinlock_t >
class [ [ nodiscard ] ] _Atomic_lock_guard {
public :
    explicit _Atomic_lock_guard ( _Spinlock_t & _Spinlock_ ) noexcept : _Spinlock ( _Spinlock_ ) {
        _Atomic_lock_acquire ( _Spinlock );
    }

    ~ _Atomic_lock_guard ( ) {
        _Atomic_lock_release ( _Spinlock );
    }

    _Atomic_lock_guard ( const _Atomic_lock_guard & ) = delete;
    _Atomic_lock_guard & operator = ( const _Atomic_lock_guard & ) = delete;

private :
    _Spinlock_t & _Spinlock;
};
#line 612 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\atomic"
template < class _Ty, size_t >
struct _Atomic_storage {



    using _TVal = remove_reference_t < _Ty >;
    using _Guard = _Atomic_lock_guard < typename _Atomic_storage_types < _Ty > :: _Spinlock >;

    _Atomic_storage ( ) = default;

     constexpr _Atomic_storage ( conditional_t < is_reference_v < _Ty >, _Ty, const _TVal > _Value ) noexcept
        : _Storage ( _Value ) {

    }

    void store ( const _TVal _Value, const memory_order _Order = memory_order_seq_cst ) noexcept {

        _Check_store_memory_order ( _Order );
        _Guard _Lock { _Spinlock };
        _Storage = _Value;
    }

    [ [ nodiscard ] ] _TVal load ( const memory_order _Order = memory_order_seq_cst ) const noexcept {

        _Check_load_memory_order ( _Order );
        _Guard _Lock { _Spinlock };
        _TVal _Local ( _Storage );
        return _Local;
    }

    _TVal exchange ( const _TVal _Value, const memory_order _Order = memory_order_seq_cst ) noexcept {

        _Check_memory_order ( static_cast < unsigned int > ( _Order ) );
        _Guard _Lock { _Spinlock };
        _TVal _Result ( _Storage );
        _Storage = _Value;
        return _Result;
    }

    bool compare_exchange_strong ( _TVal & _Expected, const _TVal _Desired,
        const memory_order _Order = memory_order_seq_cst ) noexcept {
        _Check_memory_order ( static_cast < unsigned int > ( _Order ) );
        const auto _Storage_ptr = :: std :: addressof ( _Storage );
        const auto _Expected_ptr = :: std :: addressof ( _Expected );
        bool _Result;



        _Guard _Lock { _Spinlock };











        _Result = :: memcmp ( _Storage_ptr, _Expected_ptr, sizeof ( _TVal ) ) == 0;

        if ( _Result ) {
            :: memcpy ( _Storage_ptr, :: std :: addressof ( _Desired ), sizeof ( _TVal ) );
        } else {
            :: memcpy ( _Expected_ptr, _Storage_ptr, sizeof ( _TVal ) );
        }

        return _Result;
    }
















































protected :
    void _Init_spinlock_for_ref ( ) noexcept {
        _Spinlock = __std_atomic_get_mutex ( :: std :: addressof ( _Storage ) );
    }

private :

    mutable typename _Atomic_storage_types < _Ty > :: _Spinlock _Spinlock { };

public :
    _Ty _Storage { };





};
#line 748 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\atomic"
template < class _Ty >
struct _Atomic_storage < _Ty, 1 > {

    using _TVal = remove_reference_t < _Ty >;

    _Atomic_storage ( ) = default;

     constexpr _Atomic_storage ( conditional_t < is_reference_v < _Ty >, _Ty, const _TVal > _Value ) noexcept
        : _Storage { _Value } {

    }

    void store ( const _TVal _Value ) noexcept {
        const auto _Mem = _Atomic_address_as < char > ( _Storage );
        const char _As_bytes = _Atomic_reinterpret_as < char > ( _Value );
        ( void ) _InterlockedExchange8 ( ( ( _Mem ) ), ( ( _As_bytes ) ) );
    }

    void store ( const _TVal _Value, const memory_order _Order ) noexcept {
        const auto _Mem = _Atomic_address_as < char > ( _Storage );
        const char _As_bytes = _Atomic_reinterpret_as < char > ( _Value );
        switch ( static_cast < unsigned int > ( _Order ) ) {
            case _Atomic_memory_order_relaxed : __iso_volatile_store8 ( ( _Mem ), ( _As_bytes ) ); return; case _Atomic_memory_order_release :                                                                                                                                      __pragma(warning(push))                                                                                                                                                              __pragma(warning(disable : 4996)) _ReadWriteBarrier ( )                                                                                                                                                                                                                    __pragma(warning(pop)); __iso_volatile_store8 ( ( _Mem ), ( _As_bytes ) ); return; default : case _Atomic_memory_order_consume : case _Atomic_memory_order_acquire : case _Atomic_memory_order_acq_rel : do { ( void ) ( ( 1 != _CrtDbgReport ( 2, "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\atomic", 770, 0, "%s", "Invalid memory order" ) ) || ( __debugbreak ( ), 0 ) ); :: _invalid_parameter ( L"\x22\x49\x6e\x76\x61\x6c\x69\x64\x20\x6d\x65\x6d\x6f\x72\x79\x20\x6f\x72\x64\x65\x72\x22", L"", L"\x45\x3a\x5c\x56\x69\x73\x75\x61\x6c\x53\x74\x75\x64\x69\x6f\x5c\x32\x30\x32\x32\x5c\x50\x72\x65\x76\x69\x65\x77\x5c\x56\x43\x5c" L"\x54\x6f\x6f\x6c\x73\x5c\x4d\x53\x56\x43\x5c\x31\x34\x2e\x33\x37\x2e\x33\x32\x37\x30\x35\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x61" L"\x74\x6f\x6d\x69\x63", 770, 0 ); } while ( false );;
        case _Atomic_memory_order_seq_cst :
            store ( _Value );
            return;
        }
    }

    [ [ nodiscard ] ] _TVal load ( ) const noexcept {
        const auto _Mem = _Atomic_address_as < char > ( _Storage );
        char _As_bytes = __iso_volatile_load8 ( _Mem );
        __pragma(warning(push))                                __pragma(warning(disable : 4996)) _ReadWriteBarrier ( )                                                                                      __pragma(warning(pop));
        return reinterpret_cast < _TVal & > ( _As_bytes );
    }

    [ [ nodiscard ] ] _TVal load ( const memory_order _Order ) const noexcept {
        const auto _Mem = _Atomic_address_as < char > ( _Storage );
        char _As_bytes;



        _As_bytes = __iso_volatile_load8 ( _Mem );
        switch ( static_cast < unsigned int > ( _Order ) ) { case _Atomic_memory_order_relaxed : break; case _Atomic_memory_order_consume : case _Atomic_memory_order_acquire : case _Atomic_memory_order_seq_cst :                                                                                                                                                                                                        __pragma(warning(push))                                                                                                                                                                                                                                __pragma(warning(disable : 4996)) _ReadWriteBarrier ( )                                                                                                                                                                                                                                                                                      __pragma(warning(pop)); break; case _Atomic_memory_order_release : case _Atomic_memory_order_acq_rel : default : do { ( void ) ( ( 1 != _CrtDbgReport ( 2, "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\atomic", 791, 0, "%s", "Invalid memory order" ) ) || ( __debugbreak ( ), 0 ) ); :: _invalid_parameter ( L"\x22\x49\x6e\x76\x61\x6c\x69\x64\x20\x6d\x65\x6d\x6f\x72\x79\x20\x6f\x72\x64\x65\x72\x22", L"", L"\x45\x3a\x5c\x56\x69\x73\x75\x61\x6c\x53\x74\x75\x64\x69\x6f\x5c\x32\x30\x32\x32\x5c\x50\x72\x65\x76\x69\x65\x77\x5c\x56\x43\x5c" L"\x54\x6f\x6f\x6c\x73\x5c\x4d\x53\x56\x43\x5c\x31\x34\x2e\x33\x37\x2e\x33\x32\x37\x30\x35\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x61" L"\x74\x6f\x6d\x69\x63", 791, 0 ); } while ( false ); break; }

        return reinterpret_cast < _TVal & > ( _As_bytes );
    }

    _TVal exchange ( const _TVal _Value, const memory_order _Order = memory_order_seq_cst ) noexcept {

        char _As_bytes;
        _Check_memory_order ( static_cast < unsigned int > ( _Order ) ); _As_bytes = _InterlockedExchange8 ( _Atomic_address_as < char > ( _Storage ), _Atomic_reinterpret_as < char > ( _Value ) );

        return reinterpret_cast < _TVal & > ( _As_bytes );
    }

    bool compare_exchange_strong ( _TVal & _Expected, const _TVal _Desired,
        const memory_order _Order = memory_order_seq_cst ) noexcept {
        char _Expected_bytes = _Atomic_reinterpret_as < char > ( _Expected );
        char _Prev_bytes;





















        _Check_memory_order ( static_cast < unsigned int > ( _Order ) ); _Prev_bytes = _InterlockedCompareExchange8 ( _Atomic_address_as < char > ( _Storage ), _Atomic_reinterpret_as < char > ( _Desired ), _Expected_bytes );

        if ( _Prev_bytes == _Expected_bytes ) {
            return true;
        }

        reinterpret_cast < char & > ( _Expected ) = _Prev_bytes;
        return false;
    }















    typename _Atomic_storage_types < _Ty > :: _TStorage _Storage;
};
#line 856 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\atomic"
template < class _Ty >
struct _Atomic_storage < _Ty, 2 > {

    using _TVal = remove_reference_t < _Ty >;

    _Atomic_storage ( ) = default;

     constexpr _Atomic_storage ( conditional_t < is_reference_v < _Ty >, _Ty, const _TVal > _Value ) noexcept
        : _Storage { _Value } {

    }

    void store ( const _TVal _Value ) noexcept {
        const auto _Mem = _Atomic_address_as < short > ( _Storage );
        const short _As_bytes = _Atomic_reinterpret_as < short > ( _Value );
        ( void ) _InterlockedExchange16 ( ( ( _Mem ) ), ( ( _As_bytes ) ) );
    }

    void store ( const _TVal _Value, const memory_order _Order ) noexcept {
        const auto _Mem = _Atomic_address_as < short > ( _Storage );
        const short _As_bytes = _Atomic_reinterpret_as < short > ( _Value );
        switch ( static_cast < unsigned int > ( _Order ) ) {
            case _Atomic_memory_order_relaxed : __iso_volatile_store16 ( ( _Mem ), ( _As_bytes ) ); return; case _Atomic_memory_order_release :                                                                                                                                       __pragma(warning(push))                                                                                                                                                               __pragma(warning(disable : 4996)) _ReadWriteBarrier ( )                                                                                                                                                                                                                     __pragma(warning(pop)); __iso_volatile_store16 ( ( _Mem ), ( _As_bytes ) ); return; default : case _Atomic_memory_order_consume : case _Atomic_memory_order_acquire : case _Atomic_memory_order_acq_rel : do { ( void ) ( ( 1 != _CrtDbgReport ( 2, "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\atomic", 878, 0, "%s", "Invalid memory order" ) ) || ( __debugbreak ( ), 0 ) ); :: _invalid_parameter ( L"\x22\x49\x6e\x76\x61\x6c\x69\x64\x20\x6d\x65\x6d\x6f\x72\x79\x20\x6f\x72\x64\x65\x72\x22", L"", L"\x45\x3a\x5c\x56\x69\x73\x75\x61\x6c\x53\x74\x75\x64\x69\x6f\x5c\x32\x30\x32\x32\x5c\x50\x72\x65\x76\x69\x65\x77\x5c\x56\x43\x5c" L"\x54\x6f\x6f\x6c\x73\x5c\x4d\x53\x56\x43\x5c\x31\x34\x2e\x33\x37\x2e\x33\x32\x37\x30\x35\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x61" L"\x74\x6f\x6d\x69\x63", 878, 0 ); } while ( false );;
        case _Atomic_memory_order_seq_cst :
            store ( _Value );
            return;
        }
    }

    [ [ nodiscard ] ] _TVal load ( ) const noexcept {
        const auto _Mem = _Atomic_address_as < short > ( _Storage );
        short _As_bytes = __iso_volatile_load16 ( _Mem );
        __pragma(warning(push))                                __pragma(warning(disable : 4996)) _ReadWriteBarrier ( )                                                                                      __pragma(warning(pop));
        return reinterpret_cast < _TVal & > ( _As_bytes );
    }

    [ [ nodiscard ] ] _TVal load ( const memory_order _Order ) const noexcept {
        const auto _Mem = _Atomic_address_as < short > ( _Storage );
        short _As_bytes;



        _As_bytes = __iso_volatile_load16 ( _Mem );
        switch ( static_cast < unsigned int > ( _Order ) ) { case _Atomic_memory_order_relaxed : break; case _Atomic_memory_order_consume : case _Atomic_memory_order_acquire : case _Atomic_memory_order_seq_cst :                                                                                                                                                                                                        __pragma(warning(push))                                                                                                                                                                                                                                __pragma(warning(disable : 4996)) _ReadWriteBarrier ( )                                                                                                                                                                                                                                                                                      __pragma(warning(pop)); break; case _Atomic_memory_order_release : case _Atomic_memory_order_acq_rel : default : do { ( void ) ( ( 1 != _CrtDbgReport ( 2, "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\atomic", 899, 0, "%s", "Invalid memory order" ) ) || ( __debugbreak ( ), 0 ) ); :: _invalid_parameter ( L"\x22\x49\x6e\x76\x61\x6c\x69\x64\x20\x6d\x65\x6d\x6f\x72\x79\x20\x6f\x72\x64\x65\x72\x22", L"", L"\x45\x3a\x5c\x56\x69\x73\x75\x61\x6c\x53\x74\x75\x64\x69\x6f\x5c\x32\x30\x32\x32\x5c\x50\x72\x65\x76\x69\x65\x77\x5c\x56\x43\x5c" L"\x54\x6f\x6f\x6c\x73\x5c\x4d\x53\x56\x43\x5c\x31\x34\x2e\x33\x37\x2e\x33\x32\x37\x30\x35\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x61" L"\x74\x6f\x6d\x69\x63", 899, 0 ); } while ( false ); break; }

        return reinterpret_cast < _TVal & > ( _As_bytes );
    }

    _TVal exchange ( const _TVal _Value, const memory_order _Order = memory_order_seq_cst ) noexcept {

        short _As_bytes;
        _Check_memory_order ( static_cast < unsigned int > ( _Order ) ); _As_bytes = _InterlockedExchange16 ( _Atomic_address_as < short > ( _Storage ), _Atomic_reinterpret_as < short > ( _Value ) );

        return reinterpret_cast < _TVal & > ( _As_bytes );
    }

    bool compare_exchange_strong ( _TVal & _Expected, const _TVal _Desired,
        const memory_order _Order = memory_order_seq_cst ) noexcept {
        short _Expected_bytes = _Atomic_reinterpret_as < short > ( _Expected );
        short _Prev_bytes;




















        _Check_memory_order ( static_cast < unsigned int > ( _Order ) ); _Prev_bytes = _InterlockedCompareExchange16 ( _Atomic_address_as < short > ( _Storage ), _Atomic_reinterpret_as < short > ( _Desired ), _Expected_bytes );

        if ( _Prev_bytes == _Expected_bytes ) {
            return true;
        }

        :: memcpy ( :: std :: addressof ( _Expected ), & _Prev_bytes, sizeof ( _Ty ) );
        return false;
    }















    typename _Atomic_storage_types < _Ty > :: _TStorage _Storage;
};
#line 963 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\atomic"
template < class _Ty >
struct _Atomic_storage < _Ty, 4 > {

    using _TVal = remove_reference_t < _Ty >;

    _Atomic_storage ( ) = default;

     constexpr _Atomic_storage ( conditional_t < is_reference_v < _Ty >, _Ty, const _TVal > _Value ) noexcept
        : _Storage { _Value } {

    }

    void store ( const _TVal _Value ) noexcept {
        const auto _Mem = _Atomic_address_as < int > ( _Storage );
        const int _As_bytes = _Atomic_reinterpret_as < int > ( _Value );
        ( void ) _InterlockedExchange ( reinterpret_cast < volatile long * > ( ( _Mem ) ), static_cast < long > ( ( _As_bytes ) ) );
    }

    void store ( const _TVal _Value, const memory_order _Order ) noexcept {
        const auto _Mem = _Atomic_address_as < int > ( _Storage );
        const int _As_bytes = _Atomic_reinterpret_as < int > ( _Value );
        switch ( static_cast < unsigned int > ( _Order ) ) {
            case _Atomic_memory_order_relaxed : __iso_volatile_store32 ( ( _Mem ), ( _As_bytes ) ); return; case _Atomic_memory_order_release :                                                                                                                                       __pragma(warning(push))                                                                                                                                                               __pragma(warning(disable : 4996)) _ReadWriteBarrier ( )                                                                                                                                                                                                                     __pragma(warning(pop)); __iso_volatile_store32 ( ( _Mem ), ( _As_bytes ) ); return; default : case _Atomic_memory_order_consume : case _Atomic_memory_order_acquire : case _Atomic_memory_order_acq_rel : do { ( void ) ( ( 1 != _CrtDbgReport ( 2, "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\atomic", 985, 0, "%s", "Invalid memory order" ) ) || ( __debugbreak ( ), 0 ) ); :: _invalid_parameter ( L"\x22\x49\x6e\x76\x61\x6c\x69\x64\x20\x6d\x65\x6d\x6f\x72\x79\x20\x6f\x72\x64\x65\x72\x22", L"", L"\x45\x3a\x5c\x56\x69\x73\x75\x61\x6c\x53\x74\x75\x64\x69\x6f\x5c\x32\x30\x32\x32\x5c\x50\x72\x65\x76\x69\x65\x77\x5c\x56\x43\x5c" L"\x54\x6f\x6f\x6c\x73\x5c\x4d\x53\x56\x43\x5c\x31\x34\x2e\x33\x37\x2e\x33\x32\x37\x30\x35\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x61" L"\x74\x6f\x6d\x69\x63", 985, 0 ); } while ( false );;
        case _Atomic_memory_order_seq_cst :
            store ( _Value );
            return;
        }
    }

    [ [ nodiscard ] ] _TVal load ( ) const noexcept {
        const auto _Mem = _Atomic_address_as < int > ( _Storage );
        int _As_bytes = __iso_volatile_load32 ( _Mem );
        __pragma(warning(push))                                __pragma(warning(disable : 4996)) _ReadWriteBarrier ( )                                                                                      __pragma(warning(pop));
        return reinterpret_cast < _TVal & > ( _As_bytes );
    }

    [ [ nodiscard ] ] _TVal load ( const memory_order _Order ) const noexcept {
        const auto _Mem = _Atomic_address_as < int > ( _Storage );
        int _As_bytes;



        _As_bytes = __iso_volatile_load32 ( _Mem );
        switch ( static_cast < unsigned int > ( _Order ) ) { case _Atomic_memory_order_relaxed : break; case _Atomic_memory_order_consume : case _Atomic_memory_order_acquire : case _Atomic_memory_order_seq_cst :                                                                                                                                                                                                        __pragma(warning(push))                                                                                                                                                                                                                                __pragma(warning(disable : 4996)) _ReadWriteBarrier ( )                                                                                                                                                                                                                                                                                      __pragma(warning(pop)); break; case _Atomic_memory_order_release : case _Atomic_memory_order_acq_rel : default : do { ( void ) ( ( 1 != _CrtDbgReport ( 2, "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\atomic", 1006, 0, "%s", "Invalid memory order" ) ) || ( __debugbreak ( ), 0 ) ); :: _invalid_parameter ( L"\x22\x49\x6e\x76\x61\x6c\x69\x64\x20\x6d\x65\x6d\x6f\x72\x79\x20\x6f\x72\x64\x65\x72\x22", L"", L"\x45\x3a\x5c\x56\x69\x73\x75\x61\x6c\x53\x74\x75\x64\x69\x6f\x5c\x32\x30\x32\x32\x5c\x50\x72\x65\x76\x69\x65\x77\x5c\x56\x43\x5c" L"\x54\x6f\x6f\x6c\x73\x5c\x4d\x53\x56\x43\x5c\x31\x34\x2e\x33\x37\x2e\x33\x32\x37\x30\x35\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x61" L"\x74\x6f\x6d\x69\x63", 1006, 0 ); } while ( false ); break; }

        return reinterpret_cast < _TVal & > ( _As_bytes );
    }

    _TVal exchange ( const _TVal _Value, const memory_order _Order = memory_order_seq_cst ) noexcept {

        long _As_bytes;
        _Check_memory_order ( static_cast < unsigned int > ( _Order ) ); _As_bytes = _InterlockedExchange ( _Atomic_address_as < long > ( _Storage ), _Atomic_reinterpret_as < long > ( _Value ) );

        return reinterpret_cast < _TVal & > ( _As_bytes );
    }

    bool compare_exchange_strong ( _TVal & _Expected, const _TVal _Desired,
        const memory_order _Order = memory_order_seq_cst ) noexcept {
        long _Expected_bytes = _Atomic_reinterpret_as < long > ( _Expected );
        long _Prev_bytes;




















        _Check_memory_order ( static_cast < unsigned int > ( _Order ) ); _Prev_bytes = _InterlockedCompareExchange ( _Atomic_address_as < long > ( _Storage ), _Atomic_reinterpret_as < long > ( _Desired ), _Expected_bytes );

        if ( _Prev_bytes == _Expected_bytes ) {
            return true;
        }

        :: memcpy ( :: std :: addressof ( _Expected ), & _Prev_bytes, sizeof ( _TVal ) );
        return false;
    }















    typename _Atomic_storage_types < _Ty > :: _TStorage _Storage;
};
#line 1070 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\atomic"
template < class _Ty >
struct _Atomic_storage < _Ty, 8 > {

    using _TVal = remove_reference_t < _Ty >;

    _Atomic_storage ( ) = default;

     constexpr _Atomic_storage ( conditional_t < is_reference_v < _Ty >, _Ty, const _TVal > _Value ) noexcept
        : _Storage { _Value } {

    }

    void store ( const _TVal _Value ) noexcept {
        const auto _Mem = _Atomic_address_as < long long > ( _Storage );
        const long long _As_bytes = _Atomic_reinterpret_as < long long > ( _Value );
        ( void ) _InterlockedExchange64 ( ( ( _Mem ) ), ( ( _As_bytes ) ) );;
    }

    void store ( const _TVal _Value, const memory_order _Order ) noexcept {
        const auto _Mem = _Atomic_address_as < long long > ( _Storage );
        const long long _As_bytes = _Atomic_reinterpret_as < long long > ( _Value );
        switch ( static_cast < unsigned int > ( _Order ) ) {
            case _Atomic_memory_order_relaxed : __iso_volatile_store64 ( ( _Mem ), ( _As_bytes ) ); return; case _Atomic_memory_order_release :                                                                                                                                       __pragma(warning(push))                                                                                                                                                               __pragma(warning(disable : 4996)) _ReadWriteBarrier ( )                                                                                                                                                                                                                     __pragma(warning(pop)); __iso_volatile_store64 ( ( _Mem ), ( _As_bytes ) ); return; default : case _Atomic_memory_order_consume : case _Atomic_memory_order_acquire : case _Atomic_memory_order_acq_rel : do { ( void ) ( ( 1 != _CrtDbgReport ( 2, "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\atomic", 1092, 0, "%s", "Invalid memory order" ) ) || ( __debugbreak ( ), 0 ) ); :: _invalid_parameter ( L"\x22\x49\x6e\x76\x61\x6c\x69\x64\x20\x6d\x65\x6d\x6f\x72\x79\x20\x6f\x72\x64\x65\x72\x22", L"", L"\x45\x3a\x5c\x56\x69\x73\x75\x61\x6c\x53\x74\x75\x64\x69\x6f\x5c\x32\x30\x32\x32\x5c\x50\x72\x65\x76\x69\x65\x77\x5c\x56\x43\x5c" L"\x54\x6f\x6f\x6c\x73\x5c\x4d\x53\x56\x43\x5c\x31\x34\x2e\x33\x37\x2e\x33\x32\x37\x30\x35\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x61" L"\x74\x6f\x6d\x69\x63", 1092, 0 ); } while ( false );;
        case _Atomic_memory_order_seq_cst :
            store ( _Value );
            return;
        }
    }

    [ [ nodiscard ] ] _TVal load ( ) const noexcept {
        const auto _Mem = _Atomic_address_as < long long > ( _Storage );



        long long _As_bytes = __iso_volatile_load64 ( _Mem );

        __pragma(warning(push))                                __pragma(warning(disable : 4996)) _ReadWriteBarrier ( )                                                                                      __pragma(warning(pop));
        return reinterpret_cast < _TVal & > ( _As_bytes );
    }

    [ [ nodiscard ] ] _TVal load ( const memory_order _Order ) const noexcept {
        const auto _Mem = _Atomic_address_as < long long > ( _Storage );
        long long _As_bytes;







        _As_bytes = __iso_volatile_load64 ( _Mem );


        switch ( static_cast < unsigned int > ( _Order ) ) { case _Atomic_memory_order_relaxed : break; case _Atomic_memory_order_consume : case _Atomic_memory_order_acquire : case _Atomic_memory_order_seq_cst :                                                                                                                                                                                                        __pragma(warning(push))                                                                                                                                                                                                                                __pragma(warning(disable : 4996)) _ReadWriteBarrier ( )                                                                                                                                                                                                                                                                                      __pragma(warning(pop)); break; case _Atomic_memory_order_release : case _Atomic_memory_order_acq_rel : default : do { ( void ) ( ( 1 != _CrtDbgReport ( 2, "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\atomic", 1123, 0, "%s", "Invalid memory order" ) ) || ( __debugbreak ( ), 0 ) ); :: _invalid_parameter ( L"\x22\x49\x6e\x76\x61\x6c\x69\x64\x20\x6d\x65\x6d\x6f\x72\x79\x20\x6f\x72\x64\x65\x72\x22", L"", L"\x45\x3a\x5c\x56\x69\x73\x75\x61\x6c\x53\x74\x75\x64\x69\x6f\x5c\x32\x30\x32\x32\x5c\x50\x72\x65\x76\x69\x65\x77\x5c\x56\x43\x5c" L"\x54\x6f\x6f\x6c\x73\x5c\x4d\x53\x56\x43\x5c\x31\x34\x2e\x33\x37\x2e\x33\x32\x37\x30\x35\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x61" L"\x74\x6f\x6d\x69\x63", 1123, 0 ); } while ( false ); break; }

        return reinterpret_cast < _TVal & > ( _As_bytes );
    }











    _TVal exchange ( const _TVal _Value, const memory_order _Order = memory_order_seq_cst ) noexcept {

        long long _As_bytes;
        _Check_memory_order ( static_cast < unsigned int > ( _Order ) ); _As_bytes = _InterlockedExchange64 ( _Atomic_address_as < long long > ( _Storage ), _Atomic_reinterpret_as < long long > ( _Value ) );

        return reinterpret_cast < _TVal & > ( _As_bytes );
    }


    bool compare_exchange_strong ( _TVal & _Expected, const _TVal _Desired,
        const memory_order _Order = memory_order_seq_cst ) noexcept {
        long long _Expected_bytes = _Atomic_reinterpret_as < long long > ( _Expected );
        long long _Prev_bytes;






















        _Check_memory_order ( static_cast < unsigned int > ( _Order ) ); _Prev_bytes = _InterlockedCompareExchange64 ( _Atomic_address_as < long long > ( _Storage ), _Atomic_reinterpret_as < long long > ( _Desired ), _Expected_bytes );

        if ( _Prev_bytes == _Expected_bytes ) {
            return true;
        }

        :: memcpy ( :: std :: addressof ( _Expected ), & _Prev_bytes, sizeof ( _TVal ) );
        return false;
    }















    typename _Atomic_storage_types < _Ty > :: _TStorage _Storage;
};
#line 1201 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\atomic"
template < class _Ty >
struct _Atomic_storage < _Ty &, 16 > {

    using _TVal = remove_reference_t < _Ty & >;

    _Atomic_storage ( ) = default;

     constexpr _Atomic_storage ( conditional_t < is_reference_v < _Ty & >, _Ty &, const _TVal > _Value ) noexcept
        : _Storage { _Value } { }

    void store ( const _TVal _Value ) noexcept {
        ( void ) exchange ( _Value );
    }

    void store ( const _TVal _Value, const memory_order _Order ) noexcept {
        _Check_store_memory_order ( _Order );
        ( void ) exchange ( _Value, _Order );
    }

    [ [ nodiscard ] ] _TVal load ( ) const noexcept {
        long long * const _Storage_ptr = const_cast < long long * > ( _Atomic_address_as < const long long > ( _Storage ) );
        _Int128 _Result { };
        ( void ) __std_atomic_compare_exchange_128 ( _Storage_ptr, 0, 0, & _Result . _Low );
        return reinterpret_cast < _TVal & > ( _Result );
    }

    [ [ nodiscard ] ] _TVal load ( const memory_order _Order ) const noexcept {























        _Check_load_memory_order ( _Order );
        return load ( );

    }

    _TVal exchange ( const _TVal _Value ) noexcept {
        _TVal _Result { _Value };
        while ( ! compare_exchange_strong ( _Result, _Value ) ) {
        }

        return _Result;
    }

    _TVal exchange ( const _TVal _Value, const memory_order _Order ) noexcept {
        _TVal _Result { _Value };
        while ( ! compare_exchange_strong ( _Result, _Value, _Order ) ) {
        }

        return _Result;
    }

    bool compare_exchange_strong ( _TVal & _Expected, const _TVal _Desired,
        const memory_order _Order = memory_order_seq_cst ) noexcept {
        _Int128 _Desired_bytes { };
        :: memcpy ( & _Desired_bytes, :: std :: addressof ( _Desired ), sizeof ( _TVal ) );
        _Int128 _Expected_temp { };
        :: memcpy ( & _Expected_temp, :: std :: addressof ( _Expected ), sizeof ( _TVal ) );
        unsigned char _Result;







































        ( void ) _Order;
        _Result = __std_atomic_compare_exchange_128 (
            & reinterpret_cast < long long & > ( _Storage ), _Desired_bytes . _High, _Desired_bytes . _Low, & _Expected_temp . _Low );

        if ( _Result == 0 ) {
            :: memcpy ( :: std :: addressof ( _Expected ), & _Expected_temp, sizeof ( _TVal ) );
        }

        return _Result != 0;
    }









































    struct _Int128 {
        alignas ( 16 ) long long _Low;
        long long _High;
    };

    typename _Atomic_storage_types < _Ty & > :: _TStorage _Storage;
};
#line 1378 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\atomic"
template< class _Ty, size_t  = sizeof(_Ty)> struct _Atomic_integral; 
#line 1381
template < class _Ty >
struct _Atomic_integral < _Ty, 1 > : _Atomic_storage < _Ty > {
    using _Base = _Atomic_storage < _Ty >;
    using typename _Base :: _TVal;

    using _Base :: _Base;

    _TVal fetch_add ( const _TVal _Operand, const memory_order _Order = memory_order_seq_cst ) noexcept {
        char _Result;
        _Check_memory_order ( static_cast < unsigned int > ( _Order ) ); _Result = _InterlockedExchangeAdd8 ( _Atomic_address_as < char > ( this -> _Storage ), static_cast < char > ( _Operand ) );

        return static_cast < _TVal > ( _Result );
    }

    _TVal fetch_and ( const _TVal _Operand, const memory_order _Order = memory_order_seq_cst ) noexcept {
        char _Result;
        _Check_memory_order ( static_cast < unsigned int > ( _Order ) ); _Result = _InterlockedAnd8 ( _Atomic_address_as < char > ( this -> _Storage ), static_cast < char > ( _Operand ) );

        return static_cast < _TVal > ( _Result );
    }

    _TVal fetch_or ( const _TVal _Operand, const memory_order _Order = memory_order_seq_cst ) noexcept {
        char _Result;
        _Check_memory_order ( static_cast < unsigned int > ( _Order ) ); _Result = _InterlockedOr8 ( _Atomic_address_as < char > ( this -> _Storage ), static_cast < char > ( _Operand ) );

        return static_cast < _TVal > ( _Result );
    }

    _TVal fetch_xor ( const _TVal _Operand, const memory_order _Order = memory_order_seq_cst ) noexcept {
        char _Result;
        _Check_memory_order ( static_cast < unsigned int > ( _Order ) ); _Result = _InterlockedXor8 ( _Atomic_address_as < char > ( this -> _Storage ), static_cast < char > ( _Operand ) );

        return static_cast < _TVal > ( _Result );
    }

    _TVal operator ++ ( int ) noexcept {
        return static_cast < _TVal > ( _InterlockedExchangeAdd8 ( _Atomic_address_as < char > ( this -> _Storage ), 1 ) );
    }

    _TVal operator ++ ( ) noexcept {
        unsigned char _Before =
            static_cast < unsigned char > ( _InterlockedExchangeAdd8 ( _Atomic_address_as < char > ( this -> _Storage ), 1 ) );
        ++ _Before;
        return static_cast < _TVal > ( _Before );
    }

    _TVal operator -- ( int ) noexcept {
        return static_cast < _TVal > ( _InterlockedExchangeAdd8 ( _Atomic_address_as < char > ( this -> _Storage ), - 1 ) );
    }

    _TVal operator -- ( ) noexcept {
        unsigned char _Before =
            static_cast < unsigned char > ( _InterlockedExchangeAdd8 ( _Atomic_address_as < char > ( this -> _Storage ), - 1 ) );
        -- _Before;
        return static_cast < _TVal > ( _Before );
    }
};
#line 1439 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\atomic"
template < class _Ty >
struct _Atomic_integral < _Ty, 2 > : _Atomic_storage < _Ty > {
    using _Base = _Atomic_storage < _Ty >;
    using typename _Base :: _TVal;

    using _Base :: _Base;

    _TVal fetch_add ( const _TVal _Operand, const memory_order _Order = memory_order_seq_cst ) noexcept {
        short _Result;
        _Check_memory_order ( static_cast < unsigned int > ( _Order ) ); _Result = _InterlockedExchangeAdd16 ( _Atomic_address_as < short > ( this -> _Storage ), static_cast < short > ( _Operand ) );

        return static_cast < _TVal > ( _Result );
    }

    _TVal fetch_and ( const _TVal _Operand, const memory_order _Order = memory_order_seq_cst ) noexcept {
        short _Result;
        _Check_memory_order ( static_cast < unsigned int > ( _Order ) ); _Result = _InterlockedAnd16 ( _Atomic_address_as < short > ( this -> _Storage ), static_cast < short > ( _Operand ) );

        return static_cast < _TVal > ( _Result );
    }

    _TVal fetch_or ( const _TVal _Operand, const memory_order _Order = memory_order_seq_cst ) noexcept {
        short _Result;
        _Check_memory_order ( static_cast < unsigned int > ( _Order ) ); _Result = _InterlockedOr16 ( _Atomic_address_as < short > ( this -> _Storage ), static_cast < short > ( _Operand ) );

        return static_cast < _TVal > ( _Result );
    }

    _TVal fetch_xor ( const _TVal _Operand, const memory_order _Order = memory_order_seq_cst ) noexcept {
        short _Result;
        _Check_memory_order ( static_cast < unsigned int > ( _Order ) ); _Result = _InterlockedXor16 ( _Atomic_address_as < short > ( this -> _Storage ), static_cast < short > ( _Operand ) );

        return static_cast < _TVal > ( _Result );
    }

    _TVal operator ++ ( int ) noexcept {
        unsigned short _After =
            static_cast < unsigned short > ( _InterlockedIncrement16 ( _Atomic_address_as < short > ( this -> _Storage ) ) );
        -- _After;
        return static_cast < _TVal > ( _After );
    }

    _TVal operator ++ ( ) noexcept {
        return static_cast < _TVal > ( _InterlockedIncrement16 ( _Atomic_address_as < short > ( this -> _Storage ) ) );
    }

    _TVal operator -- ( int ) noexcept {
        unsigned short _After =
            static_cast < unsigned short > ( _InterlockedDecrement16 ( _Atomic_address_as < short > ( this -> _Storage ) ) );
        ++ _After;
        return static_cast < _TVal > ( _After );
    }

    _TVal operator -- ( ) noexcept {
        return static_cast < _TVal > ( _InterlockedDecrement16 ( _Atomic_address_as < short > ( this -> _Storage ) ) );
    }
};
#line 1497 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\atomic"
template < class _Ty >
struct _Atomic_integral < _Ty, 4 > : _Atomic_storage < _Ty > {
    using _Base = _Atomic_storage < _Ty >;
    using typename _Base :: _TVal;

    using _Base :: _Base;

    _TVal fetch_add ( const _TVal _Operand, const memory_order _Order = memory_order_seq_cst ) noexcept {
        long _Result;
        _Check_memory_order ( static_cast < unsigned int > ( _Order ) ); _Result = _InterlockedExchangeAdd ( _Atomic_address_as < long > ( this -> _Storage ), static_cast < long > ( _Operand ) );

        return static_cast < _TVal > ( _Result );
    }

    _TVal fetch_and ( const _TVal _Operand, const memory_order _Order = memory_order_seq_cst ) noexcept {
        long _Result;
        _Check_memory_order ( static_cast < unsigned int > ( _Order ) ); _Result = _InterlockedAnd ( _Atomic_address_as < long > ( this -> _Storage ), static_cast < long > ( _Operand ) );

        return static_cast < _TVal > ( _Result );
    }

    _TVal fetch_or ( const _TVal _Operand, const memory_order _Order = memory_order_seq_cst ) noexcept {
        long _Result;
        _Check_memory_order ( static_cast < unsigned int > ( _Order ) ); _Result = _InterlockedOr ( _Atomic_address_as < long > ( this -> _Storage ), static_cast < long > ( _Operand ) );

        return static_cast < _TVal > ( _Result );
    }

    _TVal fetch_xor ( const _TVal _Operand, const memory_order _Order = memory_order_seq_cst ) noexcept {
        long _Result;
        _Check_memory_order ( static_cast < unsigned int > ( _Order ) ); _Result = _InterlockedXor ( _Atomic_address_as < long > ( this -> _Storage ), static_cast < long > ( _Operand ) );

        return static_cast < _TVal > ( _Result );
    }

    _TVal operator ++ ( int ) noexcept {
        unsigned long _After =
            static_cast < unsigned long > ( _InterlockedIncrement ( _Atomic_address_as < long > ( this -> _Storage ) ) );
        -- _After;
        return static_cast < _TVal > ( _After );
    }

    _TVal operator ++ ( ) noexcept {
        return static_cast < _TVal > ( _InterlockedIncrement ( _Atomic_address_as < long > ( this -> _Storage ) ) );
    }

    _TVal operator -- ( int ) noexcept {
        unsigned long _After =
            static_cast < unsigned long > ( _InterlockedDecrement ( _Atomic_address_as < long > ( this -> _Storage ) ) );
        ++ _After;
        return static_cast < _TVal > ( _After );
    }

    _TVal operator -- ( ) noexcept {
        return static_cast < _TVal > ( _InterlockedDecrement ( _Atomic_address_as < long > ( this -> _Storage ) ) );
    }
};
#line 1555 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\atomic"
template < class _Ty >
struct _Atomic_integral < _Ty, 8 > : _Atomic_storage < _Ty > {
    using _Base = _Atomic_storage < _Ty >;
    using typename _Base :: _TVal;

    using _Base :: _Base;























































    _TVal fetch_add ( const _TVal _Operand, const memory_order _Order = memory_order_seq_cst ) noexcept {
        long long _Result;
        _Check_memory_order ( static_cast < unsigned int > ( _Order ) ); _Result = _InterlockedExchangeAdd64 ( _Atomic_address_as < long long > ( this -> _Storage ), static_cast < long long > ( _Operand ) );

        return static_cast < _TVal > ( _Result );
    }

    _TVal fetch_and ( const _TVal _Operand, const memory_order _Order = memory_order_seq_cst ) noexcept {
        long long _Result;
        _Check_memory_order ( static_cast < unsigned int > ( _Order ) ); _Result = _InterlockedAnd64 ( _Atomic_address_as < long long > ( this -> _Storage ), static_cast < long long > ( _Operand ) );

        return static_cast < _TVal > ( _Result );
    }

    _TVal fetch_or ( const _TVal _Operand, const memory_order _Order = memory_order_seq_cst ) noexcept {
        long long _Result;
        _Check_memory_order ( static_cast < unsigned int > ( _Order ) ); _Result = _InterlockedOr64 ( _Atomic_address_as < long long > ( this -> _Storage ), static_cast < long long > ( _Operand ) );

        return static_cast < _TVal > ( _Result );
    }

    _TVal fetch_xor ( const _TVal _Operand, const memory_order _Order = memory_order_seq_cst ) noexcept {
        long long _Result;
        _Check_memory_order ( static_cast < unsigned int > ( _Order ) ); _Result = _InterlockedXor64 ( _Atomic_address_as < long long > ( this -> _Storage ), static_cast < long long > ( _Operand ) );

        return static_cast < _TVal > ( _Result );
    }

    _TVal operator ++ ( int ) noexcept {
        unsigned long long _After =
            static_cast < unsigned long long > ( _InterlockedIncrement64 ( _Atomic_address_as < long long > ( this -> _Storage ) ) );
        -- _After;
        return static_cast < _TVal > ( _After );
    }

    _TVal operator ++ ( ) noexcept {
        return static_cast < _TVal > ( _InterlockedIncrement64 ( _Atomic_address_as < long long > ( this -> _Storage ) ) );
    }

    _TVal operator -- ( int ) noexcept {
        unsigned long long _After =
            static_cast < unsigned long long > ( _InterlockedDecrement64 ( _Atomic_address_as < long long > ( this -> _Storage ) ) );
        ++ _After;
        return static_cast < _TVal > ( _After );
    }

    _TVal operator -- ( ) noexcept {
        return static_cast < _TVal > ( _InterlockedDecrement64 ( _Atomic_address_as < long long > ( this -> _Storage ) ) );
    }

};
#line 1669 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\atomic"
template< size_t _TypeSize> constexpr bool 
#line 1670
_Is_always_lock_free = ((_TypeSize <= (8)) && ((_TypeSize & (_TypeSize - (1))) == (0))); 
#line 1681 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\atomic"
template< class _Ty, bool _Is_lock_free = _Is_always_lock_free< sizeof(_Ty)> > constexpr bool 
#line 1682
_Deprecate_non_lock_free_volatile = true; 
#line 1684
template< class _Ty> constexpr bool 
#line 1685
_Deprecate_non_lock_free_volatile< _Ty, false>  = true; 
#line 1687
template < class _Ty >
struct _Atomic_integral_facade : _Atomic_integral < _Ty > {

    using _Base = _Atomic_integral < _Ty >;
    using difference_type = _Ty;

    using _Base :: _Base;






    using _Base :: fetch_add;
    _Ty fetch_add ( const _Ty _Operand ) volatile noexcept {
        return const_cast < _Atomic_integral_facade * > ( this ) -> _Base :: fetch_add ( _Operand );
    }

    _Ty fetch_add ( const _Ty _Operand, const memory_order _Order ) volatile noexcept {
        return const_cast < _Atomic_integral_facade * > ( this ) -> _Base :: fetch_add ( _Operand, _Order );
    }

    [ [ nodiscard ] ] static _Ty _Negate ( const _Ty _Value ) noexcept {
        return static_cast < _Ty > ( 0U - static_cast < make_unsigned_t < _Ty >> ( _Value ) );
    }

    _Ty fetch_sub ( const _Ty _Operand ) noexcept {
        return fetch_add ( _Negate ( _Operand ) );
    }

    _Ty fetch_sub ( const _Ty _Operand ) volatile noexcept {
        return fetch_add ( _Negate ( _Operand ) );
    }

    _Ty fetch_sub ( const _Ty _Operand, const memory_order _Order ) noexcept {
        return fetch_add ( _Negate ( _Operand ), _Order );
    }

    _Ty fetch_sub ( const _Ty _Operand, const memory_order _Order ) volatile noexcept {
        return fetch_add ( _Negate ( _Operand ), _Order );
    }

    using _Base :: fetch_and;
    _Ty fetch_and ( const _Ty _Operand ) volatile noexcept {
        return const_cast < _Atomic_integral_facade * > ( this ) -> _Base :: fetch_and ( _Operand );
    }

    _Ty fetch_and ( const _Ty _Operand, const memory_order _Order ) volatile noexcept {
        return const_cast < _Atomic_integral_facade * > ( this ) -> _Base :: fetch_and ( _Operand, _Order );
    }

    using _Base :: fetch_or;
    _Ty fetch_or ( const _Ty _Operand ) volatile noexcept {
        return const_cast < _Atomic_integral_facade * > ( this ) -> _Base :: fetch_or ( _Operand );
    }

    _Ty fetch_or ( const _Ty _Operand, const memory_order _Order ) volatile noexcept {
        return const_cast < _Atomic_integral_facade * > ( this ) -> _Base :: fetch_or ( _Operand, _Order );
    }

    using _Base :: fetch_xor;
    _Ty fetch_xor ( const _Ty _Operand ) volatile noexcept {
        return const_cast < _Atomic_integral_facade * > ( this ) -> _Base :: fetch_xor ( _Operand );
    }

    _Ty fetch_xor ( const _Ty _Operand, const memory_order _Order ) volatile noexcept {
        return const_cast < _Atomic_integral_facade * > ( this ) -> _Base :: fetch_xor ( _Operand, _Order );
    }

    using _Base :: operator ++;
    _Ty operator ++ ( int ) volatile noexcept {
        return const_cast < _Atomic_integral_facade * > ( this ) -> _Base :: operator ++ ( 0 );
    }

    _Ty operator ++ ( ) volatile noexcept {
        return const_cast < _Atomic_integral_facade * > ( this ) -> _Base :: operator ++ ( );
    }

    using _Base :: operator --;
    _Ty operator -- ( int ) volatile noexcept {
        return const_cast < _Atomic_integral_facade * > ( this ) -> _Base :: operator -- ( 0 );
    }

    _Ty operator -- ( ) volatile noexcept {
        return const_cast < _Atomic_integral_facade * > ( this ) -> _Base :: operator -- ( );
    }

    _Ty operator += ( const _Ty _Operand ) noexcept {
        return static_cast < _Ty > ( this -> _Base :: fetch_add ( _Operand ) + _Operand );
    }

    _Ty operator += ( const _Ty _Operand ) volatile noexcept {
        return static_cast < _Ty > ( const_cast < _Atomic_integral_facade * > ( this ) -> _Base :: fetch_add ( _Operand ) + _Operand );
    }

    _Ty operator -= ( const _Ty _Operand ) noexcept {
        return static_cast < _Ty > ( fetch_sub ( _Operand ) - _Operand );
    }

    _Ty operator -= ( const _Ty _Operand ) volatile noexcept {
        return static_cast < _Ty > ( const_cast < _Atomic_integral_facade * > ( this ) -> fetch_sub ( _Operand ) - _Operand );
    }

    _Ty operator &= ( const _Ty _Operand ) noexcept {
        return static_cast < _Ty > ( this -> _Base :: fetch_and ( _Operand ) & _Operand );
    }

    _Ty operator &= ( const _Ty _Operand ) volatile noexcept {
        return static_cast < _Ty > ( const_cast < _Atomic_integral_facade * > ( this ) -> _Base :: fetch_and ( _Operand ) & _Operand );
    }

    _Ty operator |= ( const _Ty _Operand ) noexcept {
        return static_cast < _Ty > ( this -> _Base :: fetch_or ( _Operand ) | _Operand );
    }

    _Ty operator |= ( const _Ty _Operand ) volatile noexcept {
        return static_cast < _Ty > ( const_cast < _Atomic_integral_facade * > ( this ) -> _Base :: fetch_or ( _Operand ) | _Operand );
    }

    _Ty operator ^= ( const _Ty _Operand ) noexcept {
        return static_cast < _Ty > ( this -> _Base :: fetch_xor ( _Operand ) ^ _Operand );
    }

    _Ty operator ^= ( const _Ty _Operand ) volatile noexcept {
        return static_cast < _Ty > ( const_cast < _Atomic_integral_facade * > ( this ) -> _Base :: fetch_xor ( _Operand ) ^ _Operand );
    }
};
#line 1815
template < class _Ty >
struct _Atomic_integral_facade < _Ty & > : _Atomic_integral < _Ty & > {

    using _Base = _Atomic_integral < _Ty & >;
    using difference_type = _Ty;

    using _Base :: _Base;

    [ [ nodiscard ] ] static _Ty _Negate ( const _Ty _Value ) noexcept {
        return static_cast < _Ty > ( 0U - static_cast < make_unsigned_t < _Ty >> ( _Value ) );
    }

    _Ty fetch_add ( const _Ty _Operand ) const noexcept {
        return const_cast < _Atomic_integral_facade * > ( this ) -> _Base :: fetch_add ( _Operand );
    }

    _Ty fetch_add ( const _Ty _Operand, const memory_order _Order ) const noexcept {
        return const_cast < _Atomic_integral_facade * > ( this ) -> _Base :: fetch_add ( _Operand, _Order );
    }

    _Ty fetch_sub ( const _Ty _Operand ) const noexcept {
        return fetch_add ( _Negate ( _Operand ) );
    }

    _Ty fetch_sub ( const _Ty _Operand, const memory_order _Order ) const noexcept {
        return fetch_add ( _Negate ( _Operand ), _Order );
    }

    _Ty operator ++ ( int ) const noexcept {
        return const_cast < _Atomic_integral_facade * > ( this ) -> _Base :: operator ++ ( 0 );
    }

    _Ty operator ++ ( ) const noexcept {
        return const_cast < _Atomic_integral_facade * > ( this ) -> _Base :: operator ++ ( );
    }

    _Ty operator -- ( int ) const noexcept {
        return const_cast < _Atomic_integral_facade * > ( this ) -> _Base :: operator -- ( 0 );
    }

    _Ty operator -- ( ) const noexcept {
        return const_cast < _Atomic_integral_facade * > ( this ) -> _Base :: operator -- ( );
    }

    _Ty operator += ( const _Ty _Operand ) const noexcept {
        return static_cast < _Ty > ( fetch_add ( _Operand ) + _Operand );
    }

    _Ty operator -= ( const _Ty _Operand ) const noexcept {
        return static_cast < _Ty > ( fetch_sub ( _Operand ) - _Operand );
    }

    _Ty fetch_and ( const _Ty _Operand ) const noexcept {
        return const_cast < _Atomic_integral_facade * > ( this ) -> _Base :: fetch_and ( _Operand );
    }

    _Ty fetch_and ( const _Ty _Operand, const memory_order _Order ) const noexcept {
        return const_cast < _Atomic_integral_facade * > ( this ) -> _Base :: fetch_and ( _Operand, _Order );
    }

    _Ty fetch_or ( const _Ty _Operand ) const noexcept {
        return const_cast < _Atomic_integral_facade * > ( this ) -> _Base :: fetch_or ( _Operand );
    }

    _Ty fetch_or ( const _Ty _Operand, const memory_order _Order ) const noexcept {
        return const_cast < _Atomic_integral_facade * > ( this ) -> _Base :: fetch_or ( _Operand, _Order );
    }

    _Ty fetch_xor ( const _Ty _Operand ) const noexcept {
        return const_cast < _Atomic_integral_facade * > ( this ) -> _Base :: fetch_xor ( _Operand );
    }

    _Ty fetch_xor ( const _Ty _Operand, const memory_order _Order ) const noexcept {
        return const_cast < _Atomic_integral_facade * > ( this ) -> _Base :: fetch_xor ( _Operand, _Order );
    }

    _Ty operator &= ( const _Ty _Operand ) const noexcept {
        return static_cast < _Ty > ( fetch_and ( _Operand ) & _Operand );
    }

    _Ty operator |= ( const _Ty _Operand ) const noexcept {
        return static_cast < _Ty > ( fetch_or ( _Operand ) | _Operand );
    }

    _Ty operator ^= ( const _Ty _Operand ) const noexcept {
        return static_cast < _Ty > ( fetch_xor ( _Operand ) ^ _Operand );
    }
};
#line 1995 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\atomic"
template < class _Ty >
struct _Atomic_pointer : _Atomic_storage < _Ty > {
    using _Base = _Atomic_storage < _Ty >;
    using difference_type = ptrdiff_t;

    using _Base :: _Base;

    _Ty fetch_add ( const ptrdiff_t _Diff, const memory_order _Order = memory_order_seq_cst ) noexcept {
        const ptrdiff_t _Shift_bytes =
            static_cast < ptrdiff_t > ( static_cast < size_t > ( _Diff ) * sizeof ( remove_pointer_t < _Ty > ) );
        ptrdiff_t _Result;




        _Check_memory_order ( static_cast < unsigned int > ( _Order ) ); _Result = _InterlockedExchangeAdd64 ( _Atomic_address_as < long long > ( this -> _Storage ), _Shift_bytes );


        return reinterpret_cast < _Ty > ( _Result );
    }



    _Ty fetch_add ( const ptrdiff_t _Diff ) volatile noexcept {
        return const_cast < _Atomic_pointer * > ( this ) -> fetch_add ( _Diff );
    }

    _Ty fetch_add ( const ptrdiff_t _Diff, const memory_order _Order ) volatile noexcept {
        return const_cast < _Atomic_pointer * > ( this ) -> fetch_add ( _Diff, _Order );
    }

    _Ty fetch_sub ( const ptrdiff_t _Diff ) volatile noexcept {
        return fetch_add ( static_cast < ptrdiff_t > ( 0 - static_cast < size_t > ( _Diff ) ) );
    }

    _Ty fetch_sub ( const ptrdiff_t _Diff ) noexcept {
        return fetch_add ( static_cast < ptrdiff_t > ( 0 - static_cast < size_t > ( _Diff ) ) );
    }

    _Ty fetch_sub ( const ptrdiff_t _Diff, const memory_order _Order ) volatile noexcept {
        return fetch_add ( static_cast < ptrdiff_t > ( 0 - static_cast < size_t > ( _Diff ) ), _Order );
    }

    _Ty fetch_sub ( const ptrdiff_t _Diff, const memory_order _Order ) noexcept {
        return fetch_add ( static_cast < ptrdiff_t > ( 0 - static_cast < size_t > ( _Diff ) ), _Order );
    }

    _Ty operator ++ ( int ) volatile noexcept {
        return fetch_add ( 1 );
    }

    _Ty operator ++ ( int ) noexcept {
        return fetch_add ( 1 );
    }

    _Ty operator ++ ( ) volatile noexcept {
        return fetch_add ( 1 ) + 1;
    }

    _Ty operator ++ ( ) noexcept {
        return fetch_add ( 1 ) + 1;
    }

    _Ty operator -- ( int ) volatile noexcept {
        return fetch_add ( - 1 );
    }

    _Ty operator -- ( int ) noexcept {
        return fetch_add ( - 1 );
    }

    _Ty operator -- ( ) volatile noexcept {
        return fetch_add ( - 1 ) - 1;
    }

    _Ty operator -- ( ) noexcept {
        return fetch_add ( - 1 ) - 1;
    }

    _Ty operator += ( const ptrdiff_t _Diff ) volatile noexcept {
        return fetch_add ( _Diff ) + _Diff;
    }

    _Ty operator += ( const ptrdiff_t _Diff ) noexcept {
        return fetch_add ( _Diff ) + _Diff;
    }

    _Ty operator -= ( const ptrdiff_t _Diff ) volatile noexcept {
        return fetch_add ( static_cast < ptrdiff_t > ( 0 - static_cast < size_t > ( _Diff ) ) ) - _Diff;
    }

    _Ty operator -= ( const ptrdiff_t _Diff ) noexcept {
        return fetch_add ( static_cast < ptrdiff_t > ( 0 - static_cast < size_t > ( _Diff ) ) ) - _Diff;
    }
};
#line 2091 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\atomic"
template < class _Ty >
struct _Atomic_pointer < _Ty & > : _Atomic_storage < _Ty & > {
    using _Base = _Atomic_storage < _Ty & >;
    using difference_type = ptrdiff_t;

    using _Base :: _Base;

    _Ty fetch_add ( const ptrdiff_t _Diff, const memory_order _Order = memory_order_seq_cst ) const noexcept {
        const ptrdiff_t _Shift_bytes =
            static_cast < ptrdiff_t > ( static_cast < size_t > ( _Diff ) * sizeof ( remove_pointer_t < _Ty > ) );
        ptrdiff_t _Result;




        _Check_memory_order ( static_cast < unsigned int > ( _Order ) ); _Result = _InterlockedExchangeAdd64 ( _Atomic_address_as < long long > ( this -> _Storage ), _Shift_bytes );


        return reinterpret_cast < _Ty > ( _Result );
    }

    _Ty fetch_sub ( const ptrdiff_t _Diff ) const noexcept {
        return fetch_add ( static_cast < ptrdiff_t > ( 0 - static_cast < size_t > ( _Diff ) ) );
    }

    _Ty fetch_sub ( const ptrdiff_t _Diff, const memory_order _Order ) const noexcept {
        return fetch_add ( static_cast < ptrdiff_t > ( 0 - static_cast < size_t > ( _Diff ) ), _Order );
    }

    _Ty operator ++ ( int ) const noexcept {
        return fetch_add ( 1 );
    }

    _Ty operator ++ ( ) const noexcept {
        return fetch_add ( 1 ) + 1;
    }

    _Ty operator -- ( int ) const noexcept {
        return fetch_add ( - 1 );
    }

    _Ty operator -- ( ) const noexcept {
        return fetch_add ( - 1 ) - 1;
    }

    _Ty operator += ( const ptrdiff_t _Diff ) const noexcept {
        return fetch_add ( _Diff ) + _Diff;
    }

    _Ty operator -= ( const ptrdiff_t _Diff ) const noexcept {
        return fetch_add ( static_cast < ptrdiff_t > ( 0 - static_cast < size_t > ( _Diff ) ) ) - _Diff;
    }
};
#line 2148 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\atomic"
template< class _TVal, class _Ty = _TVal> using _Choose_atomic_base2_t = typename _Select< is_integral_v< _TVal>  && (!is_same_v< bool, _TVal> )> ::template _Apply< _Atomic_integral_facade< _Ty> , typename _Select< is_pointer_v< _TVal>  && is_object_v< remove_pointer_t< _TVal> > > ::template _Apply< _Atomic_pointer< _Ty> , _Atomic_storage< _Ty> > > ; 
#line 2159 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\atomic"
template< class _TVal, class _Ty = _TVal> using _Choose_atomic_base_t = _Choose_atomic_base2_t< _TVal, _Ty> ; 
#line 2163 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\atomic"
template < class _Ty >
struct atomic : _Choose_atomic_base_t < _Ty > {
private :
    using _Base = _Choose_atomic_base_t < _Ty >;

public :
    static_assert ( is_trivially_copyable_v < _Ty > && is_copy_constructible_v < _Ty > && is_move_constructible_v < _Ty >
                      && is_copy_assignable_v < _Ty > && is_move_assignable_v < _Ty >,
        "atomic<T> requires T to be trivially copyable, copy constructible, move constructible, copy assignable, and move assignable."
                              );

    using value_type = _Ty;

    using _Base :: _Base;

    constexpr atomic ( ) noexcept ( is_nothrow_default_constructible_v < _Ty > ) : _Base ( ) { }

    atomic ( const atomic & ) = delete;
    atomic & operator = ( const atomic & ) = delete;






    [ [ nodiscard ] ] bool is_lock_free ( ) const volatile noexcept {
        constexpr bool _Result = sizeof ( _Ty ) <= 8 && ( sizeof ( _Ty ) & sizeof ( _Ty ) - 1 ) == 0;
        return _Result;
    }












    [ [ nodiscard ] ] bool is_lock_free ( ) const noexcept {
        return static_cast < const volatile atomic * > ( this ) -> is_lock_free ( );
    }

    _Ty operator = ( const _Ty _Value ) volatile noexcept {
        static_assert ( _Deprecate_non_lock_free_volatile < _Ty >, "Never fails" );
        this -> store ( _Value );
        return _Value;
    }

    _Ty operator = ( const _Ty _Value ) noexcept {
        this -> store ( _Value );
        return _Value;
    }






    using _Base :: store;
    void store ( const _Ty _Value ) volatile noexcept {
        static_assert ( _Deprecate_non_lock_free_volatile < _Ty >, "Never fails" );
        const_cast < atomic * > ( this ) -> _Base :: store ( _Value );
    }

    void store ( const _Ty _Value, const memory_order _Order ) volatile noexcept {
        static_assert ( _Deprecate_non_lock_free_volatile < _Ty >, "Never fails" );
        const_cast < atomic * > ( this ) -> _Base :: store ( _Value, _Order );
    }

    using _Base :: load;
    [ [ nodiscard ] ] _Ty load ( ) const volatile noexcept {
        static_assert ( _Deprecate_non_lock_free_volatile < _Ty >, "Never fails" );
        return const_cast < const atomic * > ( this ) -> _Base :: load ( );
    }

    [ [ nodiscard ] ] _Ty load ( const memory_order _Order ) const volatile noexcept {
        static_assert ( _Deprecate_non_lock_free_volatile < _Ty >, "Never fails" );
        return const_cast < const atomic * > ( this ) -> _Base :: load ( _Order );
    }

    using _Base :: exchange;
    _Ty exchange ( const _Ty _Value ) volatile noexcept {
        static_assert ( _Deprecate_non_lock_free_volatile < _Ty >, "Never fails" );
        return const_cast < atomic * > ( this ) -> _Base :: exchange ( _Value );
    }

    _Ty exchange ( const _Ty _Value, const memory_order _Order ) volatile noexcept {
        static_assert ( _Deprecate_non_lock_free_volatile < _Ty >, "Never fails" );
        return const_cast < atomic * > ( this ) -> _Base :: exchange ( _Value, _Order );
    }

    using _Base :: compare_exchange_strong;
    bool compare_exchange_strong ( _Ty & _Expected, const _Ty _Desired ) volatile noexcept {
        static_assert ( _Deprecate_non_lock_free_volatile < _Ty >, "Never fails" );
        return const_cast < atomic * > ( this ) -> _Base :: compare_exchange_strong ( _Expected, _Desired );
    }

    bool compare_exchange_strong ( _Ty & _Expected, const _Ty _Desired, const memory_order _Order ) volatile noexcept {
        static_assert ( _Deprecate_non_lock_free_volatile < _Ty >, "Never fails" );
        return const_cast < atomic * > ( this ) -> _Base :: compare_exchange_strong ( _Expected, _Desired, _Order );
    }

    bool compare_exchange_strong ( _Ty & _Expected, const _Ty _Desired, const memory_order _Success,
        const memory_order _Failure ) volatile noexcept {
        static_assert ( _Deprecate_non_lock_free_volatile < _Ty >, "Never fails" );
        return this -> compare_exchange_strong ( _Expected, _Desired, _Combine_cas_memory_orders ( _Success, _Failure ) );
    }

    bool compare_exchange_strong (
        _Ty & _Expected, const _Ty _Desired, const memory_order _Success, const memory_order _Failure ) noexcept {
        return this -> compare_exchange_strong ( _Expected, _Desired, _Combine_cas_memory_orders ( _Success, _Failure ) );
    }

    bool compare_exchange_weak ( _Ty & _Expected, const _Ty _Desired ) volatile noexcept {

        static_assert ( _Deprecate_non_lock_free_volatile < _Ty >, "Never fails" );
        return this -> compare_exchange_strong ( _Expected, _Desired );
    }

    bool compare_exchange_weak ( _Ty & _Expected, const _Ty _Desired ) noexcept {
        return this -> compare_exchange_strong ( _Expected, _Desired );
    }

    bool compare_exchange_weak ( _Ty & _Expected, const _Ty _Desired, const memory_order _Order ) volatile noexcept {
        static_assert ( _Deprecate_non_lock_free_volatile < _Ty >, "Never fails" );
        return this -> compare_exchange_strong ( _Expected, _Desired, _Order );
    }

    bool compare_exchange_weak ( _Ty & _Expected, const _Ty _Desired, const memory_order _Order ) noexcept {
        return this -> compare_exchange_strong ( _Expected, _Desired, _Order );
    }

    bool compare_exchange_weak ( _Ty & _Expected, const _Ty _Desired, const memory_order _Success,
        const memory_order _Failure ) volatile noexcept {
        static_assert ( _Deprecate_non_lock_free_volatile < _Ty >, "Never fails" );
        return this -> compare_exchange_strong ( _Expected, _Desired, _Combine_cas_memory_orders ( _Success, _Failure ) );
    }

    bool compare_exchange_weak (
        _Ty & _Expected, const _Ty _Desired, const memory_order _Success, const memory_order _Failure ) noexcept {
        return this -> compare_exchange_strong ( _Expected, _Desired, _Combine_cas_memory_orders ( _Success, _Failure ) );
    }


















    operator _Ty ( ) const volatile noexcept {
        static_assert ( _Deprecate_non_lock_free_volatile < _Ty >, "Never fails" );
        return this -> load ( );
    }

    operator _Ty ( ) const noexcept {
        return this -> load ( );
    }
};
#line 2451 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\atomic"
template < class _Ty >
[ [ nodiscard ] ] bool atomic_is_lock_free ( const volatile atomic < _Ty > * _Mem ) noexcept {
    return _Mem -> is_lock_free ( );
}
#line 2456
template < class _Ty >
[ [ nodiscard ] ] bool atomic_is_lock_free ( const atomic < _Ty > * _Mem ) noexcept {
    return _Mem -> is_lock_free ( );
}
#line 2461
template < class _Ty >
void atomic_store ( volatile atomic < _Ty > * const _Mem, const _Identity_t < _Ty > _Value ) noexcept {
    static_assert ( _Deprecate_non_lock_free_volatile < _Ty >, "Never fails" );
    _Mem -> store ( _Value );
}
#line 2467
template < class _Ty >
void atomic_store ( atomic < _Ty > * const _Mem, const _Identity_t < _Ty > _Value ) noexcept {
    _Mem -> store ( _Value );
}
#line 2472
template < class _Ty >
void atomic_store_explicit (
    volatile atomic < _Ty > * const _Mem, const _Identity_t < _Ty > _Value, const memory_order _Order ) noexcept {
    static_assert ( _Deprecate_non_lock_free_volatile < _Ty >, "Never fails" );
    _Mem -> store ( _Value, _Order );
}
#line 2479
template < class _Ty >
void atomic_store_explicit ( atomic < _Ty > * const _Mem, const _Identity_t < _Ty > _Value, const memory_order _Order ) noexcept {
    _Mem -> store ( _Value, _Order );
}
#line 2484
template < class _Ty >
 void atomic_init (
    volatile atomic < _Ty > * const _Mem, const typename atomic < _Ty > :: value_type _Value ) noexcept {
    static_assert ( _Deprecate_non_lock_free_volatile < _Ty >, "Never fails" );
    :: std :: atomic_store_explicit ( _Mem, _Value, memory_order_relaxed );
}
#line 2491
template < class _Ty >
 void atomic_init (
    atomic < _Ty > * const _Mem, const typename atomic < _Ty > :: value_type _Value ) noexcept {
    :: std :: atomic_store_explicit ( _Mem, _Value, memory_order_relaxed );
}
#line 2497
template < class _Ty >
[ [ nodiscard ] ] _Ty atomic_load ( const volatile atomic < _Ty > * const _Mem ) noexcept {
    static_assert ( _Deprecate_non_lock_free_volatile < _Ty >, "Never fails" );
    return _Mem -> load ( );
}
#line 2503
template < class _Ty >
[ [ nodiscard ] ] _Ty atomic_load ( const atomic < _Ty > * const _Mem ) noexcept {
    return _Mem -> load ( );
}
#line 2508
template < class _Ty >
[ [ nodiscard ] ] _Ty atomic_load_explicit ( const volatile atomic < _Ty > * const _Mem, const memory_order _Order ) noexcept {
    static_assert ( _Deprecate_non_lock_free_volatile < _Ty >, "Never fails" );
    return _Mem -> load ( _Order );
}
#line 2514
template < class _Ty >
[ [ nodiscard ] ] _Ty atomic_load_explicit ( const atomic < _Ty > * const _Mem, const memory_order _Order ) noexcept {
    return _Mem -> load ( _Order );
}
#line 2519
template < class _Ty >
_Ty atomic_exchange ( volatile atomic < _Ty > * const _Mem, const _Identity_t < _Ty > _Value ) noexcept {
    static_assert ( _Deprecate_non_lock_free_volatile < _Ty >, "Never fails" );
    return _Mem -> exchange ( _Value );
}
#line 2525
template < class _Ty >
_Ty atomic_exchange ( atomic < _Ty > * const _Mem, const _Identity_t < _Ty > _Value ) noexcept {
    return _Mem -> exchange ( _Value );
}
#line 2530
template < class _Ty >
_Ty atomic_exchange_explicit (
    volatile atomic < _Ty > * const _Mem, const _Identity_t < _Ty > _Value, const memory_order _Order ) noexcept {
    static_assert ( _Deprecate_non_lock_free_volatile < _Ty >, "Never fails" );
    return _Mem -> exchange ( _Value, _Order );
}
#line 2537
template < class _Ty >
_Ty atomic_exchange_explicit (
    atomic < _Ty > * const _Mem, const _Identity_t < _Ty > _Value, const memory_order _Order ) noexcept {
    return _Mem -> exchange ( _Value, _Order );
}
#line 2543
template < class _Ty >
bool atomic_compare_exchange_strong (
    volatile atomic < _Ty > * const _Mem, _Identity_t < _Ty > * const _Expected, const _Identity_t < _Ty > _Desired ) noexcept {
    static_assert ( _Deprecate_non_lock_free_volatile < _Ty >, "Never fails" );
    return _Mem -> compare_exchange_strong ( * _Expected, _Desired );
}
#line 2550
template < class _Ty >
bool atomic_compare_exchange_strong (
    atomic < _Ty > * const _Mem, _Identity_t < _Ty > * const _Expected, const _Identity_t < _Ty > _Desired ) noexcept {
    return _Mem -> compare_exchange_strong ( * _Expected, _Desired );
}
#line 2556
template < class _Ty >
bool atomic_compare_exchange_strong_explicit ( volatile atomic < _Ty > * const _Mem, _Identity_t < _Ty > * const _Expected,
    const _Identity_t < _Ty > _Desired, const memory_order _Success, const memory_order _Failure ) noexcept {
    static_assert ( _Deprecate_non_lock_free_volatile < _Ty >, "Never fails" );
    return _Mem -> compare_exchange_strong ( * _Expected, _Desired, _Combine_cas_memory_orders ( _Success, _Failure ) );
}
#line 2563
template < class _Ty >
bool atomic_compare_exchange_strong_explicit ( atomic < _Ty > * const _Mem, _Identity_t < _Ty > * const _Expected,
    const _Identity_t < _Ty > _Desired, const memory_order _Success, const memory_order _Failure ) noexcept {
    return _Mem -> compare_exchange_strong ( * _Expected, _Desired, _Combine_cas_memory_orders ( _Success, _Failure ) );
}
#line 2569
template < class _Ty >
bool atomic_compare_exchange_weak (
    volatile atomic < _Ty > * const _Mem, _Identity_t < _Ty > * const _Expected, const _Identity_t < _Ty > _Desired ) noexcept {
    static_assert ( _Deprecate_non_lock_free_volatile < _Ty >, "Never fails" );
    return _Mem -> compare_exchange_strong ( * _Expected, _Desired );
}
#line 2576
template < class _Ty >
bool atomic_compare_exchange_weak (
    atomic < _Ty > * const _Mem, _Identity_t < _Ty > * const _Expected, const _Identity_t < _Ty > _Desired ) noexcept {
    return _Mem -> compare_exchange_strong ( * _Expected, _Desired );
}
#line 2582
template < class _Ty >
bool atomic_compare_exchange_weak_explicit ( volatile atomic < _Ty > * const _Mem, _Identity_t < _Ty > * const _Expected,
    const _Identity_t < _Ty > _Desired, const memory_order _Success, const memory_order _Failure ) noexcept {
    static_assert ( _Deprecate_non_lock_free_volatile < _Ty >, "Never fails" );
    return _Mem -> compare_exchange_strong ( * _Expected, _Desired, _Combine_cas_memory_orders ( _Success, _Failure ) );
}
#line 2589
template < class _Ty >
bool atomic_compare_exchange_weak_explicit ( atomic < _Ty > * const _Mem, _Identity_t < _Ty > * const _Expected,
    const _Identity_t < _Ty > _Desired, const memory_order _Success, const memory_order _Failure ) noexcept {
    return _Mem -> compare_exchange_strong ( * _Expected, _Desired, _Combine_cas_memory_orders ( _Success, _Failure ) );
}
#line 2595
template < class _Ty >
_Ty atomic_fetch_add ( volatile atomic < _Ty > * _Mem, const typename atomic < _Ty > :: difference_type _Value ) noexcept {
    static_assert ( _Deprecate_non_lock_free_volatile < _Ty >, "Never fails" );
    return _Mem -> fetch_add ( _Value );
}
#line 2601
template < class _Ty >
_Ty atomic_fetch_add ( atomic < _Ty > * _Mem, const typename atomic < _Ty > :: difference_type _Value ) noexcept {
    return _Mem -> fetch_add ( _Value );
}
#line 2606
template < class _Ty >
_Ty atomic_fetch_add_explicit ( volatile atomic < _Ty > * _Mem, const typename atomic < _Ty > :: difference_type _Value,
    const memory_order _Order ) noexcept {
    static_assert ( _Deprecate_non_lock_free_volatile < _Ty >, "Never fails" );
    return _Mem -> fetch_add ( _Value, _Order );
}
#line 2613
template < class _Ty >
_Ty atomic_fetch_add_explicit (
    atomic < _Ty > * _Mem, const typename atomic < _Ty > :: difference_type _Value, const memory_order _Order ) noexcept {
    return _Mem -> fetch_add ( _Value, _Order );
}
#line 2619
template < class _Ty >
_Ty atomic_fetch_sub ( volatile atomic < _Ty > * _Mem, const typename atomic < _Ty > :: difference_type _Value ) noexcept {
    static_assert ( _Deprecate_non_lock_free_volatile < _Ty >, "Never fails" );
    return _Mem -> fetch_sub ( _Value );
}
#line 2625
template < class _Ty >
_Ty atomic_fetch_sub ( atomic < _Ty > * _Mem, const typename atomic < _Ty > :: difference_type _Value ) noexcept {
    return _Mem -> fetch_sub ( _Value );
}
#line 2630
template < class _Ty >
_Ty atomic_fetch_sub_explicit ( volatile atomic < _Ty > * _Mem, const typename atomic < _Ty > :: difference_type _Value,
    const memory_order _Order ) noexcept {
    static_assert ( _Deprecate_non_lock_free_volatile < _Ty >, "Never fails" );
    return _Mem -> fetch_sub ( _Value, _Order );
}
#line 2637
template < class _Ty >
_Ty atomic_fetch_sub_explicit (
    atomic < _Ty > * _Mem, const typename atomic < _Ty > :: difference_type _Value, const memory_order _Order ) noexcept {
    return _Mem -> fetch_sub ( _Value, _Order );
}
#line 2643
template < class _Ty >
_Ty atomic_fetch_and ( volatile atomic < _Ty > * _Mem, const typename atomic < _Ty > :: value_type _Value ) noexcept {
    static_assert ( _Deprecate_non_lock_free_volatile < _Ty >, "Never fails" );
    return _Mem -> fetch_and ( _Value );
}
#line 2649
template < class _Ty >
_Ty atomic_fetch_and ( atomic < _Ty > * _Mem, const typename atomic < _Ty > :: value_type _Value ) noexcept {
    return _Mem -> fetch_and ( _Value );
}
#line 2654
template < class _Ty >
_Ty atomic_fetch_and_explicit (
    volatile atomic < _Ty > * _Mem, const typename atomic < _Ty > :: value_type _Value, const memory_order _Order ) noexcept {
    static_assert ( _Deprecate_non_lock_free_volatile < _Ty >, "Never fails" );
    return _Mem -> fetch_and ( _Value, _Order );
}
#line 2661
template < class _Ty >
_Ty atomic_fetch_and_explicit (
    atomic < _Ty > * _Mem, const typename atomic < _Ty > :: value_type _Value, const memory_order _Order ) noexcept {
    return _Mem -> fetch_and ( _Value, _Order );
}
#line 2667
template < class _Ty >
_Ty atomic_fetch_or ( volatile atomic < _Ty > * _Mem, const typename atomic < _Ty > :: value_type _Value ) noexcept {
    static_assert ( _Deprecate_non_lock_free_volatile < _Ty >, "Never fails" );
    return _Mem -> fetch_or ( _Value );
}
#line 2673
template < class _Ty >
_Ty atomic_fetch_or ( atomic < _Ty > * _Mem, const typename atomic < _Ty > :: value_type _Value ) noexcept {
    return _Mem -> fetch_or ( _Value );
}
#line 2678
template < class _Ty >
_Ty atomic_fetch_or_explicit (
    volatile atomic < _Ty > * _Mem, const typename atomic < _Ty > :: value_type _Value, const memory_order _Order ) noexcept {
    static_assert ( _Deprecate_non_lock_free_volatile < _Ty >, "Never fails" );
    return _Mem -> fetch_or ( _Value, _Order );
}
#line 2685
template < class _Ty >
_Ty atomic_fetch_or_explicit (
    atomic < _Ty > * _Mem, const typename atomic < _Ty > :: value_type _Value, const memory_order _Order ) noexcept {
    return _Mem -> fetch_or ( _Value, _Order );
}
#line 2691
template < class _Ty >
_Ty atomic_fetch_xor ( volatile atomic < _Ty > * _Mem, const typename atomic < _Ty > :: value_type _Value ) noexcept {
    static_assert ( _Deprecate_non_lock_free_volatile < _Ty >, "Never fails" );
    return _Mem -> fetch_xor ( _Value );
}
#line 2697
template < class _Ty >
_Ty atomic_fetch_xor ( atomic < _Ty > * _Mem, const typename atomic < _Ty > :: value_type _Value ) noexcept {
    return _Mem -> fetch_xor ( _Value );
}
#line 2702
template < class _Ty >
_Ty atomic_fetch_xor_explicit (
    volatile atomic < _Ty > * _Mem, const typename atomic < _Ty > :: value_type _Value, const memory_order _Order ) noexcept {
    static_assert ( _Deprecate_non_lock_free_volatile < _Ty >, "Never fails" );
    return _Mem -> fetch_xor ( _Value, _Order );
}
#line 2709
template < class _Ty >
_Ty atomic_fetch_xor_explicit (
    atomic < _Ty > * _Mem, const typename atomic < _Ty > :: value_type _Value, const memory_order _Order ) noexcept {
    return _Mem -> fetch_xor ( _Value, _Order );
}
#line 2759 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\atomic"
using atomic_bool = atomic< bool> ; 
#line 2761
using atomic_char = atomic< char> ; 
#line 2762
using atomic_schar = atomic< signed char> ; 
#line 2763
using atomic_uchar = atomic< unsigned char> ; 
#line 2764
using atomic_short = atomic< short> ; 
#line 2765
using atomic_ushort = atomic< unsigned short> ; 
#line 2766
using atomic_int = atomic< int> ; 
#line 2767
using atomic_uint = atomic< unsigned> ; 
#line 2768
using atomic_long = atomic< long> ; 
#line 2769
using atomic_ulong = atomic< unsigned long> ; 
#line 2770
using atomic_llong = atomic< __int64> ; 
#line 2771
using atomic_ullong = atomic< unsigned __int64> ; 
#line 2776
using atomic_char16_t = atomic< char16_t> ; 
#line 2777
using atomic_char32_t = atomic< char32_t> ; 
#line 2778
using atomic_wchar_t = atomic< __wchar_t> ; 
#line 2780
using atomic_int8_t = atomic< signed char> ; 
#line 2781
using atomic_uint8_t = atomic< unsigned char> ; 
#line 2782
using atomic_int16_t = atomic< short> ; 
#line 2783
using atomic_uint16_t = atomic< unsigned short> ; 
#line 2784
using atomic_int32_t = atomic< int> ; 
#line 2785
using atomic_uint32_t = atomic< unsigned> ; 
#line 2786
using atomic_int64_t = atomic< __int64> ; 
#line 2787
using atomic_uint64_t = atomic< unsigned __int64> ; 
#line 2789
using atomic_int_least8_t = atomic< signed char> ; 
#line 2790
using atomic_uint_least8_t = atomic< unsigned char> ; 
#line 2791
using atomic_int_least16_t = atomic< short> ; 
#line 2792
using atomic_uint_least16_t = atomic< unsigned short> ; 
#line 2793
using atomic_int_least32_t = atomic< int> ; 
#line 2794
using atomic_uint_least32_t = atomic< unsigned> ; 
#line 2795
using atomic_int_least64_t = atomic< __int64> ; 
#line 2796
using atomic_uint_least64_t = atomic< unsigned __int64> ; 
#line 2798
using atomic_int_fast8_t = atomic< signed char> ; 
#line 2799
using atomic_uint_fast8_t = atomic< unsigned char> ; 
#line 2800
using atomic_int_fast16_t = atomic< int> ; 
#line 2801
using atomic_uint_fast16_t = atomic< unsigned> ; 
#line 2802
using atomic_int_fast32_t = atomic< int> ; 
#line 2803
using atomic_uint_fast32_t = atomic< unsigned> ; 
#line 2804
using atomic_int_fast64_t = atomic< __int64> ; 
#line 2805
using atomic_uint_fast64_t = atomic< unsigned __int64> ; 
#line 2807
using atomic_intptr_t = atomic< __int64> ; 
#line 2808
using atomic_uintptr_t = atomic< unsigned __int64> ; 
#line 2809
using atomic_size_t = atomic< unsigned __int64> ; 
#line 2810
using atomic_ptrdiff_t = atomic< __int64> ; 
#line 2811
using atomic_intmax_t = atomic< __int64> ; 
#line 2812
using atomic_uintmax_t = atomic< unsigned __int64> ; 
#line 2824 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\atomic"
struct atomic_flag { 
#line 2835 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\atomic"
bool test_and_set(const memory_order _Order = memory_order_seq_cst) noexcept { 
#line 2836
return (_Storage).exchange(true, _Order) != (0); 
#line 2837
} 
#line 2839
bool test_and_set(const memory_order _Order = memory_order_seq_cst) volatile noexcept { 
#line 2840
return (_Storage).exchange(true, _Order) != (0); 
#line 2841
} 
#line 2843
void clear(const memory_order _Order = memory_order_seq_cst) noexcept { 
#line 2844
(_Storage).store(false, _Order); 
#line 2845
} 
#line 2847
void clear(const memory_order _Order = memory_order_seq_cst) volatile noexcept { 
#line 2848
(_Storage).store(false, _Order); 
#line 2849
} 
#line 2851
constexpr atomic_flag() noexcept = default;
#line 2880 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\atomic"
atomic< long>  _Storage; 
#line 2884 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\atomic"
}; 
#line 2906 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\atomic"
inline bool atomic_flag_test_and_set(atomic_flag *const _Flag) noexcept { 
#line 2907
return _Flag->test_and_set(); 
#line 2908
} 
#line 2910
inline bool atomic_flag_test_and_set(volatile atomic_flag *const _Flag) noexcept { 
#line 2911
return _Flag->test_and_set(); 
#line 2912
} 
#line 2914
inline bool atomic_flag_test_and_set_explicit(atomic_flag *const 
#line 2915
_Flag, const memory_order _Order) noexcept { 
#line 2916
return _Flag->test_and_set(_Order); 
#line 2917
} 
#line 2919
inline bool atomic_flag_test_and_set_explicit(volatile atomic_flag *const 
#line 2920
_Flag, const memory_order _Order) noexcept { 
#line 2921
return _Flag->test_and_set(_Order); 
#line 2922
} 
#line 2924
inline void atomic_flag_clear(atomic_flag *const _Flag) noexcept { 
#line 2925
_Flag->clear(); 
#line 2926
} 
#line 2928
inline void atomic_flag_clear(volatile atomic_flag *const _Flag) noexcept { 
#line 2929
_Flag->clear(); 
#line 2930
} 
#line 2932
inline void atomic_flag_clear_explicit(atomic_flag *const _Flag, const memory_order _Order) noexcept { 
#line 2933
_Flag->clear(_Order); 
#line 2934
} 
#line 2936
inline void atomic_flag_clear_explicit(volatile atomic_flag *const 
#line 2937
_Flag, const memory_order _Order) noexcept { 
#line 2938
_Flag->clear(_Order); 
#line 2939
} 
#line 3040 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\atomic"
}
#line 3066
#pragma warning(pop)
#pragma pack ( pop )
#line 25 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\system_error"
#pragma pack ( push, 8 )
#pragma warning(push, 3)
#pragma warning(disable : 4180 4412 4455 4494 4514 4574 4582 4583 4587 4588 4619 4623 4625 4626 4643 4648 4702 4793 4820 4988 5026 5027 5045 6294 4984 5053 )
#line 32
namespace std { 
#line 33
enum class io_errc { 
#line 34
stream = 1
#line 35
}; 
#line 37
template< class _Enum> 
#line 38
struct is_error_code_enum : public false_type { }; 
#line 41
template<> struct is_error_code_enum< io_errc>  : public true_type { }; 
#line 43
template< class _Ty> constexpr bool 
#line 44
is_error_code_enum_v = (is_error_code_enum< _Ty> ::value); 
#line 46
template< class _Enum> 
#line 47
struct is_error_condition_enum : public false_type { }; 
#line 50
template<> struct is_error_condition_enum< errc>  : public true_type { }; 
#line 52
template< class _Ty> constexpr bool 
#line 53
is_error_condition_enum_v = (is_error_condition_enum< _Ty> ::value); 
#line 55
class error_code; 
#line 56
class error_condition; 
#line 58
namespace _Ensure_adl { 
#line 59
inline void make_error_code() = delete;
#line 60
inline void make_error_condition() = delete;
#line 61
}
#line 63
class error_category; 
#line 65
[[nodiscard]] inline const error_category &generic_category() noexcept; 
#line 66
[[nodiscard]] inline const error_category &iostream_category() noexcept; 
#line 67
[[nodiscard]] inline const error_category &system_category() noexcept; 
#line 69
class __declspec(novtable) error_category { 
#line 76
#pragma warning(push)
#pragma warning(disable : 4355)
public: constexpr error_category() noexcept : _Addr(this) { } 
#pragma warning(pop)
#line 82 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\system_error"
virtual ~error_category() noexcept = default;
#line 84
[[nodiscard]] virtual const char *name() const noexcept = 0; 
#line 86
[[nodiscard]] virtual string message(int _Errval) const = 0; 
#line 88
[[nodiscard]] inline virtual error_condition default_error_condition(int _Errval) const noexcept; 
#line 90
[[nodiscard]] inline virtual bool equivalent(int _Errval, const error_condition & _Cond) const noexcept; 
#line 92
[[nodiscard]] inline virtual bool equivalent(const error_code & _Code, int _Errval) const noexcept; 
#line 94
[[nodiscard]] bool operator==(const error_category &_Right) const noexcept { 
#line 98
return _Bit_cast< unsigned __int64> (_Addr) == _Bit_cast< unsigned __int64> (_Right._Addr); 
#line 100 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\system_error"
} 
#line 103
[[nodiscard]] bool operator!=(const error_category &_Right) const noexcept { 
#line 104
return !((*this) == _Right); 
#line 105
} 
#line 113 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\system_error"
[[nodiscard]] bool operator<(const error_category &_Right) const noexcept { 
#line 117
return _Bit_cast< unsigned __int64> (_Addr) < _Bit_cast< unsigned __int64> (_Right._Addr); 
#line 119 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\system_error"
} 
#line 122 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\system_error"
error_category(const error_category &) = delete;
#line 123
error_category &operator=(const error_category &) = delete;
#line 129
protected: union _Addr_storage { 
#line 131
private: uintptr_t _Num; 
#line 132
error_category *_Ptr; 
#line 135
public: constexpr explicit _Addr_storage(const uintptr_t _Addr_num) noexcept : _Num(_Addr_num) { } 
#line 136
constexpr explicit _Addr_storage(error_category *const _Addr_ptr) noexcept : _Ptr(_Addr_ptr) { } 
#line 139
constexpr _Addr_storage &operator=(const uintptr_t _Addr_num) noexcept { 
#line 140
(_Num) = _Addr_num; 
#line 141
return *this; 
#line 142
} 
#line 143
}; 
#line 147
_Addr_storage _Addr; 
#line 150 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\system_error"
constexpr explicit error_category(const uintptr_t _Addr_) noexcept : _Addr(_Addr_) { } 
#line 152
enum: uintptr_t { 
#line 153
_Future_addr = 1Ui64, 
#line 154
_Generic_addr = 3Ui64, 
#line 155
_Iostream_addr = 5Ui64, 
#line 156
_System_addr = 7Ui64
#line 157
}; 
#line 158
}; 
#line 161
[[nodiscard]] inline bool _System_error_equal(const error_code &, const error_condition &) noexcept; 
#line 164 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\system_error"
class error_code { 
#line 166
public: error_code() noexcept : _Myval(0), _Mycat(&::std::system_category()) { } 
#line 168
error_code(int _Val, const error_category &_Cat) noexcept : _Myval(_Val), _Mycat(&_Cat) { } 
#line 170
template < class _Enum, enable_if_t < is_error_code_enum_v < _Enum >, int > = 0 >
    error_code ( _Enum _Errcode ) noexcept : _Myval ( 0 ), _Mycat ( nullptr ) {
        using _Ensure_adl :: make_error_code;
        * this = make_error_code ( _Errcode );
    }
#line 176
void assign(int _Val, const error_category &_Cat) noexcept { 
#line 177
(_Myval) = _Val; 
#line 178
(_Mycat) = (&_Cat); 
#line 179
} 
#line 181
template < class _Enum, enable_if_t < is_error_code_enum_v < _Enum >, int > = 0 >
    error_code & operator = ( _Enum _Errcode ) noexcept {
        using _Ensure_adl :: make_error_code;
        * this = make_error_code ( _Errcode );
        return * this;
    }
#line 188
void clear() noexcept { 
#line 189
(_Myval) = 0; 
#line 190
(_Mycat) = (&::std::system_category()); 
#line 191
} 
#line 193
[[nodiscard]] int value() const noexcept { 
#line 194
return _Myval; 
#line 195
} 
#line 197
[[nodiscard]] const error_category &category() const noexcept { 
#line 198
return *(_Mycat); 
#line 199
} 
#line 201
[[nodiscard]] inline error_condition default_error_condition() const noexcept; 
#line 203
[[nodiscard]] string message() const { 
#line 204
return this->category().message(this->value()); 
#line 205
} 
#line 207
explicit operator bool() const noexcept { 
#line 208
return this->value() != 0; 
#line 209
} 
#line 212
friend inline bool operator==(const error_code &_Left, const error_code &_Right) noexcept { 
#line 213
return ((_Left.category()) == (_Right.category())) && (_Left.value() == _Right.value()); 
#line 214
} 
#line 216
friend inline bool operator==(const error_code &_Left, const std::error_condition &_Right) noexcept { 
#line 217
return _System_error_equal(_Left, _Right); 
#line 218
} 
#line 228
friend inline bool operator<(const error_code &_Left, const error_code &_Right) noexcept { 
#line 229
return ((_Left.category()) < (_Right.category())) || (((_Left.category()) == (_Right.category())) && (_Left.value() < _Right.value())); 
#line 231
} 
#line 234 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\system_error"
friend inline bool operator==(const std::error_condition &_Left, const error_code &_Right) noexcept { 
#line 235
return _System_error_equal(_Right, _Left); 
#line 236
} 
#line 238
friend inline bool operator!=(const error_code &_Left, const error_code &_Right) noexcept { 
#line 239
return !(_Left == _Right); 
#line 240
} 
#line 242
friend inline bool operator!=(const error_code &_Left, const std::error_condition &_Right) noexcept { 
#line 243
return !_System_error_equal(_Left, _Right); 
#line 244
} 
#line 246
friend inline bool operator!=(const std::error_condition &_Left, const error_code &_Right) noexcept { 
#line 247
return !_System_error_equal(_Right, _Left); 
#line 248
} 
#line 253 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\system_error"
private: int _Myval; 
#line 254
const error_category *_Mycat; 
#line 255
}; 
#line 257
class error_condition { 
#line 259
public: error_condition() noexcept : _Myval(0), _Mycat(&::std::generic_category()) { } 
#line 261
error_condition(int _Val, const error_category &_Cat) noexcept : _Myval(_Val), _Mycat(&_Cat) { } 
#line 263
template < class _Enum, enable_if_t < is_error_condition_enum_v < _Enum >, int > = 0 >
    error_condition ( _Enum _Errcode ) noexcept : _Myval ( 0 ), _Mycat ( nullptr ) {
        using _Ensure_adl :: make_error_condition;
        * this = make_error_condition ( _Errcode );
    }
#line 269
void assign(int _Val, const error_category &_Cat) noexcept { 
#line 270
(_Myval) = _Val; 
#line 271
(_Mycat) = (&_Cat); 
#line 272
} 
#line 274
template < class _Enum, enable_if_t < is_error_condition_enum_v < _Enum >, int > = 0 >
    error_condition & operator = ( _Enum _Errcode ) noexcept {
        using _Ensure_adl :: make_error_condition;
        * this = make_error_condition ( _Errcode );
        return * this;
    }
#line 281
void clear() noexcept { 
#line 282
(_Myval) = 0; 
#line 283
(_Mycat) = (&::std::generic_category()); 
#line 284
} 
#line 286
[[nodiscard]] int value() const noexcept { 
#line 287
return _Myval; 
#line 288
} 
#line 290
[[nodiscard]] const error_category &category() const noexcept { 
#line 291
return *(_Mycat); 
#line 292
} 
#line 294
[[nodiscard]] string message() const { 
#line 295
return this->category().message(this->value()); 
#line 296
} 
#line 298
explicit operator bool() const noexcept { 
#line 299
return this->value() != 0; 
#line 300
} 
#line 303
friend inline bool operator==(const error_condition &_Left, const error_condition &_Right) noexcept { 
#line 304
return ((_Left.category()) == (_Right.category())) && (_Left.value() == _Right.value()); 
#line 305
} 
#line 316
friend inline bool operator<(const error_condition &_Left, const error_condition &_Right) noexcept { 
#line 317
return ((_Left.category()) < (_Right.category())) || (((_Left.category()) == (_Right.category())) && (_Left.value() < _Right.value())); 
#line 319
} 
#line 322 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\system_error"
friend inline bool operator!=(const error_condition &_Left, const error_condition &_Right) noexcept { 
#line 323
return !(_Left == _Right); 
#line 324
} 
#line 330 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\system_error"
friend inline bool operator==(const std::error_code & _Left, const error_condition & _Right) noexcept; 
#line 332
friend inline bool operator==(const error_condition & _Left, const std::error_code & _Right) noexcept; 
#line 333
friend inline bool operator!=(const std::error_code & _Left, const error_condition & _Right) noexcept; 
#line 334
friend inline bool operator!=(const error_condition & _Left, const std::error_code & _Right) noexcept; 
#line 339 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\system_error"
private: int _Myval; 
#line 340
const error_category *_Mycat; 
#line 341
}; 
#line 344
[[nodiscard]] inline bool _System_error_equal(const error_code &_Left, const error_condition &_Right) noexcept { 
#line 345
return _Left.category().equivalent(_Left.value(), _Right) || _Right.category().equivalent(_Left, _Right.value()); 
#line 346
} 
#line 410 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\system_error"
[[nodiscard]] inline error_condition error_category::default_error_condition(int _Errval) const noexcept { 
#line 412
return error_condition(_Errval, *this); 
#line 413
} 
#line 415
[[nodiscard]] inline bool error_category::equivalent(int _Errval, const error_condition &_Cond) const noexcept { 
#line 416
return ((this->default_error_condition(_Errval)) == _Cond); 
#line 417
} 
#line 419
[[nodiscard]] inline bool error_category::equivalent(const error_code &_Code, int _Errval) const noexcept { 
#line 420
return ((*this) == (_Code.category())) && (_Code.value() == _Errval); 
#line 421
} 
#line 423
[[nodiscard]] inline error_condition error_code::default_error_condition() const noexcept { 
#line 425
return this->category().default_error_condition(this->value()); 
#line 426
} 
#line 428
[[nodiscard]] inline error_code make_error_code(errc _Ec) noexcept { 
#line 429
return error_code(static_cast< int>(_Ec), ::std::generic_category()); 
#line 430
} 
#line 432
[[nodiscard]] inline error_code make_error_code(io_errc _Ec) noexcept { 
#line 433
return error_code(static_cast< int>(_Ec), ::std::iostream_category()); 
#line 434
} 
#line 436
[[nodiscard]] inline error_condition make_error_condition(errc _Ec) noexcept { 
#line 437
return error_condition(static_cast< int>(_Ec), ::std::generic_category()); 
#line 438
} 
#line 440
[[nodiscard]] inline error_condition make_error_condition(io_errc _Ec) noexcept { 
#line 441
return error_condition(static_cast< int>(_Ec), ::std::iostream_category()); 
#line 442
} 
#line 445
template<> struct hash< error_code>  { 
#line 446
using argument_type = error_code; 
#line 447
using result_type = size_t; 
#line 449
[[nodiscard]] size_t operator()(const error_code &_Keyval) const noexcept { 
#line 450
return std::hash< int> {}(_Keyval.value()); 
#line 451
} 
#line 452
}; 
#line 455
template<> struct hash< error_condition>  { 
#line 456
using argument_type = error_condition; 
#line 457
using result_type = size_t; 
#line 459
[[nodiscard]] size_t operator()(const error_condition &_Keyval) const noexcept { 
#line 460
return std::hash< int> {}(_Keyval.value()); 
#line 461
} 
#line 462
}; 
#line 464
class _System_error : public runtime_error { 
#line 466
static string _Makestr(error_code _Errcode, string _Message) { 
#line 467
if (!_Message.empty()) { 
#line 468
_Message.append(": "); 
#line 469
}  
#line 471
_Message.append(_Errcode.message()); 
#line 472
return _Message; 
#line 473
} 
#line 476
protected: _System_error(error_code _Errcode, const string &_Message) : runtime_error(_Makestr(_Errcode, _Message)), _Mycode(_Errcode) 
#line 477
{ } 
#line 479
error_code _Mycode; 
#line 480
}; 
#line 482
class system_error : public _System_error { 
#line 484
using _Mybase = _System_error; 
#line 487
public: system_error(error_code _Errcode) : _Mybase(_Errcode, "") { } 
#line 489
system_error(error_code _Errcode, const string &_Message) : _Mybase(_Errcode, _Message) { } 
#line 491
system_error(error_code _Errcode, const char *_Message) : _Mybase(_Errcode, _Message) { } 
#line 493
system_error(int _Errval, const error_category &_Errcat) : _Mybase(error_code(_Errval, _Errcat), "") { } 
#line 495
system_error(int _Errval, const error_category &_Errcat, const string &_Message) : _Mybase(error_code(_Errval, _Errcat), _Message) 
#line 496
{ } 
#line 498
system_error(int _Errval, const error_category &_Errcat, const char *_Message) : _Mybase(error_code(_Errval, _Errcat), _Message) 
#line 499
{ } 
#line 501
[[nodiscard]] const error_code &code() const noexcept { 
#line 502
return _Mycode; 
#line 503
} 
#line 511 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\system_error"
}; 
#line 513
[[noreturn]] inline void _Throw_system_error(const errc _Ec) { 
#line 514
throw system_error{::std::make_error_code(_Ec)}; 
#line 515
} 
#line 517
const char *__cdecl _Syserror_map(int); 
#line 518
int __cdecl _Winerror_map(int); 
#line 520
struct _System_error_message { 
#line 521
char *_Str; 
#line 522
size_t _Length; 
#line 524
explicit _System_error_message(const unsigned long _Ec) noexcept : _Str((nullptr)), _Length(::__std_system_error_allocate_message(_Ec, &(_Str))) 
#line 525
{ } 
#line 527
_System_error_message(const _System_error_message &) = delete;
#line 528
_System_error_message &operator=(const _System_error_message &) = delete;
#line 530
~_System_error_message() { 
#line 531
::__std_system_error_deallocate_message(_Str); 
#line 532
} 
#line 533
}; 
#line 535
class _Generic_error_category : public error_category { 
#line 537
public: constexpr _Generic_error_category() noexcept : error_category(_Generic_addr) { } 
#line 539
[[nodiscard]] virtual const char *name() const noexcept override { 
#line 540
return "generic"; 
#line 541
} 
#line 543
[[nodiscard]] virtual string message(int _Errcode) const override { 
#line 544
return _Syserror_map(_Errcode); 
#line 545
} 
#line 546
}; 
#line 548
class _Iostream_error_category2 : public error_category { 
#line 550
public: constexpr _Iostream_error_category2() noexcept : error_category(_Iostream_addr) { } 
#line 552
[[nodiscard]] virtual const char *name() const noexcept override { 
#line 553
return "iostream"; 
#line 554
} 
#line 556
[[nodiscard]] virtual string message(int _Errcode) const override { 
#line 557
if (_Errcode == (static_cast< int>(io_errc::stream))) { 
#line 558
static constexpr char _Iostream_error[] = "iostream stream error"; 
#line 559
constexpr size_t _Iostream_error_length = (sizeof _Iostream_error - (1)); 
#line 560
return string{_Iostream_error, _Iostream_error_length}; 
#line 561
} else { 
#line 562
return _Syserror_map(_Errcode); 
#line 563
}  
#line 564
} 
#line 565
}; 
#line 567
class _System_error_category : public error_category { 
#line 569
public: constexpr _System_error_category() noexcept : error_category(_System_addr) { } 
#line 571
[[nodiscard]] virtual const char *name() const noexcept override { 
#line 572
return "system"; 
#line 573
} 
#line 575
[[nodiscard]] virtual string message(int _Errcode) const override { 
#line 576
const _System_error_message _Msg(static_cast< unsigned long>(_Errcode)); 
#line 577
if ((_Msg._Length) == (0)) { 
#line 578
static constexpr char _Unknown_error[] = "unknown error"; 
#line 579
constexpr size_t _Unknown_error_length = (sizeof _Unknown_error - (1)); 
#line 580
return string{_Unknown_error, _Unknown_error_length}; 
#line 581
} else { 
#line 582
; 
#line 583
return string{_Msg._Str, _Msg._Length}; 
#line 584
}  
#line 585
} 
#line 587
[[nodiscard]] virtual error_condition default_error_condition(int _Errval) const noexcept override { 
#line 588
if (_Errval == 0) { 
#line 589
return error_condition(0, ::std::generic_category()); 
#line 590
}  
#line 593
const int _Posv = _Winerror_map(_Errval); 
#line 594
if (_Posv == 0) { 
#line 595
return error_condition(_Errval, ::std::system_category()); 
#line 596
} else { 
#line 597
return error_condition(_Posv, ::std::generic_category()); 
#line 598
}  
#line 599
} 
#line 600
}; 
#line 651 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\system_error"
template < class _Ty >
struct _Constexpr_immortalize_impl {
    union {
        _Ty _Storage;
    };

    constexpr _Constexpr_immortalize_impl ( ) noexcept : _Storage { } { }

    _Constexpr_immortalize_impl ( const _Constexpr_immortalize_impl & ) = delete;
    _Constexpr_immortalize_impl & operator = ( const _Constexpr_immortalize_impl & ) = delete;

     ~ _Constexpr_immortalize_impl ( ) {

    }
};
#line 667
template < class _Ty >
[ [ nodiscard ] ] const _Ty & _Immortalize_memcpy_image ( ) noexcept {
    static _Constexpr_immortalize_impl < _Ty > _Static;
    return _Static . _Storage;
}
#line 693 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\system_error"
[[nodiscard]] inline const error_category &generic_category() noexcept { 
#line 694
return _Immortalize_memcpy_image< _Generic_error_category> (); 
#line 695
} 
#line 697
[[nodiscard]] inline const error_category &iostream_category() noexcept { 
#line 698
return _Immortalize_memcpy_image< _Iostream_error_category2> (); 
#line 699
} 
#line 701
[[nodiscard]] inline const error_category &system_category() noexcept { 
#line 702
return _Immortalize_memcpy_image< _System_error_category> (); 
#line 703
} 
#line 704
}
#line 731 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\system_error"
#pragma warning(pop)
#pragma pack ( pop )
#line 14 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\typeinfo"
#pragma pack ( push, 8 )
#pragma warning(push, 3)
#pragma warning(disable : 4180 4412 4455 4494 4514 4574 4582 4583 4587 4588 4619 4623 4625 4626 4643 4648 4702 4793 4820 4988 5026 5027 5045 6294 4984 5053 )
#line 21
#pragma warning(disable : 4275)
#line 15 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\vcruntime_typeinfo.h"
#pragma warning(push)
#pragma warning(disable: 4514 4820 )
#line 18
#pragma pack ( push, 8 )
#line 20
extern "C++" {
#line 27 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\vcruntime_typeinfo.h"
struct __type_info_node; 
#line 33 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\vcruntime_typeinfo.h"
extern __type_info_node __type_info_root_node; 
#line 36 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\vcruntime_typeinfo.h"
}
#line 39
__pragma( pack ( push, 8 )) extern "C" {
#line 41
struct __std_type_info_data { 
#line 43
const char *_UndecoratedName; 
#line 44
const char _DecoratedName[1]; 
#line 45
__std_type_info_data() = delete;
#line 46
__std_type_info_data(const __std_type_info_data &) = delete;
#line 47
__std_type_info_data(__std_type_info_data &&) = delete;
#line 49
__std_type_info_data &operator=(const __std_type_info_data &) = delete;
#line 50
__std_type_info_data &operator=(__std_type_info_data &&) = delete;
#line 51
}; 
#line 53
int __cdecl __std_type_info_compare(const __std_type_info_data * _Lhs, const __std_type_info_data * _Rhs); 
#line 58
size_t __cdecl __std_type_info_hash(const __std_type_info_data * _Data); 
#line 62
const char *__cdecl __std_type_info_name(__std_type_info_data * _Data, __type_info_node * _RootNode); 
#line 67
}__pragma( pack ( pop )) 
#line 70
#pragma warning(push)
#pragma warning(disable: 4577)
extern "C++" {
#line 73
class type_info { 
#line 77
public: type_info(const type_info &) = delete;
#line 78
type_info &operator=(const type_info &) = delete;
#line 80
[[nodiscard]] size_t hash_code() const noexcept 
#line 81
{ 
#line 82
return __std_type_info_hash(&(_Data)); 
#line 83
} 
#line 85
[[nodiscard]] bool 
#line 89 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\vcruntime_typeinfo.h"
operator==(const type_info &_Other) const noexcept 
#line 90
{ 
#line 98 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\vcruntime_typeinfo.h"
return __std_type_info_compare(&(_Data), &(_Other._Data)) == 0; 
#line 99
} 
#line 102
[[nodiscard]] bool operator!=(const type_info &_Other) const noexcept 
#line 103
{ 
#line 104
return __std_type_info_compare(&(_Data), &(_Other._Data)) != 0; 
#line 105
} 
#line 108 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\vcruntime_typeinfo.h"
[[nodiscard]] bool before(const type_info &_Other) const noexcept 
#line 109
{ 
#line 110
return __std_type_info_compare(&(_Data), &(_Other._Data)) < 0; 
#line 111
} 
#line 113
[[nodiscard]] const char *name() const noexcept 
#line 114
{ 
#line 118
return __std_type_info_name(&(_Data), &__type_info_root_node); 
#line 120 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\vcruntime_typeinfo.h"
} 
#line 122
[[nodiscard]] const char *raw_name() const noexcept 
#line 123
{ 
#line 124
return (_Data)._DecoratedName; 
#line 125
} 
#line 127
virtual ~type_info() noexcept; 
#line 131
private: mutable __std_type_info_data _Data; 
#line 132
}; 
#line 133
}
#pragma warning(pop)
#line 136
namespace std { 
#line 137
using ::type_info;
#line 138
}
#line 142
namespace std { 
#line 144
#pragma warning(push)
#pragma warning(disable: 4577)
class bad_cast : public exception { 
#line 151
public: bad_cast() noexcept : exception("bad cast", 1) 
#line 153
{ 
#line 154
} 
#line 156
static bad_cast __construct_from_string_literal(const char *const _Message) noexcept 
#line 157
{ 
#line 158
return bad_cast(_Message, 1); 
#line 159
} 
#line 163
private: bad_cast(const char *const _Message, int) noexcept : exception(_Message, 1) 
#line 165
{ 
#line 166
} 
#line 167
}; 
#line 169
class bad_typeid : public exception { 
#line 174
public: bad_typeid() noexcept : exception("bad typeid", 1) 
#line 176
{ 
#line 177
} 
#line 179
static bad_typeid __construct_from_string_literal(const char *const _Message) noexcept 
#line 180
{ 
#line 181
return bad_typeid(_Message, 1); 
#line 182
} 
#line 186
friend class __non_rtti_object; 
#line 188
private: bad_typeid(const char *const _Message, int) noexcept : exception(_Message, 1) 
#line 190
{ 
#line 191
} 
#line 192
}; 
#line 194
class __non_rtti_object : public bad_typeid { 
#line 199
public: static __non_rtti_object __construct_from_string_literal(const char *const _Message) noexcept 
#line 200
{ 
#line 201
return __non_rtti_object(_Message, 1); 
#line 202
} 
#line 206
private: __non_rtti_object(const char *const _Message, int) noexcept : bad_typeid(_Message, 1) 
#line 208
{ 
#line 209
} 
#line 210
}; 
#line 212
#pragma warning(pop)
}
#line 216 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\vcruntime_typeinfo.h"
#pragma pack ( pop )
#pragma warning(pop)
#line 25 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\typeinfo"
namespace std { 
#line 28
constexpr int _Small_object_num_ptrs = ((6) + ((16) / sizeof(void *))); 
#line 33
class bad_cast; 
#line 34
class bad_typeid; 
#line 66 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\typeinfo"
[[noreturn]] inline void _Throw_bad_cast() { 
#line 67
throw bad_cast{}; 
#line 68
} 
#line 70
}
#line 74
#pragma pack ( pop )
#pragma warning(pop)
#line 21 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\memory"
#pragma pack ( push, 8 )
#pragma warning(push, 3)
#pragma warning(disable : 4180 4412 4455 4494 4514 4574 4582 4583 4587 4588 4619 4623 4625 4626 4643 4648 4702 4793 4820 4988 5026 5027 5045 6294 4984 5053 )
#line 28
namespace std { 
#line 124 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\memory"
template < class _InIt, class _Diff, class _NoThrowFwdIt >
_NoThrowFwdIt uninitialized_copy_n ( const _InIt _First, const _Diff _Count_raw, _NoThrowFwdIt _Dest ) {

    _Algorithm_int_t < _Diff > _Count = _Count_raw;
    if ( _Count <= 0 ) {
        return _Dest;
    }

    auto _UFirst = _Get_unwrapped_n ( _First, _Count );
    auto _UDest = _Get_unwrapped_n ( _Dest, _Count );
    if constexpr ( _Iter_copy_cat < decltype ( _UFirst ), decltype ( _UDest ) > :: _Bitcopy_constructible ) {
        _UDest = _Copy_memmove_n ( _UFirst, static_cast < size_t > ( _Count ), _UDest );
    } else {
        _Uninitialized_backout < decltype ( _UDest ) > _Backout { _UDest };

        for (; _Count > 0; -- _Count, ( void ) ++ _UFirst ) {
            _Backout . _Emplace_back ( * _UFirst );
        }

        _UDest = _Backout . _Release ( );
    }

    _Seek_wrapped ( _Dest, _UDest );
    return _Dest;
}
#line 438 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\memory"
template < class _NoThrowFwdIt, class _Diff, class _Tval >
_NoThrowFwdIt uninitialized_fill_n ( _NoThrowFwdIt _First, const _Diff _Count_raw, const _Tval & _Val ) {

    _Algorithm_int_t < _Diff > _Count = _Count_raw;
    if ( _Count <= 0 ) {
        return _First;
    }

    auto _UFirst = _Get_unwrapped_n ( _First, _Count );
    if constexpr ( _Fill_memset_is_safe < decltype ( _UFirst ), _Tval > ) {
        _Fill_memset ( _UFirst, _Val, static_cast < size_t > ( _Count ) );
        _UFirst += _Count;
    } else {
        if constexpr ( _Fill_zero_memset_is_safe < decltype ( _UFirst ), _Tval > ) {
            if ( _Is_all_bits_zero ( _Val ) ) {
                _Fill_zero_memset ( _UFirst, static_cast < size_t > ( _Count ) );
                _Seek_wrapped ( _First, _UFirst + _Count );
                return _First;
            }
        }

        _Uninitialized_backout < decltype ( _UFirst ) > _Backout { _UFirst };

        for (; _Count > 0; -- _Count ) {
            _Backout . _Emplace_back ( _Val );
        }

        _UFirst = _Backout . _Release ( );
    }

    _Seek_wrapped ( _First, _UFirst );
    return _First;
}
#line 939 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\memory"
template < class _OutIt, class _Ty >
class raw_storage_iterator {
public :
    using iterator_category = output_iterator_tag;
    using value_type = void;



    using difference_type = void;

    using pointer = void;
    using reference = void;

    explicit raw_storage_iterator ( _OutIt _First ) : _Next ( _First ) { }

    [ [ nodiscard ] ] raw_storage_iterator & operator * ( ) {
        return * this;
    }

    raw_storage_iterator & operator = ( const _Ty & _Val ) {
        _Construct_in_place ( * _Next, _Val );
        return * this;
    }

    raw_storage_iterator & operator = ( _Ty && _Val ) {
        _Construct_in_place ( * _Next, :: std :: move ( _Val ) );
        return * this;
    }

    raw_storage_iterator & operator ++ ( ) {
        ++ _Next;
        return * this;
    }

    raw_storage_iterator operator ++ ( int ) {
        raw_storage_iterator _Ans = * this;
        ++ _Next;
        return _Ans;
    }

    [ [ nodiscard ] ] _OutIt base ( ) const {
        return _Next;
    }

private :
    _OutIt _Next;
};
#line 989 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\memory"
template < class _Ty >
class auto_ptr;
#line 992
template < class _Ty >
struct auto_ptr_ref {
    explicit auto_ptr_ref ( _Ty * _Right ) : _Ref ( _Right ) { }

    _Ty * _Ref;
};
#line 999
template < class _Ty >
class auto_ptr {
public :
    using element_type = _Ty;

    explicit auto_ptr ( _Ty * _Ptr = nullptr ) noexcept : _Myptr ( _Ptr ) { }

    auto_ptr ( auto_ptr & _Right ) noexcept : _Myptr ( _Right . release ( ) ) { }

    auto_ptr ( auto_ptr_ref < _Ty > _Right ) noexcept {
        _Ty * _Ptr = _Right . _Ref;
        _Right . _Ref = nullptr;
        _Myptr = _Ptr;
    }

    template < class _Other >
    operator auto_ptr < _Other > ( ) noexcept {
        return auto_ptr < _Other > ( * this );
    }

    template < class _Other >
    operator auto_ptr_ref < _Other > ( ) noexcept {
        _Other * _Cvtptr = _Myptr;
        auto_ptr_ref < _Other > _Ans ( _Cvtptr );
        _Myptr = nullptr;
        return _Ans;
    }

    template < class _Other >
    auto_ptr & operator = ( auto_ptr < _Other > & _Right ) noexcept {
        reset ( _Right . release ( ) );
        return * this;
    }

    template < class _Other >
    auto_ptr ( auto_ptr < _Other > & _Right ) noexcept : _Myptr ( _Right . release ( ) ) { }

    auto_ptr & operator = ( auto_ptr & _Right ) noexcept {
        reset ( _Right . release ( ) );
        return * this;
    }

    auto_ptr & operator = ( auto_ptr_ref < _Ty > _Right ) noexcept {
        _Ty * _Ptr = _Right . _Ref;
        _Right . _Ref = 0;
        reset ( _Ptr );
        return * this;
    }

    ~ auto_ptr ( ) noexcept {
        delete _Myptr;
    }

    [ [ nodiscard ] ] _Ty & operator * ( ) const noexcept {

        do { if ( _Myptr ) { } else { do { ( void ) ( ( 1 != _CrtDbgReport ( 2, "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\memory", 1054, 0, "%s", "auto_ptr not dereferenceable" ) ) || ( __debugbreak ( ), 0 ) ); :: _invalid_parameter ( L"\x22\x61\x75\x74\x6f\x5f\x70\x74\x72\x20\x6e\x6f\x74\x20\x64\x65\x72\x65\x66\x65\x72\x65\x6e\x63\x65\x61\x62\x6c\x65\x22", L"", L"\x45\x3a\x5c\x56\x69\x73\x75\x61\x6c\x53\x74\x75\x64\x69\x6f\x5c\x32\x30\x32\x32\x5c\x50\x72\x65\x76\x69\x65\x77\x5c\x56\x43\x5c" L"\x54\x6f\x6f\x6c\x73\x5c\x4d\x53\x56\x43\x5c\x31\x34\x2e\x33\x37\x2e\x33\x32\x37\x30\x35\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x6d" L"\x65\x6d\x6f\x72\x79", 1054, 0 ); } while ( false ); }; } while ( false );


        return * get ( );
    }

    [ [ nodiscard ] ] _Ty * operator -> ( ) const noexcept {

        do { if ( _Myptr ) { } else { do { ( void ) ( ( 1 != _CrtDbgReport ( 2, "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\memory", 1062, 0, "%s", "auto_ptr not dereferenceable" ) ) || ( __debugbreak ( ), 0 ) ); :: _invalid_parameter ( L"\x22\x61\x75\x74\x6f\x5f\x70\x74\x72\x20\x6e\x6f\x74\x20\x64\x65\x72\x65\x66\x65\x72\x65\x6e\x63\x65\x61\x62\x6c\x65\x22", L"", L"\x45\x3a\x5c\x56\x69\x73\x75\x61\x6c\x53\x74\x75\x64\x69\x6f\x5c\x32\x30\x32\x32\x5c\x50\x72\x65\x76\x69\x65\x77\x5c\x56\x43\x5c" L"\x54\x6f\x6f\x6c\x73\x5c\x4d\x53\x56\x43\x5c\x31\x34\x2e\x33\x37\x2e\x33\x32\x37\x30\x35\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x6d" L"\x65\x6d\x6f\x72\x79", 1062, 0 ); } while ( false ); }; } while ( false );


        return get ( );
    }

    [ [ nodiscard ] ] _Ty * get ( ) const noexcept {
        return _Myptr;
    }

    _Ty * release ( ) noexcept {
        _Ty * _Tmp = _Myptr;
        _Myptr = nullptr;
        return _Tmp;
    }

    void reset ( _Ty * _Ptr = nullptr ) noexcept {
        if ( _Ptr != _Myptr ) {
            delete _Myptr;
        }

        _Myptr = _Ptr;
    }

private :
    _Ty * _Myptr;
};
#line 1091 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\memory"
#pragma pack(8)
template<> 
#line 1091
class auto_ptr< void>  { 
#line 1093
public: using element_type = void; 
#line 1094
}; 
#pragma pack()
#line 1097 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\memory"
#pragma pack(8)
#line 1097
class bad_weak_ptr : public exception { 
#line 1099
public: bad_weak_ptr() noexcept { } 
#line 1101
[[nodiscard]] virtual const char *what() const noexcept override { 
#line 1103
return "bad_weak_ptr"; 
#line 1104
} 
#line 1105
}; 
#pragma pack()
[[noreturn]] inline void _Throw_bad_weak_ptr() { 
#line 1108
throw bad_weak_ptr{}; 
#line 1109
} 
#line 1111
#pragma pack(8)
#line 1111
class __declspec(novtable) _Ref_count_base { 
#line 1123
virtual void _Destroy() noexcept = 0; 
#line 1124
virtual void _Delete_this() noexcept = 0; 
#line 1127 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\memory"
_Atomic_counter_t _Uses = (1); 
#line 1128
_Atomic_counter_t _Weaks = (1); 
#line 1131
protected: constexpr _Ref_count_base() noexcept = default;
#line 1134
public: _Ref_count_base(const _Ref_count_base &) = delete;
#line 1135
_Ref_count_base &operator=(const _Ref_count_base &) = delete;
#line 1137
virtual ~_Ref_count_base() noexcept { } 
#line 1139
bool _Incref_nz() noexcept { 
#line 1140
auto &_Volatile_uses = reinterpret_cast< volatile long &>(_Uses); 
#line 1144
long _Count = __iso_volatile_load32(reinterpret_cast< volatile int *>(&_Volatile_uses)); 
#line 1146 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\memory"
while (_Count != (0)) { 
#line 1147
const long _Old_value = _InterlockedCompareExchange(&_Volatile_uses, _Count + (1), _Count); 
#line 1148
if (_Old_value == _Count) { 
#line 1149
return true; 
#line 1150
}  
#line 1152
_Count = _Old_value; 
#line 1153
}  
#line 1155
return false; 
#line 1156
} 
#line 1158
void _Incref() noexcept { 
#line 1159
_InterlockedIncrement(reinterpret_cast< volatile long *>(&(_Uses))); 
#line 1160
} 
#line 1162
void _Incwref() noexcept { 
#line 1163
_InterlockedIncrement(reinterpret_cast< volatile long *>(&(_Weaks))); 
#line 1164
} 
#line 1166
void _Decref() noexcept { 
#line 1167
if (_InterlockedDecrement(reinterpret_cast< volatile long *>(&(_Uses))) == (0)) { 
#line 1168
this->_Destroy(); 
#line 1169
this->_Decwref(); 
#line 1170
}  
#line 1171
} 
#line 1173
void _Decwref() noexcept { 
#line 1174
if (_InterlockedDecrement(reinterpret_cast< volatile long *>(&(_Weaks))) == (0)) { 
#line 1175
this->_Delete_this(); 
#line 1176
}  
#line 1177
} 
#line 1179
long _Use_count() const noexcept { 
#line 1180
return static_cast< long>(_Uses); 
#line 1181
} 
#line 1183
virtual void *_Get_deleter(const type_info &) const noexcept { 
#line 1184
return nullptr; 
#line 1185
} 
#line 1186
}; 
#pragma pack()
template < class _Ty >
class _Ref_count : public _Ref_count_base {
public :
    explicit _Ref_count ( _Ty * _Px ) : _Ref_count_base ( ), _Ptr ( _Px ) { }

private :
    void _Destroy ( ) noexcept override {
        delete _Ptr;
    }

    void _Delete_this ( ) noexcept override {
        delete this;
    }

    _Ty * _Ptr;
};
#line 1205
template < class _Resource, class _Dx >
class _Ref_count_resource : public _Ref_count_base {
public :
    _Ref_count_resource ( _Resource _Px, _Dx _Dt )
        : _Ref_count_base ( ), _Mypair ( _One_then_variadic_args_t { }, :: std :: move ( _Dt ), _Px ) { }




    ~ _Ref_count_resource ( ) noexcept override = default;


    void * _Get_deleter ( const type_info & _Typeid ) const noexcept override {

        if ( _Typeid == typeid ( _Dx ) ) {
            return const_cast < _Dx * > ( :: std :: addressof ( _Mypair . _Get_first ( ) ) );
        }




        return nullptr;
    }

private :
    void _Destroy ( ) noexcept override {
        _Mypair . _Get_first ( ) ( _Mypair . _Myval2 );
    }

    void _Delete_this ( ) noexcept override {
        delete this;
    }

    _Compressed_pair < _Dx, _Resource > _Mypair;
};
#line 1241 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\memory"
template < class _Resource, class _Dx, class _Alloc >
class _Ref_count_resource_alloc : public _Ref_count_base {

public :
    _Ref_count_resource_alloc ( _Resource _Px, _Dx _Dt, const _Alloc & _Ax )
        : _Ref_count_base ( ),
          _Mypair ( _One_then_variadic_args_t { }, :: std :: move ( _Dt ), _One_then_variadic_args_t { }, _Ax, _Px ) { }




    ~ _Ref_count_resource_alloc ( ) noexcept override = default;


    void * _Get_deleter ( const type_info & _Typeid ) const noexcept override {

        if ( _Typeid == typeid ( _Dx ) ) {
            return const_cast < _Dx * > ( :: std :: addressof ( _Mypair . _Get_first ( ) ) );
        }




        return nullptr;
    }

private :
    using _Myalty = _Rebind_alloc_t < _Alloc, _Ref_count_resource_alloc >;

    void _Destroy ( ) noexcept override {
        _Mypair . _Get_first ( ) ( _Mypair . _Myval2 . _Myval2 );
    }

    void _Delete_this ( ) noexcept override {
        _Myalty _Al = _Mypair . _Myval2 . _Get_first ( );
        this -> ~ _Ref_count_resource_alloc ( );
        _Deallocate_plain ( _Al, this );
    }

    _Compressed_pair < _Dx, _Compressed_pair < _Myalty, _Resource >> _Mypair;
};
#line 1283 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\memory"
template < class _Ty >
struct default_delete;
#line 1286
template < class _Ty, class _Dx = default_delete < _Ty > >
class unique_ptr;
#line 1289
template < class _Ty >
class shared_ptr;
#line 1292
template < class _Ty >
class weak_ptr;
#line 1295
template< class _Yty, class  = void> 
#line 1296
struct _Can_enable_shared : public false_type { }; 
#line 1298
template< class _Yty> 
#line 1299
struct _Can_enable_shared< _Yty, void_t< typename _Yty::_Esft_type> >  : public is_convertible< remove_cv_t< _Yty>  *, typename _Yty::_Esft_type *> ::type { 
#line 1302
}; 
#line 1304
struct _Exception_ptr_access; 
#line 1306
template < class _Ty >
class _Ptr_base {
public :
    using element_type = remove_extent_t < _Ty >;

    [ [ nodiscard ] ] long use_count ( ) const noexcept {
        return _Rep ? _Rep -> _Use_count ( ) : 0;
    }

    template < class _Ty2 >
    [ [ nodiscard ] ] bool owner_before ( const _Ptr_base < _Ty2 > & _Right ) const noexcept {
        return _Rep < _Right . _Rep;
    }

    _Ptr_base ( const _Ptr_base & ) = delete;
    _Ptr_base & operator = ( const _Ptr_base & ) = delete;

protected :
    [ [ nodiscard ] ] element_type * get ( ) const noexcept {
        return _Ptr;
    }

    constexpr _Ptr_base ( ) noexcept = default;

    ~ _Ptr_base ( ) = default;

    template < class _Ty2 >
    void _Move_construct_from ( _Ptr_base < _Ty2 > && _Right ) noexcept {

        _Ptr = _Right . _Ptr;
        _Rep = _Right . _Rep;

        _Right . _Ptr = nullptr;
        _Right . _Rep = nullptr;
    }

    template < class _Ty2 >
    void _Copy_construct_from ( const shared_ptr < _Ty2 > & _Other ) noexcept {

        _Other . _Incref ( );

        _Ptr = _Other . _Ptr;
        _Rep = _Other . _Rep;
    }

    template < class _Ty2 >
    void _Alias_construct_from ( const shared_ptr < _Ty2 > & _Other, element_type * _Px ) noexcept {

        _Other . _Incref ( );

        _Ptr = _Px;
        _Rep = _Other . _Rep;
    }

    template < class _Ty2 >
    void _Alias_move_construct_from ( shared_ptr < _Ty2 > && _Other, element_type * _Px ) noexcept {

        _Ptr = _Px;
        _Rep = _Other . _Rep;

        _Other . _Ptr = nullptr;
        _Other . _Rep = nullptr;
    }

    template < class _Ty0 >
    friend class weak_ptr;

    template < class _Ty2 >
    bool _Construct_from_weak ( const weak_ptr < _Ty2 > & _Other ) noexcept {

        if ( _Other . _Rep && _Other . _Rep -> _Incref_nz ( ) ) {
            _Ptr = _Other . _Ptr;
            _Rep = _Other . _Rep;
            return true;
        }

        return false;
    }

    void _Incref ( ) const noexcept {
        if ( _Rep ) {
            _Rep -> _Incref ( );
        }
    }

    void _Decref ( ) noexcept {
        if ( _Rep ) {
            _Rep -> _Decref ( );
        }
    }

    void _Swap ( _Ptr_base & _Right ) noexcept {
        :: std :: swap ( _Ptr, _Right . _Ptr );
        :: std :: swap ( _Rep, _Right . _Rep );
    }

    template < class _Ty2 >
    void _Weakly_construct_from ( const _Ptr_base < _Ty2 > & _Other ) noexcept {
        if ( _Other . _Rep ) {
            _Ptr = _Other . _Ptr;
            _Rep = _Other . _Rep;
            _Rep -> _Incwref ( );
        } else {
            ;
        }
    }

    template < class _Ty2 >
    void _Weakly_convert_lvalue_avoiding_expired_conversions ( const _Ptr_base < _Ty2 > & _Other ) noexcept {

        if ( _Other . _Rep ) {
            _Rep = _Other . _Rep;
            _Rep -> _Incwref ( );

            if ( _Rep -> _Incref_nz ( ) ) {
                _Ptr = _Other . _Ptr;
                _Rep -> _Decref ( );
            } else {
                ;
            }
        } else {
            ;
        }
    }

    template < class _Ty2 >
    void _Weakly_convert_rvalue_avoiding_expired_conversions ( _Ptr_base < _Ty2 > && _Other ) noexcept {

        _Rep = _Other . _Rep;
        _Other . _Rep = nullptr;

        if ( _Rep && _Rep -> _Incref_nz ( ) ) {
            _Ptr = _Other . _Ptr;
            _Rep -> _Decref ( );
        } else {
            ;
        }

        _Other . _Ptr = nullptr;
    }

    void _Incwref ( ) const noexcept {
        if ( _Rep ) {
            _Rep -> _Incwref ( );
        }
    }

    void _Decwref ( ) noexcept {
        if ( _Rep ) {
            _Rep -> _Decwref ( );
        }
    }

private :
    element_type * _Ptr { nullptr };
    _Ref_count_base * _Rep { nullptr };

    template < class _Ty0 >
    friend class _Ptr_base;

    friend shared_ptr < _Ty >;

    template < class _Ty0 >
    friend struct atomic;

    friend _Exception_ptr_access;


    template < class _Dx, class _Ty0 >
    friend _Dx * get_deleter ( const shared_ptr < _Ty0 > & _Sx ) noexcept;

};
#line 1479 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\memory"
template< class _Yty, class  = void> 
#line 1480
struct _Can_scalar_delete : public false_type { }; 
#line 1481
template< class _Yty> 
#line 1482
struct _Can_scalar_delete< _Yty, void_t< decltype(delete std::declval< _Yty *> ())> >  : public true_type { }; 
#line 1484
template< class _Yty, class  = void> 
#line 1485
struct _Can_array_delete : public false_type { }; 
#line 1486
template< class _Yty> 
#line 1487
struct _Can_array_delete< _Yty, void_t< decltype(delete [] std::declval< _Yty *> ())> >  : public true_type { }; 
#line 1489
template< class _Fx, class _Arg, class  = void> 
#line 1490
struct _Can_call_function_object : public false_type { }; 
#line 1491
template< class _Fx, class _Arg> 
#line 1492
struct _Can_call_function_object< _Fx, _Arg, void_t< decltype(std::declval< _Fx> ()(std::declval< _Arg> ()))> >  : public true_type { }; 
#line 1494
template< class _Yty, class _Ty> 
#line 1495
struct _SP_convertible : public is_convertible< _Yty *, _Ty *> ::type { }; 
#line 1496
template< class _Yty, class _Uty> 
#line 1497
struct _SP_convertible< _Yty, _Uty []>  : public is_convertible< _Yty (*)[], _Uty (*)[]> ::type { }; 
#line 1498
template< class _Yty, class _Uty, size_t _Ext> 
#line 1499
struct _SP_convertible< _Yty, _Uty [_Ext]>  : public is_convertible< _Yty (*)[_Ext], _Uty (*)[_Ext]> ::type { }; 
#line 1501
template< class _Yty, class _Ty> 
#line 1502
struct _SP_pointer_compatible : public is_convertible< _Yty *, _Ty *> ::type { 
#line 1505
}; 
#line 1506
template< class _Uty, size_t _Ext> 
#line 1507
struct _SP_pointer_compatible< _Uty [_Ext], _Uty []>  : public true_type { 
#line 1509
}; 
#line 1510
template< class _Uty, size_t _Ext> 
#line 1511
struct _SP_pointer_compatible< _Uty [_Ext], const _Uty []>  : public true_type { 
#line 1513
}; 
#line 1514
template< class _Uty, size_t _Ext> 
#line 1515
struct _SP_pointer_compatible< _Uty [_Ext], volatile _Uty []>  : public true_type { 
#line 1517
}; 
#line 1518
template< class _Uty, size_t _Ext> 
#line 1519
struct _SP_pointer_compatible< _Uty [_Ext], const volatile _Uty []>  : public true_type { 
#line 1521
}; 
#line 1523
template < class _Ux >
struct _Temporary_owner {
    _Ux * _Ptr;

    explicit _Temporary_owner ( _Ux * const _Ptr_ ) noexcept : _Ptr ( _Ptr_ ) { }
    _Temporary_owner ( const _Temporary_owner & ) = delete;
    _Temporary_owner & operator = ( const _Temporary_owner & ) = delete;
    ~ _Temporary_owner ( ) {
        delete _Ptr;
    }
};
#line 1535
template < class _UxptrOrNullptr, class _Dx >
struct _Temporary_owner_del {
    _UxptrOrNullptr _Ptr;
    _Dx & _Dt;
    bool _Call_deleter = true;

    explicit _Temporary_owner_del ( const _UxptrOrNullptr _Ptr_, _Dx & _Dt_ ) noexcept : _Ptr ( _Ptr_ ), _Dt ( _Dt_ ) { }
    _Temporary_owner_del ( const _Temporary_owner_del & ) = delete;
    _Temporary_owner_del & operator = ( const _Temporary_owner_del & ) = delete;
    ~ _Temporary_owner_del ( ) {
        if ( _Call_deleter ) {
            _Dt ( _Ptr );
        }
    }
};
#line 1551
template < class _Ty >
class shared_ptr : public _Ptr_base < _Ty > {
private :
    using _Mybase = _Ptr_base < _Ty >;

public :
    using typename _Mybase :: element_type;





    constexpr shared_ptr ( ) noexcept = default;

    constexpr shared_ptr ( nullptr_t ) noexcept { }

    template < class _Ux,
        enable_if_t < conjunction_v < conditional_t < is_array_v < _Ty >, _Can_array_delete < _Ux >, _Can_scalar_delete < _Ux >>,
                        _SP_convertible < _Ux, _Ty >>,
            int > = 0 >
    explicit shared_ptr ( _Ux * _Px ) {
        if constexpr ( is_array_v < _Ty > ) {
            _Setpd ( _Px, default_delete < _Ux [ ] > { } );
        } else {
            _Temporary_owner < _Ux > _Owner ( _Px );
            _Set_ptr_rep_and_enable_shared ( _Owner . _Ptr, new _Ref_count < _Ux > ( _Owner . _Ptr ) );
            _Owner . _Ptr = nullptr;
        }
    }

    template < class _Ux, class _Dx,
        enable_if_t < conjunction_v < is_move_constructible < _Dx >, _Can_call_function_object < _Dx &, _Ux * & >,
                        _SP_convertible < _Ux, _Ty >>,
            int > = 0 >
    shared_ptr ( _Ux * _Px, _Dx _Dt ) {
        _Setpd ( _Px, :: std :: move ( _Dt ) );
    }

    template < class _Ux, class _Dx, class _Alloc,
        enable_if_t < conjunction_v < is_move_constructible < _Dx >, _Can_call_function_object < _Dx &, _Ux * & >,
                        _SP_convertible < _Ux, _Ty >>,
            int > = 0 >
    shared_ptr ( _Ux * _Px, _Dx _Dt, _Alloc _Ax ) {
        _Setpda ( _Px, :: std :: move ( _Dt ), _Ax );
    }

    template < class _Dx,
        enable_if_t < conjunction_v < is_move_constructible < _Dx >, _Can_call_function_object < _Dx &, nullptr_t & >>, int > = 0 >
    shared_ptr ( nullptr_t, _Dx _Dt ) {
        _Setpd ( nullptr, :: std :: move ( _Dt ) );
    }

    template < class _Dx, class _Alloc,
        enable_if_t < conjunction_v < is_move_constructible < _Dx >, _Can_call_function_object < _Dx &, nullptr_t & >>, int > = 0 >
    shared_ptr ( nullptr_t, _Dx _Dt, _Alloc _Ax ) {
        _Setpda ( nullptr, :: std :: move ( _Dt ), _Ax );
    }

    template < class _Ty2 >
    shared_ptr ( const shared_ptr < _Ty2 > & _Right, element_type * _Px ) noexcept {

        this -> _Alias_construct_from ( _Right, _Px );
    }

    template < class _Ty2 >
    shared_ptr ( shared_ptr < _Ty2 > && _Right, element_type * _Px ) noexcept {

        this -> _Alias_move_construct_from ( :: std :: move ( _Right ), _Px );
    }

    shared_ptr ( const shared_ptr & _Other ) noexcept {
        this -> _Copy_construct_from ( _Other );
    }

    template < class _Ty2, enable_if_t < _SP_pointer_compatible < _Ty2, _Ty > :: value, int > = 0 >
    shared_ptr ( const shared_ptr < _Ty2 > & _Other ) noexcept {

        this -> _Copy_construct_from ( _Other );
    }

    shared_ptr ( shared_ptr && _Right ) noexcept {
        this -> _Move_construct_from ( :: std :: move ( _Right ) );
    }

    template < class _Ty2, enable_if_t < _SP_pointer_compatible < _Ty2, _Ty > :: value, int > = 0 >
    shared_ptr ( shared_ptr < _Ty2 > && _Right ) noexcept {
        this -> _Move_construct_from ( :: std :: move ( _Right ) );
    }

    template < class _Ty2, enable_if_t < _SP_pointer_compatible < _Ty2, _Ty > :: value, int > = 0 >
    explicit shared_ptr ( const weak_ptr < _Ty2 > & _Other ) {
        if ( ! this -> _Construct_from_weak ( _Other ) ) {
            _Throw_bad_weak_ptr ( );
        }
    }


    template < class _Ty2, enable_if_t < is_convertible_v < _Ty2 *, _Ty * >, int > = 0 >
    shared_ptr ( auto_ptr < _Ty2 > && _Other ) {
        _Ty2 * _Px = _Other . get ( );
        _Set_ptr_rep_and_enable_shared ( _Px, new _Ref_count < _Ty2 > ( _Px ) );
        _Other . release ( );
    }


    template < class _Ux, class _Dx,
        enable_if_t < conjunction_v < _SP_pointer_compatible < _Ux, _Ty >,
                        is_convertible < typename unique_ptr < _Ux, _Dx > :: pointer, element_type * >>,
            int > = 0 >
    shared_ptr ( unique_ptr < _Ux, _Dx > && _Other ) {
        using _Fancy_t = typename unique_ptr < _Ux, _Dx > :: pointer;
        using _Raw_t = typename unique_ptr < _Ux, _Dx > :: element_type *;
        using _Deleter_t = conditional_t < is_reference_v < _Dx >, decltype ( :: std :: ref ( _Other . get_deleter ( ) ) ), _Dx >;

        const _Fancy_t _Fancy = _Other . get ( );

        if ( _Fancy ) {
            const _Raw_t _Raw = _Fancy;
            const auto _Rx =
                new _Ref_count_resource < _Fancy_t, _Deleter_t > ( _Fancy, :: std :: forward < _Dx > ( _Other . get_deleter ( ) ) );
            _Set_ptr_rep_and_enable_shared ( _Raw, _Rx );
            _Other . release ( );
        }
    }

    ~ shared_ptr ( ) noexcept {
        this -> _Decref ( );
    }

    shared_ptr & operator = ( const shared_ptr & _Right ) noexcept {
        shared_ptr ( _Right ) . swap ( * this );
        return * this;
    }

    template < class _Ty2, enable_if_t < _SP_pointer_compatible < _Ty2, _Ty > :: value, int > = 0 >
    shared_ptr & operator = ( const shared_ptr < _Ty2 > & _Right ) noexcept {
        shared_ptr ( _Right ) . swap ( * this );
        return * this;
    }

    shared_ptr & operator = ( shared_ptr && _Right ) noexcept {
        shared_ptr ( :: std :: move ( _Right ) ) . swap ( * this );
        return * this;
    }

    template < class _Ty2, enable_if_t < _SP_pointer_compatible < _Ty2, _Ty > :: value, int > = 0 >
    shared_ptr & operator = ( shared_ptr < _Ty2 > && _Right ) noexcept {
        shared_ptr ( :: std :: move ( _Right ) ) . swap ( * this );
        return * this;
    }


    template < class _Ty2, enable_if_t < is_convertible_v < _Ty2 *, _Ty * >, int > = 0 >
    shared_ptr & operator = ( auto_ptr < _Ty2 > && _Right ) {
        shared_ptr ( :: std :: move ( _Right ) ) . swap ( * this );
        return * this;
    }


    template < class _Ux, class _Dx,
        enable_if_t < conjunction_v < _SP_pointer_compatible < _Ux, _Ty >,
                        is_convertible < typename unique_ptr < _Ux, _Dx > :: pointer, element_type * >>,
            int > = 0 >
    shared_ptr & operator = ( unique_ptr < _Ux, _Dx > && _Right ) {
        shared_ptr ( :: std :: move ( _Right ) ) . swap ( * this );
        return * this;
    }

    void swap ( shared_ptr & _Other ) noexcept {
        this -> _Swap ( _Other );
    }

    void reset ( ) noexcept {
        shared_ptr ( ) . swap ( * this );
    }

    template < class _Ux,
        enable_if_t < conjunction_v < conditional_t < is_array_v < _Ty >, _Can_array_delete < _Ux >, _Can_scalar_delete < _Ux >>,
                        _SP_convertible < _Ux, _Ty >>,
            int > = 0 >
    void reset ( _Ux * _Px ) {
        shared_ptr ( _Px ) . swap ( * this );
    }

    template < class _Ux, class _Dx,
        enable_if_t < conjunction_v < is_move_constructible < _Dx >, _Can_call_function_object < _Dx &, _Ux * & >,
                        _SP_convertible < _Ux, _Ty >>,
            int > = 0 >
    void reset ( _Ux * _Px, _Dx _Dt ) {
        shared_ptr ( _Px, _Dt ) . swap ( * this );
    }

    template < class _Ux, class _Dx, class _Alloc,
        enable_if_t < conjunction_v < is_move_constructible < _Dx >, _Can_call_function_object < _Dx &, _Ux * & >,
                        _SP_convertible < _Ux, _Ty >>,
            int > = 0 >
    void reset ( _Ux * _Px, _Dx _Dt, _Alloc _Ax ) {
        shared_ptr ( _Px, _Dt, _Ax ) . swap ( * this );
    }

    using _Mybase :: get;

    template < class _Ty2 = _Ty, enable_if_t < ! disjunction_v < is_array < _Ty2 >, is_void < _Ty2 >>, int > = 0 >
    [ [ nodiscard ] ] _Ty2 & operator * ( ) const noexcept {
        return * get ( );
    }

    template < class _Ty2 = _Ty, enable_if_t < ! is_array_v < _Ty2 >, int > = 0 >
    [ [ nodiscard ] ] _Ty2 * operator -> ( ) const noexcept {
        return get ( );
    }

    template < class _Ty2 = _Ty, class _Elem = element_type, enable_if_t < is_array_v < _Ty2 >, int > = 0 >
    [ [ nodiscard ] ] _Elem & operator [ ] ( ptrdiff_t _Idx ) const noexcept {
        return get ( ) [ _Idx ];
    }


     [ [ nodiscard ] ] bool unique ( ) const noexcept {

        return this -> use_count ( ) == 1;
    }


    explicit operator bool ( ) const noexcept {
        return get ( ) != nullptr;
    }

private :
    template < class _UxptrOrNullptr, class _Dx >
    void _Setpd ( const _UxptrOrNullptr _Px, _Dx _Dt ) {
        _Temporary_owner_del < _UxptrOrNullptr, _Dx > _Owner ( _Px, _Dt );
        _Set_ptr_rep_and_enable_shared (
            _Owner . _Ptr, new _Ref_count_resource < _UxptrOrNullptr, _Dx > ( _Owner . _Ptr, :: std :: move ( _Dt ) ) );
        _Owner . _Call_deleter = false;
    }

    template < class _UxptrOrNullptr, class _Dx, class _Alloc >
    void _Setpda ( const _UxptrOrNullptr _Px, _Dx _Dt, _Alloc _Ax ) {
        using _Alref_alloc = _Rebind_alloc_t < _Alloc, _Ref_count_resource_alloc < _UxptrOrNullptr, _Dx, _Alloc >>;

        _Temporary_owner_del < _UxptrOrNullptr, _Dx > _Owner ( _Px, _Dt );
        _Alref_alloc _Alref ( _Ax );
        _Alloc_construct_ptr < _Alref_alloc > _Constructor ( _Alref );
        _Constructor . _Allocate ( );
        _Construct_in_place ( * _Constructor . _Ptr, _Owner . _Ptr, :: std :: move ( _Dt ), _Ax );
        _Set_ptr_rep_and_enable_shared ( _Owner . _Ptr, _Unfancy ( _Constructor . _Ptr ) );
        _Constructor . _Ptr = nullptr;
        _Owner . _Call_deleter = false;
    }



































    template < class _Ty0, class ... _Types >
    friend shared_ptr < _Ty0 > make_shared ( _Types && ... _Args );

    template < class _Ty0, class _Alloc, class ... _Types >
    friend shared_ptr < _Ty0 > allocate_shared ( const _Alloc & _Al_arg, _Types && ... _Args );


    template < class _Ux >
    void _Set_ptr_rep_and_enable_shared ( _Ux * const _Px, _Ref_count_base * const _Rx ) noexcept {
        this -> _Ptr = _Px;
        this -> _Rep = _Rx;
        if constexpr ( conjunction_v < negation < is_array < _Ty >>, negation < is_volatile < _Ux >>, _Can_enable_shared < _Ux >> ) {
            if ( _Px && _Px -> _Wptr . expired ( ) ) {
                _Px -> _Wptr = shared_ptr < remove_cv_t < _Ux >> ( * this, const_cast < remove_cv_t < _Ux > * > ( _Px ) );
            }
        }
    }

    void _Set_ptr_rep_and_enable_shared ( nullptr_t, _Ref_count_base * const _Rx ) noexcept {
        this -> _Ptr = nullptr;
        this -> _Rep = _Rx;
    }
};
#line 1868 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\memory"
template < class _Ty1, class _Ty2 >
[ [ nodiscard ] ] bool operator == ( const shared_ptr < _Ty1 > & _Left, const shared_ptr < _Ty2 > & _Right ) noexcept {
    return _Left . get ( ) == _Right . get ( );
}
#line 1879 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\memory"
template < class _Ty1, class _Ty2 >
[ [ nodiscard ] ] bool operator != ( const shared_ptr < _Ty1 > & _Left, const shared_ptr < _Ty2 > & _Right ) noexcept {
    return _Left . get ( ) != _Right . get ( );
}
#line 1884
template < class _Ty1, class _Ty2 >
[ [ nodiscard ] ] bool operator < ( const shared_ptr < _Ty1 > & _Left, const shared_ptr < _Ty2 > & _Right ) noexcept {
    return _Left . get ( ) < _Right . get ( );
}
#line 1889
template < class _Ty1, class _Ty2 >
[ [ nodiscard ] ] bool operator >= ( const shared_ptr < _Ty1 > & _Left, const shared_ptr < _Ty2 > & _Right ) noexcept {
    return _Left . get ( ) >= _Right . get ( );
}
#line 1894
template < class _Ty1, class _Ty2 >
[ [ nodiscard ] ] bool operator > ( const shared_ptr < _Ty1 > & _Left, const shared_ptr < _Ty2 > & _Right ) noexcept {
    return _Left . get ( ) > _Right . get ( );
}
#line 1899
template < class _Ty1, class _Ty2 >
[ [ nodiscard ] ] bool operator <= ( const shared_ptr < _Ty1 > & _Left, const shared_ptr < _Ty2 > & _Right ) noexcept {
    return _Left . get ( ) <= _Right . get ( );
}
#line 1905 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\memory"
template < class _Ty >
[ [ nodiscard ] ] bool operator == ( const shared_ptr < _Ty > & _Left, nullptr_t ) noexcept {
    return _Left . get ( ) == nullptr;
}
#line 1916 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\memory"
template < class _Ty >
[ [ nodiscard ] ] bool operator == ( nullptr_t, const shared_ptr < _Ty > & _Right ) noexcept {
    return nullptr == _Right . get ( );
}
#line 1921
template < class _Ty >
[ [ nodiscard ] ] bool operator != ( const shared_ptr < _Ty > & _Left, nullptr_t ) noexcept {
    return _Left . get ( ) != nullptr;
}
#line 1926
template < class _Ty >
[ [ nodiscard ] ] bool operator != ( nullptr_t, const shared_ptr < _Ty > & _Right ) noexcept {
    return nullptr != _Right . get ( );
}
#line 1931
template < class _Ty >
[ [ nodiscard ] ] bool operator < ( const shared_ptr < _Ty > & _Left, nullptr_t ) noexcept {
    return _Left . get ( ) < static_cast < typename shared_ptr < _Ty > :: element_type * > ( nullptr );
}
#line 1936
template < class _Ty >
[ [ nodiscard ] ] bool operator < ( nullptr_t, const shared_ptr < _Ty > & _Right ) noexcept {
    return static_cast < typename shared_ptr < _Ty > :: element_type * > ( nullptr ) < _Right . get ( );
}
#line 1941
template < class _Ty >
[ [ nodiscard ] ] bool operator >= ( const shared_ptr < _Ty > & _Left, nullptr_t ) noexcept {
    return _Left . get ( ) >= static_cast < typename shared_ptr < _Ty > :: element_type * > ( nullptr );
}
#line 1946
template < class _Ty >
[ [ nodiscard ] ] bool operator >= ( nullptr_t, const shared_ptr < _Ty > & _Right ) noexcept {
    return static_cast < typename shared_ptr < _Ty > :: element_type * > ( nullptr ) >= _Right . get ( );
}
#line 1951
template < class _Ty >
[ [ nodiscard ] ] bool operator > ( const shared_ptr < _Ty > & _Left, nullptr_t ) noexcept {
    return _Left . get ( ) > static_cast < typename shared_ptr < _Ty > :: element_type * > ( nullptr );
}
#line 1956
template < class _Ty >
[ [ nodiscard ] ] bool operator > ( nullptr_t, const shared_ptr < _Ty > & _Right ) noexcept {
    return static_cast < typename shared_ptr < _Ty > :: element_type * > ( nullptr ) > _Right . get ( );
}
#line 1961
template < class _Ty >
[ [ nodiscard ] ] bool operator <= ( const shared_ptr < _Ty > & _Left, nullptr_t ) noexcept {
    return _Left . get ( ) <= static_cast < typename shared_ptr < _Ty > :: element_type * > ( nullptr );
}
#line 1966
template < class _Ty >
[ [ nodiscard ] ] bool operator <= ( nullptr_t, const shared_ptr < _Ty > & _Right ) noexcept {
    return static_cast < typename shared_ptr < _Ty > :: element_type * > ( nullptr ) <= _Right . get ( );
}
#line 1972 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\memory"
template < class _Elem, class _Traits, class _Ty >
basic_ostream < _Elem, _Traits > & operator << ( basic_ostream < _Elem, _Traits > & _Out, const shared_ptr < _Ty > & _Px ) {

    return _Out << _Px . get ( );
}
#line 1978
template < class _Ty >
void swap ( shared_ptr < _Ty > & _Left, shared_ptr < _Ty > & _Right ) noexcept {
    _Left . swap ( _Right );
}
#line 1983
template < class _Ty1, class _Ty2 >
[ [ nodiscard ] ] shared_ptr < _Ty1 > static_pointer_cast ( const shared_ptr < _Ty2 > & _Other ) noexcept {

    const auto _Ptr = static_cast < typename shared_ptr < _Ty1 > :: element_type * > ( _Other . get ( ) );
    return shared_ptr < _Ty1 > ( _Other, _Ptr );
}
#line 1990
template < class _Ty1, class _Ty2 >
[ [ nodiscard ] ] shared_ptr < _Ty1 > static_pointer_cast ( shared_ptr < _Ty2 > && _Other ) noexcept {

    const auto _Ptr = static_cast < typename shared_ptr < _Ty1 > :: element_type * > ( _Other . get ( ) );
    return shared_ptr < _Ty1 > ( :: std :: move ( _Other ), _Ptr );
}
#line 1997
template < class _Ty1, class _Ty2 >
[ [ nodiscard ] ] shared_ptr < _Ty1 > const_pointer_cast ( const shared_ptr < _Ty2 > & _Other ) noexcept {

    const auto _Ptr = const_cast < typename shared_ptr < _Ty1 > :: element_type * > ( _Other . get ( ) );
    return shared_ptr < _Ty1 > ( _Other, _Ptr );
}
#line 2004
template < class _Ty1, class _Ty2 >
[ [ nodiscard ] ] shared_ptr < _Ty1 > const_pointer_cast ( shared_ptr < _Ty2 > && _Other ) noexcept {

    const auto _Ptr = const_cast < typename shared_ptr < _Ty1 > :: element_type * > ( _Other . get ( ) );
    return shared_ptr < _Ty1 > ( :: std :: move ( _Other ), _Ptr );
}
#line 2011
template < class _Ty1, class _Ty2 >
[ [ nodiscard ] ] shared_ptr < _Ty1 > reinterpret_pointer_cast ( const shared_ptr < _Ty2 > & _Other ) noexcept {

    const auto _Ptr = reinterpret_cast < typename shared_ptr < _Ty1 > :: element_type * > ( _Other . get ( ) );
    return shared_ptr < _Ty1 > ( _Other, _Ptr );
}
#line 2018
template < class _Ty1, class _Ty2 >
[ [ nodiscard ] ] shared_ptr < _Ty1 > reinterpret_pointer_cast ( shared_ptr < _Ty2 > && _Other ) noexcept {

    const auto _Ptr = reinterpret_cast < typename shared_ptr < _Ty1 > :: element_type * > ( _Other . get ( ) );
    return shared_ptr < _Ty1 > ( :: std :: move ( _Other ), _Ptr );
}
#line 2026
template < class _Ty1, class _Ty2 >
[ [ nodiscard ] ] shared_ptr < _Ty1 > dynamic_pointer_cast ( const shared_ptr < _Ty2 > & _Other ) noexcept {

    const auto _Ptr = dynamic_cast < typename shared_ptr < _Ty1 > :: element_type * > ( _Other . get ( ) );

    if ( _Ptr ) {
        return shared_ptr < _Ty1 > ( _Other, _Ptr );
    }

    return { };
}
#line 2038
template < class _Ty1, class _Ty2 >
[ [ nodiscard ] ] shared_ptr < _Ty1 > dynamic_pointer_cast ( shared_ptr < _Ty2 > && _Other ) noexcept {

    const auto _Ptr = dynamic_cast < typename shared_ptr < _Ty1 > :: element_type * > ( _Other . get ( ) );

    if ( _Ptr ) {
        return shared_ptr < _Ty1 > ( :: std :: move ( _Other ), _Ptr );
    }

    return { };
}
#line 2057 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\memory"
template < class _Dx, class _Ty >
[ [ nodiscard ] ] _Dx * get_deleter ( const shared_ptr < _Ty > & _Sx ) noexcept {

    if ( _Sx . _Rep ) {
        return static_cast < _Dx * > ( _Sx . _Rep -> _Get_deleter ( typeid ( _Dx ) ) );
    }

    return nullptr;
}
#line 2077 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\memory"
template < class _Ty >
class _Ref_count_obj2 : public _Ref_count_base {
public :
    template < class ... _Types >
    explicit _Ref_count_obj2 ( _Types && ... _Args ) : _Ref_count_base ( ) {






        {
            _Construct_in_place ( _Storage . _Value, :: std :: forward < _Types > ( _Args ) ... );
        }
    }

    ~ _Ref_count_obj2 ( ) noexcept override {





    }

    union {
        _Wrap < _Ty > _Storage;
    };

private :
    void _Destroy ( ) noexcept override {
        _Destroy_in_place ( _Storage . _Value );
    }

    void _Delete_this ( ) noexcept override {
        delete this;
    }
};
#line 2458 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\memory"
template < class _Ty, class _Alloc >
class _Ref_count_obj_alloc3 : public _Ebco_base < _Rebind_alloc_t < _Alloc, _Ty > >, public _Ref_count_base {

private :
    static_assert ( is_same_v < _Ty, remove_cv_t < _Ty >>, "allocate_shared should remove_cv_t" );

    using _Rebound = _Rebind_alloc_t < _Alloc, _Ty >;

public :
    template < class ... _Types >
    explicit _Ref_count_obj_alloc3 ( const _Alloc & _Al_arg, _Types && ... _Args )
        : _Ebco_base < _Rebound > ( _Al_arg ), _Ref_count_base ( ) {






        {
            allocator_traits < _Rebound > :: construct (
                this -> _Get_val ( ), :: std :: addressof ( _Storage . _Value ), :: std :: forward < _Types > ( _Args ) ... );
        }
    }

    union {
        _Wrap < _Ty > _Storage;
    };

private :
    ~ _Ref_count_obj_alloc3 ( ) noexcept override {



    }

    void _Destroy ( ) noexcept override {
        allocator_traits < _Rebound > :: destroy ( this -> _Get_val ( ), :: std :: addressof ( _Storage . _Value ) );
    }

    void _Delete_this ( ) noexcept override {
        _Rebind_alloc_t < _Alloc, _Ref_count_obj_alloc3 > _Al ( this -> _Get_val ( ) );
        this -> ~ _Ref_count_obj_alloc3 ( );
        _Deallocate_plain ( _Al, this );
    }
};
#line 2754 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\memory"
template < class _Ty, class ... _Types >
[ [ nodiscard ( "This function constructs an object wrapped by a smart pointer and has no other effects; it is not useful to call this function a" "nd discard the return value." ) ] ]



    shared_ptr < _Ty >

    make_shared ( _Types && ... _Args ) {
    const auto _Rx = new _Ref_count_obj2 < _Ty > ( :: std :: forward < _Types > ( _Args ) ... );
    shared_ptr < _Ty > _Ret;
    _Ret . _Set_ptr_rep_and_enable_shared ( :: std :: addressof ( _Rx -> _Storage . _Value ), _Rx );
    return _Ret;
}
#line 2849 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\memory"
template < class _Ty, class _Alloc, class ... _Types >
[ [ nodiscard ( "This function constructs an object wrapped by a smart pointer and has no other effects; it is not useful to call this function a" "nd discard the return value." ) ] ]



    shared_ptr < _Ty >

    allocate_shared ( const _Alloc & _Al, _Types && ... _Args ) {


    using _Refoa = _Ref_count_obj_alloc3 < remove_cv_t < _Ty >, _Alloc >;
    using _Alblock = _Rebind_alloc_t < _Alloc, _Refoa >;
    _Alblock _Rebound ( _Al );
    _Alloc_construct_ptr < _Alblock > _Constructor { _Rebound };
    _Constructor . _Allocate ( );
    _Construct_in_place ( * _Constructor . _Ptr, _Al, :: std :: forward < _Types > ( _Args ) ... );
    shared_ptr < _Ty > _Ret;
    const auto _Ptr = reinterpret_cast < _Ty * > ( :: std :: addressof ( _Constructor . _Ptr -> _Storage . _Value ) );
    _Ret . _Set_ptr_rep_and_enable_shared ( _Ptr, _Unfancy ( _Constructor . _Release ( ) ) );
    return _Ret;
}
#line 2989 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\memory"
template < class _Ty >
class weak_ptr : public _Ptr_base < _Ty > {
public :





    template < class _Ty2, class = const _Ty2 * >
    static constexpr bool _Must_avoid_expired_conversions_from = true;


    template < class _Ty2 >
    static constexpr bool
        _Must_avoid_expired_conversions_from < _Ty2, decltype ( static_cast < const _Ty2 * > ( static_cast < _Ty * > ( nullptr ) ) ) > =
            false;


    constexpr weak_ptr ( ) noexcept { }

    weak_ptr ( const weak_ptr & _Other ) noexcept {
        this -> _Weakly_construct_from ( _Other );
    }

    template < class _Ty2, enable_if_t < _SP_pointer_compatible < _Ty2, _Ty > :: value, int > = 0 >
    weak_ptr ( const shared_ptr < _Ty2 > & _Other ) noexcept {
        this -> _Weakly_construct_from ( _Other );
    }

    template < class _Ty2, enable_if_t < _SP_pointer_compatible < _Ty2, _Ty > :: value, int > = 0 >
    weak_ptr ( const weak_ptr < _Ty2 > & _Other ) noexcept {



        constexpr bool _Avoid_expired_conversions = _Must_avoid_expired_conversions_from < _Ty2 >;


        if constexpr ( _Avoid_expired_conversions ) {
            this -> _Weakly_convert_lvalue_avoiding_expired_conversions ( _Other );
        } else {
            this -> _Weakly_construct_from ( _Other );
        }
    }

    weak_ptr ( weak_ptr && _Other ) noexcept {
        this -> _Move_construct_from ( :: std :: move ( _Other ) );
    }

    template < class _Ty2, enable_if_t < _SP_pointer_compatible < _Ty2, _Ty > :: value, int > = 0 >
    weak_ptr ( weak_ptr < _Ty2 > && _Other ) noexcept {



        constexpr bool _Avoid_expired_conversions = _Must_avoid_expired_conversions_from < _Ty2 >;


        if constexpr ( _Avoid_expired_conversions ) {
            this -> _Weakly_convert_rvalue_avoiding_expired_conversions ( :: std :: move ( _Other ) );
        } else {
            this -> _Move_construct_from ( :: std :: move ( _Other ) );
        }
    }

    ~ weak_ptr ( ) noexcept {
        this -> _Decwref ( );
    }

    weak_ptr & operator = ( const weak_ptr & _Right ) noexcept {
        weak_ptr ( _Right ) . swap ( * this );
        return * this;
    }

    template < class _Ty2, enable_if_t < _SP_pointer_compatible < _Ty2, _Ty > :: value, int > = 0 >
    weak_ptr & operator = ( const weak_ptr < _Ty2 > & _Right ) noexcept {
        weak_ptr ( _Right ) . swap ( * this );
        return * this;
    }

    weak_ptr & operator = ( weak_ptr && _Right ) noexcept {
        weak_ptr ( :: std :: move ( _Right ) ) . swap ( * this );
        return * this;
    }

    template < class _Ty2, enable_if_t < _SP_pointer_compatible < _Ty2, _Ty > :: value, int > = 0 >
    weak_ptr & operator = ( weak_ptr < _Ty2 > && _Right ) noexcept {
        weak_ptr ( :: std :: move ( _Right ) ) . swap ( * this );
        return * this;
    }

    template < class _Ty2, enable_if_t < _SP_pointer_compatible < _Ty2, _Ty > :: value, int > = 0 >
    weak_ptr & operator = ( const shared_ptr < _Ty2 > & _Right ) noexcept {
        weak_ptr ( _Right ) . swap ( * this );
        return * this;
    }

    void reset ( ) noexcept {
        weak_ptr { } . swap ( * this );
    }

    void swap ( weak_ptr & _Other ) noexcept {
        this -> _Swap ( _Other );
    }

    [ [ nodiscard ] ] bool expired ( ) const noexcept {
        return this -> use_count ( ) == 0;
    }

    [ [ nodiscard ] ] shared_ptr < _Ty > lock ( ) const noexcept {
        shared_ptr < _Ty > _Ret;
        ( void ) _Ret . _Construct_from_weak ( * this );
        return _Ret;
    }
};
#line 3108 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\memory"
template < class _Ty >
void swap ( weak_ptr < _Ty > & _Left, weak_ptr < _Ty > & _Right ) noexcept {
    _Left . swap ( _Right );
}
#line 3113
template < class _Ty >
class enable_shared_from_this {
public :
    using _Esft_type = enable_shared_from_this;

    [ [ nodiscard ] ] shared_ptr < _Ty > shared_from_this ( ) {
        return shared_ptr < _Ty > ( _Wptr );
    }

    [ [ nodiscard ] ] shared_ptr < const _Ty > shared_from_this ( ) const {
        return shared_ptr < const _Ty > ( _Wptr );
    }

    [ [ nodiscard ] ] weak_ptr < _Ty > weak_from_this ( ) noexcept {
        return _Wptr;
    }

    [ [ nodiscard ] ] weak_ptr < const _Ty > weak_from_this ( ) const noexcept {
        return _Wptr;
    }

protected :
    constexpr enable_shared_from_this ( ) noexcept : _Wptr ( ) { }

    enable_shared_from_this ( const enable_shared_from_this & ) noexcept : _Wptr ( ) {

    }

    enable_shared_from_this & operator = ( const enable_shared_from_this & ) noexcept {
        return * this;
    }

    ~ enable_shared_from_this ( ) = default;

private :
    template < class _Yty >
    friend class shared_ptr;

    mutable weak_ptr < _Ty > _Wptr;
};
#line 3154
template < class _Ty >
struct default_delete {
    constexpr default_delete ( ) noexcept = default;

    template < class _Ty2, enable_if_t < is_convertible_v < _Ty2 *, _Ty * >, int > = 0 >
    inline default_delete ( const default_delete < _Ty2 > & ) noexcept { }

    inline void operator ( ) ( _Ty * _Ptr ) const noexcept {
        static_assert ( 0 < sizeof ( _Ty ), "can\'t delete an incomplete type" );
        delete _Ptr;
    }
};
#line 3167
template< class _Ty> 
#pragma pack(8)
#line 3168
struct default_delete< _Ty []>  { 
#line 3169
constexpr default_delete() noexcept = default;
#line 3171
template < class _Uty, enable_if_t < is_convertible_v < _Uty ( * ) [ ], _Ty ( * ) [ ] >, int > = 0 >
    inline default_delete ( const default_delete < _Uty [ ] > & ) noexcept { }
#line 3174
template < class _Uty, enable_if_t < is_convertible_v < _Uty ( * ) [ ], _Ty ( * ) [ ] >, int > = 0 >
    inline void operator ( ) ( _Uty * _Ptr ) const noexcept {
        static_assert ( 0 < sizeof ( _Uty ), "can\'t delete an incomplete type" );
        delete [ ] _Ptr;
    }
#line 3179
}; 
#pragma pack(8)
template< class _Ty, class _Dx_noref, class  = void> 
#line 3182
struct _Get_deleter_pointer_type { 
#line 3183
using type = _Ty *; 
#line 3184
}; 
#line 3186
template< class _Ty, class _Dx_noref> 
#line 3187
struct _Get_deleter_pointer_type< _Ty, _Dx_noref, void_t< typename _Dx_noref::pointer> >  { 
#line 3188
using type = typename _Dx_noref::pointer; 
#line 3189
}; 
#line 3191
template< class _Dx2> using _Unique_ptr_enable_default_t = enable_if_t< conjunction_v< negation< is_pointer< _Dx2> > , is_default_constructible< _Dx2> > , int> ; 
#line 3195
template < class _Ty, class _Dx >
class unique_ptr {
public :
    using pointer = typename _Get_deleter_pointer_type < _Ty, remove_reference_t < _Dx >> :: type;
    using element_type = _Ty;
    using deleter_type = _Dx;

    template < class _Dx2 = _Dx, _Unique_ptr_enable_default_t < _Dx2 > = 0 >
    constexpr unique_ptr ( ) noexcept : _Mypair ( _Zero_then_variadic_args_t { } ) { }

    template < class _Dx2 = _Dx, _Unique_ptr_enable_default_t < _Dx2 > = 0 >
    constexpr unique_ptr ( nullptr_t ) noexcept : _Mypair ( _Zero_then_variadic_args_t { } ) { }

    inline unique_ptr & operator = ( nullptr_t ) noexcept {
        reset ( );
        return * this;
    }



    template < class _Dx2 = _Dx, _Unique_ptr_enable_default_t < _Dx2 > = 0 >
    inline explicit unique_ptr ( pointer _Ptr ) noexcept : _Mypair ( _Zero_then_variadic_args_t { }, _Ptr ) { }

    template < class _Dx2 = _Dx, enable_if_t < is_constructible_v < _Dx2, const _Dx2 & >, int > = 0 >
    inline unique_ptr ( pointer _Ptr, const _Dx & _Dt ) noexcept : _Mypair ( _One_then_variadic_args_t { }, _Dt, _Ptr ) { }

    template < class _Dx2 = _Dx,
        enable_if_t < conjunction_v < negation < is_reference < _Dx2 >>, is_constructible < _Dx2, _Dx2 >>, int > = 0 >
    inline unique_ptr ( pointer _Ptr, _Dx && _Dt ) noexcept
        : _Mypair ( _One_then_variadic_args_t { }, :: std :: move ( _Dt ), _Ptr ) { }

    template < class _Dx2 = _Dx,
        enable_if_t < conjunction_v < is_reference < _Dx2 >, is_constructible < _Dx2, remove_reference_t < _Dx2 >> >, int > = 0 >
    unique_ptr ( pointer, remove_reference_t < _Dx > && ) = delete;

    template < class _Dx2 = _Dx, enable_if_t < is_move_constructible_v < _Dx2 >, int > = 0 >
    inline unique_ptr ( unique_ptr && _Right ) noexcept
        : _Mypair ( _One_then_variadic_args_t { }, :: std :: forward < _Dx > ( _Right . get_deleter ( ) ), _Right . release ( ) ) { }

    template < class _Ty2, class _Dx2,
        enable_if_t <
            conjunction_v < negation < is_array < _Ty2 >>, is_convertible < typename unique_ptr < _Ty2, _Dx2 > :: pointer, pointer >,
                conditional_t < is_reference_v < _Dx >, is_same < _Dx2, _Dx >, is_convertible < _Dx2, _Dx >> >,
            int > = 0 >
    inline unique_ptr ( unique_ptr < _Ty2, _Dx2 > && _Right ) noexcept
        : _Mypair ( _One_then_variadic_args_t { }, :: std :: forward < _Dx2 > ( _Right . get_deleter ( ) ), _Right . release ( ) ) { }


    template < class _Ty2,
        enable_if_t < conjunction_v < is_convertible < _Ty2 *, _Ty * >, is_same < _Dx, default_delete < _Ty >> >, int > = 0 >
    unique_ptr ( auto_ptr < _Ty2 > && _Right ) noexcept : _Mypair ( _Zero_then_variadic_args_t { }, _Right . release ( ) ) { }


    template < class _Ty2, class _Dx2,
        enable_if_t < conjunction_v < negation < is_array < _Ty2 >>, is_assignable < _Dx &, _Dx2 >,
                        is_convertible < typename unique_ptr < _Ty2, _Dx2 > :: pointer, pointer >>,
            int > = 0 >
    inline unique_ptr & operator = ( unique_ptr < _Ty2, _Dx2 > && _Right ) noexcept {
        reset ( _Right . release ( ) );
        _Mypair . _Get_first ( ) = :: std :: forward < _Dx2 > ( _Right . _Mypair . _Get_first ( ) );
        return * this;
    }

    template < class _Dx2 = _Dx, enable_if_t < is_move_assignable_v < _Dx2 >, int > = 0 >
    inline unique_ptr & operator = ( unique_ptr && _Right ) noexcept {
        reset ( _Right . release ( ) );
        _Mypair . _Get_first ( ) = :: std :: forward < _Dx > ( _Right . _Mypair . _Get_first ( ) );
        return * this;
    }

    inline void swap ( unique_ptr & _Right ) noexcept {
        _Swap_adl ( _Mypair . _Myval2, _Right . _Mypair . _Myval2 );
        _Swap_adl ( _Mypair . _Get_first ( ), _Right . _Mypair . _Get_first ( ) );
    }

    inline ~ unique_ptr ( ) noexcept {
        if ( _Mypair . _Myval2 ) {
            _Mypair . _Get_first ( ) ( _Mypair . _Myval2 );
        }
    }

    [ [ nodiscard ] ] inline _Dx & get_deleter ( ) noexcept {
        return _Mypair . _Get_first ( );
    }

    [ [ nodiscard ] ] inline const _Dx & get_deleter ( ) const noexcept {
        return _Mypair . _Get_first ( );
    }

    [ [ nodiscard ] ] inline add_lvalue_reference_t < _Ty > operator * ( ) const noexcept ( noexcept ( * :: std :: declval < pointer > ( ) ) ) {
        return * _Mypair . _Myval2;
    }

    [ [ nodiscard ] ] inline pointer operator -> ( ) const noexcept {
        return _Mypair . _Myval2;
    }

    [ [ nodiscard ] ] inline pointer get ( ) const noexcept {
        return _Mypair . _Myval2;
    }

    inline explicit operator bool ( ) const noexcept {
        return static_cast < bool > ( _Mypair . _Myval2 );
    }

    inline pointer release ( ) noexcept {
        return :: std :: exchange ( _Mypair . _Myval2, nullptr );
    }

    inline void reset ( pointer _Ptr = nullptr ) noexcept {
        pointer _Old = :: std :: exchange ( _Mypair . _Myval2, _Ptr );
        if ( _Old ) {
            _Mypair . _Get_first ( ) ( _Old );
        }
    }

    unique_ptr ( const unique_ptr & ) = delete;
    unique_ptr & operator = ( const unique_ptr & ) = delete;

private :
    template < class, class >
    friend class unique_ptr;

    _Compressed_pair < _Dx, pointer > _Mypair;
};
#line 3321 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\memory"
template < class _Ty, class _Dx >
class unique_ptr < _Ty [ ], _Dx > {
public :
    using pointer = typename _Get_deleter_pointer_type < _Ty, remove_reference_t < _Dx >> :: type;
    using element_type = _Ty;
    using deleter_type = _Dx;

    template < class _Dx2 = _Dx, _Unique_ptr_enable_default_t < _Dx2 > = 0 >
    constexpr unique_ptr ( ) noexcept : _Mypair ( _Zero_then_variadic_args_t { } ) { }

    template < class _Uty, class _Is_nullptr = is_same < _Uty, nullptr_t >>
    using _Enable_ctor_reset =
        enable_if_t < is_same_v < _Uty, pointer >
                        || _Is_nullptr :: value
                        || ( is_same_v < pointer, element_type * >
                            && is_pointer_v < _Uty >
                            && is_convertible_v < remove_pointer_t < _Uty > ( * ) [ ], element_type ( * ) [ ] > ),
            int >;

    template < class _Uty, class _Dx2 = _Dx, _Unique_ptr_enable_default_t < _Dx2 > = 0, _Enable_ctor_reset < _Uty > = 0 >
    inline explicit unique_ptr ( _Uty _Ptr ) noexcept : _Mypair ( _Zero_then_variadic_args_t { }, _Ptr ) { }

    template < class _Uty, class _Dx2 = _Dx, enable_if_t < is_constructible_v < _Dx2, const _Dx2 & >, int > = 0,
        _Enable_ctor_reset < _Uty > = 0 >
    inline unique_ptr ( _Uty _Ptr, const _Dx & _Dt ) noexcept : _Mypair ( _One_then_variadic_args_t { }, _Dt, _Ptr ) { }

    template < class _Uty, class _Dx2 = _Dx,
        enable_if_t < conjunction_v < negation < is_reference < _Dx2 >>, is_constructible < _Dx2, _Dx2 >>, int > = 0,
        _Enable_ctor_reset < _Uty > = 0 >
    inline unique_ptr ( _Uty _Ptr, _Dx && _Dt ) noexcept
        : _Mypair ( _One_then_variadic_args_t { }, :: std :: move ( _Dt ), _Ptr ) { }

    template < class _Uty, class _Dx2 = _Dx,
        enable_if_t < conjunction_v < is_reference < _Dx2 >, is_constructible < _Dx2, remove_reference_t < _Dx2 >> >, int > = 0 >
    unique_ptr ( _Uty, remove_reference_t < _Dx > && ) = delete;

    template < class _Dx2 = _Dx, enable_if_t < is_move_constructible_v < _Dx2 >, int > = 0 >
    inline unique_ptr ( unique_ptr && _Right ) noexcept
        : _Mypair ( _One_then_variadic_args_t { }, :: std :: forward < _Dx > ( _Right . get_deleter ( ) ), _Right . release ( ) ) { }

    template < class _Dx2 = _Dx, enable_if_t < is_move_assignable_v < _Dx2 >, int > = 0 >
    inline unique_ptr & operator = ( unique_ptr && _Right ) noexcept {
        if ( this != :: std :: addressof ( _Right ) ) {
            reset ( _Right . release ( ) );
            _Mypair . _Get_first ( ) = :: std :: move ( _Right . _Mypair . _Get_first ( ) );
        }

        return * this;
    }

    template < class _Uty, class _Ex, class _More, class _UP_pointer = typename unique_ptr < _Uty, _Ex > :: pointer,
        class _UP_element_type = typename unique_ptr < _Uty, _Ex > :: element_type >
    using _Enable_conversion = enable_if_t <
        conjunction_v < is_array < _Uty >, is_same < pointer, element_type * >, is_same < _UP_pointer, _UP_element_type * >,
            is_convertible < _UP_element_type ( * ) [ ], element_type ( * ) [ ] >, _More >,
        int >;

    template < class _Uty, class _Ex,
        _Enable_conversion < _Uty, _Ex, conditional_t < is_reference_v < _Dx >, is_same < _Ex, _Dx >, is_convertible < _Ex, _Dx >> > =
            0 >
    inline unique_ptr ( unique_ptr < _Uty, _Ex > && _Right ) noexcept
        : _Mypair ( _One_then_variadic_args_t { }, :: std :: forward < _Ex > ( _Right . get_deleter ( ) ), _Right . release ( ) ) { }

    template < class _Uty, class _Ex, _Enable_conversion < _Uty, _Ex, is_assignable < _Dx &, _Ex >> = 0 >
    inline unique_ptr & operator = ( unique_ptr < _Uty, _Ex > && _Right ) noexcept {
        reset ( _Right . release ( ) );
        _Mypair . _Get_first ( ) = :: std :: forward < _Ex > ( _Right . _Mypair . _Get_first ( ) );
        return * this;
    }

    template < class _Dx2 = _Dx, _Unique_ptr_enable_default_t < _Dx2 > = 0 >
    constexpr unique_ptr ( nullptr_t ) noexcept : _Mypair ( _Zero_then_variadic_args_t { } ) { }

    inline unique_ptr & operator = ( nullptr_t ) noexcept {
        reset ( );
        return * this;
    }

    inline void reset ( nullptr_t = nullptr ) noexcept {
        reset ( pointer ( ) );
    }

    inline void swap ( unique_ptr & _Right ) noexcept {
        _Swap_adl ( _Mypair . _Myval2, _Right . _Mypair . _Myval2 );
        _Swap_adl ( _Mypair . _Get_first ( ), _Right . _Mypair . _Get_first ( ) );
    }

    inline ~ unique_ptr ( ) noexcept {
        if ( _Mypair . _Myval2 ) {
            _Mypair . _Get_first ( ) ( _Mypair . _Myval2 );
        }
    }

    [ [ nodiscard ] ] inline _Dx & get_deleter ( ) noexcept {
        return _Mypair . _Get_first ( );
    }

    [ [ nodiscard ] ] inline const _Dx & get_deleter ( ) const noexcept {
        return _Mypair . _Get_first ( );
    }

    [ [ nodiscard ] ] inline _Ty & operator [ ] ( size_t _Idx ) const noexcept {
        return _Mypair . _Myval2 [ _Idx ];
    }

    [ [ nodiscard ] ] inline pointer get ( ) const noexcept {
        return _Mypair . _Myval2;
    }

    inline explicit operator bool ( ) const noexcept {
        return static_cast < bool > ( _Mypair . _Myval2 );
    }

    inline pointer release ( ) noexcept {
        return :: std :: exchange ( _Mypair . _Myval2, nullptr );
    }

    template < class _Uty, _Enable_ctor_reset < _Uty, false_type > = 0 >
    inline void reset ( _Uty _Ptr ) noexcept {
        pointer _Old = :: std :: exchange ( _Mypair . _Myval2, _Ptr );
        if ( _Old ) {
            _Mypair . _Get_first ( ) ( _Old );
        }
    }

    unique_ptr ( const unique_ptr & ) = delete;
    unique_ptr & operator = ( const unique_ptr & ) = delete;

private :
    template < class, class >
    friend class unique_ptr;

    _Compressed_pair < _Dx, pointer > _Mypair;
};
#line 3456
template < class _Ty, class ... _Types, enable_if_t < ! is_array_v < _Ty >, int > = 0 >
[ [ nodiscard ( "This function constructs an object wrapped by a smart pointer and has no other effects; it is not useful to call this function a" "nd discard the return value." ) ] ] inline unique_ptr < _Ty > make_unique ( _Types && ... _Args ) {
    return unique_ptr < _Ty > ( new _Ty ( :: std :: forward < _Types > ( _Args ) ... ) );
}
#line 3461
template < class _Ty, enable_if_t < is_array_v < _Ty > && extent_v < _Ty > == 0, int > = 0 >
[ [ nodiscard ( "This function constructs an object wrapped by a smart pointer and has no other effects; it is not useful to call this function a" "nd discard the return value." ) ] ] inline unique_ptr < _Ty > make_unique ( const size_t _Size ) {
    using _Elem = remove_extent_t < _Ty >;
    return unique_ptr < _Ty > ( new _Elem [ _Size ] ( ) );
}
#line 3467
template < class _Ty, class ... _Types, enable_if_t < extent_v < _Ty > != 0, int > = 0 >
void make_unique ( _Types && ... ) = delete;
#line 3488 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\memory"
template < class _Ty, class _Dx, enable_if_t < _Is_swappable < _Dx > :: value, int > = 0 >
inline void swap ( unique_ptr < _Ty, _Dx > & _Left, unique_ptr < _Ty, _Dx > & _Right ) noexcept {
    _Left . swap ( _Right );
}
#line 3493
template < class _Ty1, class _Dx1, class _Ty2, class _Dx2 >
[ [ nodiscard ] ] inline bool operator == ( const unique_ptr < _Ty1, _Dx1 > & _Left, const unique_ptr < _Ty2, _Dx2 > & _Right ) {
    return _Left . get ( ) == _Right . get ( );
}
#line 3499
template < class _Ty1, class _Dx1, class _Ty2, class _Dx2 >
[ [ nodiscard ] ] bool operator != ( const unique_ptr < _Ty1, _Dx1 > & _Left, const unique_ptr < _Ty2, _Dx2 > & _Right ) {
    return ! ( _Left == _Right );
}
#line 3505 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\memory"
template < class _Ty1, class _Dx1, class _Ty2, class _Dx2 >
[ [ nodiscard ] ] bool operator < ( const unique_ptr < _Ty1, _Dx1 > & _Left, const unique_ptr < _Ty2, _Dx2 > & _Right ) {
    using _Ptr1 = typename unique_ptr < _Ty1, _Dx1 > :: pointer;
    using _Ptr2 = typename unique_ptr < _Ty2, _Dx2 > :: pointer;
    using _Common = common_type_t < _Ptr1, _Ptr2 >;
    return less < _Common > { } ( _Left . get ( ), _Right . get ( ) );
}
#line 3513
template < class _Ty1, class _Dx1, class _Ty2, class _Dx2 >
[ [ nodiscard ] ] bool operator >= ( const unique_ptr < _Ty1, _Dx1 > & _Left, const unique_ptr < _Ty2, _Dx2 > & _Right ) {
    return ! ( _Left < _Right );
}
#line 3518
template < class _Ty1, class _Dx1, class _Ty2, class _Dx2 >
[ [ nodiscard ] ] bool operator > ( const unique_ptr < _Ty1, _Dx1 > & _Left, const unique_ptr < _Ty2, _Dx2 > & _Right ) {
    return _Right < _Left;
}
#line 3523
template < class _Ty1, class _Dx1, class _Ty2, class _Dx2 >
[ [ nodiscard ] ] bool operator <= ( const unique_ptr < _Ty1, _Dx1 > & _Left, const unique_ptr < _Ty2, _Dx2 > & _Right ) {
    return ! ( _Right < _Left );
}
#line 3541
template < class _Ty, class _Dx >
[ [ nodiscard ] ] inline bool operator == ( const unique_ptr < _Ty, _Dx > & _Left, nullptr_t ) noexcept {
    return ! _Left;
}
#line 3547
template < class _Ty, class _Dx >
[ [ nodiscard ] ] bool operator == ( nullptr_t, const unique_ptr < _Ty, _Dx > & _Right ) noexcept {
    return ! _Right;
}
#line 3552
template < class _Ty, class _Dx >
[ [ nodiscard ] ] bool operator != ( const unique_ptr < _Ty, _Dx > & _Left, nullptr_t _Right ) noexcept {
    return ! ( _Left == _Right );
}
#line 3557
template < class _Ty, class _Dx >
[ [ nodiscard ] ] bool operator != ( nullptr_t _Left, const unique_ptr < _Ty, _Dx > & _Right ) noexcept {
    return ! ( _Left == _Right );
}
#line 3563 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\memory"
template < class _Ty, class _Dx >
[ [ nodiscard ] ] inline bool operator < ( const unique_ptr < _Ty, _Dx > & _Left, nullptr_t _Right ) {
    using _Ptr = typename unique_ptr < _Ty, _Dx > :: pointer;
    return less < _Ptr > { } ( _Left . get ( ), _Right );
}
#line 3569
template < class _Ty, class _Dx >
[ [ nodiscard ] ] inline bool operator < ( nullptr_t _Left, const unique_ptr < _Ty, _Dx > & _Right ) {
    using _Ptr = typename unique_ptr < _Ty, _Dx > :: pointer;
    return less < _Ptr > { } ( _Left, _Right . get ( ) );
}
#line 3575
template < class _Ty, class _Dx >
[ [ nodiscard ] ] inline bool operator >= ( const unique_ptr < _Ty, _Dx > & _Left, nullptr_t _Right ) {
    return ! ( _Left < _Right );
}
#line 3580
template < class _Ty, class _Dx >
[ [ nodiscard ] ] inline bool operator >= ( nullptr_t _Left, const unique_ptr < _Ty, _Dx > & _Right ) {
    return ! ( _Left < _Right );
}
#line 3585
template < class _Ty, class _Dx >
[ [ nodiscard ] ] inline bool operator > ( const unique_ptr < _Ty, _Dx > & _Left, nullptr_t _Right ) {
    return _Right < _Left;
}
#line 3590
template < class _Ty, class _Dx >
[ [ nodiscard ] ] inline bool operator > ( nullptr_t _Left, const unique_ptr < _Ty, _Dx > & _Right ) {
    return _Right < _Left;
}
#line 3595
template < class _Ty, class _Dx >
[ [ nodiscard ] ] inline bool operator <= ( const unique_ptr < _Ty, _Dx > & _Left, nullptr_t _Right ) {
    return ! ( _Right < _Left );
}
#line 3600
template < class _Ty, class _Dx >
[ [ nodiscard ] ] inline bool operator <= ( nullptr_t _Left, const unique_ptr < _Ty, _Dx > & _Right ) {
    return ! ( _Right < _Left );
}
#line 3614
template< class _OutTy, class _PxTy, class  = void> 
#line 3615
struct _Can_stream_unique_ptr : public false_type { }; 
#line 3616
template< class _OutTy, class _PxTy> 
#line 3617
struct _Can_stream_unique_ptr< _OutTy, _PxTy, void_t< decltype(std::declval< _OutTy> () << std::declval< _PxTy> ().get())> >  : public true_type { 
#line 3618
}; 
#line 3620
template < class _Elem, class _Traits, class _Yty, class _Dx,
    enable_if_t < _Can_stream_unique_ptr < basic_ostream < _Elem, _Traits > &, const unique_ptr < _Yty, _Dx > & > :: value, int > = 0 >
basic_ostream < _Elem, _Traits > & operator << ( basic_ostream < _Elem, _Traits > & _Out, const unique_ptr < _Yty, _Dx > & _Px ) {

    _Out << _Px . get ( );
    return _Out;
}
#line 3629
enum class pointer_safety { relaxed, preferred, strict}; 
#line 3631
inline void declare_reachable(void *) { } 
#line 3633
template < class _Ty >
_Ty * undeclare_reachable ( _Ty * _Ptr ) {
    return _Ptr;
}
#line 3638
inline void declare_no_pointers(char *, size_t) { } 
#line 3640
inline void undeclare_no_pointers(char *, size_t) { } 
#line 3642
inline pointer_safety get_pointer_safety() noexcept { 
#line 3643
return pointer_safety::relaxed; 
#line 3644
} 
#line 3647 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\memory"
template< class _Ty = void> struct owner_less; 
#line 3650
template < class _Ty >
struct owner_less < shared_ptr < _Ty > > {
    using first_argument_type = shared_ptr < _Ty >;
    using second_argument_type = shared_ptr < _Ty >;
    using result_type = bool;

    [ [ nodiscard ] ] bool operator ( ) ( const shared_ptr < _Ty > & _Left, const shared_ptr < _Ty > & _Right ) const noexcept {
        return _Left . owner_before ( _Right );
    }

    [ [ nodiscard ] ] bool operator ( ) ( const shared_ptr < _Ty > & _Left, const weak_ptr < _Ty > & _Right ) const noexcept {
        return _Left . owner_before ( _Right );
    }

    [ [ nodiscard ] ] bool operator ( ) ( const weak_ptr < _Ty > & _Left, const shared_ptr < _Ty > & _Right ) const noexcept {
        return _Left . owner_before ( _Right );
    }
};
#line 3669
template < class _Ty >
struct owner_less < weak_ptr < _Ty > > {
    using first_argument_type = weak_ptr < _Ty >;
    using second_argument_type = weak_ptr < _Ty >;
    using result_type = bool;

    [ [ nodiscard ] ] bool operator ( ) ( const weak_ptr < _Ty > & _Left, const weak_ptr < _Ty > & _Right ) const noexcept {
        return _Left . owner_before ( _Right );
    }

    [ [ nodiscard ] ] bool operator ( ) ( const weak_ptr < _Ty > & _Left, const shared_ptr < _Ty > & _Right ) const noexcept {
        return _Left . owner_before ( _Right );
    }

    [ [ nodiscard ] ] bool operator ( ) ( const shared_ptr < _Ty > & _Left, const weak_ptr < _Ty > & _Right ) const noexcept {
        return _Left . owner_before ( _Right );
    }
};
#line 3689
template<> struct owner_less< void>  { 
#line 3690
template < class _Ty, class _Uty >
    [ [ nodiscard ] ] bool operator ( ) ( const shared_ptr < _Ty > & _Left, const shared_ptr < _Uty > & _Right ) const noexcept {
        return _Left . owner_before ( _Right );
    }
#line 3695
template < class _Ty, class _Uty >
    [ [ nodiscard ] ] bool operator ( ) ( const shared_ptr < _Ty > & _Left, const weak_ptr < _Uty > & _Right ) const noexcept {
        return _Left . owner_before ( _Right );
    }
#line 3700
template < class _Ty, class _Uty >
    [ [ nodiscard ] ] bool operator ( ) ( const weak_ptr < _Ty > & _Left, const shared_ptr < _Uty > & _Right ) const noexcept {
        return _Left . owner_before ( _Right );
    }
#line 3705
template < class _Ty, class _Uty >
    [ [ nodiscard ] ] bool operator ( ) ( const weak_ptr < _Ty > & _Left, const weak_ptr < _Uty > & _Right ) const noexcept {
        return _Left . owner_before ( _Right );
    }
#line 3710
using is_transparent = int; 
#line 3711
}; 
#line 3713
template < class _Ty, class _Dx >
struct hash < unique_ptr < _Ty, _Dx > > : _Conditionally_enabled_hash < unique_ptr < _Ty, _Dx >,
                                        is_default_constructible_v < hash < typename unique_ptr < _Ty, _Dx > :: pointer > > > {
    static size_t _Do_hash ( const unique_ptr < _Ty, _Dx > & _Keyval ) noexcept (
        _Is_nothrow_hashable < typename unique_ptr < _Ty, _Dx > :: pointer > :: value ) {
        return hash < typename unique_ptr < _Ty, _Dx > :: pointer > { } ( _Keyval . get ( ) );
    }
};
#line 3722
template < class _Ty >
struct hash < shared_ptr < _Ty > > {
    using argument_type = shared_ptr < _Ty >;
    using result_type = size_t;

    [ [ nodiscard ] ] size_t operator ( ) ( const shared_ptr < _Ty > & _Keyval ) const noexcept {
        return hash < typename shared_ptr < _Ty > :: element_type * > ( ) ( _Keyval . get ( ) );
    }
};
#line 3744 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\memory"
extern "C" {
#line 3745
void __cdecl _Lock_shared_ptr_spin_lock(); 
#line 3746
void __cdecl _Unlock_shared_ptr_spin_lock(); 
#line 3747
}
#line 3749
struct _Shared_ptr_spin_lock { 
#line 3750
_Shared_ptr_spin_lock() { 
#line 3751
_Lock_shared_ptr_spin_lock(); 
#line 3752
} 
#line 3754
~_Shared_ptr_spin_lock() noexcept { 
#line 3755
_Unlock_shared_ptr_spin_lock(); 
#line 3756
} 
#line 3757
}; 
#line 3759
template < class _Ty >
 [ [ nodiscard ] ] bool atomic_is_lock_free ( const shared_ptr < _Ty > * ) {

    return false;
}
#line 3765
template < class _Ty >
 [ [ nodiscard ] ] shared_ptr < _Ty > atomic_load_explicit (
    const shared_ptr < _Ty > * _Ptr, memory_order ) {

    _Shared_ptr_spin_lock _Lock;
    shared_ptr < _Ty > _Result = * _Ptr;
    return _Result;
}
#line 3774
template < class _Ty >
 [ [ nodiscard ] ] shared_ptr < _Ty > atomic_load (
    const shared_ptr < _Ty > * _Ptr ) {
    return :: std :: atomic_load_explicit ( _Ptr, memory_order_seq_cst );
}
#line 3780
template < class _Ty >
 void atomic_store_explicit (
    shared_ptr < _Ty > * _Ptr, shared_ptr < _Ty > _Other, memory_order ) {

    _Shared_ptr_spin_lock _Lock;
    _Ptr -> swap ( _Other );
}
#line 3788
template < class _Ty >
 void atomic_store (
    shared_ptr < _Ty > * _Ptr, shared_ptr < _Ty > _Other ) {
    :: std :: atomic_store_explicit ( _Ptr, :: std :: move ( _Other ), memory_order_seq_cst );
}
#line 3794
template < class _Ty >
 shared_ptr < _Ty > atomic_exchange_explicit (
    shared_ptr < _Ty > * _Ptr, shared_ptr < _Ty > _Other, memory_order ) {

    _Shared_ptr_spin_lock _Lock;
    _Ptr -> swap ( _Other );
    return _Other;
}
#line 3803
template < class _Ty >
 shared_ptr < _Ty > atomic_exchange (
    shared_ptr < _Ty > * _Ptr, shared_ptr < _Ty > _Other ) {

    return :: std :: atomic_exchange_explicit ( _Ptr, :: std :: move ( _Other ), memory_order_seq_cst );
}
#line 3810
template < class _Ty >
 bool atomic_compare_exchange_weak_explicit ( shared_ptr < _Ty > * _Ptr,
    shared_ptr < _Ty > * _Exp, shared_ptr < _Ty > _Value, memory_order, memory_order ) {
    shared_ptr < _Ty > _Old_exp;
    _Shared_ptr_spin_lock _Lock;
    bool _Success = _Ptr -> get ( ) == _Exp -> get ( ) && ! _Ptr -> owner_before ( * _Exp ) && ! _Exp -> owner_before ( * _Ptr );
    if ( _Success ) {
        _Ptr -> swap ( _Value );
    } else {
        _Exp -> swap ( _Old_exp );
        * _Exp = * _Ptr;
    }
    return _Success;
}
#line 3825
template < class _Ty >
 bool atomic_compare_exchange_weak (
    shared_ptr < _Ty > * _Ptr, shared_ptr < _Ty > * _Exp, shared_ptr < _Ty > _Value ) {

    return :: std :: atomic_compare_exchange_weak_explicit (
        _Ptr, _Exp, :: std :: move ( _Value ), memory_order_seq_cst, memory_order_seq_cst );
}
#line 3833
template < class _Ty >
 bool atomic_compare_exchange_strong_explicit ( shared_ptr < _Ty > * _Ptr,
    shared_ptr < _Ty > * _Exp, shared_ptr < _Ty > _Value, memory_order, memory_order ) {
    return :: std :: atomic_compare_exchange_weak_explicit (
        _Ptr, _Exp, :: std :: move ( _Value ), memory_order_seq_cst, memory_order_seq_cst );
}
#line 3840
template < class _Ty >
 bool atomic_compare_exchange_strong (
    shared_ptr < _Ty > * _Ptr, shared_ptr < _Ty > * _Exp, shared_ptr < _Ty > _Value ) {

    return :: std :: atomic_compare_exchange_strong_explicit (
        _Ptr, _Exp, :: std :: move ( _Value ), memory_order_seq_cst, memory_order_seq_cst );
}
#line 4325 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\memory"
namespace [[deprecated("warning STL4002: The non-Standard std::tr1 namespace and TR1-only machinery are deprecated and will be REMOVED. You can define _" "SILENCE_TR1_NAMESPACE_DEPRECATION_WARNING to suppress this warning.")]] tr1 { 
#line 4326
using std::allocate_shared;
#line 4327
using std::bad_weak_ptr;
#line 4328
using std::const_pointer_cast;
#line 4329
using std::dynamic_pointer_cast;
#line 4330
using std::enable_shared_from_this;
#line 4331
using std::get_deleter;
#line 4332
using std::make_shared;
#line 4333
using std::shared_ptr;
#line 4334
using std::static_pointer_cast;
#line 4335
using std::swap;
#line 4336
using std::weak_ptr;
#line 4337
}
#line 4340 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\memory"
}
#line 4343
#pragma warning(pop)
#pragma pack ( pop )
#line 12 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\xfacet"
#pragma pack ( push, 8 )
#pragma warning(push, 3)
#pragma warning(disable : 4180 4412 4455 4494 4514 4574 4582 4583 4587 4588 4619 4623 4625 4626 4643 4648 4702 4793 4820 4988 5026 5027 5045 6294 4984 5053 )
#line 24
namespace std { 
#line 25
class __declspec(dllimport) _Facet_base { 
#line 27
public: virtual ~_Facet_base() noexcept { } 
#line 30
virtual void _Incref() noexcept = 0; 
#line 33
virtual _Facet_base *_Decref() noexcept = 0; 
#line 34
}; 
#line 40 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\xfacet"
void __cdecl _Facet_Register(_Facet_base *); 
#line 42 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\xfacet"
}
#line 45
#pragma warning(pop)
#pragma pack ( pop )
#line 12 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\__msvc_xlocinfo_types.hpp"
#pragma pack ( push, 8 )
#pragma warning(push, 3)
#pragma warning(disable : 4180 4412 4455 4494 4514 4574 4582 4583 4587 4588 4619 4623 4625 4626 4643 4648 4702 4793 4820 4988 5026 5027 5045 6294 4984 5053 )
#line 19
extern "C" {
#line 21
struct _Collvec { 
#line 22
unsigned _Page; 
#line 23
__wchar_t *_LocaleName; 
#line 24
}; 
#line 26
struct _Ctypevec { 
#line 27
unsigned _Page; 
#line 28
const short *_Table; 
#line 29
int _Delfl; 
#line 30
__wchar_t *_LocaleName; 
#line 31
}; 
#line 33
struct _Cvtvec { 
#line 34
unsigned _Page; 
#line 35
unsigned _Mbcurmax; 
#line 36
int _Isclocale; 
#line 37
unsigned char _Isleadbyte[32]; 
#line 38
}; 
#line 40
}
#line 44
#pragma warning(pop)
#pragma pack ( pop )
#line 15 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\ctype.h"
#pragma warning(push)
#pragma warning(disable: 4324 4514 4574 4710 4793 4820 4995 4996 28719 28726 28727 )
#line 19
__pragma( pack ( push, 8 )) extern "C" {
#line 29
__declspec(dllimport) int __cdecl _isctype(int _C, int _Type); 
#line 30
__declspec(dllimport) int __cdecl _isctype_l(int _C, int _Type, _locale_t _Locale); 
#line 31
__declspec(dllimport) int __cdecl isalpha(int _C); 
#line 32
__declspec(dllimport) int __cdecl _isalpha_l(int _C, _locale_t _Locale); 
#line 33
__declspec(dllimport) int __cdecl isupper(int _C); 
#line 34
__declspec(dllimport) int __cdecl _isupper_l(int _C, _locale_t _Locale); 
#line 35
__declspec(dllimport) int __cdecl islower(int _C); 
#line 36
__declspec(dllimport) int __cdecl _islower_l(int _C, _locale_t _Locale); 
#line 39
__declspec(dllimport) int __cdecl isdigit(int _C); 
#line 41
__declspec(dllimport) int __cdecl _isdigit_l(int _C, _locale_t _Locale); 
#line 42
__declspec(dllimport) int __cdecl isxdigit(int _C); 
#line 43
__declspec(dllimport) int __cdecl _isxdigit_l(int _C, _locale_t _Locale); 
#line 46
__declspec(dllimport) int __cdecl isspace(int _C); 
#line 48
__declspec(dllimport) int __cdecl _isspace_l(int _C, _locale_t _Locale); 
#line 49
__declspec(dllimport) int __cdecl ispunct(int _C); 
#line 50
__declspec(dllimport) int __cdecl _ispunct_l(int _C, _locale_t _Locale); 
#line 51
__declspec(dllimport) int __cdecl isblank(int _C); 
#line 52
__declspec(dllimport) int __cdecl _isblank_l(int _C, _locale_t _Locale); 
#line 53
__declspec(dllimport) int __cdecl isalnum(int _C); 
#line 54
__declspec(dllimport) int __cdecl _isalnum_l(int _C, _locale_t _Locale); 
#line 55
__declspec(dllimport) int __cdecl isprint(int _C); 
#line 56
__declspec(dllimport) int __cdecl _isprint_l(int _C, _locale_t _Locale); 
#line 57
__declspec(dllimport) int __cdecl isgraph(int _C); 
#line 58
__declspec(dllimport) int __cdecl _isgraph_l(int _C, _locale_t _Locale); 
#line 59
__declspec(dllimport) int __cdecl iscntrl(int _C); 
#line 60
__declspec(dllimport) int __cdecl _iscntrl_l(int _C, _locale_t _Locale); 
#line 63
__declspec(dllimport) int __cdecl toupper(int _C); 
#line 66
__declspec(dllimport) int __cdecl tolower(int _C); 
#line 68
__declspec(dllimport) int __cdecl _tolower(int _C); 
#line 69
__declspec(dllimport) int __cdecl _tolower_l(int _C, _locale_t _Locale); 
#line 70
__declspec(dllimport) int __cdecl _toupper(int _C); 
#line 71
__declspec(dllimport) int __cdecl _toupper_l(int _C, _locale_t _Locale); 
#line 73
__declspec(dllimport) int __cdecl __isascii(int _C); 
#line 74
__declspec(dllimport) int __cdecl __toascii(int _C); 
#line 75
__declspec(dllimport) int __cdecl __iscsymf(int _C); 
#line 76
__declspec(dllimport) int __cdecl __iscsym(int _C); 
#line 85
__inline int __cdecl __acrt_locale_get_ctype_array_value(const unsigned short *const 
#line 86
_Locale_pctype_array, const int 
#line 87
_Char_value, const int 
#line 88
_Mask) 
#line 90
{ 
#line 96
if ((_Char_value >= (-1)) && (_Char_value <= 255)) 
#line 97
{ 
#line 98
return (_Locale_pctype_array[_Char_value]) & _Mask; 
#line 99
}  
#line 101
return 0; 
#line 102
} 
#line 132
__declspec(dllimport) int __cdecl _chvalidator(int _Ch, int _Mask); 
#line 152 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\ctype.h"
__forceinline int __cdecl __ascii_tolower(const int _C) 
#line 153
{ 
#line 154
if ((_C >= ('A')) && (_C <= ('Z'))) 
#line 155
{ 
#line 156
return _C - (('A') - ('a')); 
#line 157
}  
#line 158
return _C; 
#line 159
} 
#line 161
__forceinline int __cdecl __ascii_toupper(const int _C) 
#line 162
{ 
#line 163
if ((_C >= ('a')) && (_C <= ('z'))) 
#line 164
{ 
#line 165
return _C - (('a') - ('A')); 
#line 166
}  
#line 167
return _C; 
#line 168
} 
#line 170
__forceinline int __cdecl __ascii_iswalpha(const int _C) 
#line 171
{ 
#line 172
return ((_C >= ('A')) && (_C <= ('Z'))) || ((_C >= ('a')) && (_C <= ('z'))); 
#line 173
} 
#line 175
__forceinline int __cdecl __ascii_iswdigit(const int _C) 
#line 176
{ 
#line 177
return (_C >= ('0')) && (_C <= ('9')); 
#line 178
} 
#line 180
__forceinline int __cdecl __ascii_towlower(const int _C) 
#line 181
{ 
#line 182
return __ascii_tolower(_C); 
#line 183
} 
#line 185
__forceinline int __cdecl __ascii_towupper(const int _C) 
#line 186
{ 
#line 187
return __ascii_toupper(_C); 
#line 188
} 
#line 208 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\ctype.h"
__inline __crt_locale_data_public *__cdecl __acrt_get_locale_data_prefix(const volatile void *const _LocalePointers) 
#line 209
{ 
#line 210
const _locale_t _TypedLocalePointers = (_locale_t)_LocalePointers; 
#line 211
return (__crt_locale_data_public *)(_TypedLocalePointers->locinfo); 
#line 212
} 
#line 215
__declspec(dllimport) int __cdecl _chvalidator_l(_locale_t, int _Ch, int _Mask); 
#line 218 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\ctype.h"
__inline int __cdecl _chvalidchk_l(const int 
#line 219
_C, const int 
#line 220
_Mask, const _locale_t 
#line 221
_Locale) 
#line 223
{ 
#line 225
return _chvalidator_l(_Locale, _C, _Mask); 
#line 234 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\ctype.h"
} 
#line 239
__inline int __cdecl _ischartype_l(const int 
#line 240
_C, const int 
#line 241
_Mask, const _locale_t 
#line 242
_Locale) 
#line 244
{ 
#line 245
if (!_Locale) 
#line 246
{ 
#line 247
return _chvalidchk_l(_C, _Mask, 0); 
#line 248
}  
#line 250
if ((_C >= (-1)) && (_C <= 255)) 
#line 251
{ 
#line 252
return ((__acrt_get_locale_data_prefix(_Locale)->_locale_pctype)[_C]) & _Mask; 
#line 253
}  
#line 255
if ((__acrt_get_locale_data_prefix(_Locale)->_locale_mb_cur_max) > 1) 
#line 256
{ 
#line 257
return _isctype_l(_C, _Mask, _Locale); 
#line 258
}  
#line 260
return 0; 
#line 261
} 
#line 307 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\ctype.h"
}__pragma( pack ( pop )) 
#line 309
#pragma warning(pop)
#line 14 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\cctype"
#pragma pack ( push, 8 )
#pragma warning(push, 3)
#pragma warning(disable : 4180 4412 4455 4494 4514 4574 4582 4583 4587 4588 4619 4623 4625 4626 4643 4648 4702 4793 4820 4988 5026 5027 5045 6294 4984 5053 )
#line 21
namespace std { 
#line 22
using ::isalnum;
#line 23
using ::isalpha;
#line 24
using ::iscntrl;
#line 25
using ::isdigit;
#line 26
using ::isgraph;
#line 27
using ::islower;
#line 28
using ::isprint;
#line 29
using ::ispunct;
#line 30
using ::isspace;
#line 31
using ::isupper;
#line 32
using ::isxdigit;
#line 33
using ::tolower;
#line 34
using ::toupper;
#line 36
using ::isblank;
#line 37
}
#line 41
#pragma warning(pop)
#pragma pack ( pop )
#line 14 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\locale.h"
#pragma warning(push)
#pragma warning(disable: 4324 4514 4574 4710 4793 4820 4995 4996 28719 28726 28727 )
#line 18
__pragma( pack ( push, 8 )) extern "C" {
#line 34
struct lconv { 
#line 36
char *decimal_point; 
#line 37
char *thousands_sep; 
#line 38
char *grouping; 
#line 39
char *int_curr_symbol; 
#line 40
char *currency_symbol; 
#line 41
char *mon_decimal_point; 
#line 42
char *mon_thousands_sep; 
#line 43
char *mon_grouping; 
#line 44
char *positive_sign; 
#line 45
char *negative_sign; 
#line 46
char int_frac_digits; 
#line 47
char frac_digits; 
#line 48
char p_cs_precedes; 
#line 49
char p_sep_by_space; 
#line 50
char n_cs_precedes; 
#line 51
char n_sep_by_space; 
#line 52
char p_sign_posn; 
#line 53
char n_sign_posn; 
#line 54
__wchar_t *_W_decimal_point; 
#line 55
__wchar_t *_W_thousands_sep; 
#line 56
__wchar_t *_W_int_curr_symbol; 
#line 57
__wchar_t *_W_currency_symbol; 
#line 58
__wchar_t *_W_mon_decimal_point; 
#line 59
__wchar_t *_W_mon_thousands_sep; 
#line 60
__wchar_t *_W_positive_sign; 
#line 61
__wchar_t *_W_negative_sign; 
#line 62
}; 
#line 64
struct tm; 
#line 88
__declspec(dllimport) void __cdecl _lock_locales(); 
#line 89
__declspec(dllimport) void __cdecl _unlock_locales(); 
#line 92
__declspec(dllimport) int __cdecl _configthreadlocale(int _Flag); 
#line 97
__declspec(dllimport) char *__cdecl setlocale(int _Category, const char * _Locale); 
#line 103
__declspec(dllimport) lconv *__cdecl localeconv(); 
#line 106
__declspec(dllimport) _locale_t __cdecl _get_current_locale(); 
#line 109
__declspec(dllimport) _locale_t __cdecl _create_locale(int _Category, const char * _Locale); 
#line 114
__declspec(dllimport) void __cdecl _free_locale(_locale_t _Locale); 
#line 120
__declspec(dllimport) __wchar_t *__cdecl _wsetlocale(int _Category, const __wchar_t * _Locale); 
#line 126
__declspec(dllimport) _locale_t __cdecl _wcreate_locale(int _Category, const __wchar_t * _Locale); 
#line 133
__declspec(dllimport) __wchar_t **__cdecl ___lc_locale_name_func(); 
#line 134
__declspec(dllimport) unsigned __cdecl ___lc_codepage_func(); 
#line 135
__declspec(dllimport) unsigned __cdecl ___lc_collate_cp_func(); 
#line 143
__declspec(dllimport) char *__cdecl _Getdays(); 
#line 147
__declspec(dllimport) char *__cdecl _Getmonths(); 
#line 149
__declspec(dllimport) void *__cdecl _Gettnames(); 
#line 153
__declspec(dllimport) __wchar_t *__cdecl _W_Getdays(); 
#line 157
__declspec(dllimport) __wchar_t *__cdecl _W_Getmonths(); 
#line 159
__declspec(dllimport) void *__cdecl _W_Gettnames(); 
#line 162
__declspec(dllimport) size_t __cdecl _Strftime(char * _Buffer, size_t _Max_size, const char * _Format, const tm * _Timeptr, void * _Lc_time_arg); 
#line 170
__declspec(dllimport) size_t __cdecl _Wcsftime(__wchar_t * _Buffer, size_t _Max_size, const __wchar_t * _Format, const tm * _Timeptr, void * _Lc_time_arg); 
#line 181 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt\\locale.h"
}__pragma( pack ( pop )) 
#line 183
#pragma warning(pop)
#line 14 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\clocale"
#pragma pack ( push, 8 )
#pragma warning(push, 3)
#pragma warning(disable : 4180 4412 4455 4494 4514 4574 4582 4583 4587 4588 4619 4623 4625 4626 4643 4648 4702 4793 4820 4988 5026 5027 5045 6294 4984 5053 )
#line 21
namespace std { 
#line 22
using ::lconv;
#line 23
using ::localeconv;
#line 24
using ::setlocale;
#line 25
}
#line 29
#pragma warning(pop)
#pragma pack ( pop )
#line 20 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\xlocinfo"
#pragma pack ( push, 8 )
#pragma warning(push, 3)
#pragma warning(disable : 4180 4412 4455 4494 4514 4574 4582 4583 4587 4588 4619 4623 4625 4626 4643 4648 4702 4793 4820 4988 5026 5027 5045 6294 4984 5053 )
#line 27
extern "C" {
#line 48
_Collvec __cdecl _Getcoll(); 
#line 49
_Ctypevec __cdecl _Getctype(); 
#line 50
_Cvtvec __cdecl _Getcvt(); 
#line 51
int __cdecl _Getdateorder(); 
#line 59
int __cdecl _Mbrtowc(__wchar_t *, const char *, size_t _Max_multibyte, mbstate_t *, const _Cvtvec *); 
#line 63 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\xlocinfo"
int __cdecl _Strcoll(const char *, const char *, const char *, const char *, const _Collvec *); 
#line 64
size_t __cdecl _Strxfrm(char * _String1, char * _End1, const char *, const char *, const _Collvec *); 
#line 67
int __cdecl _Tolower(int, const _Ctypevec *); 
#line 68
int __cdecl _Toupper(int, const _Ctypevec *); 
#line 70
int __cdecl _Wcrtomb(char *, __wchar_t, mbstate_t *, const _Cvtvec *); 
#line 71
int __cdecl _Wcscoll(const __wchar_t *, const __wchar_t *, const __wchar_t *, const __wchar_t *, const _Collvec *); 
#line 73
size_t __cdecl _Wcsxfrm(__wchar_t * _String1, __wchar_t * _End1, const __wchar_t *, const __wchar_t *, const _Collvec *); 
#line 77
short __cdecl _Getwctype(__wchar_t, const _Ctypevec *); 
#line 78
const __wchar_t *__cdecl _Getwctypes(const __wchar_t *, const __wchar_t *, short *, const _Ctypevec *); 
#line 80
__wchar_t __cdecl _Towlower(__wchar_t, const _Ctypevec *); 
#line 81
__wchar_t __cdecl _Towupper(__wchar_t, const _Ctypevec *); 
#line 83
}
#line 85
extern "C" {
#line 86
__declspec(dllimport) char *__cdecl _Getdays(); 
#line 88
__declspec(dllimport) char *__cdecl _Getmonths(); 
#line 90
__declspec(dllimport) void *__cdecl _Gettnames(); 
#line 92
__declspec(dllimport) size_t __cdecl _Strftime(char *, size_t _Maxsize, const char *, const tm *, void *); 
#line 95
__declspec(dllimport) __wchar_t *__cdecl _W_Getdays(); 
#line 97
__declspec(dllimport) __wchar_t *__cdecl _W_Getmonths(); 
#line 99
__declspec(dllimport) void *__cdecl _W_Gettnames(); 
#line 101
__declspec(dllimport) size_t __cdecl _Wcsftime(__wchar_t *, size_t _Maxsize, const __wchar_t *, const tm *, void *); 
#line 103
}
#line 105
namespace std { 
#line 106
class __declspec(dllimport) _Timevec { 
#line 108
public: explicit _Timevec(void *_Ptr = 0) : _Timeptr(_Ptr) { } 
#line 110
_Timevec(const _Timevec &_Right) : _Timeptr((nullptr)) { 
#line 111
((*this) = _Right); 
#line 112
} 
#line 114
~_Timevec() noexcept { 
#line 115
::free(_Timeptr); 
#line 116
} 
#line 118
_Timevec &operator=(const _Timevec &_Right) { 
#line 119
if (this != (&_Right)) { 
#line 120
::free(_Timeptr); 
#line 121
(_Timeptr) = (_Right._Timeptr); 
#line 122
((const_cast< _Timevec &>(_Right))._Timeptr) = (nullptr); 
#line 123
}  
#line 125
return *this; 
#line 126
} 
#line 128
void *_Getptr() const { 
#line 129
return _Timeptr; 
#line 130
} 
#line 133
private: void *_Timeptr; 
#line 134
}; 
#line 136
template < class _Elem >
class __declspec ( dllimport ) _Yarn {
public :
     _Yarn ( ) noexcept : _Myptr ( nullptr ), _Nul ( 0 ) { }

     _Yarn ( const _Yarn & _Right ) noexcept : _Myptr ( nullptr ), _Nul ( 0 ) {
        * this = _Right;
    }

     _Yarn ( const _Elem * _Right ) noexcept : _Myptr ( nullptr ), _Nul ( 0 ) {
        * this = _Right;
    }

    _Yarn & operator = ( const _Yarn & _Right ) noexcept {
        return * this = _Right . _Myptr;
    }

    _Yarn & operator = ( const _Elem * _Right ) noexcept {
        if ( _Myptr != _Right ) {
            _Tidy ( );

            if ( _Right ) {
                const _Elem * _Ptr = _Right;
                while ( * _Ptr != _Elem { } ) {
                    ++ _Ptr;
                }

                const auto _Count = ( ++ _Ptr - _Right ) * sizeof ( _Elem );


                _Myptr = static_cast < _Elem * > ( _malloc_dbg ( _Count, 2, "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\xlocinfo", 166 ) );




                if ( _Myptr ) {
                    :: memcpy ( _Myptr, _Right, _Count );
                }
            }
        }

        return * this;
    }

     ~ _Yarn ( ) noexcept {
        _Tidy ( );
    }

    [ [ nodiscard ] ] bool empty ( ) const noexcept {
        return _Myptr == nullptr;
    }

      const _Elem * c_str ( ) const noexcept {
        return _Myptr ? _Myptr : & _Nul;
    }

    [ [ nodiscard ] ] bool _Empty ( ) const noexcept {
        return _Myptr == nullptr;
    }

      const _Elem * _C_str ( ) const noexcept {
        return _Myptr ? _Myptr : & _Nul;
    }

private :
    void _Tidy ( ) noexcept {
        if ( _Myptr ) {

            _free_dbg ( _Myptr, 2 );



        }

        _Myptr = nullptr;
    }

    _Elem * _Myptr;
    _Elem _Nul;
};
#line 217 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\xlocinfo"
class __declspec(dllimport) _Locinfo { 
#line 219
public: using _Collvec = ::_Collvec; 
#line 220
using _Ctypevec = ::_Ctypevec; 
#line 221
using _Cvtvec = ::_Cvtvec; 
#line 222
using _Timevec = std::_Timevec; 
#line 224
static void __cdecl _Locinfo_ctor(_Locinfo *, const char *); 
#line 225
static void __cdecl _Locinfo_ctor(_Locinfo *, int, const char *); 
#line 226
static void __cdecl _Locinfo_dtor(_Locinfo *); 
#line 227
static _Locinfo &__cdecl _Locinfo_Addcats(_Locinfo *, int, const char *); 
#line 229
_Locinfo(const char *_Pch = "C") : _Lock(0) 
#line 233 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\xlocinfo"
{ 
#line 234
if (_Pch) { 
#line 235
_Locinfo_ctor(this, _Pch); 
#line 236
return; 
#line 237
}  
#line 239
_Xruntime_error("bad locale name"); 
#line 240
} 
#line 242
_Locinfo(int _Cat, const char *_Pch) : _Lock(0) 
#line 246 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\xlocinfo"
{ 
#line 247
if (_Pch) { 
#line 248
_Locinfo_ctor(this, _Cat, _Pch); 
#line 249
return; 
#line 250
}  
#line 252
_Xruntime_error("bad locale name"); 
#line 253
} 
#line 255
~_Locinfo() noexcept { 
#line 256
_Locinfo_dtor(this); 
#line 257
} 
#line 259
_Locinfo &_Addcats(int _Cat, const char *_Pch) { 
#line 260
if (_Pch) { 
#line 261
return _Locinfo_Addcats(this, _Cat, _Pch); 
#line 262
}  
#line 264
_Xruntime_error("bad locale name"); 
#line 265
} 
#line 267
const char *_Getname() const { 
#line 268
return (_Newlocname)._C_str(); 
#line 269
} 
#line 271
_Collvec _Getcoll() const { 
#line 272
return ::_Getcoll(); 
#line 273
} 
#line 275
_Ctypevec _Getctype() const { 
#line 276
return ::_Getctype(); 
#line 277
} 
#line 279
_Cvtvec _Getcvt() const { 
#line 280
return ::_Getcvt(); 
#line 281
} 
#line 283
const lconv *_Getlconv() const { 
#line 284
return localeconv(); 
#line 285
} 
#line 287
_Timevec _Gettnames() const { 
#line 288
return ((std::_Timevec)(::_Gettnames())); 
#line 289
} 
#line 291
const char *_Getdays() const { 
#line 292
const char *_Ptr = ::_Getdays(); 
#line 293
if (_Ptr) { 
#line 294
(((const_cast< _Locinfo *>(this))->_Days) = _Ptr); 
#line 295
::free(const_cast< char *>(_Ptr)); 
#line 296
}  
#line 298
return (!(_Days)._Empty()) ? (_Days)._C_str() : (":Sun:Sunday:Mon:Monday:Tue:Tuesday:Wed:Wednesday:Thu:Thursday:Fri:Friday:Sat:Saturday"); 
#line 301
} 
#line 303
const char *_Getmonths() const { 
#line 304
const char *_Ptr = ::_Getmonths(); 
#line 305
if (_Ptr) { 
#line 306
(((const_cast< _Locinfo *>(this))->_Months) = _Ptr); 
#line 307
::free(const_cast< char *>(_Ptr)); 
#line 308
}  
#line 310
return (!(_Months)._Empty()) ? (_Months)._C_str() : (":Jan:January:Feb:February:Mar:March:Apr:April:May:May:Jun:June:Jul:July:Aug:August:Sep:September:Oct:October:Nov:November:Dec:De" "cember"); 
#line 315
} 
#line 317
const char *_Getfalse() const { 
#line 318
return "false"; 
#line 319
} 
#line 321
const char *_Gettrue() const { 
#line 322
return "true"; 
#line 323
} 
#line 325
int _Getdateorder() const { 
#line 326
return ::_Getdateorder(); 
#line 327
} 
#line 329
_Timevec _W_Gettnames() const { 
#line 330
return ((std::_Timevec)(::_W_Gettnames())); 
#line 331
} 
#line 333
const unsigned short *_W_Getdays() const { 
#line 334
const __wchar_t *_Ptr = ::_W_Getdays(); 
#line 335
if (_Ptr) { 
#line 336
(((const_cast< _Locinfo *>(this))->_W_Days) = _Ptr); 
#line 337
::free(const_cast< __wchar_t *>(_Ptr)); 
#line 338
}  
#line 340
const __wchar_t *_Ret; 
#line 342
if ((_W_Days)._Empty()) { 
#line 343
_Ret = (L"\x3a\x53\x75\x6e\x3a\x53\x75\x6e\x64\x61\x79\x3a\x4d\x6f\x6e\x3a\x4d\x6f\x6e\x64\x61\x79\x3a\x54\x75\x65\x3a\x54\x75\x65\x73\x64" L"\x61\x79\x3a\x57\x65\x64\x3a\x57\x65\x64\x6e\x65\x73\x64\x61\x79\x3a\x54\x68\x75\x3a\x54\x68\x75\x72\x73\x64\x61\x79\x3a\x46\x72" L"\x69\x3a\x46\x72\x69\x64\x61\x79\x3a\x53\x61\x74\x3a\x53\x61\x74\x75\x72\x64\x61\x79"); 
#line 344
} else { 
#line 345
_Ret = (_W_Days)._C_str(); 
#line 346
}  
#line 348
return reinterpret_cast< const unsigned short *>(_Ret); 
#line 349
} 
#line 351
const unsigned short *_W_Getmonths() const { 
#line 352
const __wchar_t *_Ptr = ::_W_Getmonths(); 
#line 353
if (_Ptr) { 
#line 354
(((const_cast< _Locinfo *>(this))->_W_Months) = _Ptr); 
#line 355
::free(const_cast< __wchar_t *>(_Ptr)); 
#line 356
}  
#line 358
const __wchar_t *_Ret; 
#line 360
if ((_W_Months)._Empty()) { 
#line 361
_Ret = (L"\x3a\x4a\x61\x6e\x3a\x4a\x61\x6e\x75\x61\x72\x79\x3a\x46\x65\x62\x3a\x46\x65\x62\x72\x75\x61\x72\x79\x3a\x4d\x61\x72\x3a\x4d\x61" L"\x72\x63\x68\x3a\x41\x70\x72\x3a\x41\x70\x72\x69\x6c\x3a\x4d\x61\x79\x3a\x4d\x61\x79\x3a\x4a\x75\x6e\x3a\x4a\x75\x6e\x65\x3a\x4a" L"\x75\x6c\x3a\x4a\x75\x6c\x79\x3a\x41\x75\x67\x3a\x41\x75\x67\x75\x73\x74\x3a\x53\x65\x70\x3a\x53\x65\x70\x74\x65\x6d\x62\x65\x72" L"\x3a\x4f\x63\x74\x3a\x4f\x63\x74\x6f\x62\x65\x72\x3a\x4e\x6f\x76\x3a\x4e\x6f\x76\x65\x6d\x62\x65\x72\x3a\x44\x65\x63\x3a\x44\x65" L"\x63\x65\x6d\x62\x65\x72"); 
#line 363
} else { 
#line 364
_Ret = (_W_Months)._C_str(); 
#line 365
}  
#line 367
return reinterpret_cast< const unsigned short *>(_Ret); 
#line 368
} 
#line 370
_Locinfo(const _Locinfo &) = delete;
#line 371
_Locinfo &operator=(const _Locinfo &) = delete;
#line 377
private: _Lockit _Lock; 
#line 380 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\xlocinfo"
_Yarn< char>  _Days; 
#line 381
_Yarn< char>  _Months; 
#line 382
_Yarn< __wchar_t>  _W_Days; 
#line 383
_Yarn< __wchar_t>  _W_Months; 
#line 384
_Yarn< char>  _Oldlocname; 
#line 385
_Yarn< char>  _Newlocname; 
#line 386
}; 
#line 388
template < class _Elem >
int __cdecl _LStrcoll ( const _Elem * _First1, const _Elem * _Last1, const _Elem * _First2, const _Elem * _Last2,
    const _Locinfo :: _Collvec * ) {
    for (; _First1 != _Last1 && _First2 != _Last2; ++ _First1, ++ _First2 ) {
        if ( * _First1 < * _First2 ) {
            return - 1;
        } else if ( * _First2 < * _First1 ) {
            return + 1;
        }
    }

    return _First2 != _Last2 ? - 1 : _First1 != _Last1 ? + 1 : 0;
}
#line 403
template<> inline int __cdecl _LStrcoll(const char *_First1, const char *_Last1, const char *_First2, const char *_Last2, const _Locinfo::_Collvec *
#line 404
_Vector) { 
#line 405
return _Strcoll(_First1, _Last1, _First2, _Last2, _Vector); 
#line 406
} 
#line 409
template<> inline int __cdecl _LStrcoll(const __wchar_t *_First1, const __wchar_t *_Last1, const __wchar_t *_First2, const __wchar_t *
#line 410
_Last2, const _Locinfo::_Collvec *
#line 411
_Vector) { 
#line 412
return _Wcscoll(_First1, _Last1, _First2, _Last2, _Vector); 
#line 413
} 
#line 415
template < class _Elem >
size_t __cdecl _LStrxfrm ( _Elem * _First1, _Elem * _Last1, const _Elem * _First2, const _Elem * _Last2,
    const _Locinfo :: _Collvec * ) {
    const ptrdiff_t _Count = _Last2 - _First2;
    if ( _Count <= _Last1 - _First1 ) {
        :: memcpy ( _First1, _First2, _Count * sizeof ( _Elem ) );
    }

    return _Count;
}
#line 427
template<> inline size_t __cdecl _LStrxfrm(char *_First1, char *
#line 428
_Last1, const char *_First2, const char *_Last2, const _Locinfo::_Collvec *
#line 429
_Vector) { 
#line 430
return _Strxfrm(_First1, _Last1, _First2, _Last2, _Vector); 
#line 431
} 
#line 434
template<> inline size_t __cdecl _LStrxfrm(__wchar_t *_First1, __wchar_t *
#line 435
_Last1, const __wchar_t *_First2, const __wchar_t *_Last2, const _Locinfo::_Collvec *
#line 436
_Vector) { 
#line 437
return _Wcsxfrm(_First1, _Last1, _First2, _Last2, _Vector); 
#line 438
} 
#line 439
}
#line 442
#pragma warning(pop)
#pragma pack ( pop )
#line 18 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\xlocale"
#pragma pack ( push, 8 )
#pragma warning(push, 3)
#pragma warning(disable : 4180 4412 4455 4494 4514 4574 4582 4583 4587 4588 4619 4623 4625 4626 4643 4648 4702 4793 4820 4988 5026 5027 5045 6294 4984 5053 )
#line 25
namespace std { 
#line 26
template< class _Dummy> 
#line 27
class _Locbase { 
#line 29
public: static const int collate = ((1 << 1) >> 1); 
#line 30
static const int ctype = ((1 << 2) >> 1); 
#line 31
static const int monetary = ((1 << 3) >> 1); 
#line 32
static const int numeric = ((1 << 4) >> 1); 
#line 33
static const int time = ((1 << 5) >> 1); 
#line 34
static const int messages = ((1 << 6) >> 1); 
#line 35
static const int all = (((1 << (6 + 1)) >> 1) - 1); 
#line 36
static const int none = 0; 
#line 37
}; 
#line 39
template< class _Dummy> const int _Locbase< _Dummy> ::collate; 
#line 41
template< class _Dummy> const int _Locbase< _Dummy> ::ctype; 
#line 43
template< class _Dummy> const int _Locbase< _Dummy> ::monetary; 
#line 45
template< class _Dummy> const int _Locbase< _Dummy> ::numeric; 
#line 47
template< class _Dummy> const int _Locbase< _Dummy> ::time; 
#line 49
template< class _Dummy> const int _Locbase< _Dummy> ::messages; 
#line 51
template< class _Dummy> const int _Locbase< _Dummy> ::all; 
#line 53
template< class _Dummy> const int _Locbase< _Dummy> ::none; 
#line 56
template< class _Elem> class collate; 
#line 59
struct __declspec(dllimport) _Crt_new_delete { 
#line 61
void *__cdecl operator new(size_t _Size) { 
#line 62
void *_Ptr = operator new(_Size, nothrow); 
#line 63
if (!_Ptr) { 
#line 64
_Xbad_alloc(); 
#line 65
}  
#line 67
return _Ptr; 
#line 68
} 
#line 70
void *__cdecl operator new(size_t _Size, const nothrow_t &) noexcept { 
#line 71
return _malloc_dbg((_Size > (0)) ? _Size : (1), 2, "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\xlocale", 71); 
#line 72
} 
#line 74
void __cdecl operator delete(void *_Ptr) noexcept { 
#line 75
::free(_Ptr); 
#line 76
} 
#line 78
void __cdecl operator delete(void *_Ptr, const nothrow_t &) noexcept { 
#line 79
operator delete(_Ptr); 
#line 80
} 
#line 82
void *__cdecl operator new(size_t, void *_Ptr) noexcept { 
#line 83
return _Ptr; 
#line 84
} 
#line 86
void __cdecl operator delete(void *, void *) noexcept { } 
#line 88 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\xlocale"
}; 
#line 90
class locale : public _Locbase< int> , public _Crt_new_delete { 
#line 92
public: using category = int; 
#line 94
class __declspec(dllimport) id { 
#line 96
public: id(size_t _Val = 0) : _Id(_Val) { } 
#line 98
id(const id &) = delete;
#line 99
id &operator=(const id &) = delete;
#line 101
operator size_t() { 
#line 102
if ((_Id) == (0)) { 
#line 103
{ _Lockit _Lock(0); 
#line 104
if ((_Id) == (0)) { 
#line 105
(_Id) = (static_cast< size_t>(++_Id_cnt)); 
#line 106
}  
#line 107
} 
#line 108
}  
#line 109
return _Id; 
#line 110
} 
#line 113
private: size_t _Id; 
#line 115
static int _Id_cnt; 
#line 116
}; 
#line 118
struct _Facet_guard; 
#line 120
class __declspec(dllimport) facet : public _Facet_base, public _Crt_new_delete { 
#line 123
friend struct _Facet_guard; 
#line 126
public: static size_t __cdecl _Getcat(const facet ** = 0, const locale * = 0) { 
#line 128
return static_cast< size_t>(-1); 
#line 129
} 
#line 131
virtual void _Incref() noexcept override { 
#line 132
_InterlockedIncrement(reinterpret_cast< volatile long *>(&(_Myrefs))); 
#line 133
} 
#line 135
virtual _Facet_base *_Decref() noexcept override { 
#line 136
if (_InterlockedDecrement(reinterpret_cast< volatile long *>(&(_Myrefs))) == (0)) { 
#line 137
return this; 
#line 138
}  
#line 140
return nullptr; 
#line 141
} 
#line 144
private: _Atomic_counter_t _Myrefs; 
#line 147
protected: explicit facet(size_t _Initrefs = 0) : _Myrefs(static_cast< _Atomic_counter_t>(_Initrefs)) 
#line 149
{ } 
#line 151
virtual ~facet() noexcept override { } 
#line 154
public: facet(const facet &) = delete;
#line 155
facet &operator=(const facet &) = delete;
#line 156
}; 
#line 158
struct [[nodiscard]] _Facet_guard { 
#line 159
facet *_Target; 
#line 160
~_Facet_guard() { 
#line 161
if (_Target) { 
#line 162
delete (_Target)->_Decref(); 
#line 163
}  
#line 164
} 
#line 165
}; 
#line 167
class __declspec(dllimport) _Locimp : public facet { 
#line 169
protected: virtual ~_Locimp() noexcept { 
#line 170
_Locimp_dtor(this); 
#line 171
} 
#line 174
private: static _Locimp *__cdecl _New_Locimp(bool _Transparent = false); 
#line 175
static _Locimp *__cdecl _New_Locimp(const _Locimp & _Right); 
#line 177
static void __cdecl _Locimp_dtor(_Locimp *); 
#line 178
static void __cdecl _Locimp_Addfac(_Locimp *, facet *, size_t); 
#line 179
static void __cdecl _Locimp_ctor(_Locimp *, const _Locimp &); 
#line 181
friend class locale; 
#line 183
_Locimp(bool _Transparent) : facet(1), _Facetvec((nullptr)), _Facetcount((0)), _Catmask(none), _Xparent(_Transparent), _Name("*") 
#line 184
{ 
#line 185
} 
#line 187
_Locimp(const _Locimp &_Right) : facet(1), _Facetvec((nullptr)), _Facetcount(_Right._Facetcount), _Catmask(_Right._Catmask), _Xparent(_Right._Xparent), _Name((_Right._Name).c_str()) 
#line 189
{ 
#line 190
_Locimp_ctor(this, _Right); 
#line 191
} 
#line 193
void _Addfac(facet *_Pfacet, size_t _Id) { 
#line 194
_Locimp_Addfac(this, _Pfacet, _Id); 
#line 195
} 
#line 197
static _Locimp *__cdecl _Makeloc(const _Locinfo &, category, _Locimp *, const locale *); 
#line 200
static void __cdecl _Makewloc(const _Locinfo &, category, _Locimp *, const locale *); 
#line 204
static void __cdecl _Makeushloc(const _Locinfo &, category, _Locimp *, const locale *); 
#line 208 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\xlocale"
static void __cdecl _Makexloc(const _Locinfo &, category, _Locimp *, const locale *); 
#line 211
facet **_Facetvec; 
#line 212
size_t _Facetcount; 
#line 213
category _Catmask; 
#line 214
bool _Xparent; 
#line 215
_Yarn< char>  _Name; 
#line 217
static _Locimp *_Clocptr; 
#line 220
public: _Locimp &operator=(const _Locimp &) = delete;
#line 221
}; 
#line 223
template < class _Elem, class _Traits, class _Alloc >
    bool operator ( ) (
        const basic_string < _Elem, _Traits, _Alloc > & _Left, const basic_string < _Elem, _Traits, _Alloc > & _Right ) const {

        const auto & _Coll_fac = :: std :: use_facet < :: std :: collate < _Elem >> ( * this );

        const _Elem * const _Left_data = _Left . data ( );
        const _Elem * const _Right_data = _Right . data ( );
        return _Coll_fac . compare ( _Left_data, _Left_data + _Left . size ( ), _Right_data, _Right_data + _Right . size ( ) ) < 0;
    }
#line 234
template < class _Facet >
    locale combine ( const locale & _Loc ) const {
        _Facet * _Facptr;

        try {
        _Facptr = const_cast < _Facet * > ( :: std :: addressof ( :: std :: use_facet < _Facet > ( _Loc ) ) );
        } catch ( ... ) {
        _Xruntime_error ( "locale::combine facet missing" );
        }

        _Locimp * _Newimp = _Locimp :: _New_Locimp ( * _Ptr );
        _Newimp -> _Addfac ( _Facptr, _Facet :: id );
        _Newimp -> _Catmask = none;
        _Newimp -> _Name = "*";
        return locale { _Newimp };
    }
#line 251
template < class _Facet >
    locale ( const locale & _Loc, const _Facet * _Facptr ) : _Ptr ( _Locimp :: _New_Locimp ( * _Loc . _Ptr ) ) {
        if ( _Facptr ) {
            _Ptr -> _Addfac ( const_cast < _Facet * > ( _Facptr ), _Facet :: id );
            _Ptr -> _Catmask = none;
            _Ptr -> _Name = "*";
        }
    }
#line 260
locale(_Uninitialized) { } 
#line 262
locale(const locale &_Right) noexcept : _Ptr(_Right._Ptr) { 
#line 263
(_Ptr)->_Incref(); 
#line 264
} 
#line 266
locale() noexcept : _Ptr(_Init(true)) { } 
#line 269
locale(const locale &_Loc, const locale &_Other, category _Cat) : _Ptr(_Locimp::_New_Locimp(*(_Loc._Ptr))) { 
#line 271
if (_Cat != none) { 
#line 272
_Facet_guard _Guard{_Ptr}; 
#line 273
{ _Locinfo _Lobj; 
#line 274
_Locimp::_Makeloc(_Lobj, _Cat, _Ptr, &_Other); 
#line 275
_Lobj._Addcats((_Loc._Ptr)->_Catmask, (_Loc.name()).c_str()); 
#line 276
_Lobj._Addcats((_Other._Ptr)->_Catmask, (_Other.name()).c_str()); 
#line 277
((_Ptr)->_Catmask) = (((_Loc._Ptr)->_Catmask) | ((_Other._Ptr)->_Catmask)); 
#line 278
(((_Ptr)->_Name) = (_Lobj._Getname())); 
#line 279
} 
#line 280
(_Guard._Target) = (nullptr); 
#line 281
}  
#line 282
} 
#line 285
private: void _Construct(const string &_Str, category _Cat) { 
#line 287
bool _Bad = false; 
#line 288
_Init(); 
#line 289
if (_Cat != none) { 
#line 290
_Facet_guard _Guard{_Ptr}; 
#line 291
{ _Locinfo _Lobj(_Cat, _Str.c_str()); 
#line 292
if (this->_Badname(_Lobj)) { 
#line 293
_Bad = true; 
#line 294
} else { 
#line 295
_Locimp::_Makeloc(_Lobj, _Cat, _Ptr, nullptr); 
#line 296
((_Ptr)->_Catmask) = _Cat; 
#line 297
(((_Ptr)->_Name) = (_Str.c_str())); 
#line 298
}  
#line 299
} 
#line 300
(_Guard._Target) = (nullptr); 
#line 301
}  
#line 303
if (_Bad) { 
#line 304
delete (_Ptr)->_Decref(); 
#line 305
_Xruntime_error("bad locale name"); 
#line 306
}  
#line 307
} 
#line 310
public: explicit locale(const char *_Locname, category _Cat = all) : _Ptr(_Locimp::_New_Locimp()) { 
#line 314
if (_Locname) { 
#line 315
this->_Construct(_Locname, _Cat); 
#line 316
return; 
#line 317
}  
#line 319
_Xruntime_error("bad locale name"); 
#line 320
} 
#line 322
locale(const locale &_Loc, const char *_Locname, category _Cat) : _Ptr(_Locimp::_New_Locimp(*(_Loc._Ptr))) { 
#line 326
if (_Locname) { 
#line 327
this->_Construct(_Locname, _Cat); 
#line 328
return; 
#line 329
}  
#line 331
_Xruntime_error("bad locale name"); 
#line 332
} 
#line 334
explicit locale(const string &_Str, category _Cat = all) : _Ptr(_Locimp::_New_Locimp()) { 
#line 336
this->_Construct(_Str, _Cat); 
#line 337
} 
#line 339
locale(const locale &_Loc, const string &_Str, category _Cat) : _Ptr(_Locimp::_New_Locimp(*(_Loc._Ptr))) { 
#line 341
this->_Construct(_Str, _Cat); 
#line 342
} 
#line 345 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\xlocale"
~locale() noexcept { 
#line 346
if (_Ptr) { 
#line 347
delete (_Ptr)->_Decref(); 
#line 348
}  
#line 349
} 
#line 351
const locale &operator=(const locale &_Right) noexcept { 
#line 352
if ((_Ptr) != (_Right._Ptr)) { 
#line 353
delete (_Ptr)->_Decref(); 
#line 354
(_Ptr) = (_Right._Ptr); 
#line 355
(_Ptr)->_Incref(); 
#line 356
}  
#line 357
return *this; 
#line 358
} 
#line 360
string name() const { 
#line 361
return ((_Ptr) ? ((_Ptr)->_Name).c_str() : string{}); 
#line 362
} 
#line 364
const char *_C_str() const noexcept { 
#line 365
return (_Ptr) ? ((_Ptr)->_Name).c_str() : (""); 
#line 366
} 
#line 368
const facet *_Getfacet(size_t _Id) const { 
#line 369
const facet *_Facptr = (_Id < ((_Ptr)->_Facetcount)) ? ((_Ptr)->_Facetvec)[_Id] : (nullptr); 
#line 370
if (_Facptr || (!((_Ptr)->_Xparent))) { 
#line 371
return _Facptr; 
#line 372
}  
#line 375
_Locimp *_Ptr0 = _Getgloballocale(); 
#line 376
if (_Id < (_Ptr0->_Facetcount)) { 
#line 377
return (_Ptr0->_Facetvec)[_Id]; 
#line 378
}  
#line 380
return nullptr; 
#line 381
} 
#line 383
[[nodiscard]] bool operator==(const locale &_Loc) const noexcept { 
#line 384
return ((_Ptr) == (_Loc._Ptr)) || ((::strcmp(this->_C_str(), "*") != 0) && (::strcmp(this->_C_str(), _Loc._C_str()) == 0)); 
#line 385
} 
#line 388
[[nodiscard]] bool operator!=(const locale &_Right) const noexcept { 
#line 389
return !((*this) == _Right); 
#line 390
} 
#line 393 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\xlocale"
static const locale &__cdecl classic(); 
#line 395
static locale __cdecl global(const locale &); 
#line 397
static locale __cdecl empty(); 
#line 400
private: locale(_Locimp *_Ptrimp) : _Ptr(_Ptrimp) { } 
#line 402
static _Locimp *__cdecl _Init(bool _Do_incref = false); 
#line 403
static _Locimp *__cdecl _Getgloballocale(); 
#line 404
static void __cdecl _Setgloballocale(void *); 
#line 406
bool _Badname(const _Locinfo &_Lobj) { 
#line 407
return ::strcmp(_Lobj._Getname(), "*") == 0; 
#line 408
} 
#line 410
_Locimp *_Ptr; 
#line 411
}; 
#line 413
template< class _Facet> 
#line 414
struct _Facetptr { 
#line 415
static const locale::facet *_Psave; 
#line 416
}; 
#line 418
template< class _Facet> const locale::facet *
#line 419
_Facetptr< _Facet> ::_Psave = (nullptr); 
#line 421
template < class _Facet >
const _Facet & __cdecl use_facet ( const locale & _Loc ) {
    { :: std :: _Lockit _Lock ( 0 );
    const locale :: facet * _Psave = _Facetptr < _Facet > :: _Psave;

    const size_t _Id = _Facet :: id;
    const locale :: facet * _Pf = _Loc . _Getfacet ( _Id );

    if ( ! _Pf ) {
        if ( _Psave ) {
            _Pf = _Psave;
        } else if ( _Facet :: _Getcat ( & _Psave, & _Loc ) == static_cast < size_t > ( - 1 ) ) {

            _Throw_bad_cast ( );



        } else {
            auto _Pfmod = const_cast < locale :: facet * > ( _Psave );
            unique_ptr < _Facet_base > _Psave_guard ( static_cast < _Facet_base * > ( _Pfmod ) );




            _Facet_Register ( _Pfmod );


            _Pfmod -> _Incref ( );
            _Facetptr < _Facet > :: _Psave = _Psave;
            _Pf = _Psave;

            ( void ) _Psave_guard . release ( );
        }
    }

    return static_cast < const _Facet & > ( * _Pf );
    }
}
#line 460 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\xlocale"
template < class _Elem >
char __cdecl _Maklocbyte ( _Elem _Char, const _Locinfo :: _Cvtvec & ) {

    return static_cast < char > ( static_cast < unsigned char > ( _Char ) );
}
#line 467
template<> inline char __cdecl _Maklocbyte(__wchar_t _Char, const _Locinfo::_Cvtvec &_Cvt) { 
#line 469
char _Byte = '\000'; 
#line 470
mbstate_t _Mbst1 = {}; 
#line 471
_Wcrtomb(&_Byte, _Char, &_Mbst1, &_Cvt); 
#line 472
return _Byte; 
#line 473
} 
#line 477
template<> inline char __cdecl _Maklocbyte(unsigned short _Char, const _Locinfo::_Cvtvec &_Cvt) { 
#line 479
char _Byte = '\000'; 
#line 480
mbstate_t _Mbst1 = {}; 
#line 481
_Wcrtomb(&_Byte, static_cast< __wchar_t>(_Char), &_Mbst1, &_Cvt); 
#line 482
return _Byte; 
#line 483
} 
#line 486 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\xlocale"
template < class _Elem >
_Elem __cdecl _Maklocchr ( char _Byte, _Elem *, const _Locinfo :: _Cvtvec & ) {

    return static_cast < _Elem > ( static_cast < unsigned char > ( _Byte ) );
}
#line 493
template<> inline __wchar_t __cdecl _Maklocchr(char _Byte, __wchar_t *, const _Locinfo::_Cvtvec &_Cvt) { 
#line 495
__wchar_t _Wc = L'\x0'; 
#line 496
mbstate_t _Mbst1 = {}; 
#line 497
_Mbrtowc(&_Wc, &_Byte, 1, &_Mbst1, &_Cvt); 
#line 498
return _Wc; 
#line 499
} 
#line 503
template<> inline unsigned short __cdecl _Maklocchr(char _Byte, unsigned short *, const _Locinfo::_Cvtvec &_Cvt) { 
#line 505
unsigned short _Wc = (0); 
#line 506
mbstate_t _Mbst1 = {}; 
#line 507
_Mbrtowc(reinterpret_cast< __wchar_t *>(&_Wc), &_Byte, 1, &_Mbst1, &_Cvt); 
#line 508
return _Wc; 
#line 509
} 
#line 512 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\xlocale"
template < class _Elem >
_Elem * __cdecl _Maklocstr ( const char * _Ptr, _Elem *, const _Locinfo :: _Cvtvec & ) {

    size_t _Count = :: strlen ( _Ptr ) + 1;

    _Elem * _Ptrdest = static_cast < _Elem * > ( _calloc_dbg ( _Count, sizeof ( _Elem ), 2, "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\xlocale", 517 ) );

    if ( ! _Ptrdest ) {
        _Xbad_alloc ( );
    }

    for ( _Elem * _Ptrnext = _Ptrdest; 0 < _Count; -- _Count, ++ _Ptrnext, ++ _Ptr ) {
        * _Ptrnext = static_cast < _Elem > ( static_cast < unsigned char > ( * _Ptr ) );
    }

    return _Ptrdest;
}
#line 531
template<> inline __wchar_t *__cdecl _Maklocstr(const char *_Ptr, __wchar_t *, const _Locinfo::_Cvtvec &_Cvt) { 
#line 533
size_t _Count; 
#line 534
size_t _Count1; 
#line 535
size_t _Wchars; 
#line 536
const char *_Ptr1; 
#line 537
int _Bytes; 
#line 538
__wchar_t _Wc; 
#line 539
mbstate_t _Mbst1 = {}; 
#line 541
_Count1 = (::strlen(_Ptr) + (1)); 
#line 542
for (((_Count = _Count1), (_Wchars = (0))), (_Ptr1 = _Ptr); (0) < _Count; ((_Count -= _Bytes), (_Ptr1 += _Bytes)), (++_Wchars)) { 
#line 543
if ((_Bytes = _Mbrtowc(&_Wc, _Ptr1, _Count, &_Mbst1, &_Cvt)) <= 0) { 
#line 544
break; 
#line 545
}  
#line 546
}  
#line 548
++_Wchars; 
#line 550
__wchar_t *_Ptrdest = static_cast< __wchar_t *>(_calloc_dbg(_Wchars, sizeof(__wchar_t), 2, "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\xlocale", 550)); 
#line 552
if (!_Ptrdest) { 
#line 553
_Xbad_alloc(); 
#line 554
}  
#line 556
__wchar_t *_Ptrnext = _Ptrdest; 
#line 557
mbstate_t _Mbst2 = {}; 
#line 559
for (; (0) < _Wchars; (((_Count -= _Bytes), (_Ptr += _Bytes)), (--_Wchars)), (++_Ptrnext)) { 
#line 560
if ((_Bytes = _Mbrtowc(_Ptrnext, _Ptr, _Count1, &_Mbst2, &_Cvt)) <= 0) { 
#line 561
break; 
#line 562
}  
#line 563
}  
#line 565
(*_Ptrnext) = L'\x0'; 
#line 567
return _Ptrdest; 
#line 568
} 
#line 572
template<> inline unsigned short *__cdecl _Maklocstr(const char *_Ptr, unsigned short *, const _Locinfo::_Cvtvec &_Cvt) { 
#line 574
size_t _Count; 
#line 575
size_t _Count1; 
#line 576
size_t _Wchars; 
#line 577
const char *_Ptr1; 
#line 578
int _Bytes; 
#line 579
unsigned short _Wc; 
#line 580
mbstate_t _Mbst1 = {}; 
#line 582
_Count1 = (::strlen(_Ptr) + (1)); 
#line 583
for (((_Count = _Count1), (_Wchars = (0))), (_Ptr1 = _Ptr); (0) < _Count; ((_Count -= _Bytes), (_Ptr1 += _Bytes)), (++_Wchars)) { 
#line 584
if ((_Bytes = _Mbrtowc(reinterpret_cast< __wchar_t *>(&_Wc), _Ptr1, _Count, &_Mbst1, &_Cvt)) <= 0) { 
#line 585
break; 
#line 586
}  
#line 587
}  
#line 589
++_Wchars; 
#line 591
__wchar_t *_Ptrdest = static_cast< __wchar_t *>(_calloc_dbg(_Wchars, sizeof(__wchar_t), 2, "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\xlocale", 591)); 
#line 593
if (!_Ptrdest) { 
#line 594
_Xbad_alloc(); 
#line 595
}  
#line 597
__wchar_t *_Ptrnext = _Ptrdest; 
#line 598
mbstate_t _Mbst2 = {}; 
#line 599
for (; (0) < _Wchars; (((_Count -= _Bytes), (_Ptr += _Bytes)), (--_Wchars)), (++_Ptrnext)) { 
#line 600
if ((_Bytes = _Mbrtowc(_Ptrnext, _Ptr, _Count1, &_Mbst2, &_Cvt)) <= 0) { 
#line 601
break; 
#line 602
}  
#line 603
}  
#line 605
(*_Ptrnext) = L'\x0'; 
#line 606
return reinterpret_cast< unsigned short *>(_Ptrdest); 
#line 607
} 
#line 610 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\xlocale"
class __declspec(dllimport) codecvt_base : public locale::facet { 
#line 612
public: enum { 
#line 613
ok, 
#line 614
partial, 
#line 615
error, 
#line 616
noconv
#line 617
}; 
#line 618
using result = int; 
#line 620
codecvt_base(size_t _Refs = 0) : locale::facet(_Refs) { } 
#line 622
bool always_noconv() const noexcept { 
#line 624
return this->do_always_noconv(); 
#line 625
} 
#line 627
int max_length() const noexcept { 
#line 629
return this->do_max_length(); 
#line 630
} 
#line 632
int encoding() const noexcept { 
#line 633
return this->do_encoding(); 
#line 634
} 
#line 636
virtual ~codecvt_base() noexcept { } 
#line 639
protected: virtual bool do_always_noconv() const noexcept { 
#line 641
return false; 
#line 642
} 
#line 644
virtual int do_max_length() const noexcept { 
#line 646
return 1; 
#line 647
} 
#line 649
virtual int do_encoding() const noexcept { 
#line 650
return 1; 
#line 651
} 
#line 652
}; 
#line 654
template< class _Ty> constexpr bool 
#line 655
_Is_one_byte_char_like_v = _Is_any_of_v< remove_cv_t< _Ty> , signed char, unsigned char, char> ; 
#line 664
template< class _Elem, class _Byte> constexpr bool 
#line 665
_Is_codecvt_do_always_noconv_v = is_same_v< _Byte, _Elem>  || (_Is_one_byte_char_like_v< _Byte>  && _Is_one_byte_char_like_v< _Elem> ); 
#line 668
template < class _Elem, class _Byte, class _Statype >
class codecvt : public codecvt_base {
public :








    static_assert ( ! 0 || is_same_v < codecvt, codecvt < char, char, mbstate_t >>,
        "Unsupported facet specialization; see N4800 27.3.1.1.1 [locale.category]. Either use a Standard specialization or define _ENFORC" "E_FACET_SPECIALIZATIONS=0 to suppress this error." );

    using intern_type = _Elem;
    using extern_type = _Byte;
    using state_type = _Statype;

    result in ( _Statype & _State, const _Byte * _First1, const _Byte * _Last1, const _Byte * & _Mid1,
        _Elem * _First2, _Elem * _Last2, _Elem * & _Mid2 ) const {
        return do_in ( _State, _First1, _Last1, _Mid1, _First2, _Last2, _Mid2 );
    }

    result out ( _Statype & _State, const _Elem * _First1, const _Elem * _Last1, const _Elem * & _Mid1,
        _Byte * _First2, _Byte * _Last2, _Byte * & _Mid2 ) const {
        return do_out ( _State, _First1, _Last1, _Mid1, _First2, _Last2, _Mid2 );
    }

    result unshift ( _Statype & _State, _Byte * _First2, _Byte * _Last2, _Byte * & _Mid2 ) const {

        return do_unshift ( _State, _First2, _Last2, _Mid2 );
    }

    int length ( _Statype & _State, const _Byte * _First1, const _Byte * _Last1, size_t _Count ) const {


        return do_length ( _State, _First1, _Last1, _Count );
    }

     static locale :: id id;

    explicit codecvt ( size_t _Refs = 0 ) : codecvt_base ( _Refs ) {
        _Init ( _Locinfo ( ) );
    }

    explicit codecvt ( const _Locinfo & _Lobj, size_t _Refs = 0 ) : codecvt_base ( _Refs ) {
        _Init ( _Lobj );
    }

    static size_t __cdecl _Getcat ( const locale :: facet * * _Ppf = nullptr, const locale * _Ploc = nullptr ) {

        if ( _Ppf && ! * _Ppf ) {
            * _Ppf = new codecvt ( _Locinfo ( _Ploc -> _C_str ( ) ) );
        }

        return 2;
    }

protected :
     ~ codecvt ( ) noexcept override { }

    void _Init ( const _Locinfo & ) { }

    bool do_always_noconv ( ) const noexcept override {

        return _Is_codecvt_do_always_noconv_v < _Elem, _Byte >;
    }

    virtual result do_in ( _Statype &, const _Byte * _First1, const _Byte * _Last1, const _Byte * & _Mid1,
        _Elem * _First2, _Elem * _Last2, _Elem * & _Mid2 ) const {
        _Mid1 = _First1;
        _Mid2 = _First2;
        if constexpr ( _Is_codecvt_do_always_noconv_v < _Elem, _Byte > ) {
            return noconv;
        } else {

            for (; _Mid1 != _Last1; ++ _Mid1, ++ _Mid2 ) {
                if ( _Mid2 == _Last2 ) {
                    return partial;
                }
                * _Mid2 = static_cast < _Elem > ( * _Mid1 );
            }

            return ok;
        }
    }

    virtual result do_out ( _Statype &, const _Elem * _First1, const _Elem * _Last1, const _Elem * & _Mid1,
        _Byte * _First2, _Byte * _Last2, _Byte * & _Mid2 ) const {
        _Mid1 = _First1;
        _Mid2 = _First2;
        if constexpr ( _Is_codecvt_do_always_noconv_v < _Elem, _Byte > ) {
            return noconv;
        } else {

            for (; _Mid1 != _Last1; ++ _Mid1, ++ _Mid2 ) {
                if ( _Mid2 == _Last2 ) {
                    return partial;
                }
                * _Mid2 = static_cast < _Byte > ( * _Mid1 );
            }

            return ok;
        }
    }

    virtual result do_unshift ( _Statype &, _Byte * _First2, _Byte *, _Byte * & _Mid2 ) const {

        _Mid2 = _First2;
        return noconv;
    }

    virtual int do_length (
        _Statype &, const _Byte * _First1, const _Byte * _Last1, size_t _Count ) const {



        const auto _Dist = static_cast < size_t > ( ( :: std :: min ) ( _Last1 - _First1, ptrdiff_t { 2147483647 } ) );
        return static_cast < int > ( ( :: std :: min ) ( _Count, _Dist ) );
    }
};
#line 795
template< class _Elem, class _Byte, class _Statype> locale::id 
#line 796
codecvt< _Elem, _Byte, _Statype> ::id; 
#line 802
template < class _CvtTy, class _Byte, class _Statype >
[ [ nodiscard ] ] int _Codecvt_do_length (
    const _CvtTy & _Cvt, _Statype & _State, const _Byte * _First1, const _Byte * _Last1, size_t _Count ) {



    __pragma(warning(push))                            __pragma(warning(disable : 4996))
    using _Elem = typename _CvtTy :: intern_type;
    __pragma(warning(pop))

    _Adl_verify_range ( _First1, _Last1 );
    const auto _Old_first1 = _First1;

    while ( _Count > 0 && _First1 != _Last1 ) {
        const _Byte * _Mid1;
        _Elem * _Mid2;
        _Elem _Ch;



        __pragma(warning(push))                                __pragma(warning(disable : 4996))
        const auto _Result = _Cvt . _CvtTy :: do_in ( _State, _First1, _Last1, _Mid1, & _Ch, & _Ch + 1, _Mid2 );
        __pragma(warning(pop))

        if ( _Result != codecvt_base :: ok ) {
            if ( _Result == codecvt_base :: noconv ) {
                _First1 += ( :: std :: min ) ( static_cast < size_t > ( _Last1 - _First1 ), _Count );
            }

            break;
        }

        if ( _Mid2 == & _Ch + 1 ) {
            -- _Count;
        }

        _First1 = _Mid1;
    }

    return static_cast < int > ( ( :: std :: min ) ( _First1 - _Old_first1, ptrdiff_t { 2147483647 } ) );
}
#line 844
enum _Codecvt_mode { _Consume_header = 4, _Generate_header = 2}; 
#line 848
template<> class
#line 847
 __declspec(dllimport) codecvt< char16_t, char, _Mbstatet>  : public codecvt_base { 
#line 851
public: using intern_type = char16_t; 
#line 852
using extern_type = char; 
#line 853
using state_type = mbstate_t; 
#line 855
result in(mbstate_t &_State, const char *_First1, const char *_Last1, const char *&_Mid1, char16_t *
#line 856
_First2, char16_t *_Last2, char16_t *&_Mid2) const { 
#line 858
return this->do_in(_State, _First1, _Last1, _Mid1, _First2, _Last2, _Mid2); 
#line 859
} 
#line 861
result out(mbstate_t &_State, const char16_t *_First1, const char16_t *_Last1, const char16_t *&
#line 862
_Mid1, char *_First2, char *_Last2, char *&_Mid2) const { 
#line 864
return this->do_out(_State, _First1, _Last1, _Mid1, _First2, _Last2, _Mid2); 
#line 865
} 
#line 867
result unshift(mbstate_t &_State, char *_First2, char *_Last2, char *&_Mid2) const { 
#line 869
return this->do_unshift(_State, _First2, _Last2, _Mid2); 
#line 870
} 
#line 872
int length(mbstate_t &_State, const char *_First1, const char *_Last1, size_t _Count) const { 
#line 875
return this->do_length(_State, _First1, _Last1, _Count); 
#line 876
} 
#line 878
static locale::id id; 
#line 880
explicit codecvt(size_t _Refs = 0) : codecvt_base(_Refs), _Maxcode((1114111)), _Mode(_Consume_header) 
#line 881
{ 
#line 882
{ _Locinfo _Lobj; 
#line 883
this->_Init(_Lobj); 
#line 884
} 
#line 885
} 
#line 887
explicit codecvt(const _Locinfo &_Lobj, size_t _Refs = 0) : codecvt_base(_Refs), _Maxcode((1114111)), _Mode(_Consume_header) 
#line 888
{ 
#line 889
this->_Init(_Lobj); 
#line 890
} 
#line 892
codecvt(const _Locinfo &
#line 893
_Lobj, unsigned long _Maxcode_arg, _Codecvt_mode _Mode_arg, size_t _Refs = 0) : codecvt_base(_Refs), _Maxcode(_Maxcode_arg), _Mode(_Mode_arg) 
#line 894
{ 
#line 895
this->_Init(_Lobj); 
#line 896
} 
#line 898
static size_t __cdecl _Getcat(const locale::facet **_Ppf = 0, const locale *_Ploc = 0) { 
#line 900
if (_Ppf && (!(*_Ppf))) { 
#line 901
__pragma( warning(push)) __pragma( warning(disable : 4996)) 
#line 902
(*_Ppf) = (new std::codecvt< char16_t, char, _Mbstatet> (((_Locinfo)(_Ploc->_C_str())))); 
#line 903
__pragma( warning(pop)) 
#line 904
}  
#line 906
return 2; 
#line 907
} 
#line 910
protected: virtual ~codecvt() noexcept override { } 
#line 912
void _Init(const _Locinfo &) { } 
#line 914
virtual result do_in(mbstate_t &_State, const char *_First1, const char *_Last1, const char *&
#line 915
_Mid1, char16_t *_First2, char16_t *_Last2, char16_t *&_Mid2) const { 
#line 917
unsigned short *_Pstate = reinterpret_cast< unsigned short *>(&_State); 
#line 918
_Mid1 = _First1; 
#line 919
_Mid2 = _First2; 
#line 921
while ((_Mid1 != _Last1) && (_Mid2 != _Last2)) { 
#line 922
unsigned char _By = static_cast< unsigned char>(*_Mid1); 
#line 923
unsigned long _Ch; 
#line 924
int _Nextra; 
#line 925
int _Nskip; 
#line 927
if ((*_Pstate) > 1) { 
#line 928
if ((_By < 128) || (192 <= _By)) { 
#line 929
return codecvt< char16_t, char, _Mbstatet> ::error; 
#line 930
}  
#line 933
++_Mid1; 
#line 934
(*(_Mid2++)) = (static_cast< char16_t>((*_Pstate) | (_By & 63))); 
#line 935
(*_Pstate) = (1); 
#line 936
continue; 
#line 937
}  
#line 939
if (_By < 128U) { 
#line 940
_Ch = _By; 
#line 941
_Nextra = 0; 
#line 942
} else { if (_By < 192U) { 
#line 943
++_Mid1; 
#line 944
return codecvt< char16_t, char, _Mbstatet> ::error; 
#line 945
} else { if (_By < 224U) { 
#line 946
_Ch = (static_cast< unsigned long>(_By & 31)); 
#line 947
_Nextra = 1; 
#line 948
} else { if (_By < 240U) { 
#line 949
_Ch = (static_cast< unsigned long>(_By & 15)); 
#line 950
_Nextra = 2; 
#line 951
} else { if (_By < 248U) { 
#line 952
_Ch = (static_cast< unsigned long>(_By & 7)); 
#line 953
_Nextra = 3; 
#line 954
} else { 
#line 955
_Ch = (static_cast< unsigned long>(_By & 3)); 
#line 956
_Nextra = ((_By < 252) ? 4 : 5); 
#line 957
}  }  }  }  }  
#line 959
_Nskip = ((_Nextra < 3) ? 0 : 1); 
#line 960
_First1 = _Mid1; 
#line 962
if (_Nextra == 0) { 
#line 963
++_Mid1; 
#line 964
} else { if ((_Last1 - _Mid1) < ((_Nextra + 1) - _Nskip)) { 
#line 965
break; 
#line 966
} else { 
#line 967
for (++_Mid1; _Nskip < _Nextra; (--_Nextra), (++_Mid1)) { 
#line 968
if (((_By = (static_cast< unsigned char>(*_Mid1))) < 128U) || (192U <= _By)) { 
#line 969
return codecvt< char16_t, char, _Mbstatet> ::error; 
#line 970
} else { 
#line 971
_Ch = ((_Ch << 6) | (_By & 63)); 
#line 972
}  
#line 973
}  
#line 974
}  }  
#line 976
if (0 < _Nskip) { 
#line 977
_Ch <<= 6; 
#line 978
}  
#line 980
if ((((_Maxcode) < (1114111U)) ? _Maxcode : (1114111U)) < _Ch) { 
#line 981
return codecvt< char16_t, char, _Mbstatet> ::error; 
#line 982
}  
#line 984
if ((65535U) < _Ch) { 
#line 985
unsigned short _Ch0 = static_cast< unsigned short>((55296) | ((_Ch >> 10) - (64))); 
#line 987
(*(_Mid2++)) = (static_cast< char16_t>(_Ch0)); 
#line 988
(*_Pstate) = (static_cast< unsigned short>((56320) | (_Ch & (1023)))); 
#line 989
continue; 
#line 990
}  
#line 992
if (_Nskip != 0) { 
#line 993
if (_Mid1 == _Last1) { 
#line 994
_Mid1 = _First1; 
#line 995
break; 
#line 996
}  
#line 998
if (((_By = (static_cast< unsigned char>(*(_Mid1++)))) < 128U) || (192U <= _By)) { 
#line 999
return codecvt< char16_t, char, _Mbstatet> ::error; 
#line 1000
}  
#line 1002
_Ch |= (_By & 63); 
#line 1003
}  
#line 1005
if ((*_Pstate) == 0U) { 
#line 1006
(*_Pstate) = (1); 
#line 1008
if ((((_Mode) & (_Consume_header)) != 0) && (_Ch == (65279U))) { 
#line 1009
const result _Ans = this->do_in(_State, _Mid1, _Last1, _Mid1, _First2, _Last2, _Mid2); 
#line 1011
if (_Ans == (codecvt< char16_t, char, _Mbstatet> ::partial)) { 
#line 1012
(*_Pstate) = (0); 
#line 1013
_Mid1 = _First1; 
#line 1014
}  
#line 1016
return _Ans; 
#line 1017
}  
#line 1018
}  
#line 1020
(*(_Mid2++)) = (static_cast< char16_t>(_Ch)); 
#line 1021
}   
#line 1023
return (_First1 == _Mid1) ? codecvt< char16_t, char, _Mbstatet> ::partial : codecvt< char16_t, char, _Mbstatet> ::ok; 
#line 1024
} 
#line 1026
virtual result do_out(mbstate_t &_State, const char16_t *_First1, const char16_t *_Last1, const char16_t *&
#line 1027
_Mid1, char *_First2, char *_Last2, char *&_Mid2) const { 
#line 1029
unsigned short *_Pstate = reinterpret_cast< unsigned short *>(&_State); 
#line 1030
_Mid1 = _First1; 
#line 1031
_Mid2 = _First2; 
#line 1033
while ((_Mid1 != _Last1) && (_Mid2 != _Last2)) { 
#line 1034
unsigned long _Ch; 
#line 1035
const unsigned short _Ch1 = static_cast< unsigned short>(*_Mid1); 
#line 1036
bool _Save = false; 
#line 1038
if (1 < (*_Pstate)) { 
#line 1039
if ((_Ch1 < 56320U) || (57344U <= _Ch1)) { 
#line 1040
return codecvt< char16_t, char, _Mbstatet> ::error; 
#line 1041
}  
#line 1043
_Ch = (static_cast< unsigned long>(((*_Pstate) << 10) | (_Ch1 - 56320))); 
#line 1044
} else { if ((55296U <= _Ch1) && (_Ch1 < 56320U)) { 
#line 1045
_Ch = (static_cast< unsigned long>(((_Ch1 - 55296) + 64) << 10)); 
#line 1046
_Save = true; 
#line 1047
} else { 
#line 1048
_Ch = _Ch1; 
#line 1049
}  }  
#line 1051
char _By; 
#line 1052
int _Nextra; 
#line 1054
if (_Ch < (128U)) { 
#line 1055
_By = (static_cast< char>(_Ch)); 
#line 1056
_Nextra = 0; 
#line 1057
} else { if (_Ch < (2048U)) { 
#line 1058
_By = (static_cast< char>((192) | (_Ch >> 6))); 
#line 1059
_Nextra = 1; 
#line 1060
} else { if (_Ch < (65536U)) { 
#line 1061
_By = (static_cast< char>((224) | (_Ch >> 12))); 
#line 1062
_Nextra = 2; 
#line 1063
} else { 
#line 1064
_By = (static_cast< char>((240) | (_Ch >> 18))); 
#line 1065
_Nextra = 3; 
#line 1066
}  }  }  
#line 1068
int _Nput = (_Nextra < 3) ? _Nextra + 1 : (_Save ? 1 : 3); 
#line 1070
if ((_Last2 - _Mid2) < _Nput) { 
#line 1071
break; 
#line 1072
}  
#line 1074
if (((*_Pstate) == 0U) && (((_Mode) & (_Generate_header)) != 0)) { 
#line 1075
if ((_Last2 - _Mid2) < (3 + _Nput)) { 
#line 1076
break; 
#line 1077
}  
#line 1080
(*(_Mid2++)) = '\357'; 
#line 1081
(*(_Mid2++)) = '\273'; 
#line 1082
(*(_Mid2++)) = '\277'; 
#line 1083
}  
#line 1085
++_Mid1; 
#line 1086
if (_Save || (_Nextra < 3)) { 
#line 1087
(*(_Mid2++)) = _By; 
#line 1088
--_Nput; 
#line 1089
}  
#line 1091
for (; 0 < _Nput; --_Nput) { 
#line 1092
(*(_Mid2++)) = (static_cast< char>(((_Ch >> (6 * (--_Nextra))) & (63)) | (128))); 
#line 1093
}  
#line 1095
(*_Pstate) = (static_cast< unsigned short>(_Save ? _Ch >> 10 : (1))); 
#line 1096
}  
#line 1098
return (_First1 == _Mid1) ? codecvt< char16_t, char, _Mbstatet> ::partial : codecvt< char16_t, char, _Mbstatet> ::ok; 
#line 1099
} 
#line 1101
virtual result do_unshift(mbstate_t &_State, char *_First2, char *, char *&_Mid2) const { 
#line 1103
unsigned short *_Pstate = reinterpret_cast< unsigned short *>(&_State); 
#line 1104
_Mid2 = _First2; 
#line 1106
return (1U < (*_Pstate)) ? codecvt< char16_t, char, _Mbstatet> ::error : codecvt< char16_t, char, _Mbstatet> ::ok; 
#line 1107
} 
#line 1109
friend int _Codecvt_do_length<> (const std::codecvt< char16_t, char, _Mbstatet>  &, mbstate_t &, const char *, const char *, size_t); 
#line 1111
virtual int do_length(mbstate_t &
#line 1112
_State, const char *_First1, const char *_Last1, size_t _Count) const { 
#line 1113
return _Codecvt_do_length(*this, _State, _First1, _Last1, _Count); 
#line 1114
} 
#line 1116
virtual bool do_always_noconv() const noexcept override { 
#line 1118
return false; 
#line 1119
} 
#line 1121
virtual int do_max_length() const noexcept override { 
#line 1124
if (((_Mode) & (_Consume_header)) != 0) { 
#line 1125
return 9; 
#line 1126
}  
#line 1128
if (((_Mode) & (_Generate_header)) != 0) { 
#line 1129
return 7; 
#line 1130
}  
#line 1132
return 6; 
#line 1133
} 
#line 1135
virtual int do_encoding() const noexcept override { 
#line 1136
return 0; 
#line 1137
} 
#line 1140
private: unsigned long _Maxcode; 
#line 1141
_Codecvt_mode _Mode; 
#line 1142
}; 
#line 1146
template<> class
#line 1145
 __declspec(dllimport) codecvt< char32_t, char, _Mbstatet>  : public codecvt_base { 
#line 1149
public: using intern_type = char32_t; 
#line 1150
using extern_type = char; 
#line 1151
using state_type = mbstate_t; 
#line 1153
result in(mbstate_t &_State, const char *_First1, const char *_Last1, const char *&_Mid1, char32_t *
#line 1154
_First2, char32_t *_Last2, char32_t *&_Mid2) const { 
#line 1156
return this->do_in(_State, _First1, _Last1, _Mid1, _First2, _Last2, _Mid2); 
#line 1157
} 
#line 1159
result out(mbstate_t &_State, const char32_t *_First1, const char32_t *_Last1, const char32_t *&
#line 1160
_Mid1, char *_First2, char *_Last2, char *&_Mid2) const { 
#line 1162
return this->do_out(_State, _First1, _Last1, _Mid1, _First2, _Last2, _Mid2); 
#line 1163
} 
#line 1165
result unshift(mbstate_t &_State, char *_First2, char *_Last2, char *&_Mid2) const { 
#line 1167
return this->do_unshift(_State, _First2, _Last2, _Mid2); 
#line 1168
} 
#line 1170
int length(mbstate_t &_State, const char *_First1, const char *_Last1, size_t _Count) const { 
#line 1173
return this->do_length(_State, _First1, _Last1, _Count); 
#line 1174
} 
#line 1176
static locale::id id; 
#line 1178
explicit codecvt(size_t _Refs = 0) : codecvt_base(_Refs), _Maxcode((4294967295U)), _Mode(_Consume_header) 
#line 1179
{ 
#line 1180
{ _Locinfo _Lobj; 
#line 1181
this->_Init(_Lobj); 
#line 1182
} 
#line 1183
} 
#line 1185
explicit codecvt(const _Locinfo &_Lobj, size_t _Refs = 0) : codecvt_base(_Refs), _Maxcode((4294967295U)), _Mode(_Consume_header) 
#line 1186
{ 
#line 1187
this->_Init(_Lobj); 
#line 1188
} 
#line 1190
codecvt(const _Locinfo &
#line 1191
_Lobj, unsigned long _Maxcode_arg, _Codecvt_mode _Mode_arg, size_t _Refs = 0) : codecvt_base(_Refs), _Maxcode(_Maxcode_arg), _Mode(_Mode_arg) 
#line 1192
{ 
#line 1193
this->_Init(_Lobj); 
#line 1194
} 
#line 1196
static size_t __cdecl _Getcat(const locale::facet **_Ppf = 0, const locale *_Ploc = 0) { 
#line 1198
if (_Ppf && (!(*_Ppf))) { 
#line 1199
__pragma( warning(push)) __pragma( warning(disable : 4996)) 
#line 1200
(*_Ppf) = (new std::codecvt< char32_t, char, _Mbstatet> (((_Locinfo)(_Ploc->_C_str())))); 
#line 1201
__pragma( warning(pop)) 
#line 1202
}  
#line 1204
return 2; 
#line 1205
} 
#line 1208
protected: virtual ~codecvt() noexcept override { } 
#line 1210
void _Init(const _Locinfo &) { } 
#line 1212
virtual result do_in(mbstate_t &_State, const char *_First1, const char *_Last1, const char *&
#line 1213
_Mid1, char32_t *_First2, char32_t *_Last2, char32_t *&_Mid2) const { 
#line 1215
char *_Pstate = reinterpret_cast< char *>(&_State); 
#line 1216
_Mid1 = _First1; 
#line 1217
_Mid2 = _First2; 
#line 1219
while ((_Mid1 != _Last1) && (_Mid2 != _Last2)) { 
#line 1220
unsigned char _By = static_cast< unsigned char>(*_Mid1); 
#line 1221
unsigned long _Ch; 
#line 1222
int _Nextra; 
#line 1224
if (_By < 128U) { 
#line 1225
_Ch = _By; 
#line 1226
_Nextra = 0; 
#line 1227
} else { if (_By < 192U) { 
#line 1228
++_Mid1; 
#line 1229
return codecvt< char32_t, char, _Mbstatet> ::error; 
#line 1230
} else { if (_By < 224U) { 
#line 1231
_Ch = (static_cast< unsigned long>(_By & 31)); 
#line 1232
_Nextra = 1; 
#line 1233
} else { if (_By < 240U) { 
#line 1234
_Ch = (static_cast< unsigned long>(_By & 15)); 
#line 1235
_Nextra = 2; 
#line 1236
} else { if (_By < 248U) { 
#line 1237
_Ch = (static_cast< unsigned long>(_By & 7)); 
#line 1238
_Nextra = 3; 
#line 1239
} else { 
#line 1240
_Ch = (static_cast< unsigned long>(_By & 3)); 
#line 1241
_Nextra = ((_By < 252) ? 4 : 5); 
#line 1242
}  }  }  }  }  
#line 1244
if (_Nextra == 0) { 
#line 1245
++_Mid1; 
#line 1246
} else { if ((_Last1 - _Mid1) < (_Nextra + 1)) { 
#line 1247
break; 
#line 1248
} else { 
#line 1249
for (++_Mid1; 0 < _Nextra; (--_Nextra), (++_Mid1)) { 
#line 1250
if (((_By = (static_cast< unsigned char>(*_Mid1))) < 128U) || (192U <= _By)) { 
#line 1251
return codecvt< char32_t, char, _Mbstatet> ::error; 
#line 1252
} else { 
#line 1253
_Ch = ((_Ch << 6) | (_By & 63)); 
#line 1254
}  
#line 1255
}  
#line 1256
}  }  
#line 1258
if ((*_Pstate) == 0) { 
#line 1259
(*_Pstate) = (1); 
#line 1261
if ((((_Mode) & (_Consume_header)) != 0) && (_Ch == (65279U))) { 
#line 1262
const result _Ans = this->do_in(_State, _Mid1, _Last1, _Mid1, _First2, _Last2, _Mid2); 
#line 1264
if (_Ans == (codecvt< char32_t, char, _Mbstatet> ::partial)) { 
#line 1265
(*_Pstate) = (0); 
#line 1266
_Mid1 = _First1; 
#line 1267
}  
#line 1268
return _Ans; 
#line 1269
}  
#line 1270
}  
#line 1272
if ((_Maxcode) < _Ch) { 
#line 1273
return codecvt< char32_t, char, _Mbstatet> ::error; 
#line 1274
}  
#line 1276
(*(_Mid2++)) = (static_cast< char32_t>(_Ch)); 
#line 1277
}  
#line 1279
return (_First1 == _Mid1) ? codecvt< char32_t, char, _Mbstatet> ::partial : codecvt< char32_t, char, _Mbstatet> ::ok; 
#line 1280
} 
#line 1282
virtual result do_out(mbstate_t &_State, const char32_t *_First1, const char32_t *_Last1, const char32_t *&
#line 1283
_Mid1, char *_First2, char *_Last2, char *&_Mid2) const { 
#line 1285
char *_Pstate = reinterpret_cast< char *>(&_State); 
#line 1286
_Mid1 = _First1; 
#line 1287
_Mid2 = _First2; 
#line 1289
while ((_Mid1 != _Last1) && (_Mid2 != _Last2)) { 
#line 1290
char _By; 
#line 1291
int _Nextra; 
#line 1292
unsigned long _Ch = static_cast< unsigned long>(*_Mid1); 
#line 1294
if ((_Maxcode) < _Ch) { 
#line 1295
return codecvt< char32_t, char, _Mbstatet> ::error; 
#line 1296
}  
#line 1298
if (_Ch < (128U)) { 
#line 1299
_By = (static_cast< char>(_Ch)); 
#line 1300
_Nextra = 0; 
#line 1301
} else { if (_Ch < (2048U)) { 
#line 1302
_By = (static_cast< char>((192) | (_Ch >> 6))); 
#line 1303
_Nextra = 1; 
#line 1304
} else { if (_Ch < (65536U)) { 
#line 1305
_By = (static_cast< char>((224) | (_Ch >> 12))); 
#line 1306
_Nextra = 2; 
#line 1307
} else { if (_Ch < (2097152U)) { 
#line 1308
_By = (static_cast< char>((240) | (_Ch >> 18))); 
#line 1309
_Nextra = 3; 
#line 1310
} else { if (_Ch < (67108864U)) { 
#line 1311
_By = (static_cast< char>((248) | (_Ch >> 24))); 
#line 1312
_Nextra = 4; 
#line 1313
} else { 
#line 1314
_By = (static_cast< char>((252) | ((_Ch >> 30) & (3)))); 
#line 1315
_Nextra = 5; 
#line 1316
}  }  }  }  }  
#line 1318
if ((*_Pstate) == 0) { 
#line 1319
(*_Pstate) = (1); 
#line 1320
if (((_Mode) & (_Generate_header)) != 0) { 
#line 1321
if ((_Last2 - _Mid2) < ((3 + 1) + _Nextra)) { 
#line 1322
return codecvt< char32_t, char, _Mbstatet> ::partial; 
#line 1323
}  
#line 1326
(*(_Mid2++)) = '\357'; 
#line 1327
(*(_Mid2++)) = '\273'; 
#line 1328
(*(_Mid2++)) = '\277'; 
#line 1329
}  
#line 1330
}  
#line 1332
if ((_Last2 - _Mid2) < (1 + _Nextra)) { 
#line 1333
break; 
#line 1334
}  
#line 1336
++_Mid1; 
#line 1337
for ((*(_Mid2++)) = _By; 0 < _Nextra;) { 
#line 1338
(*(_Mid2++)) = (static_cast< char>(((_Ch >> (6 * (--_Nextra))) & (63)) | (128))); 
#line 1339
}  
#line 1340
}  
#line 1341
return (_First1 == _Mid1) ? codecvt< char32_t, char, _Mbstatet> ::partial : codecvt< char32_t, char, _Mbstatet> ::ok; 
#line 1342
} 
#line 1344
virtual result do_unshift(mbstate_t &, char *_First2, char *, char *&_Mid2) const { 
#line 1346
_Mid2 = _First2; 
#line 1347
return codecvt< char32_t, char, _Mbstatet> ::noconv; 
#line 1348
} 
#line 1350
friend int _Codecvt_do_length<> (const std::codecvt< char32_t, char, _Mbstatet>  &, mbstate_t &, const char *, const char *, size_t); 
#line 1352
virtual int do_length(mbstate_t &
#line 1353
_State, const char *_First1, const char *_Last1, size_t _Count) const { 
#line 1354
return _Codecvt_do_length(*this, _State, _First1, _Last1, _Count); 
#line 1355
} 
#line 1357
virtual bool do_always_noconv() const noexcept override { 
#line 1359
return false; 
#line 1360
} 
#line 1362
virtual int do_max_length() const noexcept override { 
#line 1364
return (((_Mode) & ((_Consume_header) | (_Generate_header))) != 0) ? 9 : 6; 
#line 1365
} 
#line 1367
virtual int do_encoding() const noexcept override { 
#line 1369
return (((_Mode) & ((_Consume_header) | (_Generate_header))) != 0) ? -1 : 0; 
#line 1371
} 
#line 1374
private: unsigned long _Maxcode; 
#line 1375
_Codecvt_mode _Mode; 
#line 1376
}; 
#line 1923 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\xlocale"
template<> class __declspec(dllimport) codecvt< __wchar_t, char, _Mbstatet>  : public codecvt_base { 
#line 1926
public: using intern_type = __wchar_t; 
#line 1927
using extern_type = char; 
#line 1928
using state_type = mbstate_t; 
#line 1930
result in(mbstate_t &_State, const char *_First1, const char *_Last1, const char *&_Mid1, __wchar_t *
#line 1931
_First2, __wchar_t *_Last2, __wchar_t *&_Mid2) const { 
#line 1933
return this->do_in(_State, _First1, _Last1, _Mid1, _First2, _Last2, _Mid2); 
#line 1934
} 
#line 1936
result out(mbstate_t &_State, const __wchar_t *_First1, const __wchar_t *_Last1, const __wchar_t *&
#line 1937
_Mid1, char *_First2, char *_Last2, char *&_Mid2) const { 
#line 1939
return this->do_out(_State, _First1, _Last1, _Mid1, _First2, _Last2, _Mid2); 
#line 1940
} 
#line 1942
result unshift(mbstate_t &_State, char *_First2, char *_Last2, char *&_Mid2) const { 
#line 1944
return this->do_unshift(_State, _First2, _Last2, _Mid2); 
#line 1945
} 
#line 1947
int length(mbstate_t &_State, const char *_First1, const char *_Last1, size_t _Count) const { 
#line 1950
return this->do_length(_State, _First1, _Last1, _Count); 
#line 1951
} 
#line 1953
static locale::id id; 
#line 1955
explicit codecvt(size_t _Refs = 0) : codecvt_base(_Refs) { 
#line 1956
{ _Locinfo _Lobj; 
#line 1957
this->_Init(_Lobj); 
#line 1958
} 
#line 1959
} 
#line 1961
explicit codecvt(const _Locinfo &_Lobj, size_t _Refs = 0) : codecvt_base(_Refs) { 
#line 1962
this->_Init(_Lobj); 
#line 1963
} 
#line 1965
static size_t __cdecl _Getcat(const locale::facet **_Ppf = 0, const locale *_Ploc = 0) { 
#line 1967
if (_Ppf && (!(*_Ppf))) { 
#line 1968
(*_Ppf) = (new std::codecvt< __wchar_t, char, _Mbstatet> (((_Locinfo)(_Ploc->_C_str())))); 
#line 1969
}  
#line 1971
return 2; 
#line 1972
} 
#line 1975
protected: virtual ~codecvt() noexcept override { } 
#line 1977
void _Init(const _Locinfo &_Lobj) { 
#line 1978
(_Cvt) = _Lobj._Getcvt(); 
#line 1979
} 
#line 1981
virtual result do_in(mbstate_t &, const char *_First1, const char *_Last1, const char *&_Mid1, __wchar_t *
#line 1982
_First2, __wchar_t *_Last2, __wchar_t *&_Mid2) const { 
#line 1984
mbstate_t _Mystate{}; 
#line 1985
_Adl_verify_range(_First1, _Last1); 
#line 1986
_Adl_verify_range(_First2, _Last2); 
#line 1987
_Mid1 = _First1; 
#line 1988
_Mid2 = _First2; 
#line 1989
for (; ;) { 
#line 1990
if (_Mid1 == _Last1) { 
#line 1991
return ok; 
#line 1992
}  
#line 1994
if (_Mid2 == _Last2) { 
#line 1995
return partial; 
#line 1996
}  
#line 1998
int _Bytes = _Mbrtowc(_Mid2, _Mid1, static_cast< size_t>(_Last1 - _Mid1), &_Mystate, &(_Cvt)); 
#line 1999
switch (_Bytes) { 
#line 2000
case -2:  
#line 2001
return partial; 
#line 2003
case -1:  
#line 2004
return error; 
#line 2006
case 0:  
#line 2007
_Bytes = 1; 
#line 2008
; 
#line 2010
default:  
#line 2011
_Mid1 += _Bytes; 
#line 2012
++_Mid2; 
#line 2013
break; 
#line 2014
}  
#line 2015
}  
#line 2016
} 
#line 2018
virtual result do_out(mbstate_t &_State, const __wchar_t *_First1, const __wchar_t *_Last1, const __wchar_t *&
#line 2019
_Mid1, char *_First2, char *_Last2, char *&_Mid2) const { 
#line 2021
_Adl_verify_range(_First1, _Last1); 
#line 2022
_Adl_verify_range(_First2, _Last2); 
#line 2023
_Mid1 = _First1; 
#line 2024
_Mid2 = _First2; 
#line 2025
int _Bytes; 
#line 2027
while ((_Mid1 != _Last1) && (_Mid2 != _Last2)) { 
#line 2028
if ((5) <= (_Last2 - _Mid2)) { 
#line 2029
if ((_Bytes = _Wcrtomb(_Mid2, *_Mid1, &_State, &(_Cvt))) < 0) { 
#line 2030
return error; 
#line 2031
} else { 
#line 2032
++_Mid1; 
#line 2033
_Mid2 += _Bytes; 
#line 2034
}  
#line 2035
} else { 
#line 2036
char _Buf[5]; 
#line 2037
mbstate_t _Stsave = _State; 
#line 2039
if ((_Bytes = _Wcrtomb(_Buf, *_Mid1, &_State, &(_Cvt))) < 0) { 
#line 2040
return error; 
#line 2041
} else { if ((_Last2 - _Mid2) < _Bytes) { 
#line 2042
_State = _Stsave; 
#line 2043
break; 
#line 2044
} else { 
#line 2045
::memcpy(_Mid2, _Buf, static_cast< size_t>(_Bytes)); 
#line 2046
++_Mid1; 
#line 2047
_Mid2 += _Bytes; 
#line 2048
}  }  
#line 2049
}  
#line 2050
}  
#line 2052
return (_Mid1 == _Last1) ? ok : partial; 
#line 2053
} 
#line 2055
virtual result do_unshift(mbstate_t &_State, char *_First2, char *_Last2, char *&_Mid2) const { 
#line 2057
_Adl_verify_range(_First2, _Last2); 
#line 2058
_Mid2 = _First2; 
#line 2059
result _Ans = (ok); 
#line 2060
int _Bytes; 
#line 2061
char _Buf[5]; 
#line 2062
mbstate_t _Stsave = _State; 
#line 2064
if ((_Bytes = _Wcrtomb(_Buf, L'\x0', &_State, &(_Cvt))) <= 0) { 
#line 2065
_Ans = (error); 
#line 2066
} else { if ((_Last2 - _Mid2) < (--_Bytes)) { 
#line 2067
_State = _Stsave; 
#line 2068
_Ans = (partial); 
#line 2069
} else { if (0 < _Bytes) { 
#line 2070
::memcpy(_Mid2, _Buf, static_cast< size_t>(_Bytes)); 
#line 2071
_Mid2 += _Bytes; 
#line 2072
}  }  }  
#line 2073
return _Ans; 
#line 2074
} 
#line 2076
virtual int do_length(mbstate_t &
#line 2077
_State, const char *_First1, const char *_Last1, size_t _Count) const { 
#line 2080
_Adl_verify_range(_First1, _Last1); 
#line 2081
const auto _Old_first1 = _First1; 
#line 2083
for (; (_Count > (0U)) && (_First1 != _Last1); --_Count) { 
#line 2084
__wchar_t _Ch; 
#line 2085
int _Bytes = _Mbrtowc(&_Ch, _First1, static_cast< size_t>(_Last1 - _First1), &_State, &(_Cvt)); 
#line 2086
if (_Bytes < 0) { 
#line 2087
break; 
#line 2088
}  
#line 2090
if (_Bytes == 0) { 
#line 2091
_Bytes = 1; 
#line 2092
}  
#line 2095
_First1 += _Bytes; 
#line 2096
}  
#line 2098
return static_cast< int>((::std::min)(_First1 - _Old_first1, (ptrdiff_t)2147483647)); 
#line 2099
} 
#line 2101
virtual bool do_always_noconv() const noexcept override { 
#line 2103
return false; 
#line 2104
} 
#line 2106
virtual int do_max_length() const noexcept override { 
#line 2108
return static_cast< int>((_Cvt)._Mbcurmax); 
#line 2109
} 
#line 2111
virtual int do_encoding() const noexcept override { 
#line 2113
return ((_Cvt)._Mbcurmax) == (1); 
#line 2114
} 
#line 2117
private: _Locinfo::_Cvtvec _Cvt; 
#line 2118
}; 
#line 2122
template<> class __declspec(dllimport) codecvt< unsigned short, char, _Mbstatet>  : public codecvt_base { 
#line 2125
public: using intern_type = unsigned short; 
#line 2126
using extern_type = char; 
#line 2127
using state_type = mbstate_t; 
#line 2129
result in(mbstate_t &_State, const char *_First1, const char *_Last1, const char *&_Mid1, unsigned short *
#line 2130
_First2, unsigned short *_Last2, unsigned short *&_Mid2) const { 
#line 2132
return this->do_in(_State, _First1, _Last1, _Mid1, _First2, _Last2, _Mid2); 
#line 2133
} 
#line 2135
result out(mbstate_t &_State, const unsigned short *_First1, const unsigned short *_Last1, const unsigned short *&
#line 2136
_Mid1, char *_First2, char *_Last2, char *&_Mid2) const { 
#line 2138
return this->do_out(_State, _First1, _Last1, _Mid1, _First2, _Last2, _Mid2); 
#line 2139
} 
#line 2141
result unshift(mbstate_t &_State, char *_First2, char *_Last2, char *&_Mid2) const { 
#line 2143
return this->do_unshift(_State, _First2, _Last2, _Mid2); 
#line 2144
} 
#line 2146
int length(mbstate_t &_State, const char *_First1, const char *_Last1, size_t _Count) const { 
#line 2149
return this->do_length(_State, _First1, _Last1, _Count); 
#line 2150
} 
#line 2152
static locale::id id; 
#line 2154
explicit codecvt(size_t _Refs = 0) : codecvt_base(_Refs) { 
#line 2155
{ _Locinfo _Lobj; 
#line 2156
this->_Init(_Lobj); 
#line 2157
} 
#line 2158
} 
#line 2160
explicit codecvt(const _Locinfo &_Lobj, size_t _Refs = 0) : codecvt_base(_Refs) { 
#line 2161
this->_Init(_Lobj); 
#line 2162
} 
#line 2164
static size_t __cdecl _Getcat(const locale::facet **_Ppf = 0, const locale *_Ploc = 0) { 
#line 2166
if (_Ppf && (!(*_Ppf))) { 
#line 2167
(*_Ppf) = (new std::codecvt< unsigned short, char, _Mbstatet> (((_Locinfo)(_Ploc->_C_str())))); 
#line 2168
}  
#line 2170
return 2; 
#line 2171
} 
#line 2174
protected: virtual ~codecvt() noexcept override { } 
#line 2176
void _Init(const _Locinfo &_Lobj) { 
#line 2177
(_Cvt) = _Lobj._Getcvt(); 
#line 2178
} 
#line 2180
virtual result do_in(mbstate_t &, const char *_First1, const char *_Last1, const char *&_Mid1, unsigned short *
#line 2181
_First2, unsigned short *_Last2, unsigned short *&_Mid2) const { 
#line 2183
mbstate_t _Mystate{}; 
#line 2184
_Adl_verify_range(_First1, _Last1); 
#line 2185
_Adl_verify_range(_First2, _Last2); 
#line 2186
_Mid1 = _First1; 
#line 2187
_Mid2 = _First2; 
#line 2188
for (; ;) { 
#line 2189
if (_Mid1 == _Last1) { 
#line 2190
return ok; 
#line 2191
}  
#line 2193
if (_Mid2 == _Last2) { 
#line 2194
return partial; 
#line 2195
}  
#line 2197
int _Bytes = _Mbrtowc(reinterpret_cast< __wchar_t *>(_Mid2), _Mid1, static_cast< size_t>(_Last1 - _Mid1), &_Mystate, &(_Cvt)); 
#line 2199
switch (_Bytes) { 
#line 2200
case -2:  
#line 2201
return partial; 
#line 2203
case -1:  
#line 2204
return error; 
#line 2206
case 0:  
#line 2207
_Bytes = 1; 
#line 2208
; 
#line 2210
default:  
#line 2211
_Mid1 += _Bytes; 
#line 2212
++_Mid2; 
#line 2213
break; 
#line 2214
}  
#line 2215
}  
#line 2216
} 
#line 2218
virtual result do_out(mbstate_t &_State, const unsigned short *_First1, const unsigned short *
#line 2219
_Last1, const unsigned short *&_Mid1, char *_First2, char *_Last2, char *&_Mid2) const { 
#line 2221
_Adl_verify_range(_First1, _Last1); 
#line 2222
_Adl_verify_range(_First2, _Last2); 
#line 2223
_Mid1 = _First1; 
#line 2224
_Mid2 = _First2; 
#line 2225
int _Bytes; 
#line 2227
while ((_Mid1 != _Last1) && (_Mid2 != _Last2)) { 
#line 2228
if ((5) <= (_Last2 - _Mid2)) { 
#line 2229
if ((_Bytes = _Wcrtomb(_Mid2, *_Mid1, &_State, &(_Cvt))) < 0) { 
#line 2230
return error; 
#line 2231
} else { 
#line 2232
++_Mid1; 
#line 2233
_Mid2 += _Bytes; 
#line 2234
}  
#line 2235
} else { 
#line 2236
char _Buf[5]; 
#line 2237
mbstate_t _Stsave = _State; 
#line 2239
if ((_Bytes = _Wcrtomb(_Buf, *_Mid1, &_State, &(_Cvt))) < 0) { 
#line 2240
return error; 
#line 2241
} else { if ((_Last2 - _Mid2) < _Bytes) { 
#line 2242
_State = _Stsave; 
#line 2243
break; 
#line 2244
} else { 
#line 2245
::memcpy(_Mid2, _Buf, static_cast< size_t>(_Bytes)); 
#line 2246
++_Mid1; 
#line 2247
_Mid2 += _Bytes; 
#line 2248
}  }  
#line 2249
}  
#line 2250
}  
#line 2252
return (_Mid1 == _Last1) ? ok : partial; 
#line 2253
} 
#line 2255
virtual result do_unshift(mbstate_t &_State, char *_First2, char *_Last2, char *&_Mid2) const { 
#line 2257
_Adl_verify_range(_First2, _Last2); 
#line 2258
_Mid2 = _First2; 
#line 2259
result _Ans = (ok); 
#line 2260
int _Bytes; 
#line 2261
char _Buf[5]; 
#line 2262
mbstate_t _Stsave = _State; 
#line 2264
if ((_Bytes = _Wcrtomb(_Buf, L'\x0', &_State, &(_Cvt))) <= 0) { 
#line 2265
_Ans = (error); 
#line 2266
} else { if ((_Last2 - _Mid2) < (--_Bytes)) { 
#line 2267
_State = _Stsave; 
#line 2268
_Ans = (partial); 
#line 2269
} else { if (0 < _Bytes) { 
#line 2270
::memcpy(_Mid2, _Buf, static_cast< size_t>(_Bytes)); 
#line 2271
_Mid2 += _Bytes; 
#line 2272
}  }  }  
#line 2274
return _Ans; 
#line 2275
} 
#line 2277
virtual int do_length(mbstate_t &
#line 2278
_State, const char *_First1, const char *_Last1, size_t _Count) const { 
#line 2281
_Adl_verify_range(_First1, _Last1); 
#line 2282
const auto _Old_first1 = _First1; 
#line 2284
for (; (_Count > (0U)) && (_First1 != _Last1); --_Count) { 
#line 2285
__wchar_t _Ch; 
#line 2286
int _Bytes = _Mbrtowc(&_Ch, _First1, static_cast< size_t>(_Last1 - _First1), &_State, &(_Cvt)); 
#line 2287
if (_Bytes < 0) { 
#line 2288
break; 
#line 2289
}  
#line 2291
if (_Bytes == 0) { 
#line 2292
_Bytes = 1; 
#line 2293
}  
#line 2296
_First1 += _Bytes; 
#line 2297
}  
#line 2299
return static_cast< int>((::std::min)(_First1 - _Old_first1, (ptrdiff_t)2147483647)); 
#line 2300
} 
#line 2302
virtual bool do_always_noconv() const noexcept override { 
#line 2304
return false; 
#line 2305
} 
#line 2307
virtual int do_max_length() const noexcept override { 
#line 2309
return static_cast< int>((_Cvt)._Mbcurmax); 
#line 2310
} 
#line 2312
virtual int do_encoding() const noexcept override { 
#line 2314
return ((_Cvt)._Mbcurmax) == 1U; 
#line 2315
} 
#line 2318
private: _Locinfo::_Cvtvec _Cvt; 
#line 2319
}; 
#line 2322 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\xlocale"
template < class _Elem, class _Byte, class _Statype >
class codecvt_byname : public codecvt < _Elem, _Byte, _Statype > {
public :
    static_assert ( ! 0
                      || _Is_any_of_v < codecvt_byname,



                          codecvt_byname < char, char, mbstate_t >, codecvt_byname < wchar_t, char, mbstate_t >>,
        "Unsupported facet specialization; see N4800 27.3.1.1.1 [locale.category]. Either use a Standard specialization or define _ENFORC" "E_FACET_SPECIALIZATIONS=0 to suppress this error." );

    explicit codecvt_byname ( const char * _Locname, size_t _Refs = 0 )
        : codecvt < _Elem, _Byte, _Statype > ( _Locinfo ( _Locname ), _Refs ) { }

    explicit codecvt_byname ( const string & _Str, size_t _Refs = 0 )
        : codecvt < _Elem, _Byte, _Statype > ( _Locinfo ( _Str . c_str ( ) ), _Refs ) { }

protected :
     ~ codecvt_byname ( ) noexcept override { }
};
#line 2353
struct __declspec(dllimport) ctype_base : public locale::facet { 
#line 2354
enum { 
#line 2355
alnum = (((4 | 2) | 1) | 256), 
#line 2356
alpha = ((2 | 1) | 256), 
#line 2357
cntrl = 32, 
#line 2358
digit = 4, 
#line 2359
graph = ((((4 | 2) | 16) | 1) | 256), 
#line 2360
lower = 2, 
#line 2361
print = ((((((4 | 2) | 16) | 64) | 1) | 256) | 128), 
#line 2362
punct = 16, 
#line 2363
space = (8 | 64), 
#line 2364
upper = 1, 
#line 2365
xdigit = 128, 
#line 2366
blank = (8 | 64)
#line 2367
}; 
#line 2368
using mask = short; 
#line 2370
ctype_base(size_t _Refs = 0) : locale::facet(_Refs) { } 
#line 2372
virtual ~ctype_base() noexcept override { } 
#line 2373
}; 
#line 2385
template < class _Elem >
class ctype : public ctype_base {
public :

    static_assert ( ! 0 || _Always_false < _Elem >, "Unsupported facet specialization; see N4800 27.3.1.1.1 [locale.category]. Either use a Standard specialization or define _ENFORC" "E_FACET_SPECIALIZATIONS=0 to suppress this error." );

    using char_type = _Elem;

    bool is ( mask _Maskval, _Elem _Ch ) const {
        return do_is ( _Maskval, _Ch );
    }

    const _Elem * is ( const _Elem * _First, const _Elem * _Last,
        mask * _Dest ) const {
        return do_is ( _First, _Last, _Dest );
    }

    const _Elem * scan_is ( mask _Maskval, const _Elem * _First,
        const _Elem * _Last ) const {
        return do_scan_is ( _Maskval, _First, _Last );
    }

    const _Elem * scan_not ( mask _Maskval, const _Elem * _First,
        const _Elem * _Last ) const {
        return do_scan_not ( _Maskval, _First, _Last );
    }

    _Elem tolower ( _Elem _Ch ) const {
        return do_tolower ( _Ch );
    }

    const _Elem * tolower (
        _Elem * _First, const _Elem * _Last ) const {
        return do_tolower ( _First, _Last );
    }

    _Elem toupper ( _Elem _Ch ) const {
        return do_toupper ( _Ch );
    }

    const _Elem * toupper (
        _Elem * _First, const _Elem * _Last ) const {
        return do_toupper ( _First, _Last );
    }

    _Elem widen ( char _Byte ) const {
        return do_widen ( _Byte );
    }

    const char * widen ( const char * _First, const char * _Last,
        _Elem * _Dest ) const {
        return do_widen ( _First, _Last, _Dest );
    }

    char narrow ( _Elem _Ch, char _Dflt = '\000' ) const {
        return do_narrow ( _Ch, _Dflt );
    }

    const _Elem * narrow ( const _Elem * _First, const _Elem * _Last, char _Dflt,
        char * _Dest ) const {
        return do_narrow ( _First, _Last, _Dflt, _Dest );
    }

     static locale :: id id;

    explicit ctype ( size_t _Refs = 0 ) : ctype_base ( _Refs ) {
        { _Locinfo _Lobj;
        _Init ( _Lobj );
        }
    }

     ctype ( const _Locinfo & _Lobj, size_t _Refs = 0 ) : ctype_base ( _Refs ) {
        _Init ( _Lobj );
    }

    static size_t __cdecl _Getcat ( const locale :: facet * * _Ppf = nullptr, const locale * _Ploc = nullptr ) {
        if ( _Ppf && ! * _Ppf ) {
            * _Ppf = new ctype < _Elem > ( _Locinfo ( _Ploc -> _C_str ( ) ) );
        }

        return 2;
    }

protected :
     ~ ctype ( ) noexcept override {
        if ( _Ctype . _Delfl ) {
            :: free ( const_cast < short * > ( _Ctype . _Table ) );
        }

        :: free ( _Ctype . _LocaleName );
    }

    void _Init ( const _Locinfo & _Lobj ) {
        _Ctype = _Lobj . _Getctype ( );
        _Cvt = _Lobj . _Getcvt ( );
    }

    virtual bool do_is (
        mask _Maskval, _Elem _Ch ) const {
        return ( _Ctype . _Table [ static_cast < unsigned char > ( narrow ( _Ch ) ) ] & _Maskval ) != 0;
    }

    virtual const _Elem * do_is ( const _Elem * _First, const _Elem * _Last,
        mask * _Dest ) const {
        _Adl_verify_range ( _First, _Last );
        for (; _First != _Last; ++ _First, ++ _Dest ) {
            * _Dest = _Ctype . _Table [ static_cast < unsigned char > ( narrow ( * _First ) ) ];
        }

        return _First;
    }

    virtual const _Elem * do_scan_is ( mask _Maskval, const _Elem * _First,
        const _Elem * _Last ) const {
        _Adl_verify_range ( _First, _Last );
        while ( _First != _Last && ! is ( _Maskval, * _First ) ) {
            ++ _First;
        }

        return _First;
    }

    virtual const _Elem * do_scan_not ( mask _Maskval, const _Elem * _First,
        const _Elem * _Last ) const {
        _Adl_verify_range ( _First, _Last );
        while ( _First != _Last && is ( _Maskval, * _First ) ) {
            ++ _First;
        }

        return _First;
    }

    virtual _Elem do_tolower ( _Elem _Ch ) const {
        unsigned char _Byte = static_cast < unsigned char > ( narrow ( _Ch, '\000' ) );
        if ( _Byte == '\000' ) {
            return _Ch;
        }

        return widen ( static_cast < char > ( _Tolower ( _Byte, & _Ctype ) ) );
    }

    virtual const _Elem * do_tolower ( _Elem * _First,
        const _Elem * _Last ) const {
        _Adl_verify_range ( _First, _Last );
        for (; _First != _Last; ++ _First ) {
            unsigned char _Byte = static_cast < unsigned char > ( narrow ( * _First, '\000' ) );
            if ( _Byte != '\000' ) {
                * _First = ( widen ( static_cast < char > ( _Tolower ( _Byte, & _Ctype ) ) ) );
            }
        }
        return _First;
    }

    virtual _Elem do_toupper ( _Elem _Ch ) const {
        unsigned char _Byte = static_cast < unsigned char > ( narrow ( _Ch, '\000' ) );
        if ( _Byte == '\000' ) {
            return _Ch;
        }

        return widen ( static_cast < char > ( _Toupper ( _Byte, & _Ctype ) ) );
    }

    virtual const _Elem * do_toupper ( _Elem * _First,
        const _Elem * _Last ) const {
        _Adl_verify_range ( _First, _Last );
        for (; _First != _Last; ++ _First ) {
            unsigned char _Byte = static_cast < unsigned char > ( narrow ( * _First, '\000' ) );
            if ( _Byte != '\000' ) {
                * _First = ( widen ( static_cast < char > ( _Toupper ( _Byte, & _Ctype ) ) ) );
            }
        }

        return _First;
    }

    virtual _Elem do_widen ( char _Byte ) const {
        return _Maklocchr ( _Byte, static_cast < _Elem * > ( nullptr ), _Cvt );
    }

    virtual const char * do_widen (
        const char * _First, const char * _Last, _Elem * _Dest ) const {
        _Adl_verify_range ( _First, _Last );
        for (; _First != _Last; ++ _First, ++ _Dest ) {
            * _Dest = _Maklocchr ( * _First, static_cast < _Elem * > ( nullptr ), _Cvt );
        }

        return _First;
    }

    char _Donarrow ( _Elem _Ch, char _Dflt ) const {
        char _Byte;
        if ( _Ch == _Elem { } ) {
            return '\000';
        }

        if ( ( _Byte = _Maklocbyte ( _Ch, _Cvt ) ) == '\000' ) {
            return _Dflt;
        }

        return _Byte;
    }

    virtual char do_narrow ( _Elem _Ch, char _Dflt ) const {
        return _Donarrow ( _Ch, _Dflt );
    }

    virtual const _Elem * do_narrow ( const _Elem * _First, const _Elem * _Last, char _Dflt,
        char * _Dest ) const {
        _Adl_verify_range ( _First, _Last );
        for (; _First != _Last; ++ _First, ++ _Dest ) {
            * _Dest = _Donarrow ( * _First, _Dflt );
        }

        return _First;
    }

private :
    _Locinfo :: _Ctypevec _Ctype;
    _Locinfo :: _Cvtvec _Cvt;
};
#line 2611
template< class _Elem> locale::id 
#line 2612
ctype< _Elem> ::id; 
#line 2619
template<> class __declspec(dllimport) ctype< char>  : public ctype_base { 
#line 2621
public: using _Elem = char; 
#line 2622
using char_type = _Elem; 
#line 2624
bool is(mask _Maskval, _Elem _Ch) const { 
#line 2625
return ((((_Ctype)._Table)[static_cast< unsigned char>(_Ch)]) & _Maskval) != 0; 
#line 2626
} 
#line 2628
const _Elem *is(const _Elem *_First, const _Elem *_Last, mask *
#line 2629
_Dest) const { 
#line 2630
_Adl_verify_range(_First, _Last); 
#line 2631
for (; _First != _Last; (++_First), (++_Dest)) { 
#line 2632
(*_Dest) = (((_Ctype)._Table)[static_cast< unsigned char>(*_First)]); 
#line 2633
}  
#line 2635
return _First; 
#line 2636
} 
#line 2638
const _Elem *scan_is(mask _Maskval, const _Elem *_First, const _Elem *
#line 2639
_Last) const { 
#line 2640
_Adl_verify_range(_First, _Last); 
#line 2641
while ((_First != _Last) && (!this->is(_Maskval, *_First))) { 
#line 2642
++_First; 
#line 2643
}  
#line 2645
return _First; 
#line 2646
} 
#line 2648
const _Elem *scan_not(mask _Maskval, const _Elem *_First, const _Elem *
#line 2649
_Last) const { 
#line 2650
_Adl_verify_range(_First, _Last); 
#line 2651
while ((_First != _Last) && this->is(_Maskval, *_First)) { 
#line 2652
++_First; 
#line 2653
}  
#line 2655
return _First; 
#line 2656
} 
#line 2658
_Elem tolower(_Elem _Ch) const { 
#line 2659
return this->do_tolower(_Ch); 
#line 2660
} 
#line 2662
const _Elem *tolower(_Elem *
#line 2663
_First, const _Elem *_Last) const { 
#line 2664
return this->do_tolower(_First, _Last); 
#line 2665
} 
#line 2667
_Elem toupper(_Elem _Ch) const { 
#line 2668
return this->do_toupper(_Ch); 
#line 2669
} 
#line 2671
const _Elem *toupper(_Elem *
#line 2672
_First, const _Elem *_Last) const { 
#line 2673
return this->do_toupper(_First, _Last); 
#line 2674
} 
#line 2676
_Elem widen(char _Byte) const { 
#line 2677
return this->do_widen(_Byte); 
#line 2678
} 
#line 2680
const _Elem *widen(const char *_First, const char *_Last, _Elem *
#line 2681
_Dest) const { 
#line 2682
return this->do_widen(_First, _Last, _Dest); 
#line 2683
} 
#line 2685
_Elem narrow(_Elem _Ch, char _Dflt = '\000') const { 
#line 2686
return this->do_narrow(_Ch, _Dflt); 
#line 2687
} 
#line 2689
const _Elem *narrow(const _Elem *_First, const _Elem *_Last, char _Dflt, char *
#line 2690
_Dest) const { 
#line 2691
return this->do_narrow(_First, _Last, _Dflt, _Dest); 
#line 2692
} 
#line 2694
static locale::id id; 
#line 2696
explicit ctype(const mask *_Table = 0, bool _Deletetable = false, size_t 
#line 2697
_Refs = 0) : ctype_base(_Refs) 
#line 2698
{ 
#line 2699
{ _Locinfo _Lobj; 
#line 2700
this->_Init(_Lobj); 
#line 2701
} 
#line 2703
this->_Tidy(); 
#line 2704
if (_Table) { 
#line 2705
((_Ctype)._Table) = _Table; 
#line 2706
((_Ctype)._Delfl) = (_Deletetable ? -1 : 0); 
#line 2707
} else { 
#line 2708
((_Ctype)._Table) = classic_table(); 
#line 2709
((_Ctype)._Delfl) = 0; 
#line 2710
}  
#line 2711
} 
#line 2713
ctype(const _Locinfo &_Lobj, size_t _Refs = 0) : ctype_base(_Refs) { 
#line 2714
this->_Init(_Lobj); 
#line 2715
} 
#line 2717
static size_t __cdecl _Getcat(const locale::facet **_Ppf = 0, const locale *_Ploc = 0) { 
#line 2718
if (_Ppf && (!(*_Ppf))) { 
#line 2719
(*_Ppf) = (new std::ctype< char> (((_Locinfo)(_Ploc->_C_str())))); 
#line 2720
}  
#line 2722
return 2; 
#line 2723
} 
#line 2725
const mask *table() const noexcept { 
#line 2726
return (_Ctype)._Table; 
#line 2727
} 
#line 2729
static const mask *__cdecl classic_table() noexcept { 
#line 2730
return ::std::use_facet< std::ctype< char> > (locale::classic()).table(); 
#line 2731
} 
#line 2733
static const size_t table_size = (1 << 8); 
#line 2736
protected: virtual ~ctype() noexcept override { 
#line 2737
this->_Tidy(); 
#line 2738
} 
#line 2740
void _Init(const _Locinfo &_Lobj) { 
#line 2741
(_Ctype) = _Lobj._Getctype(); 
#line 2742
} 
#line 2744
void _Tidy() noexcept { 
#line 2745
if (0 < ((_Ctype)._Delfl)) { 
#line 2746
::free(const_cast< short *>((_Ctype)._Table)); 
#line 2747
} else { if (((_Ctype)._Delfl) < 0) { 
#line 2748
delete [] ((_Ctype)._Table); 
#line 2749
}  }  
#line 2751
::free((_Ctype)._LocaleName); 
#line 2752
} 
#line 2754
virtual _Elem do_tolower(_Elem _Ch) const { 
#line 2755
return static_cast< _Elem>(_Tolower(static_cast< unsigned char>(_Ch), &(_Ctype))); 
#line 2756
} 
#line 2758
virtual const _Elem *do_tolower(_Elem *_First, const _Elem *
#line 2759
_Last) const { 
#line 2760
_Adl_verify_range(_First, _Last); 
#line 2761
for (; _First != _Last; ++_First) { 
#line 2762
(*_First) = (static_cast< _Elem>(_Tolower(static_cast< unsigned char>(*_First), &(_Ctype)))); 
#line 2763
}  
#line 2765
return _First; 
#line 2766
} 
#line 2768
virtual _Elem do_toupper(_Elem _Ch) const { 
#line 2769
return static_cast< _Elem>(_Toupper(static_cast< unsigned char>(_Ch), &(_Ctype))); 
#line 2770
} 
#line 2772
virtual const _Elem *do_toupper(_Elem *_First, const _Elem *
#line 2773
_Last) const { 
#line 2774
_Adl_verify_range(_First, _Last); 
#line 2775
for (; _First != _Last; ++_First) { 
#line 2776
(*_First) = (static_cast< _Elem>(_Toupper(static_cast< unsigned char>(*_First), &(_Ctype)))); 
#line 2777
}  
#line 2779
return _First; 
#line 2780
} 
#line 2782
virtual _Elem do_widen(char _Byte) const { 
#line 2783
return _Byte; 
#line 2784
} 
#line 2786
virtual const _Elem *do_widen(const char *
#line 2787
_First, const char *_Last, _Elem *_Dest) const { 
#line 2788
_Adl_verify_range(_First, _Last); 
#line 2789
::memcpy(_Dest, _First, static_cast< size_t>(_Last - _First)); 
#line 2790
return _Last; 
#line 2791
} 
#line 2793
virtual _Elem do_narrow(_Elem _Ch, char) const { 
#line 2794
return _Ch; 
#line 2795
} 
#line 2797
virtual const _Elem *do_narrow(const _Elem *_First, const _Elem *_Last, char, char *
#line 2798
_Dest) const { 
#line 2799
_Adl_verify_range(_First, _Last); 
#line 2800
::memcpy(_Dest, _First, static_cast< size_t>(_Last - _First)); 
#line 2801
return _Last; 
#line 2802
} 
#line 2805
private: _Locinfo::_Ctypevec _Ctype; 
#line 2806
}; 
#line 2809
template<> class __declspec(dllimport) ctype< __wchar_t>  : public ctype_base { 
#line 2812
public: using _Elem = __wchar_t; 
#line 2813
using char_type = _Elem; 
#line 2815
bool is(mask _Maskval, _Elem _Ch) const { 
#line 2816
return this->do_is(_Maskval, _Ch); 
#line 2817
} 
#line 2819
const _Elem *is(const _Elem *_First, const _Elem *_Last, mask *
#line 2820
_Dest) const { 
#line 2821
return this->do_is(_First, _Last, _Dest); 
#line 2822
} 
#line 2824
const _Elem *scan_is(mask _Maskval, const _Elem *_First, const _Elem *
#line 2825
_Last) const { 
#line 2826
return this->do_scan_is(_Maskval, _First, _Last); 
#line 2827
} 
#line 2829
const _Elem *scan_not(mask _Maskval, const _Elem *_First, const _Elem *
#line 2830
_Last) const { 
#line 2831
return this->do_scan_not(_Maskval, _First, _Last); 
#line 2832
} 
#line 2834
_Elem tolower(_Elem _Ch) const { 
#line 2835
return this->do_tolower(_Ch); 
#line 2836
} 
#line 2838
const _Elem *tolower(_Elem *
#line 2839
_First, const _Elem *_Last) const { 
#line 2840
return this->do_tolower(_First, _Last); 
#line 2841
} 
#line 2843
_Elem toupper(_Elem _Ch) const { 
#line 2844
return this->do_toupper(_Ch); 
#line 2845
} 
#line 2847
const _Elem *toupper(_Elem *
#line 2848
_First, const _Elem *_Last) const { 
#line 2849
return this->do_toupper(_First, _Last); 
#line 2850
} 
#line 2852
_Elem widen(char _Byte) const { 
#line 2853
return this->do_widen(_Byte); 
#line 2854
} 
#line 2856
const char *widen(const char *_First, const char *_Last, _Elem *
#line 2857
_Dest) const { 
#line 2858
return this->do_widen(_First, _Last, _Dest); 
#line 2859
} 
#line 2861
char narrow(_Elem _Ch, char _Dflt = '\000') const { 
#line 2862
return this->do_narrow(_Ch, _Dflt); 
#line 2863
} 
#line 2865
const _Elem *narrow(const _Elem *_First, const _Elem *_Last, char _Dflt, char *
#line 2866
_Dest) const { 
#line 2867
return this->do_narrow(_First, _Last, _Dflt, _Dest); 
#line 2868
} 
#line 2870
static locale::id id; 
#line 2872
explicit ctype(size_t _Refs = 0) : ctype_base(_Refs) { 
#line 2873
{ _Locinfo _Lobj; 
#line 2874
this->_Init(_Lobj); 
#line 2875
} 
#line 2876
} 
#line 2878
ctype(const _Locinfo &_Lobj, size_t _Refs = 0) : ctype_base(_Refs) { 
#line 2879
this->_Init(_Lobj); 
#line 2880
} 
#line 2882
static size_t __cdecl _Getcat(const locale::facet **_Ppf = 0, const locale *_Ploc = 0) { 
#line 2883
if (_Ppf && (!(*_Ppf))) { 
#line 2884
(*_Ppf) = (new std::ctype< __wchar_t> (((_Locinfo)(_Ploc->_C_str())))); 
#line 2885
}  
#line 2887
return 2; 
#line 2888
} 
#line 2891
protected: virtual ~ctype() noexcept override { 
#line 2892
if ((_Ctype)._Delfl) { 
#line 2893
::free(const_cast< short *>((_Ctype)._Table)); 
#line 2894
}  
#line 2896
::free((_Ctype)._LocaleName); 
#line 2897
} 
#line 2899
void _Init(const _Locinfo &_Lobj) { 
#line 2900
(_Ctype) = _Lobj._Getctype(); 
#line 2901
(_Cvt) = _Lobj._Getcvt(); 
#line 2902
} 
#line 2904
virtual bool do_is(mask 
#line 2905
_Maskval, _Elem _Ch) const { 
#line 2906
return ((::_Getwctype(_Ch, &(_Ctype))) & _Maskval) != 0; 
#line 2907
} 
#line 2909
virtual const _Elem *do_is(const _Elem *_First, const _Elem *_Last, mask *
#line 2910
_Dest) const { 
#line 2911
_Adl_verify_range(_First, _Last); 
#line 2912
return ::_Getwctypes(_First, _Last, _Dest, &(_Ctype)); 
#line 2913
} 
#line 2915
virtual const _Elem *do_scan_is(mask _Maskval, const _Elem *_First, const _Elem *
#line 2916
_Last) const { 
#line 2917
_Adl_verify_range(_First, _Last); 
#line 2918
while ((_First != _Last) && (!this->is(_Maskval, *_First))) { 
#line 2919
++_First; 
#line 2920
}  
#line 2922
return _First; 
#line 2923
} 
#line 2925
virtual const _Elem *do_scan_not(mask _Maskval, const _Elem *_First, const _Elem *
#line 2926
_Last) const { 
#line 2927
_Adl_verify_range(_First, _Last); 
#line 2928
while ((_First != _Last) && this->is(_Maskval, *_First)) { 
#line 2929
++_First; 
#line 2930
}  
#line 2932
return _First; 
#line 2933
} 
#line 2935
virtual _Elem do_tolower(_Elem _Ch) const { 
#line 2936
return _Towlower(_Ch, &(_Ctype)); 
#line 2937
} 
#line 2939
virtual const _Elem *do_tolower(_Elem *_First, const _Elem *
#line 2940
_Last) const { 
#line 2941
_Adl_verify_range(_First, _Last); 
#line 2942
for (; _First != _Last; ++_First) { 
#line 2943
(*_First) = _Towlower(*_First, &(_Ctype)); 
#line 2944
}  
#line 2946
return _First; 
#line 2947
} 
#line 2949
virtual _Elem do_toupper(_Elem _Ch) const { 
#line 2950
return _Towupper(_Ch, &(_Ctype)); 
#line 2951
} 
#line 2953
virtual const _Elem *do_toupper(_Elem *_First, const _Elem *
#line 2954
_Last) const { 
#line 2955
_Adl_verify_range(_First, _Last); 
#line 2956
for (; _First != _Last; ++_First) { 
#line 2957
(*_First) = _Towupper(*_First, &(_Ctype)); 
#line 2958
}  
#line 2960
return _First; 
#line 2961
} 
#line 2963
_Elem _Dowiden(char _Byte) const { 
#line 2964
mbstate_t _Mbst = {}; 
#line 2965
__wchar_t _Wc; 
#line 2966
return (_Mbrtowc(&_Wc, &_Byte, 1, &_Mbst, &(_Cvt)) < 0) ? static_cast< __wchar_t>((wint_t)65535) : _Wc; 
#line 2967
} 
#line 2969
virtual _Elem do_widen(char _Byte) const { 
#line 2970
return this->_Dowiden(_Byte); 
#line 2971
} 
#line 2973
virtual const char *do_widen(const char *
#line 2974
_First, const char *_Last, _Elem *_Dest) const { 
#line 2975
_Adl_verify_range(_First, _Last); 
#line 2976
for (; _First != _Last; (++_First), (++_Dest)) { 
#line 2977
(*_Dest) = this->_Dowiden(*_First); 
#line 2978
}  
#line 2980
return _First; 
#line 2981
} 
#line 2983
char _Donarrow(_Elem _Ch, char _Dflt) const { 
#line 2984
char _Buf[5]; 
#line 2985
mbstate_t _Mbst = {}; 
#line 2986
return (_Wcrtomb(_Buf, _Ch, &_Mbst, &(_Cvt)) != 1) ? _Dflt : (_Buf[0]); 
#line 2987
} 
#line 2989
virtual char do_narrow(_Elem _Ch, char _Dflt) const { 
#line 2990
return this->_Donarrow(_Ch, _Dflt); 
#line 2991
} 
#line 2993
virtual const _Elem *do_narrow(const _Elem *_First, const _Elem *_Last, char _Dflt, char *
#line 2994
_Dest) const { 
#line 2995
_Adl_verify_range(_First, _Last); 
#line 2996
for (; _First != _Last; (++_First), (++_Dest)) { 
#line 2997
(*_Dest) = this->_Donarrow(*_First, _Dflt); 
#line 2998
}  
#line 3000
return _First; 
#line 3001
} 
#line 3004
private: _Locinfo::_Ctypevec _Ctype; 
#line 3005
_Locinfo::_Cvtvec _Cvt; 
#line 3006
}; 
#line 3010
template<> class __declspec(dllimport) ctype< unsigned short>  : public ctype_base { 
#line 3013
public: using _Elem = unsigned short; 
#line 3014
using char_type = _Elem; 
#line 3016
bool is(mask _Maskval, _Elem _Ch) const { 
#line 3017
return this->do_is(_Maskval, _Ch); 
#line 3018
} 
#line 3020
const _Elem *is(const _Elem *_First, const _Elem *_Last, mask *
#line 3021
_Dest) const { 
#line 3022
return this->do_is(_First, _Last, _Dest); 
#line 3023
} 
#line 3025
const _Elem *scan_is(mask _Maskval, const _Elem *_First, const _Elem *
#line 3026
_Last) const { 
#line 3027
return this->do_scan_is(_Maskval, _First, _Last); 
#line 3028
} 
#line 3030
const _Elem *scan_not(mask _Maskval, const _Elem *_First, const _Elem *
#line 3031
_Last) const { 
#line 3032
return this->do_scan_not(_Maskval, _First, _Last); 
#line 3033
} 
#line 3035
_Elem tolower(_Elem _Ch) const { 
#line 3036
return this->do_tolower(_Ch); 
#line 3037
} 
#line 3039
const _Elem *tolower(_Elem *
#line 3040
_First, const _Elem *_Last) const { 
#line 3041
return this->do_tolower(_First, _Last); 
#line 3042
} 
#line 3044
_Elem toupper(_Elem _Ch) const { 
#line 3045
return this->do_toupper(_Ch); 
#line 3046
} 
#line 3048
const _Elem *toupper(_Elem *
#line 3049
_First, const _Elem *_Last) const { 
#line 3050
return this->do_toupper(_First, _Last); 
#line 3051
} 
#line 3053
_Elem widen(char _Byte) const { 
#line 3054
return this->do_widen(_Byte); 
#line 3055
} 
#line 3057
const char *widen(const char *_First, const char *_Last, _Elem *
#line 3058
_Dest) const { 
#line 3059
return this->do_widen(_First, _Last, _Dest); 
#line 3060
} 
#line 3062
char narrow(_Elem _Ch, char _Dflt = '\000') const { 
#line 3063
return this->do_narrow(_Ch, _Dflt); 
#line 3064
} 
#line 3066
const _Elem *narrow(const _Elem *_First, const _Elem *_Last, char _Dflt, char *
#line 3067
_Dest) const { 
#line 3068
return this->do_narrow(_First, _Last, _Dflt, _Dest); 
#line 3069
} 
#line 3071
static locale::id id; 
#line 3073
explicit ctype(size_t _Refs = 0) : ctype_base(_Refs) { 
#line 3074
{ _Locinfo _Lobj; 
#line 3075
this->_Init(_Lobj); 
#line 3076
} 
#line 3077
} 
#line 3079
ctype(const _Locinfo &_Lobj, size_t _Refs = 0) : ctype_base(_Refs) { 
#line 3080
this->_Init(_Lobj); 
#line 3081
} 
#line 3083
static size_t __cdecl _Getcat(const locale::facet **_Ppf = 0, const locale *_Ploc = 0) { 
#line 3084
if (_Ppf && (!(*_Ppf))) { 
#line 3085
(*_Ppf) = (new std::ctype< unsigned short> (((_Locinfo)(_Ploc->_C_str())))); 
#line 3086
}  
#line 3088
return 2; 
#line 3089
} 
#line 3092
protected: virtual ~ctype() noexcept override { 
#line 3093
if ((_Ctype)._Delfl) { 
#line 3094
::free(const_cast< short *>((_Ctype)._Table)); 
#line 3095
}  
#line 3097
::free((_Ctype)._LocaleName); 
#line 3098
} 
#line 3100
void _Init(const _Locinfo &_Lobj) { 
#line 3101
(_Ctype) = _Lobj._Getctype(); 
#line 3102
(_Cvt) = _Lobj._Getcvt(); 
#line 3103
} 
#line 3105
virtual bool do_is(mask 
#line 3106
_Maskval, _Elem _Ch) const { 
#line 3107
return ((::_Getwctype(_Ch, &(_Ctype))) & _Maskval) != 0; 
#line 3108
} 
#line 3110
virtual const _Elem *do_is(const _Elem *_First, const _Elem *_Last, mask *
#line 3111
_Dest) const { 
#line 3112
_Adl_verify_range(_First, _Last); 
#line 3113
return reinterpret_cast< const _Elem *>(::_Getwctypes(reinterpret_cast< const __wchar_t *>(_First), reinterpret_cast< const __wchar_t *>(_Last), _Dest, &(_Ctype))); 
#line 3115
} 
#line 3117
virtual const _Elem *do_scan_is(mask _Maskval, const _Elem *_First, const _Elem *
#line 3118
_Last) const { 
#line 3119
_Adl_verify_range(_First, _Last); 
#line 3120
while ((_First != _Last) && (!this->is(_Maskval, *_First))) { 
#line 3121
++_First; 
#line 3122
}  
#line 3124
return _First; 
#line 3125
} 
#line 3127
virtual const _Elem *do_scan_not(mask _Maskval, const _Elem *_First, const _Elem *
#line 3128
_Last) const { 
#line 3129
_Adl_verify_range(_First, _Last); 
#line 3130
while ((_First != _Last) && this->is(_Maskval, *_First)) { 
#line 3131
++_First; 
#line 3132
}  
#line 3134
return _First; 
#line 3135
} 
#line 3137
virtual _Elem do_tolower(_Elem _Ch) const { 
#line 3138
return _Towlower(_Ch, &(_Ctype)); 
#line 3139
} 
#line 3141
virtual const _Elem *do_tolower(_Elem *_First, const _Elem *
#line 3142
_Last) const { 
#line 3143
_Adl_verify_range(_First, _Last); 
#line 3144
for (; _First != _Last; ++_First) { 
#line 3145
(*_First) = (_Towlower(*_First, &(_Ctype))); 
#line 3146
}  
#line 3148
return _First; 
#line 3149
} 
#line 3151
virtual _Elem do_toupper(_Elem _Ch) const { 
#line 3152
return _Towupper(_Ch, &(_Ctype)); 
#line 3153
} 
#line 3155
virtual const _Elem *do_toupper(_Elem *_First, const _Elem *
#line 3156
_Last) const { 
#line 3157
_Adl_verify_range(_First, _Last); 
#line 3158
for (; _First != _Last; ++_First) { 
#line 3159
(*_First) = (_Towupper(*_First, &(_Ctype))); 
#line 3160
}  
#line 3162
return _First; 
#line 3163
} 
#line 3165
_Elem _Dowiden(char _Byte) const { 
#line 3166
mbstate_t _Mbst = {}; 
#line 3167
unsigned short _Wc; 
#line 3169
if (_Mbrtowc(reinterpret_cast< __wchar_t *>(&_Wc), &_Byte, 1, &_Mbst, &(_Cvt)) < 0) { 
#line 3170
return static_cast< unsigned short>((wint_t)65535); 
#line 3171
}  
#line 3173
return _Wc; 
#line 3174
} 
#line 3176
virtual _Elem do_widen(char _Byte) const { 
#line 3177
return this->_Dowiden(_Byte); 
#line 3178
} 
#line 3180
virtual const char *do_widen(const char *
#line 3181
_First, const char *_Last, _Elem *_Dest) const { 
#line 3182
_Adl_verify_range(_First, _Last); 
#line 3183
for (; _First != _Last; (++_First), (++_Dest)) { 
#line 3184
(*_Dest) = this->_Dowiden(*_First); 
#line 3185
}  
#line 3187
return _First; 
#line 3188
} 
#line 3190
char _Donarrow(_Elem _Ch, char _Dflt) const { 
#line 3191
char _Buf[5]; 
#line 3192
mbstate_t _Mbst = {}; 
#line 3193
return (_Wcrtomb(_Buf, _Ch, &_Mbst, &(_Cvt)) != 1) ? _Dflt : (_Buf[0]); 
#line 3194
} 
#line 3196
virtual char do_narrow(_Elem _Ch, char _Dflt) const { 
#line 3197
return this->_Donarrow(_Ch, _Dflt); 
#line 3198
} 
#line 3200
virtual const _Elem *do_narrow(const _Elem *_First, const _Elem *_Last, char _Dflt, char *
#line 3201
_Dest) const { 
#line 3202
_Adl_verify_range(_First, _Last); 
#line 3203
for (; _First != _Last; (++_First), (++_Dest)) { 
#line 3204
(*_Dest) = this->_Donarrow(*_First, _Dflt); 
#line 3205
}  
#line 3207
return _First; 
#line 3208
} 
#line 3211
private: _Locinfo::_Ctypevec _Ctype; 
#line 3212
_Locinfo::_Cvtvec _Cvt; 
#line 3213
}; 
#line 3216 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\xlocale"
template < class _Elem >
class ctype_byname : public ctype < _Elem > {
public :
    static_assert ( ! 0 || _Is_any_of_v < _Elem, char, wchar_t >, "Unsupported facet specialization; see N4800 27.3.1.1.1 [locale.category]. Either use a Standard specialization or define _ENFORC" "E_FACET_SPECIALIZATIONS=0 to suppress this error." );

    explicit ctype_byname ( const char * _Locname, size_t _Refs = 0 )
        : ctype < _Elem > ( _Locinfo ( _Locname ), _Refs ) { }

    explicit ctype_byname ( const string & _Str, size_t _Refs = 0 )
        : ctype < _Elem > ( _Locinfo ( _Str . c_str ( ) ), _Refs ) { }

protected :
     ~ ctype_byname ( ) noexcept override { }
};
#line 3231
enum class _Case_sensitive: bool { _Nope, _Yes}; 
#line 3233
template < class _InIt, class _Elem >
int __cdecl _Getloctxt (
    _InIt & _First, _InIt & _Last, size_t _Numfields, const _Elem * _Ptr, const _Case_sensitive _Matching ) {

    for ( size_t _Off = 0; _Ptr [ _Off ] != _Elem { }; ++ _Off ) {
        if ( _Ptr [ _Off ] == _Ptr [ 0 ] ) {
            ++ _Numfields;
        }
    }

    string _Str ( _Numfields, '\000' );
    const ctype < _Elem > & _CType = :: std :: use_facet < ctype < _Elem >> ( locale { } );

    int _Ans = - 2;
    for ( size_t _Column = 1;; ++ _Column, ( void ) ++ _First, _Ans = - 1 ) {
        bool _Prefix = false;
        size_t _Off = 0;
        size_t _Field = 0;

        for (; _Field < _Numfields; ++ _Field ) {
            while ( _Ptr [ _Off ] != _Elem { } && _Ptr [ _Off ] != _Ptr [ 0 ] ) {
                ++ _Off;
            }

            if ( _Str [ _Field ] != '\000' ) {
                _Off += _Str [ _Field ];
            } else if ( _Ptr [ _Off += _Column ] == _Ptr [ 0 ]
                       || _Ptr [ _Off ] == _Elem { } ) {
                _Str [ _Field ] = static_cast < char > ( _Column < 127 ? _Column : 127 );
                _Ans = static_cast < int > ( _Field );
            } else if ( _First == _Last
                       || ( _Matching == _Case_sensitive :: _Yes
                               ? _Ptr [ _Off ] != * _First
                               : _CType . tolower ( _Ptr [ _Off ] ) != _CType . tolower ( static_cast < _Elem > ( * _First ) ) ) ) {
                _Str [ _Field ] = static_cast < char > ( _Column < 127 ? _Column : 127 );
            } else {
                _Prefix = true;
            }
        }

        if ( ! _Prefix || _First == _Last ) {
            break;
        }
    }
    return _Ans;
}
#line 3282
template class __declspec(dllimport) codecvt< char, char, _Mbstatet> ;
#line 3285 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\xlocale"
}
#line 3288
#pragma warning(pop)
#pragma pack ( pop )
#line 15 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\xiosbase"
#pragma pack ( push, 8 )
#pragma warning(push, 3)
#pragma warning(disable : 4180 4412 4455 4494 4514 4574 4582 4583 4587 4588 4619 4623 4625 4626 4643 4648 4702 4793 4820 4988 5026 5027 5045 6294 4984 5053 )
#line 22
namespace std { 
#line 23
template< class _Dummy> 
#line 24
class _Iosb { 
#line 26
public: enum _Dummy_enum { _Dummy_enum_val = 1}; 
#line 27
enum _Fmtflags { 
#line 28
_Fmtmask = 65535, 
#line 29
_Fmtzero = 0
#line 30
}; 
#line 32
static constexpr int skipws = 1; 
#line 33
static constexpr int unitbuf = 2; 
#line 34
static constexpr int uppercase = 4; 
#line 35
static constexpr int showbase = 8; 
#line 36
static constexpr int showpoint = 16; 
#line 37
static constexpr int showpos = 32; 
#line 38
static constexpr int left = 64; 
#line 39
static constexpr int right = 128; 
#line 40
static constexpr int internal = 256; 
#line 41
static constexpr int dec = 512; 
#line 42
static constexpr int oct = 1024; 
#line 43
static constexpr int hex = 2048; 
#line 44
static constexpr int scientific = 4096; 
#line 45
static constexpr int fixed = 8192; 
#line 47
static constexpr int hexfloat = 12288; 
#line 49
static constexpr int boolalpha = 16384; 
#line 50
static constexpr int _Stdio = 32768; 
#line 51
static constexpr int adjustfield = 448; 
#line 52
static constexpr int basefield = 3584; 
#line 53
static constexpr int floatfield = 12288; 
#line 55
enum _Iostate { 
#line 56
_Statmask = 23
#line 57
}; 
#line 59
static constexpr int goodbit = 0; 
#line 60
static constexpr int eofbit = 1; 
#line 61
static constexpr int failbit = 2; 
#line 62
static constexpr int badbit = 4; 
#line 64
enum _Openmode { 
#line 65
_Openmask = 255
#line 66
}; 
#line 68
static constexpr int in = 1; 
#line 69
static constexpr int out = 2; 
#line 70
static constexpr int ate = 4; 
#line 71
static constexpr int app = 8; 
#line 72
static constexpr int trunc = 16; 
#line 73
static constexpr int _Nocreate = 64; 
#line 74
static constexpr int _Noreplace = 128; 
#line 75
static constexpr int binary = 32; 
#line 80 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\xiosbase"
enum _Seekdir { 
#line 81
_Seekbeg, 
#line 82
_Seekcur, 
#line 83
_Seekend
#line 84
}; 
#line 86
static constexpr int beg = (_Seekbeg); 
#line 87
static constexpr int cur = (_Seekcur); 
#line 88
static constexpr int end = (_Seekend); 
#line 90
enum { 
#line 91
_Openprot = 64
#line 92
}; 
#line 94
static constexpr int _Default_open_prot = 64; 
#line 95
}; 
#line 97
class __declspec(dllimport) ios_base : public _Iosb< int>  { 
#line 99
public: using fmtflags = int; 
#line 100
using iostate = int; 
#line 101
using openmode = int; 
#line 102
using seekdir = int; 
#line 105
using streamoff = std::streamoff; 
#line 106
using streampos = std::streampos; 
#line 109 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\xiosbase"
enum event { 
#line 110
erase_event, 
#line 111
imbue_event, 
#line 112
copyfmt_event
#line 113
}; 
#line 115
using event_callback = void (__cdecl *)(event, ios_base &, int); 
#line 118
using io_state = unsigned; 
#line 119
using open_mode = unsigned; 
#line 120
using seek_dir = unsigned; 
#line 123 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\xiosbase"
class failure : public system_error { 
#line 125
public: explicit failure(const string &_Message, const error_code &_Errcode = ::std::make_error_code(io_errc::stream)) : system_error(_Errcode, _Message) 
#line 126
{ } 
#line 128
explicit failure(const char *_Message, const error_code &_Errcode = ::std::make_error_code(io_errc::stream)) : system_error(_Errcode, _Message) 
#line 129
{ } 
#line 137 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\xiosbase"
}; 
#line 139
class __declspec(dllimport) Init { 
#line 141
public: Init() { 
#line 142
_Init_ctor(this); 
#line 143
} 
#line 145
~Init() noexcept { 
#line 146
_Init_dtor(this); 
#line 147
} 
#line 150
private: static void __cdecl _Init_ctor(Init *); 
#line 151
static void __cdecl _Init_dtor(Init *); 
#line 153
static int _Init_cnt; 
#line 155
static int &__cdecl _Init_cnt_func(); 
#line 156
}; 
#line 158
explicit operator bool() const noexcept { 
#line 159
return !this->fail(); 
#line 160
} 
#line 162
[[nodiscard]] bool operator!() const noexcept { 
#line 163
return this->fail(); 
#line 164
} 
#line 166
void clear(iostate _State, bool _Reraise) { 
#line 167
_State &= (_Statmask); 
#line 168
(_Mystate) = _State; 
#line 169
const auto _Filtered = _State & (_Except); 
#line 170
if (_Filtered) { 
#line 171
if (_Reraise) { 
#line 172
throw; 
#line 173
}  
#line 175
const char *_Msg; 
#line 176
if (_Filtered & badbit) { 
#line 177
_Msg = ("ios_base::badbit set"); 
#line 178
} else { if (_Filtered & failbit) { 
#line 179
_Msg = ("ios_base::failbit set"); 
#line 180
} else { 
#line 181
_Msg = ("ios_base::eofbit set"); 
#line 182
}  }  
#line 184
throw ((failure)(_Msg)); 
#line 185
}  
#line 186
} 
#line 188
void clear(iostate _State = goodbit) { 
#line 189
this->clear(_State, false); 
#line 190
} 
#line 193
void clear(io_state _State) { 
#line 194
this->clear(static_cast< iostate>(_State)); 
#line 195
} 
#line 198 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\xiosbase"
[[nodiscard]] iostate rdstate() const noexcept { 
#line 199
return _Mystate; 
#line 200
} 
#line 202
void setstate(iostate 
#line 203
_State, bool _Exreraise) { 
#line 204
this->clear(this->rdstate() | _State, _Exreraise); 
#line 205
} 
#line 207
void setstate(iostate _State) { 
#line 208
this->clear(this->rdstate() | _State, false); 
#line 209
} 
#line 212
void setstate(io_state _State) { 
#line 213
this->setstate(static_cast< iostate>(_State)); 
#line 214
} 
#line 217 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\xiosbase"
[[nodiscard]] bool good() const noexcept { 
#line 218
return this->rdstate() == goodbit; 
#line 219
} 
#line 221
[[nodiscard]] bool eof() const noexcept { 
#line 222
return this->rdstate() & eofbit; 
#line 223
} 
#line 225
[[nodiscard]] bool fail() const noexcept { 
#line 226
return this->rdstate() & (badbit | failbit); 
#line 227
} 
#line 229
[[nodiscard]] bool bad() const noexcept { 
#line 230
return this->rdstate() & badbit; 
#line 231
} 
#line 233
[[nodiscard]] iostate exceptions() const noexcept { 
#line 234
return _Except; 
#line 235
} 
#line 237
void exceptions(iostate _Newexcept) { 
#line 238
(_Except) = (_Newexcept & (_Statmask)); 
#line 239
this->clear(this->rdstate()); 
#line 240
} 
#line 243
void exceptions(io_state _State) { 
#line 244
this->exceptions(static_cast< iostate>(_State)); 
#line 245
} 
#line 248 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\xiosbase"
[[nodiscard]] fmtflags flags() const noexcept { 
#line 249
return _Fmtfl; 
#line 250
} 
#line 252
fmtflags flags(fmtflags _Newfmtflags) noexcept { 
#line 254
const fmtflags _Oldfmtflags = _Fmtfl; 
#line 255
(_Fmtfl) = (_Newfmtflags & (_Fmtmask)); 
#line 256
return _Oldfmtflags; 
#line 257
} 
#line 259
fmtflags setf(fmtflags _Newfmtflags) noexcept { 
#line 261
const fmtflags _Oldfmtflags = _Fmtfl; 
#line 262
(_Fmtfl) |= (_Newfmtflags & (_Fmtmask)); 
#line 263
return _Oldfmtflags; 
#line 264
} 
#line 266
fmtflags setf(fmtflags _Newfmtflags, fmtflags _Mask) noexcept { 
#line 268
const fmtflags _Oldfmtflags = _Fmtfl; 
#line 269
(_Fmtfl) = ((_Oldfmtflags & (~_Mask)) | ((_Newfmtflags & _Mask) & (_Fmtmask))); 
#line 270
return _Oldfmtflags; 
#line 271
} 
#line 273
void unsetf(fmtflags _Mask) noexcept { 
#line 275
(_Fmtfl) &= (~_Mask); 
#line 276
} 
#line 278
[[nodiscard]] streamsize precision() const noexcept { 
#line 279
return _Prec; 
#line 280
} 
#line 282
streamsize precision(streamsize _Newprecision) noexcept { 
#line 284
const streamsize _Oldprecision = _Prec; 
#line 285
(_Prec) = _Newprecision; 
#line 286
return _Oldprecision; 
#line 287
} 
#line 289
[[nodiscard]] streamsize width() const noexcept { 
#line 290
return _Wide; 
#line 291
} 
#line 293
streamsize width(streamsize _Newwidth) noexcept { 
#line 295
const streamsize _Oldwidth = _Wide; 
#line 296
(_Wide) = _Newwidth; 
#line 297
return _Oldwidth; 
#line 298
} 
#line 300
[[nodiscard]] locale getloc() const noexcept { 
#line 301
return *(_Ploc); 
#line 302
} 
#line 304
locale imbue(const locale &_Loc) { 
#line 305
locale _Oldlocale = *(_Ploc); 
#line 306
((*(_Ploc)) = _Loc); 
#line 307
this->_Callfns(imbue_event); 
#line 308
return _Oldlocale; 
#line 309
} 
#line 311
[[nodiscard]] static int __cdecl xalloc() { 
#line 312
{ _Lockit _Lock(2); 
#line 313
return _Index++; 
#line 314
} 
#line 315
} 
#line 317
[[nodiscard]] long &iword(int _Idx) { 
#line 318
return this->_Findarr(_Idx)._Lo; 
#line 319
} 
#line 321
[[nodiscard]] void *&pword(int _Idx) { 
#line 322
return this->_Findarr(_Idx)._Vp; 
#line 323
} 
#line 325
void register_callback(event_callback _Pfn, int _Idx) { 
#line 327
(_Calls) = (new _Fnarray(_Idx, _Pfn, _Calls)); 
#line 328
} 
#line 330
ios_base &copyfmt(const ios_base &_Other) { 
#line 331
if (this != ::std::addressof(_Other)) { 
#line 332
this->_Tidy(); 
#line 333
((*(_Ploc)) = (*(_Other._Ploc))); 
#line 334
(_Fmtfl) = (_Other._Fmtfl); 
#line 335
(_Prec) = (_Other._Prec); 
#line 336
(_Wide) = (_Other._Wide); 
#line 337
_Iosarray *_Ptr = _Other._Arr; 
#line 339
for ((_Arr) = (nullptr); _Ptr; _Ptr = (_Ptr->_Next)) { 
#line 340
if (((_Ptr->_Lo) != (0)) || (_Ptr->_Vp)) { 
#line 341
this->iword(_Ptr->_Index) = (_Ptr->_Lo); 
#line 342
this->pword(_Ptr->_Index) = (_Ptr->_Vp); 
#line 343
}  
#line 344
}  
#line 346
for (_Fnarray *_Pfa = _Other._Calls; _Pfa; _Pfa = (_Pfa->_Next)) { 
#line 347
this->register_callback(_Pfa->_Pfn, _Pfa->_Index); 
#line 348
}  
#line 350
this->_Callfns(copyfmt_event); 
#line 351
this->exceptions(_Other._Except); 
#line 352
}  
#line 353
return *this; 
#line 354
} 
#line 356
static bool __cdecl sync_with_stdio(bool _Newsync = true) { 
#line 358
{ _Lockit _Lock(2); 
#line 359
const bool _Oldsync = _Sync; 
#line 360
_Sync = _Newsync; 
#line 361
return _Oldsync; 
#line 362
} 
#line 363
} 
#line 365
void swap(ios_base &_Right) noexcept { 
#line 366
if (this != ::std::addressof(_Right)) { 
#line 367
::std::swap(_Mystate, _Right._Mystate); 
#line 368
::std::swap(_Except, _Right._Except); 
#line 369
::std::swap(_Fmtfl, _Right._Fmtfl); 
#line 370
::std::swap(_Prec, _Right._Prec); 
#line 371
::std::swap(_Wide, _Right._Wide); 
#line 373
::std::swap(_Arr, _Right._Arr); 
#line 374
::std::swap(_Calls, _Right._Calls); 
#line 375
::std::swap(_Ploc, _Right._Ploc); 
#line 376
}  
#line 377
} 
#line 379
virtual ~ios_base() noexcept { 
#line 380
_Ios_base_dtor(this); 
#line 381
} 
#line 383
static void __cdecl _Addstd(ios_base *); 
#line 385
size_t _Stdstr{(0)}; 
#line 388
protected: ios_base() { } 
#line 390
void _Init() { 
#line 391
(_Ploc) = (nullptr); 
#line 392
(_Stdstr) = (0); 
#line 393
(_Except) = goodbit; 
#line 394
(_Fmtfl) = (skipws | dec); 
#line 395
(_Prec) = (6); 
#line 396
(_Wide) = (0); 
#line 397
(_Arr) = (nullptr); 
#line 398
(_Calls) = (nullptr); 
#line 399
this->clear(goodbit); 
#line 400
(_Ploc) = (new locale); 
#line 401
} 
#line 404
private: struct _Iosarray : public _Crt_new_delete { 
#line 406
_Iosarray(int _Idx, _Iosarray *_Link) : _Next(_Link), _Index(_Idx), _Lo((0)), _Vp((nullptr)) 
#line 407
{ } 
#line 409
_Iosarray *_Next; 
#line 410
int _Index; 
#line 411
long _Lo; 
#line 412
void *_Vp; 
#line 413
}; 
#line 415
struct _Fnarray : public _Crt_new_delete { 
#line 416
_Fnarray(int _Idx, event_callback _Pnew, _Fnarray *_Link) : _Next(_Link), _Index(_Idx), _Pfn(_Pnew) 
#line 417
{ } 
#line 419
_Fnarray *_Next; 
#line 420
int _Index; 
#line 421
event_callback _Pfn; 
#line 422
}; 
#line 424
void _Callfns(event _Ev) { 
#line 425
for (_Fnarray *_Pfa = _Calls; _Pfa; _Pfa = (_Pfa->_Next)) { 
#line 426
(*(_Pfa->_Pfn))(_Ev, *this, _Pfa->_Index); 
#line 427
}  
#line 428
} 
#line 430
_Iosarray &_Findarr(int _Idx) { 
#line 431
_Iosarray *_Ptr1; 
#line 432
_Iosarray *_Ptr2; 
#line 434
for ((_Ptr1 = (_Arr)), (_Ptr2 = (nullptr)); _Ptr1; _Ptr1 = (_Ptr1->_Next)) { 
#line 435
if ((_Ptr1->_Index) == _Idx) { 
#line 436
return *_Ptr1; 
#line 437
} else { if (((!_Ptr2) && ((_Ptr1->_Lo) == (0))) && (!(_Ptr1->_Vp))) { 
#line 438
_Ptr2 = _Ptr1; 
#line 439
}  }  
#line 440
}  
#line 442
if (_Ptr2) { 
#line 443
(_Ptr2->_Index) = _Idx; 
#line 444
return *_Ptr2; 
#line 445
}  
#line 447
(_Arr) = (new _Iosarray(_Idx, _Arr)); 
#line 448
return *(_Arr); 
#line 449
} 
#line 451
void _Tidy() noexcept { 
#line 452
this->_Callfns(erase_event); 
#line 453
_Iosarray *_Ptr1; 
#line 454
_Iosarray *_Ptr2; 
#line 456
for (_Ptr1 = (_Arr); _Ptr1; _Ptr1 = _Ptr2) { 
#line 457
_Ptr2 = (_Ptr1->_Next); 
#line 458
delete _Ptr1; 
#line 459
}  
#line 460
(_Arr) = (nullptr); 
#line 462
_Fnarray *_Pfa1; 
#line 463
_Fnarray *_Pfa2; 
#line 464
for (_Pfa1 = (_Calls); _Pfa1; _Pfa1 = _Pfa2) { 
#line 465
_Pfa2 = (_Pfa1->_Next); 
#line 466
delete _Pfa1; 
#line 467
}  
#line 468
(_Calls) = (nullptr); 
#line 469
} 
#line 471
iostate _Mystate; 
#line 472
iostate _Except; 
#line 473
fmtflags _Fmtfl; 
#line 474
streamsize _Prec; 
#line 475
streamsize _Wide; 
#line 476
_Iosarray *_Arr{(nullptr)}; 
#line 477
_Fnarray *_Calls{(nullptr)}; 
#line 478
locale *_Ploc{(nullptr)}; 
#line 480
static int _Index; 
#line 481
static bool _Sync; 
#line 483
static void __cdecl _Ios_base_dtor(ios_base *); 
#line 486
public: ios_base(const ios_base &) = delete;
#line 487
ios_base &operator=(const ios_base &) = delete;
#line 488
}; 
#line 489
}
#line 492
#pragma warning(pop)
#pragma pack ( pop )
#line 13 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\streambuf"
#pragma pack ( push, 8 )
#pragma warning(push, 3)
#pragma warning(disable : 4180 4412 4455 4494 4514 4574 4582 4583 4587 4588 4619 4623 4625 4626 4643 4648 4702 4793 4820 4988 5026 5027 5045 6294 4984 5053 )
#line 20
namespace std { 
#line 21
template < class _Elem, class _Traits >
class basic_streambuf {
protected :
     basic_streambuf ( ) : _Plocale ( new locale ) {
        _Init ( );
    }

     basic_streambuf ( _Uninitialized ) noexcept { }

     basic_streambuf ( const basic_streambuf & _Right ) : _Plocale ( new locale { _Right . getloc ( ) } ) {
        _Init ( );
        setp ( _Right . pbase ( ), _Right . pptr ( ), _Right . epptr ( ) );
        setg ( _Right . eback ( ), _Right . gptr ( ), _Right . egptr ( ) );
    }

    basic_streambuf & operator = ( const basic_streambuf & _Right ) {
        if ( this != :: std :: addressof ( _Right ) ) {
            setp ( _Right . pbase ( ), _Right . pptr ( ), _Right . epptr ( ) );
            setg ( _Right . eback ( ), _Right . gptr ( ), _Right . egptr ( ) );
            pubimbue ( _Right . getloc ( ) );
        }
        return * this;
    }

    void swap ( basic_streambuf & _Right ) noexcept {
        if ( this != :: std :: addressof ( _Right ) ) {
            _Elem * _Pfirst0 = pbase ( );
            _Elem * _Pnext0 = pptr ( );
            _Elem * _Pend = epptr ( );
            _Elem * _Gfirst0 = eback ( );
            _Elem * _Gnext0 = gptr ( );
            _Elem * _Gend = egptr ( );

            setp ( _Right . pbase ( ), _Right . pptr ( ), _Right . epptr ( ) );
            _Right . setp ( _Pfirst0, _Pnext0, _Pend );

            setg ( _Right . eback ( ), _Right . gptr ( ), _Right . egptr ( ) );
            _Right . setg ( _Gfirst0, _Gnext0, _Gend );

            :: std :: swap ( _Plocale, _Right . _Plocale );
        }
    }

public :
    using char_type = _Elem;
    using traits_type = _Traits;

    virtual ~ basic_streambuf ( ) noexcept {
        delete _Plocale;
    }

    using int_type = typename _Traits :: int_type;
    using pos_type = typename _Traits :: pos_type;
    using off_type = typename _Traits :: off_type;

    pos_type pubseekoff ( off_type _Off, ios_base :: seekdir _Way,
        ios_base :: openmode _Mode = ios_base :: in | ios_base :: out ) {
        return seekoff ( _Off, _Way, _Mode );
    }


    pos_type pubseekoff ( off_type _Off, ios_base :: seek_dir _Way,
        ios_base :: open_mode _Mode ) {
        return pubseekoff ( _Off, static_cast < ios_base :: seekdir > ( _Way ), static_cast < ios_base :: openmode > ( _Mode ) );
    }


    pos_type pubseekpos ( pos_type _Pos,
        ios_base :: openmode _Mode = ios_base :: in | ios_base :: out ) {
        return seekpos ( _Pos, _Mode );
    }


    pos_type pubseekpos ( pos_type _Pos,
        ios_base :: open_mode _Mode ) {
        return seekpos ( _Pos, static_cast < ios_base :: openmode > ( _Mode ) );
    }


    basic_streambuf * pubsetbuf ( _Elem * _Buffer,
        streamsize _Count ) {
        return setbuf ( _Buffer, _Count );
    }

    locale pubimbue ( const locale & _Newlocale ) {
        locale _Oldlocale = * _Plocale;
        imbue ( _Newlocale );
        * _Plocale = _Newlocale;
        return _Oldlocale;
    }

    locale getloc ( ) const noexcept {
        return * _Plocale;
    }

    streamsize in_avail ( ) {
        streamsize _Res = _Gnavail ( );
        return 0 < _Res ? _Res : showmanyc ( );
    }

    int pubsync ( ) {
        return sync ( );
    }

    int_type sbumpc ( ) {
        return 0 < _Gnavail ( ) ? _Traits :: to_int_type ( * _Gninc ( ) ) : uflow ( );
    }

    int_type sgetc ( ) {
        return 0 < _Gnavail ( ) ? _Traits :: to_int_type ( * gptr ( ) ) : underflow ( );
    }

    streamsize sgetn ( _Elem * _Ptr,
        streamsize _Count ) {
        return xsgetn ( _Ptr, _Count );
    }

    int_type snextc ( ) {
        return 1 < _Gnavail ( ) ? _Traits :: to_int_type ( * _Gnpreinc ( ) )
             : _Traits :: eq_int_type ( _Traits :: eof ( ), sbumpc ( ) ) ? _Traits :: eof ( )
                                                              : sgetc ( );
    }

    int_type sputbackc ( _Elem _Ch ) {
        if ( gptr ( ) && eback ( ) < gptr ( ) && _Traits :: eq ( _Ch, gptr ( ) [ - 1 ] ) ) {
            return _Traits :: to_int_type ( * _Gndec ( ) );
        }

        return pbackfail ( _Traits :: to_int_type ( _Ch ) );
    }


    void stossc ( ) {
        if ( 0 < _Gnavail ( ) ) {
            _Gninc ( );
        } else {
            uflow ( );
        }
    }


    int_type sungetc ( ) {
        return gptr ( ) && eback ( ) < gptr ( ) ? _Traits :: to_int_type ( * _Gndec ( ) ) : pbackfail ( );
    }

    int_type sputc ( _Elem _Ch ) {
        return 0 < _Pnavail ( ) ? _Traits :: to_int_type ( * _Pninc ( ) = _Ch ) : overflow ( _Traits :: to_int_type ( _Ch ) );
    }

    streamsize sputn ( const _Elem * _Ptr,
        streamsize _Count ) {
        return xsputn ( _Ptr, _Count );
    }

    virtual void _Lock ( ) { }

    virtual void _Unlock ( ) { }

protected :
    _Elem * eback ( ) const noexcept {
        return * _IGfirst;
    }

    _Elem * gptr ( ) const noexcept {
        return * _IGnext;
    }

    _Elem * pbase ( ) const noexcept {
        return * _IPfirst;
    }

    _Elem * pptr ( ) const noexcept {
        return * _IPnext;
    }

    _Elem * egptr ( ) const noexcept {
        return * _IGnext + * _IGcount;
    }

    void gbump ( int _Off ) noexcept {

        * _IGcount -= _Off;
        * _IGnext += _Off;
    }

    void setg ( _Elem * _First, _Elem * _Next, _Elem * _Last ) noexcept {

        * _IGfirst = _First;
        * _IGnext = _Next;
        * _IGcount = static_cast < int > ( _Last - _Next );
    }

    _Elem * epptr ( ) const noexcept {
        return * _IPnext + * _IPcount;
    }

    _Elem * _Gndec ( ) noexcept {
        ++ * _IGcount;
        return -- * _IGnext;
    }

    _Elem * _Gninc ( ) noexcept {
        -- * _IGcount;
        return ( * _IGnext ) ++;
    }

    _Elem * _Gnpreinc ( ) noexcept {
        -- * _IGcount;
        return ++ ( * _IGnext );
    }

    streamsize _Gnavail ( ) const noexcept {
        return * _IGnext ? * _IGcount : 0;
    }

    void pbump ( int _Off ) noexcept {

        * _IPcount -= _Off;
        * _IPnext += _Off;
    }

    void setp ( _Elem * _First, _Elem * _Last ) noexcept {

        * _IPfirst = _First;
        * _IPnext = _First;
        * _IPcount = static_cast < int > ( _Last - _First );
    }

    void setp ( _Elem * _First, _Elem * _Next, _Elem * _Last ) noexcept {

        * _IPfirst = _First;
        * _IPnext = _Next;
        * _IPcount = static_cast < int > ( _Last - _Next );
    }

    _Elem * _Pninc ( ) noexcept {
        -- * _IPcount;
        return ( * _IPnext ) ++;
    }

    streamsize _Pnavail ( ) const noexcept {
        return * _IPnext ? * _IPcount : 0;
    }

    void _Init ( ) noexcept {
        _IGfirst = & _Gfirst;
        _IPfirst = & _Pfirst;
        _IGnext = & _Gnext;
        _IPnext = & _Pnext;
        _IGcount = & _Gcount;
        _IPcount = & _Pcount;
        setp ( nullptr, nullptr );
        setg ( nullptr, nullptr, nullptr );
    }

    void _Init ( _Elem * * _Gf, _Elem * * _Gn, int * _Gc, _Elem * * _Pf, _Elem * * _Pn, int * _Pc ) noexcept {

        _IGfirst = _Gf;
        _IPfirst = _Pf;
        _IGnext = _Gn;
        _IPnext = _Pn;
        _IGcount = _Gc;
        _IPcount = _Pc;
    }

    virtual int_type overflow ( int_type = _Traits :: eof ( ) ) {
        return _Traits :: eof ( );
    }

    virtual int_type pbackfail ( int_type = _Traits :: eof ( ) ) {

        return _Traits :: eof ( );
    }

    virtual streamsize showmanyc ( ) {
        return 0;
    }

    virtual int_type underflow ( ) {
        return _Traits :: eof ( );
    }

    virtual int_type uflow ( ) {
        return _Traits :: eq_int_type ( _Traits :: eof ( ), underflow ( ) ) ? _Traits :: eof ( ) : _Traits :: to_int_type ( * _Gninc ( ) );
    }

    virtual streamsize xsgetn ( _Elem * _Ptr, streamsize _Count ) {
        const streamsize _Start_count = _Count;

        while ( 0 < _Count ) {
            streamsize _Size = _Gnavail ( );
            if ( 0 < _Size ) {
                if ( _Count < _Size ) {
                    _Size = _Count;
                }

                _Traits :: copy ( _Ptr, gptr ( ), static_cast < size_t > ( _Size ) );
                _Ptr += _Size;
                _Count -= _Size;
                gbump ( static_cast < int > ( _Size ) );
            } else {
                const int_type _Meta = uflow ( );
                if ( _Traits :: eq_int_type ( _Traits :: eof ( ), _Meta ) ) {
                    break;
                }


                * _Ptr ++ = _Traits :: to_char_type ( _Meta );
                -- _Count;
            }
        }

        return _Start_count - _Count;
    }

    virtual streamsize xsputn ( const _Elem * _Ptr, streamsize _Count ) {

        const streamsize _Start_count = _Count;
        while ( 0 < _Count ) {
            streamsize _Size = _Pnavail ( );
            if ( 0 < _Size ) {
                if ( _Count < _Size ) {
                    _Size = _Count;
                }

                _Traits :: copy ( pptr ( ), _Ptr, static_cast < size_t > ( _Size ) );
                _Ptr += _Size;
                _Count -= _Size;
                pbump ( static_cast < int > ( _Size ) );
            } else if ( _Traits :: eq_int_type ( _Traits :: eof ( ), overflow ( _Traits :: to_int_type ( * _Ptr ) ) ) ) {
                break;
            } else {
                ++ _Ptr;
                -- _Count;
            }
        }

        return _Start_count - _Count;
    }

    virtual pos_type seekoff (
        off_type, ios_base :: seekdir, ios_base :: openmode = ios_base :: in | ios_base :: out ) {

        return pos_type { off_type { - 1 } };
    }

    virtual pos_type seekpos ( pos_type, ios_base :: openmode = ios_base :: in | ios_base :: out ) {

        return pos_type { off_type { - 1 } };
    }

    virtual basic_streambuf * setbuf ( _Elem *, streamsize ) {

        return this;
    }

    virtual int sync ( ) {
        return 0;
    }

    virtual void imbue ( const locale & ) { }

private :
    _Elem * _Gfirst;
    _Elem * _Pfirst;
    _Elem * * _IGfirst;
    _Elem * * _IPfirst;
    _Elem * _Gnext;
    _Elem * _Pnext;
    _Elem * * _IGnext;
    _Elem * * _IPnext;

    int _Gcount;
    int _Pcount;
    int * _IGcount;
    int * _IPcount;

protected :
    locale * _Plocale;
};
#line 405 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\streambuf"
template class __declspec(dllimport) basic_streambuf< char, char_traits< char> > ;
#line 406
template class __declspec(dllimport) basic_streambuf< __wchar_t, char_traits< __wchar_t> > ;
#line 413 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\streambuf"
}
#line 417
#pragma warning(pop)
#pragma pack ( pop )
#line 18 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\xlocnum"
#pragma pack ( push, 8 )
#pragma warning(push, 3)
#pragma warning(disable : 4180 4412 4455 4494 4514 4574 4582 4583 4587 4588 4619 4623 4625 4626 4643 4648 4702 4793 4820 4988 5026 5027 5045 6294 4984 5053 )
#line 25
extern "C" {
#line 27
long __cdecl _Stolx(const char *, char **, int, int *); 
#line 28
unsigned long __cdecl _Stoulx(const char *, char **, int, int *); 
#line 30
__int64 __cdecl _Stollx(const char *, char **, int, int *); 
#line 32
unsigned __int64 __cdecl _Stoullx(const char *, char **, int, int *); 
#line 35
}
#line 37
namespace std { 
#line 39
inline double _Stodx_v2(const char *_Str, char **_Endptr, int _Pten, int *_Perr) { 
#line 40
int &_Errno_ref = *_errno(); 
#line 41
const int _Orig = _Errno_ref; 
#line 43
_Errno_ref = 0; 
#line 44
double _Val = ::strtod(_Str, _Endptr); 
#line 45
(*_Perr) = _Errno_ref; 
#line 46
_Errno_ref = _Orig; 
#line 48
if (_Pten != 0) { 
#line 49
_Val *= ::pow((10.0), static_cast< double>(_Pten)); 
#line 50
}  
#line 52
return _Val; 
#line 53
} 
#line 55
inline float _Stofx_v2(const char *_Str, char **_Endptr, int _Pten, int *_Perr) { 
#line 56
int &_Errno_ref = *_errno(); 
#line 57
const int _Orig = _Errno_ref; 
#line 59
_Errno_ref = 0; 
#line 60
float _Val = ::strtof(_Str, _Endptr); 
#line 61
(*_Perr) = _Errno_ref; 
#line 62
_Errno_ref = _Orig; 
#line 64
if (_Pten != 0) { 
#line 65
_Val *= ::powf((10.0F), static_cast< float>(_Pten)); 
#line 66
}  
#line 68
return _Val; 
#line 69
} 
#line 71
template < class _Elem, size_t _Base_size >
size_t _Find_elem ( const _Elem ( & _Base ) [ _Base_size ], const _Elem _Ch ) {


    return static_cast < size_t > ( :: std :: _Find_unchecked ( _Base, _Base + ( _Base_size - 1 ), _Ch ) - _Base );
}
#line 78
inline __wchar_t *_Maklocwcs(const __wchar_t *_Ptr) { 
#line 79
const size_t _Count = ::wcslen(_Ptr) + (1); 
#line 81
__wchar_t *_Ptrdest = static_cast< __wchar_t *>(_calloc_dbg(_Count, sizeof(__wchar_t), 2, "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\xlocnum", 81)); 
#line 83
if (!_Ptrdest) { 
#line 84
_Xbad_alloc(); 
#line 85
}  
#line 87
::wmemcpy(_Ptrdest, _Ptr, _Count); 
#line 88
return _Ptrdest; 
#line 89
} 
#line 91
template < class _Elem >
class numpunct : public locale :: facet {
private :
    friend _Tidy_guard < numpunct >;

public :
    static_assert ( ! 0 || _Is_any_of_v < _Elem, char, wchar_t >, "Unsupported facet specialization; see N4800 27.3.1.1.1 [locale.category]. Either use a Standard specialization or define _ENFORC" "E_FACET_SPECIALIZATIONS=0 to suppress this error." );

    using string_type = basic_string < _Elem, char_traits < _Elem >, allocator < _Elem >>;
    using char_type = _Elem;

     __declspec ( dllimport ) static locale :: id id;

    _Elem decimal_point ( ) const {
        return do_decimal_point ( );
    }

    _Elem thousands_sep ( ) const {
        return do_thousands_sep ( );
    }

    string grouping ( ) const {
        return do_grouping ( );
    }

    string_type falsename ( ) const {
        return do_falsename ( );
    }

    string_type truename ( ) const {
        return do_truename ( );
    }

    explicit numpunct ( size_t _Refs = 0 ) : locale :: facet ( _Refs ) {
        { _Locinfo _Lobj;
        _Init ( _Lobj );
        if ( _Kseparator == 0 ) {
            _Kseparator =
                _Maklocchr ( ',', static_cast < _Elem * > ( nullptr ), _Lobj . _Getcvt ( ) );
        }
        }
    }

    numpunct ( const _Locinfo & _Lobj, size_t _Refs = 0, bool _Isdef = false ) : locale :: facet ( _Refs ) {
        _Init ( _Lobj, _Isdef );
    }

    static size_t _Getcat ( const locale :: facet * * _Ppf = nullptr, const locale * _Ploc = nullptr ) {

        if ( _Ppf && ! * _Ppf ) {
            * _Ppf = new numpunct < _Elem > ( _Locinfo ( _Ploc -> _C_str ( ) ), 0, true );
        }
        return 4;
    }

protected :
     ~ numpunct ( ) noexcept override {
        _Tidy ( );
    }

    numpunct ( const char * _Locname, size_t _Refs = 0, bool _Isdef = false ) : locale :: facet ( _Refs ) {
        { _Locinfo _Lobj ( _Locname );
        _Init ( _Lobj, _Isdef );
        }
    }

    template < class _Elem2 >
    void _Getvals ( _Elem2, const lconv * _Ptr, _Locinfo :: _Cvtvec _Cvt ) {
        _Dp = _Maklocchr ( _Ptr -> decimal_point [ 0 ], static_cast < _Elem2 * > ( nullptr ), _Cvt );
        _Kseparator = _Maklocchr ( _Ptr -> thousands_sep [ 0 ], static_cast < _Elem2 * > ( nullptr ), _Cvt );
    }

    void _Getvals ( wchar_t, const lconv * _Ptr, _Locinfo :: _Cvtvec ) {
        _Dp = static_cast < _Elem > ( _Ptr -> _W_decimal_point [ 0 ] );
        _Kseparator = static_cast < _Elem > ( _Ptr -> _W_thousands_sep [ 0 ] );
    }

    void _Init ( const _Locinfo & _Lobj, bool _Isdef = false ) {
        const lconv * _Ptr = _Lobj . _Getlconv ( );
        _Locinfo :: _Cvtvec _Cvt = _Lobj . _Getcvt ( );

        _Grouping = nullptr;
        _Falsename = nullptr;
        _Truename = nullptr;

        _Tidy_guard < numpunct > _Guard { this };
        _Grouping = _Maklocstr ( _Isdef ? "" : _Ptr -> grouping, static_cast < char * > ( nullptr ), _Lobj . _Getcvt ( ) );
        _Falsename = _Maklocstr ( _Lobj . _Getfalse ( ), static_cast < _Elem * > ( nullptr ), _Cvt );
        _Truename = _Maklocstr ( _Lobj . _Gettrue ( ), static_cast < _Elem * > ( nullptr ), _Cvt );
        _Guard . _Target = nullptr;

        if ( _Isdef ) {

            _Dp = _Maklocchr ( '.', static_cast < _Elem * > ( nullptr ), _Cvt );
            _Kseparator = _Maklocchr ( ',', static_cast < _Elem * > ( nullptr ), _Cvt );
        } else {
            _Getvals ( _Elem { }, _Ptr, _Cvt );
        }
    }

    virtual _Elem do_decimal_point ( ) const {
        return _Dp;
    }

    virtual _Elem do_thousands_sep ( ) const {
        return _Kseparator;
    }

    virtual string do_grouping ( ) const {
        return string { _Grouping };
    }

    virtual string_type do_falsename ( ) const {
        return string_type { _Falsename };
    }

    virtual string_type do_truename ( ) const {
        return string_type { _Truename };
    }

private :
    void _Tidy ( ) noexcept {
        :: free ( const_cast < char * > ( _Grouping ) );
        :: free ( const_cast < _Elem * > ( _Falsename ) );
        :: free ( const_cast < _Elem * > ( _Truename ) );
    }

    const char * _Grouping;
    _Elem _Dp;
    _Elem _Kseparator;
    const _Elem * _Falsename;
    const _Elem * _Truename;
};
#line 225
template < class _Elem >
class numpunct_byname : public numpunct < _Elem > {
public :
    static_assert ( ! 0 || _Is_any_of_v < _Elem, char, wchar_t >, "Unsupported facet specialization; see N4800 27.3.1.1.1 [locale.category]. Either use a Standard specialization or define _ENFORC" "E_FACET_SPECIALIZATIONS=0 to suppress this error." );

    explicit numpunct_byname ( const char * _Locname, size_t _Refs = 0 )
        : numpunct < _Elem > ( _Locname, _Refs ) { }

    explicit numpunct_byname ( const string & _Str, size_t _Refs = 0 )
        : numpunct < _Elem > ( _Str . c_str ( ), _Refs ) { }

protected :
     ~ numpunct_byname ( ) noexcept override { }
};
#line 246
template< class _Elem> locale::id 
#line 247
numpunct< _Elem> ::id; 
#line 254 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\xlocnum"
template < class _Elem, class _InIt = istreambuf_iterator < _Elem, char_traits < _Elem > > >
class num_get : public locale :: facet {
public :
    static_assert ( ! 0 || _Is_any_of_v < _Elem, char, wchar_t >, "Unsupported facet specialization; see N4800 27.3.1.1.1 [locale.category]. Either use a Standard specialization or define _ENFORC" "E_FACET_SPECIALIZATIONS=0 to suppress this error." );

    static size_t __cdecl _Getcat ( const locale :: facet * * _Ppf = nullptr, const locale * _Ploc = nullptr ) {

        if ( _Ppf && ! * _Ppf ) {
            * _Ppf = new num_get < _Elem, _InIt > ( _Locinfo ( _Ploc -> _C_str ( ) ) );
        }

        return 4;
    }

     static locale :: id id;

protected :
     ~ num_get ( ) noexcept override { }

    void _Init ( const _Locinfo & ) { }

public :
    explicit num_get ( size_t _Refs = 0 ) : locale :: facet ( _Refs ) {
        { _Locinfo _Lobj;
        _Init ( _Lobj );
        }
    }

     num_get ( const _Locinfo & _Lobj, size_t _Refs = 0 ) : locale :: facet ( _Refs ) {
        _Init ( _Lobj );
    }

    using char_type = _Elem;
    using iter_type = _InIt;

    _InIt get ( _InIt _First, _InIt _Last, ios_base & _Iosbase, ios_base :: iostate & _State,
        bool & _Val ) const {
        return do_get ( _First, _Last, _Iosbase, _State, _Val );
    }

    _InIt get ( _InIt _First, _InIt _Last, ios_base & _Iosbase, ios_base :: iostate & _State,
        unsigned short & _Val ) const {
        return do_get ( _First, _Last, _Iosbase, _State, _Val );
    }

    _InIt get ( _InIt _First, _InIt _Last, ios_base & _Iosbase, ios_base :: iostate & _State,
        unsigned int & _Val ) const {
        return do_get ( _First, _Last, _Iosbase, _State, _Val );
    }

    _InIt get ( _InIt _First, _InIt _Last, ios_base & _Iosbase, ios_base :: iostate & _State,
        long & _Val ) const {
        return do_get ( _First, _Last, _Iosbase, _State, _Val );
    }

    _InIt get ( _InIt _First, _InIt _Last, ios_base & _Iosbase, ios_base :: iostate & _State,
        unsigned long & _Val ) const {
        return do_get ( _First, _Last, _Iosbase, _State, _Val );
    }

    _InIt get ( _InIt _First, _InIt _Last, ios_base & _Iosbase, ios_base :: iostate & _State,
        long long & _Val ) const {
        return do_get ( _First, _Last, _Iosbase, _State, _Val );
    }

    _InIt get ( _InIt _First, _InIt _Last, ios_base & _Iosbase, ios_base :: iostate & _State,
        unsigned long long & _Val ) const {
        return do_get ( _First, _Last, _Iosbase, _State, _Val );
    }

    _InIt get ( _InIt _First, _InIt _Last, ios_base & _Iosbase, ios_base :: iostate & _State,
        float & _Val ) const {
        return do_get ( _First, _Last, _Iosbase, _State, _Val );
    }

    _InIt get ( _InIt _First, _InIt _Last, ios_base & _Iosbase, ios_base :: iostate & _State,
        double & _Val ) const {
        return do_get ( _First, _Last, _Iosbase, _State, _Val );
    }

    _InIt get ( _InIt _First, _InIt _Last, ios_base & _Iosbase, ios_base :: iostate & _State,
        long double & _Val ) const {
        return do_get ( _First, _Last, _Iosbase, _State, _Val );
    }

    _InIt get ( _InIt _First, _InIt _Last, ios_base & _Iosbase, ios_base :: iostate & _State,
        void * & _Val ) const {
        return do_get ( _First, _Last, _Iosbase, _State, _Val );
    }

protected :
    virtual _InIt do_get ( _InIt _First, _InIt _Last, ios_base & _Iosbase, ios_base :: iostate & _State,
        bool & _Val ) const {
        _Adl_verify_range ( _First, _Last );
        if ( _Iosbase . flags ( ) & ios_base :: boolalpha ) {
            const auto & _Punct_fac = :: std :: use_facet < numpunct < _Elem >> ( _Iosbase . getloc ( ) );
            basic_string < _Elem > _Str ( static_cast < size_t > ( 1 ), _Elem { } );
            _Str += _Punct_fac . falsename ( );
            _Str . push_back ( _Elem { } );
            _Str += _Punct_fac . truename ( );
            switch ( _Getloctxt ( _First, _Last, 2, _Str . c_str ( ), _Case_sensitive :: _Yes ) ) {
            case 0 :
                _Val = false;
                break;
            case 1 :
                _Val = true;
                break;
            default :
                _Val = false;
                _State = ios_base :: failbit;
                break;
            }
        } else {
            char _Ac [ 32 ];
            const int _Base = _Getifld ( _Ac, _First, _Last, _Iosbase . flags ( ), _Iosbase . getloc ( ) );
            if ( _Ac [ 0 ] == '\000' ) {





                _Val = false;
                _State = ios_base :: failbit;
            } else {
                char * _Ep;
                int _Errno;
                const long _Ans = :: _Stolx ( _Ac, & _Ep, _Base, & _Errno );
                if ( _Ep == _Ac || _Errno != 0 ) {
                    _Val = true;
                    _State = ios_base :: failbit;
                } else {
                    _Val = _Ans != 0;
                    if ( _Ans != 0 && _Ans != 1 ) {
                        _State = ios_base :: failbit;
                    }
                }
            }
        }

        if ( _First == _Last ) {
            _State |= ios_base :: eofbit;
        }

        return _First;
    }

    virtual _InIt do_get ( _InIt _First, _InIt _Last, ios_base & _Iosbase, ios_base :: iostate & _State,
        unsigned short & _Val ) const {
        _Adl_verify_range ( _First, _Last );
        char _Ac [ 32 ];
        const int _Base = _Getifld ( _Ac, _First, _Last, _Iosbase . flags ( ), _Iosbase . getloc ( ) );
        if ( _Ac [ 0 ] == '\000' ) {
            _State = ios_base :: failbit;
            _Val = 0;
        } else {
            const bool _Minus = _Ac [ 0 ] == '-';
            const char * _Digits = _Ac;


            if ( _Minus ) {
                ++ _Digits;
            }

            char * _Ep;
            int _Errno;
            const unsigned long _Tmp = :: _Stoulx ( _Digits, & _Ep, _Base, & _Errno );
            _Val = static_cast < unsigned short > ( _Tmp );
            if ( _Ep == _Digits || _Errno != 0 || _Tmp > 65535 ) {
                _State = ios_base :: failbit;
                _Val = 65535;
            } else if ( _Minus ) {

                _Val = static_cast < unsigned short > ( 0 - _Val );
            }
        }

        if ( _First == _Last ) {
            _State |= ios_base :: eofbit;
        }

        return _First;
    }

    virtual _InIt do_get ( _InIt _First, _InIt _Last, ios_base & _Iosbase, ios_base :: iostate & _State,
        unsigned int & _Val ) const {
        static_assert ( sizeof ( unsigned int ) == sizeof ( unsigned long ),
            "Bad overflow assumptions due to sizeof(unsigned int) != sizeof(unsigned long)" );
        unsigned long _Tmp;
        _First = num_get :: do_get ( _First, _Last, _Iosbase, _State, _Tmp );
        _Val = _Tmp;
        return _First;
    }

    virtual _InIt do_get ( _InIt _First, _InIt _Last, ios_base & _Iosbase, ios_base :: iostate & _State,
        long & _Val ) const {
        _Adl_verify_range ( _First, _Last );
        char _Ac [ 32 ];
        const int _Base = _Getifld ( _Ac, _First, _Last, _Iosbase . flags ( ), _Iosbase . getloc ( ) );
        if ( _Ac [ 0 ] == '\000' ) {
            _State = ios_base :: failbit;
            _Val = 0;
        } else {
            char * _Ep;
            int _Errno;
            _Val = :: _Stolx ( _Ac, & _Ep, _Base, & _Errno );
            if ( _Ep == _Ac || _Errno != 0 ) {
                _State = ios_base :: failbit;
            }
        }

        if ( _First == _Last ) {
            _State |= ios_base :: eofbit;
        }

        return _First;
    }

    virtual _InIt do_get ( _InIt _First, _InIt _Last, ios_base & _Iosbase, ios_base :: iostate & _State,
        unsigned long & _Val ) const {
        _Adl_verify_range ( _First, _Last );
        char _Ac [ 32 ];
        const int _Base = _Getifld ( _Ac, _First, _Last, _Iosbase . flags ( ), _Iosbase . getloc ( ) );
        if ( _Ac [ 0 ] == '\000' ) {
            _State = ios_base :: failbit;
            _Val = 0;
        } else {
            char * _Ep;
            int _Errno;
            _Val = :: _Stoulx ( _Ac, & _Ep, _Base, & _Errno );
            if ( _Ep == _Ac || _Errno != 0 ) {
                _State = ios_base :: failbit;
            }
        }

        if ( _First == _Last ) {
            _State |= ios_base :: eofbit;
        }

        return _First;
    }

    virtual _InIt do_get ( _InIt _First, _InIt _Last, ios_base & _Iosbase, ios_base :: iostate & _State,
        long long & _Val ) const {
        _Adl_verify_range ( _First, _Last );
        char _Ac [ 32 ];
        const int _Base = _Getifld ( _Ac, _First, _Last, _Iosbase . flags ( ), _Iosbase . getloc ( ) );
        if ( _Ac [ 0 ] == '\000' ) {
            _State = ios_base :: failbit;
            _Val = 0;
        } else {
            char * _Ep;
            int _Errno;
            _Val = :: _Stollx ( _Ac, & _Ep, _Base, & _Errno );
            if ( _Ep == _Ac || _Errno != 0 ) {
                _State = ios_base :: failbit;
            }
        }

        if ( _First == _Last ) {
            _State |= ios_base :: eofbit;
        }

        return _First;
    }

    virtual _InIt do_get ( _InIt _First, _InIt _Last, ios_base & _Iosbase, ios_base :: iostate & _State,
        unsigned long long & _Val ) const {
        _Adl_verify_range ( _First, _Last );
        char _Ac [ 32 ];
        const int _Base = _Getifld ( _Ac, _First, _Last, _Iosbase . flags ( ), _Iosbase . getloc ( ) );
        if ( _Ac [ 0 ] == '\000' ) {
            _State = ios_base :: failbit;
            _Val = 0;
        } else {
            int _Errno;
            char * _Ep;
            _Val = :: _Stoullx ( _Ac, & _Ep, _Base, & _Errno );
            if ( _Ep == _Ac || _Errno != 0 ) {
                _State = ios_base :: failbit;
            }
        }

        if ( _First == _Last ) {
            _State |= ios_base :: eofbit;
        }

        return _First;
    }








    virtual _InIt do_get ( _InIt _First, _InIt _Last, ios_base & _Iosbase, ios_base :: iostate & _State,
        float & _Val ) const {
        _Adl_verify_range ( _First, _Last );
        char _Ac [ ( 8 + 768 + 16 ) ];
        int _Hexexp = 1000000000;
        const int _Base = _Getffld ( _Ac, _First, _Last, _Iosbase, & _Hexexp );
        if ( _Ac [ 0 ] == '\000' ) {
            _State = ios_base :: failbit;
            _Val = (0.0F);
        } else {
            int _Errno;
            char * _Ep;
            _Val = _Stofx_v2 ( _Ac, & _Ep, _Base, & _Errno );
            if ( _Ep == _Ac || _Errno != 0 ) {
                _State = ios_base :: failbit;
                _Val = (0.0F);
            } else if ( _Hexexp != 1000000000 && _Hexexp != 0 ) {
                _Val = :: ldexpf ( _Val, 4 * _Hexexp );
            }
        }

        if ( _First == _Last ) {
            _State |= ios_base :: eofbit;
        }

        return _First;
    }

    virtual _InIt do_get ( _InIt _First, _InIt _Last, ios_base & _Iosbase, ios_base :: iostate & _State,
        double & _Val ) const {
        _Adl_verify_range ( _First, _Last );
        char _Ac [ ( 8 + 768 + 16 ) ];
        int _Hexexp = 1000000000;
        const int _Base = _Getffld ( _Ac, _First, _Last, _Iosbase, & _Hexexp );
        if ( _Ac [ 0 ] == '\000' ) {
            _State = ios_base :: failbit;
            _Val = (0.0);
        } else {
            int _Errno;
            char * _Ep;
            _Val = _Stodx_v2 ( _Ac, & _Ep, _Base, & _Errno );
            if ( _Ep == _Ac || _Errno != 0 ) {
                _State = ios_base :: failbit;
                _Val = (0.0);
            } else if ( _Hexexp != 1000000000 && _Hexexp != 0 ) {
                _Val = :: ldexp ( _Val, 4 * _Hexexp );
            }
        }

        if ( _First == _Last ) {
            _State |= ios_base :: eofbit;
        }

        return _First;
    }


    virtual _InIt do_get ( _InIt _First, _InIt _Last, ios_base & _Iosbase, ios_base :: iostate & _State,
        long double & _Val ) const {
        static_assert ( sizeof ( double ) == sizeof ( long double ), "Bad assumption: sizeof(double) == sizeof(long double)." );
        double _Result;
        _First = num_get :: do_get ( _First, _Last, _Iosbase, _State, _Result );
        _Val = _Result;
        return _First;
    }

    virtual _InIt do_get ( _InIt _First, _InIt _Last, ios_base & _Iosbase, ios_base :: iostate & _State,
        void * & _Val ) const {
        _Adl_verify_range ( _First, _Last );
        char _Ac [ 32 ];
        const int _Base = _Getifld ( _Ac, _First, _Last, ios_base :: hex, _Iosbase . getloc ( ) );
        if ( _Ac [ 0 ] == '\000' ) {
            _State = ios_base :: failbit;
            _Val = nullptr;
        } else {
            int _Errno;
            char * _Ep;

            _Val = reinterpret_cast < void * > ( :: _Stoullx ( _Ac, & _Ep, _Base, & _Errno ) );



            if ( _Ep == _Ac || _Errno != 0 ) {
                _State = ios_base :: failbit;
                _Val = nullptr;
            }
        }

        if ( _First == _Last ) {
            _State |= ios_base :: eofbit;
        }

        return _First;
    }

private :
    int __cdecl _Getifld ( char * _Ac, _InIt & _First, _InIt & _Last, ios_base :: fmtflags _Basefield,
        const locale & _Loc ) const {
        const auto & _Punct_fac = :: std :: use_facet < numpunct < _Elem >> ( _Loc );
        const string _Grouping = _Punct_fac . grouping ( );
        const _Elem _Kseparator = _Grouping . empty ( ) ? _Elem { } : _Punct_fac . thousands_sep ( );

        constexpr int _Numget_signoff = 22;
        constexpr int _Numget_xoff = 24;
        static constexpr char _Src [ ] = "0123456789ABCDEFabcdef-+Xx";
        _Elem _Atoms [ sizeof ( _Src ) ];
        const ctype < _Elem > & _Ctype_fac = :: std :: use_facet < ctype < _Elem >> ( _Loc );
        _Ctype_fac . widen ( :: std :: begin ( _Src ), :: std :: end ( _Src ), _Atoms );

        char * _Ptr = _Ac;

        if ( _First != _Last ) {
            if ( * _First == _Atoms [ _Numget_signoff + 1 ] ) {
                * _Ptr ++ = '+';
                ++ _First;
            } else if ( * _First == _Atoms [ _Numget_signoff ] ) {
                * _Ptr ++ = '-';
                ++ _First;
            }
        }

        _Basefield &= ios_base :: basefield;

        int _Base;
        if ( _Basefield == ios_base :: oct ) {
            _Base = 8;
        } else if ( _Basefield == ios_base :: hex ) {
            _Base = 16;
        } else if ( _Basefield == ios_base :: _Fmtzero ) {
            _Base = 0;
        } else {
            _Base = 10;
        }

        bool _Seendigit = false;
        bool _Nonzero = false;

        if ( _First != _Last && * _First == _Atoms [ 0 ] ) {
            _Seendigit = true;
            ++ _First;
            if ( _First != _Last && ( * _First == _Atoms [ _Numget_xoff + 1 ] || * _First == _Atoms [ _Numget_xoff ] )
                && ( _Base == 0 || _Base == 16 ) ) {
                _Base = 16;
                _Seendigit = false;
                ++ _First;
            } else if ( _Base == 0 ) {
                _Base = 8;
            }
        }

        const auto _Dlen = static_cast < size_t > ( _Base == 0 || _Base == 10 ? 10 : _Base == 8 ? 8 : 16 + 6 );
        string _Groups ( 1, static_cast < char > ( _Seendigit ) );
        size_t _Group = 0;

        for ( char * const _Pe = & _Ac [ 32 - 1 ]; _First != _Last; ++ _First ) {
            size_t _Idx = _Find_elem ( _Atoms, * _First );
            if ( _Idx < _Dlen ) {
                * _Ptr = _Src [ _Idx ];
                if ( ( _Nonzero || * _Ptr != '0' ) && _Ptr < _Pe ) {
                    ++ _Ptr;
                    _Nonzero = true;
                }

                _Seendigit = true;
                if ( _Groups [ _Group ] != 127 ) {
                    ++ _Groups [ _Group ];
                }
            } else if ( _Groups [ _Group ] == '\000' || _Kseparator == _Elem { } || * _First != _Kseparator ) {
                break;
            } else {
                _Groups . push_back ( '\000' );
                ++ _Group;
            }
        }

        if ( _Group != 0 ) {
            if ( '\000' < _Groups [ _Group ] ) {
                ++ _Group;
            } else {
                _Seendigit = false;
            }
        }

        for ( const char * _Pg = & _Grouping [ 0 ]; _Seendigit && 0 < _Group; ) {
            if ( * _Pg == 127 ) {
                break;
            } else if ( ( 0 < -- _Group && * _Pg != _Groups [ _Group ] ) || ( 0 == _Group && * _Pg < _Groups [ _Group ] ) ) {
                _Seendigit = false;
            } else if ( '\000' < _Pg [ 1 ] ) {
                ++ _Pg;
            }
        }

        if ( _Seendigit && ! _Nonzero ) {
            * _Ptr ++ = '0';
        } else if ( ! _Seendigit ) {
            _Ptr = _Ac;
        }

        * _Ptr = '\000';
        return _Base;
    }

    int __cdecl _Getffld ( char * _Ac, _InIt & _First, _InIt & _Last, ios_base & _Iosbase,
        int * _Phexexp ) const {
        if ( ( _Iosbase . flags ( ) & ios_base :: floatfield ) == ios_base :: hexfloat ) {
            return _Getffldx ( _Ac, _First, _Last, _Iosbase, _Phexexp );
        }

        const auto & _Punct_fac = :: std :: use_facet < numpunct < _Elem >> ( _Iosbase . getloc ( ) );
        const string _Grouping = _Punct_fac . grouping ( );
        char * _Ptr = _Ac;
        bool _Bad = false;
        bool _Sticky = false;

        constexpr int _Numget_signoff = 10;
        constexpr int _Numget_eoff = 12;
        static constexpr char _Src [ ] = "0123456789-+Ee";
        _Elem _Atoms [ sizeof ( _Src ) ];
        const ctype < _Elem > & _Ctype_fac = :: std :: use_facet < ctype < _Elem >> ( _Iosbase . getloc ( ) );
        _Ctype_fac . widen ( :: std :: begin ( _Src ), :: std :: end ( _Src ), _Atoms );

        if ( _First != _Last ) {
            if ( * _First == _Atoms [ _Numget_signoff + 1 ] ) {
                * _Ptr ++ = '+';
                ++ _First;
            } else if ( * _First == _Atoms [ _Numget_signoff ] ) {
                * _Ptr ++ = '-';
                ++ _First;
            }
        }

        char * _Leading = _Ptr;
        * _Ptr ++ = '0';

        bool _Seendigit = false;
        int _Significant = 0;
        int _Pten = 0;
        size_t _Idx;

        const int _Max_sig_dig = ( * _Phexexp == 1000000000 ? 768 : 36 );

        const char * _Pg = & _Grouping [ 0 ];
        if ( * _Pg == 127 || * _Pg <= '\000' ) {
            for (; _First != _Last && ( _Idx = _Find_elem ( _Atoms, * _First ) ) < 10; _Seendigit = true, ( void ) ++ _First ) {
                if ( _Max_sig_dig <= _Significant ) {
                    ++ _Pten;
                    if ( 0 < _Idx ) {
                        _Sticky = true;
                    }
                } else if ( _Idx != 0 || _Significant != 0 ) {
                    * _Ptr ++ = _Src [ _Idx ];
                    ++ _Significant;
                }
            }
        } else {
            const _Elem _Kseparator = _Grouping . empty ( ) ? _Elem { } : _Punct_fac . thousands_sep ( );
            string _Groups ( 1, '\000' );
            size_t _Group = 0;

            for (; _First != _Last; ++ _First ) {
                if ( ( _Idx = _Find_elem ( _Atoms, * _First ) ) < 10 ) {
                    _Seendigit = true;
                    if ( _Max_sig_dig <= _Significant ) {
                        ++ _Pten;
                        if ( 0 < _Idx ) {
                            _Sticky = true;
                        }
                    } else if ( _Idx != 0 || _Significant != 0 ) {
                        * _Ptr ++ = _Src [ _Idx ];
                        ++ _Significant;
                    }

                    if ( _Groups [ _Group ] != 127 ) {
                        ++ _Groups [ _Group ];
                    }
                } else if ( _Groups [ _Group ] == '\000' || _Kseparator == _Elem { } || * _First != _Kseparator ) {
                    break;
                } else {
                    _Groups . push_back ( '\000' );
                    ++ _Group;
                }
            }

            if ( _Group != 0 ) {
                if ( '\000' < _Groups [ _Group ] ) {
                    ++ _Group;
                } else {
                    _Bad = true;
                }
            }

            while ( ! _Bad && 0 < _Group ) {
                if ( * _Pg == 127 ) {
                    break;
                }

                if ( ( 0 < -- _Group && * _Pg != _Groups [ _Group ] ) || ( 0 == _Group && * _Pg < _Groups [ _Group ] ) ) {
                    _Bad = true;
                } else if ( '\000' < _Pg [ 1 ] ) {
                    ++ _Pg;
                }
            }
        }

        if ( _First != _Last && * _First == _Punct_fac . decimal_point ( ) ) {
            * _Ptr ++ = localeconv ( ) -> decimal_point [ 0 ];
            ++ _First;
        }

        if ( * _Phexexp != 1000000000 && _Significant == 0 ) {
            for (; _First != _Last && * _First == _Atoms [ 0 ]; _Seendigit = true, ( void ) ++ _First ) {
                -- _Pten;
            }

            if ( _Pten < 0 ) {
                * _Ptr ++ = '0';
                ++ _Pten;
            }
        }

        for (; _First != _Last && ( _Idx = _Find_elem ( _Atoms, * _First ) ) < 10; _Seendigit = true, ( void ) ++ _First ) {
            if ( _Significant < _Max_sig_dig ) {
                * _Ptr ++ = _Src [ _Idx ];
                ++ _Significant;
            } else if ( 0 < _Idx ) {
                _Sticky = true;
            }
        }

        if ( _Sticky ) {
            char * _Px = _Ptr;
            while ( -- _Px != _Leading ) {
                if ( * _Px != localeconv ( ) -> decimal_point [ 0 ] ) {
                    if ( * _Px != '9' ) {
                        ++ * _Px;
                        break;
                    }

                    * _Px = '0';
                }
            }

            if ( _Px == _Leading ) {
                * _Px = '1';
                ++ _Pten;
            }
        }

        if ( _Seendigit && _First != _Last
            && ( * _First == _Atoms [ _Numget_eoff + 1 ]
                || * _First == _Atoms [ _Numget_eoff ] ) ) {
            * _Ptr ++ = 'e';
            ++ _First;
            _Seendigit = false;
            _Significant = 0;

            if ( _First != _Last ) {
                if ( * _First == _Atoms [ _Numget_signoff + 1 ] ) {
                    * _Ptr ++ = '+';
                    ++ _First;
                } else if ( * _First == _Atoms [ _Numget_signoff ] ) {
                    * _Ptr ++ = '-';
                    ++ _First;
                }
            }

            for (; _First != _Last && * _First == _Atoms [ 0 ]; ++ _First ) {
                _Seendigit = true;
            }

            if ( _Seendigit ) {
                * _Ptr ++ = '0';
            }

            for (; _First != _Last && ( _Idx = _Find_elem ( _Atoms, * _First ) ) < 10; _Seendigit = true, ( void ) ++ _First ) {
                if ( _Significant < 8 ) {
                    * _Ptr ++ = _Src [ _Idx ];
                    ++ _Significant;
                }
            }
        }

        if ( _Bad || ! _Seendigit ) {
            _Ptr = _Ac;
        }

        * _Ptr = '\000';
        return _Pten;
    }

    int __cdecl _Getffldx ( char * _Ac, _InIt & _First, _InIt & _Last, ios_base & _Iosbase,
        int * _Phexexp ) const {
        const auto & _Punct_fac = :: std :: use_facet < numpunct < _Elem >> ( _Iosbase . getloc ( ) );
        const string _Grouping = _Punct_fac . grouping ( );

        constexpr int _Numget_signoff = 22;
        constexpr int _Numget_xoff = 24;
        constexpr int _Numget_poff = 26;
        static constexpr char _Src [ ] = "0123456789ABCDEFabcdef-+XxPp";
        _Elem _Atoms [ sizeof ( _Src ) ];
        const ctype < _Elem > & _Ctype_fac = :: std :: use_facet < ctype < _Elem >> ( _Iosbase . getloc ( ) );
        _Ctype_fac . widen ( :: std :: begin ( _Src ), :: std :: end ( _Src ), _Atoms );

        char * _Ptr = _Ac;
        bool _Bad = false;
        size_t _Idx;

        if ( _First != _Last ) {
            if ( * _First == _Atoms [ _Numget_signoff + 1 ] ) {
                * _Ptr ++ = '+';
                ++ _First;
            } else if ( * _First == _Atoms [ _Numget_signoff ] ) {
                * _Ptr ++ = '-';
                ++ _First;
            }
        }

        * _Ptr ++ = '0';
        * _Ptr ++ = 'x';

        bool _Seendigit = false;
        int _Significant = 0;
        int _Phex = 0;

        if ( _First != _Last && * _First == _Atoms [ 0 ] ) {
            if ( ++ _First != _Last && ( * _First == _Atoms [ _Numget_xoff + 1 ] || * _First == _Atoms [ _Numget_xoff ] ) ) {
                ++ _First;
            } else {
                _Seendigit = true;
            }
        }

        const int _Max_sig_dig = ( * _Phexexp == 1000000000 ? 768 : 36 );

        const char * _Pg = & _Grouping [ 0 ];
        if ( * _Pg == 127 || * _Pg <= '\000' ) {
            for (; _First != _Last && ( _Idx = _Find_elem ( _Atoms, * _First ) ) < _Numget_signoff;
                 _Seendigit = true, ( void ) ++ _First ) {
                if ( _Max_sig_dig <= _Significant ) {
                    ++ _Phex;
                } else if ( _Idx != 0 || _Significant != 0 ) {
                    * _Ptr ++ = _Src [ _Idx ];
                    ++ _Significant;
                }
            }
        } else {
            const _Elem _Kseparator = _Grouping . empty ( ) ? _Elem { } : _Punct_fac . thousands_sep ( );
            string _Groups ( 1, '\000' );
            size_t _Group = 0;

            for (; _First != _Last; ++ _First ) {
                if ( ( _Idx = _Find_elem ( _Atoms, * _First ) ) < _Numget_signoff ) {
                    _Seendigit = true;
                    if ( _Max_sig_dig <= _Significant ) {
                        ++ _Phex;
                    } else if ( _Idx != 0 || _Significant != 0 ) {
                        * _Ptr ++ = _Src [ _Idx ];
                        ++ _Significant;
                    }

                    if ( _Groups [ _Group ] != 127 ) {
                        ++ _Groups [ _Group ];
                    }
                } else if ( _Groups [ _Group ] == '\000' || _Kseparator == _Elem { } || * _First != _Kseparator ) {
                    break;
                } else {
                    _Groups . push_back ( '\000' );
                    ++ _Group;
                }
            }

            if ( _Group != 0 ) {
                if ( '\000' < _Groups [ _Group ] ) {
                    ++ _Group;
                } else {
                    _Bad = true;
                }
            }

            while ( ! _Bad && 0 < _Group ) {
                if ( * _Pg == 127 ) {
                    break;
                }

                if ( ( 0 < -- _Group && * _Pg != _Groups [ _Group ] ) || ( 0 == _Group && * _Pg < _Groups [ _Group ] ) ) {
                    _Bad = true;
                } else if ( '\000' < _Pg [ 1 ] ) {
                    ++ _Pg;
                }
            }
        }

        if ( _Seendigit && _Significant == 0 ) {
            * _Ptr ++ = '0';
        }

        if ( _First != _Last && * _First == _Punct_fac . decimal_point ( ) ) {
            * _Ptr ++ = localeconv ( ) -> decimal_point [ 0 ];
            ++ _First;
        }

        if ( _Significant == 0 ) {
            for (; _First != _Last && * _First == _Atoms [ 0 ]; _Seendigit = true, ( void ) ++ _First ) {
                -- _Phex;
            }

            if ( _Phex < 0 ) {
                * _Ptr ++ = '0';
                ++ _Phex;
            }
        }

        for (; _First != _Last && ( _Idx = _Find_elem ( _Atoms, * _First ) ) < _Numget_signoff;
             _Seendigit = true, ( void ) ++ _First ) {
            if ( _Significant < _Max_sig_dig ) {
                * _Ptr ++ = _Src [ _Idx ];
                ++ _Significant;
            }
        }

        if ( _Seendigit && _First != _Last
            && ( * _First == _Atoms [ _Numget_poff + 1 ]
                || * _First == _Atoms [ _Numget_poff ] ) ) {
            * _Ptr ++ = 'p';
            ++ _First;
            _Seendigit = false;
            _Significant = 0;

            if ( _First != _Last ) {
                if ( * _First == _Atoms [ _Numget_signoff + 1 ] ) {
                    * _Ptr ++ = '+';
                    ++ _First;
                } else if ( * _First == _Atoms [ _Numget_signoff ] ) {
                    * _Ptr ++ = '-';
                    ++ _First;
                }
            }

            for (; _First != _Last && * _First == _Atoms [ 0 ]; ++ _First ) {
                _Seendigit = true;
            }

            if ( _Seendigit ) {
                * _Ptr ++ = '0';
            }

            for (; _First != _Last && ( _Idx = _Find_elem ( _Atoms, * _First ) ) < _Numget_signoff;
                 _Seendigit = true, ( void ) ++ _First ) {
                if ( _Significant < 8 ) {
                    * _Ptr ++ = _Src [ _Idx ];
                    ++ _Significant;
                }
            }
        }

        if ( _Bad || ! _Seendigit ) {
            _Ptr = _Ac;
        }

        * _Ptr = '\000';
        * _Phexexp = _Phex;
        return 0;
    }


};
#line 1123 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\xlocnum"
template< class _Elem, class _InIt> locale::id 
#line 1124
num_get< _Elem, _InIt> ::id; 
#line 1130
template < class _Ty >
int _Float_put_desired_precision ( const streamsize _Precision, const ios_base :: fmtflags _Float_flags ) {

    const bool _Is_hex = _Float_flags == ( ios_base :: fixed | ios_base :: scientific );
    if ( _Is_hex ) {

        if constexpr ( is_same_v < _Ty, double > ) {
            return ( ( 53 - 1 ) + 3 ) / 4;
        } else if constexpr ( is_same_v < _Ty, long double > ) {
            return ( ( 53 - 1 ) + 3 ) / 4;
        } else {
            static_assert ( _Always_false < _Ty >, "Expected only double or long double here (not float)." );
        }
    }

    if ( _Precision > 0 ) {
        return static_cast < int > ( _Precision );
    } else if ( _Precision == 0 ) {
        const bool _Is_default_float = _Float_flags == 0;
        if ( _Is_default_float ) {
            return 1;
        } else {
            return 0;
        }
    } else {
        constexpr int _Default_precision = 6;
        return _Default_precision;
    }
}
#line 1160
template < class _Elem, class _OutIt = ostreambuf_iterator < _Elem, char_traits < _Elem > > >
class num_put : public locale :: facet {
public :
    static_assert ( ! 0 || _Is_any_of_v < _Elem, char, wchar_t >, "Unsupported facet specialization; see N4800 27.3.1.1.1 [locale.category]. Either use a Standard specialization or define _ENFORC" "E_FACET_SPECIALIZATIONS=0 to suppress this error." );

    static size_t __cdecl _Getcat ( const locale :: facet * * _Ppf = nullptr, const locale * _Ploc = nullptr ) {

        if ( _Ppf && ! * _Ppf ) {
            * _Ppf = new num_put < _Elem, _OutIt > ( _Locinfo ( _Ploc -> _C_str ( ) ) );
        }

        return 4;
    }

     static locale :: id id;

protected :
     ~ num_put ( ) noexcept override { }

    void _Init ( const _Locinfo & ) { }

public :
    explicit num_put ( size_t _Refs = 0 ) : locale :: facet ( _Refs ) {
        { _Locinfo _Lobj;
        _Init ( _Lobj );
        }
    }

     num_put ( const _Locinfo & _Lobj, size_t _Refs = 0 ) : locale :: facet ( _Refs ) {
        _Init ( _Lobj );
    }

    using char_type = _Elem;
    using iter_type = _OutIt;

    _OutIt put (
        _OutIt _Dest, ios_base & _Iosbase, _Elem _Fill, bool _Val ) const {
        return do_put ( _Dest, _Iosbase, _Fill, _Val );
    }

    _OutIt put (
        _OutIt _Dest, ios_base & _Iosbase, _Elem _Fill, long _Val ) const {
        return do_put ( _Dest, _Iosbase, _Fill, _Val );
    }

    _OutIt put ( _OutIt _Dest, ios_base & _Iosbase, _Elem _Fill,
        unsigned long _Val ) const {
        return do_put ( _Dest, _Iosbase, _Fill, _Val );
    }

    _OutIt put (
        _OutIt _Dest, ios_base & _Iosbase, _Elem _Fill, long long _Val ) const {
        return do_put ( _Dest, _Iosbase, _Fill, _Val );
    }

    _OutIt put ( _OutIt _Dest, ios_base & _Iosbase, _Elem _Fill,
        unsigned long long _Val ) const {
        return do_put ( _Dest, _Iosbase, _Fill, _Val );
    }

    _OutIt put (
        _OutIt _Dest, ios_base & _Iosbase, _Elem _Fill, double _Val ) const {
        return do_put ( _Dest, _Iosbase, _Fill, _Val );
    }

    _OutIt put (
        _OutIt _Dest, ios_base & _Iosbase, _Elem _Fill, long double _Val ) const {
        return do_put ( _Dest, _Iosbase, _Fill, _Val );
    }

    _OutIt put (
        _OutIt _Dest, ios_base & _Iosbase, _Elem _Fill, const void * _Val ) const {
        return do_put ( _Dest, _Iosbase, _Fill, _Val );
    }

protected :
    virtual _OutIt do_put (
        _OutIt _Dest, ios_base & _Iosbase, _Elem _Fill, bool _Val ) const {
        if ( ! ( _Iosbase . flags ( ) & ios_base :: boolalpha ) ) {
            return do_put ( _Dest, _Iosbase, _Fill, static_cast < long > ( _Val ) );
        } else {
            const auto & _Punct_fac = :: std :: use_facet < numpunct < _Elem >> ( _Iosbase . getloc ( ) );
            basic_string < _Elem > _Str;
            if ( _Val ) {
                _Str . assign ( _Punct_fac . truename ( ) );
            } else {
                _Str . assign ( _Punct_fac . falsename ( ) );
            }

            size_t _Fillcount;
            if ( _Iosbase . width ( ) <= 0 || static_cast < size_t > ( _Iosbase . width ( ) ) <= _Str . size ( ) ) {
                _Fillcount = 0;
            } else {
                _Fillcount = static_cast < size_t > ( _Iosbase . width ( ) ) - _Str . size ( );
            }

            if ( ( _Iosbase . flags ( ) & ios_base :: adjustfield ) != ios_base :: left ) {
                _Dest = _Rep ( _Dest, _Fill, _Fillcount );
                _Fillcount = 0;
            }
            _Dest = _Put ( _Dest, _Str . c_str ( ), _Str . size ( ) );
            _Iosbase . width ( 0 );
            return _Rep ( _Dest, _Fill, _Fillcount );
        }
    }

#pragma warning(push)
#pragma warning(disable : 4774)
    virtual _OutIt do_put (
        _OutIt _Dest, ios_base & _Iosbase, _Elem _Fill, long _Val ) const {
        char _Buf [ 2 * 32 ];
        char _Fmt [ 6 ];

        return _Iput ( _Dest, _Iosbase, _Fill, _Buf,
            static_cast < size_t > ( :: sprintf_s ( _Buf, sizeof ( _Buf ), _Ifmt ( _Fmt, "ld", _Iosbase . flags ( ) ), _Val ) ) );
    }

    virtual _OutIt do_put ( _OutIt _Dest, ios_base & _Iosbase, _Elem _Fill,
        unsigned long _Val ) const {
        char _Buf [ 2 * 32 ];
        char _Fmt [ 6 ];

        return _Iput ( _Dest, _Iosbase, _Fill, _Buf,
            static_cast < size_t > ( :: sprintf_s ( _Buf, sizeof ( _Buf ), _Ifmt ( _Fmt, "lu", _Iosbase . flags ( ) ), _Val ) ) );
    }

    virtual _OutIt do_put (
        _OutIt _Dest, ios_base & _Iosbase, _Elem _Fill, long long _Val ) const {
        char _Buf [ 2 * 32 ];
        char _Fmt [ 8 ];

        return _Iput ( _Dest, _Iosbase, _Fill, _Buf,
            static_cast < size_t > ( :: sprintf_s ( _Buf, sizeof ( _Buf ), _Ifmt ( _Fmt, "Ld", _Iosbase . flags ( ) ), _Val ) ) );
    }

    virtual _OutIt do_put ( _OutIt _Dest, ios_base & _Iosbase, _Elem _Fill,
        unsigned long long _Val ) const {
        char _Buf [ 2 * 32 ];
        char _Fmt [ 8 ];

        return _Iput ( _Dest, _Iosbase, _Fill, _Buf,
            static_cast < size_t > ( :: sprintf_s ( _Buf, sizeof ( _Buf ), _Ifmt ( _Fmt, "Lu", _Iosbase . flags ( ) ), _Val ) ) );
    }

    virtual _OutIt do_put (
        _OutIt _Dest, ios_base & _Iosbase, _Elem _Fill, double _Val ) const {
        string _Buf;
        char _Fmt [ 8 ];
        const auto _Float_flags = _Iosbase . flags ( ) & ios_base :: floatfield;
        const bool _Is_fixed = _Float_flags == ios_base :: fixed;
        const bool _Is_hex = _Float_flags == ( ios_base :: fixed | ios_base :: scientific );
        const streamsize _Precision = _Is_hex ? - 1 : _Iosbase . precision ( );
        const int _Desired_precision =
            _Float_put_desired_precision < double > ( _Precision, _Float_flags );
        size_t _Bufsize = static_cast < size_t > ( _Desired_precision );
        if ( _Is_fixed && (10000000000.0) < :: fabs ( _Val ) ) {
            int _Ptwo;
            ( void ) :: frexp ( _Val, & _Ptwo );
            _Bufsize += :: abs ( _Ptwo ) * 30103L / 100000L;
        }

        _Buf . resize ( _Bufsize + 50 );
        const auto _Ngen = static_cast < size_t > ( :: sprintf_s (
            & _Buf [ 0 ], _Buf . size ( ), _Ffmt ( _Fmt, 0, _Iosbase . flags ( ) ), static_cast < int > ( _Precision ), _Val ) );

        return _Fput ( _Dest, _Iosbase, _Fill, _Buf . c_str ( ), _Ngen );
    }

    virtual _OutIt do_put (
        _OutIt _Dest, ios_base & _Iosbase, _Elem _Fill, long double _Val ) const {
        string _Buf;
        char _Fmt [ 8 ];
        const auto _Float_flags = _Iosbase . flags ( ) & ios_base :: floatfield;
        const bool _Is_fixed = _Float_flags == ios_base :: fixed;
        const bool _Is_hex = _Float_flags == ( ios_base :: fixed | ios_base :: scientific );
        const streamsize _Precision = _Is_hex ? - 1 : _Iosbase . precision ( );
        const int _Desired_precision =
            _Float_put_desired_precision < long double > ( _Precision, _Float_flags );
        size_t _Bufsize = static_cast < size_t > ( _Desired_precision );
        if ( _Is_fixed && (10000000000.0) < :: fabsl ( _Val ) ) {
            int _Ptwo;
            ( void ) :: frexpl ( _Val, & _Ptwo );
            _Bufsize += :: abs ( _Ptwo ) * 30103L / 100000L;
        }

        _Buf . resize ( _Bufsize + 50 );
        const auto _Ngen = static_cast < size_t > ( :: sprintf_s (
            & _Buf [ 0 ], _Buf . size ( ), _Ffmt ( _Fmt, 'L', _Iosbase . flags ( ) ), static_cast < int > ( _Precision ), _Val ) );

        return _Fput ( _Dest, _Iosbase, _Fill, _Buf . c_str ( ), _Ngen );
    }
#pragma warning(pop)

    virtual _OutIt do_put (
        _OutIt _Dest, ios_base & _Iosbase, _Elem _Fill, const void * _Val ) const {
        char _Buf [ 2 * 32 ];

        return _Iput (
            _Dest, _Iosbase, _Fill, _Buf, static_cast < size_t > ( :: sprintf_s ( _Buf, sizeof ( _Buf ), "%p", _Val ) ) );
    }

private :
    char * __cdecl _Ffmt (
        char * _Fmt, char _Spec, ios_base :: fmtflags _Flags ) const {
        char * _Ptr = _Fmt;
        * _Ptr ++ = '%';

        if ( _Flags & ios_base :: showpos ) {
            * _Ptr ++ = '+';
        }

        if ( _Flags & ios_base :: showpoint ) {
            * _Ptr ++ = '#';
        }

        * _Ptr ++ = '.';
        * _Ptr ++ = '*';
        if ( _Spec != '\000' ) {
            * _Ptr ++ = _Spec;
        }

        char _Ch;
        ios_base :: fmtflags _Ffl = _Flags & ios_base :: floatfield;
        if ( _Flags & ios_base :: uppercase ) {
            if ( _Ffl == ios_base :: fixed ) {
                _Ch = 'f';
            } else if ( _Ffl == ios_base :: hexfloat ) {
                _Ch = 'A';
            } else if ( _Ffl == ios_base :: scientific ) {
                _Ch = 'E';
            } else {
                _Ch = 'G';
            }
        } else {
            if ( _Ffl == ios_base :: fixed ) {
                _Ch = 'f';
            } else if ( _Ffl == ios_base :: hexfloat ) {
                _Ch = 'a';
            } else if ( _Ffl == ios_base :: scientific ) {
                _Ch = 'e';
            } else {
                _Ch = 'g';
            }
        }
        * _Ptr ++ = _Ch;

        * _Ptr = '\000';
        return _Fmt;
    }

    _OutIt __cdecl _Fput ( _OutIt _Dest, ios_base & _Iosbase, _Elem _Fill, const char * _Buf,
        size_t _Count ) const {
        auto _Prefix = static_cast < size_t > ( 0 < _Count && ( * _Buf == '+' || * _Buf == '-' ) );
        const char * _Exps;
        if ( ( _Iosbase . flags ( ) & ios_base :: floatfield ) != ios_base :: hexfloat ) {
            _Exps = "eE";
        } else {
            _Exps = "pP";
            if ( _Prefix + 2 <= _Count && _Buf [ _Prefix ] == '0'
                && ( _Buf [ _Prefix + 1 ] == 'x' || _Buf [ _Prefix + 1 ] == 'X' ) ) {
                _Prefix += 2;
            }
        }
        const size_t _Eoff = :: strcspn ( & _Buf [ 0 ], _Exps );
        char _Dp [ 2 ] = { "." };
        _Dp [ 0 ] = :: localeconv ( ) -> decimal_point [ 0 ];
        const size_t _Poff = :: strcspn ( & _Buf [ 0 ], & _Dp [ 0 ] );

        const ctype < _Elem > & _Ctype_fac = :: std :: use_facet < ctype < _Elem >> ( _Iosbase . getloc ( ) );
        basic_string < _Elem > _Groupstring ( _Count, _Elem ( 0 ) );
        _Ctype_fac . widen ( _Buf, _Buf + _Count, & _Groupstring [ 0 ] );

        const auto & _Punct_fac = :: std :: use_facet < numpunct < _Elem >> ( _Iosbase . getloc ( ) );
        const string _Grouping = _Punct_fac . grouping ( );
        const _Elem _Kseparator = _Punct_fac . thousands_sep ( );

        if ( _Poff != _Count ) {
            _Groupstring [ _Poff ] = _Punct_fac . decimal_point ( );
        }

        size_t _Off = _Poff == _Count ? _Eoff : _Poff;
        const char * _Pg = & _Grouping [ 0 ];
        while ( * _Pg != 127 && '\000' < * _Pg && static_cast < size_t > ( * _Pg ) < _Off - _Prefix ) {

            _Groupstring . insert ( _Off -= * _Pg, 1, _Kseparator );
            if ( '\000' < _Pg [ 1 ] ) {
                ++ _Pg;
            }
        }

        _Count = _Groupstring . size ( );

        size_t _Fillcount;
        if ( _Iosbase . width ( ) <= 0 || static_cast < size_t > ( _Iosbase . width ( ) ) <= _Count ) {
            _Fillcount = 0;
        } else {
            _Fillcount = static_cast < size_t > ( _Iosbase . width ( ) ) - _Count;
        }

        ios_base :: fmtflags _Adjustfield = _Iosbase . flags ( ) & ios_base :: adjustfield;
        if ( _Adjustfield != ios_base :: left && _Adjustfield != ios_base :: internal ) {
            _Dest = _Rep ( _Dest, _Fill, _Fillcount );
            _Fillcount = 0;
            _Dest = _Put ( _Dest, & _Groupstring [ 0 ], _Prefix );
        } else if ( _Adjustfield == ios_base :: internal ) {
            _Dest = _Put ( _Dest, & _Groupstring [ 0 ], _Prefix );
            _Dest = _Rep ( _Dest, _Fill, _Fillcount );
            _Fillcount = 0;
        } else {
            _Dest = _Put ( _Dest, & _Groupstring [ 0 ], _Prefix );
        }

        _Dest = _Put ( _Dest, & _Groupstring [ _Prefix ], _Count - _Prefix );
        _Iosbase . width ( 0 );
        return _Rep ( _Dest, _Fill, _Fillcount );
    }

    char * __cdecl _Ifmt (
        char * _Fmt, const char * _Spec, ios_base :: fmtflags _Flags ) const {
        char * _Ptr = _Fmt;
        * _Ptr ++ = '%';

        if ( _Flags & ios_base :: showpos ) {
            * _Ptr ++ = '+';
        }

        if ( _Flags & ios_base :: showbase ) {
            * _Ptr ++ = '#';
        }

        if ( _Spec [ 0 ] != 'L' ) {
            * _Ptr ++ = _Spec [ 0 ];
        } else {
            * _Ptr ++ = 'I';
            * _Ptr ++ = '6';
            * _Ptr ++ = '4';
        }

        ios_base :: fmtflags _Basefield = _Flags & ios_base :: basefield;
        * _Ptr ++ = _Basefield == ios_base :: oct ? 'o'
                                      : _Basefield != ios_base :: hex ? _Spec [ 1 ]
                                      : _Flags & ios_base :: uppercase ? 'X'
                                                                     : 'x';
        * _Ptr = '\000';
        return _Fmt;
    }

    _OutIt __cdecl _Iput ( _OutIt _Dest, ios_base & _Iosbase, _Elem _Fill, char * _Buf,
        size_t _Count ) const {
        auto _Prefix = static_cast < size_t > ( 0 < _Count && ( * _Buf == '+' || * _Buf == '-' ) );
        if ( ( _Iosbase . flags ( ) & ios_base :: basefield ) == ios_base :: hex && _Prefix + 2 <= _Count && _Buf [ _Prefix ] == '0'
            && ( _Buf [ _Prefix + 1 ] == 'x' || _Buf [ _Prefix + 1 ] == 'X' ) ) {
            _Prefix += 2;
        }

        const ctype < _Elem > & _Ctype_fac = :: std :: use_facet < ctype < _Elem >> ( _Iosbase . getloc ( ) );
        basic_string < _Elem > _Groupstring ( _Count, _Elem ( 0 ) );
        _Ctype_fac . widen ( _Buf, _Buf + _Count, & _Groupstring [ 0 ] );

        const auto & _Punct_fac = :: std :: use_facet < numpunct < _Elem >> ( _Iosbase . getloc ( ) );
        const string _Grouping = _Punct_fac . grouping ( );
        const char * _Pg = & _Grouping [ 0 ];
        if ( * _Pg != 127 && '\000' < * _Pg ) {
            const _Elem _Kseparator = _Punct_fac . thousands_sep ( );
            while ( * _Pg != 127 && '\000' < * _Pg && static_cast < size_t > ( * _Pg ) < _Count - _Prefix ) {

                _Count -= * _Pg;
                _Groupstring . insert ( _Count, 1, _Kseparator );
                if ( '\000' < _Pg [ 1 ] ) {
                    ++ _Pg;
                }
            }
        }

        _Count = _Groupstring . size ( );

        size_t _Fillcount;
        if ( _Iosbase . width ( ) <= 0 || static_cast < size_t > ( _Iosbase . width ( ) ) <= _Count ) {
            _Fillcount = 0;
        } else {
            _Fillcount = static_cast < size_t > ( _Iosbase . width ( ) ) - _Count;
        }

        ios_base :: fmtflags _Adjustfield = _Iosbase . flags ( ) & ios_base :: adjustfield;
        if ( _Adjustfield != ios_base :: left && _Adjustfield != ios_base :: internal ) {
            _Dest = _Rep ( _Dest, _Fill, _Fillcount );
            _Fillcount = 0;
            _Dest = _Put ( _Dest, & _Groupstring [ 0 ], _Prefix );
        } else if ( _Adjustfield == ios_base :: internal ) {
            _Dest = _Put ( _Dest, & _Groupstring [ 0 ], _Prefix );
            _Dest = _Rep ( _Dest, _Fill, _Fillcount );
            _Fillcount = 0;
        } else {
            _Dest = _Put ( _Dest, & _Groupstring [ 0 ], _Prefix );
        }

        _Dest = _Put ( _Dest, & _Groupstring [ _Prefix ], _Count - _Prefix );
        _Iosbase . width ( 0 );
        return _Rep ( _Dest, _Fill, _Fillcount );
    }

    _OutIt __cdecl _Put (
        _OutIt _Dest, const _Elem * _Ptr, size_t _Count ) const {
        for (; 0 < _Count; -- _Count, ( void ) ++ _Dest, ++ _Ptr ) {
            * _Dest = * _Ptr;
        }

        return _Dest;
    }

    _OutIt __cdecl _Rep ( _OutIt _Dest, _Elem _Ch, size_t _Count ) const {
        for (; 0 < _Count; -- _Count, ( void ) ++ _Dest ) {
            * _Dest = _Ch;
        }

        return _Dest;
    }
};
#line 1584
template< class _Elem, class _OutIt> locale::id 
#line 1585
num_put< _Elem, _OutIt> ::id; 
#line 1590
template locale::id numpunct< char> ::id;
#line 1591
template class __declspec(dllimport) num_get< char, istreambuf_iterator< char, char_traits< char> > > ;
#line 1592
template class __declspec(dllimport) num_put< char, ostreambuf_iterator< char, char_traits< char> > > ;
#line 1594
template locale::id numpunct< __wchar_t> ::id;
#line 1595
template class __declspec(dllimport) num_get< __wchar_t, istreambuf_iterator< __wchar_t, char_traits< __wchar_t> > > ;
#line 1596
template class __declspec(dllimport) num_put< __wchar_t, ostreambuf_iterator< __wchar_t, char_traits< __wchar_t> > > ;
#line 1611 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\xlocnum"
}
#line 1614
#pragma warning(pop)
#pragma pack ( pop )
#line 13 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\ios"
#pragma pack ( push, 8 )
#pragma warning(push, 3)
#pragma warning(disable : 4180 4412 4455 4494 4514 4574 4582 4583 4587 4588 4619 4623 4625 4626 4643 4648 4702 4793 4820 4988 5026 5027 5045 6294 4984 5053 )
#line 20
namespace std { 
#line 21
template < class _Elem, class _Traits >
class basic_ios : public ios_base {
public :
    using _Myos = basic_ostream < _Elem, _Traits >;
    using _Mysb = basic_streambuf < _Elem, _Traits >;
    using _Ctype = ctype < _Elem >;
    using char_type = _Elem;
    using traits_type = _Traits;
    using int_type = typename _Traits :: int_type;
    using pos_type = typename _Traits :: pos_type;
    using off_type = typename _Traits :: off_type;

    explicit basic_ios ( _Mysb * _Strbuf ) {
        init ( _Strbuf );
    }

     ~ basic_ios ( ) noexcept override { }

    void clear ( iostate _State = goodbit, bool _Reraise = false ) {

        ios_base :: clear ( _State | ( _Mystrbuf ? ios_base :: _Iostate { } : ios_base :: badbit ), _Reraise );
    }


    void clear ( io_state _State ) {
        clear ( static_cast < iostate > ( _State ) );
    }


    void setstate ( iostate _State, bool _Reraise = false ) {

        clear ( rdstate ( ) | _State, _Reraise );
    }


    void setstate ( io_state _State ) {
        setstate ( static_cast < iostate > ( _State ) );
    }


    basic_ios & copyfmt ( const basic_ios & _Right ) {
        _Tiestr = _Right . tie ( );
        _Fillch = _Right . fill ( );
        ios_base :: copyfmt ( _Right );
        return * this;
    }

    _Myos * tie ( ) const noexcept {
        return _Tiestr;
    }

    _Myos * tie ( _Myos * _Newtie ) noexcept {
        _Myos * _Oldtie = _Tiestr;
        _Tiestr = _Newtie;
        return _Oldtie;
    }

    [ [ nodiscard ] ] _Mysb * rdbuf ( ) const noexcept {
        return _Mystrbuf;
    }

    _Mysb * rdbuf ( _Mysb * _Strbuf ) {
        _Mysb * _Oldstrbuf = _Mystrbuf;
        _Mystrbuf = _Strbuf;
        clear ( );
        return _Oldstrbuf;
    }

    locale imbue ( const locale & _Loc ) {
        locale _Oldlocale = ios_base :: imbue ( _Loc );
        const auto _Rdbuf = rdbuf ( );
        if ( _Rdbuf ) {
            _Rdbuf -> pubimbue ( _Loc );
        }

        return _Oldlocale;
    }

    _Elem fill ( ) const noexcept {
        return _Fillch;
    }

    _Elem fill ( _Elem _Newfill ) noexcept {
        _Elem _Oldfill = _Fillch;
        _Fillch = _Newfill;
        return _Oldfill;
    }

    char narrow ( _Elem _Ch, char _Dflt = '\000' ) const {
        return :: std :: use_facet < _Ctype > ( getloc ( ) ) . narrow ( _Ch, _Dflt );
    }

    _Elem widen ( char _Byte ) const {
        return :: std :: use_facet < _Ctype > ( getloc ( ) ) . widen ( _Byte );
    }

    void move ( basic_ios & _Right ) noexcept {
        if ( this != :: std :: addressof ( _Right ) ) {
            _Mystrbuf = nullptr;
            _Tiestr = nullptr;
            this -> swap ( _Right );
        }
    }

    void move ( basic_ios && _Right ) noexcept {
        if ( this != :: std :: addressof ( _Right ) ) {
            _Mystrbuf = nullptr;
            _Tiestr = nullptr;
            this -> swap ( _Right );
        }
    }

    void swap ( basic_ios & _Right ) noexcept {
        ios_base :: swap ( _Right );
        :: std :: swap ( _Fillch, _Right . _Fillch );
        :: std :: swap ( _Tiestr, _Right . _Tiestr );
    }

    void set_rdbuf ( _Mysb * _Strbuf ) noexcept {

        _Mystrbuf = _Strbuf;
    }

protected :
    void init ( _Mysb * _Strbuf = nullptr, bool _Isstd = false ) {

        _Init ( );
        _Mystrbuf = _Strbuf;
        _Tiestr = nullptr;
        _Fillch = widen ( ' ' );

        if ( ! _Mystrbuf ) {
            setstate ( badbit );
        }

        if ( _Isstd ) {
            _Addstd ( this );
        }
    }

     basic_ios ( ) { }

private :
    _Mysb * _Mystrbuf;
    _Myos * _Tiestr;
    _Elem _Fillch;

public :
     basic_ios ( const basic_ios & ) = delete;
    basic_ios & operator = ( const basic_ios & ) = delete;
};
#line 176 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\ios"
template class __declspec(dllimport) basic_ios< char, char_traits< char> > ;
#line 177
template class __declspec(dllimport) basic_ios< __wchar_t, char_traits< __wchar_t> > ;
#line 185 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\ios"
inline ios_base &__cdecl boolalpha(ios_base &_Iosbase) { 
#line 186
_Iosbase.setf(_Iosb< int> ::boolalpha); 
#line 187
return _Iosbase; 
#line 188
} 
#line 190
inline ios_base &__cdecl dec(ios_base &_Iosbase) { 
#line 191
_Iosbase.setf(_Iosb< int> ::dec, _Iosb< int> ::basefield); 
#line 192
return _Iosbase; 
#line 193
} 
#line 195
inline ios_base &__cdecl defaultfloat(ios_base &_Iosbase) { 
#line 196
_Iosbase.unsetf(_Iosb< int> ::floatfield); 
#line 197
return _Iosbase; 
#line 198
} 
#line 200
inline ios_base &__cdecl fixed(ios_base &_Iosbase) { 
#line 201
_Iosbase.setf(_Iosb< int> ::fixed, _Iosb< int> ::floatfield); 
#line 202
return _Iosbase; 
#line 203
} 
#line 205
inline ios_base &__cdecl hex(ios_base &_Iosbase) { 
#line 206
_Iosbase.setf(_Iosb< int> ::hex, _Iosb< int> ::basefield); 
#line 207
return _Iosbase; 
#line 208
} 
#line 210
inline ios_base &__cdecl hexfloat(ios_base &_Iosbase) { 
#line 211
_Iosbase.setf(_Iosb< int> ::hexfloat, _Iosb< int> ::floatfield); 
#line 212
return _Iosbase; 
#line 213
} 
#line 215
inline ios_base &__cdecl internal(ios_base &_Iosbase) { 
#line 216
_Iosbase.setf(_Iosb< int> ::internal, _Iosb< int> ::adjustfield); 
#line 217
return _Iosbase; 
#line 218
} 
#line 220
inline ios_base &__cdecl left(ios_base &_Iosbase) { 
#line 221
_Iosbase.setf(_Iosb< int> ::left, _Iosb< int> ::adjustfield); 
#line 222
return _Iosbase; 
#line 223
} 
#line 225
inline ios_base &__cdecl noboolalpha(ios_base &_Iosbase) { 
#line 226
_Iosbase.unsetf(_Iosb< int> ::boolalpha); 
#line 227
return _Iosbase; 
#line 228
} 
#line 230
inline ios_base &__cdecl noshowbase(ios_base &_Iosbase) { 
#line 231
_Iosbase.unsetf(_Iosb< int> ::showbase); 
#line 232
return _Iosbase; 
#line 233
} 
#line 235
inline ios_base &__cdecl noshowpoint(ios_base &_Iosbase) { 
#line 236
_Iosbase.unsetf(_Iosb< int> ::showpoint); 
#line 237
return _Iosbase; 
#line 238
} 
#line 240
inline ios_base &__cdecl noshowpos(ios_base &_Iosbase) { 
#line 241
_Iosbase.unsetf(_Iosb< int> ::showpos); 
#line 242
return _Iosbase; 
#line 243
} 
#line 245
inline ios_base &__cdecl noskipws(ios_base &_Iosbase) { 
#line 246
_Iosbase.unsetf(_Iosb< int> ::skipws); 
#line 247
return _Iosbase; 
#line 248
} 
#line 250
inline ios_base &__cdecl nounitbuf(ios_base &_Iosbase) { 
#line 251
_Iosbase.unsetf(_Iosb< int> ::unitbuf); 
#line 252
return _Iosbase; 
#line 253
} 
#line 255
inline ios_base &__cdecl nouppercase(ios_base &_Iosbase) { 
#line 256
_Iosbase.unsetf(_Iosb< int> ::uppercase); 
#line 257
return _Iosbase; 
#line 258
} 
#line 260
inline ios_base &__cdecl oct(ios_base &_Iosbase) { 
#line 261
_Iosbase.setf(_Iosb< int> ::oct, _Iosb< int> ::basefield); 
#line 262
return _Iosbase; 
#line 263
} 
#line 265
inline ios_base &__cdecl right(ios_base &_Iosbase) { 
#line 266
_Iosbase.setf(_Iosb< int> ::right, _Iosb< int> ::adjustfield); 
#line 267
return _Iosbase; 
#line 268
} 
#line 270
inline ios_base &__cdecl scientific(ios_base &_Iosbase) { 
#line 271
_Iosbase.setf(_Iosb< int> ::scientific, _Iosb< int> ::floatfield); 
#line 272
return _Iosbase; 
#line 273
} 
#line 275
inline ios_base &__cdecl showbase(ios_base &_Iosbase) { 
#line 276
_Iosbase.setf(_Iosb< int> ::showbase); 
#line 277
return _Iosbase; 
#line 278
} 
#line 280
inline ios_base &__cdecl showpoint(ios_base &_Iosbase) { 
#line 281
_Iosbase.setf(_Iosb< int> ::showpoint); 
#line 282
return _Iosbase; 
#line 283
} 
#line 285
inline ios_base &__cdecl showpos(ios_base &_Iosbase) { 
#line 286
_Iosbase.setf(_Iosb< int> ::showpos); 
#line 287
return _Iosbase; 
#line 288
} 
#line 290
inline ios_base &__cdecl skipws(ios_base &_Iosbase) { 
#line 291
_Iosbase.setf(_Iosb< int> ::skipws); 
#line 292
return _Iosbase; 
#line 293
} 
#line 295
inline ios_base &__cdecl unitbuf(ios_base &_Iosbase) { 
#line 296
_Iosbase.setf(_Iosb< int> ::unitbuf); 
#line 297
return _Iosbase; 
#line 298
} 
#line 300
inline ios_base &__cdecl uppercase(ios_base &_Iosbase) { 
#line 301
_Iosbase.setf(_Iosb< int> ::uppercase); 
#line 302
return _Iosbase; 
#line 303
} 
#line 306
namespace [[deprecated("warning STL4002: The non-Standard std::tr1 namespace and TR1-only machinery are deprecated and will be REMOVED. You can define _" "SILENCE_TR1_NAMESPACE_DEPRECATION_WARNING to suppress this warning.")]] tr1 { 
#line 307
using std::hexfloat;
#line 308
}
#line 311 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\ios"
}
#line 315
#pragma warning(pop)
#pragma pack ( pop )
#line 19 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\ostream"
#pragma pack ( push, 8 )
#pragma warning(push, 3)
#pragma warning(disable : 4180 4412 4455 4494 4514 4574 4582 4583 4587 4588 4619 4623 4625 4626 4643 4648 4702 4793 4820 4988 5026 5027 5045 6294 4984 5053 )
#line 26
namespace std { 
#pragma vtordisp(push, 2)
#line 29
template < class _Elem, class _Traits >
class basic_ostream : virtual public basic_ios < _Elem, _Traits > {
public :
    using _Myios = basic_ios < _Elem, _Traits >;
    using _Mysb = basic_streambuf < _Elem, _Traits >;
    using _Iter = ostreambuf_iterator < _Elem, _Traits >;
    using _Nput = num_put < _Elem, _Iter >;

    explicit basic_ostream ( basic_streambuf < _Elem, _Traits > * _Strbuf, bool _Isstd = false ) {
        _Myios :: init ( _Strbuf, _Isstd );
    }

     basic_ostream ( _Uninitialized, bool _Addit = true ) {
        if ( _Addit ) {
            this -> _Addstd ( this );
        }
    }

protected :
     basic_ostream ( basic_ostream && _Right ) {
        _Myios :: init ( );
        _Myios :: move ( :: std :: move ( _Right ) );
    }

    basic_ostream & operator = ( basic_ostream && _Right ) noexcept {
        this -> swap ( _Right );
        return * this;
    }

    void swap ( basic_ostream & _Right ) noexcept {
        if ( this != :: std :: addressof ( _Right ) ) {
            _Myios :: swap ( _Right );
        }
    }

public :
     basic_ostream ( const basic_ostream & ) = delete;
    basic_ostream & operator = ( const basic_ostream & ) = delete;

     ~ basic_ostream ( ) noexcept override { }

    using int_type = typename _Traits :: int_type;
    using pos_type = typename _Traits :: pos_type;
    using off_type = typename _Traits :: off_type;

    class _Sentry_base {
    public :
         _Sentry_base ( basic_ostream & _Ostr ) : _Myostr ( _Ostr ) {
            const auto _Rdbuf = _Myostr . rdbuf ( );
            if ( _Rdbuf ) {
                _Rdbuf -> _Lock ( );
            }
        }

         ~ _Sentry_base ( ) noexcept {
            const auto _Rdbuf = _Myostr . rdbuf ( );
            if ( _Rdbuf ) {
                _Rdbuf -> _Unlock ( );
            }
        }

        basic_ostream & _Myostr;

        _Sentry_base & operator = ( const _Sentry_base & ) = delete;
    };

    class sentry : public _Sentry_base {
    public :
        explicit sentry ( basic_ostream & _Ostr ) : _Sentry_base ( _Ostr ) {
            if ( ! _Ostr . good ( ) ) {
                _Ok = false;
                return;
            }

            const auto _Tied = _Ostr . tie ( );
            if ( ! _Tied || _Tied == & _Ostr ) {
                _Ok = true;
                return;
            }

            _Tied -> flush ( );
            _Ok = _Ostr . good ( );
        }

        __pragma(warning(push))                                __pragma(warning(disable : 4996))
         ~ sentry ( ) noexcept {



            const bool _Zero_uncaught_exceptions = ! :: std :: uncaught_exception ( );




            if ( _Zero_uncaught_exceptions ) {
                this -> _Myostr . _Osfx ( );
            }
        }
        __pragma(warning(pop))

        explicit operator bool ( ) const {
            return _Ok;
        }

         sentry ( const sentry & ) = delete;
        sentry & operator = ( const sentry & ) = delete;

    private :
        bool _Ok;
    };


    bool opfx ( ) {
        if ( ! this -> good ( ) ) {
            return false;
        }

        const auto _Tied = _Myios :: tie ( );
        if ( ! _Tied || _Myios :: tie ( ) == this ) {
            return true;
        }

        _Tied -> flush ( );
        return this -> good ( );
    }


    void osfx ( ) noexcept {
        _Osfx ( );
    }

    void _Osfx ( ) noexcept {
        try {
        if ( this -> good ( ) && this -> flags ( ) & ios_base :: unitbuf ) {
            if ( _Myios :: rdbuf ( ) -> pubsync ( ) == - 1 ) {
                _Myios :: setstate ( ios_base :: badbit );
            }
        }
        } catch ( ... ) {
        }
    }




















    basic_ostream & operator << ( basic_ostream & ( __cdecl * _Pfn ) ( basic_ostream & ) ) {

        return _Pfn ( * this );
    }

    basic_ostream & operator << ( _Myios & ( __cdecl * _Pfn ) ( _Myios & ) ) {

        _Pfn ( * this );
        return * this;
    }

    basic_ostream & operator << ( ios_base & ( __cdecl * _Pfn ) ( ios_base & ) ) {

        _Pfn ( * this );
        return * this;
    }

    basic_ostream & operator << ( bool _Val ) {
        ios_base :: iostate _State = ios_base :: goodbit;
        const sentry _Ok ( * this );

        if ( _Ok ) {
            const _Nput & _Nput_fac = :: std :: use_facet < _Nput > ( this -> getloc ( ) );

            try {
            if ( _Nput_fac . put ( _Iter ( _Myios :: rdbuf ( ) ), * this, _Myios :: fill ( ), _Val ) . failed ( ) ) {
                _State |= ios_base :: badbit;
            }
            } catch ( ... ) { _Myios :: setstate ( ios_base :: badbit, true ); }
        }

        _Myios :: setstate ( _State );
        return * this;
    }

    basic_ostream & operator << ( short _Val ) {
        ios_base :: iostate _State = ios_base :: goodbit;
        const sentry _Ok ( * this );

        if ( _Ok ) {
            const _Nput & _Nput_fac = :: std :: use_facet < _Nput > ( this -> getloc ( ) );
            ios_base :: fmtflags _Bfl = this -> flags ( ) & ios_base :: basefield;

            long _Tmp;
            if ( _Bfl == ios_base :: oct || _Bfl == ios_base :: hex ) {
                _Tmp = static_cast < long > ( static_cast < unsigned short > ( _Val ) );
            } else {
                _Tmp = static_cast < long > ( _Val );
            }

            try {
            if ( _Nput_fac . put ( _Iter ( _Myios :: rdbuf ( ) ), * this, _Myios :: fill ( ), _Tmp ) . failed ( ) ) {
                _State |= ios_base :: badbit;
            }
            } catch ( ... ) { _Myios :: setstate ( ios_base :: badbit, true ); }
        }

        _Myios :: setstate ( _State );
        return * this;
    }









    basic_ostream & operator << ( unsigned short _Val ) {
        ios_base :: iostate _State = ios_base :: goodbit;
        const sentry _Ok ( * this );

        if ( _Ok ) {
            const _Nput & _Nput_fac = :: std :: use_facet < _Nput > ( this -> getloc ( ) );

            try {
            if ( _Nput_fac . put ( _Iter ( _Myios :: rdbuf ( ) ), * this, _Myios :: fill ( ), static_cast < unsigned long > ( _Val ) )
                    . failed ( ) ) {
                _State |= ios_base :: badbit;
            }
            } catch ( ... ) { _Myios :: setstate ( ios_base :: badbit, true ); }
        }

        _Myios :: setstate ( _State );
        return * this;
    }

    basic_ostream & operator << ( int _Val ) {
        ios_base :: iostate _State = ios_base :: goodbit;
        const sentry _Ok ( * this );

        if ( _Ok ) {
            const _Nput & _Nput_fac = :: std :: use_facet < _Nput > ( this -> getloc ( ) );
            ios_base :: fmtflags _Bfl = this -> flags ( ) & ios_base :: basefield;

            long _Tmp;
            if ( _Bfl == ios_base :: oct || _Bfl == ios_base :: hex ) {
                _Tmp = static_cast < long > ( static_cast < unsigned int > ( _Val ) );
            } else {
                _Tmp = static_cast < long > ( _Val );
            }

            try {
            if ( _Nput_fac . put ( _Iter ( _Myios :: rdbuf ( ) ), * this, _Myios :: fill ( ), _Tmp ) . failed ( ) ) {
                _State |= ios_base :: badbit;
            }
            } catch ( ... ) { _Myios :: setstate ( ios_base :: badbit, true ); }
        }

        _Myios :: setstate ( _State );
        return * this;
    }

    basic_ostream & operator << ( unsigned int _Val ) {
        ios_base :: iostate _State = ios_base :: goodbit;
        const sentry _Ok ( * this );

        if ( _Ok ) {
            const _Nput & _Nput_fac = :: std :: use_facet < _Nput > ( this -> getloc ( ) );

            try {
            if ( _Nput_fac . put ( _Iter ( _Myios :: rdbuf ( ) ), * this, _Myios :: fill ( ), static_cast < unsigned long > ( _Val ) )
                    . failed ( ) ) {
                _State |= ios_base :: badbit;
            }
            } catch ( ... ) { _Myios :: setstate ( ios_base :: badbit, true ); }
        }

        _Myios :: setstate ( _State );
        return * this;
    }

    basic_ostream & operator << ( long _Val ) {
        ios_base :: iostate _State = ios_base :: goodbit;
        const sentry _Ok ( * this );

        if ( _Ok ) {
            const _Nput & _Nput_fac = :: std :: use_facet < _Nput > ( this -> getloc ( ) );

            try {
            if ( _Nput_fac . put ( _Iter ( _Myios :: rdbuf ( ) ), * this, _Myios :: fill ( ), _Val ) . failed ( ) ) {
                _State |= ios_base :: badbit;
            }
            } catch ( ... ) { _Myios :: setstate ( ios_base :: badbit, true ); }
        }

        _Myios :: setstate ( _State );
        return * this;
    }

    basic_ostream & operator << ( unsigned long _Val ) {
        ios_base :: iostate _State = ios_base :: goodbit;
        const sentry _Ok ( * this );

        if ( _Ok ) {
            const _Nput & _Nput_fac = :: std :: use_facet < _Nput > ( this -> getloc ( ) );

            try {
            if ( _Nput_fac . put ( _Iter ( _Myios :: rdbuf ( ) ), * this, _Myios :: fill ( ), _Val ) . failed ( ) ) {
                _State |= ios_base :: badbit;
            }
            } catch ( ... ) { _Myios :: setstate ( ios_base :: badbit, true ); }
        }

        _Myios :: setstate ( _State );
        return * this;
    }

    basic_ostream & operator << ( long long _Val ) {
        ios_base :: iostate _State = ios_base :: goodbit;
        const sentry _Ok ( * this );

        if ( _Ok ) {
            const _Nput & _Nput_fac = :: std :: use_facet < _Nput > ( this -> getloc ( ) );

            try {
            if ( _Nput_fac . put ( _Iter ( _Myios :: rdbuf ( ) ), * this, _Myios :: fill ( ), _Val ) . failed ( ) ) {
                _State |= ios_base :: badbit;
            }
            } catch ( ... ) { _Myios :: setstate ( ios_base :: badbit, true ); }
        }

        _Myios :: setstate ( _State );
        return * this;
    }

    basic_ostream & operator << ( unsigned long long _Val ) {
        ios_base :: iostate _State = ios_base :: goodbit;
        const sentry _Ok ( * this );

        if ( _Ok ) {
            const _Nput & _Nput_fac = :: std :: use_facet < _Nput > ( this -> getloc ( ) );

            try {
            if ( _Nput_fac . put ( _Iter ( _Myios :: rdbuf ( ) ), * this, _Myios :: fill ( ), _Val ) . failed ( ) ) {
                _State |= ios_base :: badbit;
            }
            } catch ( ... ) { _Myios :: setstate ( ios_base :: badbit, true ); }
        }

        _Myios :: setstate ( _State );
        return * this;
    }

    basic_ostream & operator << ( float _Val ) {
        ios_base :: iostate _State = ios_base :: goodbit;
        const sentry _Ok ( * this );

        if ( _Ok ) {
            const _Nput & _Nput_fac = :: std :: use_facet < _Nput > ( this -> getloc ( ) );

            try {
            if ( _Nput_fac . put ( _Iter ( _Myios :: rdbuf ( ) ), * this, _Myios :: fill ( ), static_cast < double > ( _Val ) ) . failed ( ) ) {
                _State |= ios_base :: badbit;
            }
            } catch ( ... ) { _Myios :: setstate ( ios_base :: badbit, true ); }
        }

        _Myios :: setstate ( _State );
        return * this;
    }

    basic_ostream & operator << ( double _Val ) {
        ios_base :: iostate _State = ios_base :: goodbit;
        const sentry _Ok ( * this );

        if ( _Ok ) {
            const _Nput & _Nput_fac = :: std :: use_facet < _Nput > ( this -> getloc ( ) );

            try {
            if ( _Nput_fac . put ( _Iter ( _Myios :: rdbuf ( ) ), * this, _Myios :: fill ( ), _Val ) . failed ( ) ) {
                _State |= ios_base :: badbit;
            }
            } catch ( ... ) { _Myios :: setstate ( ios_base :: badbit, true ); }
        }

        _Myios :: setstate ( _State );
        return * this;
    }

    basic_ostream & operator << ( long double _Val ) {
        ios_base :: iostate _State = ios_base :: goodbit;
        const sentry _Ok ( * this );

        if ( _Ok ) {
            const _Nput & _Nput_fac = :: std :: use_facet < _Nput > ( this -> getloc ( ) );

            try {
            if ( _Nput_fac . put ( _Iter ( _Myios :: rdbuf ( ) ), * this, _Myios :: fill ( ), _Val ) . failed ( ) ) {
                _State |= ios_base :: badbit;
            }
            } catch ( ... ) { _Myios :: setstate ( ios_base :: badbit, true ); }
        }

        _Myios :: setstate ( _State );
        return * this;
    }

    basic_ostream & operator << ( const void * _Val ) {
        ios_base :: iostate _State = ios_base :: goodbit;
        const sentry _Ok ( * this );

        if ( _Ok ) {
            const _Nput & _Nput_fac = :: std :: use_facet < _Nput > ( this -> getloc ( ) );

            try {
            if ( _Nput_fac . put ( _Iter ( _Myios :: rdbuf ( ) ), * this, _Myios :: fill ( ), _Val ) . failed ( ) ) {
                _State |= ios_base :: badbit;
            }
            } catch ( ... ) { _Myios :: setstate ( ios_base :: badbit, true ); }
        }

        _Myios :: setstate ( _State );
        return * this;
    }















    basic_ostream & operator << ( _Mysb * _Strbuf ) {
        ios_base :: iostate _State = ios_base :: goodbit;
        bool _Copied = false;
        const sentry _Ok ( * this );

        if ( _Ok && _Strbuf ) {
            for ( int_type _Meta = _Traits :: eof ( );; _Copied = true ) {
                try {
                _Meta = _Traits :: eq_int_type ( _Traits :: eof ( ), _Meta ) ? _Strbuf -> sgetc ( ) : _Strbuf -> snextc ( );
                } catch ( ... ) {
                _Myios :: setstate ( ios_base :: failbit );
                throw;
                }

                if ( _Traits :: eq_int_type ( _Traits :: eof ( ), _Meta ) ) {
                    break;
                }

                try {
                if ( _Traits :: eq_int_type ( _Traits :: eof ( ), _Myios :: rdbuf ( ) -> sputc ( _Traits :: to_char_type ( _Meta ) ) ) ) {
                    _State |= ios_base :: badbit;
                    break;
                }
                } catch ( ... ) { _Myios :: setstate ( ios_base :: badbit, true ); }
            }
        }

        this -> width ( 0 );
        int _Setstate_with;
        if ( _Strbuf ) {
            if ( _Copied ) {
                _Setstate_with = _State;
            } else {
                _Setstate_with = _State | ios_base :: failbit;
            }
        } else {
            _Setstate_with = ios_base :: badbit;
        }

        _Myios :: setstate ( _Setstate_with );
        return * this;
    }

    basic_ostream & put ( _Elem _Ch ) {
        ios_base :: iostate _State = ios_base :: goodbit;
        const sentry _Ok ( * this );

        if ( ! _Ok ) {
            _State |= ios_base :: badbit;
        } else {
            try {
            if ( _Traits :: eq_int_type ( _Traits :: eof ( ), _Myios :: rdbuf ( ) -> sputc ( _Ch ) ) ) {
                _State |= ios_base :: badbit;
            }
            } catch ( ... ) { _Myios :: setstate ( ios_base :: badbit, true ); }
        }

        _Myios :: setstate ( _State );
        return * this;
    }

    basic_ostream & write ( const _Elem * _Str, streamsize _Count ) {

        ios_base :: iostate _State = ios_base :: goodbit;
        const sentry _Ok ( * this );

        if ( ! _Ok ) {
            _State |= ios_base :: badbit;
        } else if ( 0 < _Count ) {
            try {
            if ( _Myios :: rdbuf ( ) -> sputn ( _Str, _Count ) != _Count ) {
                _State |= ios_base :: badbit;
            }
            } catch ( ... ) { _Myios :: setstate ( ios_base :: badbit, true ); }
        }

        _Myios :: setstate ( _State );
        return * this;
    }

    basic_ostream & flush ( ) {
        const auto _Rdbuf = _Myios :: rdbuf ( );
        if ( _Rdbuf ) {
            const sentry _Ok ( * this );

            if ( _Ok ) {
                ios_base :: iostate _State = ios_base :: goodbit;
                try {
                if ( _Rdbuf -> pubsync ( ) == - 1 ) {
                    _State |= ios_base :: badbit;
                }
                } catch ( ... ) { _Myios :: setstate ( ios_base :: badbit, true ); }
                _Myios :: setstate ( _State );
            }
        }
        return * this;
    }

    basic_ostream & seekp ( pos_type _Pos ) {
        const sentry _Ok ( * this );

        if ( ! this -> fail ( ) ) {
            ios_base :: iostate _State = ios_base :: goodbit;
            try {
            if ( static_cast < off_type > ( _Myios :: rdbuf ( ) -> pubseekpos ( _Pos, ios_base :: out ) ) == - 1 ) {
                _State |= ios_base :: failbit;
            }
            } catch ( ... ) { _Myios :: setstate ( ios_base :: badbit, true ); }
            _Myios :: setstate ( _State );
        }

        return * this;
    }

    basic_ostream & seekp ( off_type _Off, ios_base :: seekdir _Way ) {

        const sentry _Ok ( * this );

        if ( ! this -> fail ( ) ) {
            ios_base :: iostate _State = ios_base :: goodbit;
            try {
            if ( static_cast < off_type > ( _Myios :: rdbuf ( ) -> pubseekoff ( _Off, _Way, ios_base :: out ) ) == - 1 ) {
                _State |= ios_base :: failbit;
            }
            } catch ( ... ) { _Myios :: setstate ( ios_base :: badbit, true ); }
            _Myios :: setstate ( _State );
        }

        return * this;
    }

    pos_type tellp ( ) {
        const sentry _Ok ( * this );

        if ( ! this -> fail ( ) ) {
            try {
            return _Myios :: rdbuf ( ) -> pubseekoff ( 0, ios_base :: cur, ios_base :: out );
            } catch ( ... ) { _Myios :: setstate ( ios_base :: badbit, true ); }
        }

        return pos_type { off_type { - 1 } };
    }
};
#line 625 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\ostream"
#pragma vtordisp(pop)
#line 677
template class __declspec(dllimport) basic_ostream< char, char_traits< char> > ;
#line 678
template class __declspec(dllimport) basic_ostream< __wchar_t, char_traits< __wchar_t> > ;
#line 686 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\ostream"
template < class _Elem, class _Traits >
basic_ostream < _Elem, _Traits > & operator << ( basic_ostream < _Elem, _Traits > & _Ostr, const char * _Val ) {
    ios_base :: iostate _State = ios_base :: goodbit;
    streamsize _Count = static_cast < streamsize > ( :: strlen ( _Val ) );
    streamsize _Pad = _Ostr . width ( ) <= 0 || _Ostr . width ( ) <= _Count ? 0 : _Ostr . width ( ) - _Count;
    const typename basic_ostream < _Elem, _Traits > :: sentry _Ok ( _Ostr );

    if ( ! _Ok ) {
        _State |= ios_base :: badbit;
    } else {
        try {
        const ctype < _Elem > & _Ctype_fac = :: std :: use_facet < ctype < _Elem >> ( _Ostr . getloc ( ) );
        if ( ( _Ostr . flags ( ) & ios_base :: adjustfield ) != ios_base :: left ) {
            for (; 0 < _Pad; -- _Pad ) {
                if ( _Traits :: eq_int_type ( _Traits :: eof ( ), _Ostr . rdbuf ( ) -> sputc ( _Ostr . fill ( ) ) ) ) {
                    _State |= ios_base :: badbit;
                    break;
                }
            }
        }

        for (; _State == ios_base :: goodbit && 0 < _Count; -- _Count, ++ _Val ) {
            if ( _Traits :: eq_int_type ( _Traits :: eof ( ), _Ostr . rdbuf ( ) -> sputc ( _Ctype_fac . widen ( * _Val ) ) ) ) {
                _State |= ios_base :: badbit;
            }
        }

        if ( _State == ios_base :: goodbit ) {
            for (; 0 < _Pad; -- _Pad ) {
                if ( _Traits :: eq_int_type ( _Traits :: eof ( ), _Ostr . rdbuf ( ) -> sputc ( _Ostr . fill ( ) ) ) ) {
                    _State |= ios_base :: badbit;
                    break;
                }
            }
        }

        _Ostr . width ( 0 );
        } catch ( ... ) { ( _Ostr ) . setstate ( ios_base :: badbit, true ); }
    }

    _Ostr . setstate ( _State );
    return _Ostr;
}
#line 730
template < class _Elem, class _Traits >
basic_ostream < _Elem, _Traits > & operator << ( basic_ostream < _Elem, _Traits > & _Ostr, char _Ch ) {
    ios_base :: iostate _State = ios_base :: goodbit;
    const typename basic_ostream < _Elem, _Traits > :: sentry _Ok ( _Ostr );

    if ( _Ok ) {
        const ctype < _Elem > & _Ctype_fac = :: std :: use_facet < ctype < _Elem >> ( _Ostr . getloc ( ) );
        streamsize _Pad = _Ostr . width ( ) <= 1 ? 0 : _Ostr . width ( ) - 1;

        try {
        if ( ( _Ostr . flags ( ) & ios_base :: adjustfield ) != ios_base :: left ) {
            for (; _State == ios_base :: goodbit && 0 < _Pad; -- _Pad ) {
                if ( _Traits :: eq_int_type ( _Traits :: eof ( ), _Ostr . rdbuf ( ) -> sputc ( _Ostr . fill ( ) ) ) ) {
                    _State |= ios_base :: badbit;
                }
            }
        }

        if ( _State == ios_base :: goodbit
            && _Traits :: eq_int_type ( _Traits :: eof ( ), _Ostr . rdbuf ( ) -> sputc ( _Ctype_fac . widen ( _Ch ) ) ) ) {
            _State |= ios_base :: badbit;
        }

        for (; _State == ios_base :: goodbit && 0 < _Pad; -- _Pad ) {
            if ( _Traits :: eq_int_type ( _Traits :: eof ( ), _Ostr . rdbuf ( ) -> sputc ( _Ostr . fill ( ) ) ) ) {
                _State |= ios_base :: badbit;
            }
        }
        } catch ( ... ) { ( _Ostr ) . setstate ( ios_base :: badbit, true ); }
    }

    _Ostr . width ( 0 );
    _Ostr . setstate ( _State );
    return _Ostr;
}
#line 766
template < class _Traits >
basic_ostream < char, _Traits > & operator << ( basic_ostream < char, _Traits > & _Ostr, const char * _Val ) {

    using _Elem = char;
    using _Myos = basic_ostream < _Elem, _Traits >;

    ios_base :: iostate _State = ios_base :: goodbit;
    streamsize _Count = static_cast < streamsize > ( _Traits :: length ( _Val ) );
    streamsize _Pad = _Ostr . width ( ) <= 0 || _Ostr . width ( ) <= _Count ? 0 : _Ostr . width ( ) - _Count;
    const typename _Myos :: sentry _Ok ( _Ostr );

    if ( ! _Ok ) {
        _State |= ios_base :: badbit;
    } else {
        try {
        if ( ( _Ostr . flags ( ) & ios_base :: adjustfield ) != ios_base :: left ) {
            for (; 0 < _Pad; -- _Pad ) {
                if ( _Traits :: eq_int_type ( _Traits :: eof ( ), _Ostr . rdbuf ( ) -> sputc ( _Ostr . fill ( ) ) ) ) {
                    _State |= ios_base :: badbit;
                    break;
                }
            }
        }

        if ( _State == ios_base :: goodbit && _Ostr . rdbuf ( ) -> sputn ( _Val, _Count ) != _Count ) {
            _State |= ios_base :: badbit;
        }

        if ( _State == ios_base :: goodbit ) {
            for (; 0 < _Pad; -- _Pad ) {
                if ( _Traits :: eq_int_type ( _Traits :: eof ( ), _Ostr . rdbuf ( ) -> sputc ( _Ostr . fill ( ) ) ) ) {
                    _State |= ios_base :: badbit;
                    break;
                }
            }
        }

        _Ostr . width ( 0 );
        } catch ( ... ) { ( _Ostr ) . setstate ( ios_base :: badbit, true ); }
    }

    _Ostr . setstate ( _State );
    return _Ostr;
}
#line 811
template < class _Traits >
basic_ostream < char, _Traits > & operator << ( basic_ostream < char, _Traits > & _Ostr, char _Ch ) {

    using _Elem = char;
    using _Myos = basic_ostream < _Elem, _Traits >;

    ios_base :: iostate _State = ios_base :: goodbit;
    const typename _Myos :: sentry _Ok ( _Ostr );

    if ( _Ok ) {
        streamsize _Pad = _Ostr . width ( ) <= 1 ? 0 : _Ostr . width ( ) - 1;

        try {
        if ( ( _Ostr . flags ( ) & ios_base :: adjustfield ) != ios_base :: left ) {
            for (; _State == ios_base :: goodbit && 0 < _Pad; -- _Pad ) {
                if ( _Traits :: eq_int_type ( _Traits :: eof ( ), _Ostr . rdbuf ( ) -> sputc ( _Ostr . fill ( ) ) ) ) {
                    _State |= ios_base :: badbit;
                }
            }
        }

        if ( _State == ios_base :: goodbit && _Traits :: eq_int_type ( _Traits :: eof ( ), _Ostr . rdbuf ( ) -> sputc ( _Ch ) ) ) {
            _State |= ios_base :: badbit;
        }

        for (; _State == ios_base :: goodbit && 0 < _Pad; -- _Pad ) {
            if ( _Traits :: eq_int_type ( _Traits :: eof ( ), _Ostr . rdbuf ( ) -> sputc ( _Ostr . fill ( ) ) ) ) {
                _State |= ios_base :: badbit;
            }
        }
        } catch ( ... ) { ( _Ostr ) . setstate ( ios_base :: badbit, true ); }
    }

    _Ostr . width ( 0 );
    _Ostr . setstate ( _State );
    return _Ostr;
}
#line 849
template < class _Elem, class _Traits >
basic_ostream < _Elem, _Traits > & operator << ( basic_ostream < _Elem, _Traits > & _Ostr, const _Elem * _Val ) {
    using _Myos = basic_ostream < _Elem, _Traits >;

    ios_base :: iostate _State = ios_base :: goodbit;
    streamsize _Count = static_cast < streamsize > ( _Traits :: length ( _Val ) );
    streamsize _Pad = _Ostr . width ( ) <= 0 || _Ostr . width ( ) <= _Count ? 0 : _Ostr . width ( ) - _Count;
    const typename _Myos :: sentry _Ok ( _Ostr );

    if ( ! _Ok ) {
        _State |= ios_base :: badbit;
    } else {
        try {
        if ( ( _Ostr . flags ( ) & ios_base :: adjustfield ) != ios_base :: left ) {
            for (; 0 < _Pad; -- _Pad ) {
                if ( _Traits :: eq_int_type ( _Traits :: eof ( ), _Ostr . rdbuf ( ) -> sputc ( _Ostr . fill ( ) ) ) ) {
                    _State |= ios_base :: badbit;
                    break;
                }
            }
        }

        if ( _State == ios_base :: goodbit && _Ostr . rdbuf ( ) -> sputn ( _Val, _Count ) != _Count ) {
            _State |= ios_base :: badbit;
        }

        if ( _State == ios_base :: goodbit ) {
            for (; 0 < _Pad; -- _Pad ) {
                if ( _Traits :: eq_int_type ( _Traits :: eof ( ), _Ostr . rdbuf ( ) -> sputc ( _Ostr . fill ( ) ) ) ) {
                    _State |= ios_base :: badbit;
                    break;
                }
            }
        }

        _Ostr . width ( 0 );
        } catch ( ... ) { ( _Ostr ) . setstate ( ios_base :: badbit, true ); }
    }

    _Ostr . setstate ( _State );
    return _Ostr;
}
#line 892
template < class _Elem, class _Traits >
basic_ostream < _Elem, _Traits > & operator << ( basic_ostream < _Elem, _Traits > & _Ostr, _Elem _Ch ) {
    using _Myos = basic_ostream < _Elem, _Traits >;

    ios_base :: iostate _State = ios_base :: goodbit;
    const typename _Myos :: sentry _Ok ( _Ostr );

    if ( _Ok ) {
        streamsize _Pad = _Ostr . width ( ) <= 1 ? 0 : _Ostr . width ( ) - 1;

        try {
        if ( ( _Ostr . flags ( ) & ios_base :: adjustfield ) != ios_base :: left ) {
            for (; _State == ios_base :: goodbit && 0 < _Pad; -- _Pad ) {
                if ( _Traits :: eq_int_type ( _Traits :: eof ( ), _Ostr . rdbuf ( ) -> sputc ( _Ostr . fill ( ) ) ) ) {
                    _State |= ios_base :: badbit;
                }
            }
        }

        if ( _State == ios_base :: goodbit && _Traits :: eq_int_type ( _Traits :: eof ( ), _Ostr . rdbuf ( ) -> sputc ( _Ch ) ) ) {
            _State |= ios_base :: badbit;
        }

        for (; _State == ios_base :: goodbit && 0 < _Pad; -- _Pad ) {
            if ( _Traits :: eq_int_type ( _Traits :: eof ( ), _Ostr . rdbuf ( ) -> sputc ( _Ostr . fill ( ) ) ) ) {
                _State |= ios_base :: badbit;
            }
        }
        } catch ( ... ) { ( _Ostr ) . setstate ( ios_base :: badbit, true ); }
    }

    _Ostr . width ( 0 );
    _Ostr . setstate ( _State );
    return _Ostr;
}
#line 928
template < class _Traits >
basic_ostream < char, _Traits > & operator << ( basic_ostream < char, _Traits > & _Ostr, const signed char * _Val ) {

    return _Ostr << reinterpret_cast < const char * > ( _Val );
}
#line 934
template < class _Traits >
basic_ostream < char, _Traits > & operator << ( basic_ostream < char, _Traits > & _Ostr, signed char _Ch ) {
    return _Ostr << static_cast < char > ( _Ch );
}
#line 939
template < class _Traits >
basic_ostream < char, _Traits > & operator << ( basic_ostream < char, _Traits > & _Ostr, const unsigned char * _Val ) {

    return _Ostr << reinterpret_cast < const char * > ( _Val );
}
#line 945
template < class _Traits >
basic_ostream < char, _Traits > & operator << ( basic_ostream < char, _Traits > & _Ostr, unsigned char _Ch ) {

    return _Ostr << static_cast < char > ( _Ch );
}
#line 995 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\ostream"
template< class _Ostr, class _Ty, class  = void> 
#line 996
struct _Can_stream_out : public false_type { }; 
#line 998
template< class _Ostr, class _Ty> 
#line 999
struct _Can_stream_out< _Ostr, _Ty, void_t< decltype(std::declval< _Ostr &> () << std::declval< const _Ty &> ())> >  : public true_type { 
#line 1000
}; 
#line 1002
template < class _Ostr, class _Ty,
    enable_if_t < conjunction_v < is_convertible < _Ostr *, ios_base * >, _Can_stream_out < _Ostr, _Ty > >, int > = 0 >
_Ostr && operator << ( _Ostr && _Os, const _Ty & _Val ) {
    _Os << _Val;
    return :: std :: move ( _Os );
}
#line 1009
template < class _Elem, class _Traits >
basic_ostream < _Elem, _Traits > & __cdecl endl (
    basic_ostream < _Elem, _Traits > & _Ostr ) {
    _Ostr . put ( _Ostr . widen ( '\n' ) );
    _Ostr . flush ( );
    return _Ostr;
}
#line 1017
template < class _Elem, class _Traits >
basic_ostream < _Elem, _Traits > & __cdecl ends ( basic_ostream < _Elem, _Traits > & _Ostr ) {
    _Ostr . put ( _Elem ( ) );
    return _Ostr;
}
#line 1023
template < class _Elem, class _Traits >
basic_ostream < _Elem, _Traits > & __cdecl flush ( basic_ostream < _Elem, _Traits > & _Ostr ) {
    _Ostr . flush ( );
    return _Ostr;
}
#line 1080 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\ostream"
template < class _Elem, class _Traits >
basic_ostream < _Elem, _Traits > & operator << ( basic_ostream < _Elem, _Traits > & _Ostr, const error_code & _Errcode ) {

    return _Ostr << _Errcode . category ( ) . name ( ) << ':' << _Errcode . value ( );
}
#line 1291
}
#line 1295
#pragma warning(pop)
#pragma pack ( pop )
#line 13 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\istream"
#pragma pack ( push, 8 )
#pragma warning(push, 3)
#pragma warning(disable : 4180 4412 4455 4494 4514 4574 4582 4583 4587 4588 4619 4623 4625 4626 4643 4648 4702 4793 4820 4988 5026 5027 5045 6294 4984 5053 )
#line 20
namespace std { 
#pragma vtordisp(push, 2)
#line 23
template < class _Elem, class _Traits >
class basic_istream : virtual public basic_ios < _Elem, _Traits > {
public :
    using _Myios = basic_ios < _Elem, _Traits >;
    using _Mysb = basic_streambuf < _Elem, _Traits >;
    using _Iter = istreambuf_iterator < _Elem, _Traits >;
    using _Ctype = ctype < _Elem >;
    using _Nget = num_get < _Elem, _Iter >;









    explicit basic_istream ( _Mysb * _Strbuf, bool _Isstd = false )

        : _Chcount ( 0 ) {
        _Myios :: init ( _Strbuf, _Isstd );
    }

     basic_istream ( _Uninitialized ) {
        this -> _Addstd ( this );
    }

protected :
     basic_istream ( basic_istream && _Right ) : _Chcount ( _Right . _Chcount ) {
        _Myios :: init ( );
        _Myios :: move ( :: std :: move ( _Right ) );
        _Right . _Chcount = 0;
    }

    basic_istream & operator = ( basic_istream && _Right ) noexcept {
        this -> swap ( _Right );
        return * this;
    }

    void swap ( basic_istream & _Right ) noexcept {
        _Myios :: swap ( _Right );
        :: std :: swap ( _Chcount, _Right . _Chcount );
    }

public :
     basic_istream ( const basic_istream & ) = delete;
    basic_istream & operator = ( const basic_istream & ) = delete;

     ~ basic_istream ( ) noexcept override { }

    using int_type = typename _Traits :: int_type;
    using pos_type = typename _Traits :: pos_type;
    using off_type = typename _Traits :: off_type;

    class _Sentry_base {
    public :
         _Sentry_base ( basic_istream & _Istr ) : _Myistr ( _Istr ) {
            const auto _Rdbuf = _Myistr . rdbuf ( );
            if ( _Rdbuf ) {
                _Rdbuf -> _Lock ( );
            }
        }

         ~ _Sentry_base ( ) noexcept {
            const auto _Rdbuf = _Myistr . rdbuf ( );
            if ( _Rdbuf ) {
                _Rdbuf -> _Unlock ( );
            }
        }

        basic_istream & _Myistr;

        _Sentry_base & operator = ( const _Sentry_base & ) = delete;
    };

    class sentry : public _Sentry_base {
    public :
        explicit sentry ( basic_istream & _Istr, bool _Noskip = false )
            : _Sentry_base ( _Istr ), _Ok ( _Sentry_base :: _Myistr . _Ipfx ( _Noskip ) ) { }

        explicit operator bool ( ) const {
            return _Ok;
        }

         sentry ( const sentry & ) = delete;
        sentry & operator = ( const sentry & ) = delete;

    private :
        bool _Ok;
    };

    bool _Ipfx ( bool _Noskip = false ) {
        if ( ! this -> good ( ) ) {
            _Myios :: setstate ( ios_base :: failbit );
            return false;
        }


        const auto _Tied = _Myios :: tie ( );
        if ( _Tied ) {
            _Tied -> flush ( );
        }

        bool _Eof = false;
        if ( ! _Noskip && this -> flags ( ) & ios_base :: skipws ) {
            const _Ctype & _Ctype_fac = :: std :: use_facet < _Ctype > ( this -> getloc ( ) );

            try {
            int_type _Meta = _Myios :: rdbuf ( ) -> sgetc ( );

            for (;; _Meta = _Myios :: rdbuf ( ) -> snextc ( ) ) {
                if ( _Traits :: eq_int_type ( _Traits :: eof ( ), _Meta ) ) {
                    _Eof = true;
                    break;
                } else if ( ! _Ctype_fac . is ( _Ctype :: space, _Traits :: to_char_type ( _Meta ) ) ) {
                    break;
                }
            }
            } catch ( ... ) { _Myios :: setstate ( ios_base :: badbit, true ); }
        }

        if ( _Eof ) {
            _Myios :: setstate ( ios_base :: eofbit | ios_base :: failbit );
        }

        return this -> good ( );
    }


    bool ipfx ( bool _Noskip = false ) {
        return _Ipfx ( _Noskip );
    }


    void isfx ( ) { }


















    basic_istream & operator >> ( basic_istream & ( __cdecl * _Pfn ) ( basic_istream & ) ) {

        return _Pfn ( * this );
    }

    basic_istream & operator >> ( _Myios & ( __cdecl * _Pfn ) ( _Myios & ) ) {
        _Pfn ( * this );
        return * this;
    }

    basic_istream & operator >> ( ios_base & ( __cdecl * _Pfn ) ( ios_base & ) ) {
        _Pfn ( * this );
        return * this;
    }

private :
    template < class _Ty >
    basic_istream & _Common_extract_with_num_get ( _Ty & _Val ) {
        ios_base :: iostate _Err = ios_base :: goodbit;
        const sentry _Ok ( * this );

        if ( _Ok ) {
            try {
            :: std :: use_facet < _Nget > ( this -> getloc ( ) ) . get ( * this, { }, * this, _Err, _Val );
            } catch ( ... ) { _Myios :: setstate ( ios_base :: badbit, true ); }
        }

        _Myios :: setstate ( _Err );
        return * this;
    }

    template < class = void >
    void _Increment_gcount ( ) noexcept {
        if ( _Chcount != ( numeric_limits < streamsize > :: max ) ( ) ) {
            ++ _Chcount;
        }
    }

public :
    basic_istream & operator >> ( bool & _Val ) {
        return _Common_extract_with_num_get ( _Val );
    }

    basic_istream & operator >> ( short & _Val ) {
        ios_base :: iostate _Err = ios_base :: goodbit;
        const sentry _Ok ( * this );

        if ( _Ok ) {
            try {
            long _Lval;
            :: std :: use_facet < _Nget > ( this -> getloc ( ) ) . get ( * this, { }, * this, _Err, _Lval );
            if ( _Lval < ( - 32768 ) ) {
                _Err |= ios_base :: failbit;
                _Val = ( - 32768 );
            } else if ( _Lval > 32767 ) {
                _Err |= ios_base :: failbit;
                _Val = 32767;
            } else {
                _Val = static_cast < short > ( _Lval );
            }
            } catch ( ... ) { _Myios :: setstate ( ios_base :: badbit, true ); }
        }

        _Myios :: setstate ( _Err );
        return * this;
    }









    basic_istream & operator >> ( unsigned short & _Val ) {
        return _Common_extract_with_num_get ( _Val );
    }

    basic_istream & operator >> ( int & _Val ) {
        static_assert ( sizeof ( int ) == sizeof ( long ), "Bad overflow assumptions due to sizeof(int) != sizeof(long)" );
        long _Result = _Val;
        _Common_extract_with_num_get ( _Result );
        _Val = _Result;
        return * this;
    }

    basic_istream & operator >> ( unsigned int & _Val ) {
        return _Common_extract_with_num_get ( _Val );
    }

    basic_istream & operator >> ( long & _Val ) {
        return _Common_extract_with_num_get ( _Val );
    }

    basic_istream & operator >> ( unsigned long & _Val ) {
        return _Common_extract_with_num_get ( _Val );
    }

    basic_istream & operator >> ( long long & _Val ) {
        return _Common_extract_with_num_get ( _Val );
    }

    basic_istream & operator >> ( unsigned long long & _Val ) {
        return _Common_extract_with_num_get ( _Val );
    }

    basic_istream & operator >> ( float & _Val ) {
        return _Common_extract_with_num_get ( _Val );
    }

    basic_istream & operator >> ( double & _Val ) {
        return _Common_extract_with_num_get ( _Val );
    }

    basic_istream & operator >> ( long double & _Val ) {
        return _Common_extract_with_num_get ( _Val );
    }

    basic_istream & operator >> ( void * & _Val ) {
        return _Common_extract_with_num_get ( _Val );
    }

    basic_istream & operator >> ( _Mysb * _Strbuf ) {
        _Chcount = 0;
        const sentry _Ok ( * this, true );
        ios_base :: iostate _State = ios_base :: goodbit;
        if ( _Ok && _Strbuf ) {
            try {
            for ( int_type _Meta = _Myios :: rdbuf ( ) -> sgetc ( );; _Meta = _Myios :: rdbuf ( ) -> snextc ( ) ) {
                if ( _Traits :: eq_int_type ( _Traits :: eof ( ), _Meta ) ) {
                    _State |= ios_base :: eofbit;
                    break;
                }

                try {
                if ( _Traits :: eq_int_type ( _Traits :: eof ( ), _Strbuf -> sputc ( _Traits :: to_char_type ( _Meta ) ) ) ) {
                    break;
                }

                } catch ( ... ) {
                break;
                }

                _Increment_gcount ( );
            }
            } catch ( ... ) { _Myios :: setstate ( ios_base :: badbit, true ); }
        }

        if ( _Chcount == 0 ) {
            _State |= ios_base :: failbit;
        }

        _Myios :: setstate ( _State );
        return * this;
    }

    int_type get ( ) {
        int_type _Meta = 0;
        ios_base :: iostate _State = ios_base :: goodbit;
        _Chcount = 0;
        const sentry _Ok ( * this, true );

        if ( ! _Ok ) {
            _Meta = _Traits :: eof ( );
        } else {
            try {
            _Meta = _Myios :: rdbuf ( ) -> sgetc ( );

            if ( _Traits :: eq_int_type ( _Traits :: eof ( ), _Meta ) ) {
                _State |= ios_base :: eofbit | ios_base :: failbit;
            } else {
                _Myios :: rdbuf ( ) -> sbumpc ( );
                _Chcount = 1;
            }
            } catch ( ... ) { _Myios :: setstate ( ios_base :: badbit, true ); }
        }

        _Myios :: setstate ( _State );
        return _Meta;
    }

    basic_istream & get ( _Elem * _Str, streamsize _Count ) {
        return get ( _Str, _Count, _Myios :: widen ( '\n' ) );
    }

    basic_istream & get ( _Elem * _Str, streamsize _Count, _Elem _Delim ) {

        ios_base :: iostate _State = ios_base :: goodbit;
        _Chcount = 0;
        const sentry _Ok ( * this, true );

        if ( _Ok && 0 < _Count ) {
            try {
            int_type _Meta = _Myios :: rdbuf ( ) -> sgetc ( );

            for (; 0 < -- _Count; _Meta = _Myios :: rdbuf ( ) -> snextc ( ) ) {
                if ( _Traits :: eq_int_type ( _Traits :: eof ( ), _Meta ) ) {
                    _State |= ios_base :: eofbit;
                    break;
                } else if ( _Traits :: to_char_type ( _Meta ) == _Delim ) {
                    break;
                } else {
                    * _Str ++ = _Traits :: to_char_type ( _Meta );
                    _Increment_gcount ( );
                }
            }
            } catch ( ... ) { _Myios :: setstate ( ios_base :: badbit, true ); }
        }

        _Myios :: setstate ( _Chcount == 0 ? _State | ios_base :: failbit : _State );
        * _Str = _Elem ( );
        return * this;
    }

    basic_istream & get ( _Elem & _Ch ) {
        int_type _Meta = get ( );
        if ( ! _Traits :: eq_int_type ( _Traits :: eof ( ), _Meta ) ) {
            _Ch = _Traits :: to_char_type ( _Meta );
        }

        return * this;
    }

    basic_istream & get ( _Mysb & _Strbuf ) {
        return get ( _Strbuf, _Myios :: widen ( '\n' ) );
    }

    basic_istream & get ( _Mysb & _Strbuf, _Elem _Delim ) {

        ios_base :: iostate _State = ios_base :: goodbit;
        _Chcount = 0;
        const sentry _Ok ( * this, true );

        if ( _Ok ) {
            try {
            int_type _Meta = _Myios :: rdbuf ( ) -> sgetc ( );

            for (;; _Meta = _Myios :: rdbuf ( ) -> snextc ( ) ) {
                if ( _Traits :: eq_int_type ( _Traits :: eof ( ), _Meta ) ) {
                    _State |= ios_base :: eofbit;
                    break;
                } else {
                    try {
                    _Elem _Ch = _Traits :: to_char_type ( _Meta );
                    if ( _Ch == _Delim || _Traits :: eq_int_type ( _Traits :: eof ( ), _Strbuf . sputc ( _Ch ) ) ) {
                        break;
                    }
                    } catch ( ... ) {
                    break;
                    }
                    _Increment_gcount ( );
                }
            }
            } catch ( ... ) { _Myios :: setstate ( ios_base :: badbit, true ); }
        }

        if ( _Chcount == 0 ) {
            _State |= ios_base :: failbit;
        }
        _Myios :: setstate ( _State );
        return * this;
    }

    basic_istream & getline ( _Elem * _Str, streamsize _Count ) {

        return getline ( _Str, _Count, _Myios :: widen ( '\n' ) );
    }

    basic_istream & getline ( _Elem * _Str, streamsize _Count, _Elem _Delim ) {

        ios_base :: iostate _State = ios_base :: goodbit;
        _Chcount = 0;
        const sentry _Ok ( * this, true );

        if ( _Ok && 0 < _Count ) {
            int_type _Metadelim = _Traits :: to_int_type ( _Delim );

            try {
            int_type _Meta = _Myios :: rdbuf ( ) -> sgetc ( );

            for (;; _Meta = _Myios :: rdbuf ( ) -> snextc ( ) ) {
                if ( _Traits :: eq_int_type ( _Traits :: eof ( ), _Meta ) ) {
                    _State |= ios_base :: eofbit;
                    break;
                } else if ( _Meta == _Metadelim ) {
                    _Increment_gcount ( );
                    _Myios :: rdbuf ( ) -> sbumpc ( );
                    break;
                } else if ( -- _Count <= 0 ) {
                    _State |= ios_base :: failbit;
                    break;
                } else {
                    * _Str ++ = _Traits :: to_char_type ( _Meta );
                    _Increment_gcount ( );
                }
            }
            } catch ( ... ) { _Myios :: setstate ( ios_base :: badbit, true ); }
        }

        * _Str = _Elem ( );
        _Myios :: setstate ( _Chcount == 0 ? _State | ios_base :: failbit : _State );
        return * this;
    }

    basic_istream & ignore ( streamsize _Count = 1, int_type _Metadelim = _Traits :: eof ( ) ) {

        ios_base :: iostate _State = ios_base :: goodbit;
        _Chcount = 0;
        const sentry _Ok ( * this, true );

        if ( _Ok && 0 < _Count ) {
            try {
            for (;; ) {
                int_type _Meta;
                if ( _Count != ( numeric_limits < streamsize > :: max ) ( ) && -- _Count < 0 ) {
                    break;
                } else if ( _Traits :: eq_int_type ( _Traits :: eof ( ),
                               _Meta = _Myios :: rdbuf ( ) -> sbumpc ( ) ) ) {
                    _State |= ios_base :: eofbit;
                    break;
                } else {
                    _Increment_gcount ( );
                    if ( _Meta == _Metadelim ) {
                        break;
                    }
                }
            }
            } catch ( ... ) { _Myios :: setstate ( ios_base :: badbit, true ); }
        }

        _Myios :: setstate ( _State );
        return * this;
    }

    basic_istream & read ( _Elem * _Str, streamsize _Count ) {
        ios_base :: iostate _State = ios_base :: goodbit;
        _Chcount = 0;
        const sentry _Ok ( * this, true );

        if ( _Ok && 0 < _Count ) {
            try {
            const streamsize _Num = _Myios :: rdbuf ( ) -> sgetn ( _Str, _Count );
            _Chcount = _Num;

            if ( _Num != _Count ) {
                _State |= ios_base :: eofbit | ios_base :: failbit;
            }
            } catch ( ... ) { _Myios :: setstate ( ios_base :: badbit, true ); }
        }

        _Myios :: setstate ( _State );
        return * this;
    }

    streamsize readsome ( _Elem * _Str, streamsize _Count ) {

        ios_base :: iostate _State = ios_base :: goodbit;
        _Chcount = 0;
        const sentry _Ok ( * this, true );
        streamsize _Num;

        if ( ! _Ok ) {
            _State |= ios_base :: failbit;
        } else if ( ( _Num = _Myios :: rdbuf ( ) -> in_avail ( ) ) < 0 ) {
            _State |= ios_base :: eofbit;
        } else if ( 0 < _Count && 0 < _Num ) {
            read ( _Str, _Num < _Count ? _Num : _Count );
        }

        _Myios :: setstate ( _State );
        return gcount ( );
    }

    int_type peek ( ) {
        ios_base :: iostate _State = ios_base :: goodbit;
        _Chcount = 0;
        int_type _Meta = 0;
        const sentry _Ok ( * this, true );

        if ( ! _Ok ) {
            _Meta = _Traits :: eof ( );
        } else {
            try {
            if ( _Traits :: eq_int_type ( _Traits :: eof ( ), _Meta = _Myios :: rdbuf ( ) -> sgetc ( ) ) ) {
                _State |= ios_base :: eofbit;
            }
            } catch ( ... ) { _Myios :: setstate ( ios_base :: badbit, true ); }
        }

        _Myios :: setstate ( _State );
        return _Meta;
    }

    basic_istream & putback ( _Elem _Ch ) {
        _Chcount = 0;
        ios_base :: iostate _State = ios_base :: goodbit;
        ios_base :: iostate _Oldstate = _Myios :: rdstate ( );
        _Myios :: clear ( _Oldstate & ~ ios_base :: eofbit );
        const sentry _Ok ( * this, true );

        if ( _Ok ) {
            try {
            if ( _Traits :: eq_int_type ( _Traits :: eof ( ), _Myios :: rdbuf ( ) -> sputbackc ( _Ch ) ) ) {
                _State |= ios_base :: badbit | _Oldstate;
            }
            } catch ( ... ) { _Myios :: setstate ( ios_base :: badbit, true ); }
        }

        _Myios :: setstate ( _State );
        return * this;
    }

    basic_istream & unget ( ) {
        _Chcount = 0;
        ios_base :: iostate _State = ios_base :: goodbit;
        ios_base :: iostate _Oldstate = _Myios :: rdstate ( );
        _Myios :: clear ( _Oldstate & ~ ios_base :: eofbit );
        const sentry _Ok ( * this, true );

        if ( _Ok ) {
            try {
            if ( _Traits :: eq_int_type ( _Traits :: eof ( ), _Myios :: rdbuf ( ) -> sungetc ( ) ) ) {
                _State |= ios_base :: badbit | _Oldstate;
            }
            } catch ( ... ) { _Myios :: setstate ( ios_base :: badbit, true ); }
        }

        _Myios :: setstate ( _State );
        return * this;
    }

    [ [ nodiscard ] ] streamsize gcount ( ) const noexcept {

        return _Chcount;
    }

    int sync ( ) {
        const sentry _Ok ( * this, true );

        const auto _Rdbuf = _Myios :: rdbuf ( );
        if ( ! _Rdbuf ) {
            return - 1;
        }

        ios_base :: iostate _State = ios_base :: goodbit;
        try {
        if ( _Rdbuf -> pubsync ( ) == - 1 ) {
            _State |= ios_base :: badbit;
        }
        } catch ( ... ) {
        _Myios :: setstate ( ios_base :: badbit, true );
        return - 1;
        }

        if ( _State & ios_base :: badbit ) {
            _Myios :: setstate ( ios_base :: badbit );
            return - 1;
        }

        return 0;
    }

    basic_istream & seekg ( pos_type _Pos ) {
        ios_base :: iostate _State = ios_base :: goodbit;
        ios_base :: iostate _Oldstate = _Myios :: rdstate ( );
        _Myios :: clear ( _Oldstate & ~ ios_base :: eofbit );
        const sentry _Ok ( * this, true );

        if ( ! this -> fail ( ) ) {
            try {
            if ( static_cast < off_type > ( _Myios :: rdbuf ( ) -> pubseekpos ( _Pos, ios_base :: in ) ) == - 1 ) {
                _State |= ios_base :: failbit;
            }
            } catch ( ... ) { _Myios :: setstate ( ios_base :: badbit, true ); }
        }

        _Myios :: setstate ( _State );
        return * this;
    }

    basic_istream & seekg ( off_type _Off, ios_base :: seekdir _Way ) {

        ios_base :: iostate _State = ios_base :: goodbit;
        ios_base :: iostate _Oldstate = _Myios :: rdstate ( );
        _Myios :: clear ( _Oldstate & ~ ios_base :: eofbit );
        const sentry _Ok ( * this, true );

        if ( ! this -> fail ( ) ) {
            try {
            if ( static_cast < off_type > ( _Myios :: rdbuf ( ) -> pubseekoff ( _Off, _Way, ios_base :: in ) ) == - 1 ) {
                _State |= ios_base :: failbit;
            }
            } catch ( ... ) { _Myios :: setstate ( ios_base :: badbit, true ); }
        }

        _Myios :: setstate ( _State );
        return * this;
    }

    pos_type tellg ( ) {
        const sentry _Ok ( * this, true );

        if ( ! this -> fail ( ) ) {
            try {
            return _Myios :: rdbuf ( ) -> pubseekoff ( 0, ios_base :: cur, ios_base :: in );
            } catch ( ... ) { _Myios :: setstate ( ios_base :: badbit, true ); }
        }

        return pos_type { off_type { - 1 } };
    }

private :
    streamsize _Chcount;
};
#line 692 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\istream"
#pragma vtordisp(pop)
#line 716
template class __declspec(dllimport) basic_istream< char, char_traits< char> > ;
#line 717
template class __declspec(dllimport) basic_istream< __wchar_t, char_traits< __wchar_t> > ;
#line 725 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\istream"
template < class _Elem, class _Traits >
class basic_iostream : public basic_istream < _Elem, _Traits >,
                       public basic_ostream < _Elem, _Traits > {
public :
    using _Myis = basic_istream < _Elem, _Traits >;
    using _Myos = basic_ostream < _Elem, _Traits >;
    using _Myios = basic_ios < _Elem, _Traits >;
    using char_type = _Elem;
    using traits_type = _Traits;
    using int_type = typename _Traits :: int_type;
    using pos_type = typename _Traits :: pos_type;
    using off_type = typename _Traits :: off_type;

    explicit basic_iostream ( basic_streambuf < _Elem, _Traits > * _Strbuf )
        : _Myis ( _Strbuf, false ), _Myos ( _Noinit, false ) { }

protected :
     basic_iostream ( basic_iostream && _Right ) : _Myis ( _Right . rdbuf ( ), false ), _Myos ( _Noinit, false ) {
        _Myios :: init ( );
        _Myios :: move ( :: std :: move ( _Right ) );
    }

    basic_iostream & operator = ( basic_iostream && _Right ) noexcept {
        this -> swap ( _Right );
        return * this;
    }

    void swap ( basic_iostream & _Right ) noexcept {
        if ( this != :: std :: addressof ( _Right ) ) {
            _Myios :: swap ( _Right );
        }
    }

public :
     basic_iostream ( const basic_iostream & ) = delete;
    basic_iostream & operator = ( const basic_iostream & ) = delete;

     ~ basic_iostream ( ) noexcept override { }
};
#line 768
template class __declspec(dllimport) basic_iostream< char, char_traits< char> > ;
#line 769
template class __declspec(dllimport) basic_iostream< __wchar_t, char_traits< __wchar_t> > ;
#line 777 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\istream"
template < class _Elem, class _Traits >
basic_istream < _Elem, _Traits > & _Istream_extract_into_buffer (
    basic_istream < _Elem, _Traits > & _Istr, size_t _Size, _Elem * _Str ) {
    using _Myis = basic_istream < _Elem, _Traits >;
    using _Ctype = ctype < _Elem >;
    ios_base :: iostate _State = ios_base :: goodbit;
    size_t _Current = 0;
    const typename _Myis :: sentry _Ok ( _Istr );

    if ( _Ok ) {
        const _Ctype & _Ctype_fac = :: std :: use_facet < _Ctype > ( _Istr . getloc ( ) );

        try {
        size_t _Count = _Size;
        const size_t _Width = static_cast < size_t > ( _Istr . width ( ) );
        if ( _Width > 0 && _Width < _Size ) {
            _Count = _Width;
        }

        typename _Myis :: int_type _Meta = _Istr . rdbuf ( ) -> sgetc ( );
        _Elem _Ch;

        for (; _Current < _Count - 1; _Meta = _Istr . rdbuf ( ) -> snextc ( ), ( void ) ++ _Current ) {
            if ( _Traits :: eq_int_type ( _Traits :: eof ( ), _Meta ) ) {
                _State |= ios_base :: eofbit;
                break;
            } else if ( _Ctype_fac . is ( _Ctype :: space, _Ch = _Traits :: to_char_type ( _Meta ) ) || _Ch == _Elem ( ) ) {
                break;
            } else {
                _Str [ _Current ] = _Traits :: to_char_type ( _Meta );
            }
        }
        } catch ( ... ) { ( _Istr ) . setstate ( ios_base :: badbit, true ); }
    }
    ;
    _Str [ _Current ] = _Elem ( );
    _Istr . width ( 0 );
    if ( _Current == 0 ) {
        _State |= ios_base :: failbit;
    }
    _Istr . setstate ( _State );
    return _Istr;
}
#line 843 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\istream"
template < class _Elem, class _Traits >
basic_istream < _Elem, _Traits > & operator >> ( basic_istream < _Elem, _Traits > & _Istr, _Elem * _Str ) {
    return _Istream_extract_into_buffer ( _Istr, 18446744073709551615Ui64, _Str );
}
#line 848
template < class _Traits >
basic_istream < char, _Traits > & operator >> ( basic_istream < char, _Traits > & _Istr, signed char * _Str ) {
    return _Istream_extract_into_buffer ( _Istr, 18446744073709551615Ui64, reinterpret_cast < char * > ( _Str ) );
}
#line 853
template < class _Traits >
basic_istream < char, _Traits > & operator >> ( basic_istream < char, _Traits > & _Istr, unsigned char * _Str ) {
    return _Istream_extract_into_buffer ( _Istr, 18446744073709551615Ui64, reinterpret_cast < char * > ( _Str ) );
}
#line 859 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\istream"
template < class _Elem, class _Traits >
basic_istream < _Elem, _Traits > & operator >> ( basic_istream < _Elem, _Traits > & _Istr, _Elem & _Ch ) {
    using _Myis = basic_istream < _Elem, _Traits >;

    typename _Myis :: int_type _Meta;
    ios_base :: iostate _State = ios_base :: goodbit;
    const typename _Myis :: sentry _Ok ( _Istr );

    if ( _Ok ) {
        try {
        _Meta = _Istr . rdbuf ( ) -> sbumpc ( );
        if ( _Traits :: eq_int_type ( _Traits :: eof ( ), _Meta ) ) {
            _State |= ios_base :: eofbit | ios_base :: failbit;
        } else {
            _Ch = _Traits :: to_char_type ( _Meta );
        }
        } catch ( ... ) { ( _Istr ) . setstate ( ios_base :: badbit, true ); }
    }

    _Istr . setstate ( _State );
    return _Istr;
}
#line 882
template < class _Traits >
basic_istream < char, _Traits > & operator >> ( basic_istream < char, _Traits > & _Istr, signed char & _Ch ) {

    return _Istr >> reinterpret_cast < char & > ( _Ch );
}
#line 888
template < class _Traits >
basic_istream < char, _Traits > & operator >> ( basic_istream < char, _Traits > & _Istr, unsigned char & _Ch ) {

    return _Istr >> reinterpret_cast < char & > ( _Ch );
}
#line 894
template< class _Istr, class _Ty, class  = void> 
#line 895
struct _Can_stream_in : public false_type { }; 
#line 897
template< class _Istr, class _Ty> 
#line 898
struct _Can_stream_in< _Istr, _Ty, void_t< decltype(std::declval< _Istr &> () >> std::declval< _Ty> ())> >  : public true_type { }; 
#line 900
template < class _Istr, class _Ty,
    enable_if_t < conjunction_v < is_convertible < _Istr *, ios_base * >, _Can_stream_in < _Istr, _Ty > >, int > = 0 >
_Istr && operator >> ( _Istr && _Is, _Ty && _Val ) {
    _Is >> :: std :: forward < _Ty > ( _Val );
    return :: std :: move ( _Is );
}
#line 907
template < class _Elem, class _Traits >
basic_istream < _Elem, _Traits > & __cdecl ws ( basic_istream < _Elem, _Traits > & _Istr ) {
    const typename basic_istream < _Elem, _Traits > :: sentry _Ok ( _Istr, true );

    if ( _Ok ) {
        ios_base :: iostate _State = ios_base :: goodbit;
        const auto & _Ctype_fac = :: std :: use_facet < ctype < _Elem >> ( _Istr . getloc ( ) );

        try {
        for ( typename _Traits :: int_type _Meta = _Istr . rdbuf ( ) -> sgetc ( );; _Meta = _Istr . rdbuf ( ) -> snextc ( ) ) {
            if ( _Traits :: eq_int_type ( _Traits :: eof ( ), _Meta ) ) {
                _State |= ios_base :: eofbit;
                break;
            } else if ( ! _Ctype_fac . is ( ctype < _Elem > :: space, _Traits :: to_char_type ( _Meta ) ) ) {
                break;
            }
        }
        } catch ( ... ) { ( _Istr ) . setstate ( ios_base :: badbit, true ); }
        _Istr . setstate ( _State );
    }

    return _Istr;
}
#line 930
}
#line 934
#pragma warning(pop)
#pragma pack ( pop )
#line 13 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\iostream"
#pragma pack ( push, 8 )
#pragma warning(push, 3)
#pragma warning(disable : 4180 4412 4455 4494 4514 4574 4582 4583 4587 4588 4619 4623 4625 4626 4643 4648 4702 4793 4820 4988 5026 5027 5045 6294 4984 5053 )
#line 19
namespace std { 
#line 39
__declspec(dllimport) extern istream cin; 
#line 40
__declspec(dllimport) extern ostream cout; 
#line 41
__declspec(dllimport) extern ostream cerr; 
#line 42
__declspec(dllimport) extern ostream clog; 
#line 43
__declspec(dllimport) extern istream *_Ptr_cin; 
#line 44
__declspec(dllimport) extern ostream *_Ptr_cout; 
#line 45
__declspec(dllimport) extern ostream *_Ptr_cerr; 
#line 46
__declspec(dllimport) extern ostream *_Ptr_clog; 
#line 48
__declspec(dllimport) extern wistream wcin; 
#line 49
__declspec(dllimport) extern wostream wcout; 
#line 50
__declspec(dllimport) extern wostream wcerr; 
#line 51
__declspec(dllimport) extern wostream wclog; 
#line 52
__declspec(dllimport) extern wistream *_Ptr_wcin; 
#line 53
__declspec(dllimport) extern wostream *_Ptr_wcout; 
#line 54
__declspec(dllimport) extern wostream *_Ptr_wcerr; 
#line 55
__declspec(dllimport) extern wostream *_Ptr_wclog; 
#line 69 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\iostream"
}
#line 72
#pragma warning(pop)
#pragma pack ( pop )
#line 32 "D:\\Projekty\\RayTracer\\packages\\nupengl.core.0.1.0.1\\build\\native\\include\\GL\\freeglut_std.h"
extern "C" {
#line 20 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\shared\\winapifamily.h"
#pragma warning(push)
#pragma warning(disable:4001)
#line 20 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\shared\\winpackagefamily.h"
#pragma warning(push)
#pragma warning(disable:4001)
#line 87 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\shared\\winpackagefamily.h"
#pragma warning(pop)
#line 247 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\shared\\winapifamily.h"
#pragma warning(pop)
#line 20 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\shared\\sdkddkver.h"
#pragma warning(push)
#pragma warning(disable:4668)
#line 23 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\shared\\sdkddkver.h"
#pragma warning(disable:4001)
#line 308 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\shared\\sdkddkver.h"
#pragma warning(pop)
#line 31 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\windows.h"
#pragma region Application Family or OneCore Family
#line 156 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\windows.h"
#pragma warning(disable:4514)
#line 158
#pragma warning(disable:4103)
#line 161 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\windows.h"
#pragma warning(push)
#line 163 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\windows.h"
#pragma warning(disable:4001)
#pragma warning(disable:4201)
#pragma warning(disable:4214)
#line 14 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\excpt.h"
#pragma warning(push)
#pragma warning(disable: 4514 4820 )
#line 17
__pragma( pack ( push, 8 )) extern "C" {
#line 28
typedef 
#line 22
enum _EXCEPTION_DISPOSITION { 
#line 24
ExceptionContinueExecution, 
#line 25
ExceptionContinueSearch, 
#line 26
ExceptionNestedException, 
#line 27
ExceptionCollidedUnwind
#line 28
} EXCEPTION_DISPOSITION; 
#line 48 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\excpt.h"
struct _EXCEPTION_RECORD; 
#line 49
struct _CONTEXT; 
#line 50
struct _DISPATCHER_CONTEXT; 
#line 52
EXCEPTION_DISPOSITION __cdecl __C_specific_handler(_EXCEPTION_RECORD * ExceptionRecord, void * EstablisherFrame, _CONTEXT * ContextRecord, _DISPATCHER_CONTEXT * DispatcherContext); 
#line 72 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\excpt.h"
unsigned long __cdecl _exception_code(); 
#line 73
void *__cdecl _exception_info(); 
#line 74
int __cdecl _abnormal_termination(); 
#line 85
}__pragma( pack ( pop )) 
#line 87
#pragma warning(pop)
#line 13 "E:\\VisualStudio\\2022\\Preview\\VC\\Tools\\MSVC\\14.37.32705\\include\\stdarg.h"
#pragma warning(push)
#pragma warning(disable: 4514 4820 )
#line 16
__pragma( pack ( push, 8 )) extern "C" {
#line 27
}__pragma( pack ( pop )) 
#line 29
#pragma warning(pop)
#line 17 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\shared\\windef.h"
extern "C" {
#line 21 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\shared\\specstrings.h"
#pragma warning(push)
#pragma warning(disable:4668)
#line 69 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\shared\\specstrings.h"
extern "C" {
#line 645 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\shared\\specstrings.h"
}
#line 133 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\shared\\driverspecs.h"
extern "C" {
#line 897 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\shared\\driverspecs.h"
}
#line 711 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\shared\\specstrings.h"
#pragma warning(pop)
#line 18 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\shared\\minwindef.h"
#pragma region Application Family or OneCore Family or Games Family
#line 42 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\shared\\minwindef.h"
extern "C" {
#line 51 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\shared\\minwindef.h"
typedef unsigned long ULONG; 
#line 52
typedef ULONG *PULONG; 
#line 53
typedef unsigned short USHORT; 
#line 54
typedef USHORT *PUSHORT; 
#line 55
typedef unsigned char UCHAR; 
#line 56
typedef UCHAR *PUCHAR; 
#line 57
typedef char *PSZ; 
#line 156 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\shared\\minwindef.h"
typedef unsigned long DWORD; 
#line 157
typedef int BOOL; 
#line 158
typedef unsigned char BYTE; 
#line 159
typedef unsigned short WORD; 
#line 160
typedef float FLOAT; 
#line 161
typedef FLOAT *PFLOAT; 
#line 162
typedef BOOL *PBOOL; 
#line 163
typedef BOOL *LPBOOL; 
#line 164
typedef BYTE *PBYTE; 
#line 165
typedef BYTE *LPBYTE; 
#line 166
typedef int *PINT; 
#line 167
typedef int *LPINT; 
#line 168
typedef WORD *PWORD; 
#line 169
typedef WORD *LPWORD; 
#line 170
typedef long *LPLONG; 
#line 171
typedef DWORD *PDWORD; 
#line 172
typedef DWORD *LPDWORD; 
#line 173
typedef void *LPVOID; 
#line 174
typedef const void *LPCVOID; 
#line 176
typedef int INT; 
#line 177
typedef unsigned UINT; 
#line 178
typedef unsigned *PUINT; 
#line 22 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnt.h"
#pragma warning(push)
#pragma warning(disable:4668)
#pragma warning(disable:4820)
#line 26 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnt.h"
#pragma warning(disable:4200)
#pragma warning(disable:4201)
#pragma warning(disable:4214)
#line 31
extern "C" {
#line 43 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\shared\\kernelspecs.h"
extern "C" {
#line 259 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\shared\\kernelspecs.h"
}
#line 23 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\shared\\basetsd.h"
#pragma warning(push)
#pragma warning(disable:4668)
#line 29 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\shared\\basetsd.h"
typedef unsigned __int64 POINTER_64_INT; 
#line 72 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\shared\\basetsd.h"
extern "C" {
#line 75 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\shared\\basetsd.h"
typedef signed char INT8, *PINT8; 
#line 76
typedef signed short INT16, *PINT16; 
#line 77
typedef signed int INT32, *PINT32; 
#line 78
typedef signed __int64 INT64, *PINT64; 
#line 79
typedef unsigned char UINT8, *PUINT8; 
#line 80
typedef unsigned short UINT16, *PUINT16; 
#line 81
typedef unsigned UINT32, *PUINT32; 
#line 82
typedef unsigned __int64 UINT64, *PUINT64; 
#line 88
typedef signed int LONG32, *PLONG32; 
#line 94
typedef unsigned ULONG32, *PULONG32; 
#line 95
typedef unsigned DWORD32, *PDWORD32; 
#line 125 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\shared\\basetsd.h"
typedef __int64 INT_PTR, *PINT_PTR; 
#line 126
typedef unsigned __int64 UINT_PTR, *PUINT_PTR; 
#line 128
typedef __int64 LONG_PTR, *PLONG_PTR; 
#line 129
typedef unsigned __int64 ULONG_PTR, *PULONG_PTR; 
#line 155 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\shared\\basetsd.h"
typedef void *__ptr64 HANDLE64; 
#line 156
typedef HANDLE64 *PHANDLE64; 
#line 169 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\shared\\basetsd.h"
typedef __int64 SHANDLE_PTR; 
#line 170
typedef unsigned __int64 HANDLE_PTR; 
#line 171
typedef unsigned UHALF_PTR, *PUHALF_PTR; 
#line 172
typedef int HALF_PTR, *PHALF_PTR; 
#line 177
__inline unsigned long HandleToULong(const void *
#line 178
h) 
#line 180
{ 
#line 181
return ((unsigned long)((ULONG_PTR)h)); 
#line 182
} 
#line 186
__inline long HandleToLong(const void *
#line 187
h) 
#line 189
{ 
#line 190
return ((long)((LONG_PTR)h)); 
#line 191
} 
#line 195
__inline void *ULongToHandle(const unsigned long 
#line 196
h) 
#line 198
{ 
#line 199
return ((void *)((UINT_PTR)h)); 
#line 200
} 
#line 205
__inline void *LongToHandle(const long 
#line 206
h) 
#line 208
{ 
#line 209
return ((void *)((INT_PTR)h)); 
#line 210
} 
#line 215
__inline unsigned long PtrToUlong(const void *
#line 216
p) 
#line 218
{ 
#line 219
return ((unsigned long)((ULONG_PTR)p)); 
#line 220
} 
#line 224
__inline unsigned PtrToUint(const void *
#line 225
p) 
#line 227
{ 
#line 228
return ((unsigned)((UINT_PTR)p)); 
#line 229
} 
#line 233
__inline unsigned short PtrToUshort(const void *
#line 234
p) 
#line 236
{ 
#line 237
return ((unsigned short)((unsigned long)((ULONG_PTR)p))); 
#line 238
} 
#line 242
__inline long PtrToLong(const void *
#line 243
p) 
#line 245
{ 
#line 246
return ((long)((LONG_PTR)p)); 
#line 247
} 
#line 251
__inline int PtrToInt(const void *
#line 252
p) 
#line 254
{ 
#line 255
return ((int)((INT_PTR)p)); 
#line 256
} 
#line 260
__inline short PtrToShort(const void *
#line 261
p) 
#line 263
{ 
#line 264
return ((short)((long)((LONG_PTR)p))); 
#line 265
} 
#line 269
__inline void *IntToPtr(const int 
#line 270
i) 
#line 273
{ 
#line 274
return ((void *)((INT_PTR)i)); 
#line 275
} 
#line 279
__inline void *UIntToPtr(const unsigned 
#line 280
ui) 
#line 283
{ 
#line 284
return ((void *)((UINT_PTR)ui)); 
#line 285
} 
#line 289
__inline void *LongToPtr(const long 
#line 290
l) 
#line 293
{ 
#line 294
return ((void *)((LONG_PTR)l)); 
#line 295
} 
#line 299
__inline void *ULongToPtr(const unsigned long 
#line 300
ul) 
#line 303
{ 
#line 304
return ((void *)((ULONG_PTR)ul)); 
#line 305
} 
#line 314
__inline void *Ptr32ToPtr(const void *__ptr32 
#line 315
p) 
#line 317
{ 
#line 318
return ((void *)((ULONG_PTR)((unsigned long)p))); 
#line 319
} 
#line 323
__inline void *Handle32ToHandle(const void *__ptr32 
#line 324
h) 
#line 326
{ 
#line 327
return ((void *)((LONG_PTR)((long)h))); 
#line 328
} 
#line 332
__inline void *__ptr32 PtrToPtr32(const void *
#line 333
p) 
#line 335
{ 
#line 336
return ((void *__ptr32)((unsigned long)((ULONG_PTR)p))); 
#line 337
} 
#line 434 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\shared\\basetsd.h"
typedef ULONG_PTR SIZE_T, *PSIZE_T; 
#line 435
typedef LONG_PTR SSIZE_T, *PSSIZE_T; 
#line 483 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\shared\\basetsd.h"
typedef ULONG_PTR DWORD_PTR, *PDWORD_PTR; 
#line 489
typedef __int64 LONG64, *PLONG64; 
#line 496
typedef unsigned __int64 ULONG64, *PULONG64; 
#line 497
typedef unsigned __int64 DWORD64, *PDWORD64; 
#line 505
typedef ULONG_PTR KAFFINITY; 
#line 506
typedef KAFFINITY *PKAFFINITY; 
#line 511
}
#line 515 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\shared\\basetsd.h"
#pragma warning(pop)
#line 425 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnt.h"
typedef void *PVOID; 
#line 426
typedef void *__ptr64 PVOID64; 
#line 467 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnt.h"
typedef char CHAR; 
#line 468
typedef short SHORT; 
#line 469
typedef long LONG; 
#line 471
typedef int INT; 
#line 480 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnt.h"
typedef __wchar_t WCHAR; 
#line 486 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnt.h"
typedef WCHAR *PWCHAR, *LPWCH, *PWCH; 
#line 487
typedef const WCHAR *LPCWCH, *PCWCH; 
#line 489
typedef WCHAR *NWPSTR, *LPWSTR, *PWSTR; 
#line 490
typedef PWSTR *PZPWSTR; 
#line 491
typedef const PWSTR *PCZPWSTR; 
#line 492
typedef __unaligned WCHAR *LPUWSTR, *PUWSTR; 
#line 493
typedef const WCHAR *LPCWSTR, *PCWSTR; 
#line 494
typedef PCWSTR *PZPCWSTR; 
#line 495
typedef const PCWSTR *PCZPCWSTR; 
#line 496
typedef const __unaligned WCHAR *LPCUWSTR, *PCUWSTR; 
#line 498
typedef WCHAR *PZZWSTR; 
#line 499
typedef const WCHAR *PCZZWSTR; 
#line 500
typedef __unaligned WCHAR *PUZZWSTR; 
#line 501
typedef const __unaligned WCHAR *PCUZZWSTR; 
#line 503
typedef WCHAR *PNZWCH; 
#line 504
typedef const WCHAR *PCNZWCH; 
#line 505
typedef __unaligned WCHAR *PUNZWCH; 
#line 506
typedef const __unaligned WCHAR *PCUNZWCH; 
#line 510
typedef const WCHAR *LPCWCHAR, *PCWCHAR; 
#line 511
typedef const __unaligned WCHAR *LPCUWCHAR, *PCUWCHAR; 
#line 517
typedef unsigned long UCSCHAR; 
#line 537
typedef UCSCHAR *PUCSCHAR; 
#line 538
typedef const UCSCHAR *PCUCSCHAR; 
#line 540
typedef UCSCHAR *PUCSSTR; 
#line 541
typedef __unaligned UCSCHAR *PUUCSSTR; 
#line 543
typedef const UCSCHAR *PCUCSSTR; 
#line 544
typedef const __unaligned UCSCHAR *PCUUCSSTR; 
#line 546
typedef __unaligned UCSCHAR *PUUCSCHAR; 
#line 547
typedef const __unaligned UCSCHAR *PCUUCSCHAR; 
#line 555 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnt.h"
typedef CHAR *PCHAR, *LPCH, *PCH; 
#line 556
typedef const CHAR *LPCCH, *PCCH; 
#line 558
typedef CHAR *NPSTR, *LPSTR, *PSTR; 
#line 559
typedef PSTR *PZPSTR; 
#line 560
typedef const PSTR *PCZPSTR; 
#line 561
typedef const CHAR *LPCSTR, *PCSTR; 
#line 562
typedef PCSTR *PZPCSTR; 
#line 563
typedef const PCSTR *PCZPCSTR; 
#line 565
typedef CHAR *PZZSTR; 
#line 566
typedef const CHAR *PCZZSTR; 
#line 568
typedef CHAR *PNZCH; 
#line 569
typedef const CHAR *PCNZCH; 
#line 603
typedef char TCHAR, *PTCHAR; 
#line 604
typedef unsigned char TBYTE, *PTBYTE; 
#line 608 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnt.h"
typedef LPCH LPTCH, PTCH; 
#line 609
typedef LPCCH LPCTCH, PCTCH; 
#line 610
typedef LPSTR PTSTR, LPTSTR, PUTSTR, LPUTSTR; 
#line 611
typedef LPCSTR PCTSTR, LPCTSTR, PCUTSTR, LPCUTSTR; 
#line 612
typedef PZZSTR PZZTSTR, PUZZTSTR; 
#line 613
typedef PCZZSTR PCZZTSTR, PCUZZTSTR; 
#line 614
typedef PZPSTR PZPTSTR; 
#line 615
typedef PNZCH PNZTCH, PUNZTCH; 
#line 616
typedef PCNZCH PCNZTCH, PCUNZTCH; 
#line 623 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnt.h"
typedef SHORT *PSHORT; 
#line 624
typedef LONG *PLONG; 
#line 637
typedef 
#line 633
struct _PROCESSOR_NUMBER { 
#line 634
WORD Group; 
#line 635
BYTE Number; 
#line 636
BYTE Reserved; 
#line 637
} PROCESSOR_NUMBER, *PPROCESSOR_NUMBER; 
#line 648
typedef 
#line 644
struct _GROUP_AFFINITY { 
#line 645
KAFFINITY Mask; 
#line 646
WORD Group; 
#line 647
WORD Reserved[3]; 
#line 648
} GROUP_AFFINITY, *PGROUP_AFFINITY; 
#line 669 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnt.h"
typedef void *HANDLE; 
#line 679 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnt.h"
typedef HANDLE *PHANDLE; 
#line 687
typedef BYTE FCHAR; 
#line 688
typedef WORD FSHORT; 
#line 689
typedef DWORD FLONG; 
#line 700
typedef long HRESULT; 
#line 782 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnt.h"
typedef char CCHAR; 
#line 783
typedef DWORD LCID; 
#line 784
typedef PDWORD PLCID; 
#line 785
typedef WORD LANGID; 
#line 797
typedef 
#line 794
enum { 
#line 795
UNSPECIFIED_COMPARTMENT_ID, 
#line 796
DEFAULT_COMPARTMENT_ID
#line 797
} COMPARTMENT_ID, *PCOMPARTMENT_ID; 
#line 828 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnt.h"
typedef 
#line 825
struct _FLOAT128 { 
#line 826
__int64 LowPart; 
#line 827
__int64 HighPart; 
#line 828
} FLOAT128; 
#line 830
typedef FLOAT128 *PFLOAT128; 
#line 840
typedef __int64 LONGLONG; 
#line 841
typedef unsigned __int64 ULONGLONG; 
#line 862 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnt.h"
typedef LONGLONG *PLONGLONG; 
#line 863
typedef ULONGLONG *PULONGLONG; 
#line 867
typedef LONGLONG USN; 
#line 884 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnt.h"
typedef 
#line 874
union _LARGE_INTEGER { 
#line 875
struct { 
#line 876
DWORD LowPart; 
#line 877
LONG HighPart; 
#line 878
}; 
#line 879
struct { 
#line 880
DWORD LowPart; 
#line 881
LONG HighPart; 
#line 882
} u; 
#line 883
LONGLONG QuadPart; 
#line 884
} LARGE_INTEGER; 
#line 887 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnt.h"
typedef LARGE_INTEGER *PLARGE_INTEGER; 
#line 904 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnt.h"
typedef 
#line 894
union _ULARGE_INTEGER { 
#line 895
struct { 
#line 896
DWORD LowPart; 
#line 897
DWORD HighPart; 
#line 898
}; 
#line 899
struct { 
#line 900
DWORD LowPart; 
#line 901
DWORD HighPart; 
#line 902
} u; 
#line 903
ULONGLONG QuadPart; 
#line 904
} ULARGE_INTEGER; 
#line 907 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnt.h"
typedef ULARGE_INTEGER *PULARGE_INTEGER; 
#line 913
typedef LONG_PTR RTL_REFERENCE_COUNT, *PRTL_REFERENCE_COUNT; 
#line 914
typedef LONG RTL_REFERENCE_COUNT32, *PRTL_REFERENCE_COUNT32; 
#line 927
typedef 
#line 924
struct _LUID { 
#line 925
DWORD LowPart; 
#line 926
LONG HighPart; 
#line 927
} LUID, *PLUID; 
#line 930
typedef ULONGLONG DWORDLONG; 
#line 931
typedef DWORDLONG *PDWORDLONG; 
#line 1068 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnt.h"
extern "C" {
#line 1080 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnt.h"
unsigned char __cdecl _rotl8(unsigned char Value, unsigned char Shift); 
#line 1087
unsigned short __cdecl _rotl16(unsigned short Value, unsigned char Shift); 
#line 1094
unsigned char __cdecl _rotr8(unsigned char Value, unsigned char Shift); 
#line 1101
unsigned short __cdecl _rotr16(unsigned short Value, unsigned char Shift); 
#line 1106
#pragma intrinsic(_rotl8)
#pragma intrinsic(_rotl16)
#pragma intrinsic(_rotr8)
#pragma intrinsic(_rotr16)
#line 1122 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnt.h"
unsigned __cdecl _rotl(unsigned Value, int Shift); 
#line 1129
unsigned __int64 __cdecl _rotl64(unsigned __int64 Value, int Shift); 
#line 1136
unsigned __cdecl _rotr(unsigned Value, int Shift); 
#line 1143
unsigned __int64 __cdecl _rotr64(unsigned __int64 Value, int Shift); 
#line 1156 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnt.h"
}
#line 1148 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnt.h"
#pragma intrinsic(_rotl)
#pragma intrinsic(_rotl64)
#pragma intrinsic(_rotr)
#pragma intrinsic(_rotr64)
#line 1163 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnt.h"
typedef BYTE BOOLEAN; 
#line 1164
typedef BOOLEAN *PBOOLEAN; 
#line 1173
typedef 
#line 1170
struct _LIST_ENTRY { 
#line 1171
_LIST_ENTRY *Flink; 
#line 1172
_LIST_ENTRY *Blink; 
#line 1173
} LIST_ENTRY, *PLIST_ENTRY, *PRLIST_ENTRY; 
#line 1182
typedef 
#line 1180
struct _SINGLE_LIST_ENTRY { 
#line 1181
_SINGLE_LIST_ENTRY *Next; 
#line 1182
} SINGLE_LIST_ENTRY, *PSINGLE_LIST_ENTRY; 
#line 1194
typedef 
#line 1191
struct LIST_ENTRY32 { 
#line 1192
DWORD Flink; 
#line 1193
DWORD Blink; 
#line 1194
} LIST_ENTRY32; 
#line 1195
typedef LIST_ENTRY32 *PLIST_ENTRY32; 
#line 1200
typedef 
#line 1197
struct LIST_ENTRY64 { 
#line 1198
ULONGLONG Flink; 
#line 1199
ULONGLONG Blink; 
#line 1200
} LIST_ENTRY64; 
#line 1201
typedef LIST_ENTRY64 *PLIST_ENTRY64; 
#line 27 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\shared\\guiddef.h"
typedef 
#define GUID_DEFINED
#line 22
struct _GUID { 
#line 23
unsigned long Data1; 
#line 24
unsigned short Data2; 
#line 25
unsigned short Data3; 
#line 26
unsigned char Data4[8]; 
#line 27
} GUID; 
#line 75 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\shared\\guiddef.h"
typedef GUID *LPGUID; 
#line 80 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\shared\\guiddef.h"
typedef const GUID *LPCGUID; 
#line 86 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\shared\\guiddef.h"
typedef GUID IID; 
#line 87
typedef IID *LPIID; 
#line 90
typedef GUID CLSID; 
#line 91
typedef CLSID *LPCLSID; 
#line 94
typedef GUID FMTID; 
#line 95
typedef FMTID *LPFMTID; 
#line 150 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\shared\\guiddef.h"
__inline int InlineIsEqualGUID(const GUID &rguid1, const GUID &rguid2) 
#line 151
{ 
#line 152
return (((((((unsigned long *)(&rguid1))[0]) == (((unsigned long *)(&rguid2))[0])) && ((((unsigned long *)(&rguid1))[1]) == (((unsigned long *)(&rguid2))[1]))) && ((((unsigned long *)(&rguid1))[2]) == (((unsigned long *)(&rguid2))[2]))) && ((((unsigned long *)(&rguid1))[3]) == (((unsigned long *)(&rguid2))[3]))); 
#line 157
} 
#line 159
__inline int IsEqualGUID(const GUID &rguid1, const GUID &rguid2) 
#line 160
{ 
#line 161
return !(memcmp(&rguid1, &rguid2, sizeof(GUID))); 
#line 162
} 
#line 192 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\shared\\guiddef.h"
__inline bool operator==(const GUID &guidOne, const GUID &guidOther) 
#line 193
{ 
#line 194
return !(!(IsEqualGUID(guidOne, guidOther))); 
#line 195
} 
#line 197
__inline bool operator!=(const GUID &guidOne, const GUID &guidOther) 
#line 198
{ 
#line 199
return !(guidOne == guidOther); 
#line 200
} 
#line 1212 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnt.h"
typedef 
#line 1209
struct _OBJECTID { 
#line 1210
GUID Lineage; 
#line 1211
DWORD Uniquifier; 
#line 1212
} OBJECTID; 
#line 1300 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnt.h"
#pragma region Application Family or OneCore Family Or Game Family
extern "C++" 
#line 1306
template< class T, size_t N> char (*RtlpNumberOf(__unaligned T (&)[N]))[N]; 
#line 1317 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnt.h"
#pragma endregion
#line 1443 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnt.h"
typedef EXCEPTION_DISPOSITION __stdcall EXCEPTION_ROUTINE(_EXCEPTION_RECORD * ExceptionRecord, PVOID EstablisherFrame, _CONTEXT * ContextRecord, PVOID DispatcherContext); 
#line 1450
typedef EXCEPTION_ROUTINE *PEXCEPTION_ROUTINE; 
#line 2459 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnt.h"
extern "C++" {
#line 2461
template< size_t S> struct _ENUM_FLAG_INTEGER_FOR_SIZE; 
#line 2465
template<> struct _ENUM_FLAG_INTEGER_FOR_SIZE< 1Ui64>  { 
#line 2467
typedef INT8 type; 
#line 2468
}; 
#line 2471
template<> struct _ENUM_FLAG_INTEGER_FOR_SIZE< 2Ui64>  { 
#line 2473
typedef INT16 type; 
#line 2474
}; 
#line 2477
template<> struct _ENUM_FLAG_INTEGER_FOR_SIZE< 4Ui64>  { 
#line 2479
typedef INT32 type; 
#line 2480
}; 
#line 2483
template<> struct _ENUM_FLAG_INTEGER_FOR_SIZE< 8Ui64>  { 
#line 2485
typedef INT64 type; 
#line 2486
}; 
#line 2489
template< class T> 
#line 2490
struct _ENUM_FLAG_SIZED_INTEGER { 
#line 2492
typedef typename _ENUM_FLAG_INTEGER_FOR_SIZE< sizeof(T)> ::type type; 
#line 2493
}; 
#line 2495
}
#line 2535 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnt.h"
static_assert((__alignof(LARGE_INTEGER) == (8)), "Windows headers require the default packing option. Changing this can lead to memory corruption. This diagnostic can be disabled" " by building with WINDOWS_IGNORE_PACKING_MISMATCH defined.");
#line 2623 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnt.h"
typedef ULONG_PTR KSPIN_LOCK; 
#line 2624
typedef KSPIN_LOCK *PKSPIN_LOCK; 
#line 2635
typedef 
#line 2632
struct __declspec(align(16)) _M128A { 
#line 2633
ULONGLONG Low; 
#line 2634
LONGLONG High; 
#line 2635
} M128A, *PM128A; 
#line 2669 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnt.h"
typedef 
#line 2641 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnt.h"
struct __declspec(align(16)) _XSAVE_FORMAT { 
#line 2642
WORD ControlWord; 
#line 2643
WORD StatusWord; 
#line 2644
BYTE TagWord; 
#line 2645
BYTE Reserved1; 
#line 2646
WORD ErrorOpcode; 
#line 2647
DWORD ErrorOffset; 
#line 2648
WORD ErrorSelector; 
#line 2649
WORD Reserved2; 
#line 2650
DWORD DataOffset; 
#line 2651
WORD DataSelector; 
#line 2652
WORD Reserved3; 
#line 2653
DWORD MxCsr; 
#line 2654
DWORD MxCsr_Mask; 
#line 2655
M128A FloatRegisters[8]; 
#line 2659
M128A XmmRegisters[16]; 
#line 2660
BYTE Reserved4[96]; 
#line 2669 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnt.h"
} XSAVE_FORMAT, *PXSAVE_FORMAT; 
#line 2680
typedef 
#line 2677
struct _XSAVE_CET_U_FORMAT { 
#line 2678
DWORD64 Ia32CetUMsr; 
#line 2679
DWORD64 Ia32Pl3SspMsr; 
#line 2680
} XSAVE_CET_U_FORMAT, *PXSAVE_CET_U_FORMAT; 
#line 2686
typedef 
#line 2682
struct __declspec(align(8)) _XSAVE_AREA_HEADER { 
#line 2683
DWORD64 Mask; 
#line 2684
DWORD64 CompactionMask; 
#line 2685
DWORD64 Reserved2[6]; 
#line 2686
} XSAVE_AREA_HEADER, *PXSAVE_AREA_HEADER; 
#line 2691
typedef 
#line 2688
struct __declspec(align(16)) _XSAVE_AREA { 
#line 2689
XSAVE_FORMAT LegacyState; 
#line 2690
XSAVE_AREA_HEADER Header; 
#line 2691
} XSAVE_AREA, *PXSAVE_AREA; 
#line 2709 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnt.h"
typedef 
#line 2693 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnt.h"
struct _XSTATE_CONTEXT { 
#line 2694
DWORD64 Mask; 
#line 2695
DWORD Length; 
#line 2696
DWORD Reserved1; 
#line 2697
PXSAVE_AREA Area; 
#line 2703 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnt.h"
PVOID Buffer; 
#line 2709 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnt.h"
} XSTATE_CONTEXT, *PXSTATE_CONTEXT; 
#line 2724
typedef 
#line 2711
struct _KERNEL_CET_CONTEXT { 
#line 2712
DWORD64 Ssp; 
#line 2713
DWORD64 Rip; 
#line 2714
WORD SegCs; 
#line 2715
union { 
#line 2716
WORD AllFlags; 
#line 2717
struct { 
#line 2718
WORD UseWrss:1; 
#line 2719
WORD PopShadowStackOne:1; 
#line 2720
WORD Unused:14; 
#line 2721
}; 
#line 2722
}; 
#line 2723
WORD Fill[2]; 
#line 2724
} KERNEL_CET_CONTEXT, *PKERNEL_CET_CONTEXT; 
#line 2728
typedef char __C_ASSERT__[(sizeof(KERNEL_CET_CONTEXT) == ((3) * sizeof(DWORD64))) ? 1 : (-1)]; 
#line 2746 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnt.h"
typedef 
#line 2738
struct _SCOPE_TABLE_AMD64 { 
#line 2739
DWORD Count; 
#line 2740
struct { 
#line 2741
DWORD BeginAddress; 
#line 2742
DWORD EndAddress; 
#line 2743
DWORD HandlerAddress; 
#line 2744
DWORD JumpTarget; 
#line 2745
} ScopeRecord[1]; 
#line 2746
} SCOPE_TABLE_AMD64, *PSCOPE_TABLE_AMD64; 
#line 2763
extern "C" {
#line 2799 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnt.h"
BOOLEAN _bittest(const LONG * Base, LONG Offset); 
#line 2805
BOOLEAN _bittestandcomplement(LONG * Base, LONG Offset); 
#line 2811
BOOLEAN _bittestandset(LONG * Base, LONG Offset); 
#line 2817
BOOLEAN _bittestandreset(LONG * Base, LONG Offset); 
#line 2823
BOOLEAN _interlockedbittestandset(volatile LONG * Base, LONG Offset); 
#line 2829
BOOLEAN _interlockedbittestandreset(volatile LONG * Base, LONG Offset); 
#line 2835
BOOLEAN _bittest64(const LONG64 * Base, LONG64 Offset); 
#line 2841
BOOLEAN _bittestandcomplement64(LONG64 * Base, LONG64 Offset); 
#line 2847
BOOLEAN _bittestandset64(LONG64 * Base, LONG64 Offset); 
#line 2853
BOOLEAN _bittestandreset64(LONG64 * Base, LONG64 Offset); 
#line 2859
BOOLEAN _interlockedbittestandset64(volatile LONG64 * Base, LONG64 Offset); 
#line 2865
BOOLEAN _interlockedbittestandreset64(volatile LONG64 * Base, LONG64 Offset); 
#line 2870
#pragma intrinsic(_bittest)
#pragma intrinsic(_bittestandcomplement)
#pragma intrinsic(_bittestandset)
#pragma intrinsic(_bittestandreset)
#line 2876
#pragma intrinsic(_interlockedbittestandset)
#pragma intrinsic(_interlockedbittestandreset)
#line 2880 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnt.h"
#pragma intrinsic(_bittest64)
#pragma intrinsic(_bittestandcomplement64)
#pragma intrinsic(_bittestandset64)
#pragma intrinsic(_bittestandreset64)
#line 2886
#pragma intrinsic(_interlockedbittestandset64)
#pragma intrinsic(_interlockedbittestandreset64)
#line 2901 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnt.h"
BOOLEAN _BitScanForward(DWORD * Index, DWORD Mask); 
#line 2908
BOOLEAN _BitScanReverse(DWORD * Index, DWORD Mask); 
#line 2915
BOOLEAN _BitScanForward64(DWORD * Index, DWORD64 Mask); 
#line 2922
BOOLEAN _BitScanReverse64(DWORD * Index, DWORD64 Mask); 
#line 2927
#pragma intrinsic(_BitScanForward)
#pragma intrinsic(_BitScanReverse)
#pragma intrinsic(_BitScanForward64)
#pragma intrinsic(_BitScanReverse64)
#line 3066 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnt.h"
SHORT _InterlockedIncrement16(volatile SHORT * Addend); 
#line 3071
SHORT _InterlockedDecrement16(volatile SHORT * Addend); 
#line 3076
SHORT _InterlockedCompareExchange16(volatile SHORT * Destination, SHORT ExChange, SHORT Comperand); 
#line 3083
LONG _InterlockedAnd(volatile LONG * Destination, LONG Value); 
#line 3089
LONG _InterlockedOr(volatile LONG * Destination, LONG Value); 
#line 3095
LONG _InterlockedXor(volatile LONG * Destination, LONG Value); 
#line 3101
LONG64 _InterlockedAnd64(volatile LONG64 * Destination, LONG64 Value); 
#line 3107
LONG64 _InterlockedOr64(volatile LONG64 * Destination, LONG64 Value); 
#line 3113
LONG64 _InterlockedXor64(volatile LONG64 * Destination, LONG64 Value); 
#line 3119
LONG _InterlockedIncrement(volatile LONG * Addend); 
#line 3124
LONG _InterlockedDecrement(volatile LONG * Addend); 
#line 3129
LONG _InterlockedExchange(volatile LONG * Target, LONG Value); 
#line 3135
LONG _InterlockedExchangeAdd(volatile LONG * Addend, LONG Value); 
#line 3144
__forceinline LONG _InlineInterlockedAdd(volatile LONG *
#line 3145
Addend, LONG 
#line 3146
Value) 
#line 3149
{ 
#line 3150
return _InterlockedExchangeAdd(Addend, Value) + Value; 
#line 3151
} 
#line 3156 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnt.h"
LONG _InterlockedCompareExchange(volatile LONG * Destination, LONG ExChange, LONG Comperand); 
#line 3163
LONG64 _InterlockedIncrement64(volatile LONG64 * Addend); 
#line 3168
LONG64 _InterlockedDecrement64(volatile LONG64 * Addend); 
#line 3173
LONG64 _InterlockedExchange64(volatile LONG64 * Target, LONG64 Value); 
#line 3179
LONG64 _InterlockedExchangeAdd64(volatile LONG64 * Addend, LONG64 Value); 
#line 3188
__forceinline LONG64 _InlineInterlockedAdd64(volatile LONG64 *
#line 3189
Addend, LONG64 
#line 3190
Value) 
#line 3193
{ 
#line 3194
return _InterlockedExchangeAdd64(Addend, Value) + Value; 
#line 3195
} 
#line 3200 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnt.h"
LONG64 _InterlockedCompareExchange64(volatile LONG64 * Destination, LONG64 ExChange, LONG64 Comperand); 
#line 3207
BOOLEAN _InterlockedCompareExchange128(volatile LONG64 * Destination, LONG64 ExchangeHigh, LONG64 ExchangeLow, LONG64 * ComparandResult); 
#line 3215
PVOID _InterlockedCompareExchangePointer(volatile PVOID * Destination, PVOID Exchange, PVOID Comperand); 
#line 3225 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnt.h"
PVOID _InterlockedExchangePointer(volatile PVOID * Target, PVOID Value); 
#line 3234 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnt.h"
#pragma intrinsic(_InterlockedIncrement16)
#pragma intrinsic(_InterlockedDecrement16)
#pragma intrinsic(_InterlockedCompareExchange16)
#pragma intrinsic(_InterlockedAnd)
#pragma intrinsic(_InterlockedOr)
#pragma intrinsic(_InterlockedXor)
#pragma intrinsic(_InterlockedIncrement)
#pragma intrinsic(_InterlockedDecrement)
#pragma intrinsic(_InterlockedExchange)
#pragma intrinsic(_InterlockedExchangeAdd)
#pragma intrinsic(_InterlockedCompareExchange)
#pragma intrinsic(_InterlockedAnd64)
#pragma intrinsic(_InterlockedOr64)
#pragma intrinsic(_InterlockedXor64)
#pragma intrinsic(_InterlockedIncrement64)
#pragma intrinsic(_InterlockedDecrement64)
#pragma intrinsic(_InterlockedExchange64)
#pragma intrinsic(_InterlockedExchangeAdd64)
#pragma intrinsic(_InterlockedCompareExchange64)
#line 3256
#pragma intrinsic(_InterlockedCompareExchange128)
#line 3260 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnt.h"
#pragma intrinsic(_InterlockedExchangePointer)
#pragma intrinsic(_InterlockedCompareExchangePointer)
#line 3273 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnt.h"
CHAR _InterlockedExchange8(volatile CHAR * Target, CHAR Value); 
#line 3279
SHORT _InterlockedExchange16(volatile SHORT * Destination, SHORT ExChange); 
#line 3285
#pragma intrinsic(_InterlockedExchange8)
#pragma intrinsic(_InterlockedExchange16)
#line 3311 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnt.h"
char _InterlockedExchangeAdd8(volatile char * _Addend, char _Value); 
#line 3317
char _InterlockedAnd8(volatile char * Destination, char Value); 
#line 3323
char _InterlockedOr8(volatile char * Destination, char Value); 
#line 3329
char _InterlockedXor8(volatile char * Destination, char Value); 
#line 3335
SHORT _InterlockedAnd16(volatile SHORT * Destination, SHORT Value); 
#line 3341
SHORT _InterlockedOr16(volatile SHORT * Destination, SHORT Value); 
#line 3347
SHORT _InterlockedXor16(volatile SHORT * Destination, SHORT Value); 
#line 3353
#pragma intrinsic (_InterlockedExchangeAdd8)
#pragma intrinsic (_InterlockedAnd8)
#pragma intrinsic (_InterlockedOr8)
#pragma intrinsic (_InterlockedXor8)
#pragma intrinsic (_InterlockedAnd16)
#pragma intrinsic (_InterlockedOr16)
#pragma intrinsic (_InterlockedXor16)
#line 3386 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnt.h"
void __cpuidex(int  CPUInfo[4], int Function, int SubLeaf); 
#line 3394
#pragma intrinsic(__cpuidex)
#line 3451 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnt.h"
void _mm_clflush(const void * Address); 
#line 3455
#pragma intrinsic(_mm_clflush)
#line 3465 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnt.h"
void _ReadWriteBarrier(); 
#line 3469
#pragma intrinsic(_ReadWriteBarrier)
#line 3499 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnt.h"
void __faststorefence(); 
#line 3512 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnt.h"
void _mm_lfence(); 
#line 3517
void _mm_mfence(); 
#line 3522
void _mm_sfence(); 
#line 3527
void _mm_pause(); 
#line 3532
void _mm_prefetch(const CHAR * a, int sel); 
#line 3538
void _m_prefetchw(const volatile void * Source); 
#line 3559 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnt.h"
#pragma intrinsic(__faststorefence)
#line 3569 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnt.h"
#pragma intrinsic(_mm_pause)
#pragma intrinsic(_mm_prefetch)
#pragma intrinsic(_mm_lfence)
#pragma intrinsic(_mm_mfence)
#pragma intrinsic(_mm_sfence)
#pragma intrinsic(_m_prefetchw)
#line 3605 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnt.h"
unsigned _mm_getcsr(); 
#line 3610
void _mm_setcsr(unsigned MxCsr); 
#line 3616
#pragma intrinsic(_mm_getcsr)
#pragma intrinsic(_mm_setcsr)
#line 3630 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnt.h"
unsigned __getcallerseflags(); 
#line 3634
#pragma intrinsic(__getcallerseflags)
#line 3643
DWORD __segmentlimit(DWORD Selector); 
#line 3647
#pragma intrinsic(__segmentlimit)
#line 3656
DWORD64 __readpmc(DWORD Counter); 
#line 3660
#pragma intrinsic(__readpmc)
#line 3669
DWORD64 __rdtsc(); 
#line 3673
#pragma intrinsic(__rdtsc)
#line 3680
void __movsb(PBYTE Destination, const BYTE * Source, SIZE_T Count); 
#line 3687
void __movsw(PWORD Destination, const WORD * Source, SIZE_T Count); 
#line 3694
void __movsd(PDWORD Destination, const DWORD * Source, SIZE_T Count); 
#line 3701
void __movsq(PDWORD64 Destination, const DWORD64 * Source, SIZE_T Count); 
#line 3707
#pragma intrinsic(__movsb)
#pragma intrinsic(__movsw)
#pragma intrinsic(__movsd)
#pragma intrinsic(__movsq)
#line 3717
void __stosb(PBYTE Destination, BYTE Value, SIZE_T Count); 
#line 3724
void __stosw(PWORD Destination, WORD Value, SIZE_T Count); 
#line 3731
void __stosd(PDWORD Destination, DWORD Value, SIZE_T Count); 
#line 3738
void __stosq(PDWORD64 Destination, DWORD64 Value, SIZE_T Count); 
#line 3744
#pragma intrinsic(__stosb)
#pragma intrinsic(__stosw)
#pragma intrinsic(__stosd)
#pragma intrinsic(__stosq)
#line 3757
LONGLONG __mulh(LONG64 Multiplier, LONG64 Multiplicand); 
#line 3763
ULONGLONG __umulh(DWORD64 Multiplier, DWORD64 Multiplicand); 
#line 3768
#pragma intrinsic(__mulh)
#pragma intrinsic(__umulh)
#line 3789 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnt.h"
DWORD64 __popcnt64(DWORD64 operand); 
#line 3796
#pragma intrinsic(__popcnt64)
#line 3818 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnt.h"
DWORD64 __shiftleft128(DWORD64 LowPart, DWORD64 HighPart, BYTE Shift); 
#line 3825
DWORD64 __shiftright128(DWORD64 LowPart, DWORD64 HighPart, BYTE Shift); 
#line 3833
#pragma intrinsic(__shiftleft128)
#pragma intrinsic(__shiftright128)
#line 3854 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnt.h"
LONG64 _mul128(LONG64 Multiplier, LONG64 Multiplicand, LONG64 * HighProduct); 
#line 3862
#pragma intrinsic(_mul128)
#line 3869 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnt.h"
DWORD64 UnsignedMultiply128(DWORD64 Multiplier, DWORD64 Multiplicand, DWORD64 * HighProduct); 
#line 3887 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnt.h"
DWORD64 _umul128(DWORD64 Multiplier, DWORD64 Multiplicand, DWORD64 * HighProduct); 
#line 3894
LONG64 _mul128(LONG64 Multiplier, LONG64 Multiplicand, LONG64 * HighProduct); 
#line 3902
#pragma intrinsic(_umul128)
#line 3910 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnt.h"
__forceinline LONG64 MultiplyExtract128(LONG64 
#line 3911
Multiplier, LONG64 
#line 3912
Multiplicand, BYTE 
#line 3913
Shift) 
#line 3916
{ 
#line 3918
LONG64 extractedProduct; 
#line 3919
LONG64 highProduct; 
#line 3920
LONG64 lowProduct; 
#line 3921
BOOLEAN negate; 
#line 3922
DWORD64 uhighProduct; 
#line 3923
DWORD64 ulowProduct; 
#line 3925
lowProduct = _mul128(Multiplier, Multiplicand, &highProduct); 
#line 3926
negate = (0); 
#line 3927
uhighProduct = ((DWORD64)highProduct); 
#line 3928
ulowProduct = ((DWORD64)lowProduct); 
#line 3929
if (highProduct < (0)) { 
#line 3930
negate = (1); 
#line 3931
uhighProduct = ((DWORD64)(-highProduct)); 
#line 3932
ulowProduct = ((DWORD64)(-lowProduct)); 
#line 3933
if (ulowProduct != (0)) { 
#line 3934
uhighProduct -= (1); 
#line 3935
}  
#line 3936
}  
#line 3938
extractedProduct = ((LONG64)__shiftright128(ulowProduct, uhighProduct, Shift)); 
#line 3939
if (negate != 0) { 
#line 3940
extractedProduct = (-extractedProduct); 
#line 3941
}  
#line 3943
return extractedProduct; 
#line 3944
} 
#line 3948
__forceinline DWORD64 UnsignedMultiplyExtract128(DWORD64 
#line 3949
Multiplier, DWORD64 
#line 3950
Multiplicand, BYTE 
#line 3951
Shift) 
#line 3954
{ 
#line 3956
DWORD64 extractedProduct; 
#line 3957
DWORD64 highProduct; 
#line 3958
DWORD64 lowProduct; 
#line 3960
lowProduct = _umul128(Multiplier, Multiplicand, &highProduct); 
#line 3961
extractedProduct = __shiftright128(lowProduct, highProduct, Shift); 
#line 3962
return extractedProduct; 
#line 3963
} 
#line 3972
BYTE __readgsbyte(DWORD Offset); 
#line 3977
WORD __readgsword(DWORD Offset); 
#line 3982
DWORD __readgsdword(DWORD Offset); 
#line 3987
DWORD64 __readgsqword(DWORD Offset); 
#line 3992
void __writegsbyte(DWORD Offset, BYTE Data); 
#line 3998
void __writegsword(DWORD Offset, WORD Data); 
#line 4004
void __writegsdword(DWORD Offset, DWORD Data); 
#line 4010
void __writegsqword(DWORD Offset, DWORD64 Data); 
#line 4015
#pragma intrinsic(__readgsbyte)
#pragma intrinsic(__readgsword)
#pragma intrinsic(__readgsdword)
#pragma intrinsic(__readgsqword)
#pragma intrinsic(__writegsbyte)
#pragma intrinsic(__writegsword)
#pragma intrinsic(__writegsdword)
#pragma intrinsic(__writegsqword)
#line 4027
void __incgsbyte(DWORD Offset); 
#line 4032
void __addgsbyte(DWORD Offset, BYTE Value); 
#line 4038
void __incgsword(DWORD Offset); 
#line 4043
void __addgsword(DWORD Offset, WORD Value); 
#line 4049
void __incgsdword(DWORD Offset); 
#line 4054
void __addgsdword(DWORD Offset, DWORD Value); 
#line 4060
void __incgsqword(DWORD Offset); 
#line 4065
void __addgsqword(DWORD Offset, DWORD64 Value); 
#line 4089 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnt.h"
}
#line 4166 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnt.h"
typedef XSAVE_FORMAT XMM_SAVE_AREA32, *PXMM_SAVE_AREA32; 
#line 4203
__pragma( warning(push)) __pragma( warning(disable:4845)) __pragma( warning(pop)) 
#line 4320
typedef 
#line 4203
struct __declspec(align(16)) __declspec(no_init_all) _CONTEXT { 
#line 4212
DWORD64 P1Home; 
#line 4213
DWORD64 P2Home; 
#line 4214
DWORD64 P3Home; 
#line 4215
DWORD64 P4Home; 
#line 4216
DWORD64 P5Home; 
#line 4217
DWORD64 P6Home; 
#line 4223
DWORD ContextFlags; 
#line 4224
DWORD MxCsr; 
#line 4230
WORD SegCs; 
#line 4231
WORD SegDs; 
#line 4232
WORD SegEs; 
#line 4233
WORD SegFs; 
#line 4234
WORD SegGs; 
#line 4235
WORD SegSs; 
#line 4236
DWORD EFlags; 
#line 4242
DWORD64 Dr0; 
#line 4243
DWORD64 Dr1; 
#line 4244
DWORD64 Dr2; 
#line 4245
DWORD64 Dr3; 
#line 4246
DWORD64 Dr6; 
#line 4247
DWORD64 Dr7; 
#line 4253
DWORD64 Rax; 
#line 4254
DWORD64 Rcx; 
#line 4255
DWORD64 Rdx; 
#line 4256
DWORD64 Rbx; 
#line 4257
DWORD64 Rsp; 
#line 4258
DWORD64 Rbp; 
#line 4259
DWORD64 Rsi; 
#line 4260
DWORD64 Rdi; 
#line 4261
DWORD64 R8; 
#line 4262
DWORD64 R9; 
#line 4263
DWORD64 R10; 
#line 4264
DWORD64 R11; 
#line 4265
DWORD64 R12; 
#line 4266
DWORD64 R13; 
#line 4267
DWORD64 R14; 
#line 4268
DWORD64 R15; 
#line 4274
DWORD64 Rip; 
#line 4280
union { 
#line 4281
XMM_SAVE_AREA32 FltSave; 
#line 4282
struct { 
#line 4283
M128A Header[2]; 
#line 4284
M128A Legacy[8]; 
#line 4285
M128A Xmm0; 
#line 4286
M128A Xmm1; 
#line 4287
M128A Xmm2; 
#line 4288
M128A Xmm3; 
#line 4289
M128A Xmm4; 
#line 4290
M128A Xmm5; 
#line 4291
M128A Xmm6; 
#line 4292
M128A Xmm7; 
#line 4293
M128A Xmm8; 
#line 4294
M128A Xmm9; 
#line 4295
M128A Xmm10; 
#line 4296
M128A Xmm11; 
#line 4297
M128A Xmm12; 
#line 4298
M128A Xmm13; 
#line 4299
M128A Xmm14; 
#line 4300
M128A Xmm15; 
#line 4301
}; 
#line 4302
}; 
#line 4308
M128A VectorRegister[26]; 
#line 4309
DWORD64 VectorControl; 
#line 4315
DWORD64 DebugControl; 
#line 4316
DWORD64 LastBranchToRip; 
#line 4317
DWORD64 LastBranchFromRip; 
#line 4318
DWORD64 LastExceptionToRip; 
#line 4319
DWORD64 LastExceptionFromRip; 
#line 4320
} CONTEXT, *PCONTEXT; 
#line 4329
typedef struct _IMAGE_RUNTIME_FUNCTION_ENTRY RUNTIME_FUNCTION, *PRUNTIME_FUNCTION; 
#line 4330
typedef SCOPE_TABLE_AMD64 SCOPE_TABLE, *PSCOPE_TABLE; 
#line 4354
typedef PRUNTIME_FUNCTION GET_RUNTIME_FUNCTION_CALLBACK(DWORD64 ControlPc, PVOID Context); 
#line 4358
typedef GET_RUNTIME_FUNCTION_CALLBACK *PGET_RUNTIME_FUNCTION_CALLBACK; 
#line 4363
typedef DWORD OUT_OF_PROCESS_FUNCTION_TABLE_CALLBACK(HANDLE Process, PVOID TableAddress, PDWORD Entries, PRUNTIME_FUNCTION * Functions); 
#line 4369
typedef OUT_OF_PROCESS_FUNCTION_TABLE_CALLBACK *POUT_OF_PROCESS_FUNCTION_TABLE_CALLBACK; 
#line 4390
typedef 
#line 4378
struct _DISPATCHER_CONTEXT { 
#line 4379
DWORD64 ControlPc; 
#line 4380
DWORD64 ImageBase; 
#line 4381
PRUNTIME_FUNCTION FunctionEntry; 
#line 4382
DWORD64 EstablisherFrame; 
#line 4383
DWORD64 TargetIp; 
#line 4384
PCONTEXT ContextRecord; 
#line 4385
PEXCEPTION_ROUTINE LanguageHandler; 
#line 4386
PVOID HandlerData; 
#line 4387
struct _UNWIND_HISTORY_TABLE *HistoryTable; 
#line 4388
DWORD ScopeIndex; 
#line 4389
DWORD Fill0; 
#line 4390
} DISPATCHER_CONTEXT, *PDISPATCHER_CONTEXT; 
#line 4415 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnt.h"
struct _EXCEPTION_POINTERS; 
#line 4418
typedef LONG (*PEXCEPTION_FILTER)(_EXCEPTION_POINTERS * ExceptionPointers, PVOID EstablisherFrame); 
#line 4425
typedef void (*PTERMINATION_HANDLER)(BOOLEAN _abnormal_termination, PVOID EstablisherFrame); 
#line 4479
typedef 
#line 4434
struct _KNONVOLATILE_CONTEXT_POINTERS { 
#line 4435
union { 
#line 4436
PM128A FloatingContext[16]; 
#line 4437
struct { 
#line 4438
PM128A Xmm0; 
#line 4439
PM128A Xmm1; 
#line 4440
PM128A Xmm2; 
#line 4441
PM128A Xmm3; 
#line 4442
PM128A Xmm4; 
#line 4443
PM128A Xmm5; 
#line 4444
PM128A Xmm6; 
#line 4445
PM128A Xmm7; 
#line 4446
PM128A Xmm8; 
#line 4447
PM128A Xmm9; 
#line 4448
PM128A Xmm10; 
#line 4449
PM128A Xmm11; 
#line 4450
PM128A Xmm12; 
#line 4451
PM128A Xmm13; 
#line 4452
PM128A Xmm14; 
#line 4453
PM128A Xmm15; 
#line 4454
}; 
#line 4455
}; 
#line 4457
union { 
#line 4458
PDWORD64 IntegerContext[16]; 
#line 4459
struct { 
#line 4460
PDWORD64 Rax; 
#line 4461
PDWORD64 Rcx; 
#line 4462
PDWORD64 Rdx; 
#line 4463
PDWORD64 Rbx; 
#line 4464
PDWORD64 Rsp; 
#line 4465
PDWORD64 Rbp; 
#line 4466
PDWORD64 Rsi; 
#line 4467
PDWORD64 Rdi; 
#line 4468
PDWORD64 R8; 
#line 4469
PDWORD64 R9; 
#line 4470
PDWORD64 R10; 
#line 4471
PDWORD64 R11; 
#line 4472
PDWORD64 R12; 
#line 4473
PDWORD64 R13; 
#line 4474
PDWORD64 R14; 
#line 4475
PDWORD64 R15; 
#line 4476
}; 
#line 4477
}; 
#line 4479
} KNONVOLATILE_CONTEXT_POINTERS, *PKNONVOLATILE_CONTEXT_POINTERS; 
#line 4500 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnt.h"
typedef 
#line 4491
struct _SCOPE_TABLE_ARM { 
#line 4492
DWORD Count; 
#line 4494
struct { 
#line 4495
DWORD BeginAddress; 
#line 4496
DWORD EndAddress; 
#line 4497
DWORD HandlerAddress; 
#line 4498
DWORD JumpTarget; 
#line 4499
} ScopeRecord[1]; 
#line 4500
} SCOPE_TABLE_ARM, *PSCOPE_TABLE_ARM; 
#line 5351
typedef 
#line 5342
struct _SCOPE_TABLE_ARM64 { 
#line 5343
DWORD Count; 
#line 5345
struct { 
#line 5346
DWORD BeginAddress; 
#line 5347
DWORD EndAddress; 
#line 5348
DWORD HandlerAddress; 
#line 5349
DWORD JumpTarget; 
#line 5350
} ScopeRecord[1]; 
#line 5351
} SCOPE_TABLE_ARM64, *PSCOPE_TABLE_ARM64; 
#line 6498 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnt.h"
typedef 
#line 6489
union _ARM64_NT_NEON128 { 
#line 6490
struct { 
#line 6491
ULONGLONG Low; 
#line 6492
LONGLONG High; 
#line 6493
}; 
#line 6494
double D[2]; 
#line 6495
float S[4]; 
#line 6496
WORD H[8]; 
#line 6497
BYTE B[16]; 
#line 6498
} ARM64_NT_NEON128, *PARM64_NT_NEON128; 
#line 6518 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnt.h"
__pragma( warning(push)) __pragma( warning(disable:4845)) __pragma( warning(pop)) 
#line 6588
typedef 
#line 6518
struct __declspec(align(16)) __declspec(no_init_all) _ARM64_NT_CONTEXT { 
#line 6524
DWORD ContextFlags; 
#line 6530
DWORD Cpsr; 
#line 6531
union { 
#line 6532
struct { 
#line 6533
DWORD64 X0; 
#line 6534
DWORD64 X1; 
#line 6535
DWORD64 X2; 
#line 6536
DWORD64 X3; 
#line 6537
DWORD64 X4; 
#line 6538
DWORD64 X5; 
#line 6539
DWORD64 X6; 
#line 6540
DWORD64 X7; 
#line 6541
DWORD64 X8; 
#line 6542
DWORD64 X9; 
#line 6543
DWORD64 X10; 
#line 6544
DWORD64 X11; 
#line 6545
DWORD64 X12; 
#line 6546
DWORD64 X13; 
#line 6547
DWORD64 X14; 
#line 6548
DWORD64 X15; 
#line 6549
DWORD64 X16; 
#line 6550
DWORD64 X17; 
#line 6551
DWORD64 X18; 
#line 6552
DWORD64 X19; 
#line 6553
DWORD64 X20; 
#line 6554
DWORD64 X21; 
#line 6555
DWORD64 X22; 
#line 6556
DWORD64 X23; 
#line 6557
DWORD64 X24; 
#line 6558
DWORD64 X25; 
#line 6559
DWORD64 X26; 
#line 6560
DWORD64 X27; 
#line 6561
DWORD64 X28; 
#line 6562
DWORD64 Fp; 
#line 6563
DWORD64 Lr; 
#line 6564
}; 
#line 6565
DWORD64 X[31]; 
#line 6566
}; 
#line 6567
DWORD64 Sp; 
#line 6568
DWORD64 Pc; 
#line 6574
ARM64_NT_NEON128 V[32]; 
#line 6575
DWORD Fpcr; 
#line 6576
DWORD Fpsr; 
#line 6582
DWORD Bcr[8]; 
#line 6583
DWORD64 Bvr[8]; 
#line 6584
DWORD Wcr[2]; 
#line 6585
DWORD64 Wvr[2]; 
#line 6588
} ARM64_NT_CONTEXT, *PARM64_NT_CONTEXT; 
#line 6602 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnt.h"
__pragma( warning(push)) __pragma( warning(disable:4845)) __pragma( warning(pop)) 
#line 6765 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnt.h"
typedef 
#line 6602 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnt.h"
struct __declspec(align(16)) __declspec(no_init_all) _ARM64EC_NT_CONTEXT { 
#line 6603
union { 
#line 6604
struct { 
#line 6610
DWORD64 AMD64_P1Home; 
#line 6611
DWORD64 AMD64_P2Home; 
#line 6612
DWORD64 AMD64_P3Home; 
#line 6613
DWORD64 AMD64_P4Home; 
#line 6614
DWORD64 AMD64_P5Home; 
#line 6615
DWORD64 AMD64_P6Home; 
#line 6621
DWORD ContextFlags; 
#line 6623
DWORD AMD64_MxCsr_copy; 
#line 6630
WORD AMD64_SegCs; 
#line 6631
WORD AMD64_SegDs; 
#line 6632
WORD AMD64_SegEs; 
#line 6633
WORD AMD64_SegFs; 
#line 6634
WORD AMD64_SegGs; 
#line 6635
WORD AMD64_SegSs; 
#line 6641
DWORD AMD64_EFlags; 
#line 6647
DWORD64 AMD64_Dr0; 
#line 6648
DWORD64 AMD64_Dr1; 
#line 6649
DWORD64 AMD64_Dr2; 
#line 6650
DWORD64 AMD64_Dr3; 
#line 6651
DWORD64 AMD64_Dr6; 
#line 6652
DWORD64 AMD64_Dr7; 
#line 6658
DWORD64 X8; 
#line 6659
DWORD64 X0; 
#line 6660
DWORD64 X1; 
#line 6661
DWORD64 X27; 
#line 6662
DWORD64 Sp; 
#line 6663
DWORD64 Fp; 
#line 6664
DWORD64 X25; 
#line 6665
DWORD64 X26; 
#line 6666
DWORD64 X2; 
#line 6667
DWORD64 X3; 
#line 6668
DWORD64 X4; 
#line 6669
DWORD64 X5; 
#line 6670
DWORD64 X19; 
#line 6671
DWORD64 X20; 
#line 6672
DWORD64 X21; 
#line 6673
DWORD64 X22; 
#line 6679
DWORD64 Pc; 
#line 6685
struct { 
#line 6686
WORD AMD64_ControlWord; 
#line 6687
WORD AMD64_StatusWord; 
#line 6688
BYTE AMD64_TagWord; 
#line 6689
BYTE AMD64_Reserved1; 
#line 6690
WORD AMD64_ErrorOpcode; 
#line 6691
DWORD AMD64_ErrorOffset; 
#line 6692
WORD AMD64_ErrorSelector; 
#line 6693
WORD AMD64_Reserved2; 
#line 6694
DWORD AMD64_DataOffset; 
#line 6695
WORD AMD64_DataSelector; 
#line 6696
WORD AMD64_Reserved3; 
#line 6698
DWORD AMD64_MxCsr; 
#line 6699
DWORD AMD64_MxCsr_Mask; 
#line 6701
DWORD64 Lr; 
#line 6702
WORD X16_0; 
#line 6703
WORD AMD64_St0_Reserved1; 
#line 6704
DWORD AMD64_St0_Reserved2; 
#line 6705
DWORD64 X6; 
#line 6706
WORD X16_1; 
#line 6707
WORD AMD64_St1_Reserved1; 
#line 6708
DWORD AMD64_St1_Reserved2; 
#line 6709
DWORD64 X7; 
#line 6710
WORD X16_2; 
#line 6711
WORD AMD64_St2_Reserved1; 
#line 6712
DWORD AMD64_St2_Reserved2; 
#line 6713
DWORD64 X9; 
#line 6714
WORD X16_3; 
#line 6715
WORD AMD64_St3_Reserved1; 
#line 6716
DWORD AMD64_St3_Reserved2; 
#line 6717
DWORD64 X10; 
#line 6718
WORD X17_0; 
#line 6719
WORD AMD64_St4_Reserved1; 
#line 6720
DWORD AMD64_St4_Reserved2; 
#line 6721
DWORD64 X11; 
#line 6722
WORD X17_1; 
#line 6723
WORD AMD64_St5_Reserved1; 
#line 6724
DWORD AMD64_St5_Reserved2; 
#line 6725
DWORD64 X12; 
#line 6726
WORD X17_2; 
#line 6727
WORD AMD64_St6_Reserved1; 
#line 6728
DWORD AMD64_St6_Reserved2; 
#line 6729
DWORD64 X15; 
#line 6730
WORD X17_3; 
#line 6731
WORD AMD64_St7_Reserved1; 
#line 6732
DWORD AMD64_St7_Reserved2; 
#line 6734
ARM64_NT_NEON128 V[16]; 
#line 6735
BYTE AMD64_XSAVE_FORMAT_Reserved4[96]; 
#line 6736
}; 
#line 6742
ARM64_NT_NEON128 AMD64_VectorRegister[26]; 
#line 6743
DWORD64 AMD64_VectorControl; 
#line 6749
DWORD64 AMD64_DebugControl; 
#line 6750
DWORD64 AMD64_LastBranchToRip; 
#line 6751
DWORD64 AMD64_LastBranchFromRip; 
#line 6752
DWORD64 AMD64_LastExceptionToRip; 
#line 6753
DWORD64 AMD64_LastExceptionFromRip; 
#line 6756
}; 
#line 6764 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnt.h"
}; 
#line 6765
} ARM64EC_NT_CONTEXT, *PARM64EC_NT_CONTEXT; 
#line 6788 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnt.h"
typedef struct _IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY ARM64_RUNTIME_FUNCTION, *PARM64_RUNTIME_FUNCTION; 
#line 6829 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnt.h"
typedef 
#line 6822
union _DISPATCHER_CONTEXT_NONVOLREG_ARM64 { 
#line 6823
BYTE Buffer[((11) * sizeof(DWORD64)) + ((8) * sizeof(double))]; 
#line 6825
struct { 
#line 6826
DWORD64 GpNvRegs[11]; 
#line 6827
double FpNvRegs[8]; 
#line 6828
}; 
#line 6829
} DISPATCHER_CONTEXT_NONVOLREG_ARM64; 
#line 6833
typedef char __C_ASSERT__[(sizeof(DISPATCHER_CONTEXT_NONVOLREG_ARM64) == (((11) * sizeof(DWORD64)) + ((8) * sizeof(double)))) ? 1 : (-1)]; 
#line 6850 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnt.h"
typedef 
#line 6837
struct _DISPATCHER_CONTEXT_ARM64 { 
#line 6838
ULONG_PTR ControlPc; 
#line 6839
ULONG_PTR ImageBase; 
#line 6840
PARM64_RUNTIME_FUNCTION FunctionEntry; 
#line 6841
ULONG_PTR EstablisherFrame; 
#line 6842
ULONG_PTR TargetPc; 
#line 6843
PARM64_NT_CONTEXT ContextRecord; 
#line 6844
PEXCEPTION_ROUTINE LanguageHandler; 
#line 6845
PVOID HandlerData; 
#line 6846
_UNWIND_HISTORY_TABLE *HistoryTable; 
#line 6847
DWORD ScopeIndex; 
#line 6848
BOOLEAN ControlPcIsUnwound; 
#line 6849
PBYTE NonVolatileRegisters; 
#line 6850
} DISPATCHER_CONTEXT_ARM64, *PDISPATCHER_CONTEXT_ARM64; 
#line 6945 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnt.h"
typedef 
#line 6921
struct _KNONVOLATILE_CONTEXT_POINTERS_ARM64 { 
#line 6923
PDWORD64 X19; 
#line 6924
PDWORD64 X20; 
#line 6925
PDWORD64 X21; 
#line 6926
PDWORD64 X22; 
#line 6927
PDWORD64 X23; 
#line 6928
PDWORD64 X24; 
#line 6929
PDWORD64 X25; 
#line 6930
PDWORD64 X26; 
#line 6931
PDWORD64 X27; 
#line 6932
PDWORD64 X28; 
#line 6933
PDWORD64 Fp; 
#line 6934
PDWORD64 Lr; 
#line 6936
PDWORD64 D8; 
#line 6937
PDWORD64 D9; 
#line 6938
PDWORD64 D10; 
#line 6939
PDWORD64 D11; 
#line 6940
PDWORD64 D12; 
#line 6941
PDWORD64 D13; 
#line 6942
PDWORD64 D14; 
#line 6943
PDWORD64 D15; 
#line 6945
} KNONVOLATILE_CONTEXT_POINTERS_ARM64, *PKNONVOLATILE_CONTEXT_POINTERS_ARM64; 
#line 6957 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnt.h"
extern "C" {
#line 6984 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnt.h"
void __int2c(); 
#line 7117 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnt.h"
}
#line 6988 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnt.h"
#pragma intrinsic(__int2c)
#line 8319 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnt.h"
typedef 
#line 8296
struct _LDT_ENTRY { 
#line 8297
WORD LimitLow; 
#line 8298
WORD BaseLow; 
#line 8299
union { 
#line 8300
struct { 
#line 8301
BYTE BaseMid; 
#line 8302
BYTE Flags1; 
#line 8303
BYTE Flags2; 
#line 8304
BYTE BaseHi; 
#line 8305
} Bytes; 
#line 8306
struct { 
#line 8307
DWORD BaseMid:8; 
#line 8308
DWORD Type:5; 
#line 8309
DWORD Dpl:2; 
#line 8310
DWORD Pres:1; 
#line 8311
DWORD LimitHi:4; 
#line 8312
DWORD Sys:1; 
#line 8313
DWORD Reserved_0:1; 
#line 8314
DWORD Default_Big:1; 
#line 8315
DWORD Granularity:1; 
#line 8316
DWORD BaseHi:8; 
#line 8317
} Bits; 
#line 8318
} HighWord; 
#line 8319
} LDT_ENTRY, *PLDT_ENTRY; 
#line 8339 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnt.h"
extern "C" {
#line 8344 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnt.h"
__forceinline CHAR ReadAcquire8(const volatile CHAR *
#line 8345
Source) 
#line 8348
{ 
#line 8350
CHAR Value; 
#line 8352
Value = (*Source); 
#line 8353
return Value; 
#line 8354
} 
#line 8358
__forceinline CHAR ReadNoFence8(const volatile CHAR *
#line 8359
Source) 
#line 8362
{ 
#line 8364
CHAR Value; 
#line 8366
Value = (*Source); 
#line 8367
return Value; 
#line 8368
} 
#line 8372
__forceinline void WriteRelease8(volatile CHAR *
#line 8373
Destination, CHAR 
#line 8374
Value) 
#line 8377
{ 
#line 8379
(*Destination) = Value; 
#line 8381
} 
#line 8385
__forceinline void WriteNoFence8(volatile CHAR *
#line 8386
Destination, CHAR 
#line 8387
Value) 
#line 8390
{ 
#line 8392
(*Destination) = Value; 
#line 8394
} 
#line 8398
__forceinline SHORT ReadAcquire16(const volatile SHORT *
#line 8399
Source) 
#line 8402
{ 
#line 8404
SHORT Value; 
#line 8406
Value = (*Source); 
#line 8407
return Value; 
#line 8408
} 
#line 8412
__forceinline SHORT ReadNoFence16(const volatile SHORT *
#line 8413
Source) 
#line 8416
{ 
#line 8418
SHORT Value; 
#line 8420
Value = (*Source); 
#line 8421
return Value; 
#line 8422
} 
#line 8426
__forceinline void WriteRelease16(volatile SHORT *
#line 8427
Destination, SHORT 
#line 8428
Value) 
#line 8431
{ 
#line 8433
(*Destination) = Value; 
#line 8435
} 
#line 8439
__forceinline void WriteNoFence16(volatile SHORT *
#line 8440
Destination, SHORT 
#line 8441
Value) 
#line 8444
{ 
#line 8446
(*Destination) = Value; 
#line 8448
} 
#line 8452
__forceinline LONG ReadAcquire(const volatile LONG *
#line 8453
Source) 
#line 8456
{ 
#line 8458
LONG Value; 
#line 8460
Value = (*Source); 
#line 8461
return Value; 
#line 8462
} 
#line 8466
__forceinline LONG ReadNoFence(const volatile LONG *
#line 8467
Source) 
#line 8470
{ 
#line 8472
LONG Value; 
#line 8474
Value = (*Source); 
#line 8475
return Value; 
#line 8476
} 
#line 8480
__forceinline void WriteRelease(volatile LONG *
#line 8481
Destination, LONG 
#line 8482
Value) 
#line 8485
{ 
#line 8487
(*Destination) = Value; 
#line 8489
} 
#line 8493
__forceinline void WriteNoFence(volatile LONG *
#line 8494
Destination, LONG 
#line 8495
Value) 
#line 8498
{ 
#line 8500
(*Destination) = Value; 
#line 8502
} 
#line 8506
__forceinline LONG64 ReadAcquire64(const volatile LONG64 *
#line 8507
Source) 
#line 8510
{ 
#line 8512
LONG64 Value; 
#line 8514
Value = (*Source); 
#line 8515
return Value; 
#line 8516
} 
#line 8520
__forceinline LONG64 ReadNoFence64(const volatile LONG64 *
#line 8521
Source) 
#line 8524
{ 
#line 8526
LONG64 Value; 
#line 8528
Value = (*Source); 
#line 8529
return Value; 
#line 8530
} 
#line 8534
__forceinline void WriteRelease64(volatile LONG64 *
#line 8535
Destination, LONG64 
#line 8536
Value) 
#line 8539
{ 
#line 8541
(*Destination) = Value; 
#line 8543
} 
#line 8547
__forceinline void WriteNoFence64(volatile LONG64 *
#line 8548
Destination, LONG64 
#line 8549
Value) 
#line 8552
{ 
#line 8554
(*Destination) = Value; 
#line 8556
} 
#line 8559
}
#line 8570 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnt.h"
__forceinline CHAR ReadRaw8(const volatile CHAR *
#line 8571
Source) 
#line 8574
{ 
#line 8576
CHAR Value; 
#line 8578
Value = (*((CHAR *)Source)); 
#line 8579
return Value; 
#line 8580
} 
#line 8584
__forceinline void WriteRaw8(volatile CHAR *
#line 8585
Destination, CHAR 
#line 8586
Value) 
#line 8589
{ 
#line 8591
(*((CHAR *)Destination)) = Value; 
#line 8593
} 
#line 8597
__forceinline SHORT ReadRaw16(const volatile SHORT *
#line 8598
Source) 
#line 8601
{ 
#line 8603
SHORT Value; 
#line 8605
Value = (*((SHORT *)Source)); 
#line 8606
return Value; 
#line 8607
} 
#line 8611
__forceinline void WriteRaw16(volatile SHORT *
#line 8612
Destination, SHORT 
#line 8613
Value) 
#line 8616
{ 
#line 8618
(*((SHORT *)Destination)) = Value; 
#line 8620
} 
#line 8624
__forceinline LONG ReadRaw(const volatile LONG *
#line 8625
Source) 
#line 8628
{ 
#line 8630
LONG Value; 
#line 8632
Value = (*((LONG *)Source)); 
#line 8633
return Value; 
#line 8634
} 
#line 8638
__forceinline void WriteRaw(volatile LONG *
#line 8639
Destination, LONG 
#line 8640
Value) 
#line 8643
{ 
#line 8645
(*((LONG *)Destination)) = Value; 
#line 8647
} 
#line 8651
__forceinline LONG64 ReadRaw64(const volatile LONG64 *
#line 8652
Source) 
#line 8655
{ 
#line 8657
LONG64 Value; 
#line 8659
Value = (*((LONG64 *)Source)); 
#line 8660
return Value; 
#line 8661
} 
#line 8665
__forceinline void WriteRaw64(volatile LONG64 *
#line 8666
Destination, LONG64 
#line 8667
Value) 
#line 8670
{ 
#line 8672
(*((LONG64 *)Destination)) = Value; 
#line 8674
} 
#line 8682
__forceinline BYTE ReadUCharAcquire(const volatile BYTE *
#line 8683
Source) 
#line 8686
{ 
#line 8688
return (BYTE)ReadAcquire8((PCHAR)Source); 
#line 8689
} 
#line 8693
__forceinline BYTE ReadUCharNoFence(const volatile BYTE *
#line 8694
Source) 
#line 8697
{ 
#line 8699
return (BYTE)ReadNoFence8((PCHAR)Source); 
#line 8700
} 
#line 8704
__forceinline BYTE ReadBooleanAcquire(const volatile BOOLEAN *
#line 8705
Source) 
#line 8708
{ 
#line 8710
return (BOOLEAN)ReadAcquire8((PCHAR)Source); 
#line 8711
} 
#line 8715
__forceinline BYTE ReadBooleanNoFence(const volatile BOOLEAN *
#line 8716
Source) 
#line 8719
{ 
#line 8721
return (BOOLEAN)ReadNoFence8((PCHAR)Source); 
#line 8722
} 
#line 8726
__forceinline BYTE ReadUCharRaw(const volatile BYTE *
#line 8727
Source) 
#line 8730
{ 
#line 8732
return (BYTE)ReadRaw8((PCHAR)Source); 
#line 8733
} 
#line 8737
__forceinline void WriteUCharRelease(volatile BYTE *
#line 8738
Destination, BYTE 
#line 8739
Value) 
#line 8742
{ 
#line 8744
WriteRelease8((PCHAR)Destination, (CHAR)Value); 
#line 8746
} 
#line 8750
__forceinline void WriteUCharNoFence(volatile BYTE *
#line 8751
Destination, BYTE 
#line 8752
Value) 
#line 8755
{ 
#line 8757
WriteNoFence8((PCHAR)Destination, (CHAR)Value); 
#line 8759
} 
#line 8763
__forceinline void WriteBooleanRelease(volatile BOOLEAN *
#line 8764
Destination, BOOLEAN 
#line 8765
Value) 
#line 8768
{ 
#line 8770
WriteRelease8((PCHAR)Destination, (CHAR)Value); 
#line 8772
} 
#line 8776
__forceinline void WriteBooleanNoFence(volatile BOOLEAN *
#line 8777
Destination, BOOLEAN 
#line 8778
Value) 
#line 8781
{ 
#line 8783
WriteNoFence8((PCHAR)Destination, (CHAR)Value); 
#line 8785
} 
#line 8789
__forceinline void WriteUCharRaw(volatile BYTE *
#line 8790
Destination, BYTE 
#line 8791
Value) 
#line 8794
{ 
#line 8796
WriteRaw8((PCHAR)Destination, (CHAR)Value); 
#line 8798
} 
#line 8802
__forceinline WORD ReadUShortAcquire(const volatile WORD *
#line 8803
Source) 
#line 8806
{ 
#line 8808
return (WORD)ReadAcquire16((PSHORT)Source); 
#line 8809
} 
#line 8813
__forceinline WORD ReadUShortNoFence(const volatile WORD *
#line 8814
Source) 
#line 8817
{ 
#line 8819
return (WORD)ReadNoFence16((PSHORT)Source); 
#line 8820
} 
#line 8824
__forceinline WORD ReadUShortRaw(const volatile WORD *
#line 8825
Source) 
#line 8828
{ 
#line 8830
return (WORD)ReadRaw16((PSHORT)Source); 
#line 8831
} 
#line 8835
__forceinline void WriteUShortRelease(volatile WORD *
#line 8836
Destination, WORD 
#line 8837
Value) 
#line 8840
{ 
#line 8842
WriteRelease16((PSHORT)Destination, (SHORT)Value); 
#line 8844
} 
#line 8848
__forceinline void WriteUShortNoFence(volatile WORD *
#line 8849
Destination, WORD 
#line 8850
Value) 
#line 8853
{ 
#line 8855
WriteNoFence16((PSHORT)Destination, (SHORT)Value); 
#line 8857
} 
#line 8861
__forceinline void WriteUShortRaw(volatile WORD *
#line 8862
Destination, WORD 
#line 8863
Value) 
#line 8866
{ 
#line 8868
WriteRaw16((PSHORT)Destination, (SHORT)Value); 
#line 8870
} 
#line 8874
__forceinline DWORD ReadULongAcquire(const volatile DWORD *
#line 8875
Source) 
#line 8878
{ 
#line 8880
return (DWORD)ReadAcquire((PLONG)Source); 
#line 8881
} 
#line 8885
__forceinline DWORD ReadULongNoFence(const volatile DWORD *
#line 8886
Source) 
#line 8889
{ 
#line 8891
return (DWORD)ReadNoFence((PLONG)Source); 
#line 8892
} 
#line 8896
__forceinline DWORD ReadULongRaw(const volatile DWORD *
#line 8897
Source) 
#line 8900
{ 
#line 8902
return (DWORD)ReadRaw((PLONG)Source); 
#line 8903
} 
#line 8907
__forceinline void WriteULongRelease(volatile DWORD *
#line 8908
Destination, DWORD 
#line 8909
Value) 
#line 8912
{ 
#line 8914
WriteRelease((PLONG)Destination, (LONG)Value); 
#line 8916
} 
#line 8920
__forceinline void WriteULongNoFence(volatile DWORD *
#line 8921
Destination, DWORD 
#line 8922
Value) 
#line 8925
{ 
#line 8927
WriteNoFence((PLONG)Destination, (LONG)Value); 
#line 8929
} 
#line 8933
__forceinline void WriteULongRaw(volatile DWORD *
#line 8934
Destination, DWORD 
#line 8935
Value) 
#line 8938
{ 
#line 8940
WriteRaw((PLONG)Destination, (LONG)Value); 
#line 8942
} 
#line 8946
__forceinline INT32 ReadInt32Acquire(const volatile INT32 *
#line 8947
Source) 
#line 8950
{ 
#line 8952
return (INT32)ReadAcquire((PLONG)Source); 
#line 8953
} 
#line 8957
__forceinline INT32 ReadInt32NoFence(const volatile INT32 *
#line 8958
Source) 
#line 8961
{ 
#line 8963
return (INT32)ReadNoFence((PLONG)Source); 
#line 8964
} 
#line 8968
__forceinline INT32 ReadInt32Raw(const volatile INT32 *
#line 8969
Source) 
#line 8972
{ 
#line 8974
return (INT32)ReadRaw((PLONG)Source); 
#line 8975
} 
#line 8979
__forceinline void WriteInt32Release(volatile INT32 *
#line 8980
Destination, INT32 
#line 8981
Value) 
#line 8984
{ 
#line 8986
WriteRelease((PLONG)Destination, (LONG)Value); 
#line 8988
} 
#line 8992
__forceinline void WriteInt32NoFence(volatile INT32 *
#line 8993
Destination, INT32 
#line 8994
Value) 
#line 8997
{ 
#line 8999
WriteNoFence((PLONG)Destination, (LONG)Value); 
#line 9001
} 
#line 9005
__forceinline void WriteInt32Raw(volatile INT32 *
#line 9006
Destination, INT32 
#line 9007
Value) 
#line 9010
{ 
#line 9012
WriteRaw((PLONG)Destination, (LONG)Value); 
#line 9014
} 
#line 9018
__forceinline UINT32 ReadUInt32Acquire(const volatile UINT32 *
#line 9019
Source) 
#line 9022
{ 
#line 9024
return (UINT32)ReadAcquire((PLONG)Source); 
#line 9025
} 
#line 9029
__forceinline UINT32 ReadUInt32NoFence(const volatile UINT32 *
#line 9030
Source) 
#line 9033
{ 
#line 9035
return (UINT32)ReadNoFence((PLONG)Source); 
#line 9036
} 
#line 9040
__forceinline UINT32 ReadUInt32Raw(const volatile UINT32 *
#line 9041
Source) 
#line 9044
{ 
#line 9046
return (UINT32)ReadRaw((PLONG)Source); 
#line 9047
} 
#line 9051
__forceinline void WriteUInt32Release(volatile UINT32 *
#line 9052
Destination, UINT32 
#line 9053
Value) 
#line 9056
{ 
#line 9058
WriteRelease((PLONG)Destination, (LONG)Value); 
#line 9060
} 
#line 9064
__forceinline void WriteUInt32NoFence(volatile UINT32 *
#line 9065
Destination, UINT32 
#line 9066
Value) 
#line 9069
{ 
#line 9071
WriteNoFence((PLONG)Destination, (LONG)Value); 
#line 9073
} 
#line 9077
__forceinline void WriteUInt32Raw(volatile UINT32 *
#line 9078
Destination, UINT32 
#line 9079
Value) 
#line 9082
{ 
#line 9084
WriteRaw((PLONG)Destination, (LONG)Value); 
#line 9086
} 
#line 9090
__forceinline DWORD64 ReadULong64Acquire(const volatile DWORD64 *
#line 9091
Source) 
#line 9094
{ 
#line 9096
return (DWORD64)ReadAcquire64((PLONG64)Source); 
#line 9097
} 
#line 9101
__forceinline DWORD64 ReadULong64NoFence(const volatile DWORD64 *
#line 9102
Source) 
#line 9105
{ 
#line 9107
return (DWORD64)ReadNoFence64((PLONG64)Source); 
#line 9108
} 
#line 9112
__forceinline DWORD64 ReadULong64Raw(const volatile DWORD64 *
#line 9113
Source) 
#line 9116
{ 
#line 9118
return (DWORD64)ReadRaw64((PLONG64)Source); 
#line 9119
} 
#line 9123
__forceinline void WriteULong64Release(volatile DWORD64 *
#line 9124
Destination, DWORD64 
#line 9125
Value) 
#line 9128
{ 
#line 9130
WriteRelease64((PLONG64)Destination, (LONG64)Value); 
#line 9132
} 
#line 9136
__forceinline void WriteULong64NoFence(volatile DWORD64 *
#line 9137
Destination, DWORD64 
#line 9138
Value) 
#line 9141
{ 
#line 9143
WriteNoFence64((PLONG64)Destination, (LONG64)Value); 
#line 9145
} 
#line 9149
__forceinline void WriteULong64Raw(volatile DWORD64 *
#line 9150
Destination, DWORD64 
#line 9151
Value) 
#line 9154
{ 
#line 9156
WriteRaw64((PLONG64)Destination, (LONG64)Value); 
#line 9158
} 
#line 9274 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnt.h"
__forceinline PVOID ReadPointerAcquire(const volatile PVOID *
#line 9275
Source) 
#line 9278
{ 
#line 9280
return (PVOID)ReadAcquire64((PLONG64)Source); 
#line 9281
} 
#line 9285
__forceinline PVOID ReadPointerNoFence(const volatile PVOID *
#line 9286
Source) 
#line 9289
{ 
#line 9291
return (PVOID)ReadNoFence64((PLONG64)Source); 
#line 9292
} 
#line 9296
__forceinline PVOID ReadPointerRaw(const volatile PVOID *
#line 9297
Source) 
#line 9300
{ 
#line 9302
return (PVOID)ReadRaw64((PLONG64)Source); 
#line 9303
} 
#line 9307
__forceinline void WritePointerRelease(volatile PVOID *
#line 9308
Destination, PVOID 
#line 9309
Value) 
#line 9312
{ 
#line 9314
WriteRelease64((PLONG64)Destination, (LONG64)Value); 
#line 9316
} 
#line 9320
__forceinline void WritePointerNoFence(volatile PVOID *
#line 9321
Destination, PVOID 
#line 9322
Value) 
#line 9325
{ 
#line 9327
WriteNoFence64((PLONG64)Destination, (LONG64)Value); 
#line 9329
} 
#line 9333
__forceinline void WritePointerRaw(volatile PVOID *
#line 9334
Destination, PVOID 
#line 9335
Value) 
#line 9338
{ 
#line 9340
WriteRaw64((PLONG64)Destination, (LONG64)Value); 
#line 9342
} 
#line 9376 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnt.h"
#pragma warning(push)
#pragma warning(disable:4214)
#pragma warning(disable:4668)
#pragma warning(disable:4820)
#line 9427 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnt.h"
typedef 
#line 9417
struct _WOW64_FLOATING_SAVE_AREA { 
#line 9418
DWORD ControlWord; 
#line 9419
DWORD StatusWord; 
#line 9420
DWORD TagWord; 
#line 9421
DWORD ErrorOffset; 
#line 9422
DWORD ErrorSelector; 
#line 9423
DWORD DataOffset; 
#line 9424
DWORD DataSelector; 
#line 9425
BYTE RegisterArea[80]; 
#line 9426
DWORD Cr0NpxState; 
#line 9427
} WOW64_FLOATING_SAVE_AREA; 
#line 9429
typedef WOW64_FLOATING_SAVE_AREA *PWOW64_FLOATING_SAVE_AREA; 
#line 24 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\shared\\pshpack4.h"
#pragma warning(disable:4103)
#line 26
#pragma pack ( push, 4 )
#line 9527 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnt.h"
typedef 
#line 9443
struct _WOW64_CONTEXT { 
#line 9463
DWORD ContextFlags; 
#line 9471
DWORD Dr0; 
#line 9472
DWORD Dr1; 
#line 9473
DWORD Dr2; 
#line 9474
DWORD Dr3; 
#line 9475
DWORD Dr6; 
#line 9476
DWORD Dr7; 
#line 9483
WOW64_FLOATING_SAVE_AREA FloatSave; 
#line 9490
DWORD SegGs; 
#line 9491
DWORD SegFs; 
#line 9492
DWORD SegEs; 
#line 9493
DWORD SegDs; 
#line 9500
DWORD Edi; 
#line 9501
DWORD Esi; 
#line 9502
DWORD Ebx; 
#line 9503
DWORD Edx; 
#line 9504
DWORD Ecx; 
#line 9505
DWORD Eax; 
#line 9512
DWORD Ebp; 
#line 9513
DWORD Eip; 
#line 9514
DWORD SegCs; 
#line 9515
DWORD EFlags; 
#line 9516
DWORD Esp; 
#line 9517
DWORD SegSs; 
#line 9525
BYTE ExtendedRegisters[512]; 
#line 9527
} WOW64_CONTEXT; 
#line 9529
typedef WOW64_CONTEXT *PWOW64_CONTEXT; 
#line 27 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\shared\\poppack.h"
#pragma warning(disable:4103)
#line 29
#pragma pack ( pop )
#line 9557 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnt.h"
typedef 
#line 9534
struct _WOW64_LDT_ENTRY { 
#line 9535
WORD LimitLow; 
#line 9536
WORD BaseLow; 
#line 9537
union { 
#line 9538
struct { 
#line 9539
BYTE BaseMid; 
#line 9540
BYTE Flags1; 
#line 9541
BYTE Flags2; 
#line 9542
BYTE BaseHi; 
#line 9543
} Bytes; 
#line 9544
struct { 
#line 9545
DWORD BaseMid:8; 
#line 9546
DWORD Type:5; 
#line 9547
DWORD Dpl:2; 
#line 9548
DWORD Pres:1; 
#line 9549
DWORD LimitHi:4; 
#line 9550
DWORD Sys:1; 
#line 9551
DWORD Reserved_0:1; 
#line 9552
DWORD Default_Big:1; 
#line 9553
DWORD Granularity:1; 
#line 9554
DWORD BaseHi:8; 
#line 9555
} Bits; 
#line 9556
} HighWord; 
#line 9557
} WOW64_LDT_ENTRY, *PWOW64_LDT_ENTRY; 
#line 9562
typedef 
#line 9559
struct _WOW64_DESCRIPTOR_TABLE_ENTRY { 
#line 9560
DWORD Selector; 
#line 9561
WOW64_LDT_ENTRY Descriptor; 
#line 9562
} WOW64_DESCRIPTOR_TABLE_ENTRY, *PWOW64_DESCRIPTOR_TABLE_ENTRY; 
#line 9565
#pragma warning(pop)
#line 9597 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnt.h"
typedef 
#line 9590
struct _EXCEPTION_RECORD { 
#line 9591
DWORD ExceptionCode; 
#line 9592
DWORD ExceptionFlags; 
#line 9593
_EXCEPTION_RECORD *ExceptionRecord; 
#line 9594
PVOID ExceptionAddress; 
#line 9595
DWORD NumberParameters; 
#line 9596
ULONG_PTR ExceptionInformation[15]; 
#line 9597
} EXCEPTION_RECORD; 
#line 9599
typedef EXCEPTION_RECORD *PEXCEPTION_RECORD; 
#line 9608
typedef 
#line 9601
struct _EXCEPTION_RECORD32 { 
#line 9602
DWORD ExceptionCode; 
#line 9603
DWORD ExceptionFlags; 
#line 9604
DWORD ExceptionRecord; 
#line 9605
DWORD ExceptionAddress; 
#line 9606
DWORD NumberParameters; 
#line 9607
DWORD ExceptionInformation[15]; 
#line 9608
} EXCEPTION_RECORD32, *PEXCEPTION_RECORD32; 
#line 9618
typedef 
#line 9610
struct _EXCEPTION_RECORD64 { 
#line 9611
DWORD ExceptionCode; 
#line 9612
DWORD ExceptionFlags; 
#line 9613
DWORD64 ExceptionRecord; 
#line 9614
DWORD64 ExceptionAddress; 
#line 9615
DWORD NumberParameters; 
#line 9616
DWORD __unusedAlignment; 
#line 9617
DWORD64 ExceptionInformation[15]; 
#line 9618
} EXCEPTION_RECORD64, *PEXCEPTION_RECORD64; 
#line 9627
typedef 
#line 9624
struct _EXCEPTION_POINTERS { 
#line 9625
PEXCEPTION_RECORD ExceptionRecord; 
#line 9626
PCONTEXT ContextRecord; 
#line 9627
} EXCEPTION_POINTERS, *PEXCEPTION_POINTERS; 
#line 9648 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnt.h"
typedef PVOID PACCESS_TOKEN; 
#line 9649
typedef PVOID PSECURITY_DESCRIPTOR; 
#line 9650
typedef PVOID PSID; 
#line 9651
typedef PVOID PCLAIMS_BLOB; 
#line 9692
typedef DWORD ACCESS_MASK; 
#line 9693
typedef ACCESS_MASK *PACCESS_MASK; 
#line 9756
typedef 
#line 9751
struct _GENERIC_MAPPING { 
#line 9752
ACCESS_MASK GenericRead; 
#line 9753
ACCESS_MASK GenericWrite; 
#line 9754
ACCESS_MASK GenericExecute; 
#line 9755
ACCESS_MASK GenericAll; 
#line 9756
} GENERIC_MAPPING; 
#line 9757
typedef GENERIC_MAPPING *PGENERIC_MAPPING; 
#line 24 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\shared\\pshpack4.h"
#pragma warning(disable:4103)
#line 26
#pragma pack ( push, 4 )
#line 9775 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnt.h"
typedef 
#line 9772
struct _LUID_AND_ATTRIBUTES { 
#line 9773
LUID Luid; 
#line 9774
DWORD Attributes; 
#line 9775
} LUID_AND_ATTRIBUTES, *PLUID_AND_ATTRIBUTES; 
#line 9776
typedef LUID_AND_ATTRIBUTES LUID_AND_ATTRIBUTES_ARRAY[1]; 
#line 9777
typedef LUID_AND_ATTRIBUTES_ARRAY *PLUID_AND_ATTRIBUTES_ARRAY; 
#line 27 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\shared\\poppack.h"
#pragma warning(disable:4103)
#line 29
#pragma pack ( pop )
#line 9816 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnt.h"
typedef 
#line 9814
struct _SID_IDENTIFIER_AUTHORITY { 
#line 9815
BYTE Value[6]; 
#line 9816
} SID_IDENTIFIER_AUTHORITY, *PSID_IDENTIFIER_AUTHORITY; 
#line 9831 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnt.h"
typedef 
#line 9822 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnt.h"
struct _SID { 
#line 9823
BYTE Revision; 
#line 9824
BYTE SubAuthorityCount; 
#line 9825
SID_IDENTIFIER_AUTHORITY IdentifierAuthority; 
#line 9829
DWORD SubAuthority[1]; 
#line 9831 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnt.h"
} SID, *PISID; 
#line 9865 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnt.h"
typedef 
#line 9862
union _SE_SID { 
#line 9863
SID Sid; 
#line 9864
BYTE Buffer[(sizeof(SID) - sizeof(DWORD)) + ((15) * sizeof(DWORD))]; 
#line 9865
} SE_SID, *PSE_SID; 
#line 9882 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnt.h"
typedef 
#line 9870
enum _SID_NAME_USE { 
#line 9871
SidTypeUser = 1, 
#line 9872
SidTypeGroup, 
#line 9873
SidTypeDomain, 
#line 9874
SidTypeAlias, 
#line 9875
SidTypeWellKnownGroup, 
#line 9876
SidTypeDeletedAccount, 
#line 9877
SidTypeInvalid, 
#line 9878
SidTypeUnknown, 
#line 9879
SidTypeComputer, 
#line 9880
SidTypeLabel, 
#line 9881
SidTypeLogonSession
#line 9882
} SID_NAME_USE, *PSID_NAME_USE; 
#line 9891 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnt.h"
typedef 
#line 9884 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnt.h"
struct _SID_AND_ATTRIBUTES { 
#line 9888
PSID Sid; 
#line 9890 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnt.h"
DWORD Attributes; 
#line 9891
} SID_AND_ATTRIBUTES, *PSID_AND_ATTRIBUTES; 
#line 9893
typedef SID_AND_ATTRIBUTES SID_AND_ATTRIBUTES_ARRAY[1]; 
#line 9894
typedef SID_AND_ATTRIBUTES_ARRAY *PSID_AND_ATTRIBUTES_ARRAY; 
#line 9897
typedef ULONG_PTR SID_HASH_ENTRY, *PSID_HASH_ENTRY; 
#line 9903
typedef 
#line 9899
struct _SID_AND_ATTRIBUTES_HASH { 
#line 9900
DWORD SidCount; 
#line 9901
PSID_AND_ATTRIBUTES SidAttr; 
#line 9902
SID_HASH_ENTRY Hash[32]; 
#line 9903
} SID_AND_ATTRIBUTES_HASH, *PSID_AND_ATTRIBUTES_HASH; 
#line 10430
typedef 
#line 10308
enum { 
#line 10310
WinNullSid, 
#line 10311
WinWorldSid, 
#line 10312
WinLocalSid, 
#line 10313
WinCreatorOwnerSid, 
#line 10314
WinCreatorGroupSid, 
#line 10315
WinCreatorOwnerServerSid, 
#line 10316
WinCreatorGroupServerSid, 
#line 10317
WinNtAuthoritySid, 
#line 10318
WinDialupSid, 
#line 10319
WinNetworkSid, 
#line 10320
WinBatchSid, 
#line 10321
WinInteractiveSid, 
#line 10322
WinServiceSid, 
#line 10323
WinAnonymousSid, 
#line 10324
WinProxySid, 
#line 10325
WinEnterpriseControllersSid, 
#line 10326
WinSelfSid, 
#line 10327
WinAuthenticatedUserSid, 
#line 10328
WinRestrictedCodeSid, 
#line 10329
WinTerminalServerSid, 
#line 10330
WinRemoteLogonIdSid, 
#line 10331
WinLogonIdsSid, 
#line 10332
WinLocalSystemSid, 
#line 10333
WinLocalServiceSid, 
#line 10334
WinNetworkServiceSid, 
#line 10335
WinBuiltinDomainSid, 
#line 10336
WinBuiltinAdministratorsSid, 
#line 10337
WinBuiltinUsersSid, 
#line 10338
WinBuiltinGuestsSid, 
#line 10339
WinBuiltinPowerUsersSid, 
#line 10340
WinBuiltinAccountOperatorsSid, 
#line 10341
WinBuiltinSystemOperatorsSid, 
#line 10342
WinBuiltinPrintOperatorsSid, 
#line 10343
WinBuiltinBackupOperatorsSid, 
#line 10344
WinBuiltinReplicatorSid, 
#line 10345
WinBuiltinPreWindows2000CompatibleAccessSid, 
#line 10346
WinBuiltinRemoteDesktopUsersSid, 
#line 10347
WinBuiltinNetworkConfigurationOperatorsSid, 
#line 10348
WinAccountAdministratorSid, 
#line 10349
WinAccountGuestSid, 
#line 10350
WinAccountKrbtgtSid, 
#line 10351
WinAccountDomainAdminsSid, 
#line 10352
WinAccountDomainUsersSid, 
#line 10353
WinAccountDomainGuestsSid, 
#line 10354
WinAccountComputersSid, 
#line 10355
WinAccountControllersSid, 
#line 10356
WinAccountCertAdminsSid, 
#line 10357
WinAccountSchemaAdminsSid, 
#line 10358
WinAccountEnterpriseAdminsSid, 
#line 10359
WinAccountPolicyAdminsSid, 
#line 10360
WinAccountRasAndIasServersSid, 
#line 10361
WinNTLMAuthenticationSid, 
#line 10362
WinDigestAuthenticationSid, 
#line 10363
WinSChannelAuthenticationSid, 
#line 10364
WinThisOrganizationSid, 
#line 10365
WinOtherOrganizationSid, 
#line 10366
WinBuiltinIncomingForestTrustBuildersSid, 
#line 10367
WinBuiltinPerfMonitoringUsersSid, 
#line 10368
WinBuiltinPerfLoggingUsersSid, 
#line 10369
WinBuiltinAuthorizationAccessSid, 
#line 10370
WinBuiltinTerminalServerLicenseServersSid, 
#line 10371
WinBuiltinDCOMUsersSid, 
#line 10372
WinBuiltinIUsersSid, 
#line 10373
WinIUserSid, 
#line 10374
WinBuiltinCryptoOperatorsSid, 
#line 10375
WinUntrustedLabelSid, 
#line 10376
WinLowLabelSid, 
#line 10377
WinMediumLabelSid, 
#line 10378
WinHighLabelSid, 
#line 10379
WinSystemLabelSid, 
#line 10380
WinWriteRestrictedCodeSid, 
#line 10381
WinCreatorOwnerRightsSid, 
#line 10382
WinCacheablePrincipalsGroupSid, 
#line 10383
WinNonCacheablePrincipalsGroupSid, 
#line 10384
WinEnterpriseReadonlyControllersSid, 
#line 10385
WinAccountReadonlyControllersSid, 
#line 10386
WinBuiltinEventLogReadersGroup, 
#line 10387
WinNewEnterpriseReadonlyControllersSid, 
#line 10388
WinBuiltinCertSvcDComAccessGroup, 
#line 10389
WinMediumPlusLabelSid, 
#line 10390
WinLocalLogonSid, 
#line 10391
WinConsoleLogonSid, 
#line 10392
WinThisOrganizationCertificateSid, 
#line 10393
WinApplicationPackageAuthoritySid, 
#line 10394
WinBuiltinAnyPackageSid, 
#line 10395
WinCapabilityInternetClientSid, 
#line 10396
WinCapabilityInternetClientServerSid, 
#line 10397
WinCapabilityPrivateNetworkClientServerSid, 
#line 10398
WinCapabilityPicturesLibrarySid, 
#line 10399
WinCapabilityVideosLibrarySid, 
#line 10400
WinCapabilityMusicLibrarySid, 
#line 10401
WinCapabilityDocumentsLibrarySid, 
#line 10402
WinCapabilitySharedUserCertificatesSid, 
#line 10403
WinCapabilityEnterpriseAuthenticationSid, 
#line 10404
WinCapabilityRemovableStorageSid, 
#line 10405
WinBuiltinRDSRemoteAccessServersSid, 
#line 10406
WinBuiltinRDSEndpointServersSid, 
#line 10407
WinBuiltinRDSManagementServersSid, 
#line 10408
WinUserModeDriversSid, 
#line 10409
WinBuiltinHyperVAdminsSid, 
#line 10410
WinAccountCloneableControllersSid, 
#line 10411
WinBuiltinAccessControlAssistanceOperatorsSid, 
#line 10412
WinBuiltinRemoteManagementUsersSid, 
#line 10413
WinAuthenticationAuthorityAssertedSid, 
#line 10414
WinAuthenticationServiceAssertedSid, 
#line 10415
WinLocalAccountSid, 
#line 10416
WinLocalAccountAndAdministratorSid, 
#line 10417
WinAccountProtectedUsersSid, 
#line 10418
WinCapabilityAppointmentsSid, 
#line 10419
WinCapabilityContactsSid, 
#line 10420
WinAccountDefaultSystemManagedSid, 
#line 10421
WinBuiltinDefaultSystemManagedGroupSid, 
#line 10422
WinBuiltinStorageReplicaAdminsSid, 
#line 10423
WinAccountKeyAdminsSid, 
#line 10424
WinAccountEnterpriseKeyAdminsSid, 
#line 10425
WinAuthenticationKeyTrustSid, 
#line 10426
WinAuthenticationKeyPropertyMFASid, 
#line 10427
WinAuthenticationKeyPropertyAttestationSid, 
#line 10428
WinAuthenticationFreshKeyAuthSid, 
#line 10429
WinBuiltinDeviceOwnersSid
#line 10430
} WELL_KNOWN_SID_TYPE; 
#line 10534
typedef 
#line 10528
struct _ACL { 
#line 10529
BYTE AclRevision; 
#line 10530
BYTE Sbz1; 
#line 10531
WORD AclSize; 
#line 10532
WORD AceCount; 
#line 10533
WORD Sbz2; 
#line 10534
} ACL; 
#line 10535
typedef ACL *PACL; 
#line 10562
typedef 
#line 10558
struct _ACE_HEADER { 
#line 10559
BYTE AceType; 
#line 10560
BYTE AceFlags; 
#line 10561
WORD AceSize; 
#line 10562
} ACE_HEADER; 
#line 10563
typedef ACE_HEADER *PACE_HEADER; 
#line 10702
typedef 
#line 10698
struct _ACCESS_ALLOWED_ACE { 
#line 10699
ACE_HEADER Header; 
#line 10700
ACCESS_MASK Mask; 
#line 10701
DWORD SidStart; 
#line 10702
} ACCESS_ALLOWED_ACE; 
#line 10704
typedef ACCESS_ALLOWED_ACE *PACCESS_ALLOWED_ACE; 
#line 10710
typedef 
#line 10706
struct _ACCESS_DENIED_ACE { 
#line 10707
ACE_HEADER Header; 
#line 10708
ACCESS_MASK Mask; 
#line 10709
DWORD SidStart; 
#line 10710
} ACCESS_DENIED_ACE; 
#line 10711
typedef ACCESS_DENIED_ACE *PACCESS_DENIED_ACE; 
#line 10717
typedef 
#line 10713
struct _SYSTEM_AUDIT_ACE { 
#line 10714
ACE_HEADER Header; 
#line 10715
ACCESS_MASK Mask; 
#line 10716
DWORD SidStart; 
#line 10717
} SYSTEM_AUDIT_ACE; 
#line 10718
typedef SYSTEM_AUDIT_ACE *PSYSTEM_AUDIT_ACE; 
#line 10724
typedef 
#line 10720
struct _SYSTEM_ALARM_ACE { 
#line 10721
ACE_HEADER Header; 
#line 10722
ACCESS_MASK Mask; 
#line 10723
DWORD SidStart; 
#line 10724
} SYSTEM_ALARM_ACE; 
#line 10725
typedef SYSTEM_ALARM_ACE *PSYSTEM_ALARM_ACE; 
#line 10732
typedef 
#line 10727
struct _SYSTEM_RESOURCE_ATTRIBUTE_ACE { 
#line 10728
ACE_HEADER Header; 
#line 10729
ACCESS_MASK Mask; 
#line 10730
DWORD SidStart; 
#line 10732
} SYSTEM_RESOURCE_ATTRIBUTE_ACE, *PSYSTEM_RESOURCE_ATTRIBUTE_ACE; 
#line 10738
typedef 
#line 10734
struct _SYSTEM_SCOPED_POLICY_ID_ACE { 
#line 10735
ACE_HEADER Header; 
#line 10736
ACCESS_MASK Mask; 
#line 10737
DWORD SidStart; 
#line 10738
} SYSTEM_SCOPED_POLICY_ID_ACE, *PSYSTEM_SCOPED_POLICY_ID_ACE; 
#line 10744
typedef 
#line 10740
struct _SYSTEM_MANDATORY_LABEL_ACE { 
#line 10741
ACE_HEADER Header; 
#line 10742
ACCESS_MASK Mask; 
#line 10743
DWORD SidStart; 
#line 10744
} SYSTEM_MANDATORY_LABEL_ACE, *PSYSTEM_MANDATORY_LABEL_ACE; 
#line 10750
typedef 
#line 10746
struct _SYSTEM_PROCESS_TRUST_LABEL_ACE { 
#line 10747
ACE_HEADER Header; 
#line 10748
ACCESS_MASK Mask; 
#line 10749
DWORD SidStart; 
#line 10750
} SYSTEM_PROCESS_TRUST_LABEL_ACE, *PSYSTEM_PROCESS_TRUST_LABEL_ACE; 
#line 10757
typedef 
#line 10752
struct _SYSTEM_ACCESS_FILTER_ACE { 
#line 10753
ACE_HEADER Header; 
#line 10754
ACCESS_MASK Mask; 
#line 10755
DWORD SidStart; 
#line 10757
} SYSTEM_ACCESS_FILTER_ACE, *PSYSTEM_ACCESS_FILTER_ACE; 
#line 10782
typedef 
#line 10775
struct _ACCESS_ALLOWED_OBJECT_ACE { 
#line 10776
ACE_HEADER Header; 
#line 10777
ACCESS_MASK Mask; 
#line 10778
DWORD Flags; 
#line 10779
GUID ObjectType; 
#line 10780
GUID InheritedObjectType; 
#line 10781
DWORD SidStart; 
#line 10782
} ACCESS_ALLOWED_OBJECT_ACE, *PACCESS_ALLOWED_OBJECT_ACE; 
#line 10791
typedef 
#line 10784
struct _ACCESS_DENIED_OBJECT_ACE { 
#line 10785
ACE_HEADER Header; 
#line 10786
ACCESS_MASK Mask; 
#line 10787
DWORD Flags; 
#line 10788
GUID ObjectType; 
#line 10789
GUID InheritedObjectType; 
#line 10790
DWORD SidStart; 
#line 10791
} ACCESS_DENIED_OBJECT_ACE, *PACCESS_DENIED_OBJECT_ACE; 
#line 10800
typedef 
#line 10793
struct _SYSTEM_AUDIT_OBJECT_ACE { 
#line 10794
ACE_HEADER Header; 
#line 10795
ACCESS_MASK Mask; 
#line 10796
DWORD Flags; 
#line 10797
GUID ObjectType; 
#line 10798
GUID InheritedObjectType; 
#line 10799
DWORD SidStart; 
#line 10800
} SYSTEM_AUDIT_OBJECT_ACE, *PSYSTEM_AUDIT_OBJECT_ACE; 
#line 10809
typedef 
#line 10802
struct _SYSTEM_ALARM_OBJECT_ACE { 
#line 10803
ACE_HEADER Header; 
#line 10804
ACCESS_MASK Mask; 
#line 10805
DWORD Flags; 
#line 10806
GUID ObjectType; 
#line 10807
GUID InheritedObjectType; 
#line 10808
DWORD SidStart; 
#line 10809
} SYSTEM_ALARM_OBJECT_ACE, *PSYSTEM_ALARM_OBJECT_ACE; 
#line 10821
typedef 
#line 10816
struct _ACCESS_ALLOWED_CALLBACK_ACE { 
#line 10817
ACE_HEADER Header; 
#line 10818
ACCESS_MASK Mask; 
#line 10819
DWORD SidStart; 
#line 10821
} ACCESS_ALLOWED_CALLBACK_ACE, *PACCESS_ALLOWED_CALLBACK_ACE; 
#line 10828
typedef 
#line 10823
struct _ACCESS_DENIED_CALLBACK_ACE { 
#line 10824
ACE_HEADER Header; 
#line 10825
ACCESS_MASK Mask; 
#line 10826
DWORD SidStart; 
#line 10828
} ACCESS_DENIED_CALLBACK_ACE, *PACCESS_DENIED_CALLBACK_ACE; 
#line 10835
typedef 
#line 10830
struct _SYSTEM_AUDIT_CALLBACK_ACE { 
#line 10831
ACE_HEADER Header; 
#line 10832
ACCESS_MASK Mask; 
#line 10833
DWORD SidStart; 
#line 10835
} SYSTEM_AUDIT_CALLBACK_ACE, *PSYSTEM_AUDIT_CALLBACK_ACE; 
#line 10842
typedef 
#line 10837
struct _SYSTEM_ALARM_CALLBACK_ACE { 
#line 10838
ACE_HEADER Header; 
#line 10839
ACCESS_MASK Mask; 
#line 10840
DWORD SidStart; 
#line 10842
} SYSTEM_ALARM_CALLBACK_ACE, *PSYSTEM_ALARM_CALLBACK_ACE; 
#line 10852
typedef 
#line 10844
struct _ACCESS_ALLOWED_CALLBACK_OBJECT_ACE { 
#line 10845
ACE_HEADER Header; 
#line 10846
ACCESS_MASK Mask; 
#line 10847
DWORD Flags; 
#line 10848
GUID ObjectType; 
#line 10849
GUID InheritedObjectType; 
#line 10850
DWORD SidStart; 
#line 10852
} ACCESS_ALLOWED_CALLBACK_OBJECT_ACE, *PACCESS_ALLOWED_CALLBACK_OBJECT_ACE; 
#line 10862
typedef 
#line 10854
struct _ACCESS_DENIED_CALLBACK_OBJECT_ACE { 
#line 10855
ACE_HEADER Header; 
#line 10856
ACCESS_MASK Mask; 
#line 10857
DWORD Flags; 
#line 10858
GUID ObjectType; 
#line 10859
GUID InheritedObjectType; 
#line 10860
DWORD SidStart; 
#line 10862
} ACCESS_DENIED_CALLBACK_OBJECT_ACE, *PACCESS_DENIED_CALLBACK_OBJECT_ACE; 
#line 10872
typedef 
#line 10864
struct _SYSTEM_AUDIT_CALLBACK_OBJECT_ACE { 
#line 10865
ACE_HEADER Header; 
#line 10866
ACCESS_MASK Mask; 
#line 10867
DWORD Flags; 
#line 10868
GUID ObjectType; 
#line 10869
GUID InheritedObjectType; 
#line 10870
DWORD SidStart; 
#line 10872
} SYSTEM_AUDIT_CALLBACK_OBJECT_ACE, *PSYSTEM_AUDIT_CALLBACK_OBJECT_ACE; 
#line 10882
typedef 
#line 10874
struct _SYSTEM_ALARM_CALLBACK_OBJECT_ACE { 
#line 10875
ACE_HEADER Header; 
#line 10876
ACCESS_MASK Mask; 
#line 10877
DWORD Flags; 
#line 10878
GUID ObjectType; 
#line 10879
GUID InheritedObjectType; 
#line 10880
DWORD SidStart; 
#line 10882
} SYSTEM_ALARM_CALLBACK_OBJECT_ACE, *PSYSTEM_ALARM_CALLBACK_OBJECT_ACE; 
#line 10901
typedef 
#line 10898
enum _ACL_INFORMATION_CLASS { 
#line 10899
AclRevisionInformation = 1, 
#line 10900
AclSizeInformation
#line 10901
} ACL_INFORMATION_CLASS; 
#line 10910
typedef 
#line 10908
struct _ACL_REVISION_INFORMATION { 
#line 10909
DWORD AclRevision; 
#line 10910
} ACL_REVISION_INFORMATION; 
#line 10911
typedef ACL_REVISION_INFORMATION *PACL_REVISION_INFORMATION; 
#line 10921
typedef 
#line 10917
struct _ACL_SIZE_INFORMATION { 
#line 10918
DWORD AceCount; 
#line 10919
DWORD AclBytesInUse; 
#line 10920
DWORD AclBytesFree; 
#line 10921
} ACL_SIZE_INFORMATION; 
#line 10922
typedef ACL_SIZE_INFORMATION *PACL_SIZE_INFORMATION; 
#line 10949
typedef WORD SECURITY_DESCRIPTOR_CONTROL, *PSECURITY_DESCRIPTOR_CONTROL; 
#line 11047
typedef 
#line 11039
struct _SECURITY_DESCRIPTOR_RELATIVE { 
#line 11040
BYTE Revision; 
#line 11041
BYTE Sbz1; 
#line 11042
SECURITY_DESCRIPTOR_CONTROL Control; 
#line 11043
DWORD Owner; 
#line 11044
DWORD Group; 
#line 11045
DWORD Sacl; 
#line 11046
DWORD Dacl; 
#line 11047
} SECURITY_DESCRIPTOR_RELATIVE, *PISECURITY_DESCRIPTOR_RELATIVE; 
#line 11058
typedef 
#line 11049
struct _SECURITY_DESCRIPTOR { 
#line 11050
BYTE Revision; 
#line 11051
BYTE Sbz1; 
#line 11052
SECURITY_DESCRIPTOR_CONTROL Control; 
#line 11053
PSID Owner; 
#line 11054
PSID Group; 
#line 11055
PACL Sacl; 
#line 11056
PACL Dacl; 
#line 11058
} SECURITY_DESCRIPTOR, *PISECURITY_DESCRIPTOR; 
#line 11064
typedef 
#line 11061
struct _SECURITY_OBJECT_AI_PARAMS { 
#line 11062
DWORD Size; 
#line 11063
DWORD ConstraintMask; 
#line 11064
} SECURITY_OBJECT_AI_PARAMS, *PSECURITY_OBJECT_AI_PARAMS; 
#line 11120
typedef 
#line 11116
struct _OBJECT_TYPE_LIST { 
#line 11117
WORD Level; 
#line 11118
WORD Sbz; 
#line 11119
GUID *ObjectType; 
#line 11120
} OBJECT_TYPE_LIST, *POBJECT_TYPE_LIST; 
#line 11139
typedef 
#line 11136
enum _AUDIT_EVENT_TYPE { 
#line 11137
AuditEventObjectAccess, 
#line 11138
AuditEventDirectoryServiceAccess
#line 11139
} AUDIT_EVENT_TYPE, *PAUDIT_EVENT_TYPE; 
#line 11194
typedef 
#line 11190
struct _PRIVILEGE_SET { 
#line 11191
DWORD PrivilegeCount; 
#line 11192
DWORD Control; 
#line 11193
LUID_AND_ATTRIBUTES Privilege[1]; 
#line 11194
} PRIVILEGE_SET, *PPRIVILEGE_SET; 
#line 11249
typedef 
#line 11211
enum _ACCESS_REASON_TYPE { 
#line 11213
AccessReasonNone, 
#line 11220
AccessReasonAllowedAce = 65536, 
#line 11221
AccessReasonDeniedAce = 131072, 
#line 11223
AccessReasonAllowedParentAce = 196608, 
#line 11224
AccessReasonDeniedParentAce = 262144, 
#line 11226
AccessReasonNotGrantedByCape = 327680, 
#line 11227
AccessReasonNotGrantedByParentCape = 393216, 
#line 11229
AccessReasonNotGrantedToAppContainer = 458752, 
#line 11231
AccessReasonMissingPrivilege = 1048576, 
#line 11232
AccessReasonFromPrivilege = 2097152, 
#line 11235
AccessReasonIntegrityLevel = 3145728, 
#line 11237
AccessReasonOwnership = 4194304, 
#line 11239
AccessReasonNullDacl = 5242880, 
#line 11240
AccessReasonEmptyDacl = 6291456, 
#line 11242
AccessReasonNoSD = 7340032, 
#line 11243
AccessReasonNoGrant = 8388608, 
#line 11245
AccessReasonTrustLabel = 9437184, 
#line 11247
AccessReasonFilterAce = 10485760
#line 11249
} ACCESS_REASON_TYPE; 
#line 11264
typedef DWORD ACCESS_REASON; 
#line 11268
typedef 
#line 11266
struct _ACCESS_REASONS { 
#line 11267
ACCESS_REASON Data[32]; 
#line 11268
} ACCESS_REASONS, *PACCESS_REASONS; 
#line 11303
typedef 
#line 11298
struct _SE_SECURITY_DESCRIPTOR { 
#line 11300
DWORD Size; 
#line 11301
DWORD Flags; 
#line 11302
PSECURITY_DESCRIPTOR SecurityDescriptor; 
#line 11303
} SE_SECURITY_DESCRIPTOR, *PSE_SECURITY_DESCRIPTOR; 
#line 11315
typedef 
#line 11305
struct _SE_ACCESS_REQUEST { 
#line 11307
DWORD Size; 
#line 11308
PSE_SECURITY_DESCRIPTOR SeSecurityDescriptor; 
#line 11309
ACCESS_MASK DesiredAccess; 
#line 11310
ACCESS_MASK PreviouslyGrantedAccess; 
#line 11311
PSID PrincipalSelfSid; 
#line 11312
PGENERIC_MAPPING GenericMapping; 
#line 11313
DWORD ObjectTypeListCount; 
#line 11314
POBJECT_TYPE_LIST ObjectTypeList; 
#line 11315
} SE_ACCESS_REQUEST, *PSE_ACCESS_REQUEST; 
#line 11326
typedef 
#line 11318
struct _SE_ACCESS_REPLY { 
#line 11320
DWORD Size; 
#line 11321
DWORD ResultListCount; 
#line 11322
PACCESS_MASK GrantedAccess; 
#line 11323
PDWORD AccessStatus; 
#line 11324
PACCESS_REASONS AccessReason; 
#line 11325
PPRIVILEGE_SET *Privileges; 
#line 11326
} SE_ACCESS_REPLY, *PSE_ACCESS_REPLY; 
#line 11409
typedef 
#line 11404
enum _SECURITY_IMPERSONATION_LEVEL { 
#line 11405
SecurityAnonymous, 
#line 11406
SecurityIdentification, 
#line 11407
SecurityImpersonation, 
#line 11408
SecurityDelegation
#line 11409
} SECURITY_IMPERSONATION_LEVEL, *PSECURITY_IMPERSONATION_LEVEL; 
#line 11489 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnt.h"
typedef 
#line 11486
enum _TOKEN_TYPE { 
#line 11487
TokenPrimary = 1, 
#line 11488
TokenImpersonation
#line 11489
} TOKEN_TYPE; 
#line 11490
typedef TOKEN_TYPE *PTOKEN_TYPE; 
#line 11502
typedef 
#line 11498
enum _TOKEN_ELEVATION_TYPE { 
#line 11499
TokenElevationTypeDefault = 1, 
#line 11500
TokenElevationTypeFull, 
#line 11501
TokenElevationTypeLimited
#line 11502
} TOKEN_ELEVATION_TYPE, *PTOKEN_ELEVATION_TYPE; 
#line 11558
typedef 
#line 11509
enum _TOKEN_INFORMATION_CLASS { 
#line 11510
TokenUser = 1, 
#line 11511
TokenGroups, 
#line 11512
TokenPrivileges, 
#line 11513
TokenOwner, 
#line 11514
TokenPrimaryGroup, 
#line 11515
TokenDefaultDacl, 
#line 11516
TokenSource, 
#line 11517
TokenType, 
#line 11518
TokenImpersonationLevel, 
#line 11519
TokenStatistics, 
#line 11520
TokenRestrictedSids, 
#line 11521
TokenSessionId, 
#line 11522
TokenGroupsAndPrivileges, 
#line 11523
TokenSessionReference, 
#line 11524
TokenSandBoxInert, 
#line 11525
TokenAuditPolicy, 
#line 11526
TokenOrigin, 
#line 11527
TokenElevationType, 
#line 11528
TokenLinkedToken, 
#line 11529
TokenElevation, 
#line 11530
TokenHasRestrictions, 
#line 11531
TokenAccessInformation, 
#line 11532
TokenVirtualizationAllowed, 
#line 11533
TokenVirtualizationEnabled, 
#line 11534
TokenIntegrityLevel, 
#line 11535
TokenUIAccess, 
#line 11536
TokenMandatoryPolicy, 
#line 11537
TokenLogonSid, 
#line 11538
TokenIsAppContainer, 
#line 11539
TokenCapabilities, 
#line 11540
TokenAppContainerSid, 
#line 11541
TokenAppContainerNumber, 
#line 11542
TokenUserClaimAttributes, 
#line 11543
TokenDeviceClaimAttributes, 
#line 11544
TokenRestrictedUserClaimAttributes, 
#line 11545
TokenRestrictedDeviceClaimAttributes, 
#line 11546
TokenDeviceGroups, 
#line 11547
TokenRestrictedDeviceGroups, 
#line 11548
TokenSecurityAttributes, 
#line 11549
TokenIsRestricted, 
#line 11550
TokenProcessTrustLevel, 
#line 11551
TokenPrivateNameSpace, 
#line 11552
TokenSingletonAttributes, 
#line 11553
TokenBnoIsolation, 
#line 11554
TokenChildProcessFlags, 
#line 11555
TokenIsLessPrivilegedAppContainer, 
#line 11556
TokenIsSandboxed, 
#line 11557
MaxTokenInfoClass
#line 11558
} TOKEN_INFORMATION_CLASS, *PTOKEN_INFORMATION_CLASS; 
#line 11566
typedef 
#line 11564
struct _TOKEN_USER { 
#line 11565
SID_AND_ATTRIBUTES User; 
#line 11566
} TOKEN_USER, *PTOKEN_USER; 
#line 11581
typedef 
#line 11570
struct _SE_TOKEN_USER { 
#line 11571
union { 
#line 11572
TOKEN_USER TokenUser; 
#line 11573
SID_AND_ATTRIBUTES User; 
#line 11574
}; 
#line 11576
union { 
#line 11577
SID Sid; 
#line 11578
BYTE Buffer[(sizeof(SID) - sizeof(DWORD)) + ((15) * sizeof(DWORD))]; 
#line 11579
}; 
#line 11581
} SE_TOKEN_USER, PSE_TOKEN_USER; 
#line 11595 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnt.h"
typedef 
#line 11588 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnt.h"
struct _TOKEN_GROUPS { 
#line 11589
DWORD GroupCount; 
#line 11593
SID_AND_ATTRIBUTES Groups[1]; 
#line 11595 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnt.h"
} TOKEN_GROUPS, *PTOKEN_GROUPS; 
#line 11600
typedef 
#line 11597
struct _TOKEN_PRIVILEGES { 
#line 11598
DWORD PrivilegeCount; 
#line 11599
LUID_AND_ATTRIBUTES Privileges[1]; 
#line 11600
} TOKEN_PRIVILEGES, *PTOKEN_PRIVILEGES; 
#line 11605
typedef 
#line 11603
struct _TOKEN_OWNER { 
#line 11604
PSID Owner; 
#line 11605
} TOKEN_OWNER, *PTOKEN_OWNER; 
#line 11613 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnt.h"
typedef 
#line 11611
struct _TOKEN_PRIMARY_GROUP { 
#line 11612
PSID PrimaryGroup; 
#line 11613
} TOKEN_PRIMARY_GROUP, *PTOKEN_PRIMARY_GROUP; 
#line 11618
typedef 
#line 11616
struct _TOKEN_DEFAULT_DACL { 
#line 11617
PACL DefaultDacl; 
#line 11618
} TOKEN_DEFAULT_DACL, *PTOKEN_DEFAULT_DACL; 
#line 11622
typedef 
#line 11620
struct _TOKEN_USER_CLAIMS { 
#line 11621
PCLAIMS_BLOB UserClaims; 
#line 11622
} TOKEN_USER_CLAIMS, *PTOKEN_USER_CLAIMS; 
#line 11626
typedef 
#line 11624
struct _TOKEN_DEVICE_CLAIMS { 
#line 11625
PCLAIMS_BLOB DeviceClaims; 
#line 11626
} TOKEN_DEVICE_CLAIMS, *PTOKEN_DEVICE_CLAIMS; 
#line 11639
typedef 
#line 11628
struct _TOKEN_GROUPS_AND_PRIVILEGES { 
#line 11629
DWORD SidCount; 
#line 11630
DWORD SidLength; 
#line 11631
PSID_AND_ATTRIBUTES Sids; 
#line 11632
DWORD RestrictedSidCount; 
#line 11633
DWORD RestrictedSidLength; 
#line 11634
PSID_AND_ATTRIBUTES RestrictedSids; 
#line 11635
DWORD PrivilegeCount; 
#line 11636
DWORD PrivilegeLength; 
#line 11637
PLUID_AND_ATTRIBUTES Privileges; 
#line 11638
LUID AuthenticationId; 
#line 11639
} TOKEN_GROUPS_AND_PRIVILEGES, *PTOKEN_GROUPS_AND_PRIVILEGES; 
#line 11643
typedef 
#line 11641
struct _TOKEN_LINKED_TOKEN { 
#line 11642
HANDLE LinkedToken; 
#line 11643
} TOKEN_LINKED_TOKEN, *PTOKEN_LINKED_TOKEN; 
#line 11647
typedef 
#line 11645
struct _TOKEN_ELEVATION { 
#line 11646
DWORD TokenIsElevated; 
#line 11647
} TOKEN_ELEVATION, *PTOKEN_ELEVATION; 
#line 11651
typedef 
#line 11649
struct _TOKEN_MANDATORY_LABEL { 
#line 11650
SID_AND_ATTRIBUTES Label; 
#line 11651
} TOKEN_MANDATORY_LABEL, *PTOKEN_MANDATORY_LABEL; 
#line 11666 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnt.h"
typedef 
#line 11664
struct _TOKEN_MANDATORY_POLICY { 
#line 11665
DWORD Policy; 
#line 11666
} TOKEN_MANDATORY_POLICY, *PTOKEN_MANDATORY_POLICY; 
#line 11668
typedef PVOID PSECURITY_ATTRIBUTES_OPAQUE; 
#line 11684
typedef 
#line 11670
struct _TOKEN_ACCESS_INFORMATION { 
#line 11671
PSID_AND_ATTRIBUTES_HASH SidHash; 
#line 11672
PSID_AND_ATTRIBUTES_HASH RestrictedSidHash; 
#line 11673
PTOKEN_PRIVILEGES Privileges; 
#line 11674
LUID AuthenticationId; 
#line 11675
TOKEN_TYPE TokenType; 
#line 11676
SECURITY_IMPERSONATION_LEVEL ImpersonationLevel; 
#line 11677
TOKEN_MANDATORY_POLICY MandatoryPolicy; 
#line 11678
DWORD Flags; 
#line 11679
DWORD AppContainerNumber; 
#line 11680
PSID PackageSid; 
#line 11681
PSID_AND_ATTRIBUTES_HASH CapabilitiesHash; 
#line 11682
PSID TrustLevelSid; 
#line 11683
PSECURITY_ATTRIBUTES_OPAQUE SecurityAttributes; 
#line 11684
} TOKEN_ACCESS_INFORMATION, *PTOKEN_ACCESS_INFORMATION; 
#line 11694
typedef 
#line 11692
struct _TOKEN_AUDIT_POLICY { 
#line 11693
BYTE PerUserPolicy[(59 >> 1) + 1]; 
#line 11694
} TOKEN_AUDIT_POLICY, *PTOKEN_AUDIT_POLICY; 
#line 11701
typedef 
#line 11698
struct _TOKEN_SOURCE { 
#line 11699
CHAR SourceName[8]; 
#line 11700
LUID SourceIdentifier; 
#line 11701
} TOKEN_SOURCE, *PTOKEN_SOURCE; 
#line 11715
typedef 
#line 11704
struct _TOKEN_STATISTICS { 
#line 11705
LUID TokenId; 
#line 11706
LUID AuthenticationId; 
#line 11707
LARGE_INTEGER ExpirationTime; 
#line 11708
TOKEN_TYPE TokenType; 
#line 11709
SECURITY_IMPERSONATION_LEVEL ImpersonationLevel; 
#line 11710
DWORD DynamicCharged; 
#line 11711
DWORD DynamicAvailable; 
#line 11712
DWORD GroupCount; 
#line 11713
DWORD PrivilegeCount; 
#line 11714
LUID ModifiedId; 
#line 11715
} TOKEN_STATISTICS, *PTOKEN_STATISTICS; 
#line 11724
typedef 
#line 11719
struct _TOKEN_CONTROL { 
#line 11720
LUID TokenId; 
#line 11721
LUID AuthenticationId; 
#line 11722
LUID ModifiedId; 
#line 11723
TOKEN_SOURCE TokenSource; 
#line 11724
} TOKEN_CONTROL, *PTOKEN_CONTROL; 
#line 11728
typedef 
#line 11726
struct _TOKEN_ORIGIN { 
#line 11727
LUID OriginatingLogonSession; 
#line 11728
} TOKEN_ORIGIN, *PTOKEN_ORIGIN; 
#line 11739
typedef 
#line 11731
enum _MANDATORY_LEVEL { 
#line 11732
MandatoryLevelUntrusted, 
#line 11733
MandatoryLevelLow, 
#line 11734
MandatoryLevelMedium, 
#line 11735
MandatoryLevelHigh, 
#line 11736
MandatoryLevelSystem, 
#line 11737
MandatoryLevelSecureProcess, 
#line 11738
MandatoryLevelCount
#line 11739
} MANDATORY_LEVEL, *PMANDATORY_LEVEL; 
#line 11743
typedef 
#line 11741
struct _TOKEN_APPCONTAINER_INFORMATION { 
#line 11742
PSID TokenAppContainer; 
#line 11743
} TOKEN_APPCONTAINER_INFORMATION, *PTOKEN_APPCONTAINER_INFORMATION; 
#line 11751 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnt.h"
typedef 
#line 11749
struct _TOKEN_SID_INFORMATION { 
#line 11750
PSID Sid; 
#line 11751
} TOKEN_SID_INFORMATION, *PTOKEN_SID_INFORMATION; 
#line 11756
typedef 
#line 11753
struct _TOKEN_BNO_ISOLATION_INFORMATION { 
#line 11754
PWSTR IsolationPrefix; 
#line 11755
BOOLEAN IsolationEnabled; 
#line 11756
} TOKEN_BNO_ISOLATION_INFORMATION, *PTOKEN_BNO_ISOLATION_INFORMATION; 
#line 11790
typedef 
#line 11787
struct _CLAIM_SECURITY_ATTRIBUTE_FQBN_VALUE { 
#line 11788
DWORD64 Version; 
#line 11789
PWSTR Name; 
#line 11790
} CLAIM_SECURITY_ATTRIBUTE_FQBN_VALUE, *PCLAIM_SECURITY_ATTRIBUTE_FQBN_VALUE; 
#line 11802
typedef 
#line 11799
struct _CLAIM_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE { 
#line 11800
PVOID pValue; 
#line 11801
DWORD ValueLength; 
#line 11802
} CLAIM_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE, 
#line 11803
*PCLAIM_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE; 
#line 11916
typedef 
#line 11871
struct _CLAIM_SECURITY_ATTRIBUTE_V1 { 
#line 11878
PWSTR Name; 
#line 11884
WORD ValueType; 
#line 11891
WORD Reserved; 
#line 11897
DWORD Flags; 
#line 11903
DWORD ValueCount; 
#line 11909
union { 
#line 11910
PLONG64 pInt64; 
#line 11911
PDWORD64 pUint64; 
#line 11912
PWSTR *ppString; 
#line 11913
PCLAIM_SECURITY_ATTRIBUTE_FQBN_VALUE pFqbn; 
#line 11914
PCLAIM_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE pOctetString; 
#line 11915
} Values; 
#line 11916
} CLAIM_SECURITY_ATTRIBUTE_V1, *PCLAIM_SECURITY_ATTRIBUTE_V1; 
#line 11968
typedef 
#line 11923
struct _CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1 { 
#line 11930
DWORD Name; 
#line 11936
WORD ValueType; 
#line 11943
WORD Reserved; 
#line 11949
DWORD Flags; 
#line 11955
DWORD ValueCount; 
#line 11961
union { 
#line 11962
DWORD pInt64[1]; 
#line 11963
DWORD pUint64[1]; 
#line 11964
DWORD ppString[1]; 
#line 11965
DWORD pFqbn[1]; 
#line 11966
DWORD pOctetString[1]; 
#line 11967
} Values; 
#line 11968
} CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1, *PCLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1; 
#line 12008
typedef 
#line 11990
struct _CLAIM_SECURITY_ATTRIBUTES_INFORMATION { 
#line 11996
WORD Version; 
#line 12002
WORD Reserved; 
#line 12004
DWORD AttributeCount; 
#line 12005
union { 
#line 12006
PCLAIM_SECURITY_ATTRIBUTE_V1 pAttributeV1; 
#line 12007
} Attribute; 
#line 12008
} CLAIM_SECURITY_ATTRIBUTES_INFORMATION, *PCLAIM_SECURITY_ATTRIBUTES_INFORMATION; 
#line 12017
typedef BOOLEAN SECURITY_CONTEXT_TRACKING_MODE, 
#line 12018
*PSECURITY_CONTEXT_TRACKING_MODE; 
#line 12031
typedef 
#line 12026
struct _SECURITY_QUALITY_OF_SERVICE { 
#line 12027
DWORD Length; 
#line 12028
SECURITY_IMPERSONATION_LEVEL ImpersonationLevel; 
#line 12029
SECURITY_CONTEXT_TRACKING_MODE ContextTrackingMode; 
#line 12030
BOOLEAN EffectiveOnly; 
#line 12031
} SECURITY_QUALITY_OF_SERVICE, *PSECURITY_QUALITY_OF_SERVICE; 
#line 12043
typedef 
#line 12038
struct _SE_IMPERSONATION_STATE { 
#line 12039
PACCESS_TOKEN Token; 
#line 12040
BOOLEAN CopyOnOpen; 
#line 12041
BOOLEAN EffectiveOnly; 
#line 12042
SECURITY_IMPERSONATION_LEVEL Level; 
#line 12043
} SE_IMPERSONATION_STATE, *PSE_IMPERSONATION_STATE; 
#line 12050
typedef DWORD SECURITY_INFORMATION, *PSECURITY_INFORMATION; 
#line 12073
typedef BYTE SE_SIGNING_LEVEL, *PSE_SIGNING_LEVEL; 
#line 12108
typedef 
#line 12098
enum _SE_IMAGE_SIGNATURE_TYPE { 
#line 12100
SeImageSignatureNone, 
#line 12101
SeImageSignatureEmbedded, 
#line 12102
SeImageSignatureCache, 
#line 12103
SeImageSignatureCatalogCached, 
#line 12104
SeImageSignatureCatalogNotCached, 
#line 12105
SeImageSignatureCatalogHint, 
#line 12106
SeImageSignaturePackageCatalog, 
#line 12107
SeImageSignaturePplMitigated
#line 12108
} SE_IMAGE_SIGNATURE_TYPE, *PSE_IMAGE_SIGNATURE_TYPE; 
#line 12119
typedef 
#line 12115
enum _SE_LEARNING_MODE_DATA_TYPE { 
#line 12116
SeLearningModeInvalidType, 
#line 12117
SeLearningModeSettings, 
#line 12118
SeLearningModeMax
#line 12119
} SE_LEARNING_MODE_DATA_TYPE; 
#line 12133 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnt.h"
typedef 
#line 12123 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnt.h"
struct _SECURITY_CAPABILITIES { 
#line 12128
PSID AppContainerSid; 
#line 12129
PSID_AND_ATTRIBUTES Capabilities; 
#line 12131 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnt.h"
DWORD CapabilityCount; 
#line 12132
DWORD Reserved; 
#line 12133
} SECURITY_CAPABILITIES, *PSECURITY_CAPABILITIES, *LPSECURITY_CAPABILITIES; 
#line 12205 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnt.h"
typedef 
#line 12201
struct _JOB_SET_ARRAY { 
#line 12202
HANDLE JobHandle; 
#line 12203
DWORD MemberLevel; 
#line 12204
DWORD Flags; 
#line 12205
} JOB_SET_ARRAY, *PJOB_SET_ARRAY; 
#line 12215
typedef 
#line 12212
struct _EXCEPTION_REGISTRATION_RECORD { 
#line 12213
_EXCEPTION_REGISTRATION_RECORD *Next; 
#line 12214
PEXCEPTION_ROUTINE Handler; 
#line 12215
} EXCEPTION_REGISTRATION_RECORD; 
#line 12217
typedef EXCEPTION_REGISTRATION_RECORD *PEXCEPTION_REGISTRATION_RECORD; 
#line 12235 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnt.h"
typedef 
#line 12220 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnt.h"
struct _NT_TIB { 
#line 12221
_EXCEPTION_REGISTRATION_RECORD *ExceptionList; 
#line 12222
PVOID StackBase; 
#line 12223
PVOID StackLimit; 
#line 12224
PVOID SubSystemTib; 
#line 12226
union { 
#line 12227
PVOID FiberData; 
#line 12228
DWORD Version; 
#line 12229
}; 
#line 12233 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnt.h"
PVOID ArbitraryUserPointer; 
#line 12234
_NT_TIB *Self; 
#line 12235
} NT_TIB; 
#line 12236
typedef NT_TIB *PNT_TIB; 
#line 12258 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnt.h"
typedef 
#line 12241 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnt.h"
struct _NT_TIB32 { 
#line 12242
DWORD ExceptionList; 
#line 12243
DWORD StackBase; 
#line 12244
DWORD StackLimit; 
#line 12245
DWORD SubSystemTib; 
#line 12248
union { 
#line 12249
DWORD FiberData; 
#line 12250
DWORD Version; 
#line 12251
}; 
#line 12256 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnt.h"
DWORD ArbitraryUserPointer; 
#line 12257
DWORD Self; 
#line 12258
} NT_TIB32, *PNT_TIB32; 
#line 12278 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnt.h"
typedef 
#line 12260 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnt.h"
struct _NT_TIB64 { 
#line 12261
DWORD64 ExceptionList; 
#line 12262
DWORD64 StackBase; 
#line 12263
DWORD64 StackLimit; 
#line 12264
DWORD64 SubSystemTib; 
#line 12267
union { 
#line 12268
DWORD64 FiberData; 
#line 12269
DWORD Version; 
#line 12270
}; 
#line 12276 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnt.h"
DWORD64 ArbitraryUserPointer; 
#line 12277
DWORD64 Self; 
#line 12278
} NT_TIB64, *PNT_TIB64; 
#line 12295
typedef 
#line 12291
struct _UMS_CREATE_THREAD_ATTRIBUTES { 
#line 12292
DWORD UmsVersion; 
#line 12293
PVOID UmsContext; 
#line 12294
PVOID UmsCompletionList; 
#line 12295
} UMS_CREATE_THREAD_ATTRIBUTES, *PUMS_CREATE_THREAD_ATTRIBUTES; 
#line 12307
typedef 
#line 12305
struct _COMPONENT_FILTER { 
#line 12306
DWORD ComponentFlags; 
#line 12307
} COMPONENT_FILTER, *PCOMPONENT_FILTER; 
#line 12350
typedef 
#line 12347
struct _PROCESS_DYNAMIC_EH_CONTINUATION_TARGET { 
#line 12348
ULONG_PTR TargetAddress; 
#line 12349
ULONG_PTR Flags; 
#line 12350
} PROCESS_DYNAMIC_EH_CONTINUATION_TARGET, *PPROCESS_DYNAMIC_EH_CONTINUATION_TARGET; 
#line 12357
typedef 
#line 12352
struct _PROCESS_DYNAMIC_EH_CONTINUATION_TARGETS_INFORMATION { 
#line 12353
WORD NumberOfTargets; 
#line 12354
WORD Reserved; 
#line 12355
DWORD Reserved2; 
#line 12356
PPROCESS_DYNAMIC_EH_CONTINUATION_TARGET Targets; 
#line 12357
} PROCESS_DYNAMIC_EH_CONTINUATION_TARGETS_INFORMATION, *PPROCESS_DYNAMIC_EH_CONTINUATION_TARGETS_INFORMATION; 
#line 12384
typedef 
#line 12380
struct _PROCESS_DYNAMIC_ENFORCED_ADDRESS_RANGE { 
#line 12381
ULONG_PTR BaseAddress; 
#line 12382
SIZE_T Size; 
#line 12383
DWORD Flags; 
#line 12384
} PROCESS_DYNAMIC_ENFORCED_ADDRESS_RANGE, *PPROCESS_DYNAMIC_ENFORCED_ADDRESS_RANGE; 
#line 12391
typedef 
#line 12386
struct _PROCESS_DYNAMIC_ENFORCED_ADDRESS_RANGES_INFORMATION { 
#line 12387
WORD NumberOfRanges; 
#line 12388
WORD Reserved; 
#line 12389
DWORD Reserved2; 
#line 12390
PPROCESS_DYNAMIC_ENFORCED_ADDRESS_RANGE Ranges; 
#line 12391
} PROCESS_DYNAMIC_ENFORCED_ADDRESS_RANGES_INFORMATION, *PPROCESS_DYNAMIC_ENFORCED_ADDRESS_RANGES_INFORMATION; 
#line 12403
typedef 
#line 12396
struct _QUOTA_LIMITS { 
#line 12397
SIZE_T PagedPoolLimit; 
#line 12398
SIZE_T NonPagedPoolLimit; 
#line 12399
SIZE_T MinimumWorkingSetSize; 
#line 12400
SIZE_T MaximumWorkingSetSize; 
#line 12401
SIZE_T PagefileLimit; 
#line 12402
LARGE_INTEGER TimeLimit; 
#line 12403
} QUOTA_LIMITS, *PQUOTA_LIMITS; 
#line 12417
typedef 
#line 12411
union _RATE_QUOTA_LIMIT { 
#line 12412
DWORD RateData; 
#line 12413
struct { 
#line 12414
DWORD RatePercent:7; 
#line 12415
DWORD Reserved0:25; 
#line 12416
}; 
#line 12417
} RATE_QUOTA_LIMIT, *PRATE_QUOTA_LIMIT; 
#line 12432
typedef 
#line 12419
struct _QUOTA_LIMITS_EX { 
#line 12420
SIZE_T PagedPoolLimit; 
#line 12421
SIZE_T NonPagedPoolLimit; 
#line 12422
SIZE_T MinimumWorkingSetSize; 
#line 12423
SIZE_T MaximumWorkingSetSize; 
#line 12424
SIZE_T PagefileLimit; 
#line 12425
LARGE_INTEGER TimeLimit; 
#line 12426
SIZE_T WorkingSetLimit; 
#line 12427
SIZE_T Reserved2; 
#line 12428
SIZE_T Reserved3; 
#line 12429
SIZE_T Reserved4; 
#line 12430
DWORD Flags; 
#line 12431
RATE_QUOTA_LIMIT CpuRateLimit; 
#line 12432
} QUOTA_LIMITS_EX, *PQUOTA_LIMITS_EX; 
#line 12446
typedef 
#line 12439
struct _IO_COUNTERS { 
#line 12440
ULONGLONG ReadOperationCount; 
#line 12441
ULONGLONG WriteOperationCount; 
#line 12442
ULONGLONG OtherOperationCount; 
#line 12443
ULONGLONG ReadTransferCount; 
#line 12444
ULONGLONG WriteTransferCount; 
#line 12445
ULONGLONG OtherTransferCount; 
#line 12446
} IO_COUNTERS; 
#line 12447
typedef IO_COUNTERS *PIO_COUNTERS; 
#line 12458
typedef 
#line 12455
enum _HARDWARE_COUNTER_TYPE { 
#line 12456
PMCCounter, 
#line 12457
MaxHardwareCounterType
#line 12458
} HARDWARE_COUNTER_TYPE, *PHARDWARE_COUNTER_TYPE; 
#line 12482
typedef 
#line 12463
enum _PROCESS_MITIGATION_POLICY { 
#line 12464
ProcessDEPPolicy, 
#line 12465
ProcessASLRPolicy, 
#line 12466
ProcessDynamicCodePolicy, 
#line 12467
ProcessStrictHandleCheckPolicy, 
#line 12468
ProcessSystemCallDisablePolicy, 
#line 12469
ProcessMitigationOptionsMask, 
#line 12470
ProcessExtensionPointDisablePolicy, 
#line 12471
ProcessControlFlowGuardPolicy, 
#line 12472
ProcessSignaturePolicy, 
#line 12473
ProcessFontDisablePolicy, 
#line 12474
ProcessImageLoadPolicy, 
#line 12475
ProcessSystemCallFilterPolicy, 
#line 12476
ProcessPayloadRestrictionPolicy, 
#line 12477
ProcessChildProcessPolicy, 
#line 12478
ProcessSideChannelIsolationPolicy, 
#line 12479
ProcessUserShadowStackPolicy, 
#line 12480
ProcessRedirectionTrustPolicy, 
#line 12481
MaxProcessMitigationPolicy
#line 12482
} PROCESS_MITIGATION_POLICY, *PPROCESS_MITIGATION_POLICY; 
#line 12500
typedef 
#line 12489
struct _PROCESS_MITIGATION_ASLR_POLICY { 
#line 12490
union { 
#line 12491
DWORD Flags; 
#line 12492
struct { 
#line 12493
DWORD EnableBottomUpRandomization:1; 
#line 12494
DWORD EnableForceRelocateImages:1; 
#line 12495
DWORD EnableHighEntropy:1; 
#line 12496
DWORD DisallowStrippedImages:1; 
#line 12497
DWORD ReservedFlags:28; 
#line 12498
}; 
#line 12499
}; 
#line 12500
} PROCESS_MITIGATION_ASLR_POLICY, *PPROCESS_MITIGATION_ASLR_POLICY; 
#line 12512
typedef 
#line 12502
struct _PROCESS_MITIGATION_DEP_POLICY { 
#line 12503
union { 
#line 12504
DWORD Flags; 
#line 12505
struct { 
#line 12506
DWORD Enable:1; 
#line 12507
DWORD DisableAtlThunkEmulation:1; 
#line 12508
DWORD ReservedFlags:30; 
#line 12509
}; 
#line 12510
}; 
#line 12511
BOOLEAN Permanent; 
#line 12512
} PROCESS_MITIGATION_DEP_POLICY, *PPROCESS_MITIGATION_DEP_POLICY; 
#line 12523
typedef 
#line 12514
struct _PROCESS_MITIGATION_STRICT_HANDLE_CHECK_POLICY { 
#line 12515
union { 
#line 12516
DWORD Flags; 
#line 12517
struct { 
#line 12518
DWORD RaiseExceptionOnInvalidHandleReference:1; 
#line 12519
DWORD HandleExceptionsPermanentlyEnabled:1; 
#line 12520
DWORD ReservedFlags:30; 
#line 12521
}; 
#line 12522
}; 
#line 12523
} PROCESS_MITIGATION_STRICT_HANDLE_CHECK_POLICY, *PPROCESS_MITIGATION_STRICT_HANDLE_CHECK_POLICY; 
#line 12534
typedef 
#line 12525
struct _PROCESS_MITIGATION_SYSTEM_CALL_DISABLE_POLICY { 
#line 12526
union { 
#line 12527
DWORD Flags; 
#line 12528
struct { 
#line 12529
DWORD DisallowWin32kSystemCalls:1; 
#line 12530
DWORD AuditDisallowWin32kSystemCalls:1; 
#line 12531
DWORD ReservedFlags:30; 
#line 12532
}; 
#line 12533
}; 
#line 12534
} PROCESS_MITIGATION_SYSTEM_CALL_DISABLE_POLICY, *PPROCESS_MITIGATION_SYSTEM_CALL_DISABLE_POLICY; 
#line 12544
typedef 
#line 12536
struct _PROCESS_MITIGATION_EXTENSION_POINT_DISABLE_POLICY { 
#line 12537
union { 
#line 12538
DWORD Flags; 
#line 12539
struct { 
#line 12540
DWORD DisableExtensionPoints:1; 
#line 12541
DWORD ReservedFlags:31; 
#line 12542
}; 
#line 12543
}; 
#line 12544
} PROCESS_MITIGATION_EXTENSION_POINT_DISABLE_POLICY, *PPROCESS_MITIGATION_EXTENSION_POINT_DISABLE_POLICY; 
#line 12557
typedef 
#line 12546
struct _PROCESS_MITIGATION_DYNAMIC_CODE_POLICY { 
#line 12547
union { 
#line 12548
DWORD Flags; 
#line 12549
struct { 
#line 12550
DWORD ProhibitDynamicCode:1; 
#line 12551
DWORD AllowThreadOptOut:1; 
#line 12552
DWORD AllowRemoteDowngrade:1; 
#line 12553
DWORD AuditProhibitDynamicCode:1; 
#line 12554
DWORD ReservedFlags:28; 
#line 12555
}; 
#line 12556
}; 
#line 12557
} PROCESS_MITIGATION_DYNAMIC_CODE_POLICY, *PPROCESS_MITIGATION_DYNAMIC_CODE_POLICY; 
#line 12571
typedef 
#line 12559
struct _PROCESS_MITIGATION_CONTROL_FLOW_GUARD_POLICY { 
#line 12560
union { 
#line 12561
DWORD Flags; 
#line 12562
struct { 
#line 12563
DWORD EnableControlFlowGuard:1; 
#line 12564
DWORD EnableExportSuppression:1; 
#line 12565
DWORD StrictMode:1; 
#line 12566
DWORD EnableXfg:1; 
#line 12567
DWORD EnableXfgAuditMode:1; 
#line 12568
DWORD ReservedFlags:27; 
#line 12569
}; 
#line 12570
}; 
#line 12571
} PROCESS_MITIGATION_CONTROL_FLOW_GUARD_POLICY, *PPROCESS_MITIGATION_CONTROL_FLOW_GUARD_POLICY; 
#line 12585
typedef 
#line 12573
struct _PROCESS_MITIGATION_BINARY_SIGNATURE_POLICY { 
#line 12574
union { 
#line 12575
DWORD Flags; 
#line 12576
struct { 
#line 12577
DWORD MicrosoftSignedOnly:1; 
#line 12578
DWORD StoreSignedOnly:1; 
#line 12579
DWORD MitigationOptIn:1; 
#line 12580
DWORD AuditMicrosoftSignedOnly:1; 
#line 12581
DWORD AuditStoreSignedOnly:1; 
#line 12582
DWORD ReservedFlags:27; 
#line 12583
}; 
#line 12584
}; 
#line 12585
} PROCESS_MITIGATION_BINARY_SIGNATURE_POLICY, *PPROCESS_MITIGATION_BINARY_SIGNATURE_POLICY; 
#line 12596
typedef 
#line 12587
struct _PROCESS_MITIGATION_FONT_DISABLE_POLICY { 
#line 12588
union { 
#line 12589
DWORD Flags; 
#line 12590
struct { 
#line 12591
DWORD DisableNonSystemFonts:1; 
#line 12592
DWORD AuditNonSystemFontLoading:1; 
#line 12593
DWORD ReservedFlags:30; 
#line 12594
}; 
#line 12595
}; 
#line 12596
} PROCESS_MITIGATION_FONT_DISABLE_POLICY, *PPROCESS_MITIGATION_FONT_DISABLE_POLICY; 
#line 12610
typedef 
#line 12598
struct _PROCESS_MITIGATION_IMAGE_LOAD_POLICY { 
#line 12599
union { 
#line 12600
DWORD Flags; 
#line 12601
struct { 
#line 12602
DWORD NoRemoteImages:1; 
#line 12603
DWORD NoLowMandatoryLabelImages:1; 
#line 12604
DWORD PreferSystem32Images:1; 
#line 12605
DWORD AuditNoRemoteImages:1; 
#line 12606
DWORD AuditNoLowMandatoryLabelImages:1; 
#line 12607
DWORD ReservedFlags:27; 
#line 12608
}; 
#line 12609
}; 
#line 12610
} PROCESS_MITIGATION_IMAGE_LOAD_POLICY, *PPROCESS_MITIGATION_IMAGE_LOAD_POLICY; 
#line 12620
typedef 
#line 12612
struct _PROCESS_MITIGATION_SYSTEM_CALL_FILTER_POLICY { 
#line 12613
union { 
#line 12614
DWORD Flags; 
#line 12615
struct { 
#line 12616
DWORD FilterId:4; 
#line 12617
DWORD ReservedFlags:28; 
#line 12618
}; 
#line 12619
}; 
#line 12620
} PROCESS_MITIGATION_SYSTEM_CALL_FILTER_POLICY, *PPROCESS_MITIGATION_SYSTEM_CALL_FILTER_POLICY; 
#line 12647
typedef 
#line 12622
struct _PROCESS_MITIGATION_PAYLOAD_RESTRICTION_POLICY { 
#line 12623
union { 
#line 12624
DWORD Flags; 
#line 12625
struct { 
#line 12626
DWORD EnableExportAddressFilter:1; 
#line 12627
DWORD AuditExportAddressFilter:1; 
#line 12629
DWORD EnableExportAddressFilterPlus:1; 
#line 12630
DWORD AuditExportAddressFilterPlus:1; 
#line 12632
DWORD EnableImportAddressFilter:1; 
#line 12633
DWORD AuditImportAddressFilter:1; 
#line 12635
DWORD EnableRopStackPivot:1; 
#line 12636
DWORD AuditRopStackPivot:1; 
#line 12638
DWORD EnableRopCallerCheck:1; 
#line 12639
DWORD AuditRopCallerCheck:1; 
#line 12641
DWORD EnableRopSimExec:1; 
#line 12642
DWORD AuditRopSimExec:1; 
#line 12644
DWORD ReservedFlags:20; 
#line 12645
}; 
#line 12646
}; 
#line 12647
} PROCESS_MITIGATION_PAYLOAD_RESTRICTION_POLICY, *PPROCESS_MITIGATION_PAYLOAD_RESTRICTION_POLICY; 
#line 12659
typedef 
#line 12649
struct _PROCESS_MITIGATION_CHILD_PROCESS_POLICY { 
#line 12650
union { 
#line 12651
DWORD Flags; 
#line 12652
struct { 
#line 12653
DWORD NoChildProcessCreation:1; 
#line 12654
DWORD AuditNoChildProcessCreation:1; 
#line 12655
DWORD AllowSecureProcessCreation:1; 
#line 12656
DWORD ReservedFlags:29; 
#line 12657
}; 
#line 12658
}; 
#line 12659
} PROCESS_MITIGATION_CHILD_PROCESS_POLICY, *PPROCESS_MITIGATION_CHILD_PROCESS_POLICY; 
#line 12705
typedef 
#line 12661
struct _PROCESS_MITIGATION_SIDE_CHANNEL_ISOLATION_POLICY { 
#line 12662
union { 
#line 12663
DWORD Flags; 
#line 12664
struct { 
#line 12670
DWORD SmtBranchTargetIsolation:1; 
#line 12686
DWORD IsolateSecurityDomain:1; 
#line 12693
DWORD DisablePageCombine:1; 
#line 12699
DWORD SpeculativeStoreBypassDisable:1; 
#line 12701
DWORD ReservedFlags:28; 
#line 12703
}; 
#line 12704
}; 
#line 12705
} PROCESS_MITIGATION_SIDE_CHANNEL_ISOLATION_POLICY, *PPROCESS_MITIGATION_SIDE_CHANNEL_ISOLATION_POLICY; 
#line 12725
typedef 
#line 12707
struct _PROCESS_MITIGATION_USER_SHADOW_STACK_POLICY { 
#line 12708
union { 
#line 12709
DWORD Flags; 
#line 12710
struct { 
#line 12711
DWORD EnableUserShadowStack:1; 
#line 12712
DWORD AuditUserShadowStack:1; 
#line 12713
DWORD SetContextIpValidation:1; 
#line 12714
DWORD AuditSetContextIpValidation:1; 
#line 12715
DWORD EnableUserShadowStackStrictMode:1; 
#line 12716
DWORD BlockNonCetBinaries:1; 
#line 12717
DWORD BlockNonCetBinariesNonEhcont:1; 
#line 12718
DWORD AuditBlockNonCetBinaries:1; 
#line 12719
DWORD CetDynamicApisOutOfProcOnly:1; 
#line 12720
DWORD SetContextIpValidationRelaxedMode:1; 
#line 12721
DWORD ReservedFlags:22; 
#line 12723
}; 
#line 12724
}; 
#line 12725
} PROCESS_MITIGATION_USER_SHADOW_STACK_POLICY, *PPROCESS_MITIGATION_USER_SHADOW_STACK_POLICY; 
#line 12736
typedef 
#line 12727
struct _PROCESS_MITIGATION_REDIRECTION_TRUST_POLICY { 
#line 12728
union { 
#line 12729
DWORD Flags; 
#line 12730
struct { 
#line 12731
DWORD EnforceRedirectionTrust:1; 
#line 12732
DWORD AuditRedirectionTrust:1; 
#line 12733
DWORD ReservedFlags:30; 
#line 12734
}; 
#line 12735
}; 
#line 12736
} PROCESS_MITIGATION_REDIRECTION_TRUST_POLICY, *PPROCESS_MITIGATION_REDIRECTION_TRUST_POLICY; 
#line 12750
typedef 
#line 12741
struct _JOBOBJECT_BASIC_ACCOUNTING_INFORMATION { 
#line 12742
LARGE_INTEGER TotalUserTime; 
#line 12743
LARGE_INTEGER TotalKernelTime; 
#line 12744
LARGE_INTEGER ThisPeriodTotalUserTime; 
#line 12745
LARGE_INTEGER ThisPeriodTotalKernelTime; 
#line 12746
DWORD TotalPageFaultCount; 
#line 12747
DWORD TotalProcesses; 
#line 12748
DWORD ActiveProcesses; 
#line 12749
DWORD TotalTerminatedProcesses; 
#line 12750
} JOBOBJECT_BASIC_ACCOUNTING_INFORMATION, *PJOBOBJECT_BASIC_ACCOUNTING_INFORMATION; 
#line 12763
typedef 
#line 12753
struct _JOBOBJECT_BASIC_LIMIT_INFORMATION { 
#line 12754
LARGE_INTEGER PerProcessUserTimeLimit; 
#line 12755
LARGE_INTEGER PerJobUserTimeLimit; 
#line 12756
DWORD LimitFlags; 
#line 12757
SIZE_T MinimumWorkingSetSize; 
#line 12758
SIZE_T MaximumWorkingSetSize; 
#line 12759
DWORD ActiveProcessLimit; 
#line 12760
ULONG_PTR Affinity; 
#line 12761
DWORD PriorityClass; 
#line 12762
DWORD SchedulingClass; 
#line 12763
} JOBOBJECT_BASIC_LIMIT_INFORMATION, *PJOBOBJECT_BASIC_LIMIT_INFORMATION; 
#line 12773
typedef 
#line 12766
struct _JOBOBJECT_EXTENDED_LIMIT_INFORMATION { 
#line 12767
JOBOBJECT_BASIC_LIMIT_INFORMATION BasicLimitInformation; 
#line 12768
IO_COUNTERS IoInfo; 
#line 12769
SIZE_T ProcessMemoryLimit; 
#line 12770
SIZE_T JobMemoryLimit; 
#line 12771
SIZE_T PeakProcessMemoryUsed; 
#line 12772
SIZE_T PeakJobMemoryUsed; 
#line 12773
} JOBOBJECT_EXTENDED_LIMIT_INFORMATION, *PJOBOBJECT_EXTENDED_LIMIT_INFORMATION; 
#line 12783
typedef 
#line 12779
struct _JOBOBJECT_BASIC_PROCESS_ID_LIST { 
#line 12780
DWORD NumberOfAssignedProcesses; 
#line 12781
DWORD NumberOfProcessIdsInList; 
#line 12782
ULONG_PTR ProcessIdList[1]; 
#line 12783
} JOBOBJECT_BASIC_PROCESS_ID_LIST, *PJOBOBJECT_BASIC_PROCESS_ID_LIST; 
#line 12787
typedef 
#line 12785
struct _JOBOBJECT_BASIC_UI_RESTRICTIONS { 
#line 12786
DWORD UIRestrictionsClass; 
#line 12787
} JOBOBJECT_BASIC_UI_RESTRICTIONS, *PJOBOBJECT_BASIC_UI_RESTRICTIONS; 
#line 12799
typedef 
#line 12793
struct _JOBOBJECT_SECURITY_LIMIT_INFORMATION { 
#line 12794
DWORD SecurityLimitFlags; 
#line 12795
HANDLE JobToken; 
#line 12796
PTOKEN_GROUPS SidsToDisable; 
#line 12797
PTOKEN_PRIVILEGES PrivilegesToDelete; 
#line 12798
PTOKEN_GROUPS RestrictedSids; 
#line 12799
} JOBOBJECT_SECURITY_LIMIT_INFORMATION, *PJOBOBJECT_SECURITY_LIMIT_INFORMATION; 
#line 12803
typedef 
#line 12801
struct _JOBOBJECT_END_OF_JOB_TIME_INFORMATION { 
#line 12802
DWORD EndOfJobTimeAction; 
#line 12803
} JOBOBJECT_END_OF_JOB_TIME_INFORMATION, *PJOBOBJECT_END_OF_JOB_TIME_INFORMATION; 
#line 12808
typedef 
#line 12805
struct _JOBOBJECT_ASSOCIATE_COMPLETION_PORT { 
#line 12806
PVOID CompletionKey; 
#line 12807
HANDLE CompletionPort; 
#line 12808
} JOBOBJECT_ASSOCIATE_COMPLETION_PORT, *PJOBOBJECT_ASSOCIATE_COMPLETION_PORT; 
#line 12813
typedef 
#line 12810
struct _JOBOBJECT_BASIC_AND_IO_ACCOUNTING_INFORMATION { 
#line 12811
JOBOBJECT_BASIC_ACCOUNTING_INFORMATION BasicInfo; 
#line 12812
IO_COUNTERS IoInfo; 
#line 12813
} JOBOBJECT_BASIC_AND_IO_ACCOUNTING_INFORMATION, *PJOBOBJECT_BASIC_AND_IO_ACCOUNTING_INFORMATION; 
#line 12817
typedef 
#line 12815
struct _JOBOBJECT_JOBSET_INFORMATION { 
#line 12816
DWORD MemberLevel; 
#line 12817
} JOBOBJECT_JOBSET_INFORMATION, *PJOBOBJECT_JOBSET_INFORMATION; 
#line 12823
typedef 
#line 12819
enum _JOBOBJECT_RATE_CONTROL_TOLERANCE { 
#line 12820
ToleranceLow = 1, 
#line 12821
ToleranceMedium, 
#line 12822
ToleranceHigh
#line 12823
} JOBOBJECT_RATE_CONTROL_TOLERANCE, *PJOBOBJECT_RATE_CONTROL_TOLERANCE; 
#line 12829
typedef 
#line 12825
enum _JOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVAL { 
#line 12826
ToleranceIntervalShort = 1, 
#line 12827
ToleranceIntervalMedium, 
#line 12828
ToleranceIntervalLong
#line 12829
} JOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVAL, 
#line 12830
*PJOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVAL; 
#line 12840
typedef 
#line 12832
struct _JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION { 
#line 12833
DWORD64 IoReadBytesLimit; 
#line 12834
DWORD64 IoWriteBytesLimit; 
#line 12835
LARGE_INTEGER PerJobUserTimeLimit; 
#line 12836
DWORD64 JobMemoryLimit; 
#line 12837
JOBOBJECT_RATE_CONTROL_TOLERANCE RateControlTolerance; 
#line 12838
JOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVAL RateControlToleranceInterval; 
#line 12839
DWORD LimitFlags; 
#line 12840
} JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION, *PJOBOBJECT_NOTIFICATION_LIMIT_INFORMATION; 
#line 12868
typedef 
#line 12842
struct JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2 { 
#line 12843
DWORD64 IoReadBytesLimit; 
#line 12844
DWORD64 IoWriteBytesLimit; 
#line 12845
LARGE_INTEGER PerJobUserTimeLimit; 
#line 12846
union { 
#line 12847
DWORD64 JobHighMemoryLimit; 
#line 12848
DWORD64 JobMemoryLimit; 
#line 12849
}; 
#line 12851
union { 
#line 12852
JOBOBJECT_RATE_CONTROL_TOLERANCE RateControlTolerance; 
#line 12853
JOBOBJECT_RATE_CONTROL_TOLERANCE CpuRateControlTolerance; 
#line 12854
}; 
#line 12856
union { 
#line 12857
JOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVAL RateControlToleranceInterval; 
#line 12859
JOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVAL CpuRateControlToleranceInterval; 
#line 12860
}; 
#line 12862
DWORD LimitFlags; 
#line 12863
JOBOBJECT_RATE_CONTROL_TOLERANCE IoRateControlTolerance; 
#line 12864
DWORD64 JobLowMemoryLimit; 
#line 12865
JOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVAL IoRateControlToleranceInterval; 
#line 12866
JOBOBJECT_RATE_CONTROL_TOLERANCE NetRateControlTolerance; 
#line 12867
JOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVAL NetRateControlToleranceInterval; 
#line 12868
} JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2; 
#line 12886
typedef 
#line 12873
struct _JOBOBJECT_LIMIT_VIOLATION_INFORMATION { 
#line 12874
DWORD LimitFlags; 
#line 12875
DWORD ViolationLimitFlags; 
#line 12876
DWORD64 IoReadBytes; 
#line 12877
DWORD64 IoReadBytesLimit; 
#line 12878
DWORD64 IoWriteBytes; 
#line 12879
DWORD64 IoWriteBytesLimit; 
#line 12880
LARGE_INTEGER PerJobUserTime; 
#line 12881
LARGE_INTEGER PerJobUserTimeLimit; 
#line 12882
DWORD64 JobMemory; 
#line 12883
DWORD64 JobMemoryLimit; 
#line 12884
JOBOBJECT_RATE_CONTROL_TOLERANCE RateControlTolerance; 
#line 12885
JOBOBJECT_RATE_CONTROL_TOLERANCE RateControlToleranceLimit; 
#line 12886
} JOBOBJECT_LIMIT_VIOLATION_INFORMATION, *PJOBOBJECT_LIMIT_VIOLATION_INFORMATION; 
#line 12918
typedef 
#line 12888
struct JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2 { 
#line 12889
DWORD LimitFlags; 
#line 12890
DWORD ViolationLimitFlags; 
#line 12891
DWORD64 IoReadBytes; 
#line 12892
DWORD64 IoReadBytesLimit; 
#line 12893
DWORD64 IoWriteBytes; 
#line 12894
DWORD64 IoWriteBytesLimit; 
#line 12895
LARGE_INTEGER PerJobUserTime; 
#line 12896
LARGE_INTEGER PerJobUserTimeLimit; 
#line 12897
DWORD64 JobMemory; 
#line 12898
union { 
#line 12899
DWORD64 JobHighMemoryLimit; 
#line 12900
DWORD64 JobMemoryLimit; 
#line 12901
}; 
#line 12903
union { 
#line 12904
JOBOBJECT_RATE_CONTROL_TOLERANCE RateControlTolerance; 
#line 12905
JOBOBJECT_RATE_CONTROL_TOLERANCE CpuRateControlTolerance; 
#line 12906
}; 
#line 12908
union { 
#line 12909
JOBOBJECT_RATE_CONTROL_TOLERANCE RateControlToleranceLimit; 
#line 12910
JOBOBJECT_RATE_CONTROL_TOLERANCE CpuRateControlToleranceLimit; 
#line 12911
}; 
#line 12913
DWORD64 JobLowMemoryLimit; 
#line 12914
JOBOBJECT_RATE_CONTROL_TOLERANCE IoRateControlTolerance; 
#line 12915
JOBOBJECT_RATE_CONTROL_TOLERANCE IoRateControlToleranceLimit; 
#line 12916
JOBOBJECT_RATE_CONTROL_TOLERANCE NetRateControlTolerance; 
#line 12917
JOBOBJECT_RATE_CONTROL_TOLERANCE NetRateControlToleranceLimit; 
#line 12918
} JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2; 
#line 12933
typedef 
#line 12923
struct _JOBOBJECT_CPU_RATE_CONTROL_INFORMATION { 
#line 12924
DWORD ControlFlags; 
#line 12925
union { 
#line 12926
DWORD CpuRate; 
#line 12927
DWORD Weight; 
#line 12928
struct { 
#line 12929
WORD MinRate; 
#line 12930
WORD MaxRate; 
#line 12931
}; 
#line 12932
}; 
#line 12933
} JOBOBJECT_CPU_RATE_CONTROL_INFORMATION, *PJOBOBJECT_CPU_RATE_CONTROL_INFORMATION; 
#line 12944
typedef 
#line 12939
enum JOB_OBJECT_NET_RATE_CONTROL_FLAGS { 
#line 12940
JOB_OBJECT_NET_RATE_CONTROL_ENABLE = 1, 
#line 12941
JOB_OBJECT_NET_RATE_CONTROL_MAX_BANDWIDTH, 
#line 12942
JOB_OBJECT_NET_RATE_CONTROL_DSCP_TAG = 4, 
#line 12943
JOB_OBJECT_NET_RATE_CONTROL_VALID_FLAGS = 7
#line 12944
} JOB_OBJECT_NET_RATE_CONTROL_FLAGS; 
#line 12948
extern "C++" {constexpr JOB_OBJECT_NET_RATE_CONTROL_FLAGS operator|(JOB_OBJECT_NET_RATE_CONTROL_FLAGS a, JOB_OBJECT_NET_RATE_CONTROL_FLAGS b) noexcept { return (JOB_OBJECT_NET_RATE_CONTROL_FLAGS)(((_ENUM_FLAG_SIZED_INTEGER< JOB_OBJECT_NET_RATE_CONTROL_FLAGS> ::type)a) | ((_ENUM_FLAG_SIZED_INTEGER< JOB_OBJECT_NET_RATE_CONTROL_FLAGS> ::type)b)); } inline JOB_OBJECT_NET_RATE_CONTROL_FLAGS &operator|=(JOB_OBJECT_NET_RATE_CONTROL_FLAGS &a, JOB_OBJECT_NET_RATE_CONTROL_FLAGS b) noexcept { return (JOB_OBJECT_NET_RATE_CONTROL_FLAGS &)(((_ENUM_FLAG_SIZED_INTEGER< JOB_OBJECT_NET_RATE_CONTROL_FLAGS> ::type &)a) |= ((_ENUM_FLAG_SIZED_INTEGER< JOB_OBJECT_NET_RATE_CONTROL_FLAGS> ::type)b)); } constexpr JOB_OBJECT_NET_RATE_CONTROL_FLAGS operator&(JOB_OBJECT_NET_RATE_CONTROL_FLAGS a, JOB_OBJECT_NET_RATE_CONTROL_FLAGS b) noexcept { return (JOB_OBJECT_NET_RATE_CONTROL_FLAGS)(((_ENUM_FLAG_SIZED_INTEGER< JOB_OBJECT_NET_RATE_CONTROL_FLAGS> ::type)a) & ((_ENUM_FLAG_SIZED_INTEGER< JOB_OBJECT_NET_RATE_CONTROL_FLAGS> ::type)b)); } inline JOB_OBJECT_NET_RATE_CONTROL_FLAGS &operator&=(JOB_OBJECT_NET_RATE_CONTROL_FLAGS &a, JOB_OBJECT_NET_RATE_CONTROL_FLAGS b) noexcept { return (JOB_OBJECT_NET_RATE_CONTROL_FLAGS &)(((_ENUM_FLAG_SIZED_INTEGER< JOB_OBJECT_NET_RATE_CONTROL_FLAGS> ::type &)a) &= ((_ENUM_FLAG_SIZED_INTEGER< JOB_OBJECT_NET_RATE_CONTROL_FLAGS> ::type)b)); } constexpr JOB_OBJECT_NET_RATE_CONTROL_FLAGS operator~(JOB_OBJECT_NET_RATE_CONTROL_FLAGS a) noexcept { return (JOB_OBJECT_NET_RATE_CONTROL_FLAGS)(~((_ENUM_FLAG_SIZED_INTEGER< JOB_OBJECT_NET_RATE_CONTROL_FLAGS> ::type)a)); } constexpr JOB_OBJECT_NET_RATE_CONTROL_FLAGS operator^(JOB_OBJECT_NET_RATE_CONTROL_FLAGS a, JOB_OBJECT_NET_RATE_CONTROL_FLAGS b) noexcept { return (JOB_OBJECT_NET_RATE_CONTROL_FLAGS)(((_ENUM_FLAG_SIZED_INTEGER< JOB_OBJECT_NET_RATE_CONTROL_FLAGS> ::type)a) ^ ((_ENUM_FLAG_SIZED_INTEGER< JOB_OBJECT_NET_RATE_CONTROL_FLAGS> ::type)b)); } inline JOB_OBJECT_NET_RATE_CONTROL_FLAGS &operator^=(JOB_OBJECT_NET_RATE_CONTROL_FLAGS &a, JOB_OBJECT_NET_RATE_CONTROL_FLAGS b) noexcept { return (JOB_OBJECT_NET_RATE_CONTROL_FLAGS &)(((_ENUM_FLAG_SIZED_INTEGER< JOB_OBJECT_NET_RATE_CONTROL_FLAGS> ::type &)a) ^= ((_ENUM_FLAG_SIZED_INTEGER< JOB_OBJECT_NET_RATE_CONTROL_FLAGS> ::type)b)); } }
#line 12949
typedef char __C_ASSERT__[((JOB_OBJECT_NET_RATE_CONTROL_VALID_FLAGS) == (((JOB_OBJECT_NET_RATE_CONTROL_ENABLE) + (JOB_OBJECT_NET_RATE_CONTROL_MAX_BANDWIDTH)) + (JOB_OBJECT_NET_RATE_CONTROL_DSCP_TAG))) ? 1 : (-1)]; 
#line 12962 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnt.h"
typedef 
#line 12958
struct JOBOBJECT_NET_RATE_CONTROL_INFORMATION { 
#line 12959
DWORD64 MaxBandwidth; 
#line 12960
JOB_OBJECT_NET_RATE_CONTROL_FLAGS ControlFlags; 
#line 12961
BYTE DscpTag; 
#line 12962
} JOBOBJECT_NET_RATE_CONTROL_INFORMATION; 
#line 12980
typedef 
#line 12971
enum JOB_OBJECT_IO_RATE_CONTROL_FLAGS { 
#line 12972
JOB_OBJECT_IO_RATE_CONTROL_ENABLE = 1, 
#line 12973
JOB_OBJECT_IO_RATE_CONTROL_STANDALONE_VOLUME, 
#line 12974
JOB_OBJECT_IO_RATE_CONTROL_FORCE_UNIT_ACCESS_ALL = 4, 
#line 12975
JOB_OBJECT_IO_RATE_CONTROL_FORCE_UNIT_ACCESS_ON_SOFT_CAP = 8, 
#line 12976
JOB_OBJECT_IO_RATE_CONTROL_VALID_FLAGS = (((JOB_OBJECT_IO_RATE_CONTROL_ENABLE | JOB_OBJECT_IO_RATE_CONTROL_STANDALONE_VOLUME) | JOB_OBJECT_IO_RATE_CONTROL_FORCE_UNIT_ACCESS_ALL) | JOB_OBJECT_IO_RATE_CONTROL_FORCE_UNIT_ACCESS_ON_SOFT_CAP)
#line 12980
} JOB_OBJECT_IO_RATE_CONTROL_FLAGS; 
#line 12984
extern "C++" {constexpr JOB_OBJECT_IO_RATE_CONTROL_FLAGS operator|(JOB_OBJECT_IO_RATE_CONTROL_FLAGS a, JOB_OBJECT_IO_RATE_CONTROL_FLAGS b) noexcept { return (JOB_OBJECT_IO_RATE_CONTROL_FLAGS)(((_ENUM_FLAG_SIZED_INTEGER< JOB_OBJECT_IO_RATE_CONTROL_FLAGS> ::type)a) | ((_ENUM_FLAG_SIZED_INTEGER< JOB_OBJECT_IO_RATE_CONTROL_FLAGS> ::type)b)); } inline JOB_OBJECT_IO_RATE_CONTROL_FLAGS &operator|=(JOB_OBJECT_IO_RATE_CONTROL_FLAGS &a, JOB_OBJECT_IO_RATE_CONTROL_FLAGS b) noexcept { return (JOB_OBJECT_IO_RATE_CONTROL_FLAGS &)(((_ENUM_FLAG_SIZED_INTEGER< JOB_OBJECT_IO_RATE_CONTROL_FLAGS> ::type &)a) |= ((_ENUM_FLAG_SIZED_INTEGER< JOB_OBJECT_IO_RATE_CONTROL_FLAGS> ::type)b)); } constexpr JOB_OBJECT_IO_RATE_CONTROL_FLAGS operator&(JOB_OBJECT_IO_RATE_CONTROL_FLAGS a, JOB_OBJECT_IO_RATE_CONTROL_FLAGS b) noexcept { return (JOB_OBJECT_IO_RATE_CONTROL_FLAGS)(((_ENUM_FLAG_SIZED_INTEGER< JOB_OBJECT_IO_RATE_CONTROL_FLAGS> ::type)a) & ((_ENUM_FLAG_SIZED_INTEGER< JOB_OBJECT_IO_RATE_CONTROL_FLAGS> ::type)b)); } inline JOB_OBJECT_IO_RATE_CONTROL_FLAGS &operator&=(JOB_OBJECT_IO_RATE_CONTROL_FLAGS &a, JOB_OBJECT_IO_RATE_CONTROL_FLAGS b) noexcept { return (JOB_OBJECT_IO_RATE_CONTROL_FLAGS &)(((_ENUM_FLAG_SIZED_INTEGER< JOB_OBJECT_IO_RATE_CONTROL_FLAGS> ::type &)a) &= ((_ENUM_FLAG_SIZED_INTEGER< JOB_OBJECT_IO_RATE_CONTROL_FLAGS> ::type)b)); } constexpr JOB_OBJECT_IO_RATE_CONTROL_FLAGS operator~(JOB_OBJECT_IO_RATE_CONTROL_FLAGS a) noexcept { return (JOB_OBJECT_IO_RATE_CONTROL_FLAGS)(~((_ENUM_FLAG_SIZED_INTEGER< JOB_OBJECT_IO_RATE_CONTROL_FLAGS> ::type)a)); } constexpr JOB_OBJECT_IO_RATE_CONTROL_FLAGS operator^(JOB_OBJECT_IO_RATE_CONTROL_FLAGS a, JOB_OBJECT_IO_RATE_CONTROL_FLAGS b) noexcept { return (JOB_OBJECT_IO_RATE_CONTROL_FLAGS)(((_ENUM_FLAG_SIZED_INTEGER< JOB_OBJECT_IO_RATE_CONTROL_FLAGS> ::type)a) ^ ((_ENUM_FLAG_SIZED_INTEGER< JOB_OBJECT_IO_RATE_CONTROL_FLAGS> ::type)b)); } inline JOB_OBJECT_IO_RATE_CONTROL_FLAGS &operator^=(JOB_OBJECT_IO_RATE_CONTROL_FLAGS &a, JOB_OBJECT_IO_RATE_CONTROL_FLAGS b) noexcept { return (JOB_OBJECT_IO_RATE_CONTROL_FLAGS &)(((_ENUM_FLAG_SIZED_INTEGER< JOB_OBJECT_IO_RATE_CONTROL_FLAGS> ::type &)a) ^= ((_ENUM_FLAG_SIZED_INTEGER< JOB_OBJECT_IO_RATE_CONTROL_FLAGS> ::type)b)); } }
#line 12996 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnt.h"
typedef 
#line 12988
struct JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE { 
#line 12989
LONG64 MaxIops; 
#line 12990
LONG64 MaxBandwidth; 
#line 12991
LONG64 ReservationIops; 
#line 12992
PWSTR VolumeName; 
#line 12993
DWORD BaseIoSize; 
#line 12994
JOB_OBJECT_IO_RATE_CONTROL_FLAGS ControlFlags; 
#line 12995
WORD VolumeNameLength; 
#line 12996
} JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE; 
#line 12999
typedef JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V1; 
#line 13015
typedef 
#line 13001
struct JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2 { 
#line 13002
LONG64 MaxIops; 
#line 13003
LONG64 MaxBandwidth; 
#line 13004
LONG64 ReservationIops; 
#line 13005
PWSTR VolumeName; 
#line 13006
DWORD BaseIoSize; 
#line 13007
JOB_OBJECT_IO_RATE_CONTROL_FLAGS ControlFlags; 
#line 13008
WORD VolumeNameLength; 
#line 13009
LONG64 CriticalReservationIops; 
#line 13010
LONG64 ReservationBandwidth; 
#line 13011
LONG64 CriticalReservationBandwidth; 
#line 13012
LONG64 MaxTimePercent; 
#line 13013
LONG64 ReservationTimePercent; 
#line 13014
LONG64 CriticalReservationTimePercent; 
#line 13015
} JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2; 
#line 13037
typedef 
#line 13017
struct JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3 { 
#line 13018
LONG64 MaxIops; 
#line 13019
LONG64 MaxBandwidth; 
#line 13020
LONG64 ReservationIops; 
#line 13021
PWSTR VolumeName; 
#line 13022
DWORD BaseIoSize; 
#line 13023
JOB_OBJECT_IO_RATE_CONTROL_FLAGS ControlFlags; 
#line 13024
WORD VolumeNameLength; 
#line 13025
LONG64 CriticalReservationIops; 
#line 13026
LONG64 ReservationBandwidth; 
#line 13027
LONG64 CriticalReservationBandwidth; 
#line 13028
LONG64 MaxTimePercent; 
#line 13029
LONG64 ReservationTimePercent; 
#line 13030
LONG64 CriticalReservationTimePercent; 
#line 13031
LONG64 SoftMaxIops; 
#line 13032
LONG64 SoftMaxBandwidth; 
#line 13033
LONG64 SoftMaxTimePercent; 
#line 13034
LONG64 LimitExcessNotifyIops; 
#line 13035
LONG64 LimitExcessNotifyBandwidth; 
#line 13036
LONG64 LimitExcessNotifyTimePercent; 
#line 13037
} JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3; 
#line 13046
typedef 
#line 13042
enum JOBOBJECT_IO_ATTRIBUTION_CONTROL_FLAGS { 
#line 13043
JOBOBJECT_IO_ATTRIBUTION_CONTROL_ENABLE = 1, 
#line 13044
JOBOBJECT_IO_ATTRIBUTION_CONTROL_DISABLE, 
#line 13045
JOBOBJECT_IO_ATTRIBUTION_CONTROL_VALID_FLAGS
#line 13046
} JOBOBJECT_IO_ATTRIBUTION_CONTROL_FLAGS; 
#line 13055
typedef 
#line 13048
struct _JOBOBJECT_IO_ATTRIBUTION_STATS { 
#line 13050
ULONG_PTR IoCount; 
#line 13051
ULONGLONG TotalNonOverlappedQueueTime; 
#line 13052
ULONGLONG TotalNonOverlappedServiceTime; 
#line 13053
ULONGLONG TotalSize; 
#line 13055
} JOBOBJECT_IO_ATTRIBUTION_STATS, *PJOBOBJECT_IO_ATTRIBUTION_STATS; 
#line 13063
typedef 
#line 13057
struct _JOBOBJECT_IO_ATTRIBUTION_INFORMATION { 
#line 13058
DWORD ControlFlags; 
#line 13060
JOBOBJECT_IO_ATTRIBUTION_STATS ReadStats; 
#line 13061
JOBOBJECT_IO_ATTRIBUTION_STATS WriteStats; 
#line 13063
} JOBOBJECT_IO_ATTRIBUTION_INFORMATION, *PJOBOBJECT_IO_ATTRIBUTION_INFORMATION; 
#line 13254
typedef 
#line 13201
enum _JOBOBJECTINFOCLASS { 
#line 13202
JobObjectBasicAccountingInformation = 1, 
#line 13203
JobObjectBasicLimitInformation, 
#line 13204
JobObjectBasicProcessIdList, 
#line 13205
JobObjectBasicUIRestrictions, 
#line 13206
JobObjectSecurityLimitInformation, 
#line 13207
JobObjectEndOfJobTimeInformation, 
#line 13208
JobObjectAssociateCompletionPortInformation, 
#line 13209
JobObjectBasicAndIoAccountingInformation, 
#line 13210
JobObjectExtendedLimitInformation, 
#line 13211
JobObjectJobSetInformation, 
#line 13212
JobObjectGroupInformation, 
#line 13213
JobObjectNotificationLimitInformation, 
#line 13214
JobObjectLimitViolationInformation, 
#line 13215
JobObjectGroupInformationEx, 
#line 13216
JobObjectCpuRateControlInformation, 
#line 13217
JobObjectCompletionFilter, 
#line 13218
JobObjectCompletionCounter, 
#line 13223
JobObjectReserved1Information, 
#line 13224
JobObjectReserved2Information, 
#line 13225
JobObjectReserved3Information, 
#line 13226
JobObjectReserved4Information, 
#line 13227
JobObjectReserved5Information, 
#line 13228
JobObjectReserved6Information, 
#line 13229
JobObjectReserved7Information, 
#line 13230
JobObjectReserved8Information, 
#line 13231
JobObjectReserved9Information, 
#line 13232
JobObjectReserved10Information, 
#line 13233
JobObjectReserved11Information, 
#line 13234
JobObjectReserved12Information, 
#line 13235
JobObjectReserved13Information, 
#line 13236
JobObjectReserved14Information, 
#line 13237
JobObjectNetRateControlInformation, 
#line 13238
JobObjectNotificationLimitInformation2, 
#line 13239
JobObjectLimitViolationInformation2, 
#line 13240
JobObjectCreateSilo, 
#line 13241
JobObjectSiloBasicInformation, 
#line 13242
JobObjectReserved15Information, 
#line 13243
JobObjectReserved16Information, 
#line 13244
JobObjectReserved17Information, 
#line 13245
JobObjectReserved18Information, 
#line 13246
JobObjectReserved19Information, 
#line 13247
JobObjectReserved20Information, 
#line 13248
JobObjectReserved21Information, 
#line 13249
JobObjectReserved22Information, 
#line 13250
JobObjectReserved23Information, 
#line 13251
JobObjectReserved24Information, 
#line 13252
JobObjectReserved25Information, 
#line 13253
MaxJobObjectInfoClass
#line 13254
} JOBOBJECTINFOCLASS; 
#line 13265
typedef 
#line 13259
struct _SILOOBJECT_BASIC_INFORMATION { 
#line 13260
DWORD SiloId; 
#line 13261
DWORD SiloParentId; 
#line 13262
DWORD NumberOfProcesses; 
#line 13263
BOOLEAN IsInServerSilo; 
#line 13264
BYTE Reserved[3]; 
#line 13265
} SILOOBJECT_BASIC_INFORMATION, *PSILOOBJECT_BASIC_INFORMATION; 
#line 13273
typedef 
#line 13267
enum _SERVERSILO_STATE { 
#line 13268
SERVERSILO_INITING, 
#line 13269
SERVERSILO_STARTED, 
#line 13270
SERVERSILO_SHUTTING_DOWN, 
#line 13271
SERVERSILO_TERMINATING, 
#line 13272
SERVERSILO_TERMINATED
#line 13273
} SERVERSILO_STATE, *PSERVERSILO_STATE; 
#line 13282
typedef 
#line 13275
struct _SERVERSILO_BASIC_INFORMATION { 
#line 13276
DWORD ServiceSessionId; 
#line 13277
SERVERSILO_STATE State; 
#line 13278
DWORD ExitStatus; 
#line 13279
BOOLEAN IsDownlevelContainer; 
#line 13280
PVOID ApiSetSchema; 
#line 13281
PVOID HostApiSetSchema; 
#line 13282
} SERVERSILO_BASIC_INFORMATION, *PSERVERSILO_BASIC_INFORMATION; 
#line 13306
typedef 
#line 13301
enum _FIRMWARE_TYPE { 
#line 13302
FirmwareTypeUnknown, 
#line 13303
FirmwareTypeBios, 
#line 13304
FirmwareTypeUefi, 
#line 13305
FirmwareTypeMax
#line 13306
} FIRMWARE_TYPE, *PFIRMWARE_TYPE; 
#line 13356
typedef 
#line 13346
enum _LOGICAL_PROCESSOR_RELATIONSHIP { 
#line 13347
RelationProcessorCore, 
#line 13348
RelationNumaNode, 
#line 13349
RelationCache, 
#line 13350
RelationProcessorPackage, 
#line 13351
RelationGroup, 
#line 13352
RelationProcessorDie, 
#line 13353
RelationNumaNodeEx, 
#line 13354
RelationProcessorModule, 
#line 13355
RelationAll = 65535
#line 13356
} LOGICAL_PROCESSOR_RELATIONSHIP; 
#line 13365
typedef 
#line 13360
enum _PROCESSOR_CACHE_TYPE { 
#line 13361
CacheUnified, 
#line 13362
CacheInstruction, 
#line 13363
CacheData, 
#line 13364
CacheTrace
#line 13365
} PROCESSOR_CACHE_TYPE; 
#line 13375
typedef 
#line 13369
struct _CACHE_DESCRIPTOR { 
#line 13370
BYTE Level; 
#line 13371
BYTE Associativity; 
#line 13372
WORD LineSize; 
#line 13373
DWORD Size; 
#line 13374
PROCESSOR_CACHE_TYPE Type; 
#line 13375
} CACHE_DESCRIPTOR, *PCACHE_DESCRIPTOR; 
#line 13390
typedef 
#line 13377
struct _SYSTEM_LOGICAL_PROCESSOR_INFORMATION { 
#line 13378
ULONG_PTR ProcessorMask; 
#line 13379
LOGICAL_PROCESSOR_RELATIONSHIP Relationship; 
#line 13380
union { 
#line 13381
struct { 
#line 13382
BYTE Flags; 
#line 13383
} ProcessorCore; 
#line 13384
struct { 
#line 13385
DWORD NodeNumber; 
#line 13386
} NumaNode; 
#line 13387
CACHE_DESCRIPTOR Cache; 
#line 13388
ULONGLONG Reserved[2]; 
#line 13389
}; 
#line 13390
} SYSTEM_LOGICAL_PROCESSOR_INFORMATION, *PSYSTEM_LOGICAL_PROCESSOR_INFORMATION; 
#line 13398
typedef 
#line 13392
struct _PROCESSOR_RELATIONSHIP { 
#line 13393
BYTE Flags; 
#line 13394
BYTE EfficiencyClass; 
#line 13395
BYTE Reserved[20]; 
#line 13396
WORD GroupCount; 
#line 13397
GROUP_AFFINITY GroupMask[1]; 
#line 13398
} PROCESSOR_RELATIONSHIP, *PPROCESSOR_RELATIONSHIP; 
#line 13409
typedef 
#line 13400
struct _NUMA_NODE_RELATIONSHIP { 
#line 13401
DWORD NodeNumber; 
#line 13402
BYTE Reserved[18]; 
#line 13403
WORD GroupCount; 
#line 13404
union { 
#line 13405
GROUP_AFFINITY GroupMask; 
#line 13407
GROUP_AFFINITY GroupMasks[1]; 
#line 13408
}; 
#line 13409
} NUMA_NODE_RELATIONSHIP, *PNUMA_NODE_RELATIONSHIP; 
#line 13424
typedef 
#line 13411
struct _CACHE_RELATIONSHIP { 
#line 13412
BYTE Level; 
#line 13413
BYTE Associativity; 
#line 13414
WORD LineSize; 
#line 13415
DWORD CacheSize; 
#line 13416
PROCESSOR_CACHE_TYPE Type; 
#line 13417
BYTE Reserved[18]; 
#line 13418
WORD GroupCount; 
#line 13419
union { 
#line 13420
GROUP_AFFINITY GroupMask; 
#line 13422
GROUP_AFFINITY GroupMasks[1]; 
#line 13423
}; 
#line 13424
} CACHE_RELATIONSHIP, *PCACHE_RELATIONSHIP; 
#line 13431
typedef 
#line 13426
struct _PROCESSOR_GROUP_INFO { 
#line 13427
BYTE MaximumProcessorCount; 
#line 13428
BYTE ActiveProcessorCount; 
#line 13429
BYTE Reserved[38]; 
#line 13430
KAFFINITY ActiveProcessorMask; 
#line 13431
} PROCESSOR_GROUP_INFO, *PPROCESSOR_GROUP_INFO; 
#line 13438
typedef 
#line 13433
struct _GROUP_RELATIONSHIP { 
#line 13434
WORD MaximumGroupCount; 
#line 13435
WORD ActiveGroupCount; 
#line 13436
BYTE Reserved[20]; 
#line 13437
PROCESSOR_GROUP_INFO GroupInfo[1]; 
#line 13438
} GROUP_RELATIONSHIP, *PGROUP_RELATIONSHIP; 
#line 13440
struct _SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX { 
#line 13441
LOGICAL_PROCESSOR_RELATIONSHIP Relationship; 
#line 13442
DWORD Size; 
#line 13443
union { 
#line 13444
PROCESSOR_RELATIONSHIP Processor; 
#line 13445
NUMA_NODE_RELATIONSHIP NumaNode; 
#line 13446
CACHE_RELATIONSHIP Cache; 
#line 13447
GROUP_RELATIONSHIP Group; 
#line 13448
}; 
#line 13449
}; 
#line 13451
typedef _SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX, *PSYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX; 
#line 13455
typedef 
#line 13453
enum _CPU_SET_INFORMATION_TYPE { 
#line 13454
CpuSetInformation
#line 13455
} CPU_SET_INFORMATION_TYPE, *PCPU_SET_INFORMATION_TYPE; 
#line 13457
struct _SYSTEM_CPU_SET_INFORMATION { 
#line 13458
DWORD Size; 
#line 13459
CPU_SET_INFORMATION_TYPE Type; 
#line 13460
union { 
#line 13461
struct { 
#line 13462
DWORD Id; 
#line 13463
WORD Group; 
#line 13464
BYTE LogicalProcessorIndex; 
#line 13465
BYTE CoreIndex; 
#line 13466
BYTE LastLevelCacheIndex; 
#line 13467
BYTE NumaNodeIndex; 
#line 13468
BYTE EfficiencyClass; 
#line 13469
union { 
#line 13476
BYTE AllFlags; 
#line 13477
struct { 
#line 13478
BYTE Parked:1; 
#line 13479
BYTE Allocated:1; 
#line 13480
BYTE AllocatedToTargetProcess:1; 
#line 13481
BYTE RealTime:1; 
#line 13482
BYTE ReservedFlags:4; 
#line 13483
}; 
#line 13484
}; 
#line 13486
union { 
#line 13487
DWORD Reserved; 
#line 13488
BYTE SchedulingClass; 
#line 13489
}; 
#line 13491
DWORD64 AllocationTag; 
#line 13492
} CpuSet; 
#line 13493
}; 
#line 13494
}; 
#line 13496
typedef _SYSTEM_CPU_SET_INFORMATION SYSTEM_CPU_SET_INFORMATION, *PSYSTEM_CPU_SET_INFORMATION; 
#line 13503
typedef 
#line 13501
struct _SYSTEM_POOL_ZEROING_INFORMATION { 
#line 13502
BOOLEAN PoolZeroingSupportPresent; 
#line 13503
} SYSTEM_POOL_ZEROING_INFORMATION, *PSYSTEM_POOL_ZEROING_INFORMATION; 
#line 13510
typedef 
#line 13508
struct _SYSTEM_PROCESSOR_CYCLE_TIME_INFORMATION { 
#line 13509
DWORD64 CycleTime; 
#line 13510
} SYSTEM_PROCESSOR_CYCLE_TIME_INFORMATION, *PSYSTEM_PROCESSOR_CYCLE_TIME_INFORMATION; 
#line 13520
typedef 
#line 13512
struct _SYSTEM_SUPPORTED_PROCESSOR_ARCHITECTURES_INFORMATION { 
#line 13513
DWORD Machine:16; 
#line 13514
DWORD KernelMode:1; 
#line 13515
DWORD UserMode:1; 
#line 13516
DWORD Native:1; 
#line 13517
DWORD Process:1; 
#line 13518
DWORD WoW64Container:1; 
#line 13519
DWORD ReservedZero0:11; 
#line 13520
} SYSTEM_SUPPORTED_PROCESSOR_ARCHITECTURES_INFORMATION; 
#line 13753 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnt.h"
typedef 
#line 13750
struct _XSTATE_FEATURE { 
#line 13751
DWORD Offset; 
#line 13752
DWORD Size; 
#line 13753
} XSTATE_FEATURE, *PXSTATE_FEATURE; 
#line 13802
typedef 
#line 13755
struct _XSTATE_CONFIGURATION { 
#line 13757
DWORD64 EnabledFeatures; 
#line 13760
DWORD64 EnabledVolatileFeatures; 
#line 13763
DWORD Size; 
#line 13766
union { 
#line 13767
DWORD ControlFlags; 
#line 13769
struct { 
#line 13770
DWORD OptimizedSave:1; 
#line 13771
DWORD CompactionEnabled:1; 
#line 13772
DWORD ExtendedFeatureDisable:1; 
#line 13773
}; 
#line 13774
}; 
#line 13777
XSTATE_FEATURE Features[64]; 
#line 13780
DWORD64 EnabledSupervisorFeatures; 
#line 13783
DWORD64 AlignedFeatures; 
#line 13786
DWORD AllFeatureSize; 
#line 13789
DWORD AllFeatures[64]; 
#line 13792
DWORD64 EnabledUserVisibleSupervisorFeatures; 
#line 13795
DWORD64 ExtendedFeatureDisableFeatures; 
#line 13798
DWORD AllNonLargeFeatureSize; 
#line 13800
DWORD Spare; 
#line 13802
} XSTATE_CONFIGURATION, *PXSTATE_CONFIGURATION; 
#line 13818 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnt.h"
typedef 
#line 13807 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnt.h"
struct _MEMORY_BASIC_INFORMATION { 
#line 13808
PVOID BaseAddress; 
#line 13809
PVOID AllocationBase; 
#line 13810
DWORD AllocationProtect; 
#line 13812
WORD PartitionId; 
#line 13814 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnt.h"
SIZE_T RegionSize; 
#line 13815
DWORD State; 
#line 13816
DWORD Protect; 
#line 13817
DWORD Type; 
#line 13818
} MEMORY_BASIC_INFORMATION, *PMEMORY_BASIC_INFORMATION; 
#line 13830
typedef 
#line 13822
struct _MEMORY_BASIC_INFORMATION32 { 
#line 13823
DWORD BaseAddress; 
#line 13824
DWORD AllocationBase; 
#line 13825
DWORD AllocationProtect; 
#line 13826
DWORD RegionSize; 
#line 13827
DWORD State; 
#line 13828
DWORD Protect; 
#line 13829
DWORD Type; 
#line 13830
} MEMORY_BASIC_INFORMATION32, *PMEMORY_BASIC_INFORMATION32; 
#line 13842
typedef 
#line 13832
struct __declspec(align(16)) _MEMORY_BASIC_INFORMATION64 { 
#line 13833
ULONGLONG BaseAddress; 
#line 13834
ULONGLONG AllocationBase; 
#line 13835
DWORD AllocationProtect; 
#line 13836
DWORD __alignment1; 
#line 13837
ULONGLONG RegionSize; 
#line 13838
DWORD State; 
#line 13839
DWORD Protect; 
#line 13840
DWORD Type; 
#line 13841
DWORD __alignment2; 
#line 13842
} MEMORY_BASIC_INFORMATION64, *PMEMORY_BASIC_INFORMATION64; 
#line 13888
typedef 
#line 13885
struct _CFG_CALL_TARGET_INFO { 
#line 13886
ULONG_PTR Offset; 
#line 13887
ULONG_PTR Flags; 
#line 13888
} CFG_CALL_TARGET_INFO, *PCFG_CALL_TARGET_INFO; 
#line 13969
typedef 
#line 13965
struct _MEM_ADDRESS_REQUIREMENTS { 
#line 13966
PVOID LowestStartingAddress; 
#line 13967
PVOID HighestEndingAddress; 
#line 13968
SIZE_T Alignment; 
#line 13969
} MEM_ADDRESS_REQUIREMENTS, *PMEM_ADDRESS_REQUIREMENTS; 
#line 14000
typedef 
#line 13991
enum MEM_EXTENDED_PARAMETER_TYPE { 
#line 13992
MemExtendedParameterInvalidType, 
#line 13993
MemExtendedParameterAddressRequirements, 
#line 13994
MemExtendedParameterNumaNode, 
#line 13995
MemExtendedParameterPartitionHandle, 
#line 13996
MemExtendedParameterUserPhysicalHandle, 
#line 13997
MemExtendedParameterAttributeFlags, 
#line 13998
MemExtendedParameterImageMachine, 
#line 13999
MemExtendedParameterMax
#line 14000
} MEM_EXTENDED_PARAMETER_TYPE, *PMEM_EXTENDED_PARAMETER_TYPE; 
#line 14019
typedef 
#line 14004
struct __declspec(align(8)) MEM_EXTENDED_PARAMETER { 
#line 14006
struct { 
#line 14007
DWORD64 Type:8; 
#line 14008
DWORD64 Reserved:64 - 8; 
#line 14009
}; 
#line 14011
union { 
#line 14012
DWORD64 ULong64; 
#line 14013
PVOID Pointer; 
#line 14014
SIZE_T Size; 
#line 14015
HANDLE Handle; 
#line 14016
DWORD ULong; 
#line 14017
}; 
#line 14019
} MEM_EXTENDED_PARAMETER, *PMEM_EXTENDED_PARAMETER; 
#line 14037
typedef 
#line 14031
enum _MEM_DEDICATED_ATTRIBUTE_TYPE { 
#line 14032
MemDedicatedAttributeReadBandwidth, 
#line 14033
MemDedicatedAttributeReadLatency, 
#line 14034
MemDedicatedAttributeWriteBandwidth, 
#line 14035
MemDedicatedAttributeWriteLatency, 
#line 14036
MemDedicatedAttributeMax
#line 14037
} MEM_DEDICATED_ATTRIBUTE_TYPE, *PMEM_DEDICATED_ATTRIBUTE_TYPE; 
#line 14059
typedef 
#line 14053
enum MEM_SECTION_EXTENDED_PARAMETER_TYPE { 
#line 14054
MemSectionExtendedParameterInvalidType, 
#line 14055
MemSectionExtendedParameterUserPhysicalFlags, 
#line 14056
MemSectionExtendedParameterNumaNode, 
#line 14057
MemSectionExtendedParameterSigningLevel, 
#line 14058
MemSectionExtendedParameterMax
#line 14059
} MEM_SECTION_EXTENDED_PARAMETER_TYPE, *PMEM_SECTION_EXTENDED_PARAMETER_TYPE; 
#line 14071
typedef 
#line 14069
struct _ENCLAVE_CREATE_INFO_SGX { 
#line 14070
BYTE Secs[4096]; 
#line 14071
} ENCLAVE_CREATE_INFO_SGX, *PENCLAVE_CREATE_INFO_SGX; 
#line 14078
typedef 
#line 14073
struct _ENCLAVE_INIT_INFO_SGX { 
#line 14074
BYTE SigStruct[1808]; 
#line 14075
BYTE Reserved1[240]; 
#line 14076
BYTE EInitToken[304]; 
#line 14077
BYTE Reserved2[1744]; 
#line 14078
} ENCLAVE_INIT_INFO_SGX, *PENCLAVE_INIT_INFO_SGX; 
#line 14085
typedef 
#line 14082
struct _ENCLAVE_CREATE_INFO_VBS { 
#line 14083
DWORD Flags; 
#line 14084
BYTE OwnerID[32]; 
#line 14085
} ENCLAVE_CREATE_INFO_VBS, *PENCLAVE_CREATE_INFO_VBS; 
#line 14094
typedef 
#line 14091
struct _ENCLAVE_CREATE_INFO_VBS_BASIC { 
#line 14092
DWORD Flags; 
#line 14093
BYTE OwnerID[32]; 
#line 14094
} ENCLAVE_CREATE_INFO_VBS_BASIC, *PENCLAVE_CREATE_INFO_VBS_BASIC; 
#line 14098
typedef 
#line 14096
struct _ENCLAVE_LOAD_DATA_VBS_BASIC { 
#line 14097
DWORD PageType; 
#line 14098
} ENCLAVE_LOAD_DATA_VBS_BASIC, *PENCLAVE_LOAD_DATA_VBS_BASIC; 
#line 14116
typedef 
#line 14106
struct _ENCLAVE_INIT_INFO_VBS_BASIC { 
#line 14107
BYTE FamilyId[16]; 
#line 14108
BYTE ImageId[16]; 
#line 14109
ULONGLONG EnclaveSize; 
#line 14110
DWORD EnclaveSvn; 
#line 14111
DWORD Reserved; 
#line 14112
union { 
#line 14113
HANDLE SignatureInfoHandle; 
#line 14114
ULONGLONG Unused; 
#line 14115
}; 
#line 14116
} ENCLAVE_INIT_INFO_VBS_BASIC, *PENCLAVE_INIT_INFO_VBS_BASIC; 
#line 14122
typedef 
#line 14119
struct _ENCLAVE_INIT_INFO_VBS { 
#line 14120
DWORD Length; 
#line 14121
DWORD ThreadCount; 
#line 14122
} ENCLAVE_INIT_INFO_VBS, *PENCLAVE_INIT_INFO_VBS; 
#line 14126
typedef PVOID ENCLAVE_TARGET_FUNCTION(PVOID); 
#line 14127
typedef ENCLAVE_TARGET_FUNCTION *PENCLAVE_TARGET_FUNCTION; 
#line 14128
typedef PENCLAVE_TARGET_FUNCTION LPENCLAVE_TARGET_FUNCTION; 
#line 14139 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnt.h"
typedef 
#line 14135
struct __declspec(align(8)) _MEMORY_PARTITION_DEDICATED_MEMORY_ATTRIBUTE { 
#line 14136
MEM_DEDICATED_ATTRIBUTE_TYPE Type; 
#line 14137
DWORD Reserved; 
#line 14138
DWORD64 Value; 
#line 14139
} MEMORY_PARTITION_DEDICATED_MEMORY_ATTRIBUTE, *PMEMORY_PARTITION_DEDICATED_MEMORY_ATTRIBUTE; 
#line 14187
typedef 
#line 14141
struct __declspec(align(8)) _MEMORY_PARTITION_DEDICATED_MEMORY_INFORMATION { 
#line 14148
DWORD NextEntryOffset; 
#line 14154
DWORD SizeOfInformation; 
#line 14160
DWORD Flags; 
#line 14167
DWORD AttributesOffset; 
#line 14173
DWORD AttributeCount; 
#line 14179
DWORD Reserved; 
#line 14185
DWORD64 TypeId; 
#line 14187
} MEMORY_PARTITION_DEDICATED_MEMORY_INFORMATION, *PMEMORY_PARTITION_DEDICATED_MEMORY_INFORMATION; 
#line 14328
typedef 
#line 14326
struct _FILE_ID_128 { 
#line 14327
BYTE Identifier[16]; 
#line 14328
} FILE_ID_128, *PFILE_ID_128; 
#line 14339
typedef 
#line 14334
struct _FILE_NOTIFY_INFORMATION { 
#line 14335
DWORD NextEntryOffset; 
#line 14336
DWORD Action; 
#line 14337
DWORD FileNameLength; 
#line 14338
WCHAR FileName[1]; 
#line 14339
} FILE_NOTIFY_INFORMATION, *PFILE_NOTIFY_INFORMATION; 
#line 14357
typedef 
#line 14342
struct _FILE_NOTIFY_EXTENDED_INFORMATION { 
#line 14343
DWORD NextEntryOffset; 
#line 14344
DWORD Action; 
#line 14345
LARGE_INTEGER CreationTime; 
#line 14346
LARGE_INTEGER LastModificationTime; 
#line 14347
LARGE_INTEGER LastChangeTime; 
#line 14348
LARGE_INTEGER LastAccessTime; 
#line 14349
LARGE_INTEGER AllocatedLength; 
#line 14350
LARGE_INTEGER FileSize; 
#line 14351
DWORD FileAttributes; 
#line 14352
DWORD ReparsePointTag; 
#line 14353
LARGE_INTEGER FileId; 
#line 14354
LARGE_INTEGER ParentFileId; 
#line 14355
DWORD FileNameLength; 
#line 14356
WCHAR FileName[1]; 
#line 14357
} FILE_NOTIFY_EXTENDED_INFORMATION, *PFILE_NOTIFY_EXTENDED_INFORMATION; 
#line 14375 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnt.h"
typedef 
#line 14372
union _FILE_SEGMENT_ELEMENT { 
#line 14373
PVOID64 Buffer; 
#line 14374
ULONGLONG Alignment; 
#line 14375
} FILE_SEGMENT_ELEMENT, *PFILE_SEGMENT_ELEMENT; 
#line 14451 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnt.h"
typedef 
#line 14443
struct _REPARSE_GUID_DATA_BUFFER { 
#line 14444
DWORD ReparseTag; 
#line 14445
WORD ReparseDataLength; 
#line 14446
WORD Reserved; 
#line 14447
GUID ReparseGuid; 
#line 14448
struct { 
#line 14449
BYTE DataBuffer[1]; 
#line 14450
} GenericReparseBuffer; 
#line 14451
} REPARSE_GUID_DATA_BUFFER, *PREPARSE_GUID_DATA_BUFFER; 
#line 14645 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnt.h"
typedef 
#line 14598
struct _SCRUB_DATA_INPUT { 
#line 14604
DWORD Size; 
#line 14613
DWORD Flags; 
#line 14621
DWORD MaximumIos; 
#line 14629
DWORD ObjectId[4]; 
#line 14635
DWORD Reserved[41]; 
#line 14643
BYTE ResumeContext[1040]; 
#line 14645
} SCRUB_DATA_INPUT, *PSCRUB_DATA_INPUT; 
#line 14655
typedef 
#line 14649
struct _SCRUB_PARITY_EXTENT { 
#line 14651
LONGLONG Offset; 
#line 14653
ULONGLONG Length; 
#line 14655
} SCRUB_PARITY_EXTENT, *PSCRUB_PARITY_EXTENT; 
#line 14689
typedef 
#line 14657
struct _SCRUB_PARITY_EXTENT_DATA { 
#line 14663
WORD Size; 
#line 14669
WORD Flags; 
#line 14675
WORD NumberOfParityExtents; 
#line 14681
WORD MaximumNumberOfParityExtents; 
#line 14687
SCRUB_PARITY_EXTENT ParityExtents[1]; 
#line 14689
} SCRUB_PARITY_EXTENT_DATA, *PSCRUB_PARITY_EXTENT_DATA; 
#line 14887 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnt.h"
typedef 
#line 14693 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnt.h"
struct _SCRUB_DATA_OUTPUT { 
#line 14699
DWORD Size; 
#line 14709
DWORD Flags; 
#line 14715
DWORD Status; 
#line 14722
ULONGLONG ErrorFileOffset; 
#line 14729
ULONGLONG ErrorLength; 
#line 14735
ULONGLONG NumberOfBytesRepaired; 
#line 14741
ULONGLONG NumberOfBytesFailed; 
#line 14747
ULONGLONG InternalFileReference; 
#line 14758
WORD ResumeContextLength; 
#line 14766
WORD ParityExtentDataOffset; 
#line 14772
DWORD Reserved[9]; 
#line 14790 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnt.h"
ULONGLONG NumberOfMetadataBytesProcessed; 
#line 14796
ULONGLONG NumberOfDataBytesProcessed; 
#line 14802
ULONGLONG TotalNumberOfMetadataBytesInUse; 
#line 14808
ULONGLONG TotalNumberOfDataBytesInUse; 
#line 14822 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnt.h"
ULONGLONG DataBytesSkippedDueToNoAllocation; 
#line 14828
ULONGLONG DataBytesSkippedDueToInvalidRun; 
#line 14834
ULONGLONG DataBytesSkippedDueToIntegrityStream; 
#line 14840
ULONGLONG DataBytesSkippedDueToRegionBeingClean; 
#line 14846
ULONGLONG DataBytesSkippedDueToLockConflict; 
#line 14852
ULONGLONG DataBytesSkippedDueToNoScrubDataFlag; 
#line 14858
ULONGLONG DataBytesSkippedDueToNoScrubNonIntegrityStreamFlag; 
#line 14864
ULONGLONG DataBytesScrubbed; 
#line 14885 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnt.h"
BYTE ResumeContext[1040]; 
#line 14887
} SCRUB_DATA_OUTPUT, *PSCRUB_DATA_OUTPUT; 
#line 14922 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnt.h"
typedef 
#line 14899
enum _SharedVirtualDiskSupportType { 
#line 14904
SharedVirtualDisksUnsupported, 
#line 14909
SharedVirtualDisksSupported, 
#line 14915
SharedVirtualDiskSnapshotsSupported = 3, 
#line 14921
SharedVirtualDiskCDPSnapshotsSupported = 7
#line 14922
} SharedVirtualDiskSupportType; 
#line 14942
typedef 
#line 14924
enum _SharedVirtualDiskHandleState { 
#line 14929
SharedVirtualDiskHandleStateNone, 
#line 14935
SharedVirtualDiskHandleStateFileShared, 
#line 14941
SharedVirtualDiskHandleStateHandleShared = 3
#line 14942
} SharedVirtualDiskHandleState; 
#line 14960
typedef 
#line 14948
struct _SHARED_VIRTUAL_DISK_SUPPORT { 
#line 14953
SharedVirtualDiskSupportType SharedVirtualDiskSupport; 
#line 14959
SharedVirtualDiskHandleState HandleState; 
#line 14960
} SHARED_VIRTUAL_DISK_SUPPORT, *PSHARED_VIRTUAL_DISK_SUPPORT; 
#line 15009 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnt.h"
typedef 
#line 14980
struct _REARRANGE_FILE_DATA { 
#line 14986
ULONGLONG SourceStartingOffset; 
#line 14991
ULONGLONG TargetOffset; 
#line 14997
HANDLE SourceFileHandle; 
#line 15002
DWORD Length; 
#line 15007
DWORD Flags; 
#line 15009
} REARRANGE_FILE_DATA, *PREARRANGE_FILE_DATA; 
#line 15024
typedef 
#line 15016
struct _REARRANGE_FILE_DATA32 { 
#line 15018
ULONGLONG SourceStartingOffset; 
#line 15019
ULONGLONG TargetOffset; 
#line 15020
UINT32 SourceFileHandle; 
#line 15021
DWORD Length; 
#line 15022
DWORD Flags; 
#line 15024
} REARRANGE_FILE_DATA32, *PREARRANGE_FILE_DATA32; 
#line 15046 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnt.h"
typedef 
#line 15040
struct _SHUFFLE_FILE_DATA { 
#line 15042
LONGLONG StartingOffset; 
#line 15043
LONGLONG Length; 
#line 15044
DWORD Flags; 
#line 15046
} SHUFFLE_FILE_DATA, *PSHUFFLE_FILE_DATA; 
#line 15106 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnt.h"
typedef 
#line 15091
struct _NETWORK_APP_INSTANCE_EA { 
#line 15098
GUID AppInstanceID; 
#line 15104
DWORD CsvFlags; 
#line 15106
} NETWORK_APP_INSTANCE_EA, *PNETWORK_APP_INSTANCE_EA; 
#line 15133 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnt.h"
extern const GUID GUID_MAX_POWER_SAVINGS; 
#line 15140
extern const GUID GUID_MIN_POWER_SAVINGS; 
#line 15147
extern const GUID GUID_TYPICAL_POWER_SAVINGS; 
#line 15155
extern const GUID NO_SUBGROUP_GUID; 
#line 15163
extern const GUID ALL_POWERSCHEMES_GUID; 
#line 15200
extern const GUID GUID_POWERSCHEME_PERSONALITY; 
#line 15209
extern const GUID GUID_ACTIVE_POWERSCHEME; 
#line 15224
extern const GUID GUID_IDLE_RESILIENCY_SUBGROUP; 
#line 15232
extern const GUID GUID_IDLE_RESILIENCY_PERIOD; 
#line 15238
extern const GUID GUID_DEEP_SLEEP_ENABLED; 
#line 15247
extern const GUID GUID_DEEP_SLEEP_PLATFORM_STATE; 
#line 15254
extern const GUID GUID_DISK_COALESCING_POWERDOWN_TIMEOUT; 
#line 15267
extern const GUID GUID_EXECUTION_REQUIRED_REQUEST_TIMEOUT; 
#line 15278
extern const GUID GUID_VIDEO_SUBGROUP; 
#line 15286
extern const GUID GUID_VIDEO_POWERDOWN_TIMEOUT; 
#line 15295
extern const GUID GUID_VIDEO_ANNOYANCE_TIMEOUT; 
#line 15304
extern const GUID GUID_VIDEO_ADAPTIVE_PERCENT_INCREASE; 
#line 15312
extern const GUID GUID_VIDEO_DIM_TIMEOUT; 
#line 15320
extern const GUID GUID_VIDEO_ADAPTIVE_POWERDOWN; 
#line 15327
extern const GUID GUID_MONITOR_POWER_ON; 
#line 15334
extern const GUID GUID_DEVICE_POWER_POLICY_VIDEO_BRIGHTNESS; 
#line 15341
extern const GUID GUID_DEVICE_POWER_POLICY_VIDEO_DIM_BRIGHTNESS; 
#line 15348
extern const GUID GUID_VIDEO_CURRENT_MONITOR_BRIGHTNESS; 
#line 15356
extern const GUID GUID_VIDEO_ADAPTIVE_DISPLAY_BRIGHTNESS; 
#line 15363
extern const GUID GUID_CONSOLE_DISPLAY_STATE; 
#line 15371
extern const GUID GUID_ALLOW_DISPLAY_REQUIRED; 
#line 15380
extern const GUID GUID_VIDEO_CONSOLE_LOCK_TIMEOUT; 
#line 15389
extern const GUID GUID_ADVANCED_COLOR_QUALITY_BIAS; 
#line 15396
extern const GUID GUID_ADAPTIVE_POWER_BEHAVIOR_SUBGROUP; 
#line 15403
extern const GUID GUID_NON_ADAPTIVE_INPUT_TIMEOUT; 
#line 15410
extern const GUID GUID_ADAPTIVE_INPUT_CONTROLLER_STATE; 
#line 15418
extern const GUID GUID_DISK_SUBGROUP; 
#line 15423
extern const GUID GUID_DISK_MAX_POWER; 
#line 15429
extern const GUID GUID_DISK_POWERDOWN_TIMEOUT; 
#line 15436
extern const GUID GUID_DISK_IDLE_TIMEOUT; 
#line 15445
extern const GUID GUID_DISK_BURST_IGNORE_THRESHOLD; 
#line 15451
extern const GUID GUID_DISK_ADAPTIVE_POWERDOWN; 
#line 15456
extern const GUID GUID_DISK_NVME_NOPPME; 
#line 15465
extern const GUID GUID_SLEEP_SUBGROUP; 
#line 15473
extern const GUID GUID_SLEEP_IDLE_THRESHOLD; 
#line 15479
extern const GUID GUID_STANDBY_TIMEOUT; 
#line 15488
extern const GUID GUID_UNATTEND_SLEEP_TIMEOUT; 
#line 15494
extern const GUID GUID_HIBERNATE_TIMEOUT; 
#line 15500
extern const GUID GUID_HIBERNATE_FASTS4_POLICY; 
#line 15509
extern const GUID GUID_CRITICAL_POWER_TRANSITION; 
#line 15515
extern const GUID GUID_SYSTEM_AWAYMODE; 
#line 15522
extern const GUID GUID_ALLOW_AWAYMODE; 
#line 15529
extern const GUID GUID_USER_PRESENCE_PREDICTION; 
#line 15536
extern const GUID GUID_STANDBY_BUDGET_GRACE_PERIOD; 
#line 15543
extern const GUID GUID_STANDBY_BUDGET_PERCENT; 
#line 15550
extern const GUID GUID_STANDBY_RESERVE_GRACE_PERIOD; 
#line 15557
extern const GUID GUID_STANDBY_RESERVE_TIME; 
#line 15564
extern const GUID GUID_STANDBY_RESET_PERCENT; 
#line 15571
extern const GUID GUID_HUPR_ADAPTIVE_DISPLAY_TIMEOUT; 
#line 15579
extern const GUID GUID_ALLOW_STANDBY_STATES; 
#line 15586
extern const GUID GUID_ALLOW_RTC_WAKE; 
#line 15593
extern const GUID GUID_LEGACY_RTC_MITIGATION; 
#line 15601
extern const GUID GUID_ALLOW_SYSTEM_REQUIRED; 
#line 15610
extern const GUID GUID_POWER_SAVING_STATUS; 
#line 15618
extern const GUID GUID_ENERGY_SAVER_SUBGROUP; 
#line 15625
extern const GUID GUID_ENERGY_SAVER_BATTERY_THRESHOLD; 
#line 15632
extern const GUID GUID_ENERGY_SAVER_BRIGHTNESS; 
#line 15639
extern const GUID GUID_ENERGY_SAVER_POLICY; 
#line 15648
extern const GUID GUID_SYSTEM_BUTTON_SUBGROUP; 
#line 15669
extern const GUID GUID_POWERBUTTON_ACTION; 
#line 15675
extern const GUID GUID_SLEEPBUTTON_ACTION; 
#line 15682
extern const GUID GUID_USERINTERFACEBUTTON_ACTION; 
#line 15688
extern const GUID GUID_LIDCLOSE_ACTION; 
#line 15689
extern const GUID GUID_LIDOPEN_POWERSTATE; 
#line 15698
extern const GUID GUID_BATTERY_SUBGROUP; 
#line 15710
extern const GUID GUID_BATTERY_DISCHARGE_ACTION_0; 
#line 15711
extern const GUID GUID_BATTERY_DISCHARGE_LEVEL_0; 
#line 15712
extern const GUID GUID_BATTERY_DISCHARGE_FLAGS_0; 
#line 15714
extern const GUID GUID_BATTERY_DISCHARGE_ACTION_1; 
#line 15715
extern const GUID GUID_BATTERY_DISCHARGE_LEVEL_1; 
#line 15716
extern const GUID GUID_BATTERY_DISCHARGE_FLAGS_1; 
#line 15718
extern const GUID GUID_BATTERY_DISCHARGE_ACTION_2; 
#line 15719
extern const GUID GUID_BATTERY_DISCHARGE_LEVEL_2; 
#line 15720
extern const GUID GUID_BATTERY_DISCHARGE_FLAGS_2; 
#line 15722
extern const GUID GUID_BATTERY_DISCHARGE_ACTION_3; 
#line 15723
extern const GUID GUID_BATTERY_DISCHARGE_LEVEL_3; 
#line 15724
extern const GUID GUID_BATTERY_DISCHARGE_FLAGS_3; 
#line 15735
extern const GUID GUID_PROCESSOR_SETTINGS_SUBGROUP; 
#line 15741
extern const GUID GUID_PROCESSOR_THROTTLE_POLICY; 
#line 15759
extern const GUID GUID_PROCESSOR_THROTTLE_MAXIMUM; 
#line 15769
extern const GUID GUID_PROCESSOR_THROTTLE_MAXIMUM_1; 
#line 15779
extern const GUID GUID_PROCESSOR_THROTTLE_MINIMUM; 
#line 15789
extern const GUID GUID_PROCESSOR_THROTTLE_MINIMUM_1; 
#line 15796
extern const GUID GUID_PROCESSOR_FREQUENCY_LIMIT; 
#line 15800 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnt.h"
extern const GUID GUID_PROCESSOR_FREQUENCY_LIMIT_1; 
#line 15809 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnt.h"
extern const GUID GUID_PROCESSOR_ALLOW_THROTTLING; 
#line 15819
extern const GUID GUID_PROCESSOR_IDLESTATE_POLICY; 
#line 15825
extern const GUID GUID_PROCESSOR_PERFSTATE_POLICY; 
#line 15833
extern const GUID GUID_PROCESSOR_PERF_INCREASE_THRESHOLD; 
#line 15842
extern const GUID GUID_PROCESSOR_PERF_INCREASE_THRESHOLD_1; 
#line 15850
extern const GUID GUID_PROCESSOR_PERF_DECREASE_THRESHOLD; 
#line 15859
extern const GUID GUID_PROCESSOR_PERF_DECREASE_THRESHOLD_1; 
#line 15867
extern const GUID GUID_PROCESSOR_PERF_INCREASE_POLICY; 
#line 15876
extern const GUID GUID_PROCESSOR_PERF_INCREASE_POLICY_1; 
#line 15884
extern const GUID GUID_PROCESSOR_PERF_DECREASE_POLICY; 
#line 15893
extern const GUID GUID_PROCESSOR_PERF_DECREASE_POLICY_1; 
#line 15902
extern const GUID GUID_PROCESSOR_PERF_INCREASE_TIME; 
#line 15911
extern const GUID GUID_PROCESSOR_PERF_INCREASE_TIME_1; 
#line 15920
extern const GUID GUID_PROCESSOR_PERF_DECREASE_TIME; 
#line 15929
extern const GUID GUID_PROCESSOR_PERF_DECREASE_TIME_1; 
#line 15937
extern const GUID GUID_PROCESSOR_PERF_TIME_CHECK; 
#line 15945
extern const GUID GUID_PROCESSOR_PERF_BOOST_POLICY; 
#line 15957 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnt.h"
extern const GUID GUID_PROCESSOR_PERF_BOOST_MODE; 
#line 15975 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnt.h"
extern const GUID GUID_PROCESSOR_PERF_AUTONOMOUS_MODE; 
#line 15986 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnt.h"
extern const GUID GUID_PROCESSOR_PERF_ENERGY_PERFORMANCE_PREFERENCE; 
#line 15994 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnt.h"
extern const GUID GUID_PROCESSOR_PERF_ENERGY_PERFORMANCE_PREFERENCE_1; 
#line 16005 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnt.h"
extern const GUID GUID_PROCESSOR_PERF_AUTONOMOUS_ACTIVITY_WINDOW; 
#line 16015 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnt.h"
extern const GUID GUID_PROCESSOR_DUTY_CYCLING; 
#line 16027 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnt.h"
extern const GUID GUID_PROCESSOR_IDLE_ALLOW_SCALING; 
#line 16034
extern const GUID GUID_PROCESSOR_IDLE_DISABLE; 
#line 16043
extern const GUID GUID_PROCESSOR_IDLE_STATE_MAXIMUM; 
#line 16052
extern const GUID GUID_PROCESSOR_IDLE_TIME_CHECK; 
#line 16061
extern const GUID GUID_PROCESSOR_IDLE_DEMOTE_THRESHOLD; 
#line 16069
extern const GUID GUID_PROCESSOR_IDLE_PROMOTE_THRESHOLD; 
#line 16078
extern const GUID GUID_PROCESSOR_CORE_PARKING_INCREASE_THRESHOLD; 
#line 16087
extern const GUID GUID_PROCESSOR_CORE_PARKING_DECREASE_THRESHOLD; 
#line 16094
extern const GUID GUID_PROCESSOR_CORE_PARKING_INCREASE_POLICY; 
#line 16107
extern const GUID GUID_PROCESSOR_CORE_PARKING_DECREASE_POLICY; 
#line 16114
extern const GUID GUID_PROCESSOR_CORE_PARKING_MAX_CORES; 
#line 16122
extern const GUID GUID_PROCESSOR_CORE_PARKING_MAX_CORES_1; 
#line 16129
extern const GUID GUID_PROCESSOR_CORE_PARKING_MIN_CORES; 
#line 16137
extern const GUID GUID_PROCESSOR_CORE_PARKING_MIN_CORES_1; 
#line 16144
extern const GUID GUID_PROCESSOR_CORE_PARKING_INCREASE_TIME; 
#line 16151
extern const GUID GUID_PROCESSOR_CORE_PARKING_DECREASE_TIME; 
#line 16158
extern const GUID GUID_PROCESSOR_CORE_PARKING_AFFINITY_HISTORY_DECREASE_FACTOR; 
#line 16165
extern const GUID GUID_PROCESSOR_CORE_PARKING_AFFINITY_HISTORY_THRESHOLD; 
#line 16172
extern const GUID GUID_PROCESSOR_CORE_PARKING_AFFINITY_WEIGHTING; 
#line 16179
extern const GUID GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_HISTORY_DECREASE_FACTOR; 
#line 16186
extern const GUID GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_HISTORY_THRESHOLD; 
#line 16193
extern const GUID GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_WEIGHTING; 
#line 16200
extern const GUID GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_THRESHOLD; 
#line 16208
extern const GUID GUID_PROCESSOR_PARKING_CORE_OVERRIDE; 
#line 16216
extern const GUID GUID_PROCESSOR_PARKING_PERF_STATE; 
#line 16224
extern const GUID GUID_PROCESSOR_PARKING_PERF_STATE_1; 
#line 16232
extern const GUID GUID_PROCESSOR_PARKING_CONCURRENCY_THRESHOLD; 
#line 16240
extern const GUID GUID_PROCESSOR_PARKING_HEADROOM_THRESHOLD; 
#line 16248
extern const GUID GUID_PROCESSOR_PARKING_DISTRIBUTION_THRESHOLD; 
#line 16256
extern const GUID GUID_PROCESSOR_SOFT_PARKING_LATENCY; 
#line 16264 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnt.h"
extern const GUID GUID_PROCESSOR_PERF_HISTORY; 
#line 16272
extern const GUID GUID_PROCESSOR_PERF_HISTORY_1; 
#line 16282
extern const GUID GUID_PROCESSOR_PERF_INCREASE_HISTORY; 
#line 16292
extern const GUID GUID_PROCESSOR_PERF_DECREASE_HISTORY; 
#line 16302
extern const GUID GUID_PROCESSOR_PERF_CORE_PARKING_HISTORY; 
#line 16312
extern const GUID GUID_PROCESSOR_PERF_LATENCY_HINT; 
#line 16319
extern const GUID GUID_PROCESSOR_PERF_LATENCY_HINT_PERF; 
#line 16327
extern const GUID GUID_PROCESSOR_PERF_LATENCY_HINT_PERF_1; 
#line 16335
extern const GUID GUID_PROCESSOR_LATENCY_HINT_MIN_UNPARK; 
#line 16343
extern const GUID GUID_PROCESSOR_LATENCY_HINT_MIN_UNPARK_1; 
#line 16351
extern const GUID GUID_PROCESSOR_DISTRIBUTE_UTILITY; 
#line 16362
extern const GUID GUID_PROCESSOR_HETEROGENEOUS_POLICY; 
#line 16370
extern const GUID GUID_PROCESSOR_HETERO_DECREASE_TIME; 
#line 16378
extern const GUID GUID_PROCESSOR_HETERO_INCREASE_TIME; 
#line 16387
extern const GUID GUID_PROCESSOR_HETERO_DECREASE_THRESHOLD; 
#line 16396
extern const GUID GUID_PROCESSOR_HETERO_INCREASE_THRESHOLD; 
#line 16405
extern const GUID GUID_PROCESSOR_CLASS0_FLOOR_PERF; 
#line 16414
extern const GUID GUID_PROCESSOR_CLASS1_INITIAL_PERF; 
#line 16421
extern const GUID GUID_PROCESSOR_THREAD_SCHEDULING_POLICY; 
#line 16430 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnt.h"
extern const GUID GUID_PROCESSOR_SHORT_THREAD_SCHEDULING_POLICY; 
#line 16439 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnt.h"
extern const GUID GUID_PROCESSOR_SHORT_THREAD_RUNTIME_THRESHOLD; 
#line 16449 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnt.h"
extern const GUID GUID_SYSTEM_COOLING_POLICY; 
#line 16460 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnt.h"
extern const GUID GUID_PROCESSOR_RESPONSIVENESS_DISABLE_THRESHOLD; 
#line 16469 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnt.h"
extern const GUID GUID_PROCESSOR_RESPONSIVENESS_DISABLE_THRESHOLD_1; 
#line 16477 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnt.h"
extern const GUID GUID_PROCESSOR_RESPONSIVENESS_ENABLE_THRESHOLD; 
#line 16485 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnt.h"
extern const GUID GUID_PROCESSOR_RESPONSIVENESS_ENABLE_THRESHOLD_1; 
#line 16493 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnt.h"
extern const GUID GUID_PROCESSOR_RESPONSIVENESS_DISABLE_TIME; 
#line 16501 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnt.h"
extern const GUID GUID_PROCESSOR_RESPONSIVENESS_DISABLE_TIME_1; 
#line 16509 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnt.h"
extern const GUID GUID_PROCESSOR_RESPONSIVENESS_ENABLE_TIME; 
#line 16517 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnt.h"
extern const GUID GUID_PROCESSOR_RESPONSIVENESS_ENABLE_TIME_1; 
#line 16524 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnt.h"
extern const GUID GUID_PROCESSOR_RESPONSIVENESS_EPP_CEILING; 
#line 16532 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnt.h"
extern const GUID GUID_PROCESSOR_RESPONSIVENESS_EPP_CEILING_1; 
#line 16540 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnt.h"
extern const GUID GUID_PROCESSOR_RESPONSIVENESS_PERF_FLOOR; 
#line 16548 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnt.h"
extern const GUID GUID_PROCESSOR_RESPONSIVENESS_PERF_FLOOR_1; 
#line 16559 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnt.h"
extern const GUID GUID_LOCK_CONSOLE_ON_WAKE; 
#line 16569
extern const GUID GUID_DEVICE_IDLE_POLICY; 
#line 16578
extern const GUID GUID_CONNECTIVITY_IN_STANDBY; 
#line 16588
extern const GUID GUID_DISCONNECTED_STANDBY_MODE; 
#line 16609
extern const GUID GUID_ACDC_POWER_SOURCE; 
#line 16625
extern const GUID GUID_LIDSWITCH_STATE_CHANGE; 
#line 16640
extern const GUID GUID_LIDSWITCH_STATE_RELIABILITY; 
#line 16657
extern const GUID GUID_BATTERY_PERCENTAGE_REMAINING; 
#line 16670
extern const GUID GUID_BATTERY_COUNT; 
#line 16677
extern const GUID GUID_GLOBAL_USER_PRESENCE; 
#line 16688
extern const GUID GUID_SESSION_DISPLAY_STATUS; 
#line 16698
extern const GUID GUID_SESSION_USER_PRESENCE; 
#line 16705
extern const GUID GUID_IDLE_BACKGROUND_TASK; 
#line 16712
extern const GUID GUID_BACKGROUND_TASK_NOTIFICATION; 
#line 16720
extern const GUID GUID_APPLAUNCH_BUTTON; 
#line 16731
extern const GUID GUID_PCIEXPRESS_SETTINGS_SUBGROUP; 
#line 16737
extern const GUID GUID_PCIEXPRESS_ASPM_POLICY; 
#line 16749
extern const GUID GUID_ENABLE_SWITCH_FORCED_SHUTDOWN; 
#line 16756
extern const GUID GUID_INTSTEER_SUBGROUP; 
#line 16760 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnt.h"
extern const GUID GUID_INTSTEER_MODE; 
#line 16764 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnt.h"
extern const GUID GUID_INTSTEER_LOAD_PER_PROC_TRIGGER; 
#line 16768 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnt.h"
extern const GUID GUID_INTSTEER_TIME_UNPARK_TRIGGER; 
#line 16779 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnt.h"
extern const GUID GUID_GRAPHICS_SUBGROUP; 
#line 16785
extern const GUID GUID_GPU_PREFERENCE_POLICY; 
#line 16796
extern const GUID GUID_MIXED_REALITY_MODE; 
#line 16804 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnt.h"
extern const GUID GUID_SPR_ACTIVE_SESSION_CHANGE; 
#line 16817 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnt.h"
typedef 
#line 16808
enum _SYSTEM_POWER_STATE { 
#line 16809
PowerSystemUnspecified, 
#line 16810
PowerSystemWorking, 
#line 16811
PowerSystemSleeping1, 
#line 16812
PowerSystemSleeping2, 
#line 16813
PowerSystemSleeping3, 
#line 16814
PowerSystemHibernate, 
#line 16815
PowerSystemShutdown, 
#line 16816
PowerSystemMaximum
#line 16817
} SYSTEM_POWER_STATE, *PSYSTEM_POWER_STATE; 
#line 16831
typedef 
#line 16821
enum { 
#line 16822
PowerActionNone, 
#line 16823
PowerActionReserved, 
#line 16824
PowerActionSleep, 
#line 16825
PowerActionHibernate, 
#line 16826
PowerActionShutdown, 
#line 16827
PowerActionShutdownReset, 
#line 16828
PowerActionShutdownOff, 
#line 16829
PowerActionWarmEject, 
#line 16830
PowerActionDisplayOff
#line 16831
} POWER_ACTION, *PPOWER_ACTION; 
#line 16840
typedef 
#line 16833
enum _DEVICE_POWER_STATE { 
#line 16834
PowerDeviceUnspecified, 
#line 16835
PowerDeviceD0, 
#line 16836
PowerDeviceD1, 
#line 16837
PowerDeviceD2, 
#line 16838
PowerDeviceD3, 
#line 16839
PowerDeviceMaximum
#line 16840
} DEVICE_POWER_STATE, *PDEVICE_POWER_STATE; 
#line 16846
typedef 
#line 16842
enum _MONITOR_DISPLAY_STATE { 
#line 16843
PowerMonitorOff, 
#line 16844
PowerMonitorOn, 
#line 16845
PowerMonitorDim
#line 16846
} MONITOR_DISPLAY_STATE, *PMONITOR_DISPLAY_STATE; 
#line 16854
typedef 
#line 16848
enum _USER_ACTIVITY_PRESENCE { 
#line 16849
PowerUserPresent, 
#line 16850
PowerUserNotPresent, 
#line 16851
PowerUserInactive, 
#line 16852
PowerUserMaximum, 
#line 16853
PowerUserInvalid = PowerUserMaximum
#line 16854
} USER_ACTIVITY_PRESENCE, *PUSER_ACTIVITY_PRESENCE; 
#line 16864
typedef DWORD EXECUTION_STATE, *PEXECUTION_STATE; 
#line 16869
typedef 
#line 16866
enum { 
#line 16867
LT_DONT_CARE, 
#line 16868
LT_LOWEST_LATENCY
#line 16869
} LATENCY_TIME; 
#line 16893
typedef 
#line 16888
enum _POWER_REQUEST_TYPE { 
#line 16889
PowerRequestDisplayRequired, 
#line 16890
PowerRequestSystemRequired, 
#line 16891
PowerRequestAwayModeRequired, 
#line 16892
PowerRequestExecutionRequired
#line 16893
} POWER_REQUEST_TYPE, *PPOWER_REQUEST_TYPE; 
#line 16923
typedef 
#line 16914
struct CM_Power_Data_s { 
#line 16915
DWORD PD_Size; 
#line 16916
DEVICE_POWER_STATE PD_MostRecentPowerState; 
#line 16917
DWORD PD_Capabilities; 
#line 16918
DWORD PD_D1Latency; 
#line 16919
DWORD PD_D2Latency; 
#line 16920
DWORD PD_D3Latency; 
#line 16921
DEVICE_POWER_STATE PD_PowerStateMapping[7]; 
#line 16922
SYSTEM_POWER_STATE PD_DeepestSystemWake; 
#line 16923
} CM_POWER_DATA, *PCM_POWER_DATA; 
#line 17028 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnt.h"
typedef 
#line 16929
enum { 
#line 16930
SystemPowerPolicyAc, 
#line 16931
SystemPowerPolicyDc, 
#line 16932
VerifySystemPolicyAc, 
#line 16933
VerifySystemPolicyDc, 
#line 16934
SystemPowerCapabilities, 
#line 16935
SystemBatteryState, 
#line 16936
SystemPowerStateHandler, 
#line 16937
ProcessorStateHandler, 
#line 16938
SystemPowerPolicyCurrent, 
#line 16939
AdministratorPowerPolicy, 
#line 16940
SystemReserveHiberFile, 
#line 16941
ProcessorInformation, 
#line 16942
SystemPowerInformation, 
#line 16943
ProcessorStateHandler2, 
#line 16944
LastWakeTime, 
#line 16945
LastSleepTime, 
#line 16946
SystemExecutionState, 
#line 16947
SystemPowerStateNotifyHandler, 
#line 16948
ProcessorPowerPolicyAc, 
#line 16949
ProcessorPowerPolicyDc, 
#line 16950
VerifyProcessorPowerPolicyAc, 
#line 16951
VerifyProcessorPowerPolicyDc, 
#line 16952
ProcessorPowerPolicyCurrent, 
#line 16953
SystemPowerStateLogging, 
#line 16954
SystemPowerLoggingEntry, 
#line 16955
SetPowerSettingValue, 
#line 16956
NotifyUserPowerSetting, 
#line 16957
PowerInformationLevelUnused0, 
#line 16958
SystemMonitorHiberBootPowerOff, 
#line 16959
SystemVideoState, 
#line 16960
TraceApplicationPowerMessage, 
#line 16961
TraceApplicationPowerMessageEnd, 
#line 16962
ProcessorPerfStates, 
#line 16963
ProcessorIdleStates, 
#line 16964
ProcessorCap, 
#line 16965
SystemWakeSource, 
#line 16966
SystemHiberFileInformation, 
#line 16967
TraceServicePowerMessage, 
#line 16968
ProcessorLoad, 
#line 16969
PowerShutdownNotification, 
#line 16970
MonitorCapabilities, 
#line 16971
SessionPowerInit, 
#line 16972
SessionDisplayState, 
#line 16973
PowerRequestCreate, 
#line 16974
PowerRequestAction, 
#line 16975
GetPowerRequestList, 
#line 16976
ProcessorInformationEx, 
#line 16977
NotifyUserModeLegacyPowerEvent, 
#line 16978
GroupPark, 
#line 16979
ProcessorIdleDomains, 
#line 16980
WakeTimerList, 
#line 16981
SystemHiberFileSize, 
#line 16982
ProcessorIdleStatesHv, 
#line 16983
ProcessorPerfStatesHv, 
#line 16984
ProcessorPerfCapHv, 
#line 16985
ProcessorSetIdle, 
#line 16986
LogicalProcessorIdling, 
#line 16987
UserPresence, 
#line 16988
PowerSettingNotificationName, 
#line 16989
GetPowerSettingValue, 
#line 16990
IdleResiliency, 
#line 16991
SessionRITState, 
#line 16992
SessionConnectNotification, 
#line 16993
SessionPowerCleanup, 
#line 16994
SessionLockState, 
#line 16995
SystemHiberbootState, 
#line 16996
PlatformInformation, 
#line 16997
PdcInvocation, 
#line 16998
MonitorInvocation, 
#line 16999
FirmwareTableInformationRegistered, 
#line 17000
SetShutdownSelectedTime, 
#line 17001
SuspendResumeInvocation, 
#line 17002
PlmPowerRequestCreate, 
#line 17003
ScreenOff, 
#line 17004
CsDeviceNotification, 
#line 17005
PlatformRole, 
#line 17006
LastResumePerformance, 
#line 17007
DisplayBurst, 
#line 17008
ExitLatencySamplingPercentage, 
#line 17009
RegisterSpmPowerSettings, 
#line 17010
PlatformIdleStates, 
#line 17011
ProcessorIdleVeto, 
#line 17012
PlatformIdleVeto, 
#line 17013
SystemBatteryStatePrecise, 
#line 17014
ThermalEvent, 
#line 17015
PowerRequestActionInternal, 
#line 17016
BatteryDeviceState, 
#line 17017
PowerInformationInternal, 
#line 17018
ThermalStandby, 
#line 17019
SystemHiberFileType, 
#line 17020
PhysicalPowerButtonPress, 
#line 17021
QueryPotentialDripsConstraint, 
#line 17022
EnergyTrackerCreate, 
#line 17023
EnergyTrackerQuery, 
#line 17024
UpdateBlackBoxRecorder, 
#line 17025
SessionAllowExternalDmaDevices, 
#line 17026
SendSuspendResumeNotification, 
#line 17027
PowerInformationLevelMaximum
#line 17028
} POWER_INFORMATION_LEVEL; 
#line 17038
typedef 
#line 17034
enum { 
#line 17035
UserNotPresent, 
#line 17036
UserPresent, 
#line 17037
UserUnknown = 255
#line 17038
} POWER_USER_PRESENCE_TYPE, *PPOWER_USER_PRESENCE_TYPE; 
#line 17042
typedef 
#line 17040
struct _POWER_USER_PRESENCE { 
#line 17041
POWER_USER_PRESENCE_TYPE UserPresence; 
#line 17042
} POWER_USER_PRESENCE, *PPOWER_USER_PRESENCE; 
#line 17050
typedef 
#line 17047
struct _POWER_SESSION_CONNECT { 
#line 17048
BOOLEAN Connected; 
#line 17049
BOOLEAN Console; 
#line 17050
} POWER_SESSION_CONNECT, *PPOWER_SESSION_CONNECT; 
#line 17055
typedef 
#line 17052
struct _POWER_SESSION_TIMEOUTS { 
#line 17053
DWORD InputTimeout; 
#line 17054
DWORD DisplayTimeout; 
#line 17055
} POWER_SESSION_TIMEOUTS, *PPOWER_SESSION_TIMEOUTS; 
#line 17063
typedef 
#line 17060
struct _POWER_SESSION_RIT_STATE { 
#line 17061
BOOLEAN Active; 
#line 17062
DWORD64 LastInputTime; 
#line 17063
} POWER_SESSION_RIT_STATE, *PPOWER_SESSION_RIT_STATE; 
#line 17072
typedef 
#line 17068
struct _POWER_SESSION_WINLOGON { 
#line 17069
DWORD SessionId; 
#line 17070
BOOLEAN Console; 
#line 17071
BOOLEAN Locked; 
#line 17072
} POWER_SESSION_WINLOGON, *PPOWER_SESSION_WINLOGON; 
#line 17079
typedef 
#line 17077
struct _POWER_SESSION_ALLOW_EXTERNAL_DMA_DEVICES { 
#line 17078
BOOLEAN IsAllowed; 
#line 17079
} POWER_SESSION_ALLOW_EXTERNAL_DMA_DEVICES, *PPOWER_SESSION_ALLOW_EXTERNAL_DMA_DEVICES; 
#line 17087
typedef 
#line 17084
struct _POWER_IDLE_RESILIENCY { 
#line 17085
DWORD CoalescingTimeout; 
#line 17086
DWORD IdleResiliencyPeriod; 
#line 17087
} POWER_IDLE_RESILIENCY, *PPOWER_IDLE_RESILIENCY; 
#line 17153
typedef 
#line 17094
enum { 
#line 17095
MonitorRequestReasonUnknown, 
#line 17096
MonitorRequestReasonPowerButton, 
#line 17097
MonitorRequestReasonRemoteConnection, 
#line 17098
MonitorRequestReasonScMonitorpower, 
#line 17099
MonitorRequestReasonUserInput, 
#line 17100
MonitorRequestReasonAcDcDisplayBurst, 
#line 17101
MonitorRequestReasonUserDisplayBurst, 
#line 17102
MonitorRequestReasonPoSetSystemState, 
#line 17103
MonitorRequestReasonSetThreadExecutionState, 
#line 17104
MonitorRequestReasonFullWake, 
#line 17105
MonitorRequestReasonSessionUnlock, 
#line 17106
MonitorRequestReasonScreenOffRequest, 
#line 17107
MonitorRequestReasonIdleTimeout, 
#line 17108
MonitorRequestReasonPolicyChange, 
#line 17109
MonitorRequestReasonSleepButton, 
#line 17110
MonitorRequestReasonLid, 
#line 17111
MonitorRequestReasonBatteryCountChange, 
#line 17112
MonitorRequestReasonGracePeriod, 
#line 17113
MonitorRequestReasonPnP, 
#line 17114
MonitorRequestReasonDP, 
#line 17115
MonitorRequestReasonSxTransition, 
#line 17116
MonitorRequestReasonSystemIdle, 
#line 17117
MonitorRequestReasonNearProximity, 
#line 17118
MonitorRequestReasonThermalStandby, 
#line 17119
MonitorRequestReasonResumePdc, 
#line 17120
MonitorRequestReasonResumeS4, 
#line 17121
MonitorRequestReasonTerminal, 
#line 17122
MonitorRequestReasonPdcSignal, 
#line 17123
MonitorRequestReasonAcDcDisplayBurstSuppressed, 
#line 17124
MonitorRequestReasonSystemStateEntered, 
#line 17127
MonitorRequestReasonWinrt, 
#line 17128
MonitorRequestReasonUserInputKeyboard, 
#line 17129
MonitorRequestReasonUserInputMouse, 
#line 17130
MonitorRequestReasonUserInputTouchpad, 
#line 17131
MonitorRequestReasonUserInputPen, 
#line 17132
MonitorRequestReasonUserInputAccelerometer, 
#line 17133
MonitorRequestReasonUserInputHid, 
#line 17134
MonitorRequestReasonUserInputPoUserPresent, 
#line 17135
MonitorRequestReasonUserInputSessionSwitch, 
#line 17136
MonitorRequestReasonUserInputInitialization, 
#line 17137
MonitorRequestReasonPdcSignalWindowsMobilePwrNotif, 
#line 17138
MonitorRequestReasonPdcSignalWindowsMobileShell, 
#line 17139
MonitorRequestReasonPdcSignalHeyCortana, 
#line 17140
MonitorRequestReasonPdcSignalHolographicShell, 
#line 17141
MonitorRequestReasonPdcSignalFingerprint, 
#line 17142
MonitorRequestReasonDirectedDrips, 
#line 17143
MonitorRequestReasonDim, 
#line 17144
MonitorRequestReasonBuiltinPanel, 
#line 17145
MonitorRequestReasonDisplayRequiredUnDim, 
#line 17146
MonitorRequestReasonBatteryCountChangeSuppressed, 
#line 17147
MonitorRequestReasonResumeModernStandby, 
#line 17148
MonitorRequestReasonTerminalInit, 
#line 17149
MonitorRequestReasonPdcSignalSensorsHumanPresence, 
#line 17150
MonitorRequestReasonBatteryPreCritical, 
#line 17151
MonitorRequestReasonUserInputTouch, 
#line 17152
MonitorRequestReasonMax
#line 17153
} POWER_MONITOR_REQUEST_REASON; 
#line 17159
typedef 
#line 17155
enum _POWER_MONITOR_REQUEST_TYPE { 
#line 17156
MonitorRequestTypeOff, 
#line 17157
MonitorRequestTypeOnAndPresent, 
#line 17158
MonitorRequestTypeToggleOn
#line 17159
} POWER_MONITOR_REQUEST_TYPE; 
#line 17167
typedef 
#line 17164
struct _POWER_MONITOR_INVOCATION { 
#line 17165
BOOLEAN Console; 
#line 17166
POWER_MONITOR_REQUEST_REASON RequestReason; 
#line 17167
} POWER_MONITOR_INVOCATION, *PPOWER_MONITOR_INVOCATION; 
#line 17177
typedef 
#line 17173
struct _RESUME_PERFORMANCE { 
#line 17174
DWORD PostTimeMs; 
#line 17175
ULONGLONG TotalResumeTimeMs; 
#line 17176
ULONGLONG ResumeCompleteTimestamp; 
#line 17177
} RESUME_PERFORMANCE, *PRESUME_PERFORMANCE; 
#line 17188
typedef 
#line 17183
enum { 
#line 17184
PoAc, 
#line 17185
PoDc, 
#line 17186
PoHot, 
#line 17187
PoConditionMaximum
#line 17188
} SYSTEM_POWER_CONDITION; 
#line 17220
typedef 
#line 17190
struct { 
#line 17196
DWORD Version; 
#line 17202
GUID Guid; 
#line 17209
SYSTEM_POWER_CONDITION PowerCondition; 
#line 17214
DWORD DataLength; 
#line 17219
BYTE Data[1]; 
#line 17220
} SET_POWER_SETTING_VALUE, *PSET_POWER_SETTING_VALUE; 
#line 17226
typedef 
#line 17224
struct { 
#line 17225
GUID Guid; 
#line 17226
} NOTIFY_USER_POWER_SETTING, *PNOTIFY_USER_POWER_SETTING; 
#line 17252
typedef 
#line 17233
struct _APPLICATIONLAUNCH_SETTING_VALUE { 
#line 17239
LARGE_INTEGER ActivationTime; 
#line 17244
DWORD Flags; 
#line 17249
DWORD ButtonInstanceID; 
#line 17252
} APPLICATIONLAUNCH_SETTING_VALUE, *PAPPLICATIONLAUNCH_SETTING_VALUE; 
#line 17269
typedef 
#line 17258
enum _POWER_PLATFORM_ROLE { 
#line 17259
PlatformRoleUnspecified, 
#line 17260
PlatformRoleDesktop, 
#line 17261
PlatformRoleMobile, 
#line 17262
PlatformRoleWorkstation, 
#line 17263
PlatformRoleEnterpriseServer, 
#line 17264
PlatformRoleSOHOServer, 
#line 17265
PlatformRoleAppliancePC, 
#line 17266
PlatformRolePerformanceServer, 
#line 17267
PlatformRoleSlate, 
#line 17268
PlatformRoleMaximum
#line 17269
} POWER_PLATFORM_ROLE, *PPOWER_PLATFORM_ROLE; 
#line 17291 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnt.h"
typedef 
#line 17289
struct _POWER_PLATFORM_INFORMATION { 
#line 17290
BOOLEAN AoAc; 
#line 17291
} POWER_PLATFORM_INFORMATION, *PPOWER_PLATFORM_INFORMATION; 
#line 17305
typedef 
#line 17297
enum POWER_SETTING_ALTITUDE { 
#line 17298
ALTITUDE_GROUP_POLICY, 
#line 17299
ALTITUDE_USER, 
#line 17300
ALTITUDE_RUNTIME_OVERRIDE, 
#line 17301
ALTITUDE_PROVISIONING, 
#line 17302
ALTITUDE_OEM_CUSTOMIZATION, 
#line 17303
ALTITUDE_INTERNAL_OVERRIDE, 
#line 17304
ALTITUDE_OS_DEFAULT
#line 17305
} POWER_SETTING_ALTITUDE, *PPOWER_SETTING_ALTITUDE; 
#line 17315
typedef 
#line 17312
struct { 
#line 17313
DWORD Granularity; 
#line 17314
DWORD Capacity; 
#line 17315
} BATTERY_REPORTING_SCALE, *PBATTERY_REPORTING_SCALE; 
#line 17324 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnt.h"
typedef 
#line 17320
struct { 
#line 17321
DWORD Frequency; 
#line 17322
DWORD Flags; 
#line 17323
DWORD PercentFrequency; 
#line 17324
} PPM_WMI_LEGACY_PERFSTATE, *PPPM_WMI_LEGACY_PERFSTATE; 
#line 17338
typedef 
#line 17326
struct { 
#line 17327
DWORD Latency; 
#line 17328
DWORD Power; 
#line 17329
DWORD TimeCheck; 
#line 17330
BYTE PromotePercent; 
#line 17331
BYTE DemotePercent; 
#line 17332
BYTE StateType; 
#line 17333
BYTE Reserved; 
#line 17334
DWORD StateFlags; 
#line 17335
DWORD Context; 
#line 17336
DWORD IdleHandler; 
#line 17337
DWORD Reserved1; 
#line 17338
} PPM_WMI_IDLE_STATE, *PPPM_WMI_IDLE_STATE; 
#line 17347
typedef 
#line 17340
struct { 
#line 17341
DWORD Type; 
#line 17342
DWORD Count; 
#line 17343
DWORD TargetState; 
#line 17344
DWORD OldState; 
#line 17345
DWORD64 TargetProcessors; 
#line 17346
PPM_WMI_IDLE_STATE State[1]; 
#line 17347
} PPM_WMI_IDLE_STATES, *PPPM_WMI_IDLE_STATES; 
#line 17356
typedef 
#line 17349
struct { 
#line 17350
DWORD Type; 
#line 17351
DWORD Count; 
#line 17352
DWORD TargetState; 
#line 17353
DWORD OldState; 
#line 17354
PVOID TargetProcessors; 
#line 17355
PPM_WMI_IDLE_STATE State[1]; 
#line 17356
} PPM_WMI_IDLE_STATES_EX, *PPPM_WMI_IDLE_STATES_EX; 
#line 17373
typedef 
#line 17358
struct { 
#line 17359
DWORD Frequency; 
#line 17360
DWORD Power; 
#line 17361
BYTE PercentFrequency; 
#line 17362
BYTE IncreaseLevel; 
#line 17363
BYTE DecreaseLevel; 
#line 17364
BYTE Type; 
#line 17365
DWORD IncreaseTime; 
#line 17366
DWORD DecreaseTime; 
#line 17367
DWORD64 Control; 
#line 17368
DWORD64 Status; 
#line 17369
DWORD HitCount; 
#line 17370
DWORD Reserved1; 
#line 17371
DWORD64 Reserved2; 
#line 17372
DWORD64 Reserved3; 
#line 17373
} PPM_WMI_PERF_STATE, *PPPM_WMI_PERF_STATE; 
#line 17397
typedef 
#line 17375
struct { 
#line 17376
DWORD Count; 
#line 17377
DWORD MaxFrequency; 
#line 17378
DWORD CurrentState; 
#line 17379
DWORD MaxPerfState; 
#line 17380
DWORD MinPerfState; 
#line 17381
DWORD LowestPerfState; 
#line 17382
DWORD ThermalConstraint; 
#line 17383
BYTE BusyAdjThreshold; 
#line 17384
BYTE PolicyType; 
#line 17385
BYTE Type; 
#line 17386
BYTE Reserved; 
#line 17387
DWORD TimerInterval; 
#line 17388
DWORD64 TargetProcessors; 
#line 17389
DWORD PStateHandler; 
#line 17390
DWORD PStateContext; 
#line 17391
DWORD TStateHandler; 
#line 17392
DWORD TStateContext; 
#line 17393
DWORD FeedbackHandler; 
#line 17394
DWORD Reserved1; 
#line 17395
DWORD64 Reserved2; 
#line 17396
PPM_WMI_PERF_STATE State[1]; 
#line 17397
} PPM_WMI_PERF_STATES, *PPPM_WMI_PERF_STATES; 
#line 17421
typedef 
#line 17399
struct { 
#line 17400
DWORD Count; 
#line 17401
DWORD MaxFrequency; 
#line 17402
DWORD CurrentState; 
#line 17403
DWORD MaxPerfState; 
#line 17404
DWORD MinPerfState; 
#line 17405
DWORD LowestPerfState; 
#line 17406
DWORD ThermalConstraint; 
#line 17407
BYTE BusyAdjThreshold; 
#line 17408
BYTE PolicyType; 
#line 17409
BYTE Type; 
#line 17410
BYTE Reserved; 
#line 17411
DWORD TimerInterval; 
#line 17412
PVOID TargetProcessors; 
#line 17413
DWORD PStateHandler; 
#line 17414
DWORD PStateContext; 
#line 17415
DWORD TStateHandler; 
#line 17416
DWORD TStateContext; 
#line 17417
DWORD FeedbackHandler; 
#line 17418
DWORD Reserved1; 
#line 17419
DWORD64 Reserved2; 
#line 17420
PPM_WMI_PERF_STATE State[1]; 
#line 17421
} PPM_WMI_PERF_STATES_EX, *PPPM_WMI_PERF_STATES_EX; 
#line 17435
typedef 
#line 17429
struct { 
#line 17430
DWORD IdleTransitions; 
#line 17431
DWORD FailedTransitions; 
#line 17432
DWORD InvalidBucketIndex; 
#line 17433
DWORD64 TotalTime; 
#line 17434
DWORD IdleTimeBuckets[6]; 
#line 17435
} PPM_IDLE_STATE_ACCOUNTING, *PPPM_IDLE_STATE_ACCOUNTING; 
#line 17443
typedef 
#line 17437
struct { 
#line 17438
DWORD StateCount; 
#line 17439
DWORD TotalTransitions; 
#line 17440
DWORD ResetCount; 
#line 17441
DWORD64 StartTime; 
#line 17442
PPM_IDLE_STATE_ACCOUNTING State[1]; 
#line 17443
} PPM_IDLE_ACCOUNTING, *PPPM_IDLE_ACCOUNTING; 
#line 17456
typedef 
#line 17451
struct { 
#line 17452
DWORD64 TotalTimeUs; 
#line 17453
DWORD MinTimeUs; 
#line 17454
DWORD MaxTimeUs; 
#line 17455
DWORD Count; 
#line 17456
} PPM_IDLE_STATE_BUCKET_EX, *PPPM_IDLE_STATE_BUCKET_EX; 
#line 17467
typedef 
#line 17458
struct { 
#line 17459
DWORD64 TotalTime; 
#line 17460
DWORD IdleTransitions; 
#line 17461
DWORD FailedTransitions; 
#line 17462
DWORD InvalidBucketIndex; 
#line 17463
DWORD MinTimeUs; 
#line 17464
DWORD MaxTimeUs; 
#line 17465
DWORD CancelledTransitions; 
#line 17466
PPM_IDLE_STATE_BUCKET_EX IdleTimeBuckets[16]; 
#line 17467
} PPM_IDLE_STATE_ACCOUNTING_EX, *PPPM_IDLE_STATE_ACCOUNTING_EX; 
#line 17476
typedef 
#line 17469
struct { 
#line 17470
DWORD StateCount; 
#line 17471
DWORD TotalTransitions; 
#line 17472
DWORD ResetCount; 
#line 17473
DWORD AbortCount; 
#line 17474
DWORD64 StartTime; 
#line 17475
PPM_IDLE_STATE_ACCOUNTING_EX State[1]; 
#line 17476
} PPM_IDLE_ACCOUNTING_EX, *PPPM_IDLE_ACCOUNTING_EX; 
#line 17539
extern const GUID PPM_PERFSTATE_CHANGE_GUID; 
#line 17543 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnt.h"
extern const GUID PPM_PERFSTATE_DOMAIN_CHANGE_GUID; 
#line 17547 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnt.h"
extern const GUID PPM_IDLESTATE_CHANGE_GUID; 
#line 17551 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnt.h"
extern const GUID PPM_PERFSTATES_DATA_GUID; 
#line 17555 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnt.h"
extern const GUID PPM_IDLESTATES_DATA_GUID; 
#line 17559 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnt.h"
extern const GUID PPM_IDLE_ACCOUNTING_GUID; 
#line 17563 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnt.h"
extern const GUID PPM_IDLE_ACCOUNTING_EX_GUID; 
#line 17567 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnt.h"
extern const GUID PPM_THERMALCONSTRAINT_GUID; 
#line 17571 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnt.h"
extern const GUID PPM_PERFMON_PERFSTATE_GUID; 
#line 17575 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnt.h"
extern const GUID PPM_THERMAL_POLICY_CHANGE_GUID; 
#line 17585 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnt.h"
typedef 
#line 17579
struct { 
#line 17580
DWORD State; 
#line 17581
DWORD Status; 
#line 17582
DWORD Latency; 
#line 17583
DWORD Speed; 
#line 17584
DWORD Processor; 
#line 17585
} PPM_PERFSTATE_EVENT, *PPPM_PERFSTATE_EVENT; 
#line 17592
typedef 
#line 17587
struct { 
#line 17588
DWORD State; 
#line 17589
DWORD Latency; 
#line 17590
DWORD Speed; 
#line 17591
DWORD64 Processors; 
#line 17592
} PPM_PERFSTATE_DOMAIN_EVENT, *PPPM_PERFSTATE_DOMAIN_EVENT; 
#line 17598
typedef 
#line 17594
struct { 
#line 17595
DWORD NewState; 
#line 17596
DWORD OldState; 
#line 17597
DWORD64 Processors; 
#line 17598
} PPM_IDLESTATE_EVENT, *PPPM_IDLESTATE_EVENT; 
#line 17603
typedef 
#line 17600
struct { 
#line 17601
DWORD ThermalConstraint; 
#line 17602
DWORD64 Processors; 
#line 17603
} PPM_THERMALCHANGE_EVENT, *PPPM_THERMALCHANGE_EVENT; 
#line 17605
#pragma warning(push)
#pragma warning(disable:4121)
#line 17611
typedef 
#line 17608
struct { 
#line 17609
BYTE Mode; 
#line 17610
DWORD64 Processors; 
#line 17611
} PPM_THERMAL_POLICY_EVENT, *PPPM_THERMAL_POLICY_EVENT; 
#line 17613
#pragma warning(pop)
#line 17622
typedef 
#line 17618
struct { 
#line 17619
POWER_ACTION Action; 
#line 17620
DWORD Flags; 
#line 17621
DWORD EventCode; 
#line 17622
} POWER_ACTION_POLICY, *PPOWER_ACTION_POLICY; 
#line 17666
typedef 
#line 17660
struct { 
#line 17661
BOOLEAN Enable; 
#line 17662
BYTE Spare[3]; 
#line 17663
DWORD BatteryLevel; 
#line 17664
POWER_ACTION_POLICY PowerPolicy; 
#line 17665
SYSTEM_POWER_STATE MinSystemState; 
#line 17666
} SYSTEM_POWER_LEVEL, *PSYSTEM_POWER_LEVEL; 
#line 17724
typedef 
#line 17675
struct _SYSTEM_POWER_POLICY { 
#line 17676
DWORD Revision; 
#line 17679
POWER_ACTION_POLICY PowerButton; 
#line 17680
POWER_ACTION_POLICY SleepButton; 
#line 17681
POWER_ACTION_POLICY LidClose; 
#line 17682
SYSTEM_POWER_STATE LidOpenWake; 
#line 17683
DWORD Reserved; 
#line 17686
POWER_ACTION_POLICY Idle; 
#line 17687
DWORD IdleTimeout; 
#line 17688
BYTE IdleSensitivity; 
#line 17690
BYTE DynamicThrottle; 
#line 17691
BYTE Spare2[2]; 
#line 17694
SYSTEM_POWER_STATE MinSleep; 
#line 17695
SYSTEM_POWER_STATE MaxSleep; 
#line 17696
SYSTEM_POWER_STATE ReducedLatencySleep; 
#line 17697
DWORD WinLogonFlags; 
#line 17699
DWORD Spare3; 
#line 17703
DWORD DozeS4Timeout; 
#line 17706
DWORD BroadcastCapacityResolution; 
#line 17707
SYSTEM_POWER_LEVEL DischargePolicy[4]; 
#line 17710
DWORD VideoTimeout; 
#line 17711
BOOLEAN VideoDimDisplay; 
#line 17712
DWORD VideoReserved[3]; 
#line 17715
DWORD SpindownTimeout; 
#line 17718
BOOLEAN OptimizeForPower; 
#line 17719
BYTE FanThrottleTolerance; 
#line 17720
BYTE ForcedThrottle; 
#line 17721
BYTE MinThrottle; 
#line 17722
POWER_ACTION_POLICY OverThrottled; 
#line 17724
} SYSTEM_POWER_POLICY, *PSYSTEM_POWER_POLICY; 
#line 17740
typedef 
#line 17735
struct { 
#line 17736
DWORD TimeCheck; 
#line 17737
BYTE DemotePercent; 
#line 17738
BYTE PromotePercent; 
#line 17739
BYTE Spare[2]; 
#line 17740
} PROCESSOR_IDLESTATE_INFO, *PPROCESSOR_IDLESTATE_INFO; 
#line 17755
typedef 
#line 17742
struct { 
#line 17743
WORD Revision; 
#line 17744
union { 
#line 17745
WORD AsWORD; 
#line 17746
struct { 
#line 17747
WORD AllowScaling:1; 
#line 17748
WORD Disabled:1; 
#line 17749
WORD Reserved:14; 
#line 17750
}; 
#line 17751
} Flags; 
#line 17753
DWORD PolicyCount; 
#line 17754
PROCESSOR_IDLESTATE_INFO Policy[3]; 
#line 17755
} PROCESSOR_IDLESTATE_POLICY, *PPROCESSOR_IDLESTATE_POLICY; 
#line 17787
typedef 
#line 17770
struct _PROCESSOR_POWER_POLICY_INFO { 
#line 17773
DWORD TimeCheck; 
#line 17774
DWORD DemoteLimit; 
#line 17775
DWORD PromoteLimit; 
#line 17778
BYTE DemotePercent; 
#line 17779
BYTE PromotePercent; 
#line 17780
BYTE Spare[2]; 
#line 17783
DWORD AllowDemotion:1; 
#line 17784
DWORD AllowPromotion:1; 
#line 17785
DWORD Reserved:30; 
#line 17787
} PROCESSOR_POWER_POLICY_INFO, *PPROCESSOR_POWER_POLICY_INFO; 
#line 17807
typedef 
#line 17790
struct _PROCESSOR_POWER_POLICY { 
#line 17791
DWORD Revision; 
#line 17794
BYTE DynamicThrottle; 
#line 17795
BYTE Spare[3]; 
#line 17798
DWORD DisableCStates:1; 
#line 17799
DWORD Reserved:31; 
#line 17804
DWORD PolicyCount; 
#line 17805
PROCESSOR_POWER_POLICY_INFO Policy[3]; 
#line 17807
} PROCESSOR_POWER_POLICY, *PPROCESSOR_POWER_POLICY; 
#line 17836
typedef 
#line 17813
struct { 
#line 17814
DWORD Revision; 
#line 17815
BYTE MaxThrottle; 
#line 17816
BYTE MinThrottle; 
#line 17817
BYTE BusyAdjThreshold; 
#line 17818
union { 
#line 17819
BYTE Spare; 
#line 17820
union { 
#line 17821
BYTE AsBYTE; 
#line 17822
struct { 
#line 17823
BYTE NoDomainAccounting:1; 
#line 17824
BYTE IncreasePolicy:2; 
#line 17825
BYTE DecreasePolicy:2; 
#line 17826
BYTE Reserved:3; 
#line 17827
}; 
#line 17828
} Flags; 
#line 17829
}; 
#line 17831
DWORD TimeCheck; 
#line 17832
DWORD IncreaseTime; 
#line 17833
DWORD DecreaseTime; 
#line 17834
DWORD IncreasePercent; 
#line 17835
DWORD DecreasePercent; 
#line 17836
} PROCESSOR_PERFSTATE_POLICY, *PPROCESSOR_PERFSTATE_POLICY; 
#line 17852
typedef 
#line 17839
struct _ADMINISTRATOR_POWER_POLICY { 
#line 17842
SYSTEM_POWER_STATE MinSleep; 
#line 17843
SYSTEM_POWER_STATE MaxSleep; 
#line 17846
DWORD MinVideoTimeout; 
#line 17847
DWORD MaxVideoTimeout; 
#line 17850
DWORD MinSpindownTimeout; 
#line 17851
DWORD MaxSpindownTimeout; 
#line 17852
} ADMINISTRATOR_POWER_POLICY, *PADMINISTRATOR_POWER_POLICY; 
#line 17864
typedef 
#line 17855
enum _HIBERFILE_BUCKET_SIZE { 
#line 17856
HiberFileBucket1GB, 
#line 17857
HiberFileBucket2GB, 
#line 17858
HiberFileBucket4GB, 
#line 17859
HiberFileBucket8GB, 
#line 17860
HiberFileBucket16GB, 
#line 17861
HiberFileBucket32GB, 
#line 17862
HiberFileBucketUnlimited, 
#line 17863
HiberFileBucketMax
#line 17864
} HIBERFILE_BUCKET_SIZE, *PHIBERFILE_BUCKET_SIZE; 
#line 17874
typedef 
#line 17871
struct _HIBERFILE_BUCKET { 
#line 17872
DWORD64 MaxPhysicalMemory; 
#line 17873
DWORD PhysicalMemoryPercent[3]; 
#line 17874
} HIBERFILE_BUCKET, *PHIBERFILE_BUCKET; 
#line 17931 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnt.h"
typedef 
#line 17876 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnt.h"
struct { 
#line 17878
BOOLEAN PowerButtonPresent; 
#line 17879
BOOLEAN SleepButtonPresent; 
#line 17880
BOOLEAN LidPresent; 
#line 17881
BOOLEAN SystemS1; 
#line 17882
BOOLEAN SystemS2; 
#line 17883
BOOLEAN SystemS3; 
#line 17884
BOOLEAN SystemS4; 
#line 17885
BOOLEAN SystemS5; 
#line 17886
BOOLEAN HiberFilePresent; 
#line 17887
BOOLEAN FullWake; 
#line 17888
BOOLEAN VideoDimPresent; 
#line 17889
BOOLEAN ApmPresent; 
#line 17890
BOOLEAN UpsPresent; 
#line 17893
BOOLEAN ThermalControl; 
#line 17894
BOOLEAN ProcessorThrottle; 
#line 17895
BYTE ProcessorMinThrottle; 
#line 17901 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnt.h"
BYTE ProcessorMaxThrottle; 
#line 17902
BOOLEAN FastSystemS4; 
#line 17903
BOOLEAN Hiberboot; 
#line 17904
BOOLEAN WakeAlarmPresent; 
#line 17905
BOOLEAN AoAc; 
#line 17909 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnt.h"
BOOLEAN DiskSpinDown; 
#line 17915 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnt.h"
BYTE HiberFileType; 
#line 17916
BOOLEAN AoAcConnectivitySupported; 
#line 17917
BYTE spare3[6]; 
#line 17921 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnt.h"
BOOLEAN SystemBatteriesPresent; 
#line 17922
BOOLEAN BatteriesAreShortTerm; 
#line 17923
BATTERY_REPORTING_SCALE BatteryScale[3]; 
#line 17926
SYSTEM_POWER_STATE AcOnLineWake; 
#line 17927
SYSTEM_POWER_STATE SoftLidWake; 
#line 17928
SYSTEM_POWER_STATE RtcWake; 
#line 17929
SYSTEM_POWER_STATE MinDeviceWakeState; 
#line 17930
SYSTEM_POWER_STATE DefaultLowLatencyWake; 
#line 17931
} SYSTEM_POWER_CAPABILITIES, *PSYSTEM_POWER_CAPABILITIES; 
#line 17949
typedef 
#line 17933
struct { 
#line 17934
BOOLEAN AcOnLine; 
#line 17935
BOOLEAN BatteryPresent; 
#line 17936
BOOLEAN Charging; 
#line 17937
BOOLEAN Discharging; 
#line 17938
BOOLEAN Spare1[3]; 
#line 17940
BYTE Tag; 
#line 17942
DWORD MaxCapacity; 
#line 17943
DWORD RemainingCapacity; 
#line 17944
DWORD Rate; 
#line 17945
DWORD EstimatedTime; 
#line 17947
DWORD DefaultAlert1; 
#line 17948
DWORD DefaultAlert2; 
#line 17949
} SYSTEM_BATTERY_STATE, *PSYSTEM_BATTERY_STATE; 
#line 24 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\shared\\pshpack4.h"
#pragma warning(disable:4103)
#line 26
#pragma pack ( push, 4 )
#line 24 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\shared\\pshpack2.h"
#pragma warning(disable:4103)
#line 26
#pragma pack ( push, 2 )
#line 18000 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnt.h"
typedef 
#line 17980
struct _IMAGE_DOS_HEADER { 
#line 17981
WORD e_magic; 
#line 17982
WORD e_cblp; 
#line 17983
WORD e_cp; 
#line 17984
WORD e_crlc; 
#line 17985
WORD e_cparhdr; 
#line 17986
WORD e_minalloc; 
#line 17987
WORD e_maxalloc; 
#line 17988
WORD e_ss; 
#line 17989
WORD e_sp; 
#line 17990
WORD e_csum; 
#line 17991
WORD e_ip; 
#line 17992
WORD e_cs; 
#line 17993
WORD e_lfarlc; 
#line 17994
WORD e_ovno; 
#line 17995
WORD e_res[4]; 
#line 17996
WORD e_oemid; 
#line 17997
WORD e_oeminfo; 
#line 17998
WORD e_res2[10]; 
#line 17999
LONG e_lfanew; 
#line 18000
} IMAGE_DOS_HEADER, *PIMAGE_DOS_HEADER; 
#line 18033
typedef 
#line 18002
struct _IMAGE_OS2_HEADER { 
#line 18003
WORD ne_magic; 
#line 18004
CHAR ne_ver; 
#line 18005
CHAR ne_rev; 
#line 18006
WORD ne_enttab; 
#line 18007
WORD ne_cbenttab; 
#line 18008
LONG ne_crc; 
#line 18009
WORD ne_flags; 
#line 18010
WORD ne_autodata; 
#line 18011
WORD ne_heap; 
#line 18012
WORD ne_stack; 
#line 18013
LONG ne_csip; 
#line 18014
LONG ne_sssp; 
#line 18015
WORD ne_cseg; 
#line 18016
WORD ne_cmod; 
#line 18017
WORD ne_cbnrestab; 
#line 18018
WORD ne_segtab; 
#line 18019
WORD ne_rsrctab; 
#line 18020
WORD ne_restab; 
#line 18021
WORD ne_modtab; 
#line 18022
WORD ne_imptab; 
#line 18023
LONG ne_nrestab; 
#line 18024
WORD ne_cmovent; 
#line 18025
WORD ne_align; 
#line 18026
WORD ne_cres; 
#line 18027
BYTE ne_exetyp; 
#line 18028
BYTE ne_flagsothers; 
#line 18029
WORD ne_pretthunks; 
#line 18030
WORD ne_psegrefbytes; 
#line 18031
WORD ne_swaparea; 
#line 18032
WORD ne_expver; 
#line 18033
} IMAGE_OS2_HEADER, *PIMAGE_OS2_HEADER; 
#line 18087
typedef 
#line 18035
struct _IMAGE_VXD_HEADER { 
#line 18036
WORD e32_magic; 
#line 18037
BYTE e32_border; 
#line 18038
BYTE e32_worder; 
#line 18039
DWORD e32_level; 
#line 18040
WORD e32_cpu; 
#line 18041
WORD e32_os; 
#line 18042
DWORD e32_ver; 
#line 18043
DWORD e32_mflags; 
#line 18044
DWORD e32_mpages; 
#line 18045
DWORD e32_startobj; 
#line 18046
DWORD e32_eip; 
#line 18047
DWORD e32_stackobj; 
#line 18048
DWORD e32_esp; 
#line 18049
DWORD e32_pagesize; 
#line 18050
DWORD e32_lastpagesize; 
#line 18051
DWORD e32_fixupsize; 
#line 18052
DWORD e32_fixupsum; 
#line 18053
DWORD e32_ldrsize; 
#line 18054
DWORD e32_ldrsum; 
#line 18055
DWORD e32_objtab; 
#line 18056
DWORD e32_objcnt; 
#line 18057
DWORD e32_objmap; 
#line 18058
DWORD e32_itermap; 
#line 18059
DWORD e32_rsrctab; 
#line 18060
DWORD e32_rsrccnt; 
#line 18061
DWORD e32_restab; 
#line 18062
DWORD e32_enttab; 
#line 18063
DWORD e32_dirtab; 
#line 18064
DWORD e32_dircnt; 
#line 18065
DWORD e32_fpagetab; 
#line 18066
DWORD e32_frectab; 
#line 18067
DWORD e32_impmod; 
#line 18068
DWORD e32_impmodcnt; 
#line 18069
DWORD e32_impproc; 
#line 18070
DWORD e32_pagesum; 
#line 18071
DWORD e32_datapage; 
#line 18072
DWORD e32_preload; 
#line 18073
DWORD e32_nrestab; 
#line 18074
DWORD e32_cbnrestab; 
#line 18075
DWORD e32_nressum; 
#line 18076
DWORD e32_autodata; 
#line 18077
DWORD e32_debuginfo; 
#line 18078
DWORD e32_debuglen; 
#line 18079
DWORD e32_instpreload; 
#line 18080
DWORD e32_instdemand; 
#line 18081
DWORD e32_heapsize; 
#line 18082
BYTE e32_res3[12]; 
#line 18083
DWORD e32_winresoff; 
#line 18084
DWORD e32_winreslen; 
#line 18085
WORD e32_devid; 
#line 18086
WORD e32_ddkver; 
#line 18087
} IMAGE_VXD_HEADER, *PIMAGE_VXD_HEADER; 
#line 27 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\shared\\poppack.h"
#pragma warning(disable:4103)
#line 29
#pragma pack ( pop )
#line 18105 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnt.h"
typedef 
#line 18097
struct _IMAGE_FILE_HEADER { 
#line 18098
WORD Machine; 
#line 18099
WORD NumberOfSections; 
#line 18100
DWORD TimeDateStamp; 
#line 18101
DWORD PointerToSymbolTable; 
#line 18102
DWORD NumberOfSymbols; 
#line 18103
WORD SizeOfOptionalHeader; 
#line 18104
WORD Characteristics; 
#line 18105
} IMAGE_FILE_HEADER, *PIMAGE_FILE_HEADER; 
#line 18166
typedef 
#line 18163
struct _IMAGE_DATA_DIRECTORY { 
#line 18164
DWORD VirtualAddress; 
#line 18165
DWORD Size; 
#line 18166
} IMAGE_DATA_DIRECTORY, *PIMAGE_DATA_DIRECTORY; 
#line 18215
typedef 
#line 18174
struct _IMAGE_OPTIONAL_HEADER { 
#line 18179
WORD Magic; 
#line 18180
BYTE MajorLinkerVersion; 
#line 18181
BYTE MinorLinkerVersion; 
#line 18182
DWORD SizeOfCode; 
#line 18183
DWORD SizeOfInitializedData; 
#line 18184
DWORD SizeOfUninitializedData; 
#line 18185
DWORD AddressOfEntryPoint; 
#line 18186
DWORD BaseOfCode; 
#line 18187
DWORD BaseOfData; 
#line 18193
DWORD ImageBase; 
#line 18194
DWORD SectionAlignment; 
#line 18195
DWORD FileAlignment; 
#line 18196
WORD MajorOperatingSystemVersion; 
#line 18197
WORD MinorOperatingSystemVersion; 
#line 18198
WORD MajorImageVersion; 
#line 18199
WORD MinorImageVersion; 
#line 18200
WORD MajorSubsystemVersion; 
#line 18201
WORD MinorSubsystemVersion; 
#line 18202
DWORD Win32VersionValue; 
#line 18203
DWORD SizeOfImage; 
#line 18204
DWORD SizeOfHeaders; 
#line 18205
DWORD CheckSum; 
#line 18206
WORD Subsystem; 
#line 18207
WORD DllCharacteristics; 
#line 18208
DWORD SizeOfStackReserve; 
#line 18209
DWORD SizeOfStackCommit; 
#line 18210
DWORD SizeOfHeapReserve; 
#line 18211
DWORD SizeOfHeapCommit; 
#line 18212
DWORD LoaderFlags; 
#line 18213
DWORD NumberOfRvaAndSizes; 
#line 18214
IMAGE_DATA_DIRECTORY DataDirectory[16]; 
#line 18215
} IMAGE_OPTIONAL_HEADER32, *PIMAGE_OPTIONAL_HEADER32; 
#line 18231
typedef 
#line 18217
struct _IMAGE_ROM_OPTIONAL_HEADER { 
#line 18218
WORD Magic; 
#line 18219
BYTE MajorLinkerVersion; 
#line 18220
BYTE MinorLinkerVersion; 
#line 18221
DWORD SizeOfCode; 
#line 18222
DWORD SizeOfInitializedData; 
#line 18223
DWORD SizeOfUninitializedData; 
#line 18224
DWORD AddressOfEntryPoint; 
#line 18225
DWORD BaseOfCode; 
#line 18226
DWORD BaseOfData; 
#line 18227
DWORD BaseOfBss; 
#line 18228
DWORD GprMask; 
#line 18229
DWORD CprMask[4]; 
#line 18230
DWORD GpValue; 
#line 18231
} IMAGE_ROM_OPTIONAL_HEADER, *PIMAGE_ROM_OPTIONAL_HEADER; 
#line 18264
typedef 
#line 18233
struct _IMAGE_OPTIONAL_HEADER64 { 
#line 18234
WORD Magic; 
#line 18235
BYTE MajorLinkerVersion; 
#line 18236
BYTE MinorLinkerVersion; 
#line 18237
DWORD SizeOfCode; 
#line 18238
DWORD SizeOfInitializedData; 
#line 18239
DWORD SizeOfUninitializedData; 
#line 18240
DWORD AddressOfEntryPoint; 
#line 18241
DWORD BaseOfCode; 
#line 18242
ULONGLONG ImageBase; 
#line 18243
DWORD SectionAlignment; 
#line 18244
DWORD FileAlignment; 
#line 18245
WORD MajorOperatingSystemVersion; 
#line 18246
WORD MinorOperatingSystemVersion; 
#line 18247
WORD MajorImageVersion; 
#line 18248
WORD MinorImageVersion; 
#line 18249
WORD MajorSubsystemVersion; 
#line 18250
WORD MinorSubsystemVersion; 
#line 18251
DWORD Win32VersionValue; 
#line 18252
DWORD SizeOfImage; 
#line 18253
DWORD SizeOfHeaders; 
#line 18254
DWORD CheckSum; 
#line 18255
WORD Subsystem; 
#line 18256
WORD DllCharacteristics; 
#line 18257
ULONGLONG SizeOfStackReserve; 
#line 18258
ULONGLONG SizeOfStackCommit; 
#line 18259
ULONGLONG SizeOfHeapReserve; 
#line 18260
ULONGLONG SizeOfHeapCommit; 
#line 18261
DWORD LoaderFlags; 
#line 18262
DWORD NumberOfRvaAndSizes; 
#line 18263
IMAGE_DATA_DIRECTORY DataDirectory[16]; 
#line 18264
} IMAGE_OPTIONAL_HEADER64, *PIMAGE_OPTIONAL_HEADER64; 
#line 18271
typedef IMAGE_OPTIONAL_HEADER64 IMAGE_OPTIONAL_HEADER; 
#line 18272
typedef PIMAGE_OPTIONAL_HEADER64 PIMAGE_OPTIONAL_HEADER; 
#line 18284 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnt.h"
typedef 
#line 18280
struct _IMAGE_NT_HEADERS64 { 
#line 18281
DWORD Signature; 
#line 18282
IMAGE_FILE_HEADER FileHeader; 
#line 18283
IMAGE_OPTIONAL_HEADER64 OptionalHeader; 
#line 18284
} IMAGE_NT_HEADERS64, *PIMAGE_NT_HEADERS64; 
#line 18290
typedef 
#line 18286
struct _IMAGE_NT_HEADERS { 
#line 18287
DWORD Signature; 
#line 18288
IMAGE_FILE_HEADER FileHeader; 
#line 18289
IMAGE_OPTIONAL_HEADER32 OptionalHeader; 
#line 18290
} IMAGE_NT_HEADERS32, *PIMAGE_NT_HEADERS32; 
#line 18295
typedef 
#line 18292
struct _IMAGE_ROM_HEADERS { 
#line 18293
IMAGE_FILE_HEADER FileHeader; 
#line 18294
IMAGE_ROM_OPTIONAL_HEADER OptionalHeader; 
#line 18295
} IMAGE_ROM_HEADERS, *PIMAGE_ROM_HEADERS; 
#line 18298
typedef IMAGE_NT_HEADERS64 IMAGE_NT_HEADERS; 
#line 18299
typedef PIMAGE_NT_HEADERS64 PIMAGE_NT_HEADERS; 
#line 18380 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnt.h"
typedef 
#line 18372
struct ANON_OBJECT_HEADER { 
#line 18373
WORD Sig1; 
#line 18374
WORD Sig2; 
#line 18375
WORD Version; 
#line 18376
WORD Machine; 
#line 18377
DWORD TimeDateStamp; 
#line 18378
CLSID ClassID; 
#line 18379
DWORD SizeOfData; 
#line 18380
} ANON_OBJECT_HEADER; 
#line 18393
typedef 
#line 18382
struct ANON_OBJECT_HEADER_V2 { 
#line 18383
WORD Sig1; 
#line 18384
WORD Sig2; 
#line 18385
WORD Version; 
#line 18386
WORD Machine; 
#line 18387
DWORD TimeDateStamp; 
#line 18388
CLSID ClassID; 
#line 18389
DWORD SizeOfData; 
#line 18390
DWORD Flags; 
#line 18391
DWORD MetaDataSize; 
#line 18392
DWORD MetaDataOffset; 
#line 18393
} ANON_OBJECT_HEADER_V2; 
#line 18412
typedef 
#line 18395
struct ANON_OBJECT_HEADER_BIGOBJ { 
#line 18397
WORD Sig1; 
#line 18398
WORD Sig2; 
#line 18399
WORD Version; 
#line 18400
WORD Machine; 
#line 18401
DWORD TimeDateStamp; 
#line 18402
CLSID ClassID; 
#line 18403
DWORD SizeOfData; 
#line 18404
DWORD Flags; 
#line 18405
DWORD MetaDataSize; 
#line 18406
DWORD MetaDataOffset; 
#line 18409
DWORD NumberOfSections; 
#line 18410
DWORD PointerToSymbolTable; 
#line 18411
DWORD NumberOfSymbols; 
#line 18412
} ANON_OBJECT_HEADER_BIGOBJ; 
#line 18434
typedef 
#line 18420
struct _IMAGE_SECTION_HEADER { 
#line 18421
BYTE Name[8]; 
#line 18422
union { 
#line 18423
DWORD PhysicalAddress; 
#line 18424
DWORD VirtualSize; 
#line 18425
} Misc; 
#line 18426
DWORD VirtualAddress; 
#line 18427
DWORD SizeOfRawData; 
#line 18428
DWORD PointerToRawData; 
#line 18429
DWORD PointerToRelocations; 
#line 18430
DWORD PointerToLinenumbers; 
#line 18431
WORD NumberOfRelocations; 
#line 18432
WORD NumberOfLinenumbers; 
#line 18433
DWORD Characteristics; 
#line 18434
} IMAGE_SECTION_HEADER, *PIMAGE_SECTION_HEADER; 
#line 24 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\shared\\pshpack2.h"
#pragma warning(disable:4103)
#line 26
#pragma pack ( push, 2 )
#line 18521 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnt.h"
typedef 
#line 18507
struct _IMAGE_SYMBOL { 
#line 18508
union { 
#line 18509
BYTE ShortName[8]; 
#line 18510
struct { 
#line 18511
DWORD Short; 
#line 18512
DWORD Long; 
#line 18513
} Name; 
#line 18514
DWORD LongName[2]; 
#line 18515
} N; 
#line 18516
DWORD Value; 
#line 18517
SHORT SectionNumber; 
#line 18518
WORD Type; 
#line 18519
BYTE StorageClass; 
#line 18520
BYTE NumberOfAuxSymbols; 
#line 18521
} IMAGE_SYMBOL; 
#line 18522
typedef __unaligned IMAGE_SYMBOL *PIMAGE_SYMBOL; 
#line 18540
typedef 
#line 18526
struct _IMAGE_SYMBOL_EX { 
#line 18527
union { 
#line 18528
BYTE ShortName[8]; 
#line 18529
struct { 
#line 18530
DWORD Short; 
#line 18531
DWORD Long; 
#line 18532
} Name; 
#line 18533
DWORD LongName[2]; 
#line 18534
} N; 
#line 18535
DWORD Value; 
#line 18536
LONG SectionNumber; 
#line 18537
WORD Type; 
#line 18538
BYTE StorageClass; 
#line 18539
BYTE NumberOfAuxSymbols; 
#line 18540
} IMAGE_SYMBOL_EX; 
#line 18541
typedef __unaligned IMAGE_SYMBOL_EX *PIMAGE_SYMBOL_EX; 
#line 24 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\shared\\pshpack2.h"
#pragma warning(disable:4103)
#line 26
#pragma pack ( push, 2 )
#line 18670 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnt.h"
typedef 
#line 18665
struct IMAGE_AUX_SYMBOL_TOKEN_DEF { 
#line 18666
BYTE bAuxType; 
#line 18667
BYTE bReserved; 
#line 18668
DWORD SymbolTableIndex; 
#line 18669
BYTE rgbReserved[12]; 
#line 18670
} IMAGE_AUX_SYMBOL_TOKEN_DEF; 
#line 18672
typedef __unaligned IMAGE_AUX_SYMBOL_TOKEN_DEF *PIMAGE_AUX_SYMBOL_TOKEN_DEF; 
#line 27 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\shared\\poppack.h"
#pragma warning(disable:4103)
#line 29
#pragma pack ( pop )
#line 18719 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnt.h"
typedef 
#line 18680
union _IMAGE_AUX_SYMBOL { 
#line 18681
struct { 
#line 18682
DWORD TagIndex; 
#line 18683
union { 
#line 18684
struct { 
#line 18685
WORD Linenumber; 
#line 18686
WORD Size; 
#line 18687
} LnSz; 
#line 18688
DWORD TotalSize; 
#line 18689
} Misc; 
#line 18690
union { 
#line 18691
struct { 
#line 18692
DWORD PointerToLinenumber; 
#line 18693
DWORD PointerToNextFunction; 
#line 18694
} Function; 
#line 18695
struct { 
#line 18696
WORD Dimension[4]; 
#line 18697
} Array; 
#line 18698
} FcnAry; 
#line 18699
WORD TvIndex; 
#line 18700
} Sym; 
#line 18701
struct { 
#line 18702
BYTE Name[18]; 
#line 18703
} File; 
#line 18704
struct { 
#line 18705
DWORD Length; 
#line 18706
WORD NumberOfRelocations; 
#line 18707
WORD NumberOfLinenumbers; 
#line 18708
DWORD CheckSum; 
#line 18709
SHORT Number; 
#line 18710
BYTE Selection; 
#line 18711
BYTE bReserved; 
#line 18712
SHORT HighNumber; 
#line 18713
} Section; 
#line 18714
IMAGE_AUX_SYMBOL_TOKEN_DEF TokenDef; 
#line 18715
struct { 
#line 18716
DWORD crc; 
#line 18717
BYTE rgbReserved[14]; 
#line 18718
} CRC; 
#line 18719
} IMAGE_AUX_SYMBOL; 
#line 18720
typedef __unaligned IMAGE_AUX_SYMBOL *PIMAGE_AUX_SYMBOL; 
#line 18750
typedef 
#line 18722
union _IMAGE_AUX_SYMBOL_EX { 
#line 18723
struct { 
#line 18724
DWORD WeakDefaultSymIndex; 
#line 18725
DWORD WeakSearchType; 
#line 18726
BYTE rgbReserved[12]; 
#line 18727
} Sym; 
#line 18728
struct { 
#line 18729
BYTE Name[sizeof(IMAGE_SYMBOL_EX)]; 
#line 18730
} File; 
#line 18731
struct { 
#line 18732
DWORD Length; 
#line 18733
WORD NumberOfRelocations; 
#line 18734
WORD NumberOfLinenumbers; 
#line 18735
DWORD CheckSum; 
#line 18736
SHORT Number; 
#line 18737
BYTE Selection; 
#line 18738
BYTE bReserved; 
#line 18739
SHORT HighNumber; 
#line 18740
BYTE rgbReserved[2]; 
#line 18741
} Section; 
#line 18742
struct { 
#line 18743
IMAGE_AUX_SYMBOL_TOKEN_DEF TokenDef; 
#line 18744
BYTE rgbReserved[2]; 
#line 18745
}; 
#line 18746
struct { 
#line 18747
DWORD crc; 
#line 18748
BYTE rgbReserved[16]; 
#line 18749
} CRC; 
#line 18750
} IMAGE_AUX_SYMBOL_EX; 
#line 18751
typedef __unaligned IMAGE_AUX_SYMBOL_EX *PIMAGE_AUX_SYMBOL_EX; 
#line 18755
typedef 
#line 18753
enum IMAGE_AUX_SYMBOL_TYPE { 
#line 18754
IMAGE_AUX_SYMBOL_TYPE_TOKEN_DEF = 1
#line 18755
} IMAGE_AUX_SYMBOL_TYPE; 
#line 18786
typedef 
#line 18779
struct _IMAGE_RELOCATION { 
#line 18780
union { 
#line 18781
DWORD VirtualAddress; 
#line 18782
DWORD RelocCount; 
#line 18783
}; 
#line 18784
DWORD SymbolTableIndex; 
#line 18785
WORD Type; 
#line 18786
} IMAGE_RELOCATION; 
#line 18787
typedef __unaligned IMAGE_RELOCATION *PIMAGE_RELOCATION; 
#line 19198
typedef 
#line 19192
struct _IMAGE_LINENUMBER { 
#line 19193
union { 
#line 19194
DWORD SymbolTableIndex; 
#line 19195
DWORD VirtualAddress; 
#line 19196
} Type; 
#line 19197
WORD Linenumber; 
#line 19198
} IMAGE_LINENUMBER; 
#line 19199
typedef __unaligned IMAGE_LINENUMBER *PIMAGE_LINENUMBER; 
#line 27 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\shared\\poppack.h"
#pragma warning(disable:4103)
#line 29
#pragma pack ( pop )
#line 19214 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnt.h"
typedef 
#line 19210
struct _IMAGE_BASE_RELOCATION { 
#line 19211
DWORD VirtualAddress; 
#line 19212
DWORD SizeOfBlock; 
#line 19214
} IMAGE_BASE_RELOCATION; 
#line 19215
typedef __unaligned IMAGE_BASE_RELOCATION *PIMAGE_BASE_RELOCATION; 
#line 19267
typedef 
#line 19259
struct _IMAGE_ARCHIVE_MEMBER_HEADER { 
#line 19260
BYTE Name[16]; 
#line 19261
BYTE Date[12]; 
#line 19262
BYTE UserID[6]; 
#line 19263
BYTE GroupID[6]; 
#line 19264
BYTE Mode[8]; 
#line 19265
BYTE Size[10]; 
#line 19266
BYTE EndHeader[2]; 
#line 19267
} IMAGE_ARCHIVE_MEMBER_HEADER, *PIMAGE_ARCHIVE_MEMBER_HEADER; 
#line 19292
typedef 
#line 19280
struct _IMAGE_EXPORT_DIRECTORY { 
#line 19281
DWORD Characteristics; 
#line 19282
DWORD TimeDateStamp; 
#line 19283
WORD MajorVersion; 
#line 19284
WORD MinorVersion; 
#line 19285
DWORD Name; 
#line 19286
DWORD Base; 
#line 19287
DWORD NumberOfFunctions; 
#line 19288
DWORD NumberOfNames; 
#line 19289
DWORD AddressOfFunctions; 
#line 19290
DWORD AddressOfNames; 
#line 19291
DWORD AddressOfNameOrdinals; 
#line 19292
} IMAGE_EXPORT_DIRECTORY, *PIMAGE_EXPORT_DIRECTORY; 
#line 19302
typedef 
#line 19299
struct _IMAGE_IMPORT_BY_NAME { 
#line 19300
WORD Hint; 
#line 19301
CHAR Name[1]; 
#line 19302
} IMAGE_IMPORT_BY_NAME, *PIMAGE_IMPORT_BY_NAME; 
#line 24 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\shared\\pshpack8.h"
#pragma warning(disable:4103)
#line 26
#pragma pack ( push, 8 )
#line 19314 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnt.h"
typedef 
#line 19307
struct _IMAGE_THUNK_DATA64 { 
#line 19308
union { 
#line 19309
ULONGLONG ForwarderString; 
#line 19310
ULONGLONG Function; 
#line 19311
ULONGLONG Ordinal; 
#line 19312
ULONGLONG AddressOfData; 
#line 19313
} u1; 
#line 19314
} IMAGE_THUNK_DATA64; 
#line 19315
typedef IMAGE_THUNK_DATA64 *PIMAGE_THUNK_DATA64; 
#line 27 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\shared\\poppack.h"
#pragma warning(disable:4103)
#line 29
#pragma pack ( pop )
#line 19327 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnt.h"
typedef 
#line 19320
struct _IMAGE_THUNK_DATA32 { 
#line 19321
union { 
#line 19322
DWORD ForwarderString; 
#line 19323
DWORD Function; 
#line 19324
DWORD Ordinal; 
#line 19325
DWORD AddressOfData; 
#line 19326
} u1; 
#line 19327
} IMAGE_THUNK_DATA32; 
#line 19328
typedef IMAGE_THUNK_DATA32 *PIMAGE_THUNK_DATA32; 
#line 19342
typedef void (__stdcall *PIMAGE_TLS_CALLBACK)(PVOID DllHandle, DWORD Reason, PVOID Reserved); 
#line 19363
typedef 
#line 19348
struct _IMAGE_TLS_DIRECTORY64 { 
#line 19349
ULONGLONG StartAddressOfRawData; 
#line 19350
ULONGLONG EndAddressOfRawData; 
#line 19351
ULONGLONG AddressOfIndex; 
#line 19352
ULONGLONG AddressOfCallBacks; 
#line 19353
DWORD SizeOfZeroFill; 
#line 19354
union { 
#line 19355
DWORD Characteristics; 
#line 19356
struct { 
#line 19357
DWORD Reserved0:20; 
#line 19358
DWORD Alignment:4; 
#line 19359
DWORD Reserved1:8; 
#line 19360
}; 
#line 19361
}; 
#line 19363
} IMAGE_TLS_DIRECTORY64; 
#line 19365
typedef IMAGE_TLS_DIRECTORY64 *PIMAGE_TLS_DIRECTORY64; 
#line 19382
typedef 
#line 19367
struct _IMAGE_TLS_DIRECTORY32 { 
#line 19368
DWORD StartAddressOfRawData; 
#line 19369
DWORD EndAddressOfRawData; 
#line 19370
DWORD AddressOfIndex; 
#line 19371
DWORD AddressOfCallBacks; 
#line 19372
DWORD SizeOfZeroFill; 
#line 19373
union { 
#line 19374
DWORD Characteristics; 
#line 19375
struct { 
#line 19376
DWORD Reserved0:20; 
#line 19377
DWORD Alignment:4; 
#line 19378
DWORD Reserved1:8; 
#line 19379
}; 
#line 19380
}; 
#line 19382
} IMAGE_TLS_DIRECTORY32; 
#line 19383
typedef IMAGE_TLS_DIRECTORY32 *PIMAGE_TLS_DIRECTORY32; 
#line 19388
typedef IMAGE_THUNK_DATA64 IMAGE_THUNK_DATA; 
#line 19389
typedef PIMAGE_THUNK_DATA64 PIMAGE_THUNK_DATA; 
#line 19391
typedef IMAGE_TLS_DIRECTORY64 IMAGE_TLS_DIRECTORY; 
#line 19392
typedef PIMAGE_TLS_DIRECTORY64 PIMAGE_TLS_DIRECTORY; 
#line 19417 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnt.h"
typedef 
#line 19404
struct _IMAGE_IMPORT_DESCRIPTOR { 
#line 19405
union { 
#line 19406
DWORD Characteristics; 
#line 19407
DWORD OriginalFirstThunk; 
#line 19408
}; 
#line 19409
DWORD TimeDateStamp; 
#line 19414
DWORD ForwarderChain; 
#line 19415
DWORD Name; 
#line 19416
DWORD FirstThunk; 
#line 19417
} IMAGE_IMPORT_DESCRIPTOR; 
#line 19418
typedef __unaligned IMAGE_IMPORT_DESCRIPTOR *PIMAGE_IMPORT_DESCRIPTOR; 
#line 19429
typedef 
#line 19424
struct _IMAGE_BOUND_IMPORT_DESCRIPTOR { 
#line 19425
DWORD TimeDateStamp; 
#line 19426
WORD OffsetModuleName; 
#line 19427
WORD NumberOfModuleForwarderRefs; 
#line 19429
} IMAGE_BOUND_IMPORT_DESCRIPTOR, *PIMAGE_BOUND_IMPORT_DESCRIPTOR; 
#line 19435
typedef 
#line 19431
struct _IMAGE_BOUND_FORWARDER_REF { 
#line 19432
DWORD TimeDateStamp; 
#line 19433
WORD OffsetModuleName; 
#line 19434
WORD Reserved; 
#line 19435
} IMAGE_BOUND_FORWARDER_REF, *PIMAGE_BOUND_FORWARDER_REF; 
#line 19455
typedef 
#line 19437
struct _IMAGE_DELAYLOAD_DESCRIPTOR { 
#line 19438
union { 
#line 19439
DWORD AllAttributes; 
#line 19440
struct { 
#line 19441
DWORD RvaBased:1; 
#line 19442
DWORD ReservedAttributes:31; 
#line 19443
}; 
#line 19444
} Attributes; 
#line 19446
DWORD DllNameRVA; 
#line 19447
DWORD ModuleHandleRVA; 
#line 19448
DWORD ImportAddressTableRVA; 
#line 19449
DWORD ImportNameTableRVA; 
#line 19450
DWORD BoundImportAddressTableRVA; 
#line 19451
DWORD UnloadInformationTableRVA; 
#line 19452
DWORD TimeDateStamp; 
#line 19455
} IMAGE_DELAYLOAD_DESCRIPTOR, *PIMAGE_DELAYLOAD_DESCRIPTOR; 
#line 19457
typedef const IMAGE_DELAYLOAD_DESCRIPTOR *PCIMAGE_DELAYLOAD_DESCRIPTOR; 
#line 19485
typedef 
#line 19477
struct _IMAGE_RESOURCE_DIRECTORY { 
#line 19478
DWORD Characteristics; 
#line 19479
DWORD TimeDateStamp; 
#line 19480
WORD MajorVersion; 
#line 19481
WORD MinorVersion; 
#line 19482
WORD NumberOfNamedEntries; 
#line 19483
WORD NumberOfIdEntries; 
#line 19485
} IMAGE_RESOURCE_DIRECTORY, *PIMAGE_RESOURCE_DIRECTORY; 
#line 19521
typedef 
#line 19505
struct _IMAGE_RESOURCE_DIRECTORY_ENTRY { 
#line 19506
union { 
#line 19507
struct { 
#line 19508
DWORD NameOffset:31; 
#line 19509
DWORD NameIsString:1; 
#line 19510
}; 
#line 19511
DWORD Name; 
#line 19512
WORD Id; 
#line 19513
}; 
#line 19514
union { 
#line 19515
DWORD OffsetToData; 
#line 19516
struct { 
#line 19517
DWORD OffsetToDirectory:31; 
#line 19518
DWORD DataIsDirectory:1; 
#line 19519
}; 
#line 19520
}; 
#line 19521
} IMAGE_RESOURCE_DIRECTORY_ENTRY, *PIMAGE_RESOURCE_DIRECTORY_ENTRY; 
#line 19535
typedef 
#line 19532
struct _IMAGE_RESOURCE_DIRECTORY_STRING { 
#line 19533
WORD Length; 
#line 19534
CHAR NameString[1]; 
#line 19535
} IMAGE_RESOURCE_DIRECTORY_STRING, *PIMAGE_RESOURCE_DIRECTORY_STRING; 
#line 19541
typedef 
#line 19538
struct _IMAGE_RESOURCE_DIR_STRING_U { 
#line 19539
WORD Length; 
#line 19540
WCHAR NameString[1]; 
#line 19541
} IMAGE_RESOURCE_DIR_STRING_U, *PIMAGE_RESOURCE_DIR_STRING_U; 
#line 19559
typedef 
#line 19554
struct _IMAGE_RESOURCE_DATA_ENTRY { 
#line 19555
DWORD OffsetToData; 
#line 19556
DWORD Size; 
#line 19557
DWORD CodePage; 
#line 19558
DWORD Reserved; 
#line 19559
} IMAGE_RESOURCE_DATA_ENTRY, *PIMAGE_RESOURCE_DATA_ENTRY; 
#line 19572
typedef 
#line 19567
struct _IMAGE_LOAD_CONFIG_CODE_INTEGRITY { 
#line 19568
WORD Flags; 
#line 19569
WORD Catalog; 
#line 19570
DWORD CatalogOffset; 
#line 19571
DWORD Reserved; 
#line 19572
} IMAGE_LOAD_CONFIG_CODE_INTEGRITY, *PIMAGE_LOAD_CONFIG_CODE_INTEGRITY; 
#line 19582
typedef 
#line 19578
struct _IMAGE_DYNAMIC_RELOCATION_TABLE { 
#line 19579
DWORD Version; 
#line 19580
DWORD Size; 
#line 19582
} IMAGE_DYNAMIC_RELOCATION_TABLE, *PIMAGE_DYNAMIC_RELOCATION_TABLE; 
#line 24 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\shared\\pshpack1.h"
#pragma warning(disable:4103)
#line 26
#pragma pack ( push, 1 )
#line 19594 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnt.h"
typedef 
#line 19590
struct _IMAGE_DYNAMIC_RELOCATION32 { 
#line 19591
DWORD Symbol; 
#line 19592
DWORD BaseRelocSize; 
#line 19594
} IMAGE_DYNAMIC_RELOCATION32, *PIMAGE_DYNAMIC_RELOCATION32; 
#line 19600
typedef 
#line 19596
struct _IMAGE_DYNAMIC_RELOCATION64 { 
#line 19597
ULONGLONG Symbol; 
#line 19598
DWORD BaseRelocSize; 
#line 19600
} IMAGE_DYNAMIC_RELOCATION64, *PIMAGE_DYNAMIC_RELOCATION64; 
#line 19610
typedef 
#line 19602
struct _IMAGE_DYNAMIC_RELOCATION32_V2 { 
#line 19603
DWORD HeaderSize; 
#line 19604
DWORD FixupInfoSize; 
#line 19605
DWORD Symbol; 
#line 19606
DWORD SymbolGroup; 
#line 19607
DWORD Flags; 
#line 19610
} IMAGE_DYNAMIC_RELOCATION32_V2, *PIMAGE_DYNAMIC_RELOCATION32_V2; 
#line 19620
typedef 
#line 19612
struct _IMAGE_DYNAMIC_RELOCATION64_V2 { 
#line 19613
DWORD HeaderSize; 
#line 19614
DWORD FixupInfoSize; 
#line 19615
ULONGLONG Symbol; 
#line 19616
DWORD SymbolGroup; 
#line 19617
DWORD Flags; 
#line 19620
} IMAGE_DYNAMIC_RELOCATION64_V2, *PIMAGE_DYNAMIC_RELOCATION64_V2; 
#line 27 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\shared\\poppack.h"
#pragma warning(disable:4103)
#line 29
#pragma pack ( pop )
#line 19625 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnt.h"
typedef IMAGE_DYNAMIC_RELOCATION64 IMAGE_DYNAMIC_RELOCATION; 
#line 19626
typedef PIMAGE_DYNAMIC_RELOCATION64 PIMAGE_DYNAMIC_RELOCATION; 
#line 19627
typedef IMAGE_DYNAMIC_RELOCATION64_V2 IMAGE_DYNAMIC_RELOCATION_V2; 
#line 19628
typedef PIMAGE_DYNAMIC_RELOCATION64_V2 PIMAGE_DYNAMIC_RELOCATION_V2; 
#line 24 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\shared\\pshpack1.h"
#pragma warning(disable:4103)
#line 26
#pragma pack ( push, 1 )
#line 19651 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnt.h"
typedef 
#line 19648
struct _IMAGE_PROLOGUE_DYNAMIC_RELOCATION_HEADER { 
#line 19649
BYTE PrologueByteCount; 
#line 19651
} IMAGE_PROLOGUE_DYNAMIC_RELOCATION_HEADER; 
#line 19652
typedef __unaligned IMAGE_PROLOGUE_DYNAMIC_RELOCATION_HEADER *PIMAGE_PROLOGUE_DYNAMIC_RELOCATION_HEADER; 
#line 19661
typedef 
#line 19654
struct _IMAGE_EPILOGUE_DYNAMIC_RELOCATION_HEADER { 
#line 19655
DWORD EpilogueCount; 
#line 19656
BYTE EpilogueByteCount; 
#line 19657
BYTE BranchDescriptorElementSize; 
#line 19658
WORD BranchDescriptorCount; 
#line 19661
} IMAGE_EPILOGUE_DYNAMIC_RELOCATION_HEADER; 
#line 19662
typedef __unaligned IMAGE_EPILOGUE_DYNAMIC_RELOCATION_HEADER *PIMAGE_EPILOGUE_DYNAMIC_RELOCATION_HEADER; 
#line 19668
typedef 
#line 19664
struct _IMAGE_IMPORT_CONTROL_TRANSFER_DYNAMIC_RELOCATION { 
#line 19665
DWORD PageRelativeOffset:12; 
#line 19666
DWORD IndirectCall:1; 
#line 19667
DWORD IATIndex:19; 
#line 19668
} IMAGE_IMPORT_CONTROL_TRANSFER_DYNAMIC_RELOCATION; 
#line 19669
typedef __unaligned IMAGE_IMPORT_CONTROL_TRANSFER_DYNAMIC_RELOCATION *PIMAGE_IMPORT_CONTROL_TRANSFER_DYNAMIC_RELOCATION; 
#line 19677
typedef 
#line 19671
struct _IMAGE_INDIR_CONTROL_TRANSFER_DYNAMIC_RELOCATION { 
#line 19672
WORD PageRelativeOffset:12; 
#line 19673
WORD IndirectCall:1; 
#line 19674
WORD RexWPrefix:1; 
#line 19675
WORD CfgCheck:1; 
#line 19676
WORD Reserved:1; 
#line 19677
} IMAGE_INDIR_CONTROL_TRANSFER_DYNAMIC_RELOCATION; 
#line 19678
typedef __unaligned IMAGE_INDIR_CONTROL_TRANSFER_DYNAMIC_RELOCATION *PIMAGE_INDIR_CONTROL_TRANSFER_DYNAMIC_RELOCATION; 
#line 19683
typedef 
#line 19680
struct _IMAGE_SWITCHTABLE_BRANCH_DYNAMIC_RELOCATION { 
#line 19681
WORD PageRelativeOffset:12; 
#line 19682
WORD RegisterNumber:4; 
#line 19683
} IMAGE_SWITCHTABLE_BRANCH_DYNAMIC_RELOCATION; 
#line 19684
typedef __unaligned IMAGE_SWITCHTABLE_BRANCH_DYNAMIC_RELOCATION *PIMAGE_SWITCHTABLE_BRANCH_DYNAMIC_RELOCATION; 
#line 27 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\shared\\poppack.h"
#pragma warning(disable:4103)
#line 29
#pragma pack ( pop )
#line 19741 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnt.h"
typedef 
#line 19692
struct _IMAGE_LOAD_CONFIG_DIRECTORY32 { 
#line 19693
DWORD Size; 
#line 19694
DWORD TimeDateStamp; 
#line 19695
WORD MajorVersion; 
#line 19696
WORD MinorVersion; 
#line 19697
DWORD GlobalFlagsClear; 
#line 19698
DWORD GlobalFlagsSet; 
#line 19699
DWORD CriticalSectionDefaultTimeout; 
#line 19700
DWORD DeCommitFreeBlockThreshold; 
#line 19701
DWORD DeCommitTotalFreeThreshold; 
#line 19702
DWORD LockPrefixTable; 
#line 19703
DWORD MaximumAllocationSize; 
#line 19704
DWORD VirtualMemoryThreshold; 
#line 19705
DWORD ProcessHeapFlags; 
#line 19706
DWORD ProcessAffinityMask; 
#line 19707
WORD CSDVersion; 
#line 19708
WORD DependentLoadFlags; 
#line 19709
DWORD EditList; 
#line 19710
DWORD SecurityCookie; 
#line 19711
DWORD SEHandlerTable; 
#line 19712
DWORD SEHandlerCount; 
#line 19713
DWORD GuardCFCheckFunctionPointer; 
#line 19714
DWORD GuardCFDispatchFunctionPointer; 
#line 19715
DWORD GuardCFFunctionTable; 
#line 19716
DWORD GuardCFFunctionCount; 
#line 19717
DWORD GuardFlags; 
#line 19718
IMAGE_LOAD_CONFIG_CODE_INTEGRITY CodeIntegrity; 
#line 19719
DWORD GuardAddressTakenIatEntryTable; 
#line 19720
DWORD GuardAddressTakenIatEntryCount; 
#line 19721
DWORD GuardLongJumpTargetTable; 
#line 19722
DWORD GuardLongJumpTargetCount; 
#line 19723
DWORD DynamicValueRelocTable; 
#line 19724
DWORD CHPEMetadataPointer; 
#line 19725
DWORD GuardRFFailureRoutine; 
#line 19726
DWORD GuardRFFailureRoutineFunctionPointer; 
#line 19727
DWORD DynamicValueRelocTableOffset; 
#line 19728
WORD DynamicValueRelocTableSection; 
#line 19729
WORD Reserved2; 
#line 19730
DWORD GuardRFVerifyStackPointerFunctionPointer; 
#line 19731
DWORD HotPatchTableOffset; 
#line 19732
DWORD Reserved3; 
#line 19733
DWORD EnclaveConfigurationPointer; 
#line 19734
DWORD VolatileMetadataPointer; 
#line 19735
DWORD GuardEHContinuationTable; 
#line 19736
DWORD GuardEHContinuationCount; 
#line 19737
DWORD GuardXFGCheckFunctionPointer; 
#line 19738
DWORD GuardXFGDispatchFunctionPointer; 
#line 19739
DWORD GuardXFGTableDispatchFunctionPointer; 
#line 19740
DWORD CastGuardOsDeterminedFailureMode; 
#line 19741
} IMAGE_LOAD_CONFIG_DIRECTORY32, *PIMAGE_LOAD_CONFIG_DIRECTORY32; 
#line 19792
typedef 
#line 19743
struct _IMAGE_LOAD_CONFIG_DIRECTORY64 { 
#line 19744
DWORD Size; 
#line 19745
DWORD TimeDateStamp; 
#line 19746
WORD MajorVersion; 
#line 19747
WORD MinorVersion; 
#line 19748
DWORD GlobalFlagsClear; 
#line 19749
DWORD GlobalFlagsSet; 
#line 19750
DWORD CriticalSectionDefaultTimeout; 
#line 19751
ULONGLONG DeCommitFreeBlockThreshold; 
#line 19752
ULONGLONG DeCommitTotalFreeThreshold; 
#line 19753
ULONGLONG LockPrefixTable; 
#line 19754
ULONGLONG MaximumAllocationSize; 
#line 19755
ULONGLONG VirtualMemoryThreshold; 
#line 19756
ULONGLONG ProcessAffinityMask; 
#line 19757
DWORD ProcessHeapFlags; 
#line 19758
WORD CSDVersion; 
#line 19759
WORD DependentLoadFlags; 
#line 19760
ULONGLONG EditList; 
#line 19761
ULONGLONG SecurityCookie; 
#line 19762
ULONGLONG SEHandlerTable; 
#line 19763
ULONGLONG SEHandlerCount; 
#line 19764
ULONGLONG GuardCFCheckFunctionPointer; 
#line 19765
ULONGLONG GuardCFDispatchFunctionPointer; 
#line 19766
ULONGLONG GuardCFFunctionTable; 
#line 19767
ULONGLONG GuardCFFunctionCount; 
#line 19768
DWORD GuardFlags; 
#line 19769
IMAGE_LOAD_CONFIG_CODE_INTEGRITY CodeIntegrity; 
#line 19770
ULONGLONG GuardAddressTakenIatEntryTable; 
#line 19771
ULONGLONG GuardAddressTakenIatEntryCount; 
#line 19772
ULONGLONG GuardLongJumpTargetTable; 
#line 19773
ULONGLONG GuardLongJumpTargetCount; 
#line 19774
ULONGLONG DynamicValueRelocTable; 
#line 19775
ULONGLONG CHPEMetadataPointer; 
#line 19776
ULONGLONG GuardRFFailureRoutine; 
#line 19777
ULONGLONG GuardRFFailureRoutineFunctionPointer; 
#line 19778
DWORD DynamicValueRelocTableOffset; 
#line 19779
WORD DynamicValueRelocTableSection; 
#line 19780
WORD Reserved2; 
#line 19781
ULONGLONG GuardRFVerifyStackPointerFunctionPointer; 
#line 19782
DWORD HotPatchTableOffset; 
#line 19783
DWORD Reserved3; 
#line 19784
ULONGLONG EnclaveConfigurationPointer; 
#line 19785
ULONGLONG VolatileMetadataPointer; 
#line 19786
ULONGLONG GuardEHContinuationTable; 
#line 19787
ULONGLONG GuardEHContinuationCount; 
#line 19788
ULONGLONG GuardXFGCheckFunctionPointer; 
#line 19789
ULONGLONG GuardXFGDispatchFunctionPointer; 
#line 19790
ULONGLONG GuardXFGTableDispatchFunctionPointer; 
#line 19791
ULONGLONG CastGuardOsDeterminedFailureMode; 
#line 19792
} IMAGE_LOAD_CONFIG_DIRECTORY64, *PIMAGE_LOAD_CONFIG_DIRECTORY64; 
#line 19798
typedef IMAGE_LOAD_CONFIG_DIRECTORY64 IMAGE_LOAD_CONFIG_DIRECTORY; 
#line 19799
typedef PIMAGE_LOAD_CONFIG_DIRECTORY64 PIMAGE_LOAD_CONFIG_DIRECTORY; 
#line 19815 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnt.h"
typedef 
#line 19807
struct _IMAGE_HOT_PATCH_INFO { 
#line 19808
DWORD Version; 
#line 19809
DWORD Size; 
#line 19810
DWORD SequenceNumber; 
#line 19811
DWORD BaseImageList; 
#line 19812
DWORD BaseImageCount; 
#line 19813
DWORD BufferOffset; 
#line 19814
DWORD ExtraPatchSize; 
#line 19815
} IMAGE_HOT_PATCH_INFO, *PIMAGE_HOT_PATCH_INFO; 
#line 19826
typedef 
#line 19817
struct _IMAGE_HOT_PATCH_BASE { 
#line 19818
DWORD SequenceNumber; 
#line 19819
DWORD Flags; 
#line 19820
DWORD OriginalTimeDateStamp; 
#line 19821
DWORD OriginalCheckSum; 
#line 19822
DWORD CodeIntegrityInfo; 
#line 19823
DWORD CodeIntegritySize; 
#line 19824
DWORD PatchTable; 
#line 19825
DWORD BufferOffset; 
#line 19826
} IMAGE_HOT_PATCH_BASE, *PIMAGE_HOT_PATCH_BASE; 
#line 19831
typedef 
#line 19828
struct _IMAGE_HOT_PATCH_HASHES { 
#line 19829
BYTE SHA256[32]; 
#line 19830
BYTE SHA1[20]; 
#line 19831
} IMAGE_HOT_PATCH_HASHES, *PIMAGE_HOT_PATCH_HASHES; 
#line 19898
typedef 
#line 19892
struct _IMAGE_CE_RUNTIME_FUNCTION_ENTRY { 
#line 19893
DWORD FuncStart; 
#line 19894
DWORD PrologLen:8; 
#line 19895
DWORD FuncLen:22; 
#line 19896
DWORD ThirtyTwoBit:1; 
#line 19897
DWORD ExceptionFlag:1; 
#line 19898
} IMAGE_CE_RUNTIME_FUNCTION_ENTRY, *PIMAGE_CE_RUNTIME_FUNCTION_ENTRY; 
#line 19916
typedef 
#line 19900
struct _IMAGE_ARM_RUNTIME_FUNCTION_ENTRY { 
#line 19901
DWORD BeginAddress; 
#line 19902
union { 
#line 19903
DWORD UnwindData; 
#line 19904
struct { 
#line 19905
DWORD Flag:2; 
#line 19906
DWORD FunctionLength:11; 
#line 19907
DWORD Ret:2; 
#line 19908
DWORD H:1; 
#line 19909
DWORD Reg:3; 
#line 19910
DWORD R:1; 
#line 19911
DWORD L:1; 
#line 19912
DWORD C:1; 
#line 19913
DWORD StackAdjust:10; 
#line 19914
}; 
#line 19915
}; 
#line 19916
} IMAGE_ARM_RUNTIME_FUNCTION_ENTRY, *PIMAGE_ARM_RUNTIME_FUNCTION_ENTRY; 
#line 19922
typedef 
#line 19918
enum ARM64_FNPDATA_FLAGS { 
#line 19919
PdataRefToFullXdata, 
#line 19920
PdataPackedUnwindFunction, 
#line 19921
PdataPackedUnwindFragment
#line 19922
} ARM64_FNPDATA_FLAGS; 
#line 19929
typedef 
#line 19924
enum ARM64_FNPDATA_CR { 
#line 19925
PdataCrUnchained, 
#line 19926
PdataCrUnchainedSavedLr, 
#line 19927
PdataCrChainedWithPac, 
#line 19928
PdataCrChained
#line 19929
} ARM64_FNPDATA_CR; 
#line 19945
typedef 
#line 19931
struct _IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY { 
#line 19932
DWORD BeginAddress; 
#line 19933
union { 
#line 19934
DWORD UnwindData; 
#line 19935
struct { 
#line 19936
DWORD Flag:2; 
#line 19937
DWORD FunctionLength:11; 
#line 19938
DWORD RegF:3; 
#line 19939
DWORD RegI:4; 
#line 19940
DWORD H:1; 
#line 19941
DWORD CR:2; 
#line 19942
DWORD FrameSize:9; 
#line 19943
}; 
#line 19944
}; 
#line 19945
} IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY, *PIMAGE_ARM64_RUNTIME_FUNCTION_ENTRY; 
#line 19957
typedef 
#line 19947
union IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY_XDATA { 
#line 19948
DWORD HeaderData; 
#line 19949
struct { 
#line 19950
DWORD FunctionLength:18; 
#line 19951
DWORD Version:2; 
#line 19952
DWORD ExceptionDataPresent:1; 
#line 19953
DWORD EpilogInHeader:1; 
#line 19954
DWORD EpilogCount:5; 
#line 19955
DWORD CodeWords:5; 
#line 19956
}; 
#line 19957
} IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY_XDATA; 
#line 19965
typedef 
#line 19959
struct _IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY { 
#line 19960
ULONGLONG BeginAddress; 
#line 19961
ULONGLONG EndAddress; 
#line 19962
ULONGLONG ExceptionHandler; 
#line 19963
ULONGLONG HandlerData; 
#line 19964
ULONGLONG PrologEndAddress; 
#line 19965
} IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY, *PIMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY; 
#line 19973
typedef 
#line 19967
struct _IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY { 
#line 19968
DWORD BeginAddress; 
#line 19969
DWORD EndAddress; 
#line 19970
DWORD ExceptionHandler; 
#line 19971
DWORD HandlerData; 
#line 19972
DWORD PrologEndAddress; 
#line 19973
} IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY, *PIMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY; 
#line 19982
typedef 
#line 19975
struct _IMAGE_RUNTIME_FUNCTION_ENTRY { 
#line 19976
DWORD BeginAddress; 
#line 19977
DWORD EndAddress; 
#line 19978
union { 
#line 19979
DWORD UnwindInfoAddress; 
#line 19980
DWORD UnwindData; 
#line 19981
}; 
#line 19982
} _IMAGE_RUNTIME_FUNCTION_ENTRY, *_PIMAGE_RUNTIME_FUNCTION_ENTRY; 
#line 19984
typedef _IMAGE_RUNTIME_FUNCTION_ENTRY IMAGE_IA64_RUNTIME_FUNCTION_ENTRY; 
#line 19985
typedef _PIMAGE_RUNTIME_FUNCTION_ENTRY PIMAGE_IA64_RUNTIME_FUNCTION_ENTRY; 
#line 19987
typedef _IMAGE_RUNTIME_FUNCTION_ENTRY IMAGE_AMD64_RUNTIME_FUNCTION_ENTRY; 
#line 19988
typedef _PIMAGE_RUNTIME_FUNCTION_ENTRY PIMAGE_AMD64_RUNTIME_FUNCTION_ENTRY; 
#line 20014 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnt.h"
typedef _IMAGE_RUNTIME_FUNCTION_ENTRY IMAGE_RUNTIME_FUNCTION_ENTRY; 
#line 20015
typedef _PIMAGE_RUNTIME_FUNCTION_ENTRY PIMAGE_RUNTIME_FUNCTION_ENTRY; 
#line 20040 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnt.h"
typedef 
#line 20026
struct _IMAGE_ENCLAVE_CONFIG32 { 
#line 20027
DWORD Size; 
#line 20028
DWORD MinimumRequiredConfigSize; 
#line 20029
DWORD PolicyFlags; 
#line 20030
DWORD NumberOfImports; 
#line 20031
DWORD ImportList; 
#line 20032
DWORD ImportEntrySize; 
#line 20033
BYTE FamilyID[16]; 
#line 20034
BYTE ImageID[16]; 
#line 20035
DWORD ImageVersion; 
#line 20036
DWORD SecurityVersion; 
#line 20037
DWORD EnclaveSize; 
#line 20038
DWORD NumberOfThreads; 
#line 20039
DWORD EnclaveFlags; 
#line 20040
} IMAGE_ENCLAVE_CONFIG32, *PIMAGE_ENCLAVE_CONFIG32; 
#line 20056
typedef 
#line 20042
struct _IMAGE_ENCLAVE_CONFIG64 { 
#line 20043
DWORD Size; 
#line 20044
DWORD MinimumRequiredConfigSize; 
#line 20045
DWORD PolicyFlags; 
#line 20046
DWORD NumberOfImports; 
#line 20047
DWORD ImportList; 
#line 20048
DWORD ImportEntrySize; 
#line 20049
BYTE FamilyID[16]; 
#line 20050
BYTE ImageID[16]; 
#line 20051
DWORD ImageVersion; 
#line 20052
DWORD SecurityVersion; 
#line 20053
ULONGLONG EnclaveSize; 
#line 20054
DWORD NumberOfThreads; 
#line 20055
DWORD EnclaveFlags; 
#line 20056
} IMAGE_ENCLAVE_CONFIG64, *PIMAGE_ENCLAVE_CONFIG64; 
#line 20059
typedef IMAGE_ENCLAVE_CONFIG64 IMAGE_ENCLAVE_CONFIG; 
#line 20060
typedef PIMAGE_ENCLAVE_CONFIG64 PIMAGE_ENCLAVE_CONFIG; 
#line 20080 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnt.h"
typedef 
#line 20072
struct _IMAGE_ENCLAVE_IMPORT { 
#line 20073
DWORD MatchType; 
#line 20074
DWORD MinimumSecurityVersion; 
#line 20075
BYTE UniqueOrAuthorID[32]; 
#line 20076
BYTE FamilyID[16]; 
#line 20077
BYTE ImageID[16]; 
#line 20078
DWORD ImportName; 
#line 20079
DWORD Reserved; 
#line 20080
} IMAGE_ENCLAVE_IMPORT, *PIMAGE_ENCLAVE_IMPORT; 
#line 20101
typedef 
#line 20092
struct _IMAGE_DEBUG_DIRECTORY { 
#line 20093
DWORD Characteristics; 
#line 20094
DWORD TimeDateStamp; 
#line 20095
WORD MajorVersion; 
#line 20096
WORD MinorVersion; 
#line 20097
DWORD Type; 
#line 20098
DWORD SizeOfData; 
#line 20099
DWORD AddressOfRawData; 
#line 20100
DWORD PointerToRawData; 
#line 20101
} IMAGE_DEBUG_DIRECTORY, *PIMAGE_DEBUG_DIRECTORY; 
#line 20139
typedef 
#line 20130
struct _IMAGE_COFF_SYMBOLS_HEADER { 
#line 20131
DWORD NumberOfSymbols; 
#line 20132
DWORD LvaToFirstSymbol; 
#line 20133
DWORD NumberOfLinenumbers; 
#line 20134
DWORD LvaToFirstLinenumber; 
#line 20135
DWORD RvaToFirstByteOfCode; 
#line 20136
DWORD RvaToLastByteOfCode; 
#line 20137
DWORD RvaToFirstByteOfData; 
#line 20138
DWORD RvaToLastByteOfData; 
#line 20139
} IMAGE_COFF_SYMBOLS_HEADER, *PIMAGE_COFF_SYMBOLS_HEADER; 
#line 20157
typedef 
#line 20146
struct _FPO_DATA { 
#line 20147
DWORD ulOffStart; 
#line 20148
DWORD cbProcSize; 
#line 20149
DWORD cdwLocals; 
#line 20150
WORD cdwParams; 
#line 20151
WORD cbProlog:8; 
#line 20152
WORD cbRegs:3; 
#line 20153
WORD fHasSEH:1; 
#line 20154
WORD fUseBP:1; 
#line 20155
WORD reserved:1; 
#line 20156
WORD cbFrame:2; 
#line 20157
} FPO_DATA, *PFPO_DATA; 
#line 20170
typedef 
#line 20163
struct _IMAGE_DEBUG_MISC { 
#line 20164
DWORD DataType; 
#line 20165
DWORD Length; 
#line 20167
BOOLEAN Unicode; 
#line 20168
BYTE Reserved[3]; 
#line 20169
BYTE Data[1]; 
#line 20170
} IMAGE_DEBUG_MISC, *PIMAGE_DEBUG_MISC; 
#line 20183
typedef 
#line 20179
struct _IMAGE_FUNCTION_ENTRY { 
#line 20180
DWORD StartingAddress; 
#line 20181
DWORD EndingAddress; 
#line 20182
DWORD EndOfPrologue; 
#line 20183
} IMAGE_FUNCTION_ENTRY, *PIMAGE_FUNCTION_ENTRY; 
#line 20192
typedef 
#line 20185
struct _IMAGE_FUNCTION_ENTRY64 { 
#line 20186
ULONGLONG StartingAddress; 
#line 20187
ULONGLONG EndingAddress; 
#line 20188
union { 
#line 20189
ULONGLONG EndOfPrologue; 
#line 20190
ULONGLONG UnwindInfoAddress; 
#line 20191
}; 
#line 20192
} IMAGE_FUNCTION_ENTRY64, *PIMAGE_FUNCTION_ENTRY64; 
#line 20228
typedef 
#line 20214
struct _IMAGE_SEPARATE_DEBUG_HEADER { 
#line 20215
WORD Signature; 
#line 20216
WORD Flags; 
#line 20217
WORD Machine; 
#line 20218
WORD Characteristics; 
#line 20219
DWORD TimeDateStamp; 
#line 20220
DWORD CheckSum; 
#line 20221
DWORD ImageBase; 
#line 20222
DWORD SizeOfImage; 
#line 20223
DWORD NumberOfSections; 
#line 20224
DWORD ExportedNamesSize; 
#line 20225
DWORD DebugDirectorySize; 
#line 20226
DWORD SectionAlignment; 
#line 20227
DWORD Reserved[2]; 
#line 20228
} IMAGE_SEPARATE_DEBUG_HEADER, *PIMAGE_SEPARATE_DEBUG_HEADER; 
#line 20244
typedef 
#line 20232
struct _NON_PAGED_DEBUG_INFO { 
#line 20233
WORD Signature; 
#line 20234
WORD Flags; 
#line 20235
DWORD Size; 
#line 20236
WORD Machine; 
#line 20237
WORD Characteristics; 
#line 20238
DWORD TimeDateStamp; 
#line 20239
DWORD CheckSum; 
#line 20240
DWORD SizeOfImage; 
#line 20241
ULONGLONG ImageBase; 
#line 20244
} NON_PAGED_DEBUG_INFO, *PNON_PAGED_DEBUG_INFO; 
#line 20275 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnt.h"
typedef 
#line 20268
struct _ImageArchitectureHeader { 
#line 20269
unsigned AmaskValue:1; 
#line 20271
int:7; 
#line 20272
unsigned AmaskShift:8; 
#line 20273
int:16; 
#line 20274
DWORD FirstEntryRVA; 
#line 20275
} IMAGE_ARCHITECTURE_HEADER, *PIMAGE_ARCHITECTURE_HEADER; 
#line 20280
typedef 
#line 20277
struct _ImageArchitectureEntry { 
#line 20278
DWORD FixupInstRVA; 
#line 20279
DWORD NewInst; 
#line 20280
} IMAGE_ARCHITECTURE_ENTRY, *PIMAGE_ARCHITECTURE_ENTRY; 
#line 27 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\shared\\poppack.h"
#pragma warning(disable:4103)
#line 29
#pragma pack ( pop )
#line 20307 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnt.h"
typedef 
#line 20291
struct IMPORT_OBJECT_HEADER { 
#line 20292
WORD Sig1; 
#line 20293
WORD Sig2; 
#line 20294
WORD Version; 
#line 20295
WORD Machine; 
#line 20296
DWORD TimeDateStamp; 
#line 20297
DWORD SizeOfData; 
#line 20299
union { 
#line 20300
WORD Ordinal; 
#line 20301
WORD Hint; 
#line 20302
}; 
#line 20304
WORD Type:2; 
#line 20305
WORD NameType:3; 
#line 20306
WORD Reserved:11; 
#line 20307
} IMPORT_OBJECT_HEADER; 
#line 20314
typedef 
#line 20309
enum IMPORT_OBJECT_TYPE { 
#line 20311
IMPORT_OBJECT_CODE, 
#line 20312
IMPORT_OBJECT_DATA, 
#line 20313
IMPORT_OBJECT_CONST
#line 20314
} IMPORT_OBJECT_TYPE; 
#line 20324
typedef 
#line 20316
enum IMPORT_OBJECT_NAME_TYPE { 
#line 20318
IMPORT_OBJECT_ORDINAL, 
#line 20319
IMPORT_OBJECT_NAME, 
#line 20320
IMPORT_OBJECT_NAME_NO_PREFIX, 
#line 20321
IMPORT_OBJECT_NAME_UNDECORATE, 
#line 20323
IMPORT_OBJECT_NAME_EXPORTAS
#line 20324
} IMPORT_OBJECT_NAME_TYPE; 
#line 20371
typedef 
#line 20330
enum ReplacesCorHdrNumericDefines { 
#line 20333
COMIMAGE_FLAGS_ILONLY = 1, 
#line 20334
COMIMAGE_FLAGS_32BITREQUIRED, 
#line 20335
COMIMAGE_FLAGS_IL_LIBRARY = 4, 
#line 20336
COMIMAGE_FLAGS_STRONGNAMESIGNED = 8, 
#line 20337
COMIMAGE_FLAGS_NATIVE_ENTRYPOINT = 16, 
#line 20338
COMIMAGE_FLAGS_TRACKDEBUGDATA = 65536, 
#line 20339
COMIMAGE_FLAGS_32BITPREFERRED = 131072, 
#line 20342
COR_VERSION_MAJOR_V2 = 2, 
#line 20343
COR_VERSION_MAJOR = COR_VERSION_MAJOR_V2, 
#line 20344
COR_VERSION_MINOR = 5, 
#line 20345
COR_DELETED_NAME_LENGTH = 8, 
#line 20346
COR_VTABLEGAP_NAME_LENGTH = 8, 
#line 20349
NATIVE_TYPE_MAX_CB = 1, 
#line 20350
COR_ILMETHOD_SECT_SMALL_MAX_DATASIZE = 255, 
#line 20353
IMAGE_COR_MIH_METHODRVA = 1, 
#line 20354
IMAGE_COR_MIH_EHRVA, 
#line 20355
IMAGE_COR_MIH_BASICBLOCK = 8, 
#line 20358
COR_VTABLE_32BIT = 1, 
#line 20359
COR_VTABLE_64BIT, 
#line 20360
COR_VTABLE_FROM_UNMANAGED = 4, 
#line 20361
COR_VTABLE_FROM_UNMANAGED_RETAIN_APPDOMAIN = 8, 
#line 20362
COR_VTABLE_CALL_MOST_DERIVED = 16, 
#line 20365
IMAGE_COR_EATJ_THUNK_SIZE = 32, 
#line 20369
MAX_CLASS_NAME = 1024, 
#line 20370
MAX_PACKAGE_NAME = 1024
#line 20371
} ReplacesCorHdrNumericDefines; 
#line 20404
typedef 
#line 20374
struct IMAGE_COR20_HEADER { 
#line 20377
DWORD cb; 
#line 20378
WORD MajorRuntimeVersion; 
#line 20379
WORD MinorRuntimeVersion; 
#line 20382
IMAGE_DATA_DIRECTORY MetaData; 
#line 20383
DWORD Flags; 
#line 20387
union { 
#line 20388
DWORD EntryPointToken; 
#line 20389
DWORD EntryPointRVA; 
#line 20390
}; 
#line 20393
IMAGE_DATA_DIRECTORY Resources; 
#line 20394
IMAGE_DATA_DIRECTORY StrongNameSignature; 
#line 20397
IMAGE_DATA_DIRECTORY CodeManagerTable; 
#line 20398
IMAGE_DATA_DIRECTORY VTableFixups; 
#line 20399
IMAGE_DATA_DIRECTORY ExportAddressTableJumps; 
#line 20402
IMAGE_DATA_DIRECTORY ManagedNativeHeader; 
#line 20404
} IMAGE_COR20_HEADER, *PIMAGE_COR20_HEADER; 
#line 20422 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnt.h"
#pragma region Application or OneCore or Games Family
#line 20427
__declspec(dllimport) WORD __stdcall 
#line 20431
RtlCaptureStackBackTrace(DWORD FramesToSkip, DWORD FramesToCapture, PVOID * BackTrace, PDWORD BackTraceHash); 
#line 20442 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnt.h"
__declspec(dllimport) void __stdcall 
#line 20445
RtlCaptureContext(PCONTEXT ContextRecord); 
#line 20452 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnt.h"
#pragma endregion
#line 20454
#pragma region Desktop Family or OneCore Family or Games Family
#line 20461
__declspec(dllimport) void __stdcall 
#line 20464
RtlCaptureContext2(PCONTEXT ContextRecord); 
#line 20473 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnt.h"
#pragma endregion
#line 20488
typedef 
#line 20485
struct _UNWIND_HISTORY_TABLE_ENTRY { 
#line 20486
ULONG_PTR ImageBase; 
#line 20487
PRUNTIME_FUNCTION FunctionEntry; 
#line 20488
} UNWIND_HISTORY_TABLE_ENTRY, *PUNWIND_HISTORY_TABLE_ENTRY; 
#line 20499
typedef 
#line 20490
struct _UNWIND_HISTORY_TABLE { 
#line 20491
DWORD Count; 
#line 20492
BYTE LocalHint; 
#line 20493
BYTE GlobalHint; 
#line 20494
BYTE Search; 
#line 20495
BYTE Once; 
#line 20496
ULONG_PTR LowAddress; 
#line 20497
ULONG_PTR HighAddress; 
#line 20498
UNWIND_HISTORY_TABLE_ENTRY Entry[12]; 
#line 20499
} UNWIND_HISTORY_TABLE, *PUNWIND_HISTORY_TABLE; 
#line 20503 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnt.h"
#pragma region Application or OneCore Family or Games Family
#line 20506
__declspec(dllimport) void __stdcall 
#line 20509
RtlUnwind(PVOID TargetFrame, PVOID TargetIp, PEXCEPTION_RECORD ExceptionRecord, PVOID ReturnValue); 
#line 20517 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnt.h"
#pragma endregion
#line 20521
#pragma region Application Family or OneCore Family
#line 20524
__declspec(dllimport) BOOLEAN __cdecl 
#line 20527
RtlAddFunctionTable(PRUNTIME_FUNCTION FunctionTable, DWORD EntryCount, DWORD64 BaseAddress); 
#line 20533
__declspec(dllimport) BOOLEAN __cdecl 
#line 20536
RtlDeleteFunctionTable(PRUNTIME_FUNCTION FunctionTable); 
#line 20540
__declspec(dllimport) BOOLEAN __cdecl 
#line 20543
RtlInstallFunctionTableCallback(DWORD64 TableIdentifier, DWORD64 BaseAddress, DWORD Length, PGET_RUNTIME_FUNCTION_CALLBACK Callback, PVOID Context, PCWSTR OutOfProcessCallbackDll); 
#line 20553 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnt.h"
#pragma endregion
#line 20555
#pragma region Desktop Family or OneCore Family
#line 20560
__declspec(dllimport) DWORD __stdcall 
#line 20563
RtlAddGrowableFunctionTable(PVOID * DynamicTable, PRUNTIME_FUNCTION FunctionTable, DWORD EntryCount, DWORD MaximumEntryCount, ULONG_PTR RangeBase, ULONG_PTR RangeEnd); 
#line 20572
__declspec(dllimport) void __stdcall 
#line 20575
RtlGrowFunctionTable(PVOID DynamicTable, DWORD NewEntryCount); 
#line 20580
__declspec(dllimport) void __stdcall 
#line 20583
RtlDeleteGrowableFunctionTable(PVOID DynamicTable); 
#line 20590 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnt.h"
#pragma endregion
#line 20592
#pragma region Application or OneCore Family or Games Family
#line 20595
__declspec(dllimport) PRUNTIME_FUNCTION __stdcall 
#line 20598
RtlLookupFunctionEntry(DWORD64 ControlPc, PDWORD64 ImageBase, PUNWIND_HISTORY_TABLE HistoryTable); 
#line 20604
__declspec(dllimport) void __cdecl 
#line 20607
RtlRestoreContext(PCONTEXT ContextRecord, _EXCEPTION_RECORD * ExceptionRecord); 
#line 20612
__declspec(dllimport) void __stdcall 
#line 20615
RtlUnwindEx(PVOID TargetFrame, PVOID TargetIp, PEXCEPTION_RECORD ExceptionRecord, PVOID ReturnValue, PCONTEXT ContextRecord, PUNWIND_HISTORY_TABLE HistoryTable); 
#line 20624
__declspec(dllimport) PEXCEPTION_ROUTINE __stdcall 
#line 20627
RtlVirtualUnwind(DWORD HandlerType, DWORD64 ImageBase, DWORD64 ControlPc, PRUNTIME_FUNCTION FunctionEntry, PCONTEXT ContextRecord, PVOID * HandlerData, PDWORD64 EstablisherFrame, PKNONVOLATILE_CONTEXT_POINTERS ContextPointers); 
#line 20651 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnt.h"
#pragma endregion
#line 20962 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnt.h"
#pragma region Application Family or OneCore Family or Games Family
#line 20965
__declspec(dllimport) void __stdcall 
#line 20968
RtlRaiseException(PEXCEPTION_RECORD ExceptionRecord); 
#line 20972
__declspec(dllimport) PVOID __stdcall 
#line 20975
RtlPcToFileHeader(PVOID PcValue, PVOID * BaseOfImage); 
#line 20981 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnt.h"
#pragma endregion
#line 20984
#pragma region Application Family or OneCore Family
#line 20990
__declspec(dllimport) SIZE_T __stdcall 
#line 20993
RtlCompareMemory(const void * Source1, const void * Source2, SIZE_T Length); 
#line 21002 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnt.h"
#pragma endregion
#line 21031 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnt.h"
#pragma warning(push)
#pragma warning(disable:4324)
#line 21036
typedef 
#line 21034
struct __declspec(align(16)) _SLIST_ENTRY { 
#line 21035
_SLIST_ENTRY *Next; 
#line 21036
} SLIST_ENTRY, *PSLIST_ENTRY; 
#line 21038
#pragma warning(pop)
#line 21059 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnt.h"
typedef 
#line 21048
union __declspec(align(16)) _SLIST_HEADER { 
#line 21049
struct { 
#line 21050
ULONGLONG Alignment; 
#line 21051
ULONGLONG Region; 
#line 21052
}; 
#line 21053
struct { 
#line 21054
ULONGLONG Depth:16; 
#line 21055
ULONGLONG Sequence:48; 
#line 21056
ULONGLONG Reserved:4; 
#line 21057
ULONGLONG NextEntry:60; 
#line 21058
} HeaderX64; 
#line 21059
} SLIST_HEADER, *PSLIST_HEADER; 
#line 21104 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnt.h"
#pragma region Desktop Family or OneCore Family
#line 21107
__declspec(dllimport) void __stdcall 
#line 21110
RtlInitializeSListHead(PSLIST_HEADER ListHead); 
#line 21115
__declspec(dllimport) PSLIST_ENTRY __stdcall 
#line 21118
RtlFirstEntrySList(const SLIST_HEADER * ListHead); 
#line 21122
__declspec(dllimport) PSLIST_ENTRY __stdcall 
#line 21125
RtlInterlockedPopEntrySList(PSLIST_HEADER ListHead); 
#line 21129
__declspec(dllimport) PSLIST_ENTRY __stdcall 
#line 21132
RtlInterlockedPushEntrySList(PSLIST_HEADER ListHead, PSLIST_ENTRY ListEntry); 
#line 21137
__declspec(dllimport) PSLIST_ENTRY __stdcall 
#line 21140
RtlInterlockedPushListSListEx(PSLIST_HEADER ListHead, PSLIST_ENTRY List, PSLIST_ENTRY ListEnd, DWORD Count); 
#line 21147
__declspec(dllimport) PSLIST_ENTRY __stdcall 
#line 21150
RtlInterlockedFlushSList(PSLIST_HEADER ListHead); 
#line 21154
__declspec(dllimport) WORD __stdcall 
#line 21157
RtlQueryDepthSList(PSLIST_HEADER ListHead); 
#line 21163
__declspec(dllimport) ULONG_PTR __stdcall 
#line 21166
RtlGetReturnAddressHijackTarget(); 
#line 21173 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnt.h"
#pragma endregion
#line 21202
typedef 
#line 21200
union _RTL_RUN_ONCE { 
#line 21201
PVOID Ptr; 
#line 21202
} RTL_RUN_ONCE, *PRTL_RUN_ONCE; 
#line 21212 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnt.h"
typedef 
#line 21206
struct _RTL_BARRIER { 
#line 21207
DWORD Reserved1; 
#line 21208
DWORD Reserved2; 
#line 21209
ULONG_PTR Reserved3[2]; 
#line 21210
DWORD Reserved4; 
#line 21211
DWORD Reserved5; 
#line 21212
} RTL_BARRIER, *PRTL_BARRIER; 
#line 21301
__declspec(noreturn) void 
#line 21303
__fastfail(unsigned Code); 
#line 21307
#pragma intrinsic(__fastfail)
#line 21327 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnt.h"
#pragma region Desktop Family
#line 21332
__forceinline DWORD HEAP_MAKE_TAG_FLAGS(DWORD 
#line 21333
TagBase, DWORD 
#line 21334
Tag) 
#line 21337
{ 
#line 21338
return ((DWORD)(TagBase + (Tag << 18))); 
#line 21339
} 
#line 21342 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnt.h"
#pragma endregion
#line 21413 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnt.h"
__forceinline PVOID RtlSecureZeroMemory(PVOID 
#line 21414
ptr, SIZE_T 
#line 21415
cnt) 
#line 21417
{ 
#line 21418
volatile char *vptr = (volatile char *)ptr; 
#line 21422
__stosb((PBYTE)((DWORD64)vptr), 0, cnt); 
#line 21444 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnt.h"
return ptr; 
#line 21445
} 
#line 21476 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnt.h"
typedef 
#line 21472
struct _MESSAGE_RESOURCE_ENTRY { 
#line 21473
WORD Length; 
#line 21474
WORD Flags; 
#line 21475
BYTE Text[1]; 
#line 21476
} MESSAGE_RESOURCE_ENTRY, *PMESSAGE_RESOURCE_ENTRY; 
#line 21485
typedef 
#line 21481
struct _MESSAGE_RESOURCE_BLOCK { 
#line 21482
DWORD LowId; 
#line 21483
DWORD HighId; 
#line 21484
DWORD OffsetToEntries; 
#line 21485
} MESSAGE_RESOURCE_BLOCK, *PMESSAGE_RESOURCE_BLOCK; 
#line 21490
typedef 
#line 21487
struct _MESSAGE_RESOURCE_DATA { 
#line 21488
DWORD NumberOfBlocks; 
#line 21489
MESSAGE_RESOURCE_BLOCK Blocks[1]; 
#line 21490
} MESSAGE_RESOURCE_DATA, *PMESSAGE_RESOURCE_DATA; 
#line 21500
typedef 
#line 21493
struct _OSVERSIONINFOA { 
#line 21494
DWORD dwOSVersionInfoSize; 
#line 21495
DWORD dwMajorVersion; 
#line 21496
DWORD dwMinorVersion; 
#line 21497
DWORD dwBuildNumber; 
#line 21498
DWORD dwPlatformId; 
#line 21499
CHAR szCSDVersion[128]; 
#line 21500
} OSVERSIONINFOA, *POSVERSIONINFOA, *LPOSVERSIONINFOA; 
#line 21509
typedef 
#line 21502
struct _OSVERSIONINFOW { 
#line 21503
DWORD dwOSVersionInfoSize; 
#line 21504
DWORD dwMajorVersion; 
#line 21505
DWORD dwMinorVersion; 
#line 21506
DWORD dwBuildNumber; 
#line 21507
DWORD dwPlatformId; 
#line 21508
WCHAR szCSDVersion[128]; 
#line 21509
} OSVERSIONINFOW, *POSVERSIONINFOW, *LPOSVERSIONINFOW, RTL_OSVERSIONINFOW, *PRTL_OSVERSIONINFOW; 
#line 21515
typedef OSVERSIONINFOA OSVERSIONINFO; 
#line 21516
typedef POSVERSIONINFOA POSVERSIONINFO; 
#line 21517
typedef LPOSVERSIONINFOA LPOSVERSIONINFO; 
#line 21532 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnt.h"
typedef 
#line 21520
struct _OSVERSIONINFOEXA { 
#line 21521
DWORD dwOSVersionInfoSize; 
#line 21522
DWORD dwMajorVersion; 
#line 21523
DWORD dwMinorVersion; 
#line 21524
DWORD dwBuildNumber; 
#line 21525
DWORD dwPlatformId; 
#line 21526
CHAR szCSDVersion[128]; 
#line 21527
WORD wServicePackMajor; 
#line 21528
WORD wServicePackMinor; 
#line 21529
WORD wSuiteMask; 
#line 21530
BYTE wProductType; 
#line 21531
BYTE wReserved; 
#line 21532
} OSVERSIONINFOEXA, *POSVERSIONINFOEXA, *LPOSVERSIONINFOEXA; 
#line 21545
typedef 
#line 21533
struct _OSVERSIONINFOEXW { 
#line 21534
DWORD dwOSVersionInfoSize; 
#line 21535
DWORD dwMajorVersion; 
#line 21536
DWORD dwMinorVersion; 
#line 21537
DWORD dwBuildNumber; 
#line 21538
DWORD dwPlatformId; 
#line 21539
WCHAR szCSDVersion[128]; 
#line 21540
WORD wServicePackMajor; 
#line 21541
WORD wServicePackMinor; 
#line 21542
WORD wSuiteMask; 
#line 21543
BYTE wProductType; 
#line 21544
BYTE wReserved; 
#line 21545
} OSVERSIONINFOEXW, *POSVERSIONINFOEXW, *LPOSVERSIONINFOEXW, RTL_OSVERSIONINFOEXW, *PRTL_OSVERSIONINFOEXW; 
#line 21551
typedef OSVERSIONINFOEXA OSVERSIONINFOEX; 
#line 21552
typedef POSVERSIONINFOEXA POSVERSIONINFOEX; 
#line 21553
typedef LPOSVERSIONINFOEXA LPOSVERSIONINFOEX; 
#line 21602 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnt.h"
#pragma region Desktop Family or OneCore Family
#line 21621
__declspec(dllimport) ULONGLONG __stdcall 
#line 21624
VerSetConditionMask(ULONGLONG ConditionMask, DWORD TypeMask, BYTE Condition); 
#line 21635 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnt.h"
#pragma endregion
#line 21639
#pragma region Desktop Family or OneCore Family
#line 21646
__declspec(dllimport) BOOLEAN __stdcall 
#line 21649
RtlGetProductInfo(DWORD OSMajorVersion, DWORD OSMinorVersion, DWORD SpMajorVersion, DWORD SpMinorVersion, PDWORD ReturnedProductType); 
#line 21662 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnt.h"
#pragma endregion
#line 21675
typedef 
#line 21666
enum _RTL_UMS_THREAD_INFO_CLASS { 
#line 21667
UmsThreadInvalidInfoClass, 
#line 21668
UmsThreadUserContext, 
#line 21669
UmsThreadPriority, 
#line 21670
UmsThreadAffinity, 
#line 21671
UmsThreadTeb, 
#line 21672
UmsThreadIsSuspended, 
#line 21673
UmsThreadIsTerminated, 
#line 21674
UmsThreadMaxInfoClass
#line 21675
} RTL_UMS_THREAD_INFO_CLASS, *PRTL_UMS_THREAD_INFO_CLASS; 
#line 21681
typedef 
#line 21677
enum _RTL_UMS_SCHEDULER_REASON { 
#line 21678
UmsSchedulerStartup, 
#line 21679
UmsSchedulerThreadBlocked, 
#line 21680
UmsSchedulerThreadYield
#line 21681
} RTL_UMS_SCHEDULER_REASON, *PRTL_UMS_SCHEDULER_REASON; 
#line 21687
typedef void __stdcall RTL_UMS_SCHEDULER_ENTRY_POINT(RTL_UMS_SCHEDULER_REASON Reason, ULONG_PTR ActivationPayload, PVOID SchedulerParam); 
#line 21693
typedef RTL_UMS_SCHEDULER_ENTRY_POINT *PRTL_UMS_SCHEDULER_ENTRY_POINT; 
#line 21747 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnt.h"
#pragma region Desktop Family or OneCore Family
#line 21756
__declspec(dllimport) DWORD __stdcall 
#line 21759
RtlCrc32(const void * Buffer, size_t Size, DWORD InitialCrc); 
#line 21765
__declspec(dllimport) ULONGLONG __stdcall 
#line 21768
RtlCrc64(const void * Buffer, size_t Size, ULONGLONG InitialCrc); 
#line 21777 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnt.h"
#pragma endregion
#line 21797 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnt.h"
typedef 
#line 21794
enum _OS_DEPLOYEMENT_STATE_VALUES { 
#line 21795
OS_DEPLOYMENT_STANDARD = 1, 
#line 21796
OS_DEPLOYMENT_COMPACT
#line 21797
} OS_DEPLOYEMENT_STATE_VALUES; 
#line 21799
__declspec(dllimport) OS_DEPLOYEMENT_STATE_VALUES __stdcall 
#line 21802
RtlOsDeploymentState(DWORD Flags); 
#line 21819 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnt.h"
typedef 
#line 21816
struct _NV_MEMORY_RANGE { 
#line 21817
void *BaseAddress; 
#line 21818
SIZE_T Length; 
#line 21819
} NV_MEMORY_RANGE, *PNV_MEMORY_RANGE; 
#line 21921
__declspec(dllimport) DWORD __stdcall 
#line 21924
RtlGetNonVolatileToken(PVOID NvBuffer, SIZE_T Size, PVOID * NvToken); 
#line 21931
__declspec(dllimport) DWORD __stdcall 
#line 21934
RtlFreeNonVolatileToken(PVOID NvToken); 
#line 21939
__declspec(dllimport) DWORD __stdcall 
#line 21942
RtlFlushNonVolatileMemory(PVOID NvToken, PVOID NvBuffer, SIZE_T Size, DWORD Flags); 
#line 21950
__declspec(dllimport) DWORD __stdcall 
#line 21953
RtlDrainNonVolatileFlush(PVOID NvToken); 
#line 21958
__declspec(dllimport) DWORD __stdcall 
#line 21961
RtlWriteNonVolatileMemory(PVOID NvToken, __unaligned void * NvDestination, const __unaligned void * Source, SIZE_T Size, DWORD Flags); 
#line 21972
__declspec(dllimport) DWORD __stdcall 
#line 21975
RtlFillNonVolatileMemory(PVOID NvToken, __unaligned void * NvDestination, SIZE_T Size, const BYTE Value, DWORD Flags); 
#line 21986 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnt.h"
__declspec(dllimport) DWORD __stdcall 
#line 21989
RtlFlushNonVolatileMemoryRanges(PVOID NvToken, PNV_MEMORY_RANGE NvRanges, SIZE_T NumRanges, DWORD Flags); 
#line 22049 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnt.h"
typedef 
#line 22046
struct CORRELATION_VECTOR { 
#line 22047
CHAR Version; 
#line 22048
CHAR Vector[129]; 
#line 22049
} CORRELATION_VECTOR; 
#line 22051
typedef CORRELATION_VECTOR *PCORRELATION_VECTOR; 
#line 22055
__declspec(dllimport) DWORD __stdcall 
#line 22058
RtlInitializeCorrelationVector(PCORRELATION_VECTOR CorrelationVector, int Version, const GUID * Guid); 
#line 22065
__declspec(dllimport) DWORD __stdcall 
#line 22068
RtlIncrementCorrelationVector(PCORRELATION_VECTOR CorrelationVector); 
#line 22072
__declspec(dllimport) DWORD __stdcall 
#line 22075
RtlExtendCorrelationVector(PCORRELATION_VECTOR CorrelationVector); 
#line 22079
__declspec(dllimport) DWORD __stdcall 
#line 22082
RtlValidateCorrelationVector(PCORRELATION_VECTOR Vector); 
#line 22102 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnt.h"
typedef 
#line 22091
struct _CUSTOM_SYSTEM_EVENT_TRIGGER_CONFIG { 
#line 22095
DWORD Size; 
#line 22100
PCWSTR TriggerId; 
#line 22102
} CUSTOM_SYSTEM_EVENT_TRIGGER_CONFIG, *PCUSTOM_SYSTEM_EVENT_TRIGGER_CONFIG; 
#line 22107
__forceinline void CUSTOM_SYSTEM_EVENT_TRIGGER_INIT(PCUSTOM_SYSTEM_EVENT_TRIGGER_CONFIG 
#line 22108
Config, PCWSTR 
#line 22109
TriggerId) 
#line 22111
{ 
#line 22112
memset(Config, 0, sizeof(CUSTOM_SYSTEM_EVENT_TRIGGER_CONFIG)); 
#line 22114
(Config->Size) = (sizeof(CUSTOM_SYSTEM_EVENT_TRIGGER_CONFIG)); 
#line 22115
(Config->TriggerId) = TriggerId; 
#line 22116
} 
#line 22123 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnt.h"
DWORD __stdcall RtlRaiseCustomSystemEventTrigger(PCUSTOM_SYSTEM_EVENT_TRIGGER_CONFIG TriggerConfig); 
#line 22153 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnt.h"
typedef 
#line 22138
enum _IMAGE_POLICY_ENTRY_TYPE { 
#line 22139
ImagePolicyEntryTypeNone, 
#line 22140
ImagePolicyEntryTypeBool, 
#line 22141
ImagePolicyEntryTypeInt8, 
#line 22142
ImagePolicyEntryTypeUInt8, 
#line 22143
ImagePolicyEntryTypeInt16, 
#line 22144
ImagePolicyEntryTypeUInt16, 
#line 22145
ImagePolicyEntryTypeInt32, 
#line 22146
ImagePolicyEntryTypeUInt32, 
#line 22147
ImagePolicyEntryTypeInt64, 
#line 22148
ImagePolicyEntryTypeUInt64, 
#line 22149
ImagePolicyEntryTypeAnsiString, 
#line 22150
ImagePolicyEntryTypeUnicodeString, 
#line 22151
ImagePolicyEntryTypeOverride, 
#line 22152
ImagePolicyEntryTypeMaximum
#line 22153
} IMAGE_POLICY_ENTRY_TYPE; 
#line 22169
typedef 
#line 22155
enum _IMAGE_POLICY_ID { 
#line 22156
ImagePolicyIdNone, 
#line 22157
ImagePolicyIdEtw, 
#line 22158
ImagePolicyIdDebug, 
#line 22159
ImagePolicyIdCrashDump, 
#line 22160
ImagePolicyIdCrashDumpKey, 
#line 22161
ImagePolicyIdCrashDumpKeyGuid, 
#line 22162
ImagePolicyIdParentSd, 
#line 22163
ImagePolicyIdParentSdRev, 
#line 22164
ImagePolicyIdSvn, 
#line 22165
ImagePolicyIdDeviceId, 
#line 22166
ImagePolicyIdCapability, 
#line 22167
ImagePolicyIdScenarioId, 
#line 22168
ImagePolicyIdMaximum
#line 22169
} IMAGE_POLICY_ID; 
#line 22188
typedef 
#line 22171
struct _IMAGE_POLICY_ENTRY { 
#line 22172
IMAGE_POLICY_ENTRY_TYPE Type; 
#line 22173
IMAGE_POLICY_ID PolicyId; 
#line 22174
union { 
#line 22175
const void *None; 
#line 22176
BOOLEAN BoolValue; 
#line 22177
INT8 Int8Value; 
#line 22178
UINT8 UInt8Value; 
#line 22179
INT16 Int16Value; 
#line 22180
UINT16 UInt16Value; 
#line 22181
INT32 Int32Value; 
#line 22182
UINT32 UInt32Value; 
#line 22183
INT64 Int64Value; 
#line 22184
UINT64 UInt64Value; 
#line 22185
PCSTR AnsiStringValue; 
#line 22186
PCWSTR UnicodeStringValue; 
#line 22187
} u; 
#line 22188
} IMAGE_POLICY_ENTRY; 
#line 22189
typedef const IMAGE_POLICY_ENTRY *PCIMAGE_POLICY_ENTRY; 
#line 22191
#pragma warning(push)
#pragma warning(disable:4200)
#line 22198
typedef 
#line 22193
struct _IMAGE_POLICY_METADATA { 
#line 22194
BYTE Version; 
#line 22195
BYTE Reserved0[7]; 
#line 22196
ULONGLONG ApplicationId; 
#line 22197
IMAGE_POLICY_ENTRY Policies[]; 
#line 22198
} IMAGE_POLICY_METADATA; 
#line 22199
typedef const IMAGE_POLICY_METADATA *PCIMAGE_POLICY_METADATA; 
#pragma warning(pop)
#line 22255
__declspec(dllimport) BOOLEAN __stdcall 
#line 22258
RtlIsZeroMemory(PVOID Buffer, SIZE_T Length); 
#line 22264
__declspec(dllimport) BOOLEAN __stdcall 
#line 22267
RtlNormalizeSecurityDescriptor(PSECURITY_DESCRIPTOR * SecurityDescriptor, DWORD SecurityDescriptorLength, PSECURITY_DESCRIPTOR * NewSecurityDescriptor, PDWORD NewSecurityDescriptorLength, BOOLEAN CheckOnly); 
#line 22304 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnt.h"
typedef 
#line 22289
enum _RTL_SYSTEM_GLOBAL_DATA_ID { 
#line 22290
GlobalDataIdUnknown, 
#line 22291
GlobalDataIdRngSeedVersion, 
#line 22292
GlobalDataIdInterruptTime, 
#line 22293
GlobalDataIdTimeZoneBias, 
#line 22294
GlobalDataIdImageNumberLow, 
#line 22295
GlobalDataIdImageNumberHigh, 
#line 22296
GlobalDataIdTimeZoneId, 
#line 22297
GlobalDataIdNtMajorVersion, 
#line 22298
GlobalDataIdNtMinorVersion, 
#line 22299
GlobalDataIdSystemExpirationDate, 
#line 22300
GlobalDataIdKdDebuggerEnabled, 
#line 22301
GlobalDataIdCyclesPerYield, 
#line 22302
GlobalDataIdSafeBootMode, 
#line 22303
GlobalDataIdLastSystemRITEventTickCount
#line 22304
} RTL_SYSTEM_GLOBAL_DATA_ID, *PRTL_SYSTEM_GLOBAL_DATA_ID; 
#line 22306
__declspec(dllimport) DWORD __stdcall 
#line 22309
RtlGetSystemGlobalData(RTL_SYSTEM_GLOBAL_DATA_ID DataId, PVOID Buffer, DWORD Size); 
#line 22315
__declspec(dllimport) DWORD __stdcall 
#line 22318
RtlSetSystemGlobalData(RTL_SYSTEM_GLOBAL_DATA_ID DataId, PVOID Buffer, DWORD Size); 
#line 22337 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnt.h"
typedef 
#line 22327
struct _RTL_CRITICAL_SECTION_DEBUG { 
#line 22328
WORD Type; 
#line 22329
WORD CreatorBackTraceIndex; 
#line 22330
struct _RTL_CRITICAL_SECTION *CriticalSection; 
#line 22331
LIST_ENTRY ProcessLocksList; 
#line 22332
DWORD EntryCount; 
#line 22333
DWORD ContentionCount; 
#line 22334
DWORD Flags; 
#line 22335
WORD CreatorBackTraceIndexHigh; 
#line 22336
WORD SpareWORD; 
#line 22337
} RTL_CRITICAL_SECTION_DEBUG, *PRTL_CRITICAL_SECTION_DEBUG, RTL_RESOURCE_DEBUG, *PRTL_RESOURCE_DEBUG; 
#line 22355
#pragma pack ( push, 8 )
#line 22370
typedef 
#line 22357
struct _RTL_CRITICAL_SECTION { 
#line 22358
PRTL_CRITICAL_SECTION_DEBUG DebugInfo; 
#line 22365
LONG LockCount; 
#line 22366
LONG RecursionCount; 
#line 22367
HANDLE OwningThread; 
#line 22368
HANDLE LockSemaphore; 
#line 22369
ULONG_PTR SpinCount; 
#line 22370
} RTL_CRITICAL_SECTION, *PRTL_CRITICAL_SECTION; 
#line 22372
#pragma pack ( pop )
#line 22376
typedef 
#line 22374
struct _RTL_SRWLOCK { 
#line 22375
PVOID Ptr; 
#line 22376
} RTL_SRWLOCK, *PRTL_SRWLOCK; 
#line 22380
typedef 
#line 22378
struct _RTL_CONDITION_VARIABLE { 
#line 22379
PVOID Ptr; 
#line 22380
} RTL_CONDITION_VARIABLE, *PRTL_CONDITION_VARIABLE; 
#line 22385
typedef void (__stdcall *PAPCFUNC)(ULONG_PTR Parameter); 
#line 22388
typedef LONG (__stdcall *PVECTORED_EXCEPTION_HANDLER)(_EXCEPTION_POINTERS * ExceptionInfo); 
#line 22411 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnt.h"
typedef 
#line 22392 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnt.h"
enum _HEAP_INFORMATION_CLASS { 
#line 22394
HeapCompatibilityInformation, 
#line 22395
HeapEnableTerminationOnCorruption, 
#line 22401
HeapOptimizeResources = 3, 
#line 22409 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnt.h"
HeapTag = 7
#line 22411
} HEAP_INFORMATION_CLASS; 
#line 22420
typedef 
#line 22417
struct _HEAP_OPTIMIZE_RESOURCES_INFORMATION { 
#line 22418
DWORD Version; 
#line 22419
DWORD Flags; 
#line 22420
} HEAP_OPTIMIZE_RESOURCES_INFORMATION, *PHEAP_OPTIMIZE_RESOURCES_INFORMATION; 
#line 22437 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnt.h"
typedef void (__stdcall *WAITORTIMERCALLBACKFUNC)(PVOID, BOOLEAN); 
#line 22438
typedef void (__stdcall *WORKERCALLBACKFUNC)(PVOID); 
#line 22439
typedef void (__stdcall *APC_CALLBACK_FUNCTION)(DWORD, PVOID, PVOID); 
#line 22440
typedef WAITORTIMERCALLBACKFUNC WAITORTIMERCALLBACK; 
#line 22443
typedef void (__stdcall *PFLS_CALLBACK_FUNCTION)(PVOID lpFlsData); 
#line 22449
typedef BOOLEAN (__stdcall *PSECURE_MEMORY_CACHE_CALLBACK)(PVOID Addr, SIZE_T Range); 
#line 22472
typedef 
#line 22457
enum _ACTIVATION_CONTEXT_INFO_CLASS { 
#line 22458
ActivationContextBasicInformation = 1, 
#line 22459
ActivationContextDetailedInformation, 
#line 22460
AssemblyDetailedInformationInActivationContext, 
#line 22461
FileInformationInAssemblyOfAssemblyInActivationContext, 
#line 22462
RunlevelInformationInActivationContext, 
#line 22463
CompatibilityInformationInActivationContext, 
#line 22464
ActivationContextManifestResourceName, 
#line 22465
MaxActivationContextInfoClass, 
#line 22470
AssemblyDetailedInformationInActivationContxt = 3, 
#line 22471
FileInformationInAssemblyOfAssemblyInActivationContxt
#line 22472
} ACTIVATION_CONTEXT_INFO_CLASS; 
#line 22480
typedef 
#line 22477
struct _ACTIVATION_CONTEXT_QUERY_INDEX { 
#line 22478
DWORD ulAssemblyIndex; 
#line 22479
DWORD ulFileIndexInAssembly; 
#line 22480
} ACTIVATION_CONTEXT_QUERY_INDEX, *PACTIVATION_CONTEXT_QUERY_INDEX; 
#line 22482
typedef const _ACTIVATION_CONTEXT_QUERY_INDEX *PCACTIVATION_CONTEXT_QUERY_INDEX; 
#line 22497
typedef 
#line 22490
struct _ASSEMBLY_FILE_DETAILED_INFORMATION { 
#line 22491
DWORD ulFlags; 
#line 22492
DWORD ulFilenameLength; 
#line 22493
DWORD ulPathLength; 
#line 22495
PCWSTR lpFileName; 
#line 22496
PCWSTR lpFilePath; 
#line 22497
} ASSEMBLY_FILE_DETAILED_INFORMATION, *PASSEMBLY_FILE_DETAILED_INFORMATION; 
#line 22498
typedef const ASSEMBLY_FILE_DETAILED_INFORMATION *PCASSEMBLY_FILE_DETAILED_INFORMATION; 
#line 22532
typedef 
#line 22509
struct _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION { 
#line 22510
DWORD ulFlags; 
#line 22511
DWORD ulEncodedAssemblyIdentityLength; 
#line 22512
DWORD ulManifestPathType; 
#line 22513
DWORD ulManifestPathLength; 
#line 22514
LARGE_INTEGER liManifestLastWriteTime; 
#line 22515
DWORD ulPolicyPathType; 
#line 22516
DWORD ulPolicyPathLength; 
#line 22517
LARGE_INTEGER liPolicyLastWriteTime; 
#line 22518
DWORD ulMetadataSatelliteRosterIndex; 
#line 22520
DWORD ulManifestVersionMajor; 
#line 22521
DWORD ulManifestVersionMinor; 
#line 22522
DWORD ulPolicyVersionMajor; 
#line 22523
DWORD ulPolicyVersionMinor; 
#line 22524
DWORD ulAssemblyDirectoryNameLength; 
#line 22526
PCWSTR lpAssemblyEncodedAssemblyIdentity; 
#line 22527
PCWSTR lpAssemblyManifestPath; 
#line 22528
PCWSTR lpAssemblyPolicyPath; 
#line 22529
PCWSTR lpAssemblyDirectoryName; 
#line 22531
DWORD ulFileCount; 
#line 22532
} ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION, *PACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION; 
#line 22534
typedef const _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION *PCACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION; 
#line 22543
typedef 
#line 22537
enum { 
#line 22538
ACTCTX_RUN_LEVEL_UNSPECIFIED, 
#line 22539
ACTCTX_RUN_LEVEL_AS_INVOKER, 
#line 22540
ACTCTX_RUN_LEVEL_HIGHEST_AVAILABLE, 
#line 22541
ACTCTX_RUN_LEVEL_REQUIRE_ADMIN, 
#line 22542
ACTCTX_RUN_LEVEL_NUMBERS
#line 22543
} ACTCTX_REQUESTED_RUN_LEVEL; 
#line 22549
typedef 
#line 22545
struct _ACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION { 
#line 22546
DWORD ulFlags; 
#line 22547
ACTCTX_REQUESTED_RUN_LEVEL RunLevel; 
#line 22548
DWORD UiAccess; 
#line 22549
} ACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION, *PACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION; 
#line 22551
typedef const _ACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION *PCACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION; 
#line 22559
typedef 
#line 22554
enum { 
#line 22555
ACTCTX_COMPATIBILITY_ELEMENT_TYPE_UNKNOWN, 
#line 22556
ACTCTX_COMPATIBILITY_ELEMENT_TYPE_OS, 
#line 22557
ACTCTX_COMPATIBILITY_ELEMENT_TYPE_MITIGATION, 
#line 22558
ACTCTX_COMPATIBILITY_ELEMENT_TYPE_MAXVERSIONTESTED
#line 22559
} ACTCTX_COMPATIBILITY_ELEMENT_TYPE; 
#line 22565
typedef 
#line 22561
struct _COMPATIBILITY_CONTEXT_ELEMENT { 
#line 22562
GUID Id; 
#line 22563
ACTCTX_COMPATIBILITY_ELEMENT_TYPE Type; 
#line 22564
ULONGLONG MaxVersionTested; 
#line 22565
} COMPATIBILITY_CONTEXT_ELEMENT, *PCOMPATIBILITY_CONTEXT_ELEMENT; 
#line 22567
typedef const _COMPATIBILITY_CONTEXT_ELEMENT *PCCOMPATIBILITY_CONTEXT_ELEMENT; 
#line 22572
#pragma warning(push)
#pragma warning(disable:4200)
#line 22579 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnt.h"
typedef 
#line 22576
struct _ACTIVATION_CONTEXT_COMPATIBILITY_INFORMATION { 
#line 22577
DWORD ElementCount; 
#line 22578
COMPATIBILITY_CONTEXT_ELEMENT Elements[]; 
#line 22579
} ACTIVATION_CONTEXT_COMPATIBILITY_INFORMATION, *PACTIVATION_CONTEXT_COMPATIBILITY_INFORMATION; 
#line 22582
#pragma warning(pop)
#line 22585 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnt.h"
typedef const _ACTIVATION_CONTEXT_COMPATIBILITY_INFORMATION *PCACTIVATION_CONTEXT_COMPATIBILITY_INFORMATION; 
#line 22592 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnt.h"
typedef 
#line 22589
struct _SUPPORTED_OS_INFO { 
#line 22590
WORD MajorVersion; 
#line 22591
WORD MinorVersion; 
#line 22592
} SUPPORTED_OS_INFO, *PSUPPORTED_OS_INFO; 
#line 22596
typedef 
#line 22594
struct _MAXVERSIONTESTED_INFO { 
#line 22595
ULONGLONG MaxVersionTested; 
#line 22596
} MAXVERSIONTESTED_INFO, *PMAXVERSIONTESTED_INFO; 
#line 22611
typedef 
#line 22598
struct _ACTIVATION_CONTEXT_DETAILED_INFORMATION { 
#line 22599
DWORD dwFlags; 
#line 22600
DWORD ulFormatVersion; 
#line 22601
DWORD ulAssemblyCount; 
#line 22602
DWORD ulRootManifestPathType; 
#line 22603
DWORD ulRootManifestPathChars; 
#line 22604
DWORD ulRootConfigurationPathType; 
#line 22605
DWORD ulRootConfigurationPathChars; 
#line 22606
DWORD ulAppDirPathType; 
#line 22607
DWORD ulAppDirPathChars; 
#line 22608
PCWSTR lpRootManifestPath; 
#line 22609
PCWSTR lpRootConfigurationPath; 
#line 22610
PCWSTR lpAppDirPath; 
#line 22611
} ACTIVATION_CONTEXT_DETAILED_INFORMATION, *PACTIVATION_CONTEXT_DETAILED_INFORMATION; 
#line 22613
typedef const _ACTIVATION_CONTEXT_DETAILED_INFORMATION *PCACTIVATION_CONTEXT_DETAILED_INFORMATION; 
#line 22622
typedef 
#line 22618
struct _HARDWARE_COUNTER_DATA { 
#line 22619
HARDWARE_COUNTER_TYPE Type; 
#line 22620
DWORD Reserved; 
#line 22621
DWORD64 Value; 
#line 22622
} HARDWARE_COUNTER_DATA, *PHARDWARE_COUNTER_DATA; 
#line 22636
typedef 
#line 22626
struct _PERFORMANCE_DATA { 
#line 22627
WORD Size; 
#line 22628
BYTE Version; 
#line 22629
BYTE HwCountersCount; 
#line 22630
DWORD ContextSwitchCount; 
#line 22631
DWORD64 WaitReasonBitMap; 
#line 22632
DWORD64 CycleTime; 
#line 22633
DWORD RetryCount; 
#line 22634
DWORD Reserved; 
#line 22635
HARDWARE_COUNTER_DATA HwCounters[16]; 
#line 22636
} PERFORMANCE_DATA, *PPERFORMANCE_DATA; 
#line 22641
#pragma region Desktop Family
#line 22727
void __stdcall RtlGetDeviceFamilyInfoEnum(ULONGLONG * pullUAPInfo, DWORD * pulDeviceFamily, DWORD * pulDeviceForm); 
#line 22735
DWORD __stdcall RtlConvertDeviceFamilyInfoToString(PDWORD pulDeviceFamilyBufferSize, PDWORD pulDeviceFormBufferSize, PWSTR DeviceFamily, PWSTR DeviceForm); 
#line 22745
DWORD __stdcall RtlSwitchedVVI(PRTL_OSVERSIONINFOEXW VersionInfo, DWORD TypeMask, ULONGLONG ConditionMask); 
#line 22755 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnt.h"
#pragma endregion
#line 22828
typedef 
#line 22800
struct _EVENTLOGRECORD { 
#line 22801
DWORD Length; 
#line 22802
DWORD Reserved; 
#line 22803
DWORD RecordNumber; 
#line 22804
DWORD TimeGenerated; 
#line 22805
DWORD TimeWritten; 
#line 22806
DWORD EventID; 
#line 22807
WORD EventType; 
#line 22808
WORD NumStrings; 
#line 22809
WORD EventCategory; 
#line 22810
WORD ReservedFlags; 
#line 22811
DWORD ClosingRecordNumber; 
#line 22812
DWORD StringOffset; 
#line 22813
DWORD UserSidLength; 
#line 22814
DWORD UserSidOffset; 
#line 22815
DWORD DataLength; 
#line 22816
DWORD DataOffset; 
#line 22828
} EVENTLOGRECORD, *PEVENTLOGRECORD; 
#line 22835
#pragma warning(push)
#line 22837 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnt.h"
#pragma warning(disable : 4200)
#line 22839
struct _EVENTSFORLOGFILE; 
#line 22840
typedef _EVENTSFORLOGFILE EVENTSFORLOGFILE, *PEVENTSFORLOGFILE; 
#line 22842
struct _PACKEDEVENTINFO; 
#line 22843
typedef _PACKEDEVENTINFO PACKEDEVENTINFO, *PPACKEDEVENTINFO; 
#line 22847
struct _EVENTSFORLOGFILE { 
#line 22849
DWORD ulSize; 
#line 22850
WCHAR szLogicalLogFile[256]; 
#line 22851
DWORD ulNumRecords; 
#line 22852
EVENTLOGRECORD pEventLogRecords[]; 
#line 22853
}; 
#line 22855
struct _PACKEDEVENTINFO { 
#line 22857
DWORD ulSize; 
#line 22858
DWORD ulNumEventsForLogFile; 
#line 22859
DWORD ulOffsets[]; 
#line 22860
}; 
#line 22865 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnt.h"
#pragma warning(pop)
#line 23112 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnt.h"
typedef 
#line 23105
enum _CM_SERVICE_NODE_TYPE { 
#line 23106
DriverType = 1, 
#line 23107
FileSystemType, 
#line 23108
Win32ServiceOwnProcess = 16, 
#line 23109
Win32ServiceShareProcess = 32, 
#line 23110
AdapterType = 4, 
#line 23111
RecognizerType = 8
#line 23112
} SERVICE_NODE_TYPE; 
#line 23120
typedef 
#line 23114
enum _CM_SERVICE_LOAD_TYPE { 
#line 23115
BootLoad, 
#line 23116
SystemLoad, 
#line 23117
AutoLoad, 
#line 23118
DemandLoad, 
#line 23119
DisableLoad
#line 23120
} SERVICE_LOAD_TYPE; 
#line 23127
typedef 
#line 23122
enum _CM_ERROR_CONTROL_TYPE { 
#line 23123
IgnoreError, 
#line 23124
NormalError, 
#line 23125
SevereError, 
#line 23126
CriticalError
#line 23127
} SERVICE_ERROR_TYPE; 
#line 23201
typedef 
#line 23198
struct _TAPE_ERASE { 
#line 23199
DWORD Type; 
#line 23200
BOOLEAN Immediate; 
#line 23201
} TAPE_ERASE, *PTAPE_ERASE; 
#line 23217
typedef 
#line 23214
struct _TAPE_PREPARE { 
#line 23215
DWORD Operation; 
#line 23216
BOOLEAN Immediate; 
#line 23217
} TAPE_PREPARE, *PTAPE_PREPARE; 
#line 23232
typedef 
#line 23228
struct _TAPE_WRITE_MARKS { 
#line 23229
DWORD Type; 
#line 23230
DWORD Count; 
#line 23231
BOOLEAN Immediate; 
#line 23232
} TAPE_WRITE_MARKS, *PTAPE_WRITE_MARKS; 
#line 23246
typedef 
#line 23242
struct _TAPE_GET_POSITION { 
#line 23243
DWORD Type; 
#line 23244
DWORD Partition; 
#line 23245
LARGE_INTEGER Offset; 
#line 23246
} TAPE_GET_POSITION, *PTAPE_GET_POSITION; 
#line 23268
typedef 
#line 23263
struct _TAPE_SET_POSITION { 
#line 23264
DWORD Method; 
#line 23265
DWORD Partition; 
#line 23266
LARGE_INTEGER Offset; 
#line 23267
BOOLEAN Immediate; 
#line 23268
} TAPE_SET_POSITION, *PTAPE_SET_POSITION; 
#line 23368
typedef 
#line 23356
struct _TAPE_GET_DRIVE_PARAMETERS { 
#line 23357
BOOLEAN ECC; 
#line 23358
BOOLEAN Compression; 
#line 23359
BOOLEAN DataPadding; 
#line 23360
BOOLEAN ReportSetmarks; 
#line 23361
DWORD DefaultBlockSize; 
#line 23362
DWORD MaximumBlockSize; 
#line 23363
DWORD MinimumBlockSize; 
#line 23364
DWORD MaximumPartitionCount; 
#line 23365
DWORD FeaturesLow; 
#line 23366
DWORD FeaturesHigh; 
#line 23367
DWORD EOTWarningZoneSize; 
#line 23368
} TAPE_GET_DRIVE_PARAMETERS, *PTAPE_GET_DRIVE_PARAMETERS; 
#line 23380
typedef 
#line 23374
struct _TAPE_SET_DRIVE_PARAMETERS { 
#line 23375
BOOLEAN ECC; 
#line 23376
BOOLEAN Compression; 
#line 23377
BOOLEAN DataPadding; 
#line 23378
BOOLEAN ReportSetmarks; 
#line 23379
DWORD EOTWarningZoneSize; 
#line 23380
} TAPE_SET_DRIVE_PARAMETERS, *PTAPE_SET_DRIVE_PARAMETERS; 
#line 23392
typedef 
#line 23386
struct _TAPE_GET_MEDIA_PARAMETERS { 
#line 23387
LARGE_INTEGER Capacity; 
#line 23388
LARGE_INTEGER Remaining; 
#line 23389
DWORD BlockSize; 
#line 23390
DWORD PartitionCount; 
#line 23391
BOOLEAN WriteProtected; 
#line 23392
} TAPE_GET_MEDIA_PARAMETERS, *PTAPE_GET_MEDIA_PARAMETERS; 
#line 23400
typedef 
#line 23398
struct _TAPE_SET_MEDIA_PARAMETERS { 
#line 23399
DWORD BlockSize; 
#line 23400
} TAPE_SET_MEDIA_PARAMETERS, *PTAPE_SET_MEDIA_PARAMETERS; 
#line 23414
typedef 
#line 23410
struct _TAPE_CREATE_PARTITION { 
#line 23411
DWORD Method; 
#line 23412
DWORD Count; 
#line 23413
DWORD Size; 
#line 23414
} TAPE_CREATE_PARTITION, *PTAPE_CREATE_PARTITION; 
#line 23430
typedef 
#line 23426
struct _TAPE_WMI_OPERATIONS { 
#line 23427
DWORD Method; 
#line 23428
DWORD DataBufferSize; 
#line 23429
PVOID DataBuffer; 
#line 23430
} TAPE_WMI_OPERATIONS, *PTAPE_WMI_OPERATIONS; 
#line 23443
typedef 
#line 23435
enum _TAPE_DRIVE_PROBLEM_TYPE { 
#line 23436
TapeDriveProblemNone, TapeDriveReadWriteWarning, 
#line 23437
TapeDriveReadWriteError, TapeDriveReadWarning, 
#line 23438
TapeDriveWriteWarning, TapeDriveReadError, 
#line 23439
TapeDriveWriteError, TapeDriveHardwareError, 
#line 23440
TapeDriveUnsupportedMedia, TapeDriveScsiConnectionError, 
#line 23441
TapeDriveTimetoClean, TapeDriveCleanDriveNow, 
#line 23442
TapeDriveMediaLifeExpired, TapeDriveSnappedTape
#line 23443
} TAPE_DRIVE_PROBLEM_TYPE; 
#line 23451 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnt.h"
extern "C" {
#line 23 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\shared\\ktmtypes.h"
extern "C" {
#line 27 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\shared\\ktmtypes.h"
#pragma warning(push)
#pragma warning(disable:4820)
#line 31 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\shared\\ktmtypes.h"
typedef GUID UOW, *PUOW; 
#line 32
typedef GUID CRM_PROTOCOL_ID, *PCRM_PROTOCOL_ID; 
#line 82
typedef ULONG NOTIFICATION_MASK; 
#line 142
typedef 
#line 137
struct _TRANSACTION_NOTIFICATION { 
#line 138
PVOID TransactionKey; 
#line 139
ULONG TransactionNotification; 
#line 140
LARGE_INTEGER TmVirtualClock; 
#line 141
ULONG ArgumentLength; 
#line 142
} TRANSACTION_NOTIFICATION, *PTRANSACTION_NOTIFICATION; 
#line 147
typedef 
#line 144
struct _TRANSACTION_NOTIFICATION_RECOVERY_ARGUMENT { 
#line 145
GUID EnlistmentId; 
#line 146
::UOW UOW; 
#line 147
} TRANSACTION_NOTIFICATION_RECOVERY_ARGUMENT, *PTRANSACTION_NOTIFICATION_RECOVERY_ARGUMENT; 
#line 154
typedef 
#line 151
struct _TRANSACTION_NOTIFICATION_TM_ONLINE_ARGUMENT { 
#line 152
GUID TmIdentity; 
#line 153
ULONG Flags; 
#line 154
} TRANSACTION_NOTIFICATION_TM_ONLINE_ARGUMENT, *PTRANSACTION_NOTIFICATION_TM_ONLINE_ARGUMENT; 
#line 156
typedef ULONG SAVEPOINT_ID, *PSAVEPOINT_ID; 
#line 160
typedef 
#line 158
struct _TRANSACTION_NOTIFICATION_SAVEPOINT_ARGUMENT { 
#line 159
SAVEPOINT_ID SavepointId; 
#line 160
} TRANSACTION_NOTIFICATION_SAVEPOINT_ARGUMENT, *PTRANSACTION_NOTIFICATION_SAVEPOINT_ARGUMENT; 
#line 168
typedef 
#line 162
struct _TRANSACTION_NOTIFICATION_PROPAGATE_ARGUMENT { 
#line 163
ULONG PropagationCookie; 
#line 164
GUID UOW; 
#line 165
GUID TmIdentity; 
#line 166
ULONG BufferLength; 
#line 168
} TRANSACTION_NOTIFICATION_PROPAGATE_ARGUMENT, *PTRANSACTION_NOTIFICATION_PROPAGATE_ARGUMENT; 
#line 173
typedef 
#line 170
struct _TRANSACTION_NOTIFICATION_MARSHAL_ARGUMENT { 
#line 171
ULONG MarshalCookie; 
#line 172
GUID UOW; 
#line 173
} TRANSACTION_NOTIFICATION_MARSHAL_ARGUMENT, *PTRANSACTION_NOTIFICATION_MARSHAL_ARGUMENT; 
#line 175
typedef TRANSACTION_NOTIFICATION_PROPAGATE_ARGUMENT TRANSACTION_NOTIFICATION_PROMOTE_ARGUMENT, *PTRANSACTION_NOTIFICATION_PROMOTE_ARGUMENT; 
#line 188
typedef 
#line 183
struct _KCRM_MARSHAL_HEADER { 
#line 184
ULONG VersionMajor; 
#line 185
ULONG VersionMinor; 
#line 186
ULONG NumProtocols; 
#line 187
ULONG Unused; 
#line 188
} KCRM_MARSHAL_HEADER, *PKCRM_MARSHAL_HEADER, *PRKCRM_MARSHAL_HEADER; 
#line 197
typedef 
#line 190
struct _KCRM_TRANSACTION_BLOB { 
#line 191
::UOW UOW; 
#line 192
GUID TmIdentity; 
#line 193
ULONG IsolationLevel; 
#line 194
ULONG IsolationFlags; 
#line 195
ULONG Timeout; 
#line 196
WCHAR Description[64]; 
#line 197
} KCRM_TRANSACTION_BLOB, *PKCRM_TRANSACTION_BLOB, *PRKCRM_TRANSACTION_BLOB; 
#line 205
typedef 
#line 199
struct _KCRM_PROTOCOL_BLOB { 
#line 200
CRM_PROTOCOL_ID ProtocolId; 
#line 201
ULONG StaticInfoLength; 
#line 202
ULONG TransactionIdInfoLength; 
#line 203
ULONG Unused1; 
#line 204
ULONG Unused2; 
#line 205
} KCRM_PROTOCOL_BLOB, *PKCRM_PROTOCOL_BLOB, *PRKCRM_PROTOCOL_BLOB; 
#line 212 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\shared\\ktmtypes.h"
}
#line 208 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\shared\\ktmtypes.h"
#pragma warning(pop)
#line 23458 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnt.h"
#pragma warning(push)
#pragma warning(disable:4820)
#line 23636 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnt.h"
typedef 
#line 23632
enum _TRANSACTION_OUTCOME { 
#line 23633
TransactionOutcomeUndetermined = 1, 
#line 23634
TransactionOutcomeCommitted, 
#line 23635
TransactionOutcomeAborted
#line 23636
} TRANSACTION_OUTCOME; 
#line 23643
typedef 
#line 23639
enum _TRANSACTION_STATE { 
#line 23640
TransactionStateNormal = 1, 
#line 23641
TransactionStateIndoubt, 
#line 23642
TransactionStateCommittedNotify
#line 23643
} TRANSACTION_STATE; 
#line 23650
typedef 
#line 23646
struct _TRANSACTION_BASIC_INFORMATION { 
#line 23647
GUID TransactionId; 
#line 23648
DWORD State; 
#line 23649
DWORD Outcome; 
#line 23650
} TRANSACTION_BASIC_INFORMATION, *PTRANSACTION_BASIC_INFORMATION; 
#line 23655
typedef 
#line 23652
struct _TRANSACTIONMANAGER_BASIC_INFORMATION { 
#line 23653
GUID TmIdentity; 
#line 23654
LARGE_INTEGER VirtualClock; 
#line 23655
} TRANSACTIONMANAGER_BASIC_INFORMATION, *PTRANSACTIONMANAGER_BASIC_INFORMATION; 
#line 23659
typedef 
#line 23657
struct _TRANSACTIONMANAGER_LOG_INFORMATION { 
#line 23658
GUID LogIdentity; 
#line 23659
} TRANSACTIONMANAGER_LOG_INFORMATION, *PTRANSACTIONMANAGER_LOG_INFORMATION; 
#line 23665
typedef 
#line 23661
struct _TRANSACTIONMANAGER_LOGPATH_INFORMATION { 
#line 23662
DWORD LogPathLength; 
#line 23663
WCHAR LogPath[1]; 
#line 23665
} TRANSACTIONMANAGER_LOGPATH_INFORMATION, *PTRANSACTIONMANAGER_LOGPATH_INFORMATION; 
#line 23669
typedef 
#line 23667
struct _TRANSACTIONMANAGER_RECOVERY_INFORMATION { 
#line 23668
ULONGLONG LastRecoveredLsn; 
#line 23669
} TRANSACTIONMANAGER_RECOVERY_INFORMATION, *PTRANSACTIONMANAGER_RECOVERY_INFORMATION; 
#line 23675
typedef 
#line 23673
struct _TRANSACTIONMANAGER_OLDEST_INFORMATION { 
#line 23674
GUID OldestTransactionGuid; 
#line 23675
} TRANSACTIONMANAGER_OLDEST_INFORMATION, *PTRANSACTIONMANAGER_OLDEST_INFORMATION; 
#line 23687
typedef 
#line 23679
struct _TRANSACTION_PROPERTIES_INFORMATION { 
#line 23680
DWORD IsolationLevel; 
#line 23681
DWORD IsolationFlags; 
#line 23682
LARGE_INTEGER Timeout; 
#line 23683
DWORD Outcome; 
#line 23684
DWORD DescriptionLength; 
#line 23685
WCHAR Description[1]; 
#line 23687
} TRANSACTION_PROPERTIES_INFORMATION, *PTRANSACTION_PROPERTIES_INFORMATION; 
#line 23693
typedef 
#line 23691
struct _TRANSACTION_BIND_INFORMATION { 
#line 23692
HANDLE TmHandle; 
#line 23693
} TRANSACTION_BIND_INFORMATION, *PTRANSACTION_BIND_INFORMATION; 
#line 23698
typedef 
#line 23695
struct _TRANSACTION_ENLISTMENT_PAIR { 
#line 23696
GUID EnlistmentId; 
#line 23697
GUID ResourceManagerId; 
#line 23698
} TRANSACTION_ENLISTMENT_PAIR, *PTRANSACTION_ENLISTMENT_PAIR; 
#line 23703
typedef 
#line 23700
struct _TRANSACTION_ENLISTMENTS_INFORMATION { 
#line 23701
DWORD NumberOfEnlistments; 
#line 23702
TRANSACTION_ENLISTMENT_PAIR EnlistmentPair[1]; 
#line 23703
} TRANSACTION_ENLISTMENTS_INFORMATION, *PTRANSACTION_ENLISTMENTS_INFORMATION; 
#line 23707
typedef 
#line 23705
struct _TRANSACTION_SUPERIOR_ENLISTMENT_INFORMATION { 
#line 23706
TRANSACTION_ENLISTMENT_PAIR SuperiorEnlistmentPair; 
#line 23707
} TRANSACTION_SUPERIOR_ENLISTMENT_INFORMATION, *PTRANSACTION_SUPERIOR_ENLISTMENT_INFORMATION; 
#line 23714
typedef 
#line 23710
struct _RESOURCEMANAGER_BASIC_INFORMATION { 
#line 23711
GUID ResourceManagerId; 
#line 23712
DWORD DescriptionLength; 
#line 23713
WCHAR Description[1]; 
#line 23714
} RESOURCEMANAGER_BASIC_INFORMATION, *PRESOURCEMANAGER_BASIC_INFORMATION; 
#line 23719
typedef 
#line 23716
struct _RESOURCEMANAGER_COMPLETION_INFORMATION { 
#line 23717
HANDLE IoCompletionPortHandle; 
#line 23718
ULONG_PTR CompletionKey; 
#line 23719
} RESOURCEMANAGER_COMPLETION_INFORMATION, *PRESOURCEMANAGER_COMPLETION_INFORMATION; 
#line 23737
typedef 
#line 23724
enum _TRANSACTION_INFORMATION_CLASS { 
#line 23725
TransactionBasicInformation, 
#line 23726
TransactionPropertiesInformation, 
#line 23727
TransactionEnlistmentInformation, 
#line 23728
TransactionSuperiorEnlistmentInformation, 
#line 23733
TransactionBindInformation, 
#line 23734
TransactionDTCPrivateInformation
#line 23737
} TRANSACTION_INFORMATION_CLASS; 
#line 23755
typedef 
#line 23740
enum _TRANSACTIONMANAGER_INFORMATION_CLASS { 
#line 23741
TransactionManagerBasicInformation, 
#line 23742
TransactionManagerLogInformation, 
#line 23743
TransactionManagerLogPathInformation, 
#line 23744
TransactionManagerRecoveryInformation = 4, 
#line 23750
TransactionManagerOnlineProbeInformation = 3, 
#line 23751
TransactionManagerOldestTransactionInformation = 5
#line 23755
} TRANSACTIONMANAGER_INFORMATION_CLASS; 
#line 23762
typedef 
#line 23759
enum _RESOURCEMANAGER_INFORMATION_CLASS { 
#line 23760
ResourceManagerBasicInformation, 
#line 23761
ResourceManagerCompletionInformation
#line 23762
} RESOURCEMANAGER_INFORMATION_CLASS; 
#line 23769
typedef 
#line 23765
struct _ENLISTMENT_BASIC_INFORMATION { 
#line 23766
GUID EnlistmentId; 
#line 23767
GUID TransactionId; 
#line 23768
GUID ResourceManagerId; 
#line 23769
} ENLISTMENT_BASIC_INFORMATION, *PENLISTMENT_BASIC_INFORMATION; 
#line 23775
typedef 
#line 23771
struct _ENLISTMENT_CRM_INFORMATION { 
#line 23772
GUID CrmTransactionManagerId; 
#line 23773
GUID CrmResourceManagerId; 
#line 23774
GUID CrmEnlistmentId; 
#line 23775
} ENLISTMENT_CRM_INFORMATION, *PENLISTMENT_CRM_INFORMATION; 
#line 23783
typedef 
#line 23779
enum _ENLISTMENT_INFORMATION_CLASS { 
#line 23780
EnlistmentBasicInformation, 
#line 23781
EnlistmentRecoveryInformation, 
#line 23782
EnlistmentCrmInformation
#line 23783
} ENLISTMENT_INFORMATION_CLASS; 
#line 23787
typedef 
#line 23785
struct _TRANSACTION_LIST_ENTRY { 
#line 23786
::UOW UOW; 
#line 23787
} TRANSACTION_LIST_ENTRY, *PTRANSACTION_LIST_ENTRY; 
#line 23792
typedef 
#line 23789
struct _TRANSACTION_LIST_INFORMATION { 
#line 23790
DWORD NumberOfTransactions; 
#line 23791
TRANSACTION_LIST_ENTRY TransactionInformation[1]; 
#line 23792
} TRANSACTION_LIST_INFORMATION, *PTRANSACTION_LIST_INFORMATION; 
#line 23807
typedef 
#line 23799
enum _KTMOBJECT_TYPE { 
#line 23801
KTMOBJECT_TRANSACTION, 
#line 23802
KTMOBJECT_TRANSACTION_MANAGER, 
#line 23803
KTMOBJECT_RESOURCE_MANAGER, 
#line 23804
KTMOBJECT_ENLISTMENT, 
#line 23805
KTMOBJECT_INVALID
#line 23807
} KTMOBJECT_TYPE, *PKTMOBJECT_TYPE; 
#line 23837
typedef 
#line 23817
struct _KTMOBJECT_CURSOR { 
#line 23823
GUID LastQuery; 
#line 23829
DWORD ObjectIdCount; 
#line 23835
GUID ObjectIds[1]; 
#line 23837
} KTMOBJECT_CURSOR, *PKTMOBJECT_CURSOR; 
#line 23846 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnt.h"
}
#line 23842 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnt.h"
#pragma warning(pop)
#line 23850 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnt.h"
typedef DWORD TP_VERSION, *PTP_VERSION; 
#line 23852
typedef struct _TP_CALLBACK_INSTANCE TP_CALLBACK_INSTANCE, *PTP_CALLBACK_INSTANCE; 
#line 23854
typedef void (__stdcall *PTP_SIMPLE_CALLBACK)(PTP_CALLBACK_INSTANCE Instance, PVOID Context); 
#line 23859
typedef struct _TP_POOL TP_POOL, *PTP_POOL; 
#line 23867
typedef 
#line 23861
enum _TP_CALLBACK_PRIORITY { 
#line 23862
TP_CALLBACK_PRIORITY_HIGH, 
#line 23863
TP_CALLBACK_PRIORITY_NORMAL, 
#line 23864
TP_CALLBACK_PRIORITY_LOW, 
#line 23865
TP_CALLBACK_PRIORITY_INVALID, 
#line 23866
TP_CALLBACK_PRIORITY_COUNT = TP_CALLBACK_PRIORITY_INVALID
#line 23867
} TP_CALLBACK_PRIORITY; 
#line 23872
typedef 
#line 23869
struct _TP_POOL_STACK_INFORMATION { 
#line 23870
SIZE_T StackReserve; 
#line 23871
SIZE_T StackCommit; 
#line 23872
} TP_POOL_STACK_INFORMATION, *PTP_POOL_STACK_INFORMATION; 
#line 23874
typedef struct _TP_CLEANUP_GROUP TP_CLEANUP_GROUP, *PTP_CLEANUP_GROUP; 
#line 23876
typedef void (__stdcall *PTP_CLEANUP_GROUP_CANCEL_CALLBACK)(PVOID ObjectContext, PVOID CleanupContext); 
#line 23906
typedef 
#line 23888
struct _TP_CALLBACK_ENVIRON_V3 { 
#line 23889
TP_VERSION Version; 
#line 23890
PTP_POOL Pool; 
#line 23891
PTP_CLEANUP_GROUP CleanupGroup; 
#line 23892
PTP_CLEANUP_GROUP_CANCEL_CALLBACK CleanupGroupCancelCallback; 
#line 23893
PVOID RaceDll; 
#line 23894
struct _ACTIVATION_CONTEXT *ActivationContext; 
#line 23895
PTP_SIMPLE_CALLBACK FinalizationCallback; 
#line 23896
union { 
#line 23897
DWORD Flags; 
#line 23898
struct { 
#line 23899
DWORD LongFunction:1; 
#line 23900
DWORD Persistent:1; 
#line 23901
DWORD Private:30; 
#line 23902
} s; 
#line 23903
} u; 
#line 23904
TP_CALLBACK_PRIORITY CallbackPriority; 
#line 23905
DWORD Size; 
#line 23906
} TP_CALLBACK_ENVIRON_V3; 
#line 23908
typedef TP_CALLBACK_ENVIRON_V3 TP_CALLBACK_ENVIRON, *PTP_CALLBACK_ENVIRON; 
#line 23938 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnt.h"
__forceinline void TpInitializeCallbackEnviron(PTP_CALLBACK_ENVIRON 
#line 23939
CallbackEnviron) 
#line 23941
{ 
#line 23945
(CallbackEnviron->Version) = (3); 
#line 23953 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnt.h"
(CallbackEnviron->Pool) = (0); 
#line 23954
(CallbackEnviron->CleanupGroup) = (0); 
#line 23955
(CallbackEnviron->CleanupGroupCancelCallback) = (0); 
#line 23956
(CallbackEnviron->RaceDll) = (0); 
#line 23957
(CallbackEnviron->ActivationContext) = (0); 
#line 23958
(CallbackEnviron->FinalizationCallback) = (0); 
#line 23959
((CallbackEnviron->u).Flags) = (0); 
#line 23963
(CallbackEnviron->CallbackPriority) = TP_CALLBACK_PRIORITY_NORMAL; 
#line 23964
(CallbackEnviron->Size) = (sizeof(TP_CALLBACK_ENVIRON)); 
#line 23968 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnt.h"
} 
#line 23972
__forceinline void TpSetCallbackThreadpool(PTP_CALLBACK_ENVIRON 
#line 23973
CallbackEnviron, PTP_POOL 
#line 23974
Pool) 
#line 23976
{ 
#line 23977
(CallbackEnviron->Pool) = Pool; 
#line 23978
} 
#line 23982
__forceinline void TpSetCallbackCleanupGroup(PTP_CALLBACK_ENVIRON 
#line 23983
CallbackEnviron, PTP_CLEANUP_GROUP 
#line 23984
CleanupGroup, PTP_CLEANUP_GROUP_CANCEL_CALLBACK 
#line 23985
CleanupGroupCancelCallback) 
#line 23987
{ 
#line 23988
(CallbackEnviron->CleanupGroup) = CleanupGroup; 
#line 23989
(CallbackEnviron->CleanupGroupCancelCallback) = CleanupGroupCancelCallback; 
#line 23990
} 
#line 23994
__forceinline void TpSetCallbackActivationContext(PTP_CALLBACK_ENVIRON 
#line 23995
CallbackEnviron, _ACTIVATION_CONTEXT *
#line 23996
ActivationContext) 
#line 23998
{ 
#line 23999
(CallbackEnviron->ActivationContext) = ActivationContext; 
#line 24000
} 
#line 24004
__forceinline void TpSetCallbackNoActivationContext(PTP_CALLBACK_ENVIRON 
#line 24005
CallbackEnviron) 
#line 24007
{ 
#line 24008
(CallbackEnviron->ActivationContext) = ((_ACTIVATION_CONTEXT *)((LONG_PTR)(-1))); 
#line 24009
} 
#line 24013
__forceinline void TpSetCallbackLongFunction(PTP_CALLBACK_ENVIRON 
#line 24014
CallbackEnviron) 
#line 24016
{ 
#line 24017
(((CallbackEnviron->u).s).LongFunction) = (1); 
#line 24018
} 
#line 24022
__forceinline void TpSetCallbackRaceWithDll(PTP_CALLBACK_ENVIRON 
#line 24023
CallbackEnviron, PVOID 
#line 24024
DllHandle) 
#line 24026
{ 
#line 24027
(CallbackEnviron->RaceDll) = DllHandle; 
#line 24028
} 
#line 24032
__forceinline void TpSetCallbackFinalizationCallback(PTP_CALLBACK_ENVIRON 
#line 24033
CallbackEnviron, PTP_SIMPLE_CALLBACK 
#line 24034
FinalizationCallback) 
#line 24036
{ 
#line 24037
(CallbackEnviron->FinalizationCallback) = FinalizationCallback; 
#line 24038
} 
#line 24044
__forceinline void TpSetCallbackPriority(PTP_CALLBACK_ENVIRON 
#line 24045
CallbackEnviron, TP_CALLBACK_PRIORITY 
#line 24046
Priority) 
#line 24048
{ 
#line 24049
(CallbackEnviron->CallbackPriority) = Priority; 
#line 24050
} 
#line 24056 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnt.h"
__forceinline void TpSetCallbackPersistent(PTP_CALLBACK_ENVIRON 
#line 24057
CallbackEnviron) 
#line 24059
{ 
#line 24060
(((CallbackEnviron->u).s).Persistent) = (1); 
#line 24061
} 
#line 24066
__forceinline void TpDestroyCallbackEnviron(PTP_CALLBACK_ENVIRON 
#line 24067
CallbackEnviron) 
#line 24069
{ 
#line 24076
CallbackEnviron; 
#line 24077
} 
#line 24082 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnt.h"
typedef struct _TP_WORK TP_WORK, *PTP_WORK; 
#line 24084
typedef void (__stdcall *PTP_WORK_CALLBACK)(PTP_CALLBACK_INSTANCE Instance, PVOID Context, PTP_WORK Work); 
#line 24090
typedef struct _TP_TIMER TP_TIMER, *PTP_TIMER; 
#line 24092
typedef void (__stdcall *PTP_TIMER_CALLBACK)(PTP_CALLBACK_INSTANCE Instance, PVOID Context, PTP_TIMER Timer); 
#line 24098
typedef DWORD TP_WAIT_RESULT; 
#line 24100
typedef struct _TP_WAIT TP_WAIT, *PTP_WAIT; 
#line 24102
typedef void (__stdcall *PTP_WAIT_CALLBACK)(PTP_CALLBACK_INSTANCE Instance, PVOID Context, PTP_WAIT Wait, TP_WAIT_RESULT WaitResult); 
#line 24109
typedef struct _TP_IO TP_IO, *PTP_IO; 
#line 24115
__forceinline struct _TEB *NtCurrentTeb() 
#line 24119
{ 
#line 24120
return (_TEB *)__readgsqword((LONG)((LONG_PTR)(&(((NT_TIB *)0)->Self)))); 
#line 24121
} 
#line 24125
__forceinline PVOID GetCurrentFiber() 
#line 24129
{ 
#line 24131
return (PVOID)__readgsqword((LONG)((LONG_PTR)(&(((NT_TIB *)0)->FiberData)))); 
#line 24132
} 
#line 24136
__forceinline PVOID GetFiberData() 
#line 24140
{ 
#line 24142
return *((PVOID *)GetCurrentFiber()); 
#line 24143
} 
#line 24242 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnt.h"
}
#line 24246 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnt.h"
#pragma warning(pop)
#line 186 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\shared\\minwindef.h"
typedef UINT_PTR WPARAM; 
#line 187
typedef LONG_PTR LPARAM; 
#line 188
typedef LONG_PTR LRESULT; 
#line 209
typedef HANDLE *SPHANDLE; 
#line 210
typedef HANDLE *LPHANDLE; 
#line 211
typedef HANDLE HGLOBAL; 
#line 212
typedef HANDLE HLOCAL; 
#line 213
typedef HANDLE GLOBALHANDLE; 
#line 214
typedef HANDLE LOCALHANDLE; 
#line 218
#pragma warning(push)
#pragma warning(disable:4255)
#line 223 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\shared\\minwindef.h"
typedef INT_PTR (__stdcall *FARPROC)(void); 
#line 224
typedef INT_PTR (__stdcall *NEARPROC)(void); 
#line 225
typedef INT_PTR (__stdcall *PROC)(void); 
#line 237 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\shared\\minwindef.h"
#pragma warning(pop)
#line 245 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\shared\\minwindef.h"
typedef WORD ATOM; 
#line 247
struct HKEY__ { int unused; }; typedef HKEY__ *HKEY; 
#line 248
typedef HKEY *PHKEY; 
#line 249
struct HMETAFILE__ { int unused; }; typedef HMETAFILE__ *HMETAFILE; 
#line 250
struct HINSTANCE__ { int unused; }; typedef HINSTANCE__ *HINSTANCE; 
#line 251
typedef HINSTANCE HMODULE; 
#line 252
struct HRGN__ { int unused; }; typedef HRGN__ *HRGN; 
#line 253
struct HRSRC__ { int unused; }; typedef HRSRC__ *HRSRC; 
#line 254
struct HSPRITE__ { int unused; }; typedef HSPRITE__ *HSPRITE; 
#line 255
struct HLSURF__ { int unused; }; typedef HLSURF__ *HLSURF; 
#line 256
struct HSTR__ { int unused; }; typedef HSTR__ *HSTR; 
#line 257
struct HTASK__ { int unused; }; typedef HTASK__ *HTASK; 
#line 258
struct HWINSTA__ { int unused; }; typedef HWINSTA__ *HWINSTA; 
#line 259
struct HKL__ { int unused; }; typedef HKL__ *HKL; 
#line 262
typedef int HFILE; 
#line 274 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\shared\\minwindef.h"
typedef 
#line 271
struct _FILETIME { 
#line 272
DWORD dwLowDateTime; 
#line 273
DWORD dwHighDateTime; 
#line 274
} FILETIME, *PFILETIME, *LPFILETIME; 
#line 278
}
#line 282 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\shared\\minwindef.h"
#pragma endregion
#line 36 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\shared\\windef.h"
#pragma region Application Family or OneCore Family or Games Family
#line 39
struct HWND__ { int unused; }; typedef HWND__ *HWND; 
#line 40
struct HHOOK__ { int unused; }; typedef HHOOK__ *HHOOK; 
#line 43 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\shared\\windef.h"
#pragma endregion
#line 58 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\shared\\windef.h"
#pragma region Application Family
#line 63
typedef void *HGDIOBJ; 
#line 70 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\shared\\windef.h"
struct HACCEL__ { int unused; }; typedef HACCEL__ *HACCEL; 
#line 73 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\shared\\windef.h"
struct HBITMAP__ { int unused; }; typedef HBITMAP__ *HBITMAP; 
#line 74
struct HBRUSH__ { int unused; }; typedef HBRUSH__ *HBRUSH; 
#line 77 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\shared\\windef.h"
struct HCOLORSPACE__ { int unused; }; typedef HCOLORSPACE__ *HCOLORSPACE; 
#line 80 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\shared\\windef.h"
struct HDC__ { int unused; }; typedef HDC__ *HDC; 
#line 82 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\shared\\windef.h"
struct HGLRC__ { int unused; }; typedef HGLRC__ *HGLRC; 
#line 83
struct HDESK__ { int unused; }; typedef HDESK__ *HDESK; 
#line 84
struct HENHMETAFILE__ { int unused; }; typedef HENHMETAFILE__ *HENHMETAFILE; 
#line 86
struct HFONT__ { int unused; }; typedef HFONT__ *HFONT; 
#line 88 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\shared\\windef.h"
struct HICON__ { int unused; }; typedef HICON__ *HICON; 
#line 90
struct HMENU__ { int unused; }; typedef HMENU__ *HMENU; 
#line 93 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\shared\\windef.h"
struct HPALETTE__ { int unused; }; typedef HPALETTE__ *HPALETTE; 
#line 94
struct HPEN__ { int unused; }; typedef HPEN__ *HPEN; 
#line 98 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\shared\\windef.h"
struct HWINEVENTHOOK__ { int unused; }; typedef HWINEVENTHOOK__ *HWINEVENTHOOK; 
#line 102 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\shared\\windef.h"
#pragma endregion
#line 107
#pragma region Application Family
#line 110
struct HMONITOR__ { int unused; }; typedef HMONITOR__ *HMONITOR; 
#line 113 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\shared\\windef.h"
#pragma endregion
#line 117 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\shared\\windef.h"
#pragma region Desktop Family
#line 120
struct HUMPD__ { int unused; }; typedef HUMPD__ *HUMPD; 
#line 123 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\shared\\windef.h"
#pragma endregion
#line 127 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\shared\\windef.h"
#pragma region Application Family
#line 131
typedef HICON HCURSOR; 
#line 136 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\shared\\windef.h"
typedef DWORD COLORREF; 
#line 139 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\shared\\windef.h"
#pragma endregion
#line 141
#pragma region Desktop Family
#line 144
typedef DWORD *LPCOLORREF; 
#line 149 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\shared\\windef.h"
#pragma endregion
#line 151
#pragma region Application Family or Games Family
#line 160
typedef 
#line 154
struct tagRECT { 
#line 156
LONG left; 
#line 157
LONG top; 
#line 158
LONG right; 
#line 159
LONG bottom; 
#line 160
} RECT, *PRECT, *NPRECT, *LPRECT; 
#line 162
typedef const RECT *LPCRECT; 
#line 170
typedef 
#line 164
struct _RECTL { 
#line 166
LONG left; 
#line 167
LONG top; 
#line 168
LONG right; 
#line 169
LONG bottom; 
#line 170
} RECTL, *PRECTL, *LPRECTL; 
#line 172
typedef const RECTL *LPCRECTL; 
#line 178
typedef 
#line 174
struct tagPOINT { 
#line 176
LONG x; 
#line 177
LONG y; 
#line 178
} POINT, *PPOINT, *NPPOINT, *LPPOINT; 
#line 184
typedef 
#line 180
struct _POINTL { 
#line 182
LONG x; 
#line 183
LONG y; 
#line 184
} POINTL, *PPOINTL; 
#line 190
typedef 
#line 186
struct tagSIZE { 
#line 188
LONG cx; 
#line 189
LONG cy; 
#line 190
} SIZE, *PSIZE, *LPSIZE; 
#line 192
typedef SIZE SIZEL; 
#line 193
typedef SIZE *PSIZEL, *LPSIZEL; 
#line 204 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\shared\\windef.h"
typedef 
#line 195 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\shared\\windef.h"
struct tagPOINTS { 
#line 198
SHORT x; 
#line 199
SHORT y; 
#line 204 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\shared\\windef.h"
} POINTS, *PPOINTS, *LPPOINTS; 
#line 210
typedef 
#line 207
struct APP_LOCAL_DEVICE_ID { 
#line 209
BYTE value[32]; 
#line 210
} APP_LOCAL_DEVICE_ID; 
#line 247 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\shared\\windef.h"
}
#line 213
#pragma endregion
#line 250 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\shared\\windef.h"
#pragma region Desktop Family
#line 256
struct DPI_AWARENESS_CONTEXT__ { int unused; }; typedef DPI_AWARENESS_CONTEXT__ *DPI_AWARENESS_CONTEXT; 
#line 263
typedef 
#line 258
enum DPI_AWARENESS { 
#line 259
DPI_AWARENESS_INVALID = (-1), 
#line 260
DPI_AWARENESS_UNAWARE = 0, 
#line 261
DPI_AWARENESS_SYSTEM_AWARE, 
#line 262
DPI_AWARENESS_PER_MONITOR_AWARE
#line 263
} DPI_AWARENESS; 
#line 275
typedef 
#line 271
enum DPI_HOSTING_BEHAVIOR { 
#line 272
DPI_HOSTING_BEHAVIOR_INVALID = (-1), 
#line 273
DPI_HOSTING_BEHAVIOR_DEFAULT = 0, 
#line 274
DPI_HOSTING_BEHAVIOR_MIXED
#line 275
} DPI_HOSTING_BEHAVIOR; 
#line 21 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
#pragma warning(push)
#pragma warning(disable:4820)
#pragma warning(disable:4668)
#line 25 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
#pragma warning(disable:4001)
#pragma warning(disable:4201)
#pragma warning(disable:4214)
#line 13 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\minwinbase.h"
#pragma warning(disable:4514)
#line 15
#pragma warning(disable:4103)
#line 18 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\minwinbase.h"
#pragma warning(push)
#pragma warning(disable:4820)
#line 21 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\minwinbase.h"
#pragma warning(disable:4001)
#pragma warning(disable:4201)
#pragma warning(disable:4214)
#line 30 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\minwinbase.h"
extern "C" {
#line 50 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\minwinbase.h"
typedef 
#line 46
struct _SECURITY_ATTRIBUTES { 
#line 47
DWORD nLength; 
#line 48
LPVOID lpSecurityDescriptor; 
#line 49
BOOL bInheritHandle; 
#line 50
} SECURITY_ATTRIBUTES, *PSECURITY_ATTRIBUTES, *LPSECURITY_ATTRIBUTES; 
#line 64
typedef 
#line 52
struct _OVERLAPPED { 
#line 53
ULONG_PTR Internal; 
#line 54
ULONG_PTR InternalHigh; 
#line 55
union { 
#line 56
struct { 
#line 57
DWORD Offset; 
#line 58
DWORD OffsetHigh; 
#line 59
}; 
#line 60
PVOID Pointer; 
#line 61
}; 
#line 63
HANDLE hEvent; 
#line 64
} OVERLAPPED, *LPOVERLAPPED; 
#line 71
typedef 
#line 66
struct _OVERLAPPED_ENTRY { 
#line 67
ULONG_PTR lpCompletionKey; 
#line 68
LPOVERLAPPED lpOverlapped; 
#line 69
ULONG_PTR Internal; 
#line 70
DWORD dwNumberOfBytesTransferred; 
#line 71
} OVERLAPPED_ENTRY, *LPOVERLAPPED_ENTRY; 
#line 99
typedef 
#line 90
struct _SYSTEMTIME { 
#line 91
WORD wYear; 
#line 92
WORD wMonth; 
#line 93
WORD wDayOfWeek; 
#line 94
WORD wDay; 
#line 95
WORD wHour; 
#line 96
WORD wMinute; 
#line 97
WORD wSecond; 
#line 98
WORD wMilliseconds; 
#line 99
} SYSTEMTIME, *PSYSTEMTIME, *LPSYSTEMTIME; 
#line 118
typedef 
#line 102
struct _WIN32_FIND_DATAA { 
#line 103
DWORD dwFileAttributes; 
#line 104
FILETIME ftCreationTime; 
#line 105
FILETIME ftLastAccessTime; 
#line 106
FILETIME ftLastWriteTime; 
#line 107
DWORD nFileSizeHigh; 
#line 108
DWORD nFileSizeLow; 
#line 109
DWORD dwReserved0; 
#line 110
DWORD dwReserved1; 
#line 111
CHAR cFileName[260]; 
#line 112
CHAR cAlternateFileName[14]; 
#line 118
} WIN32_FIND_DATAA, *PWIN32_FIND_DATAA, *LPWIN32_FIND_DATAA; 
#line 135
typedef 
#line 119
struct _WIN32_FIND_DATAW { 
#line 120
DWORD dwFileAttributes; 
#line 121
FILETIME ftCreationTime; 
#line 122
FILETIME ftLastAccessTime; 
#line 123
FILETIME ftLastWriteTime; 
#line 124
DWORD nFileSizeHigh; 
#line 125
DWORD nFileSizeLow; 
#line 126
DWORD dwReserved0; 
#line 127
DWORD dwReserved1; 
#line 128
WCHAR cFileName[260]; 
#line 129
WCHAR cAlternateFileName[14]; 
#line 135
} WIN32_FIND_DATAW, *PWIN32_FIND_DATAW, *LPWIN32_FIND_DATAW; 
#line 141
typedef WIN32_FIND_DATAA WIN32_FIND_DATA; 
#line 142
typedef PWIN32_FIND_DATAA PWIN32_FIND_DATA; 
#line 143
typedef LPWIN32_FIND_DATAA LPWIN32_FIND_DATA; 
#line 152 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\minwinbase.h"
typedef 
#line 148
enum _FINDEX_INFO_LEVELS { 
#line 149
FindExInfoStandard, 
#line 150
FindExInfoBasic, 
#line 151
FindExInfoMaxInfoLevel
#line 152
} FINDEX_INFO_LEVELS; 
#line 165 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\minwinbase.h"
typedef 
#line 160
enum _FINDEX_SEARCH_OPS { 
#line 161
FindExSearchNameMatch, 
#line 162
FindExSearchLimitToDirectories, 
#line 163
FindExSearchLimitToDevices, 
#line 164
FindExSearchMaxSearchOp
#line 165
} FINDEX_SEARCH_OPS; 
#line 173 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\minwinbase.h"
typedef 
#line 170
enum _READ_DIRECTORY_NOTIFY_INFORMATION_CLASS { 
#line 171
ReadDirectoryNotifyInformation = 1, 
#line 172
ReadDirectoryNotifyExtendedInformation
#line 173
} READ_DIRECTORY_NOTIFY_INFORMATION_CLASS, *PREAD_DIRECTORY_NOTIFY_INFORMATION_CLASS; 
#line 180 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\minwinbase.h"
typedef 
#line 177
enum _GET_FILEEX_INFO_LEVELS { 
#line 178
GetFileExInfoStandard, 
#line 179
GetFileExMaxInfoLevel
#line 180
} GET_FILEEX_INFO_LEVELS; 
#line 216 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\minwinbase.h"
typedef 
#line 183 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\minwinbase.h"
enum _FILE_INFO_BY_HANDLE_CLASS { 
#line 184
FileBasicInfo, 
#line 185
FileStandardInfo, 
#line 186
FileNameInfo, 
#line 187
FileRenameInfo, 
#line 188
FileDispositionInfo, 
#line 189
FileAllocationInfo, 
#line 190
FileEndOfFileInfo, 
#line 191
FileStreamInfo, 
#line 192
FileCompressionInfo, 
#line 193
FileAttributeTagInfo, 
#line 194
FileIdBothDirectoryInfo, 
#line 195
FileIdBothDirectoryRestartInfo, 
#line 196
FileIoPriorityHintInfo, 
#line 197
FileRemoteProtocolInfo, 
#line 198
FileFullDirectoryInfo, 
#line 199
FileFullDirectoryRestartInfo, 
#line 201
FileStorageInfo, 
#line 202
FileAlignmentInfo, 
#line 203
FileIdInfo, 
#line 204
FileIdExtdDirectoryInfo, 
#line 205
FileIdExtdDirectoryRestartInfo, 
#line 208 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\minwinbase.h"
FileDispositionInfoEx, 
#line 209
FileRenameInfoEx, 
#line 212 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\minwinbase.h"
FileCaseSensitiveInfo, 
#line 213
FileNormalizedNameInfo, 
#line 215 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\minwinbase.h"
MaximumFileInfoByHandleClass
#line 216
} FILE_INFO_BY_HANDLE_CLASS, *PFILE_INFO_BY_HANDLE_CLASS; 
#line 219 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\minwinbase.h"
typedef RTL_CRITICAL_SECTION CRITICAL_SECTION; 
#line 220
typedef PRTL_CRITICAL_SECTION PCRITICAL_SECTION; 
#line 221
typedef PRTL_CRITICAL_SECTION LPCRITICAL_SECTION; 
#line 223
typedef RTL_CRITICAL_SECTION_DEBUG CRITICAL_SECTION_DEBUG; 
#line 224
typedef PRTL_CRITICAL_SECTION_DEBUG PCRITICAL_SECTION_DEBUG; 
#line 225
typedef PRTL_CRITICAL_SECTION_DEBUG LPCRITICAL_SECTION_DEBUG; 
#line 229
typedef void (__stdcall *LPOVERLAPPED_COMPLETION_ROUTINE)(DWORD dwErrorCode, DWORD dwNumberOfBytesTransfered, LPOVERLAPPED lpOverlapped); 
#line 256
typedef 
#line 238
struct _PROCESS_HEAP_ENTRY { 
#line 239
PVOID lpData; 
#line 240
DWORD cbData; 
#line 241
BYTE cbOverhead; 
#line 242
BYTE iRegionIndex; 
#line 243
WORD wFlags; 
#line 244
union { 
#line 245
struct { 
#line 246
HANDLE hMem; 
#line 247
DWORD dwReserved[3]; 
#line 248
} Block; 
#line 249
struct { 
#line 250
DWORD dwCommittedSize; 
#line 251
DWORD dwUnCommittedSize; 
#line 252
LPVOID lpFirstBlock; 
#line 253
LPVOID lpLastBlock; 
#line 254
} Region; 
#line 255
}; 
#line 256
} PROCESS_HEAP_ENTRY, *LPPROCESS_HEAP_ENTRY, *PPROCESS_HEAP_ENTRY; 
#line 279
typedef 
#line 265
struct _REASON_CONTEXT { 
#line 266
ULONG Version; 
#line 267
DWORD Flags; 
#line 268
union { 
#line 269
struct { 
#line 270
HMODULE LocalizedReasonModule; 
#line 271
ULONG LocalizedReasonId; 
#line 272
ULONG ReasonStringCount; 
#line 273
LPWSTR *ReasonStrings; 
#line 275
} Detailed; 
#line 277
LPWSTR SimpleReasonString; 
#line 278
} Reason; 
#line 279
} REASON_CONTEXT, *PREASON_CONTEXT; 
#line 294
typedef DWORD (__stdcall *PTHREAD_START_ROUTINE)(LPVOID lpThreadParameter); 
#line 297
typedef PTHREAD_START_ROUTINE LPTHREAD_START_ROUTINE; 
#line 299
typedef LPVOID (__stdcall *PENCLAVE_ROUTINE)(LPVOID lpThreadParameter); 
#line 302
typedef PENCLAVE_ROUTINE LPENCLAVE_ROUTINE; 
#line 307
typedef 
#line 304
struct _EXCEPTION_DEBUG_INFO { 
#line 305
EXCEPTION_RECORD ExceptionRecord; 
#line 306
DWORD dwFirstChance; 
#line 307
} EXCEPTION_DEBUG_INFO, *LPEXCEPTION_DEBUG_INFO; 
#line 313
typedef 
#line 309
struct _CREATE_THREAD_DEBUG_INFO { 
#line 310
HANDLE hThread; 
#line 311
LPVOID lpThreadLocalBase; 
#line 312
LPTHREAD_START_ROUTINE lpStartAddress; 
#line 313
} CREATE_THREAD_DEBUG_INFO, *LPCREATE_THREAD_DEBUG_INFO; 
#line 326
typedef 
#line 315
struct _CREATE_PROCESS_DEBUG_INFO { 
#line 316
HANDLE hFile; 
#line 317
HANDLE hProcess; 
#line 318
HANDLE hThread; 
#line 319
LPVOID lpBaseOfImage; 
#line 320
DWORD dwDebugInfoFileOffset; 
#line 321
DWORD nDebugInfoSize; 
#line 322
LPVOID lpThreadLocalBase; 
#line 323
LPTHREAD_START_ROUTINE lpStartAddress; 
#line 324
LPVOID lpImageName; 
#line 325
WORD fUnicode; 
#line 326
} CREATE_PROCESS_DEBUG_INFO, *LPCREATE_PROCESS_DEBUG_INFO; 
#line 330
typedef 
#line 328
struct _EXIT_THREAD_DEBUG_INFO { 
#line 329
DWORD dwExitCode; 
#line 330
} EXIT_THREAD_DEBUG_INFO, *LPEXIT_THREAD_DEBUG_INFO; 
#line 334
typedef 
#line 332
struct _EXIT_PROCESS_DEBUG_INFO { 
#line 333
DWORD dwExitCode; 
#line 334
} EXIT_PROCESS_DEBUG_INFO, *LPEXIT_PROCESS_DEBUG_INFO; 
#line 343
typedef 
#line 336
struct _LOAD_DLL_DEBUG_INFO { 
#line 337
HANDLE hFile; 
#line 338
LPVOID lpBaseOfDll; 
#line 339
DWORD dwDebugInfoFileOffset; 
#line 340
DWORD nDebugInfoSize; 
#line 341
LPVOID lpImageName; 
#line 342
WORD fUnicode; 
#line 343
} LOAD_DLL_DEBUG_INFO, *LPLOAD_DLL_DEBUG_INFO; 
#line 347
typedef 
#line 345
struct _UNLOAD_DLL_DEBUG_INFO { 
#line 346
LPVOID lpBaseOfDll; 
#line 347
} UNLOAD_DLL_DEBUG_INFO, *LPUNLOAD_DLL_DEBUG_INFO; 
#line 353
typedef 
#line 349
struct _OUTPUT_DEBUG_STRING_INFO { 
#line 350
LPSTR lpDebugStringData; 
#line 351
WORD fUnicode; 
#line 352
WORD nDebugStringLength; 
#line 353
} OUTPUT_DEBUG_STRING_INFO, *LPOUTPUT_DEBUG_STRING_INFO; 
#line 358
typedef 
#line 355
struct _RIP_INFO { 
#line 356
DWORD dwError; 
#line 357
DWORD dwType; 
#line 358
} RIP_INFO, *LPRIP_INFO; 
#line 376
typedef 
#line 361
struct _DEBUG_EVENT { 
#line 362
DWORD dwDebugEventCode; 
#line 363
DWORD dwProcessId; 
#line 364
DWORD dwThreadId; 
#line 365
union { 
#line 366
EXCEPTION_DEBUG_INFO Exception; 
#line 367
CREATE_THREAD_DEBUG_INFO CreateThread; 
#line 368
CREATE_PROCESS_DEBUG_INFO CreateProcessInfo; 
#line 369
EXIT_THREAD_DEBUG_INFO ExitThread; 
#line 370
EXIT_PROCESS_DEBUG_INFO ExitProcess; 
#line 371
LOAD_DLL_DEBUG_INFO LoadDll; 
#line 372
UNLOAD_DLL_DEBUG_INFO UnloadDll; 
#line 373
OUTPUT_DEBUG_STRING_INFO DebugString; 
#line 374
RIP_INFO RipInfo; 
#line 375
} u; 
#line 376
} DEBUG_EVENT, *LPDEBUG_EVENT; 
#line 384
typedef PCONTEXT LPCONTEXT; 
#line 448 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\minwinbase.h"
}
#line 455 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\minwinbase.h"
#pragma warning(pop)
#line 28 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\apiquery2.h"
extern "C" {
#line 31 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\apiquery2.h"
#pragma region Desktop Family or OneCore Family
#line 37
BOOL __stdcall IsApiSetImplemented(PCSTR Contract); 
#line 45 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\apiquery2.h"
}
#line 42
#pragma endregion
#line 22 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\processenv.h"
extern "C" {
#line 25 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\processenv.h"
#pragma region Application Family or OneCore Family or Games Family
#line 28
__declspec(dllimport) BOOL __stdcall 
#line 31
SetEnvironmentStringsW(LPWCH NewEnvironment); 
#line 39 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\processenv.h"
#pragma endregion
#line 41
#pragma region PC Family or OneCore Family or Games Family
#line 44
__declspec(dllimport) HANDLE __stdcall 
#line 47
GetStdHandle(DWORD nStdHandle); 
#line 51
__declspec(dllimport) BOOL __stdcall 
#line 54
SetStdHandle(DWORD nStdHandle, HANDLE hHandle); 
#line 61
__declspec(dllimport) BOOL __stdcall 
#line 64
SetStdHandleEx(DWORD nStdHandle, HANDLE hHandle, PHANDLE phPrevValue); 
#line 73 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\processenv.h"
#pragma endregion
#line 75
#pragma region Application Family or OneCore Family or Games Family
#line 78
__declspec(dllimport) LPSTR __stdcall 
#line 81
GetCommandLineA(); 
#line 85
__declspec(dllimport) LPWSTR __stdcall 
#line 88
GetCommandLineW(); 
#line 97 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\processenv.h"
__declspec(dllimport) LPCH __stdcall 
#line 101
GetEnvironmentStrings(); 
#line 105
__declspec(dllimport) LPWCH __stdcall 
#line 109
GetEnvironmentStringsW(); 
#line 119 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\processenv.h"
__declspec(dllimport) BOOL __stdcall 
#line 122
FreeEnvironmentStringsA(LPCH penv); 
#line 126
__declspec(dllimport) BOOL __stdcall 
#line 129
FreeEnvironmentStringsW(LPWCH penv); 
#line 138 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\processenv.h"
__declspec(dllimport) DWORD __stdcall 
#line 142
GetEnvironmentVariableA(LPCSTR lpName, LPSTR lpBuffer, DWORD nSize); 
#line 148
__declspec(dllimport) DWORD __stdcall 
#line 152
GetEnvironmentVariableW(LPCWSTR lpName, LPWSTR lpBuffer, DWORD nSize); 
#line 163 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\processenv.h"
__declspec(dllimport) BOOL __stdcall 
#line 166
SetEnvironmentVariableA(LPCSTR lpName, LPCSTR lpValue); 
#line 171
__declspec(dllimport) BOOL __stdcall 
#line 174
SetEnvironmentVariableW(LPCWSTR lpName, LPCWSTR lpValue); 
#line 184 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\processenv.h"
__declspec(dllimport) DWORD __stdcall 
#line 188
ExpandEnvironmentStringsA(LPCSTR lpSrc, LPSTR lpDst, DWORD nSize); 
#line 194
__declspec(dllimport) DWORD __stdcall 
#line 198
ExpandEnvironmentStringsW(LPCWSTR lpSrc, LPWSTR lpDst, DWORD nSize); 
#line 209 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\processenv.h"
__declspec(dllimport) BOOL __stdcall 
#line 212
SetCurrentDirectoryA(LPCSTR lpPathName); 
#line 216
__declspec(dllimport) BOOL __stdcall 
#line 219
SetCurrentDirectoryW(LPCWSTR lpPathName); 
#line 228 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\processenv.h"
__declspec(dllimport) DWORD __stdcall 
#line 232
GetCurrentDirectoryA(DWORD nBufferLength, LPSTR lpBuffer); 
#line 237
__declspec(dllimport) DWORD __stdcall 
#line 241
GetCurrentDirectoryW(DWORD nBufferLength, LPWSTR lpBuffer); 
#line 252 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\processenv.h"
#pragma endregion
#line 254
#pragma region Desktop Family or OneCore Family or Games Family
#line 257
__declspec(dllimport) DWORD __stdcall 
#line 260
SearchPathW(LPCWSTR lpPath, LPCWSTR lpFileName, LPCWSTR lpExtension, DWORD nBufferLength, LPWSTR lpBuffer, LPWSTR * lpFilePart); 
#line 275 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\processenv.h"
__declspec(dllimport) DWORD __stdcall 
#line 278
SearchPathA(LPCSTR lpPath, LPCSTR lpFileName, LPCSTR lpExtension, DWORD nBufferLength, LPSTR lpBuffer, LPSTR * lpFilePart); 
#line 289 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\processenv.h"
#pragma region Desktop Family or OneCore Family
#line 294
__declspec(dllimport) BOOL __stdcall 
#line 297
NeedCurrentDirectoryForExePathA(LPCSTR ExeName); 
#line 301
__declspec(dllimport) BOOL __stdcall 
#line 304
NeedCurrentDirectoryForExePathW(LPCWSTR ExeName); 
#line 319 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\processenv.h"
}
#line 316
#pragma endregion
#line 22 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\fileapi.h"
extern "C" {
#line 25 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\fileapi.h"
#pragma region Application Family or OneCore Family or Games Family
#line 41
__declspec(dllimport) LONG __stdcall 
#line 44
CompareFileTime(const FILETIME * lpFileTime1, const FILETIME * lpFileTime2); 
#line 49
__declspec(dllimport) BOOL __stdcall 
#line 52
CreateDirectoryA(LPCSTR lpPathName, LPSECURITY_ATTRIBUTES lpSecurityAttributes); 
#line 57
__declspec(dllimport) BOOL __stdcall 
#line 60
CreateDirectoryW(LPCWSTR lpPathName, LPSECURITY_ATTRIBUTES lpSecurityAttributes); 
#line 71 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\fileapi.h"
#pragma endregion
#line 73
#pragma region Desktop Family or OneCore Family or Games Family
#line 76
__declspec(dllimport) HANDLE __stdcall 
#line 79
CreateFileA(LPCSTR lpFileName, DWORD dwDesiredAccess, DWORD dwShareMode, LPSECURITY_ATTRIBUTES lpSecurityAttributes, DWORD dwCreationDisposition, DWORD dwFlagsAndAttributes, HANDLE hTemplateFile); 
#line 89
__declspec(dllimport) HANDLE __stdcall 
#line 92
CreateFileW(LPCWSTR lpFileName, DWORD dwDesiredAccess, DWORD dwShareMode, LPSECURITY_ATTRIBUTES lpSecurityAttributes, DWORD dwCreationDisposition, DWORD dwFlagsAndAttributes, HANDLE hTemplateFile); 
#line 108 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\fileapi.h"
#pragma endregion
#line 110
#pragma region Desktop Family or OneCore Family
#line 113
__declspec(dllimport) BOOL __stdcall 
#line 116
DefineDosDeviceW(DWORD dwFlags, LPCWSTR lpDeviceName, LPCWSTR lpTargetPath); 
#line 127 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\fileapi.h"
#pragma endregion
#line 129
#pragma region Application Family or OneCore Family or Games Family
#line 132
__declspec(dllimport) BOOL __stdcall 
#line 135
DeleteFileA(LPCSTR lpFileName); 
#line 139
__declspec(dllimport) BOOL __stdcall 
#line 142
DeleteFileW(LPCWSTR lpFileName); 
#line 152 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\fileapi.h"
#pragma endregion
#line 154
#pragma region Application Family or OneCore Family
#line 157
__declspec(dllimport) BOOL __stdcall 
#line 160
DeleteVolumeMountPointW(LPCWSTR lpszVolumeMountPoint); 
#line 169 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\fileapi.h"
#pragma endregion
#line 171
#pragma region Application Family or OneCore Family or Games Family
#line 174
__declspec(dllimport) BOOL __stdcall 
#line 177
FileTimeToLocalFileTime(const FILETIME * lpFileTime, LPFILETIME lpLocalFileTime); 
#line 183 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\fileapi.h"
#pragma endregion
#line 185
#pragma region Application Family or OneCore Family or Games Family
#line 188
__declspec(dllimport) BOOL __stdcall 
#line 191
FindClose(HANDLE hFindFile); 
#line 196 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\fileapi.h"
#pragma endregion
#line 198
#pragma region Application Family or OneCore Family
#line 201
__declspec(dllimport) BOOL __stdcall 
#line 204
FindCloseChangeNotification(HANDLE hChangeHandle); 
#line 208
__declspec(dllimport) HANDLE __stdcall 
#line 211
FindFirstChangeNotificationA(LPCSTR lpPathName, BOOL bWatchSubtree, DWORD dwNotifyFilter); 
#line 217
__declspec(dllimport) HANDLE __stdcall 
#line 220
FindFirstChangeNotificationW(LPCWSTR lpPathName, BOOL bWatchSubtree, DWORD dwNotifyFilter); 
#line 232 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\fileapi.h"
#pragma endregion
#line 234
#pragma region Application Family or OneCore Family or Games Family
#line 237
__declspec(dllimport) HANDLE __stdcall 
#line 240
FindFirstFileA(LPCSTR lpFileName, LPWIN32_FIND_DATAA lpFindFileData); 
#line 245
__declspec(dllimport) HANDLE __stdcall 
#line 248
FindFirstFileW(LPCWSTR lpFileName, LPWIN32_FIND_DATAW lpFindFileData); 
#line 260 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\fileapi.h"
__declspec(dllimport) HANDLE __stdcall 
#line 263
FindFirstFileExA(LPCSTR lpFileName, FINDEX_INFO_LEVELS fInfoLevelId, LPVOID lpFindFileData, FINDEX_SEARCH_OPS fSearchOp, LPVOID lpSearchFilter, DWORD dwAdditionalFlags); 
#line 272
__declspec(dllimport) HANDLE __stdcall 
#line 275
FindFirstFileExW(LPCWSTR lpFileName, FINDEX_INFO_LEVELS fInfoLevelId, LPVOID lpFindFileData, FINDEX_SEARCH_OPS fSearchOp, LPVOID lpSearchFilter, DWORD dwAdditionalFlags); 
#line 292 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\fileapi.h"
#pragma endregion
#line 294
#pragma region Application Family or OneCore Family
#line 297
__declspec(dllimport) HANDLE __stdcall 
#line 300
FindFirstVolumeW(LPWSTR lpszVolumeName, DWORD cchBufferLength); 
#line 309
__declspec(dllimport) BOOL __stdcall 
#line 312
FindNextChangeNotification(HANDLE hChangeHandle); 
#line 317 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\fileapi.h"
#pragma endregion
#line 319
#pragma region Application Family or OneCore Family or Games Family
#line 322
__declspec(dllimport) BOOL __stdcall 
#line 325
FindNextFileA(HANDLE hFindFile, LPWIN32_FIND_DATAA lpFindFileData); 
#line 330
__declspec(dllimport) BOOL __stdcall 
#line 333
FindNextFileW(HANDLE hFindFile, LPWIN32_FIND_DATAW lpFindFileData); 
#line 344 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\fileapi.h"
#pragma endregion
#line 346
#pragma region Application Family or OneCore Family
#line 349
__declspec(dllimport) BOOL __stdcall 
#line 352
FindNextVolumeW(HANDLE hFindVolume, LPWSTR lpszVolumeName, DWORD cchBufferLength); 
#line 362
__declspec(dllimport) BOOL __stdcall 
#line 365
FindVolumeClose(HANDLE hFindVolume); 
#line 370 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\fileapi.h"
#pragma endregion
#line 372
#pragma region Application Family or OneCore Family or Games Family
#line 375
__declspec(dllimport) BOOL __stdcall 
#line 378
FlushFileBuffers(HANDLE hFile); 
#line 382
__declspec(dllimport) BOOL __stdcall 
#line 385
GetDiskFreeSpaceA(LPCSTR lpRootPathName, LPDWORD lpSectorsPerCluster, LPDWORD lpBytesPerSector, LPDWORD lpNumberOfFreeClusters, LPDWORD lpTotalNumberOfClusters); 
#line 393
__declspec(dllimport) BOOL __stdcall 
#line 396
GetDiskFreeSpaceW(LPCWSTR lpRootPathName, LPDWORD lpSectorsPerCluster, LPDWORD lpBytesPerSector, LPDWORD lpNumberOfFreeClusters, LPDWORD lpTotalNumberOfClusters); 
#line 409 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\fileapi.h"
__declspec(dllimport) BOOL __stdcall 
#line 412
GetDiskFreeSpaceExA(LPCSTR lpDirectoryName, PULARGE_INTEGER lpFreeBytesAvailableToCaller, PULARGE_INTEGER lpTotalNumberOfBytes, PULARGE_INTEGER lpTotalNumberOfFreeBytes); 
#line 419
__declspec(dllimport) BOOL __stdcall 
#line 422
GetDiskFreeSpaceExW(LPCWSTR lpDirectoryName, PULARGE_INTEGER lpFreeBytesAvailableToCaller, PULARGE_INTEGER lpTotalNumberOfBytes, PULARGE_INTEGER lpTotalNumberOfFreeBytes); 
#line 435 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\fileapi.h"
#pragma endregion
#line 437
#pragma region Application Family or OneCore Family
#line 529
typedef 
#line 445
struct DISK_SPACE_INFORMATION { 
#line 466
ULONGLONG ActualTotalAllocationUnits; 
#line 467
ULONGLONG ActualAvailableAllocationUnits; 
#line 468
ULONGLONG ActualPoolUnavailableAllocationUnits; 
#line 482
ULONGLONG CallerTotalAllocationUnits; 
#line 483
ULONGLONG CallerAvailableAllocationUnits; 
#line 484
ULONGLONG CallerPoolUnavailableAllocationUnits; 
#line 490
ULONGLONG UsedAllocationUnits; 
#line 496
ULONGLONG TotalReservedAllocationUnits; 
#line 503
ULONGLONG VolumeStorageReserveAllocationUnits; 
#line 517
ULONGLONG AvailableCommittedAllocationUnits; 
#line 524
ULONGLONG PoolAvailableAllocationUnits; 
#line 526
DWORD SectorsPerAllocationUnit; 
#line 527
DWORD BytesPerSector; 
#line 529
} DISK_SPACE_INFORMATION; 
#line 531
__declspec(dllimport) HRESULT __stdcall 
#line 534
GetDiskSpaceInformationA(LPCSTR rootPath, DISK_SPACE_INFORMATION * diskSpaceInfo); 
#line 539
__declspec(dllimport) HRESULT __stdcall 
#line 542
GetDiskSpaceInformationW(LPCWSTR rootPath, DISK_SPACE_INFORMATION * diskSpaceInfo); 
#line 553 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\fileapi.h"
#pragma endregion
#line 555
#pragma region Application Family or OneCore Family or Games Family
#line 558
__declspec(dllimport) UINT __stdcall 
#line 561
GetDriveTypeA(LPCSTR lpRootPathName); 
#line 565
__declspec(dllimport) UINT __stdcall 
#line 568
GetDriveTypeW(LPCWSTR lpRootPathName); 
#line 584 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\fileapi.h"
typedef 
#line 577
struct _WIN32_FILE_ATTRIBUTE_DATA { 
#line 578
DWORD dwFileAttributes; 
#line 579
FILETIME ftCreationTime; 
#line 580
FILETIME ftLastAccessTime; 
#line 581
FILETIME ftLastWriteTime; 
#line 582
DWORD nFileSizeHigh; 
#line 583
DWORD nFileSizeLow; 
#line 584
} WIN32_FILE_ATTRIBUTE_DATA, *LPWIN32_FILE_ATTRIBUTE_DATA; 
#line 586
__declspec(dllimport) DWORD __stdcall 
#line 589
GetFileAttributesA(LPCSTR lpFileName); 
#line 593
__declspec(dllimport) DWORD __stdcall 
#line 596
GetFileAttributesW(LPCWSTR lpFileName); 
#line 605 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\fileapi.h"
__declspec(dllimport) BOOL __stdcall 
#line 608
GetFileAttributesExA(LPCSTR lpFileName, GET_FILEEX_INFO_LEVELS fInfoLevelId, LPVOID lpFileInformation); 
#line 614
__declspec(dllimport) BOOL __stdcall 
#line 617
GetFileAttributesExW(LPCWSTR lpFileName, GET_FILEEX_INFO_LEVELS fInfoLevelId, LPVOID lpFileInformation); 
#line 639 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\fileapi.h"
typedef 
#line 628
struct _BY_HANDLE_FILE_INFORMATION { 
#line 629
DWORD dwFileAttributes; 
#line 630
FILETIME ftCreationTime; 
#line 631
FILETIME ftLastAccessTime; 
#line 632
FILETIME ftLastWriteTime; 
#line 633
DWORD dwVolumeSerialNumber; 
#line 634
DWORD nFileSizeHigh; 
#line 635
DWORD nFileSizeLow; 
#line 636
DWORD nNumberOfLinks; 
#line 637
DWORD nFileIndexHigh; 
#line 638
DWORD nFileIndexLow; 
#line 639
} BY_HANDLE_FILE_INFORMATION, *PBY_HANDLE_FILE_INFORMATION, *LPBY_HANDLE_FILE_INFORMATION; 
#line 641
__declspec(dllimport) BOOL __stdcall 
#line 644
GetFileInformationByHandle(HANDLE hFile, LPBY_HANDLE_FILE_INFORMATION lpFileInformation); 
#line 650 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\fileapi.h"
#pragma endregion
#line 652
#pragma region Desktop Family or OneCore Family or Games Family
#line 655
__declspec(dllimport) DWORD __stdcall 
#line 658
GetFileSize(HANDLE hFile, LPDWORD lpFileSizeHigh); 
#line 664 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\fileapi.h"
#pragma endregion
#line 666
#pragma region Application Family or Games Family
#line 669
__declspec(dllimport) BOOL __stdcall 
#line 672
GetFileSizeEx(HANDLE hFile, PLARGE_INTEGER lpFileSize); 
#line 677
__declspec(dllimport) DWORD __stdcall 
#line 680
GetFileType(HANDLE hFile); 
#line 686
__declspec(dllimport) DWORD __stdcall 
#line 689
GetFinalPathNameByHandleA(HANDLE hFile, LPSTR lpszFilePath, DWORD cchFilePath, DWORD dwFlags); 
#line 696
__declspec(dllimport) DWORD __stdcall 
#line 699
GetFinalPathNameByHandleW(HANDLE hFile, LPWSTR lpszFilePath, DWORD cchFilePath, DWORD dwFlags); 
#line 713 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\fileapi.h"
__declspec(dllimport) BOOL __stdcall 
#line 716
GetFileTime(HANDLE hFile, LPFILETIME lpCreationTime, LPFILETIME lpLastAccessTime, LPFILETIME lpLastWriteTime); 
#line 723
__declspec(dllimport) DWORD __stdcall 
#line 727
GetFullPathNameW(LPCWSTR lpFileName, DWORD nBufferLength, LPWSTR lpBuffer, LPWSTR * lpFilePart); 
#line 738
__declspec(dllimport) DWORD __stdcall 
#line 742
GetFullPathNameA(LPCSTR lpFileName, DWORD nBufferLength, LPSTR lpBuffer, LPSTR * lpFilePart); 
#line 753 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\fileapi.h"
__declspec(dllimport) DWORD __stdcall 
#line 756
GetLogicalDrives(); 
#line 761 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\fileapi.h"
#pragma endregion
#line 763
#pragma region Desktop Family or OneCore Family
#line 766
__declspec(dllimport) DWORD __stdcall 
#line 769
GetLogicalDriveStringsW(DWORD nBufferLength, LPWSTR lpBuffer); 
#line 779 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\fileapi.h"
#pragma endregion
#line 781
#pragma region Application Family or OneCore Family
#line 784
__declspec(dllimport) DWORD __stdcall 
#line 788
GetLongPathNameA(LPCSTR lpszShortPath, LPSTR lpszLongPath, DWORD cchBuffer); 
#line 798 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\fileapi.h"
__declspec(dllimport) DWORD __stdcall 
#line 802
GetLongPathNameW(LPCWSTR lpszShortPath, LPWSTR lpszLongPath, DWORD cchBuffer); 
#line 813 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\fileapi.h"
#pragma endregion
#line 815
#pragma region Desktop Family or OneCore Family
#line 820
__declspec(dllimport) BOOL __stdcall 
#line 823
AreShortNamesEnabled(HANDLE Handle, BOOL * Enabled); 
#line 830 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\fileapi.h"
__declspec(dllimport) DWORD __stdcall 
#line 834
GetShortPathNameW(LPCWSTR lpszLongPath, LPWSTR lpszShortPath, DWORD cchBuffer); 
#line 845 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\fileapi.h"
#pragma endregion
#line 847
#pragma region Application Family or OneCore Family
#line 850
__declspec(dllimport) UINT __stdcall 
#line 853
GetTempFileNameW(LPCWSTR lpPathName, LPCWSTR lpPrefixString, UINT uUnique, LPWSTR lpTempFileName); 
#line 865 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\fileapi.h"
#pragma endregion
#line 867
#pragma region Application Family or OneCore Family or Games Family
#line 872
__declspec(dllimport) BOOL __stdcall 
#line 875
GetVolumeInformationByHandleW(HANDLE hFile, LPWSTR lpVolumeNameBuffer, DWORD nVolumeNameSize, LPDWORD lpVolumeSerialNumber, LPDWORD lpMaximumComponentLength, LPDWORD lpFileSystemFlags, LPWSTR lpFileSystemNameBuffer, DWORD nFileSystemNameSize); 
#line 888 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\fileapi.h"
__declspec(dllimport) BOOL __stdcall 
#line 891
GetVolumeInformationW(LPCWSTR lpRootPathName, LPWSTR lpVolumeNameBuffer, DWORD nVolumeNameSize, LPDWORD lpVolumeSerialNumber, LPDWORD lpMaximumComponentLength, LPDWORD lpFileSystemFlags, LPWSTR lpFileSystemNameBuffer, DWORD nFileSystemNameSize); 
#line 906
__declspec(dllimport) BOOL __stdcall 
#line 909
GetVolumePathNameW(LPCWSTR lpszFileName, LPWSTR lpszVolumePathName, DWORD cchBufferLength); 
#line 919
__declspec(dllimport) BOOL __stdcall 
#line 922
LocalFileTimeToFileTime(const FILETIME * lpLocalFileTime, LPFILETIME lpFileTime); 
#line 927
__declspec(dllimport) BOOL __stdcall 
#line 930
LockFile(HANDLE hFile, DWORD dwFileOffsetLow, DWORD dwFileOffsetHigh, DWORD nNumberOfBytesToLockLow, DWORD nNumberOfBytesToLockHigh); 
#line 938
__declspec(dllimport) BOOL __stdcall 
#line 941
LockFileEx(HANDLE hFile, DWORD dwFlags, DWORD dwReserved, DWORD nNumberOfBytesToLockLow, DWORD nNumberOfBytesToLockHigh, LPOVERLAPPED lpOverlapped); 
#line 951 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\fileapi.h"
#pragma endregion
#line 953
#pragma region Desktop Family or OneCore Family
#line 956
__declspec(dllimport) DWORD __stdcall 
#line 959
QueryDosDeviceW(LPCWSTR lpDeviceName, LPWSTR lpTargetPath, DWORD ucchMax); 
#line 970 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\fileapi.h"
#pragma endregion
#line 972
#pragma region Application Family or OneCore Family or Games Family
#line 975
__declspec(dllimport) BOOL __stdcall 
#line 979
ReadFile(HANDLE hFile, LPVOID lpBuffer, DWORD nNumberOfBytesToRead, LPDWORD lpNumberOfBytesRead, LPOVERLAPPED lpOverlapped); 
#line 987
__declspec(dllimport) BOOL __stdcall 
#line 991
ReadFileEx(HANDLE hFile, LPVOID lpBuffer, DWORD nNumberOfBytesToRead, LPOVERLAPPED lpOverlapped, LPOVERLAPPED_COMPLETION_ROUTINE lpCompletionRoutine); 
#line 999
__declspec(dllimport) BOOL __stdcall 
#line 1003
ReadFileScatter(HANDLE hFile, FILE_SEGMENT_ELEMENT  aSegmentArray[], DWORD nNumberOfBytesToRead, LPDWORD lpReserved, LPOVERLAPPED lpOverlapped); 
#line 1011
__declspec(dllimport) BOOL __stdcall 
#line 1014
RemoveDirectoryA(LPCSTR lpPathName); 
#line 1018
__declspec(dllimport) BOOL __stdcall 
#line 1021
RemoveDirectoryW(LPCWSTR lpPathName); 
#line 1030 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\fileapi.h"
__declspec(dllimport) BOOL __stdcall 
#line 1033
SetEndOfFile(HANDLE hFile); 
#line 1037
__declspec(dllimport) BOOL __stdcall 
#line 1040
SetFileAttributesA(LPCSTR lpFileName, DWORD dwFileAttributes); 
#line 1045
__declspec(dllimport) BOOL __stdcall 
#line 1048
SetFileAttributesW(LPCWSTR lpFileName, DWORD dwFileAttributes); 
#line 1060 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\fileapi.h"
__declspec(dllimport) BOOL __stdcall 
#line 1063
SetFileInformationByHandle(HANDLE hFile, FILE_INFO_BY_HANDLE_CLASS FileInformationClass, LPVOID lpFileInformation, DWORD dwBufferSize); 
#line 1072 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\fileapi.h"
__declspec(dllimport) DWORD __stdcall 
#line 1075
SetFilePointer(HANDLE hFile, LONG lDistanceToMove, PLONG lpDistanceToMoveHigh, DWORD dwMoveMethod); 
#line 1082
__declspec(dllimport) BOOL __stdcall 
#line 1085
SetFilePointerEx(HANDLE hFile, LARGE_INTEGER liDistanceToMove, PLARGE_INTEGER lpNewFilePointer, DWORD dwMoveMethod); 
#line 1092
__declspec(dllimport) BOOL __stdcall 
#line 1095
SetFileTime(HANDLE hFile, const FILETIME * lpCreationTime, const FILETIME * lpLastAccessTime, const FILETIME * lpLastWriteTime); 
#line 1104
__declspec(dllimport) BOOL __stdcall 
#line 1107
SetFileValidData(HANDLE hFile, LONGLONG ValidDataLength); 
#line 1114 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\fileapi.h"
__declspec(dllimport) BOOL __stdcall 
#line 1117
UnlockFile(HANDLE hFile, DWORD dwFileOffsetLow, DWORD dwFileOffsetHigh, DWORD nNumberOfBytesToUnlockLow, DWORD nNumberOfBytesToUnlockHigh); 
#line 1125
__declspec(dllimport) BOOL __stdcall 
#line 1128
UnlockFileEx(HANDLE hFile, DWORD dwReserved, DWORD nNumberOfBytesToUnlockLow, DWORD nNumberOfBytesToUnlockHigh, LPOVERLAPPED lpOverlapped); 
#line 1136
__declspec(dllimport) BOOL __stdcall 
#line 1139
WriteFile(HANDLE hFile, LPCVOID lpBuffer, DWORD nNumberOfBytesToWrite, LPDWORD lpNumberOfBytesWritten, LPOVERLAPPED lpOverlapped); 
#line 1147
__declspec(dllimport) BOOL __stdcall 
#line 1150
WriteFileEx(HANDLE hFile, LPCVOID lpBuffer, DWORD nNumberOfBytesToWrite, LPOVERLAPPED lpOverlapped, LPOVERLAPPED_COMPLETION_ROUTINE lpCompletionRoutine); 
#line 1158
__declspec(dllimport) BOOL __stdcall 
#line 1161
WriteFileGather(HANDLE hFile, FILE_SEGMENT_ELEMENT  aSegmentArray[], DWORD nNumberOfBytesToWrite, LPDWORD lpReserved, LPOVERLAPPED lpOverlapped); 
#line 1169
__declspec(dllimport) DWORD __stdcall 
#line 1172
GetTempPathW(DWORD nBufferLength, LPWSTR lpBuffer); 
#line 1182 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\fileapi.h"
#pragma endregion
#line 1184
#pragma region Application Family or OneCore Family
#line 1187
__declspec(dllimport) BOOL __stdcall 
#line 1190
GetVolumeNameForVolumeMountPointW(LPCWSTR lpszVolumeMountPoint, LPWSTR lpszVolumeName, DWORD cchBufferLength); 
#line 1201 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\fileapi.h"
#pragma endregion
#line 1203
#pragma region Desktop Family or OneCore Family
#line 1208
__declspec(dllimport) BOOL __stdcall 
#line 1211
GetVolumePathNamesForVolumeNameW(LPCWSTR lpszVolumeName, LPWCH lpszVolumePathNames, DWORD cchBufferLength, PDWORD lpcchReturnLength); 
#line 1225 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\fileapi.h"
#pragma endregion
#line 1227
#pragma region Application Family or OneCore Family or Games Family
#line 1239
typedef 
#line 1232
struct _CREATEFILE2_EXTENDED_PARAMETERS { 
#line 1233
DWORD dwSize; 
#line 1234
DWORD dwFileAttributes; 
#line 1235
DWORD dwFileFlags; 
#line 1236
DWORD dwSecurityQosFlags; 
#line 1237
LPSECURITY_ATTRIBUTES lpSecurityAttributes; 
#line 1238
HANDLE hTemplateFile; 
#line 1239
} CREATEFILE2_EXTENDED_PARAMETERS, *PCREATEFILE2_EXTENDED_PARAMETERS, *LPCREATEFILE2_EXTENDED_PARAMETERS; 
#line 1241
__declspec(dllimport) HANDLE __stdcall 
#line 1244
CreateFile2(LPCWSTR lpFileName, DWORD dwDesiredAccess, DWORD dwShareMode, DWORD dwCreationDisposition, LPCREATEFILE2_EXTENDED_PARAMETERS pCreateExParams); 
#line 1255 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\fileapi.h"
#pragma endregion
#line 1257
#pragma region Desktop Family or OneCore Family
#line 1262
__declspec(dllimport) BOOL __stdcall 
#line 1265
SetFileIoOverlappedRange(HANDLE FileHandle, PUCHAR OverlappedRangeStart, ULONG Length); 
#line 1275 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\fileapi.h"
__declspec(dllimport) DWORD __stdcall 
#line 1278
GetCompressedFileSizeA(LPCSTR lpFileName, LPDWORD lpFileSizeHigh); 
#line 1283
__declspec(dllimport) DWORD __stdcall 
#line 1286
GetCompressedFileSizeW(LPCWSTR lpFileName, LPDWORD lpFileSizeHigh); 
#line 1305 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\fileapi.h"
typedef 
#line 1300
enum _STREAM_INFO_LEVELS { 
#line 1302
FindStreamInfoStandard, 
#line 1303
FindStreamInfoMaxInfoLevel
#line 1305
} STREAM_INFO_LEVELS; 
#line 1312
typedef 
#line 1307
struct _WIN32_FIND_STREAM_DATA { 
#line 1309
LARGE_INTEGER StreamSize; 
#line 1310
WCHAR cStreamName[260 + 36]; 
#line 1312
} WIN32_FIND_STREAM_DATA, *PWIN32_FIND_STREAM_DATA; 
#line 1314
__declspec(dllimport) HANDLE __stdcall 
#line 1317
FindFirstStreamW(LPCWSTR lpFileName, STREAM_INFO_LEVELS InfoLevel, LPVOID lpFindStreamData, DWORD dwFlags); 
#line 1324
__declspec(dllimport) BOOL __stdcall 
#line 1327
FindNextStreamW(HANDLE hFindStream, LPVOID lpFindStreamData); 
#line 1335 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\fileapi.h"
#pragma endregion
#line 1337
#pragma region Desktop Family or OneCore Family or Games Family
#line 1340
__declspec(dllimport) BOOL __stdcall 
#line 1343
AreFileApisANSI(); 
#line 1348 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\fileapi.h"
#pragma endregion
#line 1350
#pragma region Application Family or OneCore Family or Games Family
#line 1353
__declspec(dllimport) DWORD __stdcall 
#line 1356
GetTempPathA(DWORD nBufferLength, LPSTR lpBuffer); 
#line 1366 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\fileapi.h"
#pragma endregion
#line 1368
#pragma region Desktop Family or OneCore Family
#line 1373
__declspec(dllimport) HANDLE __stdcall 
#line 1376
FindFirstFileNameW(LPCWSTR lpFileName, DWORD dwFlags, LPDWORD StringLength, PWSTR LinkName); 
#line 1383
__declspec(dllimport) BOOL __stdcall 
#line 1386
FindNextFileNameW(HANDLE hFindStream, LPDWORD StringLength, PWSTR LinkName); 
#line 1395 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\fileapi.h"
#pragma endregion
#line 1397
#pragma region Application Family or OneCore Family or Games Family
#line 1400
__declspec(dllimport) BOOL __stdcall 
#line 1403
GetVolumeInformationA(LPCSTR lpRootPathName, LPSTR lpVolumeNameBuffer, DWORD nVolumeNameSize, LPDWORD lpVolumeSerialNumber, LPDWORD lpMaximumComponentLength, LPDWORD lpFileSystemFlags, LPSTR lpFileSystemNameBuffer, DWORD nFileSystemNameSize); 
#line 1419 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\fileapi.h"
#pragma endregion
#line 1421
#pragma region Application Family or OneCore Family
#line 1424
__declspec(dllimport) UINT __stdcall 
#line 1427
GetTempFileNameA(LPCSTR lpPathName, LPCSTR lpPrefixString, UINT uUnique, LPSTR lpTempFileName); 
#line 1438 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\fileapi.h"
#pragma endregion
#line 1440
#pragma region Desktop Family or OneCore Family
#line 1443
__declspec(dllimport) void __stdcall 
#line 1446
SetFileApisToOEM(); 
#line 1450
__declspec(dllimport) void __stdcall 
#line 1453
SetFileApisToANSI(); 
#line 1458 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\fileapi.h"
#pragma endregion
#line 1460
#pragma region Application Family or OneCore Family or Games Family
#line 1465
__declspec(dllimport) DWORD __stdcall 
#line 1469
GetTempPath2W(DWORD BufferLength, LPWSTR Buffer); 
#line 1478
__declspec(dllimport) DWORD __stdcall 
#line 1482
GetTempPath2A(DWORD BufferLength, LPSTR Buffer); 
#line 1497 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\fileapi.h"
}
#line 1494
#pragma endregion
#line 23 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\fileapifromapp.h"
extern "C" {
#line 26 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\fileapifromapp.h"
#pragma region Application Family
#line 30
__declspec(dllimport) BOOL __stdcall 
#line 33
CopyFileFromAppW(LPCWSTR lpExistingFileName, LPCWSTR lpNewFileName, BOOL bFailIfExists) noexcept; 
#line 43 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\fileapifromapp.h"
__declspec(dllimport) BOOL __stdcall 
#line 46
CreateDirectoryFromAppW(LPCWSTR lpPathName, LPSECURITY_ATTRIBUTES lpSecurityAttributes) noexcept; 
#line 55 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\fileapifromapp.h"
__declspec(dllimport) HANDLE __stdcall 
#line 58
CreateFileFromAppW(LPCWSTR lpFileName, DWORD dwDesiredAccess, DWORD dwShareMode, LPSECURITY_ATTRIBUTES lpSecurityAttributes, DWORD dwCreationDisposition, DWORD dwFlagsAndAttributes, HANDLE hTemplateFile) noexcept; 
#line 72 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\fileapifromapp.h"
__declspec(dllimport) HANDLE __stdcall 
#line 75
CreateFile2FromAppW(LPCWSTR lpFileName, DWORD dwDesiredAccess, DWORD dwShareMode, DWORD dwCreationDisposition, LPCREATEFILE2_EXTENDED_PARAMETERS pCreateExParams) noexcept; 
#line 87 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\fileapifromapp.h"
__declspec(dllimport) BOOL __stdcall 
#line 90
DeleteFileFromAppW(LPCWSTR lpFileName) noexcept; 
#line 98 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\fileapifromapp.h"
__declspec(dllimport) HANDLE __stdcall 
#line 101
FindFirstFileExFromAppW(LPCWSTR lpFileName, FINDEX_INFO_LEVELS fInfoLevelId, LPVOID lpFindFileData, FINDEX_SEARCH_OPS fSearchOp, LPVOID lpSearchFilter, DWORD dwAdditionalFlags) noexcept; 
#line 114 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\fileapifromapp.h"
__declspec(dllimport) BOOL __stdcall 
#line 117
GetFileAttributesExFromAppW(LPCWSTR lpFileName, GET_FILEEX_INFO_LEVELS fInfoLevelId, LPVOID lpFileInformation) noexcept; 
#line 127 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\fileapifromapp.h"
__declspec(dllimport) BOOL __stdcall 
#line 130
MoveFileFromAppW(LPCWSTR lpExistingFileName, LPCWSTR lpNewFileName) noexcept; 
#line 139 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\fileapifromapp.h"
__declspec(dllimport) BOOL __stdcall 
#line 142
RemoveDirectoryFromAppW(LPCWSTR lpPathName) noexcept; 
#line 150 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\fileapifromapp.h"
__declspec(dllimport) BOOL __stdcall 
#line 153
ReplaceFileFromAppW(LPCWSTR lpReplacedFileName, LPCWSTR lpReplacementFileName, LPCWSTR lpBackupFileName, DWORD dwReplaceFlags, LPVOID lpExclude, LPVOID lpReserved) noexcept; 
#line 166 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\fileapifromapp.h"
__declspec(dllimport) BOOL __stdcall 
#line 169
SetFileAttributesFromAppW(LPCWSTR lpFileName, DWORD dwFileAttributes) noexcept; 
#line 183 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\fileapifromapp.h"
}
#line 180
#pragma endregion
#line 22 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\debugapi.h"
extern "C" {
#line 25 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\debugapi.h"
#pragma region Application Family or OneCore Family or Games Family
#line 30
__declspec(dllimport) BOOL __stdcall 
#line 33
IsDebuggerPresent(); 
#line 39 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\debugapi.h"
#pragma endregion
#line 41
#pragma region Application Family or OneCore Family or Games Family
#line 44
__declspec(dllimport) void __stdcall 
#line 47
DebugBreak(); 
#line 51
__declspec(dllimport) void __stdcall 
#line 54
OutputDebugStringA(LPCSTR lpOutputString); 
#line 58
__declspec(dllimport) void __stdcall 
#line 61
OutputDebugStringW(LPCWSTR lpOutputString); 
#line 71 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\debugapi.h"
#pragma endregion
#line 73
#pragma region Desktop Family or OneCore Family or Games Family
#line 76
__declspec(dllimport) BOOL __stdcall 
#line 79
ContinueDebugEvent(DWORD dwProcessId, DWORD dwThreadId, DWORD dwContinueStatus); 
#line 85
__declspec(dllimport) BOOL __stdcall 
#line 88
WaitForDebugEvent(LPDEBUG_EVENT lpDebugEvent, DWORD dwMilliseconds); 
#line 93
__declspec(dllimport) BOOL __stdcall 
#line 96
DebugActiveProcess(DWORD dwProcessId); 
#line 100
__declspec(dllimport) BOOL __stdcall 
#line 103
DebugActiveProcessStop(DWORD dwProcessId); 
#line 108 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\debugapi.h"
#pragma endregion
#line 110
#pragma region Desktop Family or OneCore Family
#line 115
__declspec(dllimport) BOOL __stdcall 
#line 118
CheckRemoteDebuggerPresent(HANDLE hProcess, PBOOL pbDebuggerPresent); 
#line 126 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\debugapi.h"
#pragma endregion
#line 128
#pragma region Desktop Family or OneCore Family
#line 131
__declspec(dllimport) BOOL __stdcall 
#line 134
WaitForDebugEventEx(LPDEBUG_EVENT lpDebugEvent, DWORD dwMilliseconds); 
#line 143 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\debugapi.h"
}
#line 140
#pragma endregion
#line 21 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\utilapiset.h"
extern "C" {
#line 24 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\utilapiset.h"
#pragma region Application Family or OneCore Family or Games Family
#line 27
__declspec(dllimport) PVOID __stdcall 
#line 31
EncodePointer(PVOID Ptr); 
#line 35
__declspec(dllimport) PVOID __stdcall 
#line 39
DecodePointer(PVOID Ptr); 
#line 43
__declspec(dllimport) PVOID __stdcall 
#line 47
EncodeSystemPointer(PVOID Ptr); 
#line 51
__declspec(dllimport) PVOID __stdcall 
#line 55
DecodeSystemPointer(PVOID Ptr); 
#line 60 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\utilapiset.h"
#pragma endregion
#line 62
#pragma region Desktop Family or OneCore Family
#line 65
__declspec(dllimport) HRESULT __stdcall 
#line 68
EncodeRemotePointer(HANDLE ProcessHandle, PVOID Ptr, PVOID * EncodedPtr); 
#line 74
__declspec(dllimport) HRESULT __stdcall 
#line 77
DecodeRemotePointer(HANDLE ProcessHandle, PVOID Ptr, PVOID * DecodedPtr); 
#line 84 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\utilapiset.h"
#pragma endregion
#line 86
#pragma region PC Family or OneCore Family or Games Family
#line 89
__declspec(dllimport) BOOL __stdcall 
#line 92
Beep(DWORD dwFreq, DWORD dwDuration); 
#line 101 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\utilapiset.h"
}
#line 98
#pragma endregion
#line 21 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\handleapi.h"
extern "C" {
#line 29 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\handleapi.h"
#pragma region Application Family or OneCore Family or Games Family
#line 36
__declspec(dllimport) BOOL __stdcall 
#line 39
CloseHandle(HANDLE hObject); 
#line 43
__declspec(dllimport) BOOL __stdcall 
#line 46
DuplicateHandle(HANDLE hSourceProcessHandle, HANDLE hSourceHandle, HANDLE hTargetProcessHandle, LPHANDLE lpTargetHandle, DWORD dwDesiredAccess, BOOL bInheritHandle, DWORD dwOptions); 
#line 57 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\handleapi.h"
#pragma endregion
#line 59
#pragma region Application Family or OneCore Family
#line 62
__declspec(dllimport) BOOL __stdcall 
#line 65
CompareObjectHandles(HANDLE hFirstObjectHandle, HANDLE hSecondObjectHandle); 
#line 71 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\handleapi.h"
#pragma endregion
#line 73
#pragma region Application Family or OneCore Family or Games Family
#line 76
__declspec(dllimport) BOOL __stdcall 
#line 79
GetHandleInformation(HANDLE hObject, LPDWORD lpdwFlags); 
#line 84
__declspec(dllimport) BOOL __stdcall 
#line 87
SetHandleInformation(HANDLE hObject, DWORD dwMask, DWORD dwFlags); 
#line 97 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\handleapi.h"
}
#line 94
#pragma endregion
#line 21 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\errhandlingapi.h"
extern "C" {
#line 24 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\errhandlingapi.h"
#pragma region Application Family or OneCore Family or Games Family
#line 31
typedef LONG (__stdcall *PTOP_LEVEL_EXCEPTION_FILTER)(_EXCEPTION_POINTERS * ExceptionInfo); 
#line 35
typedef PTOP_LEVEL_EXCEPTION_FILTER LPTOP_LEVEL_EXCEPTION_FILTER; 
#line 41
__declspec(dllimport) void __stdcall 
#line 44
RaiseException(DWORD dwExceptionCode, DWORD dwExceptionFlags, DWORD nNumberOfArguments, const ULONG_PTR * lpArguments); 
#line 52 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\errhandlingapi.h"
#pragma endregion
#line 54
#pragma region Desktop Family or OneCore Family or Games Family
#line 58
__declspec(dllimport) LONG __stdcall 
#line 61
UnhandledExceptionFilter(_EXCEPTION_POINTERS * ExceptionInfo); 
#line 66 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\errhandlingapi.h"
#pragma endregion
#line 68
#pragma region Application Family or OneCore Family or Games Family
#line 71
__declspec(dllimport) LPTOP_LEVEL_EXCEPTION_FILTER __stdcall 
#line 74
SetUnhandledExceptionFilter(LPTOP_LEVEL_EXCEPTION_FILTER lpTopLevelExceptionFilter); 
#line 80
__declspec(dllimport) DWORD __stdcall 
#line 85
GetLastError(); 
#line 91 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\errhandlingapi.h"
__declspec(dllimport) void __stdcall 
#line 94
SetLastError(DWORD dwErrCode); 
#line 99 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\errhandlingapi.h"
#pragma endregion
#line 101
#pragma region Application Family or OneCore Family or Games Family
#line 106
__declspec(dllimport) UINT __stdcall 
#line 109
GetErrorMode(); 
#line 115 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\errhandlingapi.h"
__declspec(dllimport) UINT __stdcall 
#line 118
SetErrorMode(UINT uMode); 
#line 123 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\errhandlingapi.h"
#pragma endregion
#line 125
#pragma region Desktop Family or OneCore Family or Games Family
#line 130
__declspec(dllimport) PVOID __stdcall 
#line 134
AddVectoredExceptionHandler(ULONG First, PVECTORED_EXCEPTION_HANDLER Handler); 
#line 139
__declspec(dllimport) ULONG __stdcall 
#line 142
RemoveVectoredExceptionHandler(PVOID Handle); 
#line 146
__declspec(dllimport) PVOID __stdcall 
#line 150
AddVectoredContinueHandler(ULONG First, PVECTORED_EXCEPTION_HANDLER Handler); 
#line 155
__declspec(dllimport) ULONG __stdcall 
#line 158
RemoveVectoredContinueHandler(PVOID Handle); 
#line 185 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\errhandlingapi.h"
#pragma endregion
#line 187
#pragma region Application Family or OneCore Family or Games Family
#line 190
__declspec(dllimport) void __stdcall 
#line 193
RaiseFailFastException(PEXCEPTION_RECORD pExceptionRecord, PCONTEXT pContextRecord, DWORD dwFlags); 
#line 200 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\errhandlingapi.h"
#pragma endregion
#line 202
#pragma region Desktop Family or OneCore Family or Games Family
#line 205
__declspec(dllimport) void __stdcall 
#line 208
FatalAppExitA(UINT uAction, LPCSTR lpMessageText); 
#line 213
__declspec(dllimport) void __stdcall 
#line 216
FatalAppExitW(UINT uAction, LPCWSTR lpMessageText); 
#line 227 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\errhandlingapi.h"
#pragma endregion
#line 229
#pragma region Application Family or OneCore Family
#line 232
__declspec(dllimport) DWORD __stdcall 
#line 235
GetThreadErrorMode(); 
#line 239
__declspec(dllimport) BOOL __stdcall 
#line 242
SetThreadErrorMode(DWORD dwNewMode, LPDWORD lpOldMode); 
#line 248 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\errhandlingapi.h"
#pragma endregion
#line 250
#pragma region Desktop Family or OneCore Family
#line 253
__declspec(dllimport) void __stdcall 
#line 256
TerminateProcessOnMemoryExhaustion(SIZE_T FailedAllocationSize); 
#line 264 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\errhandlingapi.h"
}
#line 261
#pragma endregion
#line 21 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\fibersapi.h"
extern "C" {
#line 24 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\fibersapi.h"
#pragma region Application Family or OneCore Family or Games Family
#line 33 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\fibersapi.h"
__declspec(dllimport) DWORD __stdcall 
#line 36
FlsAlloc(PFLS_CALLBACK_FUNCTION lpCallback); 
#line 40
__declspec(dllimport) PVOID __stdcall 
#line 43
FlsGetValue(DWORD dwFlsIndex); 
#line 47
__declspec(dllimport) BOOL __stdcall 
#line 50
FlsSetValue(DWORD dwFlsIndex, PVOID lpFlsData); 
#line 55
__declspec(dllimport) BOOL __stdcall 
#line 58
FlsFree(DWORD dwFlsIndex); 
#line 65 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\fibersapi.h"
#pragma endregion
#line 67
#pragma region Application Family or OneCore Family or Games Family
#line 72
__declspec(dllimport) BOOL __stdcall 
#line 75
IsThreadAFiber(); 
#line 85 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\fibersapi.h"
}
#line 82
#pragma endregion
#line 22 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\namedpipeapi.h"
extern "C" {
#line 27 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\namedpipeapi.h"
__declspec(dllimport) BOOL __stdcall 
#line 30
CreatePipe(PHANDLE hReadPipe, PHANDLE hWritePipe, LPSECURITY_ATTRIBUTES lpPipeAttributes, DWORD nSize); 
#line 37
__declspec(dllimport) BOOL __stdcall 
#line 40
ConnectNamedPipe(HANDLE hNamedPipe, LPOVERLAPPED lpOverlapped); 
#line 45
__declspec(dllimport) BOOL __stdcall 
#line 48
DisconnectNamedPipe(HANDLE hNamedPipe); 
#line 52
__declspec(dllimport) BOOL __stdcall 
#line 55
SetNamedPipeHandleState(HANDLE hNamedPipe, LPDWORD lpMode, LPDWORD lpMaxCollectionCount, LPDWORD lpCollectDataTimeout); 
#line 62
__declspec(dllimport) BOOL __stdcall 
#line 65
PeekNamedPipe(HANDLE hNamedPipe, LPVOID lpBuffer, DWORD nBufferSize, LPDWORD lpBytesRead, LPDWORD lpTotalBytesAvail, LPDWORD lpBytesLeftThisMessage); 
#line 78 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\namedpipeapi.h"
__declspec(dllimport) BOOL __stdcall 
#line 81
TransactNamedPipe(HANDLE hNamedPipe, LPVOID lpInBuffer, DWORD nInBufferSize, LPVOID lpOutBuffer, DWORD nOutBufferSize, LPDWORD lpBytesRead, LPOVERLAPPED lpOverlapped); 
#line 95 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\namedpipeapi.h"
__declspec(dllimport) HANDLE __stdcall 
#line 98
CreateNamedPipeW(LPCWSTR lpName, DWORD dwOpenMode, DWORD dwPipeMode, DWORD nMaxInstances, DWORD nOutBufferSize, DWORD nInBufferSize, DWORD nDefaultTimeOut, LPSECURITY_ATTRIBUTES lpSecurityAttributes); 
#line 113
__declspec(dllimport) BOOL __stdcall 
#line 116
WaitNamedPipeW(LPCWSTR lpNamedPipeName, DWORD nTimeOut); 
#line 131 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\namedpipeapi.h"
__declspec(dllimport) BOOL __stdcall 
#line 134
GetNamedPipeClientComputerNameW(HANDLE Pipe, LPWSTR ClientComputerName, ULONG ClientComputerNameLength); 
#line 146 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\namedpipeapi.h"
__declspec(dllimport) BOOL __stdcall 
#line 150
ImpersonateNamedPipeClient(HANDLE hNamedPipe); 
#line 156 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\namedpipeapi.h"
#pragma region Application Family or OneCore Family
#line 159
__declspec(dllimport) BOOL __stdcall 
#line 162
GetNamedPipeInfo(HANDLE hNamedPipe, LPDWORD lpFlags, LPDWORD lpOutBufferSize, LPDWORD lpInBufferSize, LPDWORD lpMaxInstances); 
#line 170
__declspec(dllimport) BOOL __stdcall 
#line 173
GetNamedPipeHandleStateW(HANDLE hNamedPipe, LPDWORD lpState, LPDWORD lpCurInstances, LPDWORD lpMaxCollectionCount, LPDWORD lpCollectDataTimeout, LPWSTR lpUserName, DWORD nMaxUserNameSize); 
#line 187 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\namedpipeapi.h"
#pragma endregion
#line 189
#pragma region Application Family or OneCore Family
#line 192
__declspec(dllimport) BOOL __stdcall 
#line 195
CallNamedPipeW(LPCWSTR lpNamedPipeName, LPVOID lpInBuffer, DWORD nInBufferSize, LPVOID lpOutBuffer, DWORD nOutBufferSize, LPDWORD lpBytesRead, DWORD nTimeOut); 
#line 213 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\namedpipeapi.h"
}
#line 210
#pragma endregion
#line 21 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\profileapi.h"
extern "C" {
#line 24 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\profileapi.h"
#pragma region Application Family or OneCore Family or Games Family
#line 31
__declspec(dllimport) BOOL __stdcall 
#line 34
QueryPerformanceCounter(LARGE_INTEGER * lpPerformanceCount); 
#line 38
__declspec(dllimport) BOOL __stdcall 
#line 41
QueryPerformanceFrequency(LARGE_INTEGER * lpFrequency); 
#line 49 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\profileapi.h"
}
#line 46
#pragma endregion
#line 28 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\heapapi.h"
extern "C" {
#line 32 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\heapapi.h"
#pragma warning(push)
#pragma warning(disable:4820)
#line 36 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\heapapi.h"
#pragma region Application Family or OneCore Family or Games Family
#line 49
typedef 
#line 43
struct _HEAP_SUMMARY { 
#line 44
DWORD cb; 
#line 45
SIZE_T cbAllocated; 
#line 46
SIZE_T cbCommitted; 
#line 47
SIZE_T cbReserved; 
#line 48
SIZE_T cbMaxReserve; 
#line 49
} HEAP_SUMMARY, *PHEAP_SUMMARY; 
#line 50
typedef PHEAP_SUMMARY LPHEAP_SUMMARY; 
#line 56
__declspec(dllimport) HANDLE __stdcall 
#line 60
HeapCreate(DWORD flOptions, SIZE_T dwInitialSize, SIZE_T dwMaximumSize); 
#line 66
__declspec(dllimport) BOOL __stdcall 
#line 69
HeapDestroy(HANDLE hHeap); 
#line 73
__declspec(dllimport) 
#line 76
__declspec(allocator) LPVOID __stdcall 
#line 79
HeapAlloc(HANDLE hHeap, DWORD dwFlags, SIZE_T dwBytes); 
#line 85
__declspec(dllimport) 
#line 89
__declspec(allocator) LPVOID __stdcall 
#line 92
HeapReAlloc(HANDLE hHeap, DWORD dwFlags, LPVOID lpMem, SIZE_T dwBytes); 
#line 99
__declspec(dllimport) BOOL __stdcall 
#line 103
HeapFree(HANDLE hHeap, DWORD dwFlags, LPVOID lpMem); 
#line 109
__declspec(dllimport) SIZE_T __stdcall 
#line 112
HeapSize(HANDLE hHeap, DWORD dwFlags, LPCVOID lpMem); 
#line 118
__declspec(dllimport) HANDLE __stdcall 
#line 121
GetProcessHeap(); 
#line 125
__declspec(dllimport) SIZE_T __stdcall 
#line 128
HeapCompact(HANDLE hHeap, DWORD dwFlags); 
#line 133
__declspec(dllimport) BOOL __stdcall 
#line 136
HeapSetInformation(HANDLE HeapHandle, HEAP_INFORMATION_CLASS HeapInformationClass, PVOID HeapInformation, SIZE_T HeapInformationLength); 
#line 144 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\heapapi.h"
#pragma endregion
#line 146
#pragma region Desktop Family or OneCore Family or Games Family
#line 149
__declspec(dllimport) BOOL __stdcall 
#line 152
HeapValidate(HANDLE hHeap, DWORD dwFlags, LPCVOID lpMem); 
#line 159 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\heapapi.h"
#pragma endregion
#line 161
#pragma region Application Family
#line 166
BOOL __stdcall HeapSummary(HANDLE hHeap, DWORD dwFlags, LPHEAP_SUMMARY lpSummary); 
#line 173 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\heapapi.h"
#pragma endregion
#line 175
#pragma region Application Family or OneCore Family or Games Family
#line 178
__declspec(dllimport) DWORD __stdcall 
#line 181
GetProcessHeaps(DWORD NumberOfHeaps, PHANDLE ProcessHeaps); 
#line 186
__declspec(dllimport) BOOL __stdcall 
#line 189
HeapLock(HANDLE hHeap); 
#line 193
__declspec(dllimport) BOOL __stdcall 
#line 196
HeapUnlock(HANDLE hHeap); 
#line 201 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\heapapi.h"
#pragma endregion
#line 203
#pragma region Desktop Family or OneCore Family or Games Family
#line 206
__declspec(dllimport) BOOL __stdcall 
#line 209
HeapWalk(HANDLE hHeap, LPPROCESS_HEAP_ENTRY lpEntry); 
#line 214
__declspec(dllimport) BOOL __stdcall 
#line 217
HeapQueryInformation(HANDLE HeapHandle, HEAP_INFORMATION_CLASS HeapInformationClass, PVOID HeapInformation, SIZE_T HeapInformationLength, PSIZE_T ReturnLength); 
#line 237 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\heapapi.h"
}
#line 226 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\heapapi.h"
#pragma endregion
#line 233
#pragma warning(pop)
#line 22 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\ioapiset.h"
extern "C" {
#line 25 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\ioapiset.h"
#pragma region Application Family or OneCore Family or Games Family
#line 28
__declspec(dllimport) HANDLE __stdcall 
#line 32
CreateIoCompletionPort(HANDLE FileHandle, HANDLE ExistingCompletionPort, ULONG_PTR CompletionKey, DWORD NumberOfConcurrentThreads); 
#line 39
__declspec(dllimport) BOOL __stdcall 
#line 42
GetQueuedCompletionStatus(HANDLE CompletionPort, LPDWORD lpNumberOfBytesTransferred, PULONG_PTR lpCompletionKey, LPOVERLAPPED * lpOverlapped, DWORD dwMilliseconds); 
#line 52
__declspec(dllimport) BOOL __stdcall 
#line 55
GetQueuedCompletionStatusEx(HANDLE CompletionPort, LPOVERLAPPED_ENTRY lpCompletionPortEntries, ULONG ulCount, PULONG ulNumEntriesRemoved, DWORD dwMilliseconds, BOOL fAlertable); 
#line 66 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\ioapiset.h"
__declspec(dllimport) BOOL __stdcall 
#line 69
PostQueuedCompletionStatus(HANDLE CompletionPort, DWORD dwNumberOfBytesTransferred, ULONG_PTR dwCompletionKey, LPOVERLAPPED lpOverlapped); 
#line 77 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\ioapiset.h"
#pragma endregion
#line 79
#pragma region Desktop Family or OneCore Family or Application Family or Games Family
#line 82
__declspec(dllimport) BOOL __stdcall 
#line 85
DeviceIoControl(HANDLE hDevice, DWORD dwIoControlCode, LPVOID lpInBuffer, DWORD nInBufferSize, LPVOID lpOutBuffer, DWORD nOutBufferSize, LPDWORD lpBytesReturned, LPOVERLAPPED lpOverlapped); 
#line 97 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\ioapiset.h"
#pragma endregion
#line 99
#pragma region Application Family or OneCore Family or Games Family
#line 102
__declspec(dllimport) BOOL __stdcall 
#line 105
GetOverlappedResult(HANDLE hFile, LPOVERLAPPED lpOverlapped, LPDWORD lpNumberOfBytesTransferred, BOOL bWait); 
#line 114
__declspec(dllimport) BOOL __stdcall 
#line 117
CancelIoEx(HANDLE hFile, LPOVERLAPPED lpOverlapped); 
#line 125 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\ioapiset.h"
#pragma endregion
#line 127
#pragma region Application Family or OneCore Family or Games Family
#line 130
__declspec(dllimport) BOOL __stdcall 
#line 133
CancelIo(HANDLE hFile); 
#line 137
__declspec(dllimport) BOOL __stdcall 
#line 140
GetOverlappedResultEx(HANDLE hFile, LPOVERLAPPED lpOverlapped, LPDWORD lpNumberOfBytesTransferred, DWORD dwMilliseconds, BOOL bAlertable); 
#line 149 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\ioapiset.h"
#pragma endregion
#line 151
#pragma region Desktop Family or OneCore Family or Games Family
#line 156
__declspec(dllimport) BOOL __stdcall 
#line 159
CancelSynchronousIo(HANDLE hThread); 
#line 169 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\ioapiset.h"
}
#line 166
#pragma endregion
#line 22 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\synchapi.h"
extern "C" {
#line 25 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\synchapi.h"
#pragma region Application or OneCore Family or Games Family
#line 34
typedef RTL_SRWLOCK SRWLOCK, *PSRWLOCK; 
#line 38
__declspec(dllimport) void __stdcall 
#line 41
InitializeSRWLock(PSRWLOCK SRWLock); 
#line 45
__declspec(dllimport) void __stdcall 
#line 49
ReleaseSRWLockExclusive(PSRWLOCK SRWLock); 
#line 53
__declspec(dllimport) void __stdcall 
#line 57
ReleaseSRWLockShared(PSRWLOCK SRWLock); 
#line 61
__declspec(dllimport) void __stdcall 
#line 65
AcquireSRWLockExclusive(PSRWLOCK SRWLock); 
#line 69
__declspec(dllimport) void __stdcall 
#line 73
AcquireSRWLockShared(PSRWLOCK SRWLock); 
#line 77
__declspec(dllimport) BOOLEAN __stdcall 
#line 81
TryAcquireSRWLockExclusive(PSRWLOCK SRWLock); 
#line 85
__declspec(dllimport) BOOLEAN __stdcall 
#line 89
TryAcquireSRWLockShared(PSRWLOCK SRWLock); 
#line 107 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\synchapi.h"
__declspec(dllimport) void __stdcall 
#line 110
InitializeCriticalSection(LPCRITICAL_SECTION lpCriticalSection); 
#line 116 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\synchapi.h"
__declspec(dllimport) void __stdcall 
#line 119
EnterCriticalSection(LPCRITICAL_SECTION lpCriticalSection); 
#line 123
__declspec(dllimport) void __stdcall 
#line 126
LeaveCriticalSection(LPCRITICAL_SECTION lpCriticalSection); 
#line 130
__declspec(dllimport) BOOL __stdcall 
#line 134
InitializeCriticalSectionAndSpinCount(LPCRITICAL_SECTION lpCriticalSection, DWORD dwSpinCount); 
#line 141
__declspec(dllimport) BOOL __stdcall 
#line 144
InitializeCriticalSectionEx(LPCRITICAL_SECTION lpCriticalSection, DWORD dwSpinCount, DWORD Flags); 
#line 152 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\synchapi.h"
__declspec(dllimport) DWORD __stdcall 
#line 155
SetCriticalSectionSpinCount(LPCRITICAL_SECTION lpCriticalSection, DWORD dwSpinCount); 
#line 162
__declspec(dllimport) BOOL __stdcall 
#line 165
TryEnterCriticalSection(LPCRITICAL_SECTION lpCriticalSection); 
#line 171 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\synchapi.h"
__declspec(dllimport) void __stdcall 
#line 174
DeleteCriticalSection(LPCRITICAL_SECTION lpCriticalSection); 
#line 182
typedef RTL_RUN_ONCE INIT_ONCE; 
#line 183
typedef PRTL_RUN_ONCE PINIT_ONCE; 
#line 184
typedef PRTL_RUN_ONCE LPINIT_ONCE; 
#line 205
typedef BOOL (__stdcall *PINIT_ONCE_FN)(PINIT_ONCE InitOnce, PVOID Parameter, PVOID * Context); 
#line 213
__declspec(dllimport) void __stdcall 
#line 216
InitOnceInitialize(PINIT_ONCE InitOnce); 
#line 220
__declspec(dllimport) BOOL __stdcall 
#line 223
InitOnceExecuteOnce(PINIT_ONCE InitOnce, PINIT_ONCE_FN InitFn, PVOID Parameter, LPVOID * Context); 
#line 230
__declspec(dllimport) BOOL __stdcall 
#line 233
InitOnceBeginInitialize(LPINIT_ONCE lpInitOnce, DWORD dwFlags, PBOOL fPending, LPVOID * lpContext); 
#line 240
__declspec(dllimport) BOOL __stdcall 
#line 243
InitOnceComplete(LPINIT_ONCE lpInitOnce, DWORD dwFlags, LPVOID lpContext); 
#line 255 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\synchapi.h"
typedef RTL_CONDITION_VARIABLE CONDITION_VARIABLE, *PCONDITION_VARIABLE; 
#line 271
__declspec(dllimport) void __stdcall 
#line 274
InitializeConditionVariable(PCONDITION_VARIABLE ConditionVariable); 
#line 278
__declspec(dllimport) void __stdcall 
#line 281
WakeConditionVariable(PCONDITION_VARIABLE ConditionVariable); 
#line 285
__declspec(dllimport) void __stdcall 
#line 288
WakeAllConditionVariable(PCONDITION_VARIABLE ConditionVariable); 
#line 292
__declspec(dllimport) BOOL __stdcall 
#line 295
SleepConditionVariableCS(PCONDITION_VARIABLE ConditionVariable, PCRITICAL_SECTION CriticalSection, DWORD dwMilliseconds); 
#line 301
__declspec(dllimport) BOOL __stdcall 
#line 304
SleepConditionVariableSRW(PCONDITION_VARIABLE ConditionVariable, PSRWLOCK SRWLock, DWORD dwMilliseconds, ULONG Flags); 
#line 313 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\synchapi.h"
__declspec(dllimport) BOOL __stdcall 
#line 316
SetEvent(HANDLE hEvent); 
#line 320
__declspec(dllimport) BOOL __stdcall 
#line 323
ResetEvent(HANDLE hEvent); 
#line 327
__declspec(dllimport) BOOL __stdcall 
#line 330
ReleaseSemaphore(HANDLE hSemaphore, LONG lReleaseCount, LPLONG lpPreviousCount); 
#line 336
__declspec(dllimport) BOOL __stdcall 
#line 339
ReleaseMutex(HANDLE hMutex); 
#line 343
__declspec(dllimport) DWORD __stdcall 
#line 346
WaitForSingleObject(HANDLE hHandle, DWORD dwMilliseconds); 
#line 351
__declspec(dllimport) DWORD __stdcall 
#line 354
SleepEx(DWORD dwMilliseconds, BOOL bAlertable); 
#line 359
__declspec(dllimport) DWORD __stdcall 
#line 362
WaitForSingleObjectEx(HANDLE hHandle, DWORD dwMilliseconds, BOOL bAlertable); 
#line 368
__declspec(dllimport) DWORD __stdcall 
#line 371
WaitForMultipleObjectsEx(DWORD nCount, const HANDLE * lpHandles, BOOL bWaitAll, DWORD dwMilliseconds, BOOL bAlertable); 
#line 386
__declspec(dllimport) HANDLE __stdcall 
#line 390
CreateMutexA(LPSECURITY_ATTRIBUTES lpMutexAttributes, BOOL bInitialOwner, LPCSTR lpName); 
#line 396
__declspec(dllimport) HANDLE __stdcall 
#line 400
CreateMutexW(LPSECURITY_ATTRIBUTES lpMutexAttributes, BOOL bInitialOwner, LPCWSTR lpName); 
#line 411 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\synchapi.h"
__declspec(dllimport) HANDLE __stdcall 
#line 415
OpenMutexW(DWORD dwDesiredAccess, BOOL bInheritHandle, LPCWSTR lpName); 
#line 425
__declspec(dllimport) HANDLE __stdcall 
#line 429
CreateEventA(LPSECURITY_ATTRIBUTES lpEventAttributes, BOOL bManualReset, BOOL bInitialState, LPCSTR lpName); 
#line 436
__declspec(dllimport) HANDLE __stdcall 
#line 440
CreateEventW(LPSECURITY_ATTRIBUTES lpEventAttributes, BOOL bManualReset, BOOL bInitialState, LPCWSTR lpName); 
#line 452 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\synchapi.h"
__declspec(dllimport) HANDLE __stdcall 
#line 456
OpenEventA(DWORD dwDesiredAccess, BOOL bInheritHandle, LPCSTR lpName); 
#line 462
__declspec(dllimport) HANDLE __stdcall 
#line 466
OpenEventW(DWORD dwDesiredAccess, BOOL bInheritHandle, LPCWSTR lpName); 
#line 477 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\synchapi.h"
__declspec(dllimport) HANDLE __stdcall 
#line 481
OpenSemaphoreW(DWORD dwDesiredAccess, BOOL bInheritHandle, LPCWSTR lpName); 
#line 495
typedef void (__stdcall *PTIMERAPCROUTINE)(LPVOID lpArgToCompletionRoutine, DWORD dwTimerLowValue, DWORD dwTimerHighValue); 
#line 501
__declspec(dllimport) HANDLE __stdcall 
#line 505
OpenWaitableTimerW(DWORD dwDesiredAccess, BOOL bInheritHandle, LPCWSTR lpTimerName); 
#line 519
BOOL __stdcall SetWaitableTimerEx(HANDLE hTimer, const LARGE_INTEGER * lpDueTime, LONG lPeriod, PTIMERAPCROUTINE pfnCompletionRoutine, LPVOID lpArgToCompletionRoutine, PREASON_CONTEXT WakeContext, ULONG TolerableDelay); 
#line 531 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\synchapi.h"
__declspec(dllimport) BOOL __stdcall 
#line 534
SetWaitableTimer(HANDLE hTimer, const LARGE_INTEGER * lpDueTime, LONG lPeriod, PTIMERAPCROUTINE pfnCompletionRoutine, LPVOID lpArgToCompletionRoutine, BOOL fResume); 
#line 543
__declspec(dllimport) BOOL __stdcall 
#line 546
CancelWaitableTimer(HANDLE hTimer); 
#line 554
__declspec(dllimport) HANDLE __stdcall 
#line 558
CreateMutexExA(LPSECURITY_ATTRIBUTES lpMutexAttributes, LPCSTR lpName, DWORD dwFlags, DWORD dwDesiredAccess); 
#line 565
__declspec(dllimport) HANDLE __stdcall 
#line 569
CreateMutexExW(LPSECURITY_ATTRIBUTES lpMutexAttributes, LPCWSTR lpName, DWORD dwFlags, DWORD dwDesiredAccess); 
#line 584 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\synchapi.h"
__declspec(dllimport) HANDLE __stdcall 
#line 588
CreateEventExA(LPSECURITY_ATTRIBUTES lpEventAttributes, LPCSTR lpName, DWORD dwFlags, DWORD dwDesiredAccess); 
#line 595
__declspec(dllimport) HANDLE __stdcall 
#line 599
CreateEventExW(LPSECURITY_ATTRIBUTES lpEventAttributes, LPCWSTR lpName, DWORD dwFlags, DWORD dwDesiredAccess); 
#line 611 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\synchapi.h"
__declspec(dllimport) HANDLE __stdcall 
#line 615
CreateSemaphoreExW(LPSECURITY_ATTRIBUTES lpSemaphoreAttributes, LONG lInitialCount, LONG lMaximumCount, LPCWSTR lpName, DWORD dwFlags, DWORD dwDesiredAccess); 
#line 633 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\synchapi.h"
__declspec(dllimport) HANDLE __stdcall 
#line 637
CreateWaitableTimerExW(LPSECURITY_ATTRIBUTES lpTimerAttributes, LPCWSTR lpTimerName, DWORD dwFlags, DWORD dwDesiredAccess); 
#line 652 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\synchapi.h"
typedef RTL_BARRIER SYNCHRONIZATION_BARRIER; 
#line 653
typedef PRTL_BARRIER PSYNCHRONIZATION_BARRIER; 
#line 654
typedef PRTL_BARRIER LPSYNCHRONIZATION_BARRIER; 
#line 662
BOOL __stdcall EnterSynchronizationBarrier(LPSYNCHRONIZATION_BARRIER lpBarrier, DWORD dwFlags); 
#line 669
BOOL __stdcall InitializeSynchronizationBarrier(LPSYNCHRONIZATION_BARRIER lpBarrier, LONG lTotalThreads, LONG lSpinCount); 
#line 677
BOOL __stdcall DeleteSynchronizationBarrier(LPSYNCHRONIZATION_BARRIER lpBarrier); 
#line 681
__declspec(dllimport) void __stdcall 
#line 684
Sleep(DWORD dwMilliseconds); 
#line 690
BOOL __stdcall WaitOnAddress(volatile void * Address, PVOID CompareAddress, SIZE_T AddressSize, DWORD dwMilliseconds); 
#line 699
void __stdcall WakeByAddressSingle(PVOID Address); 
#line 705
void __stdcall WakeByAddressAll(PVOID Address); 
#line 710 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\synchapi.h"
#pragma endregion
#line 712
#pragma region Desktop or OneCore Family
#line 717
__declspec(dllimport) DWORD __stdcall 
#line 720
SignalObjectAndWait(HANDLE hObjectToSignal, HANDLE hObjectToWaitOn, DWORD dwMilliseconds, BOOL bAlertable); 
#line 730 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\synchapi.h"
#pragma endregion
#line 732
#pragma region Application or OneCore Family or Games Partition
#line 735
__declspec(dllimport) DWORD __stdcall 
#line 738
WaitForMultipleObjects(DWORD nCount, const HANDLE * lpHandles, BOOL bWaitAll, DWORD dwMilliseconds); 
#line 745
__declspec(dllimport) HANDLE __stdcall 
#line 748
CreateSemaphoreW(LPSECURITY_ATTRIBUTES lpSemaphoreAttributes, LONG lInitialCount, LONG lMaximumCount, LPCWSTR lpName); 
#line 759
__declspec(dllimport) HANDLE __stdcall 
#line 763
CreateWaitableTimerW(LPSECURITY_ATTRIBUTES lpTimerAttributes, BOOL bManualReset, LPCWSTR lpTimerName); 
#line 777 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\synchapi.h"
}
#line 774
#pragma endregion
#line 21 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\interlockedapi.h"
extern "C" {
#line 24 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\interlockedapi.h"
#pragma region Application Family or OneCore Family
#line 37 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\interlockedapi.h"
#pragma endregion
#line 39
#pragma region Application Family or OneCore Family or Games Family
#line 48
__declspec(dllimport) void __stdcall 
#line 51
InitializeSListHead(PSLIST_HEADER ListHead); 
#line 55
__declspec(dllimport) PSLIST_ENTRY __stdcall 
#line 58
InterlockedPopEntrySList(PSLIST_HEADER ListHead); 
#line 62
__declspec(dllimport) PSLIST_ENTRY __stdcall 
#line 65
InterlockedPushEntrySList(PSLIST_HEADER ListHead, PSLIST_ENTRY ListEntry); 
#line 74
__declspec(dllimport) PSLIST_ENTRY __stdcall 
#line 77
InterlockedPushListSListEx(PSLIST_HEADER ListHead, PSLIST_ENTRY List, PSLIST_ENTRY ListEnd, ULONG Count); 
#line 86 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\interlockedapi.h"
__declspec(dllimport) PSLIST_ENTRY __stdcall 
#line 89
InterlockedFlushSList(PSLIST_HEADER ListHead); 
#line 93
__declspec(dllimport) USHORT __stdcall 
#line 96
QueryDepthSList(PSLIST_HEADER ListHead); 
#line 110 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\interlockedapi.h"
}
#line 107
#pragma endregion
#line 22 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\processthreadsapi.h"
extern "C" {
#line 25 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\processthreadsapi.h"
#pragma region Application Family or OneCore Family or Games Family
#line 33
typedef 
#line 28
struct _PROCESS_INFORMATION { 
#line 29
HANDLE hProcess; 
#line 30
HANDLE hThread; 
#line 31
DWORD dwProcessId; 
#line 32
DWORD dwThreadId; 
#line 33
} PROCESS_INFORMATION, *PPROCESS_INFORMATION, *LPPROCESS_INFORMATION; 
#line 54
typedef 
#line 35
struct _STARTUPINFOA { 
#line 36
DWORD cb; 
#line 37
LPSTR lpReserved; 
#line 38
LPSTR lpDesktop; 
#line 39
LPSTR lpTitle; 
#line 40
DWORD dwX; 
#line 41
DWORD dwY; 
#line 42
DWORD dwXSize; 
#line 43
DWORD dwYSize; 
#line 44
DWORD dwXCountChars; 
#line 45
DWORD dwYCountChars; 
#line 46
DWORD dwFillAttribute; 
#line 47
DWORD dwFlags; 
#line 48
WORD wShowWindow; 
#line 49
WORD cbReserved2; 
#line 50
LPBYTE lpReserved2; 
#line 51
HANDLE hStdInput; 
#line 52
HANDLE hStdOutput; 
#line 53
HANDLE hStdError; 
#line 54
} STARTUPINFOA, *LPSTARTUPINFOA; 
#line 74
typedef 
#line 55
struct _STARTUPINFOW { 
#line 56
DWORD cb; 
#line 57
LPWSTR lpReserved; 
#line 58
LPWSTR lpDesktop; 
#line 59
LPWSTR lpTitle; 
#line 60
DWORD dwX; 
#line 61
DWORD dwY; 
#line 62
DWORD dwXSize; 
#line 63
DWORD dwYSize; 
#line 64
DWORD dwXCountChars; 
#line 65
DWORD dwYCountChars; 
#line 66
DWORD dwFillAttribute; 
#line 67
DWORD dwFlags; 
#line 68
WORD wShowWindow; 
#line 69
WORD cbReserved2; 
#line 70
LPBYTE lpReserved2; 
#line 71
HANDLE hStdInput; 
#line 72
HANDLE hStdOutput; 
#line 73
HANDLE hStdError; 
#line 74
} STARTUPINFOW, *LPSTARTUPINFOW; 
#line 79
typedef STARTUPINFOA STARTUPINFO; 
#line 80
typedef LPSTARTUPINFOA LPSTARTUPINFO; 
#line 84 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\processthreadsapi.h"
#pragma endregion
#line 86
#pragma region Application Family or OneCore Family or Games Family
#line 91
__declspec(dllimport) DWORD __stdcall 
#line 94
QueueUserAPC(PAPCFUNC pfnAPC, HANDLE hThread, ULONG_PTR dwData); 
#line 107 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\processthreadsapi.h"
typedef 
#line 104
enum _QUEUE_USER_APC_FLAGS { 
#line 105
QUEUE_USER_APC_FLAGS_NONE, 
#line 106
QUEUE_USER_APC_FLAGS_SPECIAL_USER_APC
#line 107
} QUEUE_USER_APC_FLAGS; 
#line 109
__declspec(dllimport) BOOL __stdcall 
#line 112
QueueUserAPC2(PAPCFUNC ApcRoutine, HANDLE Thread, ULONG_PTR Data, QUEUE_USER_APC_FLAGS Flags); 
#line 121 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\processthreadsapi.h"
__declspec(dllimport) BOOL __stdcall 
#line 124
GetProcessTimes(HANDLE hProcess, LPFILETIME lpCreationTime, LPFILETIME lpExitTime, LPFILETIME lpKernelTime, LPFILETIME lpUserTime); 
#line 132
__declspec(dllimport) HANDLE __stdcall 
#line 135
GetCurrentProcess(); 
#line 139
__declspec(dllimport) DWORD __stdcall 
#line 142
GetCurrentProcessId(); 
#line 146
__declspec(dllimport) 
#line 147
__declspec(noreturn) void __stdcall 
#line 150
ExitProcess(UINT uExitCode); 
#line 154
__declspec(dllimport) BOOL __stdcall 
#line 157
TerminateProcess(HANDLE hProcess, UINT uExitCode); 
#line 162
__declspec(dllimport) BOOL __stdcall 
#line 165
GetExitCodeProcess(HANDLE hProcess, LPDWORD lpExitCode); 
#line 170
__declspec(dllimport) BOOL __stdcall 
#line 173
SwitchToThread(); 
#line 177
__declspec(dllimport) HANDLE __stdcall 
#line 181
CreateThread(LPSECURITY_ATTRIBUTES lpThreadAttributes, SIZE_T dwStackSize, LPTHREAD_START_ROUTINE lpStartAddress, LPVOID lpParameter, DWORD dwCreationFlags, LPDWORD lpThreadId); 
#line 190 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\processthreadsapi.h"
#pragma endregion
#line 192
#pragma region Application Family or OneCore Family or Games Family
#line 195
__declspec(dllimport) HANDLE __stdcall 
#line 199
CreateRemoteThread(HANDLE hProcess, LPSECURITY_ATTRIBUTES lpThreadAttributes, SIZE_T dwStackSize, LPTHREAD_START_ROUTINE lpStartAddress, LPVOID lpParameter, DWORD dwCreationFlags, LPDWORD lpThreadId); 
#line 210 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\processthreadsapi.h"
#pragma endregion
#line 212
#pragma region Application Family or OneCore Family or Games Family
#line 215
__declspec(dllimport) HANDLE __stdcall 
#line 218
GetCurrentThread(); 
#line 222
__declspec(dllimport) DWORD __stdcall 
#line 225
GetCurrentThreadId(); 
#line 229
__declspec(dllimport) HANDLE __stdcall 
#line 233
OpenThread(DWORD dwDesiredAccess, BOOL bInheritHandle, DWORD dwThreadId); 
#line 239
__declspec(dllimport) BOOL __stdcall 
#line 242
SetThreadPriority(HANDLE hThread, int nPriority); 
#line 247
__declspec(dllimport) BOOL __stdcall 
#line 250
SetThreadPriorityBoost(HANDLE hThread, BOOL bDisablePriorityBoost); 
#line 255
__declspec(dllimport) BOOL __stdcall 
#line 258
GetThreadPriorityBoost(HANDLE hThread, PBOOL pDisablePriorityBoost); 
#line 263
__declspec(dllimport) int __stdcall 
#line 266
GetThreadPriority(HANDLE hThread); 
#line 270
__declspec(dllimport) 
#line 271
__declspec(noreturn) void __stdcall 
#line 274
ExitThread(DWORD dwExitCode); 
#line 278 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\processthreadsapi.h"
#pragma endregion
#line 280
#pragma region Desktop Family or OneCore Family or Games Family
#line 283
__declspec(dllimport) BOOL __stdcall 
#line 286
TerminateThread(HANDLE hThread, DWORD dwExitCode); 
#line 291 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\processthreadsapi.h"
#pragma endregion
#line 293
#pragma region Application Family or OneCore Family or Games Family
#line 296
__declspec(dllimport) BOOL __stdcall 
#line 300
GetExitCodeThread(HANDLE hThread, LPDWORD lpExitCode); 
#line 305
__declspec(dllimport) DWORD __stdcall 
#line 308
SuspendThread(HANDLE hThread); 
#line 312
__declspec(dllimport) DWORD __stdcall 
#line 315
ResumeThread(HANDLE hThread); 
#line 324 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\processthreadsapi.h"
__declspec(dllimport) DWORD __stdcall 
#line 327
TlsAlloc(); 
#line 331
__declspec(dllimport) LPVOID __stdcall 
#line 334
TlsGetValue(DWORD dwTlsIndex); 
#line 338
__declspec(dllimport) BOOL __stdcall 
#line 341
TlsSetValue(DWORD dwTlsIndex, LPVOID lpTlsValue); 
#line 346
__declspec(dllimport) BOOL __stdcall 
#line 349
TlsFree(DWORD dwTlsIndex); 
#line 353
__declspec(dllimport) BOOL __stdcall 
#line 356
CreateProcessA(LPCSTR lpApplicationName, LPSTR lpCommandLine, LPSECURITY_ATTRIBUTES lpProcessAttributes, LPSECURITY_ATTRIBUTES lpThreadAttributes, BOOL bInheritHandles, DWORD dwCreationFlags, LPVOID lpEnvironment, LPCSTR lpCurrentDirectory, LPSTARTUPINFOA lpStartupInfo, LPPROCESS_INFORMATION lpProcessInformation); 
#line 369
__declspec(dllimport) BOOL __stdcall 
#line 372
CreateProcessW(LPCWSTR lpApplicationName, LPWSTR lpCommandLine, LPSECURITY_ATTRIBUTES lpProcessAttributes, LPSECURITY_ATTRIBUTES lpThreadAttributes, BOOL bInheritHandles, DWORD dwCreationFlags, LPVOID lpEnvironment, LPCWSTR lpCurrentDirectory, LPSTARTUPINFOW lpStartupInfo, LPPROCESS_INFORMATION lpProcessInformation); 
#line 391 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\processthreadsapi.h"
#pragma endregion
#line 393
#pragma region Application Family or OneCore Family
#line 396
__declspec(dllimport) BOOL __stdcall 
#line 399
SetProcessShutdownParameters(DWORD dwLevel, DWORD dwFlags); 
#line 404
__declspec(dllimport) DWORD __stdcall 
#line 407
GetProcessVersion(DWORD ProcessId); 
#line 412 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\processthreadsapi.h"
#pragma endregion
#line 414
#pragma region Desktop Family or OneCore Family or Games Family
#line 417
__declspec(dllimport) void __stdcall 
#line 420
GetStartupInfoW(LPSTARTUPINFOW lpStartupInfo); 
#line 428 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\processthreadsapi.h"
#pragma endregion
#line 430
#pragma region Desktop Family or OneCore Family
#line 433
__declspec(dllimport) BOOL __stdcall 
#line 436
CreateProcessAsUserW(HANDLE hToken, LPCWSTR lpApplicationName, LPWSTR lpCommandLine, LPSECURITY_ATTRIBUTES lpProcessAttributes, LPSECURITY_ATTRIBUTES lpThreadAttributes, BOOL bInheritHandles, DWORD dwCreationFlags, LPVOID lpEnvironment, LPCWSTR lpCurrentDirectory, LPSTARTUPINFOW lpStartupInfo, LPPROCESS_INFORMATION lpProcessInformation); 
#line 455 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\processthreadsapi.h"
#pragma endregion
#line 457
#pragma region Application Family or OneCore Family
#line 476
__forceinline HANDLE GetCurrentProcessToken() 
#line 479
{ 
#line 480
return (HANDLE)((LONG_PTR)(-4)); 
#line 481
} 
#line 485
__forceinline HANDLE GetCurrentThreadToken() 
#line 488
{ 
#line 489
return (HANDLE)((LONG_PTR)(-5)); 
#line 490
} 
#line 494
__forceinline HANDLE GetCurrentThreadEffectiveToken() 
#line 497
{ 
#line 498
return (HANDLE)((LONG_PTR)(-6)); 
#line 499
} 
#line 504 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\processthreadsapi.h"
__declspec(dllimport) BOOL __stdcall 
#line 508
SetThreadToken(PHANDLE Thread, HANDLE Token); 
#line 514 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\processthreadsapi.h"
#pragma endregion
#line 516
#pragma region Application Family or OneCore Family or Games Family
#line 519
__declspec(dllimport) BOOL __stdcall 
#line 522
OpenProcessToken(HANDLE ProcessHandle, DWORD DesiredAccess, PHANDLE TokenHandle); 
#line 529 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\processthreadsapi.h"
#pragma endregion
#line 531
#pragma region Application Family or OneCore Family
#line 534
__declspec(dllimport) BOOL __stdcall 
#line 537
OpenThreadToken(HANDLE ThreadHandle, DWORD DesiredAccess, BOOL OpenAsSelf, PHANDLE TokenHandle); 
#line 544
__declspec(dllimport) BOOL __stdcall 
#line 547
SetPriorityClass(HANDLE hProcess, DWORD dwPriorityClass); 
#line 552
__declspec(dllimport) DWORD __stdcall 
#line 555
GetPriorityClass(HANDLE hProcess); 
#line 560 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\processthreadsapi.h"
#pragma endregion
#line 562
#pragma region Desktop Family or OneCore Family or Games Family
#line 565
__declspec(dllimport) BOOL __stdcall 
#line 568
SetThreadStackGuarantee(PULONG StackSizeInBytes); 
#line 573 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\processthreadsapi.h"
#pragma endregion
#line 575
#pragma region Desktop Family or OneCore Family
#line 578
__declspec(dllimport) BOOL __stdcall 
#line 581
ProcessIdToSessionId(DWORD dwProcessId, DWORD * pSessionId); 
#line 587 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\processthreadsapi.h"
#pragma endregion
#line 589
#pragma region Application Family or OneCore Family or Games Family
#line 592
typedef struct _PROC_THREAD_ATTRIBUTE_LIST *PPROC_THREAD_ATTRIBUTE_LIST, *LPPROC_THREAD_ATTRIBUTE_LIST; 
#line 595 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\processthreadsapi.h"
#pragma endregion
#line 597
#pragma region Application Family or OneCore Family or Games Family
#line 602
__declspec(dllimport) DWORD __stdcall 
#line 605
GetProcessId(HANDLE Process); 
#line 613 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\processthreadsapi.h"
__declspec(dllimport) DWORD __stdcall 
#line 616
GetThreadId(HANDLE Thread); 
#line 624 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\processthreadsapi.h"
__declspec(dllimport) void __stdcall 
#line 627
FlushProcessWriteBuffers(); 
#line 634 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\processthreadsapi.h"
#pragma endregion
#line 638
#pragma region Application Family or OneCore Family or Games Family
#line 641
__declspec(dllimport) DWORD __stdcall 
#line 644
GetProcessIdOfThread(HANDLE Thread); 
#line 648
__declspec(dllimport) BOOL __stdcall 
#line 652
InitializeProcThreadAttributeList(LPPROC_THREAD_ATTRIBUTE_LIST lpAttributeList, DWORD dwAttributeCount, DWORD dwFlags, PSIZE_T lpSize); 
#line 659
__declspec(dllimport) void __stdcall 
#line 662
DeleteProcThreadAttributeList(LPPROC_THREAD_ATTRIBUTE_LIST lpAttributeList); 
#line 668
__declspec(dllimport) BOOL __stdcall 
#line 671
UpdateProcThreadAttribute(LPPROC_THREAD_ATTRIBUTE_LIST lpAttributeList, DWORD dwFlags, DWORD_PTR Attribute, PVOID lpValue, SIZE_T cbSize, PVOID lpPreviousValue, PSIZE_T lpReturnSize); 
#line 683
__declspec(dllimport) BOOL __stdcall 
#line 686
SetProcessDynamicEHContinuationTargets(HANDLE Process, USHORT NumberOfTargets, PPROCESS_DYNAMIC_EH_CONTINUATION_TARGET Targets); 
#line 696 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\processthreadsapi.h"
__declspec(dllimport) BOOL __stdcall 
#line 699
SetProcessDynamicEnforcedCetCompatibleRanges(HANDLE Process, USHORT NumberOfRanges, PPROCESS_DYNAMIC_ENFORCED_ADDRESS_RANGE Ranges); 
#line 708 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\processthreadsapi.h"
#pragma endregion
#line 710
#pragma region Application Family or OneCore Family
#line 715
__declspec(dllimport) BOOL __stdcall 
#line 718
SetProcessAffinityUpdateMode(HANDLE hProcess, DWORD dwFlags); 
#line 723
__declspec(dllimport) BOOL __stdcall 
#line 726
QueryProcessAffinityUpdateMode(HANDLE hProcess, LPDWORD lpdwFlags); 
#line 732 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\processthreadsapi.h"
#pragma endregion
#line 736 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\processthreadsapi.h"
#pragma region Application Family or OneCore Family or Games Family
#line 739
__declspec(dllimport) HANDLE __stdcall 
#line 743
CreateRemoteThreadEx(HANDLE hProcess, LPSECURITY_ATTRIBUTES lpThreadAttributes, SIZE_T dwStackSize, LPTHREAD_START_ROUTINE lpStartAddress, LPVOID lpParameter, DWORD dwCreationFlags, LPPROC_THREAD_ATTRIBUTE_LIST lpAttributeList, LPDWORD lpThreadId); 
#line 755 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\processthreadsapi.h"
#pragma endregion
#line 759
#pragma region Application Family or OneCore Family or Games Family
#line 764
__declspec(dllimport) void __stdcall 
#line 767
GetCurrentThreadStackLimits(PULONG_PTR LowLimit, PULONG_PTR HighLimit); 
#line 774 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\processthreadsapi.h"
__declspec(dllimport) BOOL __stdcall 
#line 777
GetThreadContext(HANDLE hThread, LPCONTEXT lpContext); 
#line 783 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\processthreadsapi.h"
#pragma endregion
#line 785
#pragma region Application Family or OneCore Family
#line 790
__declspec(dllimport) BOOL __stdcall 
#line 793
GetProcessMitigationPolicy(HANDLE hProcess, PROCESS_MITIGATION_POLICY MitigationPolicy, PVOID lpBuffer, SIZE_T dwLength); 
#line 803 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\processthreadsapi.h"
#pragma endregion
#line 805
#pragma region Desktop Family or OneCore Family or Games Family
#line 808
__declspec(dllimport) BOOL __stdcall 
#line 811
SetThreadContext(HANDLE hThread, const CONTEXT * lpContext); 
#line 817 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\processthreadsapi.h"
#pragma endregion
#line 819
#pragma region Desktop Family or OneCore Family
#line 824
__declspec(dllimport) BOOL __stdcall 
#line 827
SetProcessMitigationPolicy(PROCESS_MITIGATION_POLICY MitigationPolicy, PVOID lpBuffer, SIZE_T dwLength); 
#line 836 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\processthreadsapi.h"
#pragma endregion
#line 840 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\processthreadsapi.h"
#pragma region Application Family or OneCore Family
#line 843
__declspec(dllimport) BOOL __stdcall 
#line 846
FlushInstructionCache(HANDLE hProcess, LPCVOID lpBaseAddress, SIZE_T dwSize); 
#line 853 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\processthreadsapi.h"
#pragma endregion
#line 855
#pragma region Application Family or OneCore Family or Games Family
#line 858
__declspec(dllimport) BOOL __stdcall 
#line 861
GetThreadTimes(HANDLE hThread, LPFILETIME lpCreationTime, LPFILETIME lpExitTime, LPFILETIME lpKernelTime, LPFILETIME lpUserTime); 
#line 869
__declspec(dllimport) HANDLE __stdcall 
#line 872
OpenProcess(DWORD dwDesiredAccess, BOOL bInheritHandle, DWORD dwProcessId); 
#line 878
__declspec(dllimport) BOOL __stdcall 
#line 881
IsProcessorFeaturePresent(DWORD ProcessorFeature); 
#line 886 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\processthreadsapi.h"
#pragma endregion
#line 890
#pragma region Application Family or OneCore Family or Games Family
#line 893
__declspec(dllimport) BOOL __stdcall 
#line 896
GetProcessHandleCount(HANDLE hProcess, PDWORD pdwHandleCount); 
#line 902 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\processthreadsapi.h"
#pragma endregion
#line 908 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\processthreadsapi.h"
#pragma region Application Family or OneCore Family or Games Family
#line 911
__declspec(dllimport) DWORD __stdcall 
#line 914
GetCurrentProcessorNumber(); 
#line 919 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\processthreadsapi.h"
#pragma endregion
#line 925 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\processthreadsapi.h"
#pragma region Application Family or OneCore Family or Games Family
#line 928
__declspec(dllimport) BOOL __stdcall 
#line 931
SetThreadIdealProcessorEx(HANDLE hThread, PPROCESSOR_NUMBER lpIdealProcessor, PPROCESSOR_NUMBER lpPreviousIdealProcessor); 
#line 937
__declspec(dllimport) BOOL __stdcall 
#line 940
GetThreadIdealProcessorEx(HANDLE hThread, PPROCESSOR_NUMBER lpIdealProcessor); 
#line 945
__declspec(dllimport) void __stdcall 
#line 948
GetCurrentProcessorNumberEx(PPROCESSOR_NUMBER ProcNumber); 
#line 953 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\processthreadsapi.h"
#pragma endregion
#line 957 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\processthreadsapi.h"
#pragma region Application Family or OneCore Family or Games Family
#line 962
__declspec(dllimport) BOOL __stdcall 
#line 965
GetProcessPriorityBoost(HANDLE hProcess, PBOOL pDisablePriorityBoost); 
#line 970
__declspec(dllimport) BOOL __stdcall 
#line 973
SetProcessPriorityBoost(HANDLE hProcess, BOOL bDisablePriorityBoost); 
#line 981 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\processthreadsapi.h"
#pragma endregion
#line 983
#pragma region Desktop Family or OneCore Family
#line 988
__declspec(dllimport) BOOL __stdcall 
#line 991
GetThreadIOPendingFlag(HANDLE hThread, PBOOL lpIOIsPending); 
#line 998 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\processthreadsapi.h"
#pragma endregion
#line 1000
#pragma region Application Family or OneCore Family
#line 1005
__declspec(dllimport) BOOL __stdcall 
#line 1008
GetSystemTimes(PFILETIME lpIdleTime, PFILETIME lpKernelTime, PFILETIME lpUserTime); 
#line 1016 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\processthreadsapi.h"
#pragma endregion
#line 1018
#pragma region Application Family or OneCore Family
#line 1031
typedef 
#line 1025
enum _THREAD_INFORMATION_CLASS { 
#line 1026
ThreadMemoryPriority, 
#line 1027
ThreadAbsoluteCpuPriority, 
#line 1028
ThreadDynamicCodePolicy, 
#line 1029
ThreadPowerThrottling, 
#line 1030
ThreadInformationClassMax
#line 1031
} THREAD_INFORMATION_CLASS; 
#line 1037
typedef 
#line 1035
struct _MEMORY_PRIORITY_INFORMATION { 
#line 1036
ULONG MemoryPriority; 
#line 1037
} MEMORY_PRIORITY_INFORMATION, *PMEMORY_PRIORITY_INFORMATION; 
#line 1039
__declspec(dllimport) BOOL __stdcall 
#line 1042
GetThreadInformation(HANDLE hThread, THREAD_INFORMATION_CLASS ThreadInformationClass, LPVOID ThreadInformation, DWORD ThreadInformationSize); 
#line 1049
__declspec(dllimport) BOOL __stdcall 
#line 1052
SetThreadInformation(HANDLE hThread, THREAD_INFORMATION_CLASS ThreadInformationClass, LPVOID ThreadInformation, DWORD ThreadInformationSize); 
#line 1073 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\processthreadsapi.h"
typedef 
#line 1069
struct _THREAD_POWER_THROTTLING_STATE { 
#line 1070
ULONG Version; 
#line 1071
ULONG ControlMask; 
#line 1072
ULONG StateMask; 
#line 1073
} THREAD_POWER_THROTTLING_STATE; 
#line 1078 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\processthreadsapi.h"
#pragma endregion
#line 1080
#pragma region Desktop Family or OneCore Family
#line 1085
__declspec(dllimport) BOOL __stdcall 
#line 1088
IsProcessCritical(HANDLE hProcess, PBOOL Critical); 
#line 1097 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\processthreadsapi.h"
__declspec(dllimport) BOOL __stdcall 
#line 1100
SetProtectedPolicy(LPCGUID PolicyGuid, ULONG_PTR PolicyValue, PULONG_PTR OldPolicyValue); 
#line 1106
__declspec(dllimport) BOOL __stdcall 
#line 1109
QueryProtectedPolicy(LPCGUID PolicyGuid, PULONG_PTR PolicyValue); 
#line 1117 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\processthreadsapi.h"
#pragma endregion
#line 1119
#pragma region Desktop Family or OneCore Family or Games Family
#line 1122
__declspec(dllimport) DWORD __stdcall 
#line 1125
SetThreadIdealProcessor(HANDLE hThread, DWORD dwIdealProcessor); 
#line 1131 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\processthreadsapi.h"
#pragma endregion
#line 1133
#pragma region Application Family or OneCore Family
#line 1148
typedef 
#line 1136
enum _PROCESS_INFORMATION_CLASS { 
#line 1137
ProcessMemoryPriority, 
#line 1138
ProcessMemoryExhaustionInfo, 
#line 1139
ProcessAppMemoryInfo, 
#line 1140
ProcessInPrivateInfo, 
#line 1141
ProcessPowerThrottling, 
#line 1142
ProcessReservedValue1, 
#line 1143
ProcessTelemetryCoverageInfo, 
#line 1144
ProcessProtectionLevelInfo, 
#line 1145
ProcessLeapSecondInfo, 
#line 1146
ProcessMachineTypeInfo, 
#line 1147
ProcessInformationClassMax
#line 1148
} PROCESS_INFORMATION_CLASS; 
#line 1155
typedef 
#line 1150
struct _APP_MEMORY_INFORMATION { 
#line 1151
ULONG64 AvailableCommit; 
#line 1152
ULONG64 PrivateCommitUsage; 
#line 1153
ULONG64 PeakPrivateCommitUsage; 
#line 1154
ULONG64 TotalCommitUsage; 
#line 1155
} APP_MEMORY_INFORMATION, *PAPP_MEMORY_INFORMATION; 
#line 1161
typedef 
#line 1157
enum _MACHINE_ATTRIBUTES { 
#line 1158
UserEnabled = 1, 
#line 1159
KernelEnabled, 
#line 1160
Wow64Container = 4
#line 1161
} MACHINE_ATTRIBUTES; 
#line 1164
extern "C++" {constexpr MACHINE_ATTRIBUTES operator|(MACHINE_ATTRIBUTES a, MACHINE_ATTRIBUTES b) noexcept { return (MACHINE_ATTRIBUTES)(((_ENUM_FLAG_SIZED_INTEGER< _MACHINE_ATTRIBUTES> ::type)a) | ((_ENUM_FLAG_SIZED_INTEGER< _MACHINE_ATTRIBUTES> ::type)b)); } inline MACHINE_ATTRIBUTES &operator|=(MACHINE_ATTRIBUTES &a, MACHINE_ATTRIBUTES b) noexcept { return (MACHINE_ATTRIBUTES &)(((_ENUM_FLAG_SIZED_INTEGER< _MACHINE_ATTRIBUTES> ::type &)a) |= ((_ENUM_FLAG_SIZED_INTEGER< _MACHINE_ATTRIBUTES> ::type)b)); } constexpr MACHINE_ATTRIBUTES operator&(MACHINE_ATTRIBUTES a, MACHINE_ATTRIBUTES b) noexcept { return (MACHINE_ATTRIBUTES)(((_ENUM_FLAG_SIZED_INTEGER< _MACHINE_ATTRIBUTES> ::type)a) & ((_ENUM_FLAG_SIZED_INTEGER< _MACHINE_ATTRIBUTES> ::type)b)); } inline MACHINE_ATTRIBUTES &operator&=(MACHINE_ATTRIBUTES &a, MACHINE_ATTRIBUTES b) noexcept { return (MACHINE_ATTRIBUTES &)(((_ENUM_FLAG_SIZED_INTEGER< _MACHINE_ATTRIBUTES> ::type &)a) &= ((_ENUM_FLAG_SIZED_INTEGER< _MACHINE_ATTRIBUTES> ::type)b)); } constexpr MACHINE_ATTRIBUTES operator~(MACHINE_ATTRIBUTES a) noexcept { return (MACHINE_ATTRIBUTES)(~((_ENUM_FLAG_SIZED_INTEGER< _MACHINE_ATTRIBUTES> ::type)a)); } constexpr MACHINE_ATTRIBUTES operator^(MACHINE_ATTRIBUTES a, MACHINE_ATTRIBUTES b) noexcept { return (MACHINE_ATTRIBUTES)(((_ENUM_FLAG_SIZED_INTEGER< _MACHINE_ATTRIBUTES> ::type)a) ^ ((_ENUM_FLAG_SIZED_INTEGER< _MACHINE_ATTRIBUTES> ::type)b)); } inline MACHINE_ATTRIBUTES &operator^=(MACHINE_ATTRIBUTES &a, MACHINE_ATTRIBUTES b) noexcept { return (MACHINE_ATTRIBUTES &)(((_ENUM_FLAG_SIZED_INTEGER< _MACHINE_ATTRIBUTES> ::type &)a) ^= ((_ENUM_FLAG_SIZED_INTEGER< _MACHINE_ATTRIBUTES> ::type)b)); } }
#line 1171 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\processthreadsapi.h"
typedef 
#line 1167
struct _PROCESS_MACHINE_INFORMATION { 
#line 1168
USHORT ProcessMachine; 
#line 1169
USHORT Res0; 
#line 1170
MACHINE_ATTRIBUTES MachineAttributes; 
#line 1171
} PROCESS_MACHINE_INFORMATION; 
#line 1183
typedef 
#line 1180
enum _PROCESS_MEMORY_EXHAUSTION_TYPE { 
#line 1181
PMETypeFailFastOnCommitFailure, 
#line 1182
PMETypeMax
#line 1183
} PROCESS_MEMORY_EXHAUSTION_TYPE, *PPROCESS_MEMORY_EXHAUSTION_TYPE; 
#line 1193
typedef 
#line 1188
struct _PROCESS_MEMORY_EXHAUSTION_INFO { 
#line 1189
USHORT Version; 
#line 1190
USHORT Reserved; 
#line 1191
PROCESS_MEMORY_EXHAUSTION_TYPE Type; 
#line 1192
ULONG_PTR Value; 
#line 1193
} PROCESS_MEMORY_EXHAUSTION_INFO, *PPROCESS_MEMORY_EXHAUSTION_INFO; 
#line 1207
typedef 
#line 1203
struct _PROCESS_POWER_THROTTLING_STATE { 
#line 1204
ULONG Version; 
#line 1205
ULONG ControlMask; 
#line 1206
ULONG StateMask; 
#line 1207
} PROCESS_POWER_THROTTLING_STATE, *PPROCESS_POWER_THROTTLING_STATE; 
#line 1211
typedef 
#line 1209
struct PROCESS_PROTECTION_LEVEL_INFORMATION { 
#line 1210
DWORD ProtectionLevel; 
#line 1211
} PROCESS_PROTECTION_LEVEL_INFORMATION; 
#line 1220
typedef 
#line 1217
struct _PROCESS_LEAP_SECOND_INFO { 
#line 1218
ULONG Flags; 
#line 1219
ULONG Reserved; 
#line 1220
} PROCESS_LEAP_SECOND_INFO, *PPROCESS_LEAP_SECOND_INFO; 
#line 1224
__declspec(dllimport) BOOL __stdcall 
#line 1227
SetProcessInformation(HANDLE hProcess, PROCESS_INFORMATION_CLASS ProcessInformationClass, LPVOID ProcessInformation, DWORD ProcessInformationSize); 
#line 1234
__declspec(dllimport) BOOL __stdcall 
#line 1237
GetProcessInformation(HANDLE hProcess, PROCESS_INFORMATION_CLASS ProcessInformationClass, LPVOID ProcessInformation, DWORD ProcessInformationSize); 
#line 1251 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\processthreadsapi.h"
BOOL __stdcall GetSystemCpuSetInformation(PSYSTEM_CPU_SET_INFORMATION Information, ULONG BufferLength, PULONG ReturnedLength, HANDLE Process, ULONG Flags); 
#line 1262
BOOL __stdcall GetProcessDefaultCpuSets(HANDLE Process, PULONG CpuSetIds, ULONG CpuSetIdCount, PULONG RequiredIdCount); 
#line 1272
BOOL __stdcall SetProcessDefaultCpuSets(HANDLE Process, const ULONG * CpuSetIds, ULONG CpuSetIdCount); 
#line 1281
BOOL __stdcall GetThreadSelectedCpuSets(HANDLE Thread, PULONG CpuSetIds, ULONG CpuSetIdCount, PULONG RequiredIdCount); 
#line 1291
BOOL __stdcall SetThreadSelectedCpuSets(HANDLE Thread, const ULONG * CpuSetIds, ULONG CpuSetIdCount); 
#line 1300 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\processthreadsapi.h"
#pragma endregion
#line 1302
#pragma region Desktop Family or OneCore Family
#line 1305
__declspec(dllimport) BOOL __stdcall 
#line 1308
CreateProcessAsUserA(HANDLE hToken, LPCSTR lpApplicationName, LPSTR lpCommandLine, LPSECURITY_ATTRIBUTES lpProcessAttributes, LPSECURITY_ATTRIBUTES lpThreadAttributes, BOOL bInheritHandles, DWORD dwCreationFlags, LPVOID lpEnvironment, LPCSTR lpCurrentDirectory, LPSTARTUPINFOA lpStartupInfo, LPPROCESS_INFORMATION lpProcessInformation); 
#line 1326 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\processthreadsapi.h"
__declspec(dllimport) BOOL __stdcall 
#line 1329
GetProcessShutdownParameters(LPDWORD lpdwLevel, LPDWORD lpdwFlags); 
#line 1335 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\processthreadsapi.h"
#pragma endregion
#line 1337
#pragma region Application Family or OneCore Family
#line 1345
BOOL __stdcall GetProcessDefaultCpuSetMasks(HANDLE Process, PGROUP_AFFINITY CpuSetMasks, USHORT CpuSetMaskCount, PUSHORT RequiredMaskCount); 
#line 1355
BOOL __stdcall SetProcessDefaultCpuSetMasks(HANDLE Process, PGROUP_AFFINITY CpuSetMasks, USHORT CpuSetMaskCount); 
#line 1364
BOOL __stdcall GetThreadSelectedCpuSetMasks(HANDLE Thread, PGROUP_AFFINITY CpuSetMasks, USHORT CpuSetMaskCount, PUSHORT RequiredMaskCount); 
#line 1374
BOOL __stdcall SetThreadSelectedCpuSetMasks(HANDLE Thread, PGROUP_AFFINITY CpuSetMasks, USHORT CpuSetMaskCount); 
#line 1383 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\processthreadsapi.h"
#pragma endregion
#line 1385
#pragma region Application Family or OneCore Family
#line 1391
HRESULT __stdcall GetMachineTypeAttributes(USHORT Machine, MACHINE_ATTRIBUTES * MachineTypeAttributes); 
#line 1398 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\processthreadsapi.h"
#pragma endregion
#line 1400
__declspec(dllimport) HRESULT __stdcall 
#line 1403
SetThreadDescription(HANDLE hThread, PCWSTR lpThreadDescription); 
#line 1408
__declspec(dllimport) HRESULT __stdcall 
#line 1411
GetThreadDescription(HANDLE hThread, PWSTR * ppszThreadDescription); 
#line 1417
}
#line 22 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\sysinfoapi.h"
#pragma warning(disable:4514)
#line 24
#pragma warning(disable:4103)
#line 27 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\sysinfoapi.h"
#pragma warning(push)
#line 29 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\sysinfoapi.h"
#pragma warning(disable:4001)
#pragma warning(disable:4201)
#pragma warning(disable:4214)
#line 41 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\sysinfoapi.h"
extern "C" {
#line 44 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\sysinfoapi.h"
#pragma region Application Family or OneCore Family or Games Family
#line 64
typedef 
#line 47
struct _SYSTEM_INFO { 
#line 48
union { 
#line 49
DWORD dwOemId; 
#line 50
struct { 
#line 51
WORD wProcessorArchitecture; 
#line 52
WORD wReserved; 
#line 53
}; 
#line 54
}; 
#line 55
DWORD dwPageSize; 
#line 56
LPVOID lpMinimumApplicationAddress; 
#line 57
LPVOID lpMaximumApplicationAddress; 
#line 58
DWORD_PTR dwActiveProcessorMask; 
#line 59
DWORD dwNumberOfProcessors; 
#line 60
DWORD dwProcessorType; 
#line 61
DWORD dwAllocationGranularity; 
#line 62
WORD wProcessorLevel; 
#line 63
WORD wProcessorRevision; 
#line 64
} SYSTEM_INFO, *LPSYSTEM_INFO; 
#line 76
typedef 
#line 66
struct _MEMORYSTATUSEX { 
#line 67
DWORD dwLength; 
#line 68
DWORD dwMemoryLoad; 
#line 69
DWORDLONG ullTotalPhys; 
#line 70
DWORDLONG ullAvailPhys; 
#line 71
DWORDLONG ullTotalPageFile; 
#line 72
DWORDLONG ullAvailPageFile; 
#line 73
DWORDLONG ullTotalVirtual; 
#line 74
DWORDLONG ullAvailVirtual; 
#line 75
DWORDLONG ullAvailExtendedVirtual; 
#line 76
} MEMORYSTATUSEX, *LPMEMORYSTATUSEX; 
#line 83
__declspec(dllimport) BOOL __stdcall 
#line 86
GlobalMemoryStatusEx(LPMEMORYSTATUSEX lpBuffer); 
#line 90
__declspec(dllimport) void __stdcall 
#line 93
GetSystemInfo(LPSYSTEM_INFO lpSystemInfo); 
#line 97
__declspec(dllimport) void __stdcall 
#line 100
GetSystemTime(LPSYSTEMTIME lpSystemTime); 
#line 104
__declspec(dllimport) void __stdcall 
#line 107
GetSystemTimeAsFileTime(LPFILETIME lpSystemTimeAsFileTime); 
#line 111
__declspec(dllimport) void __stdcall 
#line 114
GetLocalTime(LPSYSTEMTIME lpSystemTime); 
#line 120
__declspec(dllimport) BOOL __stdcall 
#line 123
IsUserCetAvailableInEnvironment(DWORD UserCetEnvironment); 
#line 130 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\sysinfoapi.h"
#pragma endregion
#line 132
#pragma region Application Family or OneCore Family
#line 137
__declspec(dllimport) BOOL __stdcall 
#line 140
GetSystemLeapSecondInformation(PBOOL Enabled, PDWORD Flags); 
#line 148 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\sysinfoapi.h"
#pragma endregion
#line 150
#pragma region Desktop Family or OneCore Family or Games Family
#line 153
__declspec(deprecated) 
#line 155
__declspec(dllimport) DWORD __stdcall 
#line 159
GetVersion(); 
#line 163
__declspec(dllimport) BOOL __stdcall 
#line 166
SetLocalTime(const SYSTEMTIME * lpSystemTime); 
#line 171 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\sysinfoapi.h"
#pragma endregion
#line 173
#pragma region Application Family or OneCore Family or Games Family
#line 177
__declspec(dllimport) DWORD __stdcall 
#line 180
GetTickCount(); 
#line 186
__declspec(dllimport) ULONGLONG __stdcall 
#line 189
GetTickCount64(); 
#line 196 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\sysinfoapi.h"
#pragma endregion
#line 198
#pragma region Desktop Family or OneCore Family or Games Family
#line 201
__declspec(dllimport) BOOL __stdcall 
#line 205
GetSystemTimeAdjustment(PDWORD lpTimeAdjustment, PDWORD lpTimeIncrement, PBOOL lpTimeAdjustmentDisabled); 
#line 212 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\sysinfoapi.h"
#pragma endregion
#line 214
#pragma region Desktop Family or OneCore Family
#line 217
__declspec(dllimport) BOOL __stdcall 
#line 221
GetSystemTimeAdjustmentPrecise(PDWORD64 lpTimeAdjustment, PDWORD64 lpTimeIncrement, PBOOL lpTimeAdjustmentDisabled); 
#line 228 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\sysinfoapi.h"
#pragma endregion
#line 230
#pragma region Application Family or OneCore Family or Games Family
#line 233
__declspec(dllimport) UINT __stdcall 
#line 237
GetSystemDirectoryA(LPSTR lpBuffer, UINT uSize); 
#line 242
__declspec(dllimport) UINT __stdcall 
#line 246
GetSystemDirectoryW(LPWSTR lpBuffer, UINT uSize); 
#line 257 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\sysinfoapi.h"
#pragma endregion
#line 259
#pragma region Desktop Family or OneCore Family or Games Family
#line 262
__declspec(dllimport) UINT __stdcall 
#line 267
GetWindowsDirectoryA(LPSTR lpBuffer, UINT uSize); 
#line 272
__declspec(dllimport) UINT __stdcall 
#line 277
GetWindowsDirectoryW(LPWSTR lpBuffer, UINT uSize); 
#line 288 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\sysinfoapi.h"
#pragma endregion
#line 290
#pragma region Application Family or OneCore Family or Games Family
#line 293
__declspec(dllimport) UINT __stdcall 
#line 297
GetSystemWindowsDirectoryA(LPSTR lpBuffer, UINT uSize); 
#line 302
__declspec(dllimport) UINT __stdcall 
#line 306
GetSystemWindowsDirectoryW(LPWSTR lpBuffer, UINT uSize); 
#line 317 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\sysinfoapi.h"
#pragma endregion
#line 319
#pragma region Desktop Family or OneCore Family or Games Family
#line 332
typedef 
#line 322
enum _COMPUTER_NAME_FORMAT { 
#line 323
ComputerNameNetBIOS, 
#line 324
ComputerNameDnsHostname, 
#line 325
ComputerNameDnsDomain, 
#line 326
ComputerNameDnsFullyQualified, 
#line 327
ComputerNamePhysicalNetBIOS, 
#line 328
ComputerNamePhysicalDnsHostname, 
#line 329
ComputerNamePhysicalDnsDomain, 
#line 330
ComputerNamePhysicalDnsFullyQualified, 
#line 331
ComputerNameMax
#line 332
} COMPUTER_NAME_FORMAT; 
#line 334
__declspec(dllimport) BOOL __stdcall 
#line 338
GetComputerNameExA(COMPUTER_NAME_FORMAT NameType, LPSTR lpBuffer, LPDWORD nSize); 
#line 344
__declspec(dllimport) BOOL __stdcall 
#line 348
GetComputerNameExW(COMPUTER_NAME_FORMAT NameType, LPWSTR lpBuffer, LPDWORD nSize); 
#line 360 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\sysinfoapi.h"
#pragma endregion
#line 362
#pragma region Desktop Family or OneCore Family
#line 365
__declspec(dllimport) BOOL __stdcall 
#line 368
SetComputerNameExW(COMPUTER_NAME_FORMAT NameType, LPCWSTR lpBuffer); 
#line 377
__declspec(dllimport) BOOL __stdcall 
#line 380
SetSystemTime(const SYSTEMTIME * lpSystemTime); 
#line 385 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\sysinfoapi.h"
#pragma endregion
#line 387
#pragma region Application Family or OneCore Family or Games Family
#line 390
__declspec(deprecated) 
#line 392
__declspec(dllimport) BOOL __stdcall 
#line 396
GetVersionExA(LPOSVERSIONINFOA lpVersionInformation); 
#line 399
__declspec(deprecated) 
#line 401
__declspec(dllimport) BOOL __stdcall 
#line 405
GetVersionExW(LPOSVERSIONINFOW lpVersionInformation); 
#line 414 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\sysinfoapi.h"
__declspec(dllimport) BOOL __stdcall 
#line 417
GetLogicalProcessorInformation(PSYSTEM_LOGICAL_PROCESSOR_INFORMATION Buffer, PDWORD ReturnedLength); 
#line 424
__declspec(dllimport) BOOL __stdcall 
#line 427
GetLogicalProcessorInformationEx(LOGICAL_PROCESSOR_RELATIONSHIP RelationshipType, PSYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX Buffer, PDWORD ReturnedLength); 
#line 437 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\sysinfoapi.h"
__declspec(dllimport) void __stdcall 
#line 440
GetNativeSystemInfo(LPSYSTEM_INFO lpSystemInfo); 
#line 448 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\sysinfoapi.h"
__declspec(dllimport) void __stdcall 
#line 451
GetSystemTimePreciseAsFileTime(LPFILETIME lpSystemTimeAsFileTime); 
#line 458 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\sysinfoapi.h"
#pragma endregion
#line 460
#pragma region Application Family or OneCore Family
#line 465
__declspec(dllimport) BOOL __stdcall 
#line 468
GetProductInfo(DWORD dwOSMajorVersion, DWORD dwOSMinorVersion, DWORD dwSpMajorVersion, DWORD dwSpMinorVersion, PDWORD pdwReturnedProductType); 
#line 479 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\sysinfoapi.h"
#pragma endregion
#line 481
#pragma region Desktop Family or OneCore Family
#line 486
__declspec(dllimport) ULONGLONG __stdcall 
#line 489
VerSetConditionMask(ULONGLONG ConditionMask, ULONG TypeMask, UCHAR Condition); 
#line 499 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\sysinfoapi.h"
__declspec(dllimport) BOOL __stdcall 
#line 502
GetOsSafeBootMode(PDWORD Flags); 
#line 509 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\sysinfoapi.h"
#pragma endregion
#line 511
#pragma region OneCore Family or App Family
#line 514
__declspec(dllimport) UINT __stdcall 
#line 517
EnumSystemFirmwareTables(DWORD FirmwareTableProviderSignature, PVOID pFirmwareTableEnumBuffer, DWORD BufferSize); 
#line 523
__declspec(dllimport) UINT __stdcall 
#line 526
GetSystemFirmwareTable(DWORD FirmwareTableProviderSignature, DWORD FirmwareTableID, PVOID pFirmwareTableBuffer, DWORD BufferSize); 
#line 534 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\sysinfoapi.h"
#pragma endregion
#line 536
#pragma region Desktop Family or OneCore Family
#line 539
__declspec(dllimport) BOOL __stdcall 
#line 543
DnsHostnameToComputerNameExW(LPCWSTR Hostname, LPWSTR ComputerName, LPDWORD nSize); 
#line 549
__declspec(dllimport) BOOL __stdcall 
#line 553
GetPhysicallyInstalledSystemMemory(PULONGLONG TotalMemoryInKilobytes); 
#line 559
__declspec(dllimport) BOOL __stdcall 
#line 562
SetComputerNameEx2W(COMPUTER_NAME_FORMAT NameType, DWORD Flags, LPCWSTR lpBuffer); 
#line 572
__declspec(dllimport) BOOL __stdcall 
#line 576
SetSystemTimeAdjustment(DWORD dwTimeAdjustment, BOOL bTimeAdjustmentDisabled); 
#line 581
__declspec(dllimport) BOOL __stdcall 
#line 585
SetSystemTimeAdjustmentPrecise(DWORD64 dwTimeAdjustment, BOOL bTimeAdjustmentDisabled); 
#line 590
__declspec(dllimport) BOOL __stdcall 
#line 593
InstallELAMCertificateInfo(HANDLE ELAMFile); 
#line 598 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\sysinfoapi.h"
#pragma endregion
#line 602
__declspec(dllimport) BOOL __stdcall 
#line 605
GetProcessorSystemCycleTime(USHORT Group, PSYSTEM_PROCESSOR_CYCLE_TIME_INFORMATION Buffer, PDWORD ReturnedLength); 
#line 613 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\sysinfoapi.h"
#pragma region Desktop Family or OneCore Family
#line 618
__declspec(dllimport) BOOL __stdcall 
#line 621
GetOsManufacturingMode(PBOOL pbEnabled); 
#line 627 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\sysinfoapi.h"
#pragma endregion
#line 629
#pragma region App Family or OneCore Family
#line 634
__declspec(dllimport) HRESULT __stdcall 
#line 637
GetIntegratedDisplaySize(double * sizeInInches); 
#line 644 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\sysinfoapi.h"
#pragma endregion
#line 646
#pragma region Desktop Family or OneCore Family
#line 649
__declspec(dllimport) BOOL __stdcall 
#line 652
SetComputerNameA(LPCSTR lpComputerName); 
#line 656
__declspec(dllimport) BOOL __stdcall 
#line 659
SetComputerNameW(LPCWSTR lpComputerName); 
#line 668 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\sysinfoapi.h"
__declspec(dllimport) BOOL __stdcall 
#line 671
SetComputerNameExA(COMPUTER_NAME_FORMAT NameType, LPCSTR lpBuffer); 
#line 684 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\sysinfoapi.h"
}
#line 681
#pragma endregion
#line 689 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\sysinfoapi.h"
#pragma warning(pop)
#line 22 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\memoryapi.h"
extern "C" {
#line 26 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\memoryapi.h"
#pragma warning(push)
#pragma warning(disable:4668)
#line 30 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\memoryapi.h"
#pragma region Application Family or OneCore Family or Games Family
#line 46 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\memoryapi.h"
#pragma endregion
#line 48
#pragma region Desktop Family or OneCore Family or Games Family
#line 51
__declspec(dllimport) LPVOID __stdcall 
#line 56
VirtualAlloc(LPVOID lpAddress, SIZE_T dwSize, DWORD flAllocationType, DWORD flProtect); 
#line 63
__declspec(dllimport) BOOL __stdcall 
#line 67
VirtualProtect(LPVOID lpAddress, SIZE_T dwSize, DWORD flNewProtect, PDWORD lpflOldProtect); 
#line 75 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\memoryapi.h"
#pragma endregion
#line 77
#pragma region Application Family or OneCore Family or Games Family
#line 89 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\memoryapi.h"
__declspec(dllimport) BOOL __stdcall 
#line 92
VirtualFree(LPVOID lpAddress, SIZE_T dwSize, DWORD dwFreeType); 
#line 98
__declspec(dllimport) SIZE_T __stdcall 
#line 101
VirtualQuery(LPCVOID lpAddress, PMEMORY_BASIC_INFORMATION lpBuffer, SIZE_T dwLength); 
#line 107
__declspec(dllimport) LPVOID __stdcall 
#line 112
VirtualAllocEx(HANDLE hProcess, LPVOID lpAddress, SIZE_T dwSize, DWORD flAllocationType, DWORD flProtect); 
#line 120
__declspec(dllimport) BOOL __stdcall 
#line 124
VirtualProtectEx(HANDLE hProcess, LPVOID lpAddress, SIZE_T dwSize, DWORD flNewProtect, PDWORD lpflOldProtect); 
#line 133 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\memoryapi.h"
#pragma endregion
#line 135
#pragma region Desktop Family or OneCore Family or Games Family
#line 138
__declspec(dllimport) SIZE_T __stdcall 
#line 141
VirtualQueryEx(HANDLE hProcess, LPCVOID lpAddress, PMEMORY_BASIC_INFORMATION lpBuffer, SIZE_T dwLength); 
#line 148
__declspec(dllimport) BOOL __stdcall 
#line 152
ReadProcessMemory(HANDLE hProcess, LPCVOID lpBaseAddress, LPVOID lpBuffer, SIZE_T nSize, SIZE_T * lpNumberOfBytesRead); 
#line 160
__declspec(dllimport) BOOL __stdcall 
#line 164
WriteProcessMemory(HANDLE hProcess, LPVOID lpBaseAddress, LPCVOID lpBuffer, SIZE_T nSize, SIZE_T * lpNumberOfBytesWritten); 
#line 172
__declspec(dllimport) HANDLE __stdcall 
#line 176
CreateFileMappingW(HANDLE hFile, LPSECURITY_ATTRIBUTES lpFileMappingAttributes, DWORD flProtect, DWORD dwMaximumSizeHigh, DWORD dwMaximumSizeLow, LPCWSTR lpName); 
#line 189
__declspec(dllimport) HANDLE __stdcall 
#line 193
OpenFileMappingW(DWORD dwDesiredAccess, BOOL bInheritHandle, LPCWSTR lpName); 
#line 203
__declspec(dllimport) LPVOID __stdcall 
#line 207
MapViewOfFile(HANDLE hFileMappingObject, DWORD dwDesiredAccess, DWORD dwFileOffsetHigh, DWORD dwFileOffsetLow, SIZE_T dwNumberOfBytesToMap); 
#line 215
__declspec(dllimport) LPVOID __stdcall 
#line 219
MapViewOfFileEx(HANDLE hFileMappingObject, DWORD dwDesiredAccess, DWORD dwFileOffsetHigh, DWORD dwFileOffsetLow, SIZE_T dwNumberOfBytesToMap, LPVOID lpBaseAddress); 
#line 229 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\memoryapi.h"
#pragma endregion
#line 231
#pragma region Application Family or OneCore Family or Games Family
#line 246 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\memoryapi.h"
__declspec(dllimport) BOOL __stdcall 
#line 249
VirtualFreeEx(HANDLE hProcess, LPVOID lpAddress, SIZE_T dwSize, DWORD dwFreeType); 
#line 257 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\memoryapi.h"
#pragma endregion
#line 259
#pragma region Application Family or OneCore Family
#line 262
__declspec(dllimport) BOOL __stdcall 
#line 265
FlushViewOfFile(LPCVOID lpBaseAddress, SIZE_T dwNumberOfBytesToFlush); 
#line 271 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\memoryapi.h"
#pragma endregion
#line 273
#pragma region Application Family or OneCore Family or Games Family
#line 276
__declspec(dllimport) BOOL __stdcall 
#line 279
UnmapViewOfFile(LPCVOID lpBaseAddress); 
#line 284 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\memoryapi.h"
#pragma endregion
#line 286
#pragma region Application Family or OneCore Family
#line 289
__declspec(dllimport) SIZE_T __stdcall 
#line 292
GetLargePageMinimum(); 
#line 296
__declspec(dllimport) BOOL __stdcall 
#line 299
GetProcessWorkingSetSize(HANDLE hProcess, PSIZE_T lpMinimumWorkingSetSize, PSIZE_T lpMaximumWorkingSetSize); 
#line 305
__declspec(dllimport) BOOL __stdcall 
#line 309
GetProcessWorkingSetSizeEx(HANDLE hProcess, PSIZE_T lpMinimumWorkingSetSize, PSIZE_T lpMaximumWorkingSetSize, PDWORD Flags); 
#line 316
__declspec(dllimport) BOOL __stdcall 
#line 319
SetProcessWorkingSetSize(HANDLE hProcess, SIZE_T dwMinimumWorkingSetSize, SIZE_T dwMaximumWorkingSetSize); 
#line 325
__declspec(dllimport) BOOL __stdcall 
#line 328
SetProcessWorkingSetSizeEx(HANDLE hProcess, SIZE_T dwMinimumWorkingSetSize, SIZE_T dwMaximumWorkingSetSize, DWORD Flags); 
#line 336 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\memoryapi.h"
#pragma endregion
#line 338
#pragma region Desktop Family or OneCore Family
#line 341
__declspec(dllimport) BOOL __stdcall 
#line 344
VirtualLock(LPVOID lpAddress, SIZE_T dwSize); 
#line 349
__declspec(dllimport) BOOL __stdcall 
#line 352
VirtualUnlock(LPVOID lpAddress, SIZE_T dwSize); 
#line 358 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\memoryapi.h"
#pragma endregion
#line 360
#pragma region Application Family or OneCore Family
#line 363
__declspec(dllimport) UINT __stdcall 
#line 367
GetWriteWatch(DWORD dwFlags, PVOID lpBaseAddress, SIZE_T dwRegionSize, PVOID * lpAddresses, ULONG_PTR * lpdwCount, LPDWORD lpdwGranularity); 
#line 376
__declspec(dllimport) UINT __stdcall 
#line 379
ResetWriteWatch(LPVOID lpBaseAddress, SIZE_T dwRegionSize); 
#line 385 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\memoryapi.h"
#pragma endregion
#line 387
#pragma region Desktop Family or OneCore Family
#line 395
typedef 
#line 392
enum _MEMORY_RESOURCE_NOTIFICATION_TYPE { 
#line 393
LowMemoryResourceNotification, 
#line 394
HighMemoryResourceNotification
#line 395
} MEMORY_RESOURCE_NOTIFICATION_TYPE; 
#line 397
__declspec(dllimport) HANDLE __stdcall 
#line 401
CreateMemoryResourceNotification(MEMORY_RESOURCE_NOTIFICATION_TYPE NotificationType); 
#line 405
__declspec(dllimport) BOOL __stdcall 
#line 409
QueryMemoryResourceNotification(HANDLE ResourceNotificationHandle, PBOOL ResourceState); 
#line 417 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\memoryapi.h"
#pragma endregion
#line 419
#pragma region Desktop Family or OneCore Family
#line 430
__declspec(dllimport) BOOL __stdcall 
#line 434
GetSystemFileCacheSize(PSIZE_T lpMinimumFileCacheSize, PSIZE_T lpMaximumFileCacheSize, PDWORD lpFlags); 
#line 440
__declspec(dllimport) BOOL __stdcall 
#line 443
SetSystemFileCacheSize(SIZE_T MinimumFileCacheSize, SIZE_T MaximumFileCacheSize, DWORD Flags); 
#line 452 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\memoryapi.h"
#pragma endregion
#line 454
#pragma region Desktop Family or OneCore Family
#line 459
__declspec(dllimport) HANDLE __stdcall 
#line 463
CreateFileMappingNumaW(HANDLE hFile, LPSECURITY_ATTRIBUTES lpFileMappingAttributes, DWORD flProtect, DWORD dwMaximumSizeHigh, DWORD dwMaximumSizeLow, LPCWSTR lpName, DWORD nndPreferred); 
#line 484 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\memoryapi.h"
typedef 
#line 481
struct _WIN32_MEMORY_RANGE_ENTRY { 
#line 482
PVOID VirtualAddress; 
#line 483
SIZE_T NumberOfBytes; 
#line 484
} WIN32_MEMORY_RANGE_ENTRY, *PWIN32_MEMORY_RANGE_ENTRY; 
#line 486
__declspec(dllimport) BOOL __stdcall 
#line 489
PrefetchVirtualMemory(HANDLE hProcess, ULONG_PTR NumberOfEntries, PWIN32_MEMORY_RANGE_ENTRY VirtualAddresses, ULONG Flags); 
#line 499 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\memoryapi.h"
#pragma endregion
#line 501
#pragma region Application Family or OneCore Family
#line 506
__declspec(dllimport) HANDLE __stdcall 
#line 510
CreateFileMappingFromApp(HANDLE hFile, PSECURITY_ATTRIBUTES SecurityAttributes, ULONG PageProtection, ULONG64 MaximumSize, PCWSTR Name); 
#line 518
__declspec(dllimport) PVOID __stdcall 
#line 522
MapViewOfFileFromApp(HANDLE hFileMappingObject, ULONG DesiredAccess, ULONG64 FileOffset, SIZE_T NumberOfBytesToMap); 
#line 529
__declspec(dllimport) BOOL __stdcall 
#line 532
UnmapViewOfFileEx(PVOID BaseAddress, ULONG UnmapFlags); 
#line 540 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\memoryapi.h"
#pragma endregion
#line 542
#pragma region Desktop Family or OneCore Family
#line 547
__declspec(dllimport) BOOL __stdcall 
#line 551
AllocateUserPhysicalPages(HANDLE hProcess, PULONG_PTR NumberOfPages, PULONG_PTR PageArray); 
#line 557
__declspec(dllimport) BOOL __stdcall 
#line 561
FreeUserPhysicalPages(HANDLE hProcess, PULONG_PTR NumberOfPages, PULONG_PTR PageArray); 
#line 567
__declspec(dllimport) BOOL __stdcall 
#line 571
MapUserPhysicalPages(PVOID VirtualAddress, ULONG_PTR NumberOfPages, PULONG_PTR PageArray); 
#line 581 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\memoryapi.h"
__declspec(dllimport) BOOL __stdcall 
#line 585
AllocateUserPhysicalPagesNuma(HANDLE hProcess, PULONG_PTR NumberOfPages, PULONG_PTR PageArray, DWORD nndPreferred); 
#line 592
__declspec(dllimport) LPVOID __stdcall 
#line 596
VirtualAllocExNuma(HANDLE hProcess, LPVOID lpAddress, SIZE_T dwSize, DWORD flAllocationType, DWORD flProtect, DWORD nndPreferred); 
#line 611 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\memoryapi.h"
__declspec(dllimport) BOOL __stdcall 
#line 615
GetMemoryErrorHandlingCapabilities(PULONG Capabilities); 
#line 623
typedef void __stdcall BAD_MEMORY_CALLBACK_ROUTINE(void); 
#line 627
typedef BAD_MEMORY_CALLBACK_ROUTINE *PBAD_MEMORY_CALLBACK_ROUTINE; 
#line 629
__declspec(dllimport) PVOID __stdcall 
#line 633
RegisterBadMemoryNotification(PBAD_MEMORY_CALLBACK_ROUTINE Callback); 
#line 637
__declspec(dllimport) BOOL __stdcall 
#line 641
UnregisterBadMemoryNotification(PVOID RegistrationHandle); 
#line 648 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\memoryapi.h"
#pragma endregion
#line 650
#pragma region Application Family or OneCore Family
#line 668
typedef 
#line 663
enum OFFER_PRIORITY { 
#line 664
VmOfferPriorityVeryLow = 1, 
#line 665
VmOfferPriorityLow, 
#line 666
VmOfferPriorityBelowNormal, 
#line 667
VmOfferPriorityNormal
#line 668
} OFFER_PRIORITY; 
#line 672
DWORD __stdcall OfferVirtualMemory(PVOID VirtualAddress, SIZE_T Size, OFFER_PRIORITY Priority); 
#line 680
DWORD __stdcall ReclaimVirtualMemory(const void * VirtualAddress, SIZE_T Size); 
#line 687
DWORD __stdcall DiscardVirtualMemory(PVOID VirtualAddress, SIZE_T Size); 
#line 698 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\memoryapi.h"
__declspec(dllimport) BOOL __stdcall 
#line 701
SetProcessValidCallTargets(HANDLE hProcess, PVOID VirtualAddress, SIZE_T RegionSize, ULONG NumberOfOffsets, PCFG_CALL_TARGET_INFO OffsetInformation); 
#line 709
__declspec(dllimport) BOOL __stdcall 
#line 712
SetProcessValidCallTargetsForMappedView(HANDLE Process, PVOID VirtualAddress, SIZE_T RegionSize, ULONG NumberOfOffsets, PCFG_CALL_TARGET_INFO OffsetInformation, HANDLE Section, ULONG64 ExpectedFileOffset); 
#line 722
__declspec(dllimport) PVOID __stdcall 
#line 727
VirtualAllocFromApp(PVOID BaseAddress, SIZE_T Size, ULONG AllocationType, ULONG Protection); 
#line 734
__declspec(dllimport) BOOL __stdcall 
#line 738
VirtualProtectFromApp(PVOID Address, SIZE_T Size, ULONG NewProtection, PULONG OldProtection); 
#line 745
__declspec(dllimport) HANDLE __stdcall 
#line 749
OpenFileMappingFromApp(ULONG DesiredAccess, BOOL InheritHandle, PCWSTR Name); 
#line 758 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\memoryapi.h"
#pragma endregion
#line 760
#pragma region Application Family
#line 855 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\memoryapi.h"
#pragma endregion
#line 857
#pragma region Desktop Family or OneCore Family
#line 864
typedef 
#line 862
enum WIN32_MEMORY_INFORMATION_CLASS { 
#line 863
MemoryRegionInfo
#line 864
} WIN32_MEMORY_INFORMATION_CLASS; 
#line 867
#pragma warning(push)
#pragma warning(disable:4201)
#pragma warning(disable:4214)
#line 892 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\memoryapi.h"
typedef 
#line 872
struct WIN32_MEMORY_REGION_INFORMATION { 
#line 873
PVOID AllocationBase; 
#line 874
ULONG AllocationProtect; 
#line 876
union { 
#line 877
ULONG Flags; 
#line 879
struct { 
#line 880
ULONG Private:1; 
#line 881
ULONG MappedDataFile:1; 
#line 882
ULONG MappedImage:1; 
#line 883
ULONG MappedPageFile:1; 
#line 884
ULONG MappedPhysical:1; 
#line 885
ULONG DirectMapped:1; 
#line 886
ULONG Reserved:26; 
#line 887
}; 
#line 888
}; 
#line 890
SIZE_T RegionSize; 
#line 891
SIZE_T CommitSize; 
#line 892
} WIN32_MEMORY_REGION_INFORMATION; 
#line 895
#pragma warning(pop)
#line 898 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\memoryapi.h"
__declspec(dllimport) BOOL __stdcall 
#line 902
QueryVirtualMemoryInformation(HANDLE Process, const void * VirtualAddress, WIN32_MEMORY_INFORMATION_CLASS MemoryInformationClass, PVOID MemoryInformation, SIZE_T MemoryInformationSize, PSIZE_T ReturnSize); 
#line 915 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\memoryapi.h"
__declspec(dllimport) PVOID __stdcall 
#line 919
MapViewOfFileNuma2(HANDLE FileMappingHandle, HANDLE ProcessHandle, ULONG64 Offset, PVOID BaseAddress, SIZE_T ViewSize, ULONG AllocationType, ULONG PageProtection, ULONG PreferredNode); 
#line 935
__forceinline PVOID MapViewOfFile2(HANDLE 
#line 936
FileMappingHandle, HANDLE 
#line 937
ProcessHandle, ULONG64 
#line 938
Offset, PVOID 
#line 939
BaseAddress, SIZE_T 
#line 940
ViewSize, ULONG 
#line 941
AllocationType, ULONG 
#line 942
PageProtection) 
#line 944
{ 
#line 945
return MapViewOfFileNuma2(FileMappingHandle, ProcessHandle, Offset, BaseAddress, ViewSize, AllocationType, PageProtection, (DWORD)(-1)); 
#line 953
} 
#line 960 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\memoryapi.h"
#pragma endregion
#line 962
#pragma region Application Family or OneCore Family
#line 965
__declspec(dllimport) BOOL __stdcall 
#line 968
UnmapViewOfFile2(HANDLE Process, PVOID BaseAddress, ULONG UnmapFlags); 
#line 974
__declspec(dllimport) BOOL __stdcall 
#line 977
VirtualUnlockEx(HANDLE Process, LPVOID Address, SIZE_T Size); 
#line 984 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\memoryapi.h"
#pragma endregion
#line 988
#pragma region Desktop Family or OneCore Family
#line 991
__declspec(dllimport) PVOID __stdcall 
#line 996
VirtualAlloc2(HANDLE Process, PVOID BaseAddress, SIZE_T Size, ULONG AllocationType, ULONG PageProtection, MEM_EXTENDED_PARAMETER * ExtendedParameters, ULONG ParameterCount); 
#line 1006
__declspec(dllimport) PVOID __stdcall 
#line 1010
MapViewOfFile3(HANDLE FileMapping, HANDLE Process, PVOID BaseAddress, ULONG64 Offset, SIZE_T ViewSize, ULONG AllocationType, ULONG PageProtection, MEM_EXTENDED_PARAMETER * ExtendedParameters, ULONG ParameterCount); 
#line 1023 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\memoryapi.h"
#pragma endregion
#line 1025
#pragma region Application Family or OneCore Family
#line 1028
__declspec(dllimport) PVOID __stdcall 
#line 1033
VirtualAlloc2FromApp(HANDLE Process, PVOID BaseAddress, SIZE_T Size, ULONG AllocationType, ULONG PageProtection, MEM_EXTENDED_PARAMETER * ExtendedParameters, ULONG ParameterCount); 
#line 1043
__declspec(dllimport) PVOID __stdcall 
#line 1047
MapViewOfFile3FromApp(HANDLE FileMapping, HANDLE Process, PVOID BaseAddress, ULONG64 Offset, SIZE_T ViewSize, ULONG AllocationType, ULONG PageProtection, MEM_EXTENDED_PARAMETER * ExtendedParameters, ULONG ParameterCount); 
#line 1060 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\memoryapi.h"
#pragma endregion
#line 1066 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\memoryapi.h"
#pragma region Desktop Family or OneCore Family
#line 1069
__declspec(dllimport) HANDLE __stdcall 
#line 1073
CreateFileMapping2(HANDLE File, SECURITY_ATTRIBUTES * SecurityAttributes, ULONG DesiredAccess, ULONG PageProtection, ULONG AllocationAttributes, ULONG64 MaximumSize, PCWSTR Name, MEM_EXTENDED_PARAMETER * ExtendedParameters, ULONG ParameterCount); 
#line 1086 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\memoryapi.h"
#pragma endregion
#line 1092 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\memoryapi.h"
#pragma region Desktop Family or OneCore Family
#line 1095
__declspec(dllimport) BOOL __stdcall 
#line 1099
AllocateUserPhysicalPages2(HANDLE ObjectHandle, PULONG_PTR NumberOfPages, PULONG_PTR PageArray, PMEM_EXTENDED_PARAMETER ExtendedParameters, ULONG ExtendedParameterCount); 
#line 1110
typedef 
#line 1107
enum WIN32_MEMORY_PARTITION_INFORMATION_CLASS { 
#line 1108
MemoryPartitionInfo, 
#line 1109
MemoryPartitionDedicatedMemoryInfo
#line 1110
} WIN32_MEMORY_PARTITION_INFORMATION_CLASS; 
#line 1132
typedef 
#line 1112
struct __declspec(align(8)) WIN32_MEMORY_PARTITION_INFORMATION { 
#line 1113
ULONG Flags; 
#line 1114
ULONG NumaNode; 
#line 1115
ULONG Channel; 
#line 1116
ULONG NumberOfNumaNodes; 
#line 1117
ULONG64 ResidentAvailablePages; 
#line 1118
ULONG64 CommittedPages; 
#line 1119
ULONG64 CommitLimit; 
#line 1120
ULONG64 PeakCommitment; 
#line 1121
ULONG64 TotalNumberOfPages; 
#line 1122
ULONG64 AvailablePages; 
#line 1123
ULONG64 ZeroPages; 
#line 1124
ULONG64 FreePages; 
#line 1125
ULONG64 StandbyPages; 
#line 1126
ULONG64 Reserved[16]; 
#line 1127
ULONG64 MaximumCommitLimit; 
#line 1128
ULONG64 Reserved2; 
#line 1130
ULONG PartitionId; 
#line 1132
} WIN32_MEMORY_PARTITION_INFORMATION; 
#line 1134
__declspec(dllimport) HANDLE __stdcall 
#line 1137
OpenDedicatedMemoryPartition(HANDLE Partition, ULONG64 DedicatedMemoryTypeId, ACCESS_MASK DesiredAccess, BOOL InheritHandle); 
#line 1144
__declspec(dllimport) BOOL __stdcall 
#line 1148
QueryPartitionInformation(HANDLE Partition, WIN32_MEMORY_PARTITION_INFORMATION_CLASS PartitionInformationClass, PVOID PartitionInformation, ULONG PartitionInformationLength); 
#line 1165 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\memoryapi.h"
}
#line 1156 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\memoryapi.h"
#pragma endregion
#line 1161 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\memoryapi.h"
#pragma warning(pop)
#line 22 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\enclaveapi.h"
extern "C" {
#line 25 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\enclaveapi.h"
#pragma region Desktop Family or OneCore Or App Family
#line 28
__declspec(dllimport) BOOL __stdcall 
#line 32
IsEnclaveTypeSupported(DWORD flEnclaveType); 
#line 36
__declspec(dllimport) LPVOID __stdcall 
#line 41
CreateEnclave(HANDLE hProcess, LPVOID lpAddress, SIZE_T dwSize, SIZE_T dwInitialCommitment, DWORD flEnclaveType, LPCVOID lpEnclaveInformation, DWORD dwInfoLength, LPDWORD lpEnclaveError); 
#line 52
__declspec(dllimport) BOOL __stdcall 
#line 56
LoadEnclaveData(HANDLE hProcess, LPVOID lpAddress, LPCVOID lpBuffer, SIZE_T nSize, DWORD flProtect, LPCVOID lpPageInformation, DWORD dwInfoLength, PSIZE_T lpNumberOfBytesWritten, LPDWORD lpEnclaveError); 
#line 68
__declspec(dllimport) BOOL __stdcall 
#line 72
InitializeEnclave(HANDLE hProcess, LPVOID lpAddress, LPCVOID lpEnclaveInformation, DWORD dwInfoLength, LPDWORD lpEnclaveError); 
#line 81 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\enclaveapi.h"
#pragma endregion
#line 83
#pragma region Desktop Family or OneCore Family
#line 86
__declspec(dllimport) BOOL __stdcall 
#line 90
LoadEnclaveImageA(LPVOID lpEnclaveAddress, LPCSTR lpImageName); 
#line 95
__declspec(dllimport) BOOL __stdcall 
#line 99
LoadEnclaveImageW(LPVOID lpEnclaveAddress, LPCWSTR lpImageName); 
#line 109 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\enclaveapi.h"
__declspec(dllimport) BOOL __stdcall 
#line 113
CallEnclave(LPENCLAVE_ROUTINE lpRoutine, LPVOID lpParameter, BOOL fWaitForThread, LPVOID * lpReturnValue); 
#line 120
__declspec(dllimport) BOOL __stdcall 
#line 124
TerminateEnclave(LPVOID lpAddress, BOOL fWait); 
#line 129
__declspec(dllimport) BOOL __stdcall 
#line 133
DeleteEnclave(LPVOID lpAddress); 
#line 141 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\enclaveapi.h"
}
#line 138
#pragma endregion
#line 22 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\threadpoollegacyapiset.h"
extern "C" {
#line 29 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\threadpoollegacyapiset.h"
#pragma region Desktop Family or OneCore Family or Games Family
#line 32
__declspec(dllimport) BOOL __stdcall 
#line 35
QueueUserWorkItem(LPTHREAD_START_ROUTINE Function, PVOID Context, ULONG Flags); 
#line 41
__declspec(dllimport) BOOL __stdcall 
#line 45
UnregisterWaitEx(HANDLE WaitHandle, HANDLE CompletionEvent); 
#line 51 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\threadpoollegacyapiset.h"
#pragma endregion
#line 53
#pragma region Desktop Family or OneCore Family
#line 56
__declspec(dllimport) HANDLE __stdcall 
#line 60
CreateTimerQueue(); 
#line 64
__declspec(dllimport) BOOL __stdcall 
#line 67
CreateTimerQueueTimer(PHANDLE phNewTimer, HANDLE TimerQueue, WAITORTIMERCALLBACK Callback, PVOID Parameter, DWORD DueTime, DWORD Period, ULONG Flags); 
#line 77
__declspec(dllimport) BOOL __stdcall 
#line 81
ChangeTimerQueueTimer(HANDLE TimerQueue, HANDLE Timer, ULONG DueTime, ULONG Period); 
#line 88
__declspec(dllimport) BOOL __stdcall 
#line 92
DeleteTimerQueueTimer(HANDLE TimerQueue, HANDLE Timer, HANDLE CompletionEvent); 
#line 98
__declspec(dllimport) BOOL __stdcall 
#line 102
DeleteTimerQueue(HANDLE TimerQueue); 
#line 106
__declspec(dllimport) BOOL __stdcall 
#line 110
DeleteTimerQueueEx(HANDLE TimerQueue, HANDLE CompletionEvent); 
#line 119 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\threadpoollegacyapiset.h"
}
#line 116
#pragma endregion
#line 22 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\threadpoolapiset.h"
extern "C" {
#line 29 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\threadpoolapiset.h"
#pragma region Application Family or OneCore Family or Games Family
#line 34
typedef void (__stdcall *PTP_WIN32_IO_CALLBACK)(PTP_CALLBACK_INSTANCE Instance, PVOID Context, PVOID Overlapped, ULONG IoResult, ULONG_PTR NumberOfBytesTransferred, PTP_IO Io); 
#line 45
__declspec(dllimport) PTP_POOL __stdcall 
#line 49
CreateThreadpool(PVOID reserved); 
#line 53
__declspec(dllimport) void __stdcall 
#line 56
SetThreadpoolThreadMaximum(PTP_POOL ptpp, DWORD cthrdMost); 
#line 61
__declspec(dllimport) BOOL __stdcall 
#line 64
SetThreadpoolThreadMinimum(PTP_POOL ptpp, DWORD cthrdMic); 
#line 69
__declspec(dllimport) BOOL __stdcall 
#line 72
SetThreadpoolStackInformation(PTP_POOL ptpp, PTP_POOL_STACK_INFORMATION ptpsi); 
#line 77
__declspec(dllimport) BOOL __stdcall 
#line 80
QueryThreadpoolStackInformation(PTP_POOL ptpp, PTP_POOL_STACK_INFORMATION ptpsi); 
#line 85
__declspec(dllimport) void __stdcall 
#line 88
CloseThreadpool(PTP_POOL ptpp); 
#line 92
__declspec(dllimport) PTP_CLEANUP_GROUP __stdcall 
#line 96
CreateThreadpoolCleanupGroup(); 
#line 100
__declspec(dllimport) void __stdcall 
#line 103
CloseThreadpoolCleanupGroupMembers(PTP_CLEANUP_GROUP ptpcg, BOOL fCancelPendingCallbacks, PVOID pvCleanupContext); 
#line 109
__declspec(dllimport) void __stdcall 
#line 112
CloseThreadpoolCleanupGroup(PTP_CLEANUP_GROUP ptpcg); 
#line 116
__declspec(dllimport) void __stdcall 
#line 119
SetEventWhenCallbackReturns(PTP_CALLBACK_INSTANCE pci, HANDLE evt); 
#line 124
__declspec(dllimport) void __stdcall 
#line 127
ReleaseSemaphoreWhenCallbackReturns(PTP_CALLBACK_INSTANCE pci, HANDLE sem, DWORD crel); 
#line 133
__declspec(dllimport) void __stdcall 
#line 136
ReleaseMutexWhenCallbackReturns(PTP_CALLBACK_INSTANCE pci, HANDLE mut); 
#line 141
__declspec(dllimport) void __stdcall 
#line 144
LeaveCriticalSectionWhenCallbackReturns(PTP_CALLBACK_INSTANCE pci, PCRITICAL_SECTION pcs); 
#line 149
__declspec(dllimport) void __stdcall 
#line 152
FreeLibraryWhenCallbackReturns(PTP_CALLBACK_INSTANCE pci, HMODULE mod); 
#line 157
__declspec(dllimport) BOOL __stdcall 
#line 160
CallbackMayRunLong(PTP_CALLBACK_INSTANCE pci); 
#line 164
__declspec(dllimport) void __stdcall 
#line 167
DisassociateCurrentThreadFromCallback(PTP_CALLBACK_INSTANCE pci); 
#line 171
__declspec(dllimport) BOOL __stdcall 
#line 175
TrySubmitThreadpoolCallback(PTP_SIMPLE_CALLBACK pfns, PVOID pv, PTP_CALLBACK_ENVIRON pcbe); 
#line 181
__declspec(dllimport) PTP_WORK __stdcall 
#line 185
CreateThreadpoolWork(PTP_WORK_CALLBACK pfnwk, PVOID pv, PTP_CALLBACK_ENVIRON pcbe); 
#line 191
__declspec(dllimport) void __stdcall 
#line 194
SubmitThreadpoolWork(PTP_WORK pwk); 
#line 198
__declspec(dllimport) void __stdcall 
#line 201
WaitForThreadpoolWorkCallbacks(PTP_WORK pwk, BOOL fCancelPendingCallbacks); 
#line 206
__declspec(dllimport) void __stdcall 
#line 209
CloseThreadpoolWork(PTP_WORK pwk); 
#line 213
__declspec(dllimport) PTP_TIMER __stdcall 
#line 217
CreateThreadpoolTimer(PTP_TIMER_CALLBACK pfnti, PVOID pv, PTP_CALLBACK_ENVIRON pcbe); 
#line 223
__declspec(dllimport) void __stdcall 
#line 226
SetThreadpoolTimer(PTP_TIMER pti, PFILETIME pftDueTime, DWORD msPeriod, DWORD msWindowLength); 
#line 233
__declspec(dllimport) BOOL __stdcall 
#line 236
IsThreadpoolTimerSet(PTP_TIMER pti); 
#line 240
__declspec(dllimport) void __stdcall 
#line 243
WaitForThreadpoolTimerCallbacks(PTP_TIMER pti, BOOL fCancelPendingCallbacks); 
#line 248
__declspec(dllimport) void __stdcall 
#line 251
CloseThreadpoolTimer(PTP_TIMER pti); 
#line 255
__declspec(dllimport) PTP_WAIT __stdcall 
#line 259
CreateThreadpoolWait(PTP_WAIT_CALLBACK pfnwa, PVOID pv, PTP_CALLBACK_ENVIRON pcbe); 
#line 265
__declspec(dllimport) void __stdcall 
#line 268
SetThreadpoolWait(PTP_WAIT pwa, HANDLE h, PFILETIME pftTimeout); 
#line 274
__declspec(dllimport) void __stdcall 
#line 277
WaitForThreadpoolWaitCallbacks(PTP_WAIT pwa, BOOL fCancelPendingCallbacks); 
#line 282
__declspec(dllimport) void __stdcall 
#line 285
CloseThreadpoolWait(PTP_WAIT pwa); 
#line 289
__declspec(dllimport) PTP_IO __stdcall 
#line 293
CreateThreadpoolIo(HANDLE fl, PTP_WIN32_IO_CALLBACK pfnio, PVOID pv, PTP_CALLBACK_ENVIRON pcbe); 
#line 300
__declspec(dllimport) void __stdcall 
#line 303
StartThreadpoolIo(PTP_IO pio); 
#line 307
__declspec(dllimport) void __stdcall 
#line 310
CancelThreadpoolIo(PTP_IO pio); 
#line 314
__declspec(dllimport) void __stdcall 
#line 317
WaitForThreadpoolIoCallbacks(PTP_IO pio, BOOL fCancelPendingCallbacks); 
#line 322
__declspec(dllimport) void __stdcall 
#line 325
CloseThreadpoolIo(PTP_IO pio); 
#line 330 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\threadpoolapiset.h"
#pragma endregion
#line 332
#pragma region Application Family or OneCore Family
#line 335
__declspec(dllimport) BOOL __stdcall 
#line 338
SetThreadpoolTimerEx(PTP_TIMER pti, PFILETIME pftDueTime, DWORD msPeriod, DWORD msWindowLength); 
#line 345
__declspec(dllimport) BOOL __stdcall 
#line 348
SetThreadpoolWaitEx(PTP_WAIT pwa, HANDLE h, PFILETIME pftTimeout, PVOID Reserved); 
#line 371 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\threadpoolapiset.h"
}
#line 358 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\threadpoolapiset.h"
#pragma endregion
#line 360
#pragma region Desktop Family or OneCore Family or Games Family
#line 368 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\threadpoolapiset.h"
#pragma endregion
#line 22 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\jobapi.h"
extern "C" {
#line 25 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\jobapi.h"
#pragma region Desktop Family or OneCore Family
#line 30
__declspec(dllimport) BOOL __stdcall 
#line 33
IsProcessInJob(HANDLE ProcessHandle, HANDLE JobHandle, PBOOL Result); 
#line 45 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\jobapi.h"
}
#line 42
#pragma endregion
#line 19 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\jobapi2.h"
extern "C" {
#line 22 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\jobapi2.h"
#pragma region Desktop Family or OneCore Family
#line 33
typedef 
#line 26
struct JOBOBJECT_IO_RATE_CONTROL_INFORMATION { 
#line 27
LONG64 MaxIops; 
#line 28
LONG64 MaxBandwidth; 
#line 29
LONG64 ReservationIops; 
#line 30
PCWSTR VolumeName; 
#line 31
ULONG BaseIoSize; 
#line 32
ULONG ControlFlags; 
#line 33
} JOBOBJECT_IO_RATE_CONTROL_INFORMATION; 
#line 35
__declspec(dllimport) HANDLE __stdcall 
#line 38
CreateJobObjectW(LPSECURITY_ATTRIBUTES lpJobAttributes, LPCWSTR lpName); 
#line 43
__declspec(dllimport) void __stdcall 
#line 46
FreeMemoryJobObject(void * Buffer); 
#line 50
__declspec(dllimport) HANDLE __stdcall 
#line 53
OpenJobObjectW(DWORD dwDesiredAccess, BOOL bInheritHandle, LPCWSTR lpName); 
#line 59
__declspec(dllimport) BOOL __stdcall 
#line 62
AssignProcessToJobObject(HANDLE hJob, HANDLE hProcess); 
#line 67
__declspec(dllimport) BOOL __stdcall 
#line 70
TerminateJobObject(HANDLE hJob, UINT uExitCode); 
#line 75
__declspec(dllimport) BOOL __stdcall 
#line 78
SetInformationJobObject(HANDLE hJob, JOBOBJECTINFOCLASS JobObjectInformationClass, LPVOID lpJobObjectInformation, DWORD cbJobObjectInformationLength); 
#line 85
__declspec(dllimport) DWORD __stdcall 
#line 88
SetIoRateControlInformationJobObject(HANDLE hJob, JOBOBJECT_IO_RATE_CONTROL_INFORMATION * IoRateControlInfo); 
#line 93
__declspec(dllimport) BOOL __stdcall 
#line 96
QueryInformationJobObject(HANDLE hJob, JOBOBJECTINFOCLASS JobObjectInformationClass, LPVOID lpJobObjectInformation, DWORD cbJobObjectInformationLength, LPDWORD lpReturnLength); 
#line 104
__declspec(dllimport) DWORD __stdcall 
#line 107
QueryIoRateControlInformationJobObject(HANDLE hJob, PCWSTR VolumeName, JOBOBJECT_IO_RATE_CONTROL_INFORMATION ** InfoBlocks, ULONG * InfoBlockCount); 
#line 118 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\jobapi2.h"
}
#line 115
#pragma endregion
#line 22 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\wow64apiset.h"
extern "C" {
#line 25 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\wow64apiset.h"
#pragma region Desktop Family or OneCore Family
#line 32
__declspec(dllimport) BOOLEAN __stdcall 
#line 35
Wow64EnableWow64FsRedirection(BOOLEAN Wow64FsEnableRedirection); 
#line 39
__declspec(dllimport) BOOL __stdcall 
#line 42
Wow64DisableWow64FsRedirection(PVOID * OldValue); 
#line 46
__declspec(dllimport) BOOL __stdcall 
#line 49
Wow64RevertWow64FsRedirection(PVOID OlValue); 
#line 57 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\wow64apiset.h"
#pragma endregion
#line 59
#pragma region Application Family or OneCore Family
#line 64
__declspec(dllimport) BOOL __stdcall 
#line 67
IsWow64Process(HANDLE hProcess, PBOOL Wow64Process); 
#line 75 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\wow64apiset.h"
#pragma endregion
#line 77
#pragma region Desktop Family or OneCore Family
#line 84
__declspec(dllimport) UINT __stdcall 
#line 89
GetSystemWow64DirectoryA(LPSTR lpBuffer, UINT uSize); 
#line 94
__declspec(dllimport) UINT __stdcall 
#line 99
GetSystemWow64DirectoryW(LPWSTR lpBuffer, UINT uSize); 
#line 114 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\wow64apiset.h"
__declspec(dllimport) USHORT __stdcall 
#line 117
Wow64SetThreadDefaultGuestMachine(USHORT Machine); 
#line 124 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\wow64apiset.h"
#pragma endregion
#line 126
#pragma region Application Family or OneCore Family
#line 131
__declspec(dllimport) BOOL __stdcall 
#line 134
IsWow64Process2(HANDLE hProcess, USHORT * pProcessMachine, USHORT * pNativeMachine); 
#line 143 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\wow64apiset.h"
#pragma endregion
#line 145
#pragma region Desktop Family or OneCore Family
#line 150
__declspec(dllimport) UINT __stdcall 
#line 155
GetSystemWow64Directory2A(LPSTR lpBuffer, UINT uSize, WORD ImageFileMachineType); 
#line 161
__declspec(dllimport) UINT __stdcall 
#line 166
GetSystemWow64Directory2W(LPWSTR lpBuffer, UINT uSize, WORD ImageFileMachineType); 
#line 181 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\wow64apiset.h"
__declspec(dllimport) HRESULT __stdcall 
#line 185
IsWow64GuestMachineSupported(USHORT WowGuestMachine, BOOL * MachineIsSupported); 
#line 194 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\wow64apiset.h"
__declspec(dllimport) BOOL __stdcall 
#line 197
Wow64GetThreadContext(HANDLE hThread, PWOW64_CONTEXT lpContext); 
#line 202
__declspec(dllimport) BOOL __stdcall 
#line 205
Wow64SetThreadContext(HANDLE hThread, const WOW64_CONTEXT * lpContext); 
#line 210
__declspec(dllimport) DWORD __stdcall 
#line 213
Wow64SuspendThread(HANDLE hThread); 
#line 223 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\wow64apiset.h"
}
#line 220
#pragma endregion
#line 22 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\libloaderapi.h"
extern "C" {
#line 25 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\libloaderapi.h"
#pragma region Application Family or OneCore Family
#line 44
typedef 
#line 40
struct tagENUMUILANG { 
#line 41
ULONG NumOfEnumUILang; 
#line 42
ULONG SizeOfEnumUIBuffer; 
#line 43
LANGID *pEnumUIBuffer; 
#line 44
} ENUMUILANG, *PENUMUILANG; 
#line 48
typedef BOOL (__stdcall *ENUMRESLANGPROCA)(HMODULE hModule, LPCSTR lpType, LPCSTR lpName, WORD wLanguage, LONG_PTR lParam); 
#line 54
typedef BOOL (__stdcall *ENUMRESLANGPROCW)(HMODULE hModule, LPCWSTR lpType, LPCWSTR lpName, WORD wLanguage, LONG_PTR lParam); 
#line 66 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\libloaderapi.h"
typedef BOOL (__stdcall *ENUMRESNAMEPROCA)(HMODULE hModule, LPCSTR lpType, LPSTR lpName, LONG_PTR lParam); 
#line 71
typedef BOOL (__stdcall *ENUMRESNAMEPROCW)(HMODULE hModule, LPCWSTR lpType, LPWSTR lpName, LONG_PTR lParam); 
#line 82 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\libloaderapi.h"
typedef BOOL (__stdcall *ENUMRESTYPEPROCA)(HMODULE hModule, LPSTR lpType, LONG_PTR lParam); 
#line 87
typedef BOOL (__stdcall *ENUMRESTYPEPROCW)(HMODULE hModule, LPWSTR lpType, LONG_PTR lParam); 
#line 125 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\libloaderapi.h"
#pragma endregion
#line 127
#pragma region Application Family or OneCore Family or Games Family
#line 130
__declspec(dllimport) BOOL __stdcall 
#line 133
DisableThreadLibraryCalls(HMODULE hLibModule); 
#line 137
__declspec(dllimport) HRSRC __stdcall 
#line 141
FindResourceExW(HMODULE hModule, LPCWSTR lpType, LPCWSTR lpName, WORD wLanguage); 
#line 154
__declspec(dllimport) int __stdcall 
#line 157
FindStringOrdinal(DWORD dwFindStringOrdinalFlags, LPCWSTR lpStringSource, int cchSource, LPCWSTR lpStringValue, int cchValue, BOOL bIgnoreCase); 
#line 168 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\libloaderapi.h"
__declspec(dllimport) BOOL __stdcall 
#line 171
FreeLibrary(HMODULE hLibModule); 
#line 175
__declspec(dllimport) 
#line 176
__declspec(noreturn) void __stdcall 
#line 179
FreeLibraryAndExitThread(HMODULE hLibModule, DWORD dwExitCode); 
#line 185 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\libloaderapi.h"
#pragma endregion
#line 187
#pragma region Application Family or OneCore Family
#line 190
__declspec(dllimport) BOOL __stdcall 
#line 193
FreeResource(HGLOBAL hResData); 
#line 198 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\libloaderapi.h"
#pragma endregion
#line 200
#pragma region Application Family or OneCore Family or Games Family
#line 203
__declspec(dllimport) DWORD __stdcall 
#line 208
GetModuleFileNameA(HMODULE hModule, LPSTR lpFilename, DWORD nSize); 
#line 214
__declspec(dllimport) DWORD __stdcall 
#line 219
GetModuleFileNameW(HMODULE hModule, LPWSTR lpFilename, DWORD nSize); 
#line 230 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\libloaderapi.h"
__declspec(dllimport) HMODULE __stdcall 
#line 235
GetModuleHandleA(LPCSTR lpModuleName); 
#line 239
__declspec(dllimport) HMODULE __stdcall 
#line 244
GetModuleHandleW(LPCWSTR lpModuleName); 
#line 262 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\libloaderapi.h"
typedef BOOL (__stdcall *PGET_MODULE_HANDLE_EXA)(DWORD dwFlags, LPCSTR lpModuleName, HMODULE * phModule); 
#line 270
typedef BOOL (__stdcall *PGET_MODULE_HANDLE_EXW)(DWORD dwFlags, LPCWSTR lpModuleName, HMODULE * phModule); 
#line 281 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\libloaderapi.h"
__declspec(dllimport) BOOL __stdcall 
#line 284
GetModuleHandleExA(DWORD dwFlags, LPCSTR lpModuleName, HMODULE * phModule); 
#line 290
__declspec(dllimport) BOOL __stdcall 
#line 293
GetModuleHandleExW(DWORD dwFlags, LPCWSTR lpModuleName, HMODULE * phModule); 
#line 306 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\libloaderapi.h"
__declspec(dllimport) FARPROC __stdcall 
#line 309
GetProcAddress(HMODULE hModule, LPCSTR lpProcName); 
#line 320
typedef 
#line 316
struct _REDIRECTION_FUNCTION_DESCRIPTOR { 
#line 317
PCSTR DllName; 
#line 318
PCSTR FunctionName; 
#line 319
PVOID RedirectionTarget; 
#line 320
} REDIRECTION_FUNCTION_DESCRIPTOR, *PREDIRECTION_FUNCTION_DESCRIPTOR; 
#line 322
typedef const REDIRECTION_FUNCTION_DESCRIPTOR *PCREDIRECTION_FUNCTION_DESCRIPTOR; 
#line 328
typedef 
#line 324
struct _REDIRECTION_DESCRIPTOR { 
#line 325
ULONG Version; 
#line 326
ULONG FunctionCount; 
#line 327
PCREDIRECTION_FUNCTION_DESCRIPTOR Redirections; 
#line 328
} REDIRECTION_DESCRIPTOR, *PREDIRECTION_DESCRIPTOR; 
#line 330
typedef const REDIRECTION_DESCRIPTOR *PCREDIRECTION_DESCRIPTOR; 
#line 332
__declspec(dllimport) HMODULE __stdcall 
#line 336
LoadLibraryExA(LPCSTR lpLibFileName, HANDLE hFile, DWORD dwFlags); 
#line 342
__declspec(dllimport) HMODULE __stdcall 
#line 346
LoadLibraryExW(LPCWSTR lpLibFileName, HANDLE hFile, DWORD dwFlags); 
#line 394 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\libloaderapi.h"
__declspec(dllimport) HGLOBAL __stdcall 
#line 398
LoadResource(HMODULE hModule, HRSRC hResInfo); 
#line 403
__declspec(dllimport) int __stdcall 
#line 406
LoadStringA(HINSTANCE hInstance, UINT uID, LPSTR lpBuffer, int cchBufferMax); 
#line 413
__declspec(dllimport) int __stdcall 
#line 416
LoadStringW(HINSTANCE hInstance, UINT uID, LPWSTR lpBuffer, int cchBufferMax); 
#line 428 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\libloaderapi.h"
__declspec(dllimport) LPVOID __stdcall 
#line 431
LockResource(HGLOBAL hResData); 
#line 435
__declspec(dllimport) DWORD __stdcall 
#line 438
SizeofResource(HMODULE hModule, HRSRC hResInfo); 
#line 444 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\libloaderapi.h"
#pragma endregion
#line 446
#pragma region App Family or OneCore Family
#line 449
typedef PVOID DLL_DIRECTORY_COOKIE, *PDLL_DIRECTORY_COOKIE; 
#line 451
__declspec(dllimport) DLL_DIRECTORY_COOKIE __stdcall 
#line 454
AddDllDirectory(PCWSTR NewDirectory); 
#line 458
__declspec(dllimport) BOOL __stdcall 
#line 461
RemoveDllDirectory(DLL_DIRECTORY_COOKIE Cookie); 
#line 465
__declspec(dllimport) BOOL __stdcall 
#line 468
SetDefaultDllDirectories(DWORD DirectoryFlags); 
#line 473 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\libloaderapi.h"
#pragma endregion
#line 475
#pragma region Desktop Family or OneCore Family
#line 480
__declspec(dllimport) BOOL __stdcall 
#line 483
EnumResourceLanguagesExA(HMODULE hModule, LPCSTR lpType, LPCSTR lpName, ENUMRESLANGPROCA lpEnumFunc, LONG_PTR lParam, DWORD dwFlags, LANGID LangId); 
#line 493
__declspec(dllimport) BOOL __stdcall 
#line 496
EnumResourceLanguagesExW(HMODULE hModule, LPCWSTR lpType, LPCWSTR lpName, ENUMRESLANGPROCW lpEnumFunc, LONG_PTR lParam, DWORD dwFlags, LANGID LangId); 
#line 511 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\libloaderapi.h"
__declspec(dllimport) BOOL __stdcall 
#line 514
EnumResourceNamesExA(HMODULE hModule, LPCSTR lpType, ENUMRESNAMEPROCA lpEnumFunc, LONG_PTR lParam, DWORD dwFlags, LANGID LangId); 
#line 523
__declspec(dllimport) BOOL __stdcall 
#line 526
EnumResourceNamesExW(HMODULE hModule, LPCWSTR lpType, ENUMRESNAMEPROCW lpEnumFunc, LONG_PTR lParam, DWORD dwFlags, LANGID LangId); 
#line 540 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\libloaderapi.h"
__declspec(dllimport) BOOL __stdcall 
#line 543
EnumResourceTypesExA(HMODULE hModule, ENUMRESTYPEPROCA lpEnumFunc, LONG_PTR lParam, DWORD dwFlags, LANGID LangId); 
#line 551
__declspec(dllimport) BOOL __stdcall 
#line 554
EnumResourceTypesExW(HMODULE hModule, ENUMRESTYPEPROCW lpEnumFunc, LONG_PTR lParam, DWORD dwFlags, LANGID LangId); 
#line 570 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\libloaderapi.h"
#pragma endregion
#line 572
#pragma region Application Family or OneCore Family or Games Family
#line 575
__declspec(dllimport) HRSRC __stdcall 
#line 579
FindResourceW(HMODULE hModule, LPCWSTR lpName, LPCWSTR lpType); 
#line 589
__declspec(dllimport) HMODULE __stdcall 
#line 593
LoadLibraryA(LPCSTR lpLibFileName); 
#line 597
__declspec(dllimport) HMODULE __stdcall 
#line 601
LoadLibraryW(LPCWSTR lpLibFileName); 
#line 611 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\libloaderapi.h"
#pragma endregion
#line 613
#pragma region Application Family or OneCore Family
#line 616
__declspec(dllimport) BOOL __stdcall 
#line 619
EnumResourceNamesW(HMODULE hModule, LPCWSTR lpType, ENUMRESNAMEPROCW lpEnumFunc, LONG_PTR lParam); 
#line 626
__declspec(dllimport) BOOL __stdcall 
#line 629
EnumResourceNamesA(HMODULE hModule, LPCSTR lpType, ENUMRESNAMEPROCA lpEnumFunc, LONG_PTR lParam); 
#line 646 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\libloaderapi.h"
}
#line 643
#pragma endregion
#line 22 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\securitybaseapi.h"
extern "C" {
#line 30 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\securitybaseapi.h"
#pragma region Desktop Family or OneCore Family
#line 33
__declspec(dllimport) BOOL __stdcall 
#line 36
AccessCheck(PSECURITY_DESCRIPTOR pSecurityDescriptor, HANDLE ClientToken, DWORD DesiredAccess, PGENERIC_MAPPING GenericMapping, PPRIVILEGE_SET PrivilegeSet, LPDWORD PrivilegeSetLength, LPDWORD GrantedAccess, LPBOOL AccessStatus); 
#line 47
__declspec(dllimport) BOOL __stdcall 
#line 50
AccessCheckAndAuditAlarmW(LPCWSTR SubsystemName, LPVOID HandleId, LPWSTR ObjectTypeName, LPWSTR ObjectName, PSECURITY_DESCRIPTOR SecurityDescriptor, DWORD DesiredAccess, PGENERIC_MAPPING GenericMapping, BOOL ObjectCreation, LPDWORD GrantedAccess, LPBOOL AccessStatus, LPBOOL pfGenerateOnClose); 
#line 68
__declspec(dllimport) BOOL __stdcall 
#line 71
AccessCheckByType(PSECURITY_DESCRIPTOR pSecurityDescriptor, PSID PrincipalSelfSid, HANDLE ClientToken, DWORD DesiredAccess, POBJECT_TYPE_LIST ObjectTypeList, DWORD ObjectTypeListLength, PGENERIC_MAPPING GenericMapping, PPRIVILEGE_SET PrivilegeSet, LPDWORD PrivilegeSetLength, LPDWORD GrantedAccess, LPBOOL AccessStatus); 
#line 85
__declspec(dllimport) BOOL __stdcall 
#line 88
AccessCheckByTypeResultList(PSECURITY_DESCRIPTOR pSecurityDescriptor, PSID PrincipalSelfSid, HANDLE ClientToken, DWORD DesiredAccess, POBJECT_TYPE_LIST ObjectTypeList, DWORD ObjectTypeListLength, PGENERIC_MAPPING GenericMapping, PPRIVILEGE_SET PrivilegeSet, LPDWORD PrivilegeSetLength, LPDWORD GrantedAccessList, LPDWORD AccessStatusList); 
#line 102
__declspec(dllimport) BOOL __stdcall 
#line 105
AccessCheckByTypeAndAuditAlarmW(LPCWSTR SubsystemName, LPVOID HandleId, LPCWSTR ObjectTypeName, LPCWSTR ObjectName, PSECURITY_DESCRIPTOR SecurityDescriptor, PSID PrincipalSelfSid, DWORD DesiredAccess, AUDIT_EVENT_TYPE AuditType, DWORD Flags, POBJECT_TYPE_LIST ObjectTypeList, DWORD ObjectTypeListLength, PGENERIC_MAPPING GenericMapping, BOOL ObjectCreation, LPDWORD GrantedAccess, LPBOOL AccessStatus, LPBOOL pfGenerateOnClose); 
#line 128
__declspec(dllimport) BOOL __stdcall 
#line 131
AccessCheckByTypeResultListAndAuditAlarmW(LPCWSTR SubsystemName, LPVOID HandleId, LPCWSTR ObjectTypeName, LPCWSTR ObjectName, PSECURITY_DESCRIPTOR SecurityDescriptor, PSID PrincipalSelfSid, DWORD DesiredAccess, AUDIT_EVENT_TYPE AuditType, DWORD Flags, POBJECT_TYPE_LIST ObjectTypeList, DWORD ObjectTypeListLength, PGENERIC_MAPPING GenericMapping, BOOL ObjectCreation, LPDWORD GrantedAccessList, LPDWORD AccessStatusList, LPBOOL pfGenerateOnClose); 
#line 154
__declspec(dllimport) BOOL __stdcall 
#line 157
AccessCheckByTypeResultListAndAuditAlarmByHandleW(LPCWSTR SubsystemName, LPVOID HandleId, HANDLE ClientToken, LPCWSTR ObjectTypeName, LPCWSTR ObjectName, PSECURITY_DESCRIPTOR SecurityDescriptor, PSID PrincipalSelfSid, DWORD DesiredAccess, AUDIT_EVENT_TYPE AuditType, DWORD Flags, POBJECT_TYPE_LIST ObjectTypeList, DWORD ObjectTypeListLength, PGENERIC_MAPPING GenericMapping, BOOL ObjectCreation, LPDWORD GrantedAccessList, LPDWORD AccessStatusList, LPBOOL pfGenerateOnClose); 
#line 182 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\securitybaseapi.h"
#pragma endregion
#line 184
#pragma region Application Family or OneCore Family
#line 187
__declspec(dllimport) BOOL __stdcall 
#line 190
AddAccessAllowedAce(PACL pAcl, DWORD dwAceRevision, DWORD AccessMask, PSID pSid); 
#line 197
__declspec(dllimport) BOOL __stdcall 
#line 200
AddAccessAllowedAceEx(PACL pAcl, DWORD dwAceRevision, DWORD AceFlags, DWORD AccessMask, PSID pSid); 
#line 209 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\securitybaseapi.h"
#pragma endregion
#line 211
#pragma region Desktop Family or OneCore Family
#line 214
__declspec(dllimport) BOOL __stdcall 
#line 217
AddAccessAllowedObjectAce(PACL pAcl, DWORD dwAceRevision, DWORD AceFlags, DWORD AccessMask, GUID * ObjectTypeGuid, GUID * InheritedObjectTypeGuid, PSID pSid); 
#line 227
__declspec(dllimport) BOOL __stdcall 
#line 230
AddAccessDeniedAce(PACL pAcl, DWORD dwAceRevision, DWORD AccessMask, PSID pSid); 
#line 237
__declspec(dllimport) BOOL __stdcall 
#line 240
AddAccessDeniedAceEx(PACL pAcl, DWORD dwAceRevision, DWORD AceFlags, DWORD AccessMask, PSID pSid); 
#line 248
__declspec(dllimport) BOOL __stdcall 
#line 251
AddAccessDeniedObjectAce(PACL pAcl, DWORD dwAceRevision, DWORD AceFlags, DWORD AccessMask, GUID * ObjectTypeGuid, GUID * InheritedObjectTypeGuid, PSID pSid); 
#line 262 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\securitybaseapi.h"
#pragma endregion
#line 264
#pragma region Application Family or OneCore Family
#line 267
__declspec(dllimport) BOOL __stdcall 
#line 270
AddAce(PACL pAcl, DWORD dwAceRevision, DWORD dwStartingAceIndex, LPVOID pAceList, DWORD nAceListLength); 
#line 279 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\securitybaseapi.h"
#pragma endregion
#line 281
#pragma region Desktop Family or OneCore Family
#line 284
__declspec(dllimport) BOOL __stdcall 
#line 287
AddAuditAccessAce(PACL pAcl, DWORD dwAceRevision, DWORD dwAccessMask, PSID pSid, BOOL bAuditSuccess, BOOL bAuditFailure); 
#line 296
__declspec(dllimport) BOOL __stdcall 
#line 299
AddAuditAccessAceEx(PACL pAcl, DWORD dwAceRevision, DWORD AceFlags, DWORD dwAccessMask, PSID pSid, BOOL bAuditSuccess, BOOL bAuditFailure); 
#line 309
__declspec(dllimport) BOOL __stdcall 
#line 312
AddAuditAccessObjectAce(PACL pAcl, DWORD dwAceRevision, DWORD AceFlags, DWORD AccessMask, GUID * ObjectTypeGuid, GUID * InheritedObjectTypeGuid, PSID pSid, BOOL bAuditSuccess, BOOL bAuditFailure); 
#line 325 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\securitybaseapi.h"
#pragma endregion
#line 327
#pragma region Application Family or OneCore Family
#line 332
__declspec(dllimport) BOOL __stdcall 
#line 335
AddMandatoryAce(PACL pAcl, DWORD dwAceRevision, DWORD AceFlags, DWORD MandatoryPolicy, PSID pLabelSid); 
#line 346 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\securitybaseapi.h"
#pragma endregion
#line 350
#pragma region Desktop Family or OneCore Family
#line 353
__declspec(dllimport) BOOL __stdcall 
#line 356
AddResourceAttributeAce(PACL pAcl, DWORD dwAceRevision, DWORD AceFlags, DWORD AccessMask, PSID pSid, PCLAIM_SECURITY_ATTRIBUTES_INFORMATION pAttributeInfo, PDWORD pReturnLength); 
#line 366
__declspec(dllimport) BOOL __stdcall 
#line 369
AddScopedPolicyIDAce(PACL pAcl, DWORD dwAceRevision, DWORD AceFlags, DWORD AccessMask, PSID pSid); 
#line 378 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\securitybaseapi.h"
#pragma endregion
#line 382 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\securitybaseapi.h"
#pragma region Application Family or OneCore Family
#line 385
__declspec(dllimport) BOOL __stdcall 
#line 388
AdjustTokenGroups(HANDLE TokenHandle, BOOL ResetToDefault, PTOKEN_GROUPS NewState, DWORD BufferLength, PTOKEN_GROUPS PreviousState, PDWORD ReturnLength); 
#line 398 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\securitybaseapi.h"
#pragma endregion
#line 400
#pragma region Application Family or OneCore Family or Games Family
#line 403
__declspec(dllimport) BOOL __stdcall 
#line 406
AdjustTokenPrivileges(HANDLE TokenHandle, BOOL DisableAllPrivileges, PTOKEN_PRIVILEGES NewState, DWORD BufferLength, PTOKEN_PRIVILEGES PreviousState, PDWORD ReturnLength); 
#line 416 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\securitybaseapi.h"
#pragma endregion
#line 418
#pragma region Application Family or OneCore Family
#line 421
__declspec(dllimport) BOOL __stdcall 
#line 424
AllocateAndInitializeSid(PSID_IDENTIFIER_AUTHORITY pIdentifierAuthority, BYTE nSubAuthorityCount, DWORD nSubAuthority0, DWORD nSubAuthority1, DWORD nSubAuthority2, DWORD nSubAuthority3, DWORD nSubAuthority4, DWORD nSubAuthority5, DWORD nSubAuthority6, DWORD nSubAuthority7, PSID * pSid); 
#line 438
__declspec(dllimport) BOOL __stdcall 
#line 441
AllocateLocallyUniqueId(PLUID Luid); 
#line 446 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\securitybaseapi.h"
#pragma endregion
#line 448
#pragma region Desktop Family or OneCore Family
#line 451
__declspec(dllimport) BOOL __stdcall 
#line 454
AreAllAccessesGranted(DWORD GrantedAccess, DWORD DesiredAccess); 
#line 459
__declspec(dllimport) BOOL __stdcall 
#line 462
AreAnyAccessesGranted(DWORD GrantedAccess, DWORD DesiredAccess); 
#line 468 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\securitybaseapi.h"
#pragma endregion
#line 470
#pragma region Application Family or OneCore Family
#line 473
__declspec(dllimport) BOOL __stdcall 
#line 476
CheckTokenMembership(HANDLE TokenHandle, PSID SidToCheck, PBOOL IsMember); 
#line 483 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\securitybaseapi.h"
#pragma endregion
#line 487
#pragma region Desktop Family or OneCore Family
#line 490
__declspec(dllimport) BOOL __stdcall 
#line 493
CheckTokenCapability(HANDLE TokenHandle, PSID CapabilitySidToCheck, PBOOL HasCapability); 
#line 499
__declspec(dllimport) BOOL __stdcall 
#line 502
GetAppContainerAce(PACL Acl, DWORD StartingAceIndex, PVOID * AppContainerAce, DWORD * AppContainerAceIndex); 
#line 510 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\securitybaseapi.h"
#pragma endregion
#line 512
#pragma region Application Family or OneCore Family
#line 515
__declspec(dllimport) BOOL __stdcall 
#line 518
CheckTokenMembershipEx(HANDLE TokenHandle, PSID SidToCheck, DWORD Flags, PBOOL IsMember); 
#line 526 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\securitybaseapi.h"
#pragma endregion
#line 530 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\securitybaseapi.h"
#pragma region Desktop Family or OneCore Family
#line 533
__declspec(dllimport) BOOL __stdcall 
#line 536
ConvertToAutoInheritPrivateObjectSecurity(PSECURITY_DESCRIPTOR ParentDescriptor, PSECURITY_DESCRIPTOR CurrentSecurityDescriptor, PSECURITY_DESCRIPTOR * NewSecurityDescriptor, GUID * ObjectType, BOOLEAN IsDirectoryObject, PGENERIC_MAPPING GenericMapping); 
#line 546 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\securitybaseapi.h"
#pragma endregion
#line 548
#pragma region Application Family or OneCore Family
#line 551
__declspec(dllimport) BOOL __stdcall 
#line 554
CopySid(DWORD nDestinationSidLength, PSID pDestinationSid, PSID pSourceSid); 
#line 561 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\securitybaseapi.h"
#pragma endregion
#line 563
#pragma region Desktop Family or OneCore Family
#line 566
__declspec(dllimport) BOOL __stdcall 
#line 569
CreatePrivateObjectSecurity(PSECURITY_DESCRIPTOR ParentDescriptor, PSECURITY_DESCRIPTOR CreatorDescriptor, PSECURITY_DESCRIPTOR * NewDescriptor, BOOL IsDirectoryObject, HANDLE Token, PGENERIC_MAPPING GenericMapping); 
#line 578
__declspec(dllimport) BOOL __stdcall 
#line 581
CreatePrivateObjectSecurityEx(PSECURITY_DESCRIPTOR ParentDescriptor, PSECURITY_DESCRIPTOR CreatorDescriptor, PSECURITY_DESCRIPTOR * NewDescriptor, GUID * ObjectType, BOOL IsContainerObject, ULONG AutoInheritFlags, HANDLE Token, PGENERIC_MAPPING GenericMapping); 
#line 592
__declspec(dllimport) BOOL __stdcall 
#line 595
CreatePrivateObjectSecurityWithMultipleInheritance(PSECURITY_DESCRIPTOR ParentDescriptor, PSECURITY_DESCRIPTOR CreatorDescriptor, PSECURITY_DESCRIPTOR * NewDescriptor, GUID ** ObjectTypes, ULONG GuidCount, BOOL IsContainerObject, ULONG AutoInheritFlags, HANDLE Token, PGENERIC_MAPPING GenericMapping); 
#line 607
__declspec(dllimport) BOOL __stdcall 
#line 610
CreateRestrictedToken(HANDLE ExistingTokenHandle, DWORD Flags, DWORD DisableSidCount, PSID_AND_ATTRIBUTES SidsToDisable, DWORD DeletePrivilegeCount, PLUID_AND_ATTRIBUTES PrivilegesToDelete, DWORD RestrictedSidCount, PSID_AND_ATTRIBUTES SidsToRestrict, PHANDLE NewTokenHandle); 
#line 623 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\securitybaseapi.h"
#pragma endregion
#line 625
#pragma region Application Family or OneCore Family
#line 630
__declspec(dllimport) BOOL __stdcall 
#line 634
CreateWellKnownSid(WELL_KNOWN_SID_TYPE WellKnownSidType, PSID DomainSid, PSID pSid, DWORD * cbSid); 
#line 641
__declspec(dllimport) BOOL __stdcall 
#line 645
EqualDomainSid(PSID pSid1, PSID pSid2, BOOL * pfEqual); 
#line 653 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\securitybaseapi.h"
__declspec(dllimport) BOOL __stdcall 
#line 656
DeleteAce(PACL pAcl, DWORD dwAceIndex); 
#line 662 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\securitybaseapi.h"
#pragma endregion
#line 664
#pragma region Desktop Family or OneCore Family
#line 667
__declspec(dllimport) BOOL __stdcall 
#line 670
DestroyPrivateObjectSecurity(PSECURITY_DESCRIPTOR * ObjectDescriptor); 
#line 675 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\securitybaseapi.h"
#pragma endregion
#line 677
#pragma region Application Family or OneCore Family
#line 680
__declspec(dllimport) BOOL __stdcall 
#line 683
DuplicateToken(HANDLE ExistingTokenHandle, SECURITY_IMPERSONATION_LEVEL ImpersonationLevel, PHANDLE DuplicateTokenHandle); 
#line 689
__declspec(dllimport) BOOL __stdcall 
#line 692
DuplicateTokenEx(HANDLE hExistingToken, DWORD dwDesiredAccess, LPSECURITY_ATTRIBUTES lpTokenAttributes, SECURITY_IMPERSONATION_LEVEL ImpersonationLevel, TOKEN_TYPE TokenType, PHANDLE phNewToken); 
#line 702 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\securitybaseapi.h"
#pragma endregion
#line 704
#pragma region Desktop Family or OneCore Family
#line 707
__declspec(dllimport) BOOL __stdcall 
#line 710
EqualPrefixSid(PSID pSid1, PSID pSid2); 
#line 715
__declspec(dllimport) BOOL __stdcall 
#line 718
EqualSid(PSID pSid1, PSID pSid2); 
#line 723
__declspec(dllimport) BOOL __stdcall 
#line 726
FindFirstFreeAce(PACL pAcl, LPVOID * pAce); 
#line 732 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\securitybaseapi.h"
#pragma endregion
#line 734
#pragma region Application Family or OneCore Family
#line 737
__declspec(dllimport) PVOID __stdcall 
#line 740
FreeSid(PSID pSid); 
#line 744
__declspec(dllimport) BOOL __stdcall 
#line 747
GetAce(PACL pAcl, DWORD dwAceIndex, LPVOID * pAce); 
#line 753
__declspec(dllimport) BOOL __stdcall 
#line 756
GetAclInformation(PACL pAcl, LPVOID pAclInformation, DWORD nAclInformationLength, ACL_INFORMATION_CLASS dwAclInformationClass); 
#line 764 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\securitybaseapi.h"
#pragma endregion
#line 766
#pragma region Desktop Family or OneCore Family
#line 769
__declspec(dllimport) BOOL __stdcall 
#line 772
GetFileSecurityW(LPCWSTR lpFileName, SECURITY_INFORMATION RequestedInformation, PSECURITY_DESCRIPTOR pSecurityDescriptor, DWORD nLength, LPDWORD lpnLengthNeeded); 
#line 785 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\securitybaseapi.h"
#pragma endregion
#line 787
#pragma region Application Family or OneCore Family
#line 790
__declspec(dllimport) BOOL __stdcall 
#line 793
GetKernelObjectSecurity(HANDLE Handle, SECURITY_INFORMATION RequestedInformation, PSECURITY_DESCRIPTOR pSecurityDescriptor, DWORD nLength, LPDWORD lpnLengthNeeded); 
#line 801
__declspec(dllimport) DWORD __stdcall 
#line 806
GetLengthSid(PSID pSid); 
#line 811 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\securitybaseapi.h"
#pragma endregion
#line 813
#pragma region Desktop Family or OneCore Family
#line 816
__declspec(dllimport) BOOL __stdcall 
#line 820
GetPrivateObjectSecurity(PSECURITY_DESCRIPTOR ObjectDescriptor, SECURITY_INFORMATION SecurityInformation, PSECURITY_DESCRIPTOR ResultantDescriptor, DWORD DescriptorLength, PDWORD ReturnLength); 
#line 829 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\securitybaseapi.h"
#pragma endregion
#line 831
#pragma region Application Family or OneCore Family
#line 834
__declspec(dllimport) BOOL __stdcall 
#line 837
GetSecurityDescriptorControl(PSECURITY_DESCRIPTOR pSecurityDescriptor, PSECURITY_DESCRIPTOR_CONTROL pControl, LPDWORD lpdwRevision); 
#line 843
__declspec(dllimport) BOOL __stdcall 
#line 846
GetSecurityDescriptorDacl(PSECURITY_DESCRIPTOR pSecurityDescriptor, LPBOOL lpbDaclPresent, PACL * pDacl, LPBOOL lpbDaclDefaulted); 
#line 853
__declspec(dllimport) BOOL __stdcall 
#line 856
GetSecurityDescriptorGroup(PSECURITY_DESCRIPTOR pSecurityDescriptor, PSID * pGroup, LPBOOL lpbGroupDefaulted); 
#line 862
__declspec(dllimport) DWORD __stdcall 
#line 865
GetSecurityDescriptorLength(PSECURITY_DESCRIPTOR pSecurityDescriptor); 
#line 869
__declspec(dllimport) BOOL __stdcall 
#line 872
GetSecurityDescriptorOwner(PSECURITY_DESCRIPTOR pSecurityDescriptor, PSID * pOwner, LPBOOL lpbOwnerDefaulted); 
#line 878
__declspec(dllimport) DWORD __stdcall 
#line 881
GetSecurityDescriptorRMControl(PSECURITY_DESCRIPTOR SecurityDescriptor, PUCHAR RMControl); 
#line 886
__declspec(dllimport) BOOL __stdcall 
#line 889
GetSecurityDescriptorSacl(PSECURITY_DESCRIPTOR pSecurityDescriptor, LPBOOL lpbSaclPresent, PACL * pSacl, LPBOOL lpbSaclDefaulted); 
#line 896
__declspec(dllimport) PSID_IDENTIFIER_AUTHORITY __stdcall 
#line 899
GetSidIdentifierAuthority(PSID pSid); 
#line 903
__declspec(dllimport) DWORD __stdcall 
#line 906
GetSidLengthRequired(UCHAR nSubAuthorityCount); 
#line 910
__declspec(dllimport) PDWORD __stdcall 
#line 913
GetSidSubAuthority(PSID pSid, DWORD nSubAuthority); 
#line 918
__declspec(dllimport) PUCHAR __stdcall 
#line 921
GetSidSubAuthorityCount(PSID pSid); 
#line 925
__declspec(dllimport) BOOL __stdcall 
#line 928
GetTokenInformation(HANDLE TokenHandle, TOKEN_INFORMATION_CLASS TokenInformationClass, LPVOID TokenInformation, DWORD TokenInformationLength, PDWORD ReturnLength); 
#line 938
__declspec(dllimport) BOOL __stdcall 
#line 942
GetWindowsAccountDomainSid(PSID pSid, PSID pDomainSid, DWORD * cbDomainSid); 
#line 951 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\securitybaseapi.h"
#pragma endregion
#line 953
#pragma region Desktop Family or OneCore Family
#line 956
__declspec(dllimport) BOOL __stdcall 
#line 959
ImpersonateAnonymousToken(HANDLE ThreadHandle); 
#line 964
__declspec(dllimport) BOOL __stdcall 
#line 967
ImpersonateLoggedOnUser(HANDLE hToken); 
#line 972
__declspec(dllimport) BOOL __stdcall 
#line 975
ImpersonateSelf(SECURITY_IMPERSONATION_LEVEL ImpersonationLevel); 
#line 980 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\securitybaseapi.h"
#pragma endregion
#line 982
#pragma region Application Family or OneCore Family
#line 985
__declspec(dllimport) BOOL __stdcall 
#line 988
InitializeAcl(PACL pAcl, DWORD nAclLength, DWORD dwAclRevision); 
#line 994
__declspec(dllimport) BOOL __stdcall 
#line 997
InitializeSecurityDescriptor(PSECURITY_DESCRIPTOR pSecurityDescriptor, DWORD dwRevision); 
#line 1002
__declspec(dllimport) BOOL __stdcall 
#line 1005
InitializeSid(PSID Sid, PSID_IDENTIFIER_AUTHORITY pIdentifierAuthority, BYTE nSubAuthorityCount); 
#line 1012 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\securitybaseapi.h"
#pragma endregion
#line 1014
#pragma region Desktop Family or OneCore Family
#line 1017
__declspec(dllimport) BOOL __stdcall 
#line 1020
IsTokenRestricted(HANDLE TokenHandle); 
#line 1025 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\securitybaseapi.h"
#pragma endregion
#line 1027
#pragma region Application Family or OneCore Family
#line 1030
__declspec(dllimport) BOOL __stdcall 
#line 1033
IsValidAcl(PACL pAcl); 
#line 1037
__declspec(dllimport) BOOL __stdcall 
#line 1040
IsValidSecurityDescriptor(PSECURITY_DESCRIPTOR pSecurityDescriptor); 
#line 1044
__declspec(dllimport) BOOL __stdcall 
#line 1047
IsValidSid(PSID pSid); 
#line 1053
__declspec(dllimport) BOOL __stdcall 
#line 1056
IsWellKnownSid(PSID pSid, WELL_KNOWN_SID_TYPE WellKnownSidType); 
#line 1063 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\securitybaseapi.h"
__declspec(dllimport) BOOL __stdcall 
#line 1067
MakeAbsoluteSD(PSECURITY_DESCRIPTOR pSelfRelativeSecurityDescriptor, PSECURITY_DESCRIPTOR pAbsoluteSecurityDescriptor, LPDWORD lpdwAbsoluteSecurityDescriptorSize, PACL pDacl, LPDWORD lpdwDaclSize, PACL pSacl, LPDWORD lpdwSaclSize, PSID pOwner, LPDWORD lpdwOwnerSize, PSID pPrimaryGroup, LPDWORD lpdwPrimaryGroupSize); 
#line 1081
__declspec(dllimport) BOOL __stdcall 
#line 1085
MakeSelfRelativeSD(PSECURITY_DESCRIPTOR pAbsoluteSecurityDescriptor, PSECURITY_DESCRIPTOR pSelfRelativeSecurityDescriptor, LPDWORD lpdwBufferLength); 
#line 1092 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\securitybaseapi.h"
#pragma endregion
#line 1094
#pragma region Desktop Family or OneCore Family
#line 1097
__declspec(dllimport) void __stdcall 
#line 1100
MapGenericMask(PDWORD AccessMask, PGENERIC_MAPPING GenericMapping); 
#line 1105
__declspec(dllimport) BOOL __stdcall 
#line 1108
ObjectCloseAuditAlarmW(LPCWSTR SubsystemName, LPVOID HandleId, BOOL GenerateOnClose); 
#line 1118
__declspec(dllimport) BOOL __stdcall 
#line 1121
ObjectDeleteAuditAlarmW(LPCWSTR SubsystemName, LPVOID HandleId, BOOL GenerateOnClose); 
#line 1131
__declspec(dllimport) BOOL __stdcall 
#line 1134
ObjectOpenAuditAlarmW(LPCWSTR SubsystemName, LPVOID HandleId, LPWSTR ObjectTypeName, LPWSTR ObjectName, PSECURITY_DESCRIPTOR pSecurityDescriptor, HANDLE ClientToken, DWORD DesiredAccess, DWORD GrantedAccess, PPRIVILEGE_SET Privileges, BOOL ObjectCreation, BOOL AccessGranted, LPBOOL GenerateOnClose); 
#line 1153
__declspec(dllimport) BOOL __stdcall 
#line 1156
ObjectPrivilegeAuditAlarmW(LPCWSTR SubsystemName, LPVOID HandleId, HANDLE ClientToken, DWORD DesiredAccess, PPRIVILEGE_SET Privileges, BOOL AccessGranted); 
#line 1169
__declspec(dllimport) BOOL __stdcall 
#line 1172
PrivilegeCheck(HANDLE ClientToken, PPRIVILEGE_SET RequiredPrivileges, LPBOOL pfResult); 
#line 1178
__declspec(dllimport) BOOL __stdcall 
#line 1181
PrivilegedServiceAuditAlarmW(LPCWSTR SubsystemName, LPCWSTR ServiceName, HANDLE ClientToken, PPRIVILEGE_SET Privileges, BOOL AccessGranted); 
#line 1195
__declspec(dllimport) void __stdcall 
#line 1198
QuerySecurityAccessMask(SECURITY_INFORMATION SecurityInformation, LPDWORD DesiredAccess); 
#line 1205 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\securitybaseapi.h"
__declspec(dllimport) BOOL __stdcall 
#line 1208
RevertToSelf(); 
#line 1212
__declspec(dllimport) BOOL __stdcall 
#line 1215
SetAclInformation(PACL pAcl, LPVOID pAclInformation, DWORD nAclInformationLength, ACL_INFORMATION_CLASS dwAclInformationClass); 
#line 1222
__declspec(dllimport) BOOL __stdcall 
#line 1225
SetFileSecurityW(LPCWSTR lpFileName, SECURITY_INFORMATION SecurityInformation, PSECURITY_DESCRIPTOR pSecurityDescriptor); 
#line 1235 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\securitybaseapi.h"
#pragma endregion
#line 1237
#pragma region Application Family or OneCore Family
#line 1240
__declspec(dllimport) BOOL __stdcall 
#line 1243
SetKernelObjectSecurity(HANDLE Handle, SECURITY_INFORMATION SecurityInformation, PSECURITY_DESCRIPTOR SecurityDescriptor); 
#line 1250 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\securitybaseapi.h"
#pragma endregion
#line 1252
#pragma region Desktop Family or OneCore Family
#line 1255
__declspec(dllimport) BOOL __stdcall 
#line 1258
SetPrivateObjectSecurity(SECURITY_INFORMATION SecurityInformation, PSECURITY_DESCRIPTOR ModificationDescriptor, PSECURITY_DESCRIPTOR * ObjectsSecurityDescriptor, PGENERIC_MAPPING GenericMapping, HANDLE Token); 
#line 1266
__declspec(dllimport) BOOL __stdcall 
#line 1269
SetPrivateObjectSecurityEx(SECURITY_INFORMATION SecurityInformation, PSECURITY_DESCRIPTOR ModificationDescriptor, PSECURITY_DESCRIPTOR * ObjectsSecurityDescriptor, ULONG AutoInheritFlags, PGENERIC_MAPPING GenericMapping, HANDLE Token); 
#line 1280
__declspec(dllimport) void __stdcall 
#line 1283
SetSecurityAccessMask(SECURITY_INFORMATION SecurityInformation, LPDWORD DesiredAccess); 
#line 1291 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\securitybaseapi.h"
#pragma endregion
#line 1293
#pragma region Application Family or OneCore Family
#line 1296
__declspec(dllimport) BOOL __stdcall 
#line 1299
SetSecurityDescriptorControl(PSECURITY_DESCRIPTOR pSecurityDescriptor, SECURITY_DESCRIPTOR_CONTROL ControlBitsOfInterest, SECURITY_DESCRIPTOR_CONTROL ControlBitsToSet); 
#line 1305
__declspec(dllimport) BOOL __stdcall 
#line 1308
SetSecurityDescriptorDacl(PSECURITY_DESCRIPTOR pSecurityDescriptor, BOOL bDaclPresent, PACL pDacl, BOOL bDaclDefaulted); 
#line 1315
__declspec(dllimport) BOOL __stdcall 
#line 1318
SetSecurityDescriptorGroup(PSECURITY_DESCRIPTOR pSecurityDescriptor, PSID pGroup, BOOL bGroupDefaulted); 
#line 1324
__declspec(dllimport) BOOL __stdcall 
#line 1327
SetSecurityDescriptorOwner(PSECURITY_DESCRIPTOR pSecurityDescriptor, PSID pOwner, BOOL bOwnerDefaulted); 
#line 1333
__declspec(dllimport) DWORD __stdcall 
#line 1336
SetSecurityDescriptorRMControl(PSECURITY_DESCRIPTOR SecurityDescriptor, PUCHAR RMControl); 
#line 1341
__declspec(dllimport) BOOL __stdcall 
#line 1344
SetSecurityDescriptorSacl(PSECURITY_DESCRIPTOR pSecurityDescriptor, BOOL bSaclPresent, PACL pSacl, BOOL bSaclDefaulted); 
#line 1351
__declspec(dllimport) BOOL __stdcall 
#line 1354
SetTokenInformation(HANDLE TokenHandle, TOKEN_INFORMATION_CLASS TokenInformationClass, LPVOID TokenInformation, DWORD TokenInformationLength); 
#line 1362 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\securitybaseapi.h"
#pragma endregion
#line 1366
#pragma region Desktop Family or OneCore Family
#line 1369
__declspec(dllimport) BOOL __stdcall 
#line 1372
SetCachedSigningLevel(PHANDLE SourceFiles, ULONG SourceFileCount, ULONG Flags, HANDLE TargetFile); 
#line 1379
__declspec(dllimport) BOOL __stdcall 
#line 1382
GetCachedSigningLevel(HANDLE File, PULONG Flags, PULONG SigningLevel, PUCHAR Thumbprint, PULONG ThumbprintSize, PULONG ThumbprintAlgorithm); 
#line 1392 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\securitybaseapi.h"
#pragma endregion
#line 1397 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\securitybaseapi.h"
#pragma region Application Family or OneCore Family
#line 1400
__declspec(dllimport) LONG __stdcall 
#line 1403
CveEventWrite(PCWSTR CveId, PCWSTR AdditionalDetails); 
#line 1409 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\securitybaseapi.h"
#pragma endregion
#line 1414 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\securitybaseapi.h"
#pragma region Application Family or OneCore Family
#line 1417
__declspec(dllimport) BOOL __stdcall 
#line 1420
DeriveCapabilitySidsFromName(LPCWSTR CapName, PSID ** CapabilityGroupSids, DWORD * CapabilityGroupSidCount, PSID ** CapabilitySids, DWORD * CapabilitySidCount); 
#line 1434 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\securitybaseapi.h"
}
#line 1429 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\securitybaseapi.h"
#pragma endregion
#line 22 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\namespaceapi.h"
extern "C" {
#line 25 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\namespaceapi.h"
#pragma region Desktop Family or OneCore Family
#line 30
__declspec(dllimport) HANDLE __stdcall 
#line 33
CreatePrivateNamespaceW(LPSECURITY_ATTRIBUTES lpPrivateNamespaceAttributes, LPVOID lpBoundaryDescriptor, LPCWSTR lpAliasPrefix); 
#line 39
__declspec(dllimport) HANDLE __stdcall 
#line 42
OpenPrivateNamespaceW(LPVOID lpBoundaryDescriptor, LPCWSTR lpAliasPrefix); 
#line 47
__declspec(dllimport) BOOLEAN __stdcall 
#line 50
ClosePrivateNamespace(HANDLE Handle, ULONG Flags); 
#line 55
__declspec(dllimport) HANDLE __stdcall 
#line 58
CreateBoundaryDescriptorW(LPCWSTR Name, ULONG Flags); 
#line 63
__declspec(dllimport) BOOL __stdcall 
#line 66
AddSIDToBoundaryDescriptor(HANDLE * BoundaryDescriptor, PSID RequiredSid); 
#line 71
__declspec(dllimport) void __stdcall 
#line 74
DeleteBoundaryDescriptor(HANDLE BoundaryDescriptor); 
#line 82 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\namespaceapi.h"
}
#line 79
#pragma endregion
#line 22 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\systemtopologyapi.h"
extern "C" {
#line 25 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\systemtopologyapi.h"
#pragma region Desktop Family or OneCore Family or Games Family
#line 28
__declspec(dllimport) BOOL __stdcall 
#line 31
GetNumaHighestNodeNumber(PULONG HighestNodeNumber); 
#line 36 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\systemtopologyapi.h"
#pragma endregion
#line 38
#pragma region Desktop Family or OneCore Family
#line 43
__declspec(dllimport) BOOL __stdcall 
#line 46
GetNumaNodeProcessorMaskEx(USHORT Node, PGROUP_AFFINITY ProcessorMask); 
#line 56 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\systemtopologyapi.h"
__declspec(dllimport) BOOL __stdcall 
#line 59
GetNumaNodeProcessorMask2(USHORT NodeNumber, PGROUP_AFFINITY ProcessorMasks, USHORT ProcessorMaskCount, PUSHORT RequiredMaskCount); 
#line 70 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\systemtopologyapi.h"
__declspec(dllimport) BOOL __stdcall 
#line 73
GetNumaProximityNodeEx(ULONG ProximityId, PUSHORT NodeNumber); 
#line 84 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\systemtopologyapi.h"
}
#line 81
#pragma endregion
#line 22 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\processtopologyapi.h"
extern "C" {
#line 25 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\processtopologyapi.h"
#pragma region Desktop Family or OneCore Family
#line 30
__declspec(dllimport) BOOL __stdcall 
#line 33
GetProcessGroupAffinity(HANDLE hProcess, PUSHORT GroupCount, PUSHORT GroupArray); 
#line 42 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\processtopologyapi.h"
#pragma endregion
#line 44
#pragma region Application Family or OneCore Family or Games Family
#line 49
__declspec(dllimport) BOOL __stdcall 
#line 52
GetThreadGroupAffinity(HANDLE hThread, PGROUP_AFFINITY GroupAffinity); 
#line 57
__declspec(dllimport) BOOL __stdcall 
#line 60
SetThreadGroupAffinity(HANDLE hThread, const GROUP_AFFINITY * GroupAffinity, PGROUP_AFFINITY PreviousGroupAffinity); 
#line 72 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\processtopologyapi.h"
}
#line 69
#pragma endregion
#line 22 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\securityappcontainer.h"
#pragma region Desktop Family or OneCore Family
#line 26
extern "C" {
#line 37 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\securityappcontainer.h"
BOOL __stdcall GetAppContainerNamedObjectPath(HANDLE Token, PSID AppContainerSid, ULONG ObjectPathLength, LPWSTR ObjectPath, PULONG ReturnLength); 
#line 48 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\securityappcontainer.h"
}
#line 52 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\securityappcontainer.h"
#pragma endregion
#line 21 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\realtimeapiset.h"
extern "C" {
#line 24 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\realtimeapiset.h"
#pragma region Desktop Family or OneCore Family
#line 29
__declspec(dllimport) BOOL __stdcall 
#line 32
QueryThreadCycleTime(HANDLE ThreadHandle, PULONG64 CycleTime); 
#line 37
__declspec(dllimport) BOOL __stdcall 
#line 40
QueryProcessCycleTime(HANDLE ProcessHandle, PULONG64 CycleTime); 
#line 45
__declspec(dllimport) BOOL __stdcall 
#line 48
QueryIdleProcessorCycleTime(PULONG BufferLength, PULONG64 ProcessorIdleCycleTime); 
#line 57 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\realtimeapiset.h"
__declspec(dllimport) BOOL __stdcall 
#line 60
QueryIdleProcessorCycleTimeEx(USHORT Group, PULONG BufferLength, PULONG64 ProcessorIdleCycleTime); 
#line 69 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\realtimeapiset.h"
#pragma endregion
#line 71
#pragma region Application Family or OneCore Family
#line 74
__declspec(dllimport) void __stdcall 
#line 77
QueryInterruptTimePrecise(PULONGLONG lpInterruptTimePrecise); 
#line 81
__declspec(dllimport) void __stdcall 
#line 84
QueryUnbiasedInterruptTimePrecise(PULONGLONG lpUnbiasedInterruptTimePrecise); 
#line 88
__declspec(dllimport) void __stdcall 
#line 91
QueryInterruptTime(PULONGLONG lpInterruptTime); 
#line 97
__declspec(dllimport) BOOL __stdcall 
#line 100
QueryUnbiasedInterruptTime(PULONGLONG UnbiasedTime); 
#line 106 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\realtimeapiset.h"
__declspec(dllimport) HRESULT __stdcall 
#line 109
QueryAuxiliaryCounterFrequency(PULONGLONG lpAuxiliaryCounterFrequency); 
#line 113
__declspec(dllimport) HRESULT __stdcall 
#line 116
ConvertAuxiliaryCounterToPerformanceCounter(ULONGLONG ullAuxiliaryCounterValue, PULONGLONG lpPerformanceCounterValue, PULONGLONG lpConversionError); 
#line 122
__declspec(dllimport) HRESULT __stdcall 
#line 125
ConvertPerformanceCounterToAuxiliaryCounter(ULONGLONG ullPerformanceCounterValue, PULONGLONG lpAuxiliaryCounterValue, PULONGLONG lpConversionError); 
#line 135 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\realtimeapiset.h"
}
#line 132
#pragma endregion
#line 73 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
extern "C" {
#line 76 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
#pragma region Application Family
#line 90 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
#pragma endregion
#line 92
#pragma region Desktop Family
#line 98 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
#pragma endregion
#line 100
#pragma region Application Family or OneCore Family or Games Family
#line 319 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
typedef void (__stdcall *PFIBER_START_ROUTINE)(LPVOID lpFiberParameter); 
#line 322
typedef PFIBER_START_ROUTINE LPFIBER_START_ROUTINE; 
#line 324
typedef LPVOID (__stdcall *PFIBER_CALLOUT_ROUTINE)(LPVOID lpParameter); 
#line 337 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
#pragma endregion
#line 339
#pragma region Application Family or OneCore Family
#line 345 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
typedef LPVOID LPLDT_ENTRY; 
#line 467 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
typedef 
#line 448
struct _COMMPROP { 
#line 449
WORD wPacketLength; 
#line 450
WORD wPacketVersion; 
#line 451
DWORD dwServiceMask; 
#line 452
DWORD dwReserved1; 
#line 453
DWORD dwMaxTxQueue; 
#line 454
DWORD dwMaxRxQueue; 
#line 455
DWORD dwMaxBaud; 
#line 456
DWORD dwProvSubType; 
#line 457
DWORD dwProvCapabilities; 
#line 458
DWORD dwSettableParams; 
#line 459
DWORD dwSettableBaud; 
#line 460
WORD wSettableData; 
#line 461
WORD wSettableStopParity; 
#line 462
DWORD dwCurrentTxQueue; 
#line 463
DWORD dwCurrentRxQueue; 
#line 464
DWORD dwProvSpec1; 
#line 465
DWORD dwProvSpec2; 
#line 466
WCHAR wcProvChar[1]; 
#line 467
} COMMPROP, *LPCOMMPROP; 
#line 486
typedef 
#line 475
struct _COMSTAT { 
#line 476
DWORD fCtsHold:1; 
#line 477
DWORD fDsrHold:1; 
#line 478
DWORD fRlsdHold:1; 
#line 479
DWORD fXoffHold:1; 
#line 480
DWORD fXoffSent:1; 
#line 481
DWORD fEof:1; 
#line 482
DWORD fTxim:1; 
#line 483
DWORD fReserved:25; 
#line 484
DWORD cbInQue; 
#line 485
DWORD cbOutQue; 
#line 486
} COMSTAT, *LPCOMSTAT; 
#line 532
typedef 
#line 503
struct _DCB { 
#line 504
DWORD DCBlength; 
#line 505
DWORD BaudRate; 
#line 506
DWORD fBinary:1; 
#line 507
DWORD fParity:1; 
#line 508
DWORD fOutxCtsFlow:1; 
#line 509
DWORD fOutxDsrFlow:1; 
#line 510
DWORD fDtrControl:2; 
#line 511
DWORD fDsrSensitivity:1; 
#line 512
DWORD fTXContinueOnXoff:1; 
#line 513
DWORD fOutX:1; 
#line 514
DWORD fInX:1; 
#line 515
DWORD fErrorChar:1; 
#line 516
DWORD fNull:1; 
#line 517
DWORD fRtsControl:2; 
#line 518
DWORD fAbortOnError:1; 
#line 519
DWORD fDummy2:17; 
#line 520
WORD wReserved; 
#line 521
WORD XonLim; 
#line 522
WORD XoffLim; 
#line 523
BYTE ByteSize; 
#line 524
BYTE Parity; 
#line 525
BYTE StopBits; 
#line 526
char XonChar; 
#line 527
char XoffChar; 
#line 528
char ErrorChar; 
#line 529
char EofChar; 
#line 530
char EvtChar; 
#line 531
WORD wReserved1; 
#line 532
} DCB, *LPDCB; 
#line 540
typedef 
#line 534
struct _COMMTIMEOUTS { 
#line 535
DWORD ReadIntervalTimeout; 
#line 536
DWORD ReadTotalTimeoutMultiplier; 
#line 537
DWORD ReadTotalTimeoutConstant; 
#line 538
DWORD WriteTotalTimeoutMultiplier; 
#line 539
DWORD WriteTotalTimeoutConstant; 
#line 540
} COMMTIMEOUTS, *LPCOMMTIMEOUTS; 
#line 553
typedef 
#line 542
struct _COMMCONFIG { 
#line 543
DWORD dwSize; 
#line 544
WORD wVersion; 
#line 545
WORD wReserved; 
#line 546
DCB dcb; 
#line 547
DWORD dwProviderSubType; 
#line 549
DWORD dwProviderOffset; 
#line 551
DWORD dwProviderSize; 
#line 552
WCHAR wcProviderData[1]; 
#line 553
} COMMCONFIG, *LPCOMMCONFIG; 
#line 556 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
#pragma endregion
#line 558
#pragma region Application Family or OneCore Family or Games Family
#line 593 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
#pragma endregion
#line 595
#pragma region Application Family or OneCore Family
#line 607
typedef 
#line 598
struct _MEMORYSTATUS { 
#line 599
DWORD dwLength; 
#line 600
DWORD dwMemoryLoad; 
#line 601
SIZE_T dwTotalPhys; 
#line 602
SIZE_T dwAvailPhys; 
#line 603
SIZE_T dwTotalPageFile; 
#line 604
SIZE_T dwAvailPageFile; 
#line 605
SIZE_T dwTotalVirtual; 
#line 606
SIZE_T dwAvailVirtual; 
#line 607
} MEMORYSTATUS, *LPMEMORYSTATUS; 
#line 610 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
#pragma endregion
#line 612
#pragma region Application Family or OneCore Family or Games Family
#line 696 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
#pragma endregion
#line 698
#pragma region Application Family or OneCore Family
#line 714
typedef 
#line 706
struct _JIT_DEBUG_INFO { 
#line 707
DWORD dwSize; 
#line 708
DWORD dwProcessorArchitecture; 
#line 709
DWORD dwThreadID; 
#line 710
DWORD dwReserved0; 
#line 711
ULONG64 lpExceptionAddress; 
#line 712
ULONG64 lpExceptionRecord; 
#line 713
ULONG64 lpContextRecord; 
#line 714
} JIT_DEBUG_INFO, *LPJIT_DEBUG_INFO; 
#line 716
typedef JIT_DEBUG_INFO JIT_DEBUG_INFO32, *LPJIT_DEBUG_INFO32; 
#line 717
typedef JIT_DEBUG_INFO JIT_DEBUG_INFO64, *LPJIT_DEBUG_INFO64; 
#line 720 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
#pragma endregion
#line 722
#pragma region Application Family or OneCore Family or Games Family
#line 726
typedef PEXCEPTION_RECORD LPEXCEPTION_RECORD; 
#line 727
typedef PEXCEPTION_POINTERS LPEXCEPTION_POINTERS; 
#line 739 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
#pragma endregion
#line 741
#pragma region Application Family or OneCore Family
#line 751 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
#pragma endregion
#line 753
#pragma region Application Family or OneCore Family or Games Family
#line 768 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
#pragma endregion
#line 770
#pragma region Application Family or OneCore Family
#line 786 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
#pragma endregion
#line 788
#pragma region Application Family or OneCore or Games Family
#line 794 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
#pragma endregion
#line 796
#pragma region Application Family or OneCore Family
#line 941 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
#pragma endregion
#line 943
#pragma region Application Family or OneCore Family or Games Family
#line 983
typedef 
#line 976
struct _OFSTRUCT { 
#line 977
BYTE cBytes; 
#line 978
BYTE fFixedDisk; 
#line 979
WORD nErrCode; 
#line 980
WORD Reserved1; 
#line 981
WORD Reserved2; 
#line 982
CHAR szPathName[128]; 
#line 983
} OFSTRUCT, *LPOFSTRUCT, *POFSTRUCT; 
#line 991 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
#pragma endregion
#line 993
#pragma region Desktop Family
#line 1006 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
int __stdcall WinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance, LPSTR lpCmdLine, int nShowCmd); 
#line 1019 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
int __stdcall wWinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance, LPWSTR lpCmdLine, int nShowCmd); 
#line 1027 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
#pragma endregion
#line 1029
#pragma region Application Family or OneCore or Games Family
#line 1032
__declspec(dllimport) 
#line 1035
__declspec(allocator) HGLOBAL __stdcall 
#line 1038
GlobalAlloc(UINT uFlags, SIZE_T dwBytes); 
#line 1044 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
#pragma endregion
#line 1046
#pragma region Application or Games Family
#line 1049
__declspec(dllimport) 
#line 1051
__declspec(allocator) HGLOBAL __stdcall 
#line 1054
GlobalReAlloc(HGLOBAL hMem, SIZE_T dwBytes, UINT uFlags); 
#line 1061 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
#pragma endregion
#line 1063
#pragma region Application Family or OneCore or Games Family
#line 1066
__declspec(dllimport) SIZE_T __stdcall 
#line 1069
GlobalSize(HGLOBAL hMem); 
#line 1073
__declspec(dllimport) BOOL __stdcall 
#line 1076
GlobalUnlock(HGLOBAL hMem); 
#line 1080
__declspec(dllimport) LPVOID __stdcall 
#line 1084
GlobalLock(HGLOBAL hMem); 
#line 1089 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
#pragma endregion
#line 1091
#pragma region Desktop Family
#line 1094
__declspec(dllimport) UINT __stdcall 
#line 1097
GlobalFlags(HGLOBAL hMem); 
#line 1101
__declspec(dllimport) HGLOBAL __stdcall 
#line 1105
GlobalHandle(LPCVOID pMem); 
#line 1110 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
#pragma endregion
#line 1112
#pragma region Application Family or OneCore or Games Family
#line 1115
__declspec(dllimport) HGLOBAL __stdcall 
#line 1120
GlobalFree(HGLOBAL hMem); 
#line 1125 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
#pragma endregion
#line 1127
#pragma region Desktop Family
#line 1130
__declspec(dllimport) SIZE_T __stdcall 
#line 1133
GlobalCompact(DWORD dwMinFree); 
#line 1137
__declspec(dllimport) void __stdcall 
#line 1140
GlobalFix(HGLOBAL hMem); 
#line 1144
__declspec(dllimport) void __stdcall 
#line 1147
GlobalUnfix(HGLOBAL hMem); 
#line 1151
__declspec(dllimport) LPVOID __stdcall 
#line 1154
GlobalWire(HGLOBAL hMem); 
#line 1158
__declspec(dllimport) BOOL __stdcall 
#line 1161
GlobalUnWire(HGLOBAL hMem); 
#line 1166
__declspec(dllimport) void __stdcall 
#line 1169
GlobalMemoryStatus(LPMEMORYSTATUS lpBuffer); 
#line 1174 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
#pragma endregion
#line 1176
#pragma region Application Family or OneCore Family or Games Family
#line 1179
__declspec(dllimport) 
#line 1182
__declspec(allocator) HLOCAL __stdcall 
#line 1185
LocalAlloc(UINT uFlags, SIZE_T uBytes); 
#line 1190
__declspec(dllimport) 
#line 1192
__declspec(allocator) HLOCAL __stdcall 
#line 1195
LocalReAlloc(HLOCAL hMem, SIZE_T uBytes, UINT uFlags); 
#line 1202 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
#pragma endregion
#line 1204
#pragma region Desktop Family or OneCore or Games Family
#line 1207
__declspec(dllimport) LPVOID __stdcall 
#line 1211
LocalLock(HLOCAL hMem); 
#line 1216 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
#pragma endregion
#line 1218
#pragma region Desktop Family
#line 1221
__declspec(dllimport) HLOCAL __stdcall 
#line 1225
LocalHandle(LPCVOID pMem); 
#line 1230 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
#pragma endregion
#line 1232
#pragma region Desktop Family or OneCore or Games Family
#line 1235
__declspec(dllimport) BOOL __stdcall 
#line 1238
LocalUnlock(HLOCAL hMem); 
#line 1243 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
#pragma endregion
#line 1245
#pragma region Desktop or Games Family
#line 1248
__declspec(dllimport) SIZE_T __stdcall 
#line 1251
LocalSize(HLOCAL hMem); 
#line 1256 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
#pragma endregion
#line 1258
#pragma region Desktop Family
#line 1261
__declspec(dllimport) UINT __stdcall 
#line 1264
LocalFlags(HLOCAL hMem); 
#line 1269 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
#pragma endregion
#line 1271
#pragma region Application Family or OneCore Family or Games Family
#line 1274
__declspec(dllimport) HLOCAL __stdcall 
#line 1279
LocalFree(HLOCAL hMem); 
#line 1284 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
#pragma endregion
#line 1286
#pragma region Desktop Family
#line 1289
__declspec(dllimport) SIZE_T __stdcall 
#line 1292
LocalShrink(HLOCAL hMem, UINT cbNewSize); 
#line 1297
__declspec(dllimport) SIZE_T __stdcall 
#line 1300
LocalCompact(UINT uMinFree); 
#line 1320 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
__declspec(dllimport) BOOL __stdcall 
#line 1323
GetBinaryTypeA(LPCSTR lpApplicationName, LPDWORD lpBinaryType); 
#line 1327
__declspec(dllimport) BOOL __stdcall 
#line 1330
GetBinaryTypeW(LPCWSTR lpApplicationName, LPDWORD lpBinaryType); 
#line 1340 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
__declspec(dllimport) DWORD __stdcall 
#line 1344
GetShortPathNameA(LPCSTR lpszLongPath, LPSTR lpszShortPath, DWORD cchBuffer); 
#line 1355 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
__declspec(dllimport) DWORD __stdcall 
#line 1359
GetLongPathNameTransactedA(LPCSTR lpszShortPath, LPSTR lpszLongPath, DWORD cchBuffer, HANDLE hTransaction); 
#line 1365
__declspec(dllimport) DWORD __stdcall 
#line 1369
GetLongPathNameTransactedW(LPCWSTR lpszShortPath, LPWSTR lpszLongPath, DWORD cchBuffer, HANDLE hTransaction); 
#line 1384 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
#pragma endregion
#line 1386
#pragma region Application Family or OneCore Family or Games Family
#line 1389
__declspec(dllimport) BOOL __stdcall 
#line 1392
GetProcessAffinityMask(HANDLE hProcess, PDWORD_PTR lpProcessAffinityMask, PDWORD_PTR lpSystemAffinityMask); 
#line 1398
__declspec(dllimport) BOOL __stdcall 
#line 1401
SetProcessAffinityMask(HANDLE hProcess, DWORD_PTR dwProcessAffinityMask); 
#line 1407 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
#pragma endregion
#line 1409
#pragma region Desktop Family
#line 1412
__declspec(dllimport) BOOL __stdcall 
#line 1415
GetProcessIoCounters(HANDLE hProcess, PIO_COUNTERS lpIoCounters); 
#line 1420
__declspec(dllimport) void __stdcall 
#line 1424
FatalExit(int ExitCode); 
#line 1429 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
#pragma endregion
#line 1431
#pragma region Application Family or OneCore Family or Games Family
#line 1434
__declspec(dllimport) BOOL __stdcall 
#line 1437
SetEnvironmentStringsA(LPCH NewEnvironment); 
#line 1445 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
#pragma endregion
#line 1453
#pragma region Application Family or OneCore Family or Games Family
#line 1458
__declspec(dllimport) void __stdcall 
#line 1461
SwitchToFiber(LPVOID lpFiber); 
#line 1465
__declspec(dllimport) void __stdcall 
#line 1468
DeleteFiber(LPVOID lpFiber); 
#line 1474
__declspec(dllimport) BOOL __stdcall 
#line 1477
ConvertFiberToThread(); 
#line 1483 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
__declspec(dllimport) LPVOID __stdcall 
#line 1487
CreateFiberEx(SIZE_T dwStackCommitSize, SIZE_T dwStackReserveSize, DWORD dwFlags, LPFIBER_START_ROUTINE lpStartAddress, LPVOID lpParameter); 
#line 1495
__declspec(dllimport) LPVOID __stdcall 
#line 1499
ConvertThreadToFiberEx(LPVOID lpParameter, DWORD dwFlags); 
#line 1505 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
#pragma endregion
#line 1507
#pragma region Desktop Family or OneCore Family or Games Family
#line 1510
__declspec(dllimport) LPVOID __stdcall 
#line 1514
CreateFiber(SIZE_T dwStackSize, LPFIBER_START_ROUTINE lpStartAddress, LPVOID lpParameter); 
#line 1520
__declspec(dllimport) LPVOID __stdcall 
#line 1524
ConvertThreadToFiber(LPVOID lpParameter); 
#line 1529 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
#pragma endregion
#line 1539
#pragma region Desktop Family
#line 1546
typedef void *PUMS_CONTEXT; 
#line 1548
typedef void *PUMS_COMPLETION_LIST; 
#line 1550
typedef _RTL_UMS_THREAD_INFO_CLASS UMS_THREAD_INFO_CLASS, *PUMS_THREAD_INFO_CLASS; 
#line 1552
typedef _RTL_UMS_SCHEDULER_REASON UMS_SCHEDULER_REASON; 
#line 1554
typedef PRTL_UMS_SCHEDULER_ENTRY_POINT PUMS_SCHEDULER_ENTRY_POINT; 
#line 1579
typedef 
#line 1556
struct _UMS_SCHEDULER_STARTUP_INFO { 
#line 1561
ULONG UmsVersion; 
#line 1566
PUMS_COMPLETION_LIST CompletionList; 
#line 1572
PUMS_SCHEDULER_ENTRY_POINT SchedulerProc; 
#line 1577
PVOID SchedulerParam; 
#line 1579
} UMS_SCHEDULER_STARTUP_INFO, *PUMS_SCHEDULER_STARTUP_INFO; 
#line 1590
typedef 
#line 1581
struct _UMS_SYSTEM_THREAD_INFORMATION { 
#line 1582
ULONG UmsVersion; 
#line 1583
union { 
#line 1584
struct { 
#line 1585
ULONG IsUmsSchedulerThread:1; 
#line 1586
ULONG IsUmsWorkerThread:1; 
#line 1587
}; 
#line 1588
ULONG ThreadUmsFlags; 
#line 1589
}; 
#line 1590
} UMS_SYSTEM_THREAD_INFORMATION, *PUMS_SYSTEM_THREAD_INFORMATION; 
#line 1593
__declspec(dllimport) BOOL __stdcall 
#line 1596
CreateUmsCompletionList(PUMS_COMPLETION_LIST * UmsCompletionList); 
#line 1600
__declspec(dllimport) BOOL __stdcall 
#line 1603
DequeueUmsCompletionListItems(PUMS_COMPLETION_LIST UmsCompletionList, DWORD WaitTimeOut, PUMS_CONTEXT * UmsThreadList); 
#line 1609
__declspec(dllimport) BOOL __stdcall 
#line 1612
GetUmsCompletionListEvent(PUMS_COMPLETION_LIST UmsCompletionList, PHANDLE UmsCompletionEvent); 
#line 1617
__declspec(dllimport) BOOL __stdcall 
#line 1620
ExecuteUmsThread(PUMS_CONTEXT UmsThread); 
#line 1624
__declspec(dllimport) BOOL __stdcall 
#line 1627
UmsThreadYield(PVOID SchedulerParam); 
#line 1631
__declspec(dllimport) BOOL __stdcall 
#line 1634
DeleteUmsCompletionList(PUMS_COMPLETION_LIST UmsCompletionList); 
#line 1638
__declspec(dllimport) PUMS_CONTEXT __stdcall 
#line 1641
GetCurrentUmsThread(); 
#line 1645
__declspec(dllimport) PUMS_CONTEXT __stdcall 
#line 1648
GetNextUmsListItem(PUMS_CONTEXT UmsContext); 
#line 1652
__declspec(dllimport) BOOL __stdcall 
#line 1655
QueryUmsThreadInformation(PUMS_CONTEXT UmsThread, UMS_THREAD_INFO_CLASS UmsThreadInfoClass, PVOID UmsThreadInformation, ULONG UmsThreadInformationLength, PULONG ReturnLength); 
#line 1663
__declspec(dllimport) BOOL __stdcall 
#line 1666
SetUmsThreadInformation(PUMS_CONTEXT UmsThread, UMS_THREAD_INFO_CLASS UmsThreadInfoClass, PVOID UmsThreadInformation, ULONG UmsThreadInformationLength); 
#line 1673
__declspec(dllimport) BOOL __stdcall 
#line 1676
DeleteUmsThreadContext(PUMS_CONTEXT UmsThread); 
#line 1680
__declspec(dllimport) BOOL __stdcall 
#line 1683
CreateUmsThreadContext(PUMS_CONTEXT * lpUmsThread); 
#line 1687
__declspec(dllimport) BOOL __stdcall 
#line 1690
EnterUmsSchedulingMode(PUMS_SCHEDULER_STARTUP_INFO SchedulerStartupInfo); 
#line 1694
__declspec(dllimport) BOOL __stdcall 
#line 1697
GetUmsSystemThreadInformation(HANDLE ThreadHandle, PUMS_SYSTEM_THREAD_INFORMATION SystemThreadInfo); 
#line 1705 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
#pragma endregion
#line 1713 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
#pragma region Application Family or OneCore Family or Games Family
#line 1716
__declspec(dllimport) DWORD_PTR __stdcall 
#line 1719
SetThreadAffinityMask(HANDLE hThread, DWORD_PTR dwThreadAffinityMask); 
#line 1725 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
#pragma endregion
#line 1727
#pragma region Desktop Family
#line 1735
__declspec(dllimport) BOOL __stdcall 
#line 1738
SetProcessDEPPolicy(DWORD dwFlags); 
#line 1742
__declspec(dllimport) BOOL __stdcall 
#line 1745
GetProcessDEPPolicy(HANDLE hProcess, LPDWORD lpFlags, PBOOL lpPermanent); 
#line 1753 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
__declspec(dllimport) BOOL __stdcall 
#line 1756
RequestWakeupLatency(LATENCY_TIME latency); 
#line 1760
__declspec(dllimport) BOOL __stdcall 
#line 1763
IsSystemResumeAutomatic(); 
#line 1767
__declspec(dllimport) BOOL __stdcall 
#line 1770
GetThreadSelectorEntry(HANDLE hThread, DWORD dwSelector, LPLDT_ENTRY lpSelectorEntry); 
#line 1776
__declspec(dllimport) EXECUTION_STATE __stdcall 
#line 1779
SetThreadExecutionState(EXECUTION_STATE esFlags); 
#line 1789
typedef REASON_CONTEXT POWER_REQUEST_CONTEXT, *PPOWER_REQUEST_CONTEXT, *LPPOWER_REQUEST_CONTEXT; 
#line 1791
__declspec(dllimport) HANDLE __stdcall 
#line 1794
PowerCreateRequest(PREASON_CONTEXT Context); 
#line 1798
__declspec(dllimport) BOOL __stdcall 
#line 1801
PowerSetRequest(HANDLE PowerRequest, POWER_REQUEST_TYPE RequestType); 
#line 1806
__declspec(dllimport) BOOL __stdcall 
#line 1809
PowerClearRequest(HANDLE PowerRequest, POWER_REQUEST_TYPE RequestType); 
#line 1817 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
#pragma endregion
#line 1819
#pragma region Application Family
#line 1827 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
#pragma endregion
#line 1829
#pragma region Desktop or Games Family
#line 1854 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
#pragma endregion
#line 1856
#pragma region Application Family or OneCore Family or Games Family
#line 1877
__declspec(dllimport) BOOL __stdcall 
#line 1880
SetFileCompletionNotificationModes(HANDLE FileHandle, UCHAR Flags); 
#line 1888 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
#pragma endregion
#line 1890
#pragma region Desktop Family
#line 1902
__declspec(dllimport) BOOL __stdcall 
#line 1905
Wow64GetThreadSelectorEntry(HANDLE hThread, DWORD dwSelector, PWOW64_LDT_ENTRY lpSelectorEntry); 
#line 1915 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
__declspec(dllimport) BOOL __stdcall 
#line 1918
DebugSetProcessKillOnExit(BOOL KillOnExit); 
#line 1922
__declspec(dllimport) BOOL __stdcall 
#line 1925
DebugBreakProcess(HANDLE Process); 
#line 1930 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
#pragma endregion
#line 1932
#pragma region Application Family
#line 1940 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
#pragma endregion
#line 1942
#pragma region Desktop Family
#line 1945
__declspec(dllimport) BOOL __stdcall 
#line 1948
PulseEvent(HANDLE hEvent); 
#line 1952
__declspec(dllimport) ATOM __stdcall 
#line 1955
GlobalDeleteAtom(ATOM nAtom); 
#line 1959
__declspec(dllimport) BOOL __stdcall 
#line 1962
InitAtomTable(DWORD nSize); 
#line 1966
__declspec(dllimport) ATOM __stdcall 
#line 1969
DeleteAtom(ATOM nAtom); 
#line 1973
__declspec(dllimport) UINT __stdcall 
#line 1976
SetHandleCount(UINT uNumber); 
#line 1980
__declspec(dllimport) BOOL __stdcall 
#line 1983
RequestDeviceWakeup(HANDLE hDevice); 
#line 1987
__declspec(dllimport) BOOL __stdcall 
#line 1990
CancelDeviceWakeupRequest(HANDLE hDevice); 
#line 1994
__declspec(dllimport) BOOL __stdcall 
#line 1997
GetDevicePowerState(HANDLE hDevice, BOOL * pfOn); 
#line 2002
__declspec(dllimport) BOOL __stdcall 
#line 2005
SetMessageWaitingIndicator(HANDLE hMsgIndicator, ULONG ulMsgCount); 
#line 2011
__declspec(dllimport) BOOL __stdcall 
#line 2014
SetFileShortNameA(HANDLE hFile, LPCSTR lpShortName); 
#line 2018
__declspec(dllimport) BOOL __stdcall 
#line 2021
SetFileShortNameW(HANDLE hFile, LPCWSTR lpShortName); 
#line 2032 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
#pragma endregion
#line 2034
#pragma region Desktop Family or Games Family
#line 2041 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
#pragma endregion
#line 2043
#pragma region Desktop Family
#line 2048
__declspec(dllimport) DWORD __stdcall 
#line 2051
LoadModule(LPCSTR lpModuleName, LPVOID lpParameterBlock); 
#line 2058
__declspec(dllimport) UINT __stdcall 
#line 2061
WinExec(LPCSTR lpCmdLine, UINT uCmdShow); 
#line 2068 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
#pragma endregion
#line 2070
#pragma region Desktop Family or OneCore or App Family
#line 2073
__declspec(dllimport) BOOL __stdcall 
#line 2076
ClearCommBreak(HANDLE hFile); 
#line 2080
__declspec(dllimport) BOOL __stdcall 
#line 2083
ClearCommError(HANDLE hFile, LPDWORD lpErrors, LPCOMSTAT lpStat); 
#line 2089
__declspec(dllimport) BOOL __stdcall 
#line 2092
SetupComm(HANDLE hFile, DWORD dwInQueue, DWORD dwOutQueue); 
#line 2098
__declspec(dllimport) BOOL __stdcall 
#line 2101
EscapeCommFunction(HANDLE hFile, DWORD dwFunc); 
#line 2106
__declspec(dllimport) BOOL __stdcall 
#line 2110
GetCommConfig(HANDLE hCommDev, LPCOMMCONFIG lpCC, LPDWORD lpdwSize); 
#line 2116
__declspec(dllimport) BOOL __stdcall 
#line 2119
GetCommMask(HANDLE hFile, LPDWORD lpEvtMask); 
#line 2124
__declspec(dllimport) BOOL __stdcall 
#line 2127
GetCommProperties(HANDLE hFile, LPCOMMPROP lpCommProp); 
#line 2132
__declspec(dllimport) BOOL __stdcall 
#line 2135
GetCommModemStatus(HANDLE hFile, LPDWORD lpModemStat); 
#line 2140
__declspec(dllimport) BOOL __stdcall 
#line 2143
GetCommState(HANDLE hFile, LPDCB lpDCB); 
#line 2148
__declspec(dllimport) BOOL __stdcall 
#line 2151
GetCommTimeouts(HANDLE hFile, LPCOMMTIMEOUTS lpCommTimeouts); 
#line 2156
__declspec(dllimport) BOOL __stdcall 
#line 2159
PurgeComm(HANDLE hFile, DWORD dwFlags); 
#line 2164
__declspec(dllimport) BOOL __stdcall 
#line 2167
SetCommBreak(HANDLE hFile); 
#line 2171
__declspec(dllimport) BOOL __stdcall 
#line 2174
SetCommConfig(HANDLE hCommDev, LPCOMMCONFIG lpCC, DWORD dwSize); 
#line 2180
__declspec(dllimport) BOOL __stdcall 
#line 2183
SetCommMask(HANDLE hFile, DWORD dwEvtMask); 
#line 2188
__declspec(dllimport) BOOL __stdcall 
#line 2191
SetCommState(HANDLE hFile, LPDCB lpDCB); 
#line 2196
__declspec(dllimport) BOOL __stdcall 
#line 2199
SetCommTimeouts(HANDLE hFile, LPCOMMTIMEOUTS lpCommTimeouts); 
#line 2204
__declspec(dllimport) BOOL __stdcall 
#line 2207
TransmitCommChar(HANDLE hFile, char cChar); 
#line 2212
__declspec(dllimport) BOOL __stdcall 
#line 2215
WaitCommEvent(HANDLE hFile, LPDWORD lpEvtMask, LPOVERLAPPED lpOverlapped); 
#line 2224
__declspec(dllimport) HANDLE __stdcall 
#line 2227
OpenCommPort(ULONG uPortNumber, DWORD dwDesiredAccess, DWORD dwFlagsAndAttributes); 
#line 2237 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
__declspec(dllimport) ULONG __stdcall 
#line 2240
GetCommPorts(PULONG lpPortNumbers, ULONG uPortNumbersCount, PULONG puPortNumbersFound); 
#line 2249 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
#pragma endregion
#line 2251
#pragma region Desktop Family
#line 2254
__declspec(dllimport) DWORD __stdcall 
#line 2257
SetTapePosition(HANDLE hDevice, DWORD dwPositionMethod, DWORD dwPartition, DWORD dwOffsetLow, DWORD dwOffsetHigh, BOOL bImmediate); 
#line 2266
__declspec(dllimport) DWORD __stdcall 
#line 2269
GetTapePosition(HANDLE hDevice, DWORD dwPositionType, LPDWORD lpdwPartition, LPDWORD lpdwOffsetLow, LPDWORD lpdwOffsetHigh); 
#line 2277
__declspec(dllimport) DWORD __stdcall 
#line 2280
PrepareTape(HANDLE hDevice, DWORD dwOperation, BOOL bImmediate); 
#line 2286
__declspec(dllimport) DWORD __stdcall 
#line 2289
EraseTape(HANDLE hDevice, DWORD dwEraseType, BOOL bImmediate); 
#line 2295
__declspec(dllimport) DWORD __stdcall 
#line 2298
CreateTapePartition(HANDLE hDevice, DWORD dwPartitionMethod, DWORD dwCount, DWORD dwSize); 
#line 2305
__declspec(dllimport) DWORD __stdcall 
#line 2308
WriteTapemark(HANDLE hDevice, DWORD dwTapemarkType, DWORD dwTapemarkCount, BOOL bImmediate); 
#line 2315
__declspec(dllimport) DWORD __stdcall 
#line 2318
GetTapeStatus(HANDLE hDevice); 
#line 2322
__declspec(dllimport) DWORD __stdcall 
#line 2325
GetTapeParameters(HANDLE hDevice, DWORD dwOperation, LPDWORD lpdwSize, LPVOID lpTapeInformation); 
#line 2335
__declspec(dllimport) DWORD __stdcall 
#line 2338
SetTapeParameters(HANDLE hDevice, DWORD dwOperation, LPVOID lpTapeInformation); 
#line 2348 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
#pragma endregion
#line 2350
#pragma region Application Family or OneCore Family or Games Family
#line 2353
__declspec(dllimport) int __stdcall 
#line 2356
MulDiv(int nNumber, int nNumerator, int nDenominator); 
#line 2363 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
#pragma endregion
#line 2365
#pragma region Desktop Family
#line 2374
typedef 
#line 2368
enum _DEP_SYSTEM_POLICY_TYPE { 
#line 2369
DEPPolicyAlwaysOff, 
#line 2370
DEPPolicyAlwaysOn, 
#line 2371
DEPPolicyOptIn, 
#line 2372
DEPPolicyOptOut, 
#line 2373
DEPTotalPolicyCount
#line 2374
} DEP_SYSTEM_POLICY_TYPE; 
#line 2378
__declspec(dllimport) DEP_SYSTEM_POLICY_TYPE __stdcall 
#line 2381
GetSystemDEPPolicy(); 
#line 2389 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
__declspec(dllimport) BOOL __stdcall 
#line 2392
GetSystemRegistryQuota(PDWORD pdwQuotaAllowed, PDWORD pdwQuotaUsed); 
#line 2403 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
__declspec(dllimport) BOOL __stdcall 
#line 2406
FileTimeToDosDateTime(const FILETIME * lpFileTime, LPWORD lpFatDate, LPWORD lpFatTime); 
#line 2412
__declspec(dllimport) BOOL __stdcall 
#line 2415
DosDateTimeToFileTime(WORD wFatDate, WORD wFatTime, LPFILETIME lpFileTime); 
#line 2422 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
#pragma endregion
#line 2424
#pragma region Application Family or OneCore Family or Games Family
#line 2430
__declspec(dllimport) DWORD __stdcall 
#line 2434
FormatMessageA(DWORD dwFlags, LPCVOID lpSource, DWORD dwMessageId, DWORD dwLanguageId, LPSTR lpBuffer, DWORD nSize, va_list * Arguments); 
#line 2445
__declspec(dllimport) DWORD __stdcall 
#line 2449
FormatMessageW(DWORD dwFlags, LPCVOID lpSource, DWORD dwMessageId, DWORD dwLanguageId, LPWSTR lpBuffer, DWORD nSize, va_list * Arguments); 
#line 2505 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
#pragma endregion
#line 2507
#pragma region Desktop Family
#line 2511
__declspec(dllimport) HANDLE __stdcall 
#line 2514
CreateMailslotA(LPCSTR lpName, DWORD nMaxMessageSize, DWORD lReadTimeout, LPSECURITY_ATTRIBUTES lpSecurityAttributes); 
#line 2520
__declspec(dllimport) HANDLE __stdcall 
#line 2523
CreateMailslotW(LPCWSTR lpName, DWORD nMaxMessageSize, DWORD lReadTimeout, LPSECURITY_ATTRIBUTES lpSecurityAttributes); 
#line 2535 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
__declspec(dllimport) BOOL __stdcall 
#line 2538
GetMailslotInfo(HANDLE hMailslot, LPDWORD lpMaxMessageSize, LPDWORD lpNextSize, LPDWORD lpMessageCount, LPDWORD lpReadTimeout); 
#line 2546
__declspec(dllimport) BOOL __stdcall 
#line 2549
SetMailslotInfo(HANDLE hMailslot, DWORD lReadTimeout); 
#line 2558
__declspec(dllimport) BOOL __stdcall 
#line 2561
EncryptFileA(LPCSTR lpFileName); 
#line 2564
__declspec(dllimport) BOOL __stdcall 
#line 2567
EncryptFileW(LPCWSTR lpFileName); 
#line 2576 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
__declspec(dllimport) BOOL __stdcall 
#line 2579
DecryptFileA(LPCSTR lpFileName, DWORD dwReserved); 
#line 2583
__declspec(dllimport) BOOL __stdcall 
#line 2586
DecryptFileW(LPCWSTR lpFileName, DWORD dwReserved); 
#line 2611 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
__declspec(dllimport) BOOL __stdcall 
#line 2614
FileEncryptionStatusA(LPCSTR lpFileName, LPDWORD lpStatus); 
#line 2618
__declspec(dllimport) BOOL __stdcall 
#line 2621
FileEncryptionStatusW(LPCWSTR lpFileName, LPDWORD lpStatus); 
#line 2639 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
typedef DWORD (__stdcall *PFE_EXPORT_FUNC)(PBYTE pbData, PVOID pvCallbackContext, ULONG ulLength); 
#line 2647
typedef DWORD (__stdcall *PFE_IMPORT_FUNC)(PBYTE pbData, PVOID pvCallbackContext, PULONG ulLength); 
#line 2665
__declspec(dllimport) DWORD __stdcall 
#line 2668
OpenEncryptedFileRawA(LPCSTR lpFileName, ULONG ulFlags, PVOID * pvContext); 
#line 2673
__declspec(dllimport) DWORD __stdcall 
#line 2676
OpenEncryptedFileRawW(LPCWSTR lpFileName, ULONG ulFlags, PVOID * pvContext); 
#line 2687 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
__declspec(dllimport) DWORD __stdcall 
#line 2690
ReadEncryptedFileRaw(PFE_EXPORT_FUNC pfExportCallback, PVOID pvCallbackContext, PVOID pvContext); 
#line 2696
__declspec(dllimport) DWORD __stdcall 
#line 2699
WriteEncryptedFileRaw(PFE_IMPORT_FUNC pfImportCallback, PVOID pvCallbackContext, PVOID pvContext); 
#line 2705
__declspec(dllimport) void __stdcall 
#line 2708
CloseEncryptedFileRaw(PVOID pvContext); 
#line 2713 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
#pragma endregion
#line 2719
#pragma region Desktop Family or OneCore Family or Games Family
#line 2722
__declspec(dllimport) int __stdcall 
#line 2725
lstrcmpA(LPCSTR lpString1, LPCSTR lpString2); 
#line 2729
__declspec(dllimport) int __stdcall 
#line 2732
lstrcmpW(LPCWSTR lpString1, LPCWSTR lpString2); 
#line 2742 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
__declspec(dllimport) int __stdcall 
#line 2745
lstrcmpiA(LPCSTR lpString1, LPCSTR lpString2); 
#line 2749
__declspec(dllimport) int __stdcall 
#line 2752
lstrcmpiW(LPCWSTR lpString1, LPCWSTR lpString2); 
#line 2763 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
#pragma endregion
#line 2765
#pragma region Desktop Family or OneCore Family
#line 2769
#pragma warning(push)
#pragma warning(disable:4995)
#line 2773 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
__declspec(dllimport) LPSTR __stdcall 
#line 2780
lstrcpynA(LPSTR lpString1, LPCSTR lpString2, int iMaxLength); 
#line 2785
__declspec(dllimport) LPWSTR __stdcall 
#line 2792
lstrcpynW(LPWSTR lpString1, LPCWSTR lpString2, int iMaxLength); 
#line 2803 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
__declspec(dllimport) LPSTR __stdcall 
#line 2806
lstrcpyA(LPSTR lpString1, LPCSTR lpString2); 
#line 2810
__declspec(dllimport) LPWSTR __stdcall 
#line 2813
lstrcpyW(LPWSTR lpString1, LPCWSTR lpString2); 
#line 2823 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
__declspec(dllimport) LPSTR __stdcall 
#line 2826
lstrcatA(LPSTR lpString1, LPCSTR lpString2); 
#line 2830
__declspec(dllimport) LPWSTR __stdcall 
#line 2833
lstrcatW(LPWSTR lpString1, LPCWSTR lpString2); 
#line 2844 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
#pragma warning(pop)
#line 2848 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
#pragma endregion
#line 2850
#pragma region Desktop Family or OneCore Family or Games Family
#line 2853
__declspec(dllimport) int __stdcall 
#line 2856
lstrlenA(LPCSTR lpString); 
#line 2859
__declspec(dllimport) int __stdcall 
#line 2862
lstrlenW(LPCWSTR lpString); 
#line 2872 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
#pragma endregion
#line 2874
#pragma region Desktop Family
#line 2877
__declspec(dllimport) HFILE __stdcall 
#line 2880
OpenFile(LPCSTR lpFileName, LPOFSTRUCT lpReOpenBuff, UINT uStyle); 
#line 2886
__declspec(dllimport) HFILE __stdcall 
#line 2889
_lopen(LPCSTR lpPathName, int iReadWrite); 
#line 2894
__declspec(dllimport) HFILE __stdcall 
#line 2897
_lcreat(LPCSTR lpPathName, int iAttribute); 
#line 2902
__declspec(dllimport) UINT __stdcall 
#line 2905
_lread(HFILE hFile, LPVOID lpBuffer, UINT uBytes); 
#line 2911
__declspec(dllimport) UINT __stdcall 
#line 2914
_lwrite(HFILE hFile, LPCCH lpBuffer, UINT uBytes); 
#line 2920
__declspec(dllimport) long __stdcall 
#line 2923
_hread(HFILE hFile, LPVOID lpBuffer, long lBytes); 
#line 2929
__declspec(dllimport) long __stdcall 
#line 2932
_hwrite(HFILE hFile, LPCCH lpBuffer, long lBytes); 
#line 2938
__declspec(dllimport) HFILE __stdcall 
#line 2941
_lclose(HFILE hFile); 
#line 2945
__declspec(dllimport) LONG __stdcall 
#line 2948
_llseek(HFILE hFile, LONG lOffset, int iOrigin); 
#line 2954
__declspec(dllimport) BOOL __stdcall 
#line 2957
IsTextUnicode(const void * lpv, int iSize, LPINT lpiResult); 
#line 2964 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
#pragma endregion
#line 2966
#pragma region Application Family or OneCore Family or Games Family
#line 2970
__declspec(dllimport) DWORD __stdcall 
#line 2973
SignalObjectAndWait(HANDLE hObjectToSignal, HANDLE hObjectToWaitOn, DWORD dwMilliseconds, BOOL bAlertable); 
#line 2982 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
#pragma endregion
#line 2984
#pragma region Desktop Family
#line 2987
__declspec(dllimport) BOOL __stdcall 
#line 2990
BackupRead(HANDLE hFile, LPBYTE lpBuffer, DWORD nNumberOfBytesToRead, LPDWORD lpNumberOfBytesRead, BOOL bAbort, BOOL bProcessSecurity, LPVOID * lpContext); 
#line 3000
__declspec(dllimport) BOOL __stdcall 
#line 3003
BackupSeek(HANDLE hFile, DWORD dwLowBytesToSeek, DWORD dwHighBytesToSeek, LPDWORD lpdwLowByteSeeked, LPDWORD lpdwHighByteSeeked, LPVOID * lpContext); 
#line 3012
__declspec(dllimport) BOOL __stdcall 
#line 3015
BackupWrite(HANDLE hFile, LPBYTE lpBuffer, DWORD nNumberOfBytesToWrite, LPDWORD lpNumberOfBytesWritten, BOOL bAbort, BOOL bProcessSecurity, LPVOID * lpContext); 
#line 3034
typedef 
#line 3028
struct _WIN32_STREAM_ID { 
#line 3029
DWORD dwStreamId; 
#line 3030
DWORD dwStreamAttributes; 
#line 3031
LARGE_INTEGER Size; 
#line 3032
DWORD dwStreamNameSize; 
#line 3033
WCHAR cStreamName[1]; 
#line 3034
} WIN32_STREAM_ID, *LPWIN32_STREAM_ID; 
#line 3065 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
#pragma endregion
#line 3067
#pragma region Desktop Family or Games Family
#line 3102 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
#pragma endregion
#line 3104
#pragma region Desktop Family or OneCore Family or Games Family
#line 3112
typedef 
#line 3109
struct _STARTUPINFOEXA { 
#line 3110
STARTUPINFOA StartupInfo; 
#line 3111
LPPROC_THREAD_ATTRIBUTE_LIST lpAttributeList; 
#line 3112
} STARTUPINFOEXA, *LPSTARTUPINFOEXA; 
#line 3116
typedef 
#line 3113
struct _STARTUPINFOEXW { 
#line 3114
STARTUPINFOW StartupInfo; 
#line 3115
LPPROC_THREAD_ATTRIBUTE_LIST lpAttributeList; 
#line 3116
} STARTUPINFOEXW, *LPSTARTUPINFOEXW; 
#line 3121
typedef STARTUPINFOEXA STARTUPINFOEX; 
#line 3122
typedef LPSTARTUPINFOEXA LPSTARTUPINFOEX; 
#line 3128 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
#pragma endregion
#line 3130
#pragma region Desktop Family
#line 3136 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
#pragma endregion
#line 3138
#pragma region Application Family or OneCore Family or Games Family
#line 3141
__declspec(dllimport) HANDLE __stdcall 
#line 3145
OpenMutexA(DWORD dwDesiredAccess, BOOL bInheritHandle, LPCSTR lpName); 
#line 3154 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
__declspec(dllimport) HANDLE __stdcall 
#line 3158
CreateSemaphoreA(LPSECURITY_ATTRIBUTES lpSemaphoreAttributes, LONG lInitialCount, LONG lMaximumCount, LPCSTR lpName); 
#line 3169 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
#pragma endregion
#line 3171
#pragma region Desktop Family or OneCore Family or Games Family
#line 3174
__declspec(dllimport) HANDLE __stdcall 
#line 3178
OpenSemaphoreA(DWORD dwDesiredAccess, BOOL bInheritHandle, LPCSTR lpName); 
#line 3188 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
#pragma endregion
#line 3192
#pragma region Desktop Family or OneCore Family or Games Family
#line 3195
__declspec(dllimport) HANDLE __stdcall 
#line 3199
CreateWaitableTimerA(LPSECURITY_ATTRIBUTES lpTimerAttributes, BOOL bManualReset, LPCSTR lpTimerName); 
#line 3208 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
__declspec(dllimport) HANDLE __stdcall 
#line 3212
OpenWaitableTimerA(DWORD dwDesiredAccess, BOOL bInheritHandle, LPCSTR lpTimerName); 
#line 3223 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
__declspec(dllimport) HANDLE __stdcall 
#line 3227
CreateSemaphoreExA(LPSECURITY_ATTRIBUTES lpSemaphoreAttributes, LONG lInitialCount, LONG lMaximumCount, LPCSTR lpName, DWORD dwFlags, DWORD dwDesiredAccess); 
#line 3239 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
__declspec(dllimport) HANDLE __stdcall 
#line 3243
CreateWaitableTimerExA(LPSECURITY_ATTRIBUTES lpTimerAttributes, LPCSTR lpTimerName, DWORD dwFlags, DWORD dwDesiredAccess); 
#line 3259 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
#pragma endregion
#line 3261
#pragma region Desktop Family or Games Family
#line 3264
__declspec(dllimport) HANDLE __stdcall 
#line 3268
CreateFileMappingA(HANDLE hFile, LPSECURITY_ATTRIBUTES lpFileMappingAttributes, DWORD flProtect, DWORD dwMaximumSizeHigh, DWORD dwMaximumSizeLow, LPCSTR lpName); 
#line 3281 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
#pragma endregion
#line 3283
#pragma region Desktop Family
#line 3288
__declspec(dllimport) HANDLE __stdcall 
#line 3292
CreateFileMappingNumaA(HANDLE hFile, LPSECURITY_ATTRIBUTES lpFileMappingAttributes, DWORD flProtect, DWORD dwMaximumSizeHigh, DWORD dwMaximumSizeLow, LPCSTR lpName, DWORD nndPreferred); 
#line 3307 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
#pragma endregion
#line 3311 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
#pragma region Desktop Family or Games Family
#line 3314
__declspec(dllimport) HANDLE __stdcall 
#line 3317
OpenFileMappingA(DWORD dwDesiredAccess, BOOL bInheritHandle, LPCSTR lpName); 
#line 3327 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
#pragma endregion
#line 3329
#pragma region Desktop Family or OneCore Family
#line 3332
__declspec(dllimport) DWORD __stdcall 
#line 3336
GetLogicalDriveStringsA(DWORD nBufferLength, LPSTR lpBuffer); 
#line 3345 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
#pragma endregion
#line 3347
#pragma region Desktop Family
#line 3352 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
#pragma endregion
#line 3354
#pragma region Application Family or OneCore Family or Games Family
#line 3359
__declspec(dllimport) HMODULE __stdcall 
#line 3363
LoadPackagedLibrary(LPCWSTR lpwLibFileName, DWORD Reserved); 
#line 3371 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
#pragma endregion
#line 3405 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
#pragma region Desktop Family or OneCore Family or Games Family
#line 3412
__declspec(dllimport) BOOL __stdcall 
#line 3415
QueryFullProcessImageNameA(HANDLE hProcess, DWORD dwFlags, LPSTR lpExeName, PDWORD lpdwSize); 
#line 3421
__declspec(dllimport) BOOL __stdcall 
#line 3424
QueryFullProcessImageNameW(HANDLE hProcess, DWORD dwFlags, LPWSTR lpExeName, PDWORD lpdwSize); 
#line 3439 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
#pragma endregion
#line 3441
#pragma region Desktop Family or OneCore Family or Games Family
#line 3498 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
typedef 
#line 3457 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
enum _PROC_THREAD_ATTRIBUTE_NUM { 
#line 3458
ProcThreadAttributeParentProcess, 
#line 3459
ProcThreadAttributeHandleList = 2, 
#line 3461
ProcThreadAttributeGroupAffinity, 
#line 3462
ProcThreadAttributePreferredNode, 
#line 3463
ProcThreadAttributeIdealProcessor, 
#line 3464
ProcThreadAttributeUmsThread, 
#line 3465
ProcThreadAttributeMitigationPolicy, 
#line 3468 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
ProcThreadAttributeSecurityCapabilities = 9, 
#line 3470 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
ProcThreadAttributeProtectionLevel = 11, 
#line 3474 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
ProcThreadAttributeJobList = 13, 
#line 3475
ProcThreadAttributeChildProcessPolicy, 
#line 3476
ProcThreadAttributeAllApplicationPackagesPolicy, 
#line 3477
ProcThreadAttributeWin32kFilter, 
#line 3480 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
ProcThreadAttributeSafeOpenPromptOriginClaim, 
#line 3483 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
ProcThreadAttributeDesktopAppPolicy, 
#line 3486 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
ProcThreadAttributePseudoConsole = 22, 
#line 3491 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
ProcThreadAttributeMitigationAuditPolicy = 24, 
#line 3492
ProcThreadAttributeMachineType, 
#line 3493
ProcThreadAttributeComponentFilter, 
#line 3496 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
ProcThreadAttributeEnableOptionalXStateFeatures
#line 3498 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
} PROC_THREAD_ATTRIBUTE_NUM; 
#line 3963 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
#pragma endregion
#line 3965
#pragma region Desktop Family
#line 3970 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
#pragma endregion
#line 3972
#pragma region Desktop Family or Games Family
#line 3975
__declspec(dllimport) void __stdcall 
#line 3978
GetStartupInfoA(LPSTARTUPINFOA lpStartupInfo); 
#line 3986 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
#pragma endregion
#line 3988
#pragma region Desktop Family
#line 4046 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
#pragma endregion
#line 4048
#pragma region OneCore Family or App Family
#line 4051
__declspec(dllimport) DWORD __stdcall 
#line 4054
GetFirmwareEnvironmentVariableA(LPCSTR lpName, LPCSTR lpGuid, PVOID pBuffer, DWORD nSize); 
#line 4060
__declspec(dllimport) DWORD __stdcall 
#line 4063
GetFirmwareEnvironmentVariableW(LPCWSTR lpName, LPCWSTR lpGuid, PVOID pBuffer, DWORD nSize); 
#line 4077 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
__declspec(dllimport) DWORD __stdcall 
#line 4080
GetFirmwareEnvironmentVariableExA(LPCSTR lpName, LPCSTR lpGuid, PVOID pBuffer, DWORD nSize, PDWORD pdwAttribubutes); 
#line 4087
__declspec(dllimport) DWORD __stdcall 
#line 4090
GetFirmwareEnvironmentVariableExW(LPCWSTR lpName, LPCWSTR lpGuid, PVOID pBuffer, DWORD nSize, PDWORD pdwAttribubutes); 
#line 4105 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
__declspec(dllimport) BOOL __stdcall 
#line 4108
SetFirmwareEnvironmentVariableA(LPCSTR lpName, LPCSTR lpGuid, PVOID pValue, DWORD nSize); 
#line 4114
__declspec(dllimport) BOOL __stdcall 
#line 4117
SetFirmwareEnvironmentVariableW(LPCWSTR lpName, LPCWSTR lpGuid, PVOID pValue, DWORD nSize); 
#line 4131 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
__declspec(dllimport) BOOL __stdcall 
#line 4134
SetFirmwareEnvironmentVariableExA(LPCSTR lpName, LPCSTR lpGuid, PVOID pValue, DWORD nSize, DWORD dwAttributes); 
#line 4141
__declspec(dllimport) BOOL __stdcall 
#line 4144
SetFirmwareEnvironmentVariableExW(LPCWSTR lpName, LPCWSTR lpGuid, PVOID pValue, DWORD nSize, DWORD dwAttributes); 
#line 4160 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
#pragma endregion
#line 4162
#pragma region Desktop Family
#line 4167
__declspec(dllimport) BOOL __stdcall 
#line 4170
GetFirmwareType(PFIRMWARE_TYPE FirmwareType); 
#line 4175
__declspec(dllimport) BOOL __stdcall 
#line 4178
IsNativeVhdBoot(PBOOL NativeVhdBoot); 
#line 4184 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
__declspec(dllimport) HRSRC __stdcall 
#line 4188
FindResourceA(HMODULE hModule, LPCSTR lpName, LPCSTR lpType); 
#line 4197 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
__declspec(dllimport) HRSRC __stdcall 
#line 4201
FindResourceExA(HMODULE hModule, LPCSTR lpType, LPCSTR lpName, WORD wLanguage); 
#line 4211 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
__declspec(dllimport) BOOL __stdcall 
#line 4214
EnumResourceTypesA(HMODULE hModule, ENUMRESTYPEPROCA lpEnumFunc, LONG_PTR lParam); 
#line 4219
__declspec(dllimport) BOOL __stdcall 
#line 4222
EnumResourceTypesW(HMODULE hModule, ENUMRESTYPEPROCW lpEnumFunc, LONG_PTR lParam); 
#line 4233 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
__declspec(dllimport) BOOL __stdcall 
#line 4236
EnumResourceLanguagesA(HMODULE hModule, LPCSTR lpType, LPCSTR lpName, ENUMRESLANGPROCA lpEnumFunc, LONG_PTR lParam); 
#line 4243
__declspec(dllimport) BOOL __stdcall 
#line 4246
EnumResourceLanguagesW(HMODULE hModule, LPCWSTR lpType, LPCWSTR lpName, ENUMRESLANGPROCW lpEnumFunc, LONG_PTR lParam); 
#line 4259 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
__declspec(dllimport) HANDLE __stdcall 
#line 4262
BeginUpdateResourceA(LPCSTR pFileName, BOOL bDeleteExistingResources); 
#line 4266
__declspec(dllimport) HANDLE __stdcall 
#line 4269
BeginUpdateResourceW(LPCWSTR pFileName, BOOL bDeleteExistingResources); 
#line 4279 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
__declspec(dllimport) BOOL __stdcall 
#line 4282
UpdateResourceA(HANDLE hUpdate, LPCSTR lpType, LPCSTR lpName, WORD wLanguage, LPVOID lpData, DWORD cb); 
#line 4290
__declspec(dllimport) BOOL __stdcall 
#line 4293
UpdateResourceW(HANDLE hUpdate, LPCWSTR lpType, LPCWSTR lpName, WORD wLanguage, LPVOID lpData, DWORD cb); 
#line 4307 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
__declspec(dllimport) BOOL __stdcall 
#line 4310
EndUpdateResourceA(HANDLE hUpdate, BOOL fDiscard); 
#line 4314
__declspec(dllimport) BOOL __stdcall 
#line 4317
EndUpdateResourceW(HANDLE hUpdate, BOOL fDiscard); 
#line 4329 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
__declspec(dllimport) ATOM __stdcall 
#line 4332
GlobalAddAtomA(LPCSTR lpString); 
#line 4335
__declspec(dllimport) ATOM __stdcall 
#line 4338
GlobalAddAtomW(LPCWSTR lpString); 
#line 4347 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
__declspec(dllimport) ATOM __stdcall 
#line 4350
GlobalAddAtomExA(LPCSTR lpString, DWORD Flags); 
#line 4354
__declspec(dllimport) ATOM __stdcall 
#line 4357
GlobalAddAtomExW(LPCWSTR lpString, DWORD Flags); 
#line 4367 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
__declspec(dllimport) ATOM __stdcall 
#line 4370
GlobalFindAtomA(LPCSTR lpString); 
#line 4373
__declspec(dllimport) ATOM __stdcall 
#line 4376
GlobalFindAtomW(LPCWSTR lpString); 
#line 4385 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
__declspec(dllimport) UINT __stdcall 
#line 4388
GlobalGetAtomNameA(ATOM nAtom, LPSTR lpBuffer, int nSize); 
#line 4393
__declspec(dllimport) UINT __stdcall 
#line 4396
GlobalGetAtomNameW(ATOM nAtom, LPWSTR lpBuffer, int nSize); 
#line 4407 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
__declspec(dllimport) ATOM __stdcall 
#line 4410
AddAtomA(LPCSTR lpString); 
#line 4413
__declspec(dllimport) ATOM __stdcall 
#line 4416
AddAtomW(LPCWSTR lpString); 
#line 4425 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
__declspec(dllimport) ATOM __stdcall 
#line 4428
FindAtomA(LPCSTR lpString); 
#line 4431
__declspec(dllimport) ATOM __stdcall 
#line 4434
FindAtomW(LPCWSTR lpString); 
#line 4443 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
__declspec(dllimport) UINT __stdcall 
#line 4446
GetAtomNameA(ATOM nAtom, LPSTR lpBuffer, int nSize); 
#line 4451
__declspec(dllimport) UINT __stdcall 
#line 4454
GetAtomNameW(ATOM nAtom, LPWSTR lpBuffer, int nSize); 
#line 4466 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
#pragma endregion
#line 4468
#pragma region Desktop Family or OneCore Family
#line 4471
__declspec(dllimport) UINT __stdcall 
#line 4474
GetProfileIntA(LPCSTR lpAppName, LPCSTR lpKeyName, INT nDefault); 
#line 4479
__declspec(dllimport) UINT __stdcall 
#line 4482
GetProfileIntW(LPCWSTR lpAppName, LPCWSTR lpKeyName, INT nDefault); 
#line 4493 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
__declspec(dllimport) DWORD __stdcall 
#line 4496
GetProfileStringA(LPCSTR lpAppName, LPCSTR lpKeyName, LPCSTR lpDefault, LPSTR lpReturnedString, DWORD nSize); 
#line 4503
__declspec(dllimport) DWORD __stdcall 
#line 4506
GetProfileStringW(LPCWSTR lpAppName, LPCWSTR lpKeyName, LPCWSTR lpDefault, LPWSTR lpReturnedString, DWORD nSize); 
#line 4520 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
#pragma endregion
#line 4522
#pragma region Desktop Family
#line 4525
__declspec(dllimport) BOOL __stdcall 
#line 4528
WriteProfileStringA(LPCSTR lpAppName, LPCSTR lpKeyName, LPCSTR lpString); 
#line 4533
__declspec(dllimport) BOOL __stdcall 
#line 4536
WriteProfileStringW(LPCWSTR lpAppName, LPCWSTR lpKeyName, LPCWSTR lpString); 
#line 4548 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
#pragma endregion
#line 4550
#pragma region Desktop Family or OneCore Family
#line 4553
__declspec(dllimport) DWORD __stdcall 
#line 4556
GetProfileSectionA(LPCSTR lpAppName, LPSTR lpReturnedString, DWORD nSize); 
#line 4561
__declspec(dllimport) DWORD __stdcall 
#line 4564
GetProfileSectionW(LPCWSTR lpAppName, LPWSTR lpReturnedString, DWORD nSize); 
#line 4576 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
#pragma endregion
#line 4578
#pragma region Desktop Family
#line 4581
__declspec(dllimport) BOOL __stdcall 
#line 4584
WriteProfileSectionA(LPCSTR lpAppName, LPCSTR lpString); 
#line 4588
__declspec(dllimport) BOOL __stdcall 
#line 4591
WriteProfileSectionW(LPCWSTR lpAppName, LPCWSTR lpString); 
#line 4602 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
#pragma endregion
#line 4604
#pragma region Desktop Family or OneCore Family
#line 4607
__declspec(dllimport) UINT __stdcall 
#line 4610
GetPrivateProfileIntA(LPCSTR lpAppName, LPCSTR lpKeyName, INT nDefault, LPCSTR lpFileName); 
#line 4616
__declspec(dllimport) UINT __stdcall 
#line 4619
GetPrivateProfileIntW(LPCWSTR lpAppName, LPCWSTR lpKeyName, INT nDefault, LPCWSTR lpFileName); 
#line 4655 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
__declspec(dllimport) DWORD __stdcall 
#line 4658
GetPrivateProfileStringA(LPCSTR lpAppName, LPCSTR lpKeyName, LPCSTR lpDefault, LPSTR lpReturnedString, DWORD nSize, LPCSTR lpFileName); 
#line 4666
__declspec(dllimport) DWORD __stdcall 
#line 4669
GetPrivateProfileStringW(LPCWSTR lpAppName, LPCWSTR lpKeyName, LPCWSTR lpDefault, LPWSTR lpReturnedString, DWORD nSize, LPCWSTR lpFileName); 
#line 4711 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
__declspec(dllimport) BOOL __stdcall 
#line 4714
WritePrivateProfileStringA(LPCSTR lpAppName, LPCSTR lpKeyName, LPCSTR lpString, LPCSTR lpFileName); 
#line 4720
__declspec(dllimport) BOOL __stdcall 
#line 4723
WritePrivateProfileStringW(LPCWSTR lpAppName, LPCWSTR lpKeyName, LPCWSTR lpString, LPCWSTR lpFileName); 
#line 4735 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
__declspec(dllimport) DWORD __stdcall 
#line 4738
GetPrivateProfileSectionA(LPCSTR lpAppName, LPSTR lpReturnedString, DWORD nSize, LPCSTR lpFileName); 
#line 4744
__declspec(dllimport) DWORD __stdcall 
#line 4747
GetPrivateProfileSectionW(LPCWSTR lpAppName, LPWSTR lpReturnedString, DWORD nSize, LPCWSTR lpFileName); 
#line 4783 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
__declspec(dllimport) BOOL __stdcall 
#line 4786
WritePrivateProfileSectionA(LPCSTR lpAppName, LPCSTR lpString, LPCSTR lpFileName); 
#line 4791
__declspec(dllimport) BOOL __stdcall 
#line 4794
WritePrivateProfileSectionW(LPCWSTR lpAppName, LPCWSTR lpString, LPCWSTR lpFileName); 
#line 4806 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
#pragma endregion
#line 4808
#pragma region Desktop Family
#line 4811
__declspec(dllimport) DWORD __stdcall 
#line 4814
GetPrivateProfileSectionNamesA(LPSTR lpszReturnBuffer, DWORD nSize, LPCSTR lpFileName); 
#line 4819
__declspec(dllimport) DWORD __stdcall 
#line 4822
GetPrivateProfileSectionNamesW(LPWSTR lpszReturnBuffer, DWORD nSize, LPCWSTR lpFileName); 
#line 4855 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
__declspec(dllimport) BOOL __stdcall 
#line 4858
GetPrivateProfileStructA(LPCSTR lpszSection, LPCSTR lpszKey, LPVOID lpStruct, UINT uSizeStruct, LPCSTR szFile); 
#line 4865
__declspec(dllimport) BOOL __stdcall 
#line 4868
GetPrivateProfileStructW(LPCWSTR lpszSection, LPCWSTR lpszKey, LPVOID lpStruct, UINT uSizeStruct, LPCWSTR szFile); 
#line 4907 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
__declspec(dllimport) BOOL __stdcall 
#line 4910
WritePrivateProfileStructA(LPCSTR lpszSection, LPCSTR lpszKey, LPVOID lpStruct, UINT uSizeStruct, LPCSTR szFile); 
#line 4917
__declspec(dllimport) BOOL __stdcall 
#line 4920
WritePrivateProfileStructW(LPCWSTR lpszSection, LPCWSTR lpszKey, LPVOID lpStruct, UINT uSizeStruct, LPCWSTR szFile); 
#line 4963 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
typedef UINT (__stdcall *PGET_SYSTEM_WOW64_DIRECTORY_A)(LPSTR lpBuffer, UINT uSize); 
#line 4964
typedef UINT (__stdcall *PGET_SYSTEM_WOW64_DIRECTORY_W)(LPWSTR lpBuffer, UINT uSize); 
#line 5030 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
#pragma endregion
#line 5032
#pragma region Desktop Family or Games Family
#line 5037
__declspec(dllimport) BOOL __stdcall 
#line 5040
SetDllDirectoryA(LPCSTR lpPathName); 
#line 5043
__declspec(dllimport) BOOL __stdcall 
#line 5046
SetDllDirectoryW(LPCWSTR lpPathName); 
#line 5057 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
__declspec(dllimport) DWORD __stdcall 
#line 5061
GetDllDirectoryA(DWORD nBufferLength, LPSTR lpBuffer); 
#line 5065
__declspec(dllimport) DWORD __stdcall 
#line 5069
GetDllDirectoryW(DWORD nBufferLength, LPWSTR lpBuffer); 
#line 5082 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
#pragma endregion
#line 5084
#pragma region Desktop Family
#line 5092
__declspec(dllimport) BOOL __stdcall 
#line 5095
SetSearchPathMode(DWORD Flags); 
#line 5100 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
#pragma endregion
#line 5102
#pragma region Application Family or Games Family
#line 5126 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
#pragma endregion
#line 5128
#pragma region Application Family or OneCore Family or Games Family
#line 5131
__declspec(dllimport) BOOL __stdcall 
#line 5134
CreateDirectoryExA(LPCSTR lpTemplateDirectory, LPCSTR lpNewDirectory, LPSECURITY_ATTRIBUTES lpSecurityAttributes); 
#line 5139
__declspec(dllimport) BOOL __stdcall 
#line 5142
CreateDirectoryExW(LPCWSTR lpTemplateDirectory, LPCWSTR lpNewDirectory, LPSECURITY_ATTRIBUTES lpSecurityAttributes); 
#line 5154 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
#pragma endregion
#line 5156
#pragma region Desktop Family
#line 5161
__declspec(dllimport) BOOL __stdcall 
#line 5164
CreateDirectoryTransactedA(LPCSTR lpTemplateDirectory, LPCSTR lpNewDirectory, LPSECURITY_ATTRIBUTES lpSecurityAttributes, HANDLE hTransaction); 
#line 5170
__declspec(dllimport) BOOL __stdcall 
#line 5173
CreateDirectoryTransactedW(LPCWSTR lpTemplateDirectory, LPCWSTR lpNewDirectory, LPSECURITY_ATTRIBUTES lpSecurityAttributes, HANDLE hTransaction); 
#line 5185 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
__declspec(dllimport) BOOL __stdcall 
#line 5188
RemoveDirectoryTransactedA(LPCSTR lpPathName, HANDLE hTransaction); 
#line 5192
__declspec(dllimport) BOOL __stdcall 
#line 5195
RemoveDirectoryTransactedW(LPCWSTR lpPathName, HANDLE hTransaction); 
#line 5205 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
__declspec(dllimport) DWORD __stdcall 
#line 5209
GetFullPathNameTransactedA(LPCSTR lpFileName, DWORD nBufferLength, LPSTR lpBuffer, LPSTR * lpFilePart, HANDLE hTransaction); 
#line 5216
__declspec(dllimport) DWORD __stdcall 
#line 5220
GetFullPathNameTransactedW(LPCWSTR lpFileName, DWORD nBufferLength, LPWSTR lpBuffer, LPWSTR * lpFilePart, HANDLE hTransaction); 
#line 5236 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
#pragma endregion
#line 5238
#pragma region Desktop Family or OneCore Family
#line 5247
__declspec(dllimport) BOOL __stdcall 
#line 5250
DefineDosDeviceA(DWORD dwFlags, LPCSTR lpDeviceName, LPCSTR lpTargetPath); 
#line 5259 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
__declspec(dllimport) DWORD __stdcall 
#line 5262
QueryDosDeviceA(LPCSTR lpDeviceName, LPSTR lpTargetPath, DWORD ucchMax); 
#line 5272 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
#pragma endregion
#line 5274
#pragma region Desktop Family
#line 5281
__declspec(dllimport) HANDLE __stdcall 
#line 5284
CreateFileTransactedA(LPCSTR lpFileName, DWORD dwDesiredAccess, DWORD dwShareMode, LPSECURITY_ATTRIBUTES lpSecurityAttributes, DWORD dwCreationDisposition, DWORD dwFlagsAndAttributes, HANDLE hTemplateFile, HANDLE hTransaction, PUSHORT pusMiniVersion, PVOID lpExtendedParameter); 
#line 5296
__declspec(dllimport) HANDLE __stdcall 
#line 5299
CreateFileTransactedW(LPCWSTR lpFileName, DWORD dwDesiredAccess, DWORD dwShareMode, LPSECURITY_ATTRIBUTES lpSecurityAttributes, DWORD dwCreationDisposition, DWORD dwFlagsAndAttributes, HANDLE hTemplateFile, HANDLE hTransaction, PUSHORT pusMiniVersion, PVOID lpExtendedParameter); 
#line 5320 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
#pragma endregion
#line 5322
#pragma region Application Family or OneCore Family
#line 5327
__declspec(dllimport) HANDLE __stdcall 
#line 5330
ReOpenFile(HANDLE hOriginalFile, DWORD dwDesiredAccess, DWORD dwShareMode, DWORD dwFlagsAndAttributes); 
#line 5340 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
#pragma endregion
#line 5343
#pragma region Desktop Family
#line 5348
__declspec(dllimport) BOOL __stdcall 
#line 5351
SetFileAttributesTransactedA(LPCSTR lpFileName, DWORD dwFileAttributes, HANDLE hTransaction); 
#line 5356
__declspec(dllimport) BOOL __stdcall 
#line 5359
SetFileAttributesTransactedW(LPCWSTR lpFileName, DWORD dwFileAttributes, HANDLE hTransaction); 
#line 5370 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
__declspec(dllimport) BOOL __stdcall 
#line 5373
GetFileAttributesTransactedA(LPCSTR lpFileName, GET_FILEEX_INFO_LEVELS fInfoLevelId, LPVOID lpFileInformation, HANDLE hTransaction); 
#line 5379
__declspec(dllimport) BOOL __stdcall 
#line 5382
GetFileAttributesTransactedW(LPCWSTR lpFileName, GET_FILEEX_INFO_LEVELS fInfoLevelId, LPVOID lpFileInformation, HANDLE hTransaction); 
#line 5394 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
__declspec(dllimport) DWORD __stdcall 
#line 5397
GetCompressedFileSizeTransactedA(LPCSTR lpFileName, LPDWORD lpFileSizeHigh, HANDLE hTransaction); 
#line 5402
__declspec(dllimport) DWORD __stdcall 
#line 5405
GetCompressedFileSizeTransactedW(LPCWSTR lpFileName, LPDWORD lpFileSizeHigh, HANDLE hTransaction); 
#line 5416 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
__declspec(dllimport) BOOL __stdcall 
#line 5419
DeleteFileTransactedA(LPCSTR lpFileName, HANDLE hTransaction); 
#line 5423
__declspec(dllimport) BOOL __stdcall 
#line 5426
DeleteFileTransactedW(LPCWSTR lpFileName, HANDLE hTransaction); 
#line 5439 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
#pragma endregion
#line 5441
#pragma region Application Family
#line 5463 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
#pragma endregion
#line 5465
#pragma region Desktop Family
#line 5470
__declspec(dllimport) BOOL __stdcall 
#line 5473
CheckNameLegalDOS8Dot3A(LPCSTR lpName, LPSTR lpOemName, DWORD OemNameSize, PBOOL pbNameContainsSpaces, PBOOL pbNameLegal); 
#line 5480
__declspec(dllimport) BOOL __stdcall 
#line 5483
CheckNameLegalDOS8Dot3W(LPCWSTR lpName, LPSTR lpOemName, DWORD OemNameSize, PBOOL pbNameContainsSpaces, PBOOL pbNameLegal); 
#line 5499 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
#pragma endregion
#line 5503
#pragma region Desktop Family
#line 5508
__declspec(dllimport) HANDLE __stdcall 
#line 5511
FindFirstFileTransactedA(LPCSTR lpFileName, FINDEX_INFO_LEVELS fInfoLevelId, LPVOID lpFindFileData, FINDEX_SEARCH_OPS fSearchOp, LPVOID lpSearchFilter, DWORD dwAdditionalFlags, HANDLE hTransaction); 
#line 5520
__declspec(dllimport) HANDLE __stdcall 
#line 5523
FindFirstFileTransactedW(LPCWSTR lpFileName, FINDEX_INFO_LEVELS fInfoLevelId, LPVOID lpFindFileData, FINDEX_SEARCH_OPS fSearchOp, LPVOID lpSearchFilter, DWORD dwAdditionalFlags, HANDLE hTransaction); 
#line 5541 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
#pragma endregion
#line 5545 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
#pragma region Application Family or OneCore Family or Games Family
#line 5549
__declspec(dllimport) BOOL __stdcall 
#line 5552
CopyFileA(LPCSTR lpExistingFileName, LPCSTR lpNewFileName, BOOL bFailIfExists); 
#line 5557
__declspec(dllimport) BOOL __stdcall 
#line 5560
CopyFileW(LPCWSTR lpExistingFileName, LPCWSTR lpNewFileName, BOOL bFailIfExists); 
#line 5594 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
#pragma endregion
#line 5598
#pragma region Application Family or OneCore or Games Family
#line 5603
typedef DWORD (__stdcall *LPPROGRESS_ROUTINE)(LARGE_INTEGER TotalFileSize, LARGE_INTEGER TotalBytesTransferred, LARGE_INTEGER StreamSize, LARGE_INTEGER StreamBytesTransferred, DWORD dwStreamNumber, DWORD dwCallbackReason, HANDLE hSourceFile, HANDLE hDestinationFile, LPVOID lpData); 
#line 5615
__declspec(dllimport) BOOL __stdcall 
#line 5618
CopyFileExA(LPCSTR lpExistingFileName, LPCSTR lpNewFileName, LPPROGRESS_ROUTINE lpProgressRoutine, LPVOID lpData, LPBOOL pbCancel, DWORD dwCopyFlags); 
#line 5627
__declspec(dllimport) BOOL __stdcall 
#line 5630
CopyFileExW(LPCWSTR lpExistingFileName, LPCWSTR lpNewFileName, LPPROGRESS_ROUTINE lpProgressRoutine, LPVOID lpData, LPBOOL pbCancel, DWORD dwCopyFlags); 
#line 5646 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
#pragma endregion
#line 5648
#pragma region Desktop Family
#line 5653
__declspec(dllimport) BOOL __stdcall 
#line 5656
CopyFileTransactedA(LPCSTR lpExistingFileName, LPCSTR lpNewFileName, LPPROGRESS_ROUTINE lpProgressRoutine, LPVOID lpData, LPBOOL pbCancel, DWORD dwCopyFlags, HANDLE hTransaction); 
#line 5665
__declspec(dllimport) BOOL __stdcall 
#line 5668
CopyFileTransactedW(LPCWSTR lpExistingFileName, LPCWSTR lpNewFileName, LPPROGRESS_ROUTINE lpProgressRoutine, LPVOID lpData, LPBOOL pbCancel, DWORD dwCopyFlags, HANDLE hTransaction); 
#line 5686 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
#pragma endregion
#line 5688
#pragma region Application Family or OneCore Family or Games Family
#line 5706
typedef 
#line 5697
enum _COPYFILE2_MESSAGE_TYPE { 
#line 5698
COPYFILE2_CALLBACK_NONE, 
#line 5699
COPYFILE2_CALLBACK_CHUNK_STARTED, 
#line 5700
COPYFILE2_CALLBACK_CHUNK_FINISHED, 
#line 5701
COPYFILE2_CALLBACK_STREAM_STARTED, 
#line 5702
COPYFILE2_CALLBACK_STREAM_FINISHED, 
#line 5703
COPYFILE2_CALLBACK_POLL_CONTINUE, 
#line 5704
COPYFILE2_CALLBACK_ERROR, 
#line 5705
COPYFILE2_CALLBACK_MAX
#line 5706
} COPYFILE2_MESSAGE_TYPE; 
#line 5714
typedef 
#line 5708
enum _COPYFILE2_MESSAGE_ACTION { 
#line 5709
COPYFILE2_PROGRESS_CONTINUE, 
#line 5710
COPYFILE2_PROGRESS_CANCEL, 
#line 5711
COPYFILE2_PROGRESS_STOP, 
#line 5712
COPYFILE2_PROGRESS_QUIET, 
#line 5713
COPYFILE2_PROGRESS_PAUSE
#line 5714
} COPYFILE2_MESSAGE_ACTION; 
#line 5726
typedef 
#line 5716
enum _COPYFILE2_COPY_PHASE { 
#line 5717
COPYFILE2_PHASE_NONE, 
#line 5718
COPYFILE2_PHASE_PREPARE_SOURCE, 
#line 5719
COPYFILE2_PHASE_PREPARE_DEST, 
#line 5720
COPYFILE2_PHASE_READ_SOURCE, 
#line 5721
COPYFILE2_PHASE_WRITE_DESTINATION, 
#line 5722
COPYFILE2_PHASE_SERVER_COPY, 
#line 5723
COPYFILE2_PHASE_NAMEGRAFT_COPY, 
#line 5725
COPYFILE2_PHASE_MAX
#line 5726
} COPYFILE2_COPY_PHASE; 
#line 5799
typedef 
#line 5730
struct COPYFILE2_MESSAGE { 
#line 5732
COPYFILE2_MESSAGE_TYPE Type; 
#line 5733
DWORD dwPadding; 
#line 5735
union { 
#line 5737
struct { 
#line 5738
DWORD dwStreamNumber; 
#line 5739
DWORD dwReserved; 
#line 5740
HANDLE hSourceFile; 
#line 5741
HANDLE hDestinationFile; 
#line 5742
ULARGE_INTEGER uliChunkNumber; 
#line 5743
ULARGE_INTEGER uliChunkSize; 
#line 5744
ULARGE_INTEGER uliStreamSize; 
#line 5745
ULARGE_INTEGER uliTotalFileSize; 
#line 5746
} ChunkStarted; 
#line 5748
struct { 
#line 5749
DWORD dwStreamNumber; 
#line 5750
DWORD dwFlags; 
#line 5751
HANDLE hSourceFile; 
#line 5752
HANDLE hDestinationFile; 
#line 5753
ULARGE_INTEGER uliChunkNumber; 
#line 5754
ULARGE_INTEGER uliChunkSize; 
#line 5755
ULARGE_INTEGER uliStreamSize; 
#line 5756
ULARGE_INTEGER uliStreamBytesTransferred; 
#line 5757
ULARGE_INTEGER uliTotalFileSize; 
#line 5758
ULARGE_INTEGER uliTotalBytesTransferred; 
#line 5759
} ChunkFinished; 
#line 5761
struct { 
#line 5762
DWORD dwStreamNumber; 
#line 5763
DWORD dwReserved; 
#line 5764
HANDLE hSourceFile; 
#line 5765
HANDLE hDestinationFile; 
#line 5766
ULARGE_INTEGER uliStreamSize; 
#line 5767
ULARGE_INTEGER uliTotalFileSize; 
#line 5768
} StreamStarted; 
#line 5770
struct { 
#line 5771
DWORD dwStreamNumber; 
#line 5772
DWORD dwReserved; 
#line 5773
HANDLE hSourceFile; 
#line 5774
HANDLE hDestinationFile; 
#line 5775
ULARGE_INTEGER uliStreamSize; 
#line 5776
ULARGE_INTEGER uliStreamBytesTransferred; 
#line 5777
ULARGE_INTEGER uliTotalFileSize; 
#line 5778
ULARGE_INTEGER uliTotalBytesTransferred; 
#line 5779
} StreamFinished; 
#line 5781
struct { 
#line 5782
DWORD dwReserved; 
#line 5783
} PollContinue; 
#line 5785
struct { 
#line 5786
COPYFILE2_COPY_PHASE CopyPhase; 
#line 5787
DWORD dwStreamNumber; 
#line 5788
HRESULT hrFailure; 
#line 5789
DWORD dwReserved; 
#line 5790
ULARGE_INTEGER uliChunkNumber; 
#line 5791
ULARGE_INTEGER uliStreamSize; 
#line 5792
ULARGE_INTEGER uliStreamBytesTransferred; 
#line 5793
ULARGE_INTEGER uliTotalFileSize; 
#line 5794
ULARGE_INTEGER uliTotalBytesTransferred; 
#line 5795
} Error; 
#line 5797
} Info; 
#line 5799
} COPYFILE2_MESSAGE; 
#line 5802
typedef COPYFILE2_MESSAGE_ACTION (__stdcall *PCOPYFILE2_PROGRESS_ROUTINE)(const COPYFILE2_MESSAGE * pMessage, PVOID pvCallbackContext); 
#line 5813
typedef 
#line 5807
struct COPYFILE2_EXTENDED_PARAMETERS { 
#line 5808
DWORD dwSize; 
#line 5809
DWORD dwCopyFlags; 
#line 5810
BOOL *pfCancel; 
#line 5811
PCOPYFILE2_PROGRESS_ROUTINE pProgressRoutine; 
#line 5812
PVOID pvCallbackContext; 
#line 5813
} COPYFILE2_EXTENDED_PARAMETERS; 
#line 5857
typedef 
#line 5829
struct COPYFILE2_EXTENDED_PARAMETERS_V2 { 
#line 5831
DWORD dwSize; 
#line 5832
DWORD dwCopyFlags; 
#line 5833
BOOL *pfCancel; 
#line 5834
PCOPYFILE2_PROGRESS_ROUTINE pProgressRoutine; 
#line 5835
PVOID pvCallbackContext; 
#line 5839
DWORD dwCopyFlagsV2; 
#line 5848
ULONG ioDesiredSize; 
#line 5852
ULONG ioDesiredRate; 
#line 5855
PVOID reserved[8]; 
#line 5857
} COPYFILE2_EXTENDED_PARAMETERS_V2; 
#line 5861 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
__declspec(dllimport) HRESULT __stdcall 
#line 5864
CopyFile2(PCWSTR pwszExistingFileName, PCWSTR pwszNewFileName, COPYFILE2_EXTENDED_PARAMETERS * pExtendedParameters); 
#line 5873 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
#pragma endregion
#line 5877 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
#pragma region Desktop Family or Games Family
#line 5880
__declspec(dllimport) BOOL __stdcall 
#line 5883
MoveFileA(LPCSTR lpExistingFileName, LPCSTR lpNewFileName); 
#line 5887
__declspec(dllimport) BOOL __stdcall 
#line 5890
MoveFileW(LPCWSTR lpExistingFileName, LPCWSTR lpNewFileName); 
#line 5921 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
#pragma endregion
#line 5923
#pragma region Application Family or OneCore Family or Games Family
#line 5926
__declspec(dllimport) BOOL __stdcall 
#line 5929
MoveFileExA(LPCSTR lpExistingFileName, LPCSTR lpNewFileName, DWORD dwFlags); 
#line 5934
__declspec(dllimport) BOOL __stdcall 
#line 5937
MoveFileExW(LPCWSTR lpExistingFileName, LPCWSTR lpNewFileName, DWORD dwFlags); 
#line 5949 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
#pragma endregion
#line 5951
#pragma region Application Family or OneCore Family
#line 5955
__declspec(dllimport) BOOL __stdcall 
#line 5958
MoveFileWithProgressA(LPCSTR lpExistingFileName, LPCSTR lpNewFileName, LPPROGRESS_ROUTINE lpProgressRoutine, LPVOID lpData, DWORD dwFlags); 
#line 5965
__declspec(dllimport) BOOL __stdcall 
#line 5968
MoveFileWithProgressW(LPCWSTR lpExistingFileName, LPCWSTR lpNewFileName, LPPROGRESS_ROUTINE lpProgressRoutine, LPVOID lpData, DWORD dwFlags); 
#line 5983 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
#pragma endregion
#line 5985
#pragma region Desktop Family
#line 5989
__declspec(dllimport) BOOL __stdcall 
#line 5992
MoveFileTransactedA(LPCSTR lpExistingFileName, LPCSTR lpNewFileName, LPPROGRESS_ROUTINE lpProgressRoutine, LPVOID lpData, DWORD dwFlags, HANDLE hTransaction); 
#line 6000
__declspec(dllimport) BOOL __stdcall 
#line 6003
MoveFileTransactedW(LPCWSTR lpExistingFileName, LPCWSTR lpNewFileName, LPPROGRESS_ROUTINE lpProgressRoutine, LPVOID lpData, DWORD dwFlags, HANDLE hTransaction); 
#line 6019 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
#pragma endregion
#line 6021
#pragma region Application Family or Games Family
#line 6034 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
#pragma endregion
#line 6036
#pragma region Desktop Family
#line 6041 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
#pragma endregion
#line 6043
#pragma region Application Family or OneCore Family or Games Family
#line 6048
__declspec(dllimport) BOOL __stdcall 
#line 6051
ReplaceFileA(LPCSTR lpReplacedFileName, LPCSTR lpReplacementFileName, LPCSTR lpBackupFileName, DWORD dwReplaceFlags, LPVOID lpExclude, LPVOID lpReserved); 
#line 6059
__declspec(dllimport) BOOL __stdcall 
#line 6062
ReplaceFileW(LPCWSTR lpReplacedFileName, LPCWSTR lpReplacementFileName, LPCWSTR lpBackupFileName, DWORD dwReplaceFlags, LPVOID lpExclude, LPVOID lpReserved); 
#line 6082 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
__declspec(dllimport) BOOL __stdcall 
#line 6085
CreateHardLinkA(LPCSTR lpFileName, LPCSTR lpExistingFileName, LPSECURITY_ATTRIBUTES lpSecurityAttributes); 
#line 6090
__declspec(dllimport) BOOL __stdcall 
#line 6093
CreateHardLinkW(LPCWSTR lpFileName, LPCWSTR lpExistingFileName, LPSECURITY_ATTRIBUTES lpSecurityAttributes); 
#line 6107 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
#pragma endregion
#line 6109
#pragma region Desktop Family
#line 6117
__declspec(dllimport) BOOL __stdcall 
#line 6120
CreateHardLinkTransactedA(LPCSTR lpFileName, LPCSTR lpExistingFileName, LPSECURITY_ATTRIBUTES lpSecurityAttributes, HANDLE hTransaction); 
#line 6126
__declspec(dllimport) BOOL __stdcall 
#line 6129
CreateHardLinkTransactedW(LPCWSTR lpFileName, LPCWSTR lpExistingFileName, LPSECURITY_ATTRIBUTES lpSecurityAttributes, HANDLE hTransaction); 
#line 6145 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
__declspec(dllimport) HANDLE __stdcall 
#line 6148
FindFirstStreamTransactedW(LPCWSTR lpFileName, STREAM_INFO_LEVELS InfoLevel, LPVOID lpFindStreamData, DWORD dwFlags, HANDLE hTransaction); 
#line 6156
__declspec(dllimport) HANDLE __stdcall 
#line 6159
FindFirstFileNameTransactedW(LPCWSTR lpFileName, DWORD dwFlags, LPDWORD StringLength, PWSTR LinkName, HANDLE hTransaction); 
#line 6170 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
#pragma endregion
#line 6172
#pragma region Application Family or OneCore Family or Games Family
#line 6175
__declspec(dllimport) HANDLE __stdcall 
#line 6178
CreateNamedPipeA(LPCSTR lpName, DWORD dwOpenMode, DWORD dwPipeMode, DWORD nMaxInstances, DWORD nOutBufferSize, DWORD nInBufferSize, DWORD nDefaultTimeOut, LPSECURITY_ATTRIBUTES lpSecurityAttributes); 
#line 6193 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
#pragma endregion
#line 6195
#pragma region Desktop Family or OneCore Family
#line 6198
__declspec(dllimport) BOOL __stdcall 
#line 6201
GetNamedPipeHandleStateA(HANDLE hNamedPipe, LPDWORD lpState, LPDWORD lpCurInstances, LPDWORD lpMaxCollectionCount, LPDWORD lpCollectDataTimeout, LPSTR lpUserName, DWORD nMaxUserNameSize); 
#line 6214 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
__declspec(dllimport) BOOL __stdcall 
#line 6217
CallNamedPipeA(LPCSTR lpNamedPipeName, LPVOID lpInBuffer, DWORD nInBufferSize, LPVOID lpOutBuffer, DWORD nOutBufferSize, LPDWORD lpBytesRead, DWORD nTimeOut); 
#line 6232 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
#pragma endregion
#line 6234
#pragma region Desktop Family or OneCore Family or Games Family
#line 6237
__declspec(dllimport) BOOL __stdcall 
#line 6240
WaitNamedPipeA(LPCSTR lpNamedPipeName, DWORD nTimeOut); 
#line 6249 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
#pragma endregion
#line 6253
#pragma region Desktop Family
#line 6258 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
#pragma endregion
#line 6260
#pragma region Desktop Family or OneCore Family
#line 6263
__declspec(dllimport) BOOL __stdcall 
#line 6266
GetNamedPipeClientComputerNameA(HANDLE Pipe, LPSTR ClientComputerName, ULONG ClientComputerNameLength); 
#line 6277 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
#pragma endregion
#line 6279
#pragma region Desktop Family
#line 6282
__declspec(dllimport) BOOL __stdcall 
#line 6285
GetNamedPipeClientProcessId(HANDLE Pipe, PULONG ClientProcessId); 
#line 6290
__declspec(dllimport) BOOL __stdcall 
#line 6293
GetNamedPipeClientSessionId(HANDLE Pipe, PULONG ClientSessionId); 
#line 6298
__declspec(dllimport) BOOL __stdcall 
#line 6301
GetNamedPipeServerProcessId(HANDLE Pipe, PULONG ServerProcessId); 
#line 6306
__declspec(dllimport) BOOL __stdcall 
#line 6309
GetNamedPipeServerSessionId(HANDLE Pipe, PULONG ServerSessionId); 
#line 6315 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
#pragma endregion
#line 6319 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
#pragma region Application Family or Desktop Family
#line 6322
__declspec(dllimport) BOOL __stdcall 
#line 6325
SetVolumeLabelA(LPCSTR lpRootPathName, LPCSTR lpVolumeName); 
#line 6329
__declspec(dllimport) BOOL __stdcall 
#line 6332
SetVolumeLabelW(LPCWSTR lpRootPathName, LPCWSTR lpVolumeName); 
#line 6343 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
#pragma endregion
#line 6345
#pragma region Desktop Family
#line 6351
__declspec(dllimport) BOOL __stdcall 
#line 6354
SetFileBandwidthReservation(HANDLE hFile, DWORD nPeriodMilliseconds, DWORD nBytesPerPeriod, BOOL bDiscardable, LPDWORD lpTransferSize, LPDWORD lpNumOutstandingRequests); 
#line 6363
__declspec(dllimport) BOOL __stdcall 
#line 6366
GetFileBandwidthReservation(HANDLE hFile, LPDWORD lpPeriodMilliseconds, LPDWORD lpBytesPerPeriod, LPBOOL pDiscardable, LPDWORD lpTransferSize, LPDWORD lpNumOutstandingRequests); 
#line 6381 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
__declspec(dllimport) BOOL __stdcall 
#line 6384
ClearEventLogA(HANDLE hEventLog, LPCSTR lpBackupFileName); 
#line 6388
__declspec(dllimport) BOOL __stdcall 
#line 6391
ClearEventLogW(HANDLE hEventLog, LPCWSTR lpBackupFileName); 
#line 6401 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
__declspec(dllimport) BOOL __stdcall 
#line 6404
BackupEventLogA(HANDLE hEventLog, LPCSTR lpBackupFileName); 
#line 6408
__declspec(dllimport) BOOL __stdcall 
#line 6411
BackupEventLogW(HANDLE hEventLog, LPCWSTR lpBackupFileName); 
#line 6421 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
__declspec(dllimport) BOOL __stdcall 
#line 6424
CloseEventLog(HANDLE hEventLog); 
#line 6429 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
#pragma endregion
#line 6431
#pragma region Application Family
#line 6434
__declspec(dllimport) BOOL __stdcall 
#line 6437
DeregisterEventSource(HANDLE hEventLog); 
#line 6442 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
#pragma endregion
#line 6444
#pragma region Desktop Family
#line 6447
__declspec(dllimport) BOOL __stdcall 
#line 6450
NotifyChangeEventLog(HANDLE hEventLog, HANDLE hEvent); 
#line 6455
__declspec(dllimport) BOOL __stdcall 
#line 6458
GetNumberOfEventLogRecords(HANDLE hEventLog, PDWORD NumberOfRecords); 
#line 6463
__declspec(dllimport) BOOL __stdcall 
#line 6466
GetOldestEventLogRecord(HANDLE hEventLog, PDWORD OldestRecord); 
#line 6471
__declspec(dllimport) HANDLE __stdcall 
#line 6474
OpenEventLogA(LPCSTR lpUNCServerName, LPCSTR lpSourceName); 
#line 6478
__declspec(dllimport) HANDLE __stdcall 
#line 6481
OpenEventLogW(LPCWSTR lpUNCServerName, LPCWSTR lpSourceName); 
#line 6492 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
#pragma endregion
#line 6494
#pragma region Application Family
#line 6497
__declspec(dllimport) HANDLE __stdcall 
#line 6500
RegisterEventSourceA(LPCSTR lpUNCServerName, LPCSTR lpSourceName); 
#line 6504
__declspec(dllimport) HANDLE __stdcall 
#line 6507
RegisterEventSourceW(LPCWSTR lpUNCServerName, LPCWSTR lpSourceName); 
#line 6518 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
#pragma endregion
#line 6520
#pragma region Desktop Family
#line 6522
__declspec(dllimport) HANDLE __stdcall 
#line 6525
OpenBackupEventLogA(LPCSTR lpUNCServerName, LPCSTR lpFileName); 
#line 6529
__declspec(dllimport) HANDLE __stdcall 
#line 6532
OpenBackupEventLogW(LPCWSTR lpUNCServerName, LPCWSTR lpFileName); 
#line 6542 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
__declspec(dllimport) BOOL __stdcall 
#line 6545
ReadEventLogA(HANDLE hEventLog, DWORD dwReadFlags, DWORD dwRecordOffset, LPVOID lpBuffer, DWORD nNumberOfBytesToRead, DWORD * pnBytesRead, DWORD * pnMinNumberOfBytesNeeded); 
#line 6554
__declspec(dllimport) BOOL __stdcall 
#line 6557
ReadEventLogW(HANDLE hEventLog, DWORD dwReadFlags, DWORD dwRecordOffset, LPVOID lpBuffer, DWORD nNumberOfBytesToRead, DWORD * pnBytesRead, DWORD * pnMinNumberOfBytesNeeded); 
#line 6573 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
#pragma endregion
#line 6575
#pragma region Application Family
#line 6578
__declspec(dllimport) BOOL __stdcall 
#line 6581
ReportEventA(HANDLE hEventLog, WORD wType, WORD wCategory, DWORD dwEventID, PSID lpUserSid, WORD wNumStrings, DWORD dwDataSize, LPCSTR * lpStrings, LPVOID lpRawData); 
#line 6592
__declspec(dllimport) BOOL __stdcall 
#line 6595
ReportEventW(HANDLE hEventLog, WORD wType, WORD wCategory, DWORD dwEventID, PSID lpUserSid, WORD wNumStrings, DWORD dwDataSize, LPCWSTR * lpStrings, LPVOID lpRawData); 
#line 6613 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
#pragma endregion
#line 6615
#pragma region Desktop Family
#line 6624
typedef 
#line 6620
struct _EVENTLOG_FULL_INFORMATION { 
#line 6622
DWORD dwFull; 
#line 6624
} EVENTLOG_FULL_INFORMATION, *LPEVENTLOG_FULL_INFORMATION; 
#line 6626
__declspec(dllimport) BOOL __stdcall 
#line 6629
GetEventLogInformation(HANDLE hEventLog, DWORD dwInfoLevel, LPVOID lpBuffer, DWORD cbBufSize, LPDWORD pcbBytesNeeded); 
#line 6644
typedef ULONG OPERATION_ID; 
#line 6654
typedef 
#line 6650
struct _OPERATION_START_PARAMETERS { 
#line 6651
ULONG Version; 
#line 6652
OPERATION_ID OperationId; 
#line 6653
ULONG Flags; 
#line 6654
} OPERATION_START_PARAMETERS, *POPERATION_START_PARAMETERS; 
#line 6666
typedef 
#line 6662
struct _OPERATION_END_PARAMETERS { 
#line 6663
ULONG Version; 
#line 6664
OPERATION_ID OperationId; 
#line 6665
ULONG Flags; 
#line 6666
} OPERATION_END_PARAMETERS, *POPERATION_END_PARAMETERS; 
#line 6670
__declspec(dllimport) BOOL __stdcall 
#line 6673
OperationStart(OPERATION_START_PARAMETERS * OperationStartParams); 
#line 6677
__declspec(dllimport) BOOL __stdcall 
#line 6680
OperationEnd(OPERATION_END_PARAMETERS * OperationEndParams); 
#line 6692 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
__declspec(dllimport) BOOL __stdcall 
#line 6695
AccessCheckAndAuditAlarmA(LPCSTR SubsystemName, LPVOID HandleId, LPSTR ObjectTypeName, LPSTR ObjectName, PSECURITY_DESCRIPTOR SecurityDescriptor, DWORD DesiredAccess, PGENERIC_MAPPING GenericMapping, BOOL ObjectCreation, LPDWORD GrantedAccess, LPBOOL AccessStatus, LPBOOL pfGenerateOnClose); 
#line 6714 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
__declspec(dllimport) BOOL __stdcall 
#line 6717
AccessCheckByTypeAndAuditAlarmA(LPCSTR SubsystemName, LPVOID HandleId, LPCSTR ObjectTypeName, LPCSTR ObjectName, PSECURITY_DESCRIPTOR SecurityDescriptor, PSID PrincipalSelfSid, DWORD DesiredAccess, AUDIT_EVENT_TYPE AuditType, DWORD Flags, POBJECT_TYPE_LIST ObjectTypeList, DWORD ObjectTypeListLength, PGENERIC_MAPPING GenericMapping, BOOL ObjectCreation, LPDWORD GrantedAccess, LPBOOL AccessStatus, LPBOOL pfGenerateOnClose); 
#line 6739 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
__declspec(dllimport) BOOL __stdcall 
#line 6742
AccessCheckByTypeResultListAndAuditAlarmA(LPCSTR SubsystemName, LPVOID HandleId, LPCSTR ObjectTypeName, LPCSTR ObjectName, PSECURITY_DESCRIPTOR SecurityDescriptor, PSID PrincipalSelfSid, DWORD DesiredAccess, AUDIT_EVENT_TYPE AuditType, DWORD Flags, POBJECT_TYPE_LIST ObjectTypeList, DWORD ObjectTypeListLength, PGENERIC_MAPPING GenericMapping, BOOL ObjectCreation, LPDWORD GrantedAccess, LPDWORD AccessStatusList, LPBOOL pfGenerateOnClose); 
#line 6764 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
__declspec(dllimport) BOOL __stdcall 
#line 6767
AccessCheckByTypeResultListAndAuditAlarmByHandleA(LPCSTR SubsystemName, LPVOID HandleId, HANDLE ClientToken, LPCSTR ObjectTypeName, LPCSTR ObjectName, PSECURITY_DESCRIPTOR SecurityDescriptor, PSID PrincipalSelfSid, DWORD DesiredAccess, AUDIT_EVENT_TYPE AuditType, DWORD Flags, POBJECT_TYPE_LIST ObjectTypeList, DWORD ObjectTypeListLength, PGENERIC_MAPPING GenericMapping, BOOL ObjectCreation, LPDWORD GrantedAccess, LPDWORD AccessStatusList, LPBOOL pfGenerateOnClose); 
#line 6791 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
__declspec(dllimport) BOOL __stdcall 
#line 6794
ObjectOpenAuditAlarmA(LPCSTR SubsystemName, LPVOID HandleId, LPSTR ObjectTypeName, LPSTR ObjectName, PSECURITY_DESCRIPTOR pSecurityDescriptor, HANDLE ClientToken, DWORD DesiredAccess, DWORD GrantedAccess, PPRIVILEGE_SET Privileges, BOOL ObjectCreation, BOOL AccessGranted, LPBOOL GenerateOnClose); 
#line 6812 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
__declspec(dllimport) BOOL __stdcall 
#line 6815
ObjectPrivilegeAuditAlarmA(LPCSTR SubsystemName, LPVOID HandleId, HANDLE ClientToken, DWORD DesiredAccess, PPRIVILEGE_SET Privileges, BOOL AccessGranted); 
#line 6827 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
__declspec(dllimport) BOOL __stdcall 
#line 6830
ObjectCloseAuditAlarmA(LPCSTR SubsystemName, LPVOID HandleId, BOOL GenerateOnClose); 
#line 6839 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
__declspec(dllimport) BOOL __stdcall 
#line 6842
ObjectDeleteAuditAlarmA(LPCSTR SubsystemName, LPVOID HandleId, BOOL GenerateOnClose); 
#line 6851 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
__declspec(dllimport) BOOL __stdcall 
#line 6854
PrivilegedServiceAuditAlarmA(LPCSTR SubsystemName, LPCSTR ServiceName, HANDLE ClientToken, PPRIVILEGE_SET Privileges, BOOL AccessGranted); 
#line 6866 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
__declspec(dllimport) BOOL __stdcall 
#line 6869
AddConditionalAce(PACL pAcl, DWORD dwAceRevision, DWORD AceFlags, UCHAR AceType, DWORD AccessMask, PSID pSid, PWCHAR ConditionStr, DWORD * ReturnLength); 
#line 6882 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
#pragma endregion
#line 6884
#pragma region Desktop Family or OneCore Family
#line 6887
__declspec(dllimport) BOOL __stdcall 
#line 6890
SetFileSecurityA(LPCSTR lpFileName, SECURITY_INFORMATION SecurityInformation, PSECURITY_DESCRIPTOR pSecurityDescriptor); 
#line 6899 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
__declspec(dllimport) BOOL __stdcall 
#line 6902
GetFileSecurityA(LPCSTR lpFileName, SECURITY_INFORMATION RequestedInformation, PSECURITY_DESCRIPTOR pSecurityDescriptor, DWORD nLength, LPDWORD lpnLengthNeeded); 
#line 6914 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
#pragma endregion
#line 6916
#pragma region Application Family or OneCore Family or Games Family
#line 6920
__declspec(dllimport) BOOL __stdcall 
#line 6923
ReadDirectoryChangesW(HANDLE hDirectory, LPVOID lpBuffer, DWORD nBufferLength, BOOL bWatchSubtree, DWORD dwNotifyFilter, LPDWORD lpBytesReturned, LPOVERLAPPED lpOverlapped, LPOVERLAPPED_COMPLETION_ROUTINE lpCompletionRoutine); 
#line 6935
__declspec(dllimport) BOOL __stdcall 
#line 6938
ReadDirectoryChangesExW(HANDLE hDirectory, LPVOID lpBuffer, DWORD nBufferLength, BOOL bWatchSubtree, DWORD dwNotifyFilter, LPDWORD lpBytesReturned, LPOVERLAPPED lpOverlapped, LPOVERLAPPED_COMPLETION_ROUTINE lpCompletionRoutine, READ_DIRECTORY_NOTIFY_INFORMATION_CLASS ReadDirectoryNotifyInformationClass); 
#line 6953 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
#pragma endregion
#line 6955
#pragma region Desktop Family
#line 6960
__declspec(dllimport) LPVOID __stdcall 
#line 6964
MapViewOfFileExNuma(HANDLE hFileMappingObject, DWORD dwDesiredAccess, DWORD dwFileOffsetHigh, DWORD dwFileOffsetLow, SIZE_T dwNumberOfBytesToMap, LPVOID lpBaseAddress, DWORD nndPreferred); 
#line 6976 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
__declspec(dllimport) BOOL __stdcall 
#line 6979
IsBadReadPtr(const void * lp, UINT_PTR ucb); 
#line 6984
__declspec(dllimport) BOOL __stdcall 
#line 6987
IsBadWritePtr(LPVOID lp, UINT_PTR ucb); 
#line 6992
__declspec(dllimport) BOOL __stdcall 
#line 6995
IsBadHugeReadPtr(const void * lp, UINT_PTR ucb); 
#line 7000
__declspec(dllimport) BOOL __stdcall 
#line 7003
IsBadHugeWritePtr(LPVOID lp, UINT_PTR ucb); 
#line 7008
__declspec(dllimport) BOOL __stdcall 
#line 7011
IsBadCodePtr(FARPROC lpfn); 
#line 7015
__declspec(dllimport) BOOL __stdcall 
#line 7018
IsBadStringPtrA(LPCSTR lpsz, UINT_PTR ucchMax); 
#line 7022
__declspec(dllimport) BOOL __stdcall 
#line 7025
IsBadStringPtrW(LPCWSTR lpsz, UINT_PTR ucchMax); 
#line 7036 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
#pragma endregion
#line 7038
#pragma region Application Family or OneCore Family
#line 7041
__declspec(dllimport) BOOL __stdcall 
#line 7044
LookupAccountSidA(LPCSTR lpSystemName, PSID Sid, LPSTR Name, LPDWORD cchName, LPSTR ReferencedDomainName, LPDWORD cchReferencedDomainName, PSID_NAME_USE peUse); 
#line 7053
__declspec(dllimport) BOOL __stdcall 
#line 7056
LookupAccountSidW(LPCWSTR lpSystemName, PSID Sid, LPWSTR Name, LPDWORD cchName, LPWSTR ReferencedDomainName, LPDWORD cchReferencedDomainName, PSID_NAME_USE peUse); 
#line 7071 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
__declspec(dllimport) BOOL __stdcall 
#line 7074
LookupAccountNameA(LPCSTR lpSystemName, LPCSTR lpAccountName, PSID Sid, LPDWORD cbSid, LPSTR ReferencedDomainName, LPDWORD cchReferencedDomainName, PSID_NAME_USE peUse); 
#line 7083
__declspec(dllimport) BOOL __stdcall 
#line 7086
LookupAccountNameW(LPCWSTR lpSystemName, LPCWSTR lpAccountName, PSID Sid, LPDWORD cbSid, LPWSTR ReferencedDomainName, LPDWORD cchReferencedDomainName, PSID_NAME_USE peUse); 
#line 7102 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
#pragma endregion
#line 7104
#pragma region Desktop Family
#line 7109
__declspec(dllimport) BOOL __stdcall 
#line 7112
LookupAccountNameLocalA(LPCSTR lpAccountName, PSID Sid, LPDWORD cbSid, LPSTR ReferencedDomainName, LPDWORD cchReferencedDomainName, PSID_NAME_USE peUse); 
#line 7120
__declspec(dllimport) BOOL __stdcall 
#line 7123
LookupAccountNameLocalW(LPCWSTR lpAccountName, PSID Sid, LPDWORD cbSid, LPWSTR ReferencedDomainName, LPDWORD cchReferencedDomainName, PSID_NAME_USE peUse); 
#line 7137 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
__declspec(dllimport) BOOL __stdcall 
#line 7140
LookupAccountSidLocalA(PSID Sid, LPSTR Name, LPDWORD cchName, LPSTR ReferencedDomainName, LPDWORD cchReferencedDomainName, PSID_NAME_USE peUse); 
#line 7148
__declspec(dllimport) BOOL __stdcall 
#line 7151
LookupAccountSidLocalW(PSID Sid, LPWSTR Name, LPDWORD cchName, LPWSTR ReferencedDomainName, LPDWORD cchReferencedDomainName, PSID_NAME_USE peUse); 
#line 7190 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
#pragma endregion
#line 7192
#pragma region Application Family or OneCore Family or Games Family
#line 7195
__declspec(dllimport) BOOL __stdcall 
#line 7198
LookupPrivilegeValueA(LPCSTR lpSystemName, LPCSTR lpName, PLUID lpLuid); 
#line 7203
__declspec(dllimport) BOOL __stdcall 
#line 7206
LookupPrivilegeValueW(LPCWSTR lpSystemName, LPCWSTR lpName, PLUID lpLuid); 
#line 7217 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
__declspec(dllimport) BOOL __stdcall 
#line 7220
LookupPrivilegeNameA(LPCSTR lpSystemName, PLUID lpLuid, LPSTR lpName, LPDWORD cchName); 
#line 7226
__declspec(dllimport) BOOL __stdcall 
#line 7229
LookupPrivilegeNameW(LPCWSTR lpSystemName, PLUID lpLuid, LPWSTR lpName, LPDWORD cchName); 
#line 7241 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
__declspec(dllimport) BOOL __stdcall 
#line 7244
LookupPrivilegeDisplayNameA(LPCSTR lpSystemName, LPCSTR lpName, LPSTR lpDisplayName, LPDWORD cchDisplayName, LPDWORD lpLanguageId); 
#line 7251
__declspec(dllimport) BOOL __stdcall 
#line 7254
LookupPrivilegeDisplayNameW(LPCWSTR lpSystemName, LPCWSTR lpName, LPWSTR lpDisplayName, LPDWORD cchDisplayName, LPDWORD lpLanguageId); 
#line 7268 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
#pragma endregion
#line 7270
#pragma region Desktop Family
#line 7273
__declspec(dllimport) BOOL __stdcall 
#line 7276
BuildCommDCBA(LPCSTR lpDef, LPDCB lpDCB); 
#line 7280
__declspec(dllimport) BOOL __stdcall 
#line 7283
BuildCommDCBW(LPCWSTR lpDef, LPDCB lpDCB); 
#line 7293 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
__declspec(dllimport) BOOL __stdcall 
#line 7296
BuildCommDCBAndTimeoutsA(LPCSTR lpDef, LPDCB lpDCB, LPCOMMTIMEOUTS lpCommTimeouts); 
#line 7301
__declspec(dllimport) BOOL __stdcall 
#line 7304
BuildCommDCBAndTimeoutsW(LPCWSTR lpDef, LPDCB lpDCB, LPCOMMTIMEOUTS lpCommTimeouts); 
#line 7315 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
__declspec(dllimport) BOOL __stdcall 
#line 7318
CommConfigDialogA(LPCSTR lpszName, HWND hWnd, LPCOMMCONFIG lpCC); 
#line 7323
__declspec(dllimport) BOOL __stdcall 
#line 7326
CommConfigDialogW(LPCWSTR lpszName, HWND hWnd, LPCOMMCONFIG lpCC); 
#line 7337 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
__declspec(dllimport) BOOL __stdcall 
#line 7340
GetDefaultCommConfigA(LPCSTR lpszName, LPCOMMCONFIG lpCC, LPDWORD lpdwSize); 
#line 7345
__declspec(dllimport) BOOL __stdcall 
#line 7348
GetDefaultCommConfigW(LPCWSTR lpszName, LPCOMMCONFIG lpCC, LPDWORD lpdwSize); 
#line 7359 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
__declspec(dllimport) BOOL __stdcall 
#line 7362
SetDefaultCommConfigA(LPCSTR lpszName, LPCOMMCONFIG lpCC, DWORD dwSize); 
#line 7367
__declspec(dllimport) BOOL __stdcall 
#line 7370
SetDefaultCommConfigW(LPCWSTR lpszName, LPCOMMCONFIG lpCC, DWORD dwSize); 
#line 7382 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
#pragma endregion
#line 7384
#pragma region Application Family or OneCore or Games Family
#line 7393 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
__declspec(dllimport) BOOL __stdcall 
#line 7397
GetComputerNameA(LPSTR lpBuffer, LPDWORD nSize); 
#line 7401
__declspec(dllimport) BOOL __stdcall 
#line 7405
GetComputerNameW(LPWSTR lpBuffer, LPDWORD nSize); 
#line 7416 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
#pragma endregion
#line 7418
#pragma region Desktop Family
#line 7424
__declspec(dllimport) BOOL __stdcall 
#line 7428
DnsHostnameToComputerNameA(LPCSTR Hostname, LPSTR ComputerName, LPDWORD nSize); 
#line 7433
__declspec(dllimport) BOOL __stdcall 
#line 7437
DnsHostnameToComputerNameW(LPCWSTR Hostname, LPWSTR ComputerName, LPDWORD nSize); 
#line 7450 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
__declspec(dllimport) BOOL __stdcall 
#line 7453
GetUserNameA(LPSTR lpBuffer, LPDWORD pcbBuffer); 
#line 7457
__declspec(dllimport) BOOL __stdcall 
#line 7460
GetUserNameW(LPWSTR lpBuffer, LPDWORD pcbBuffer); 
#line 7498 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
__declspec(dllimport) BOOL __stdcall 
#line 7501
LogonUserA(LPCSTR lpszUsername, LPCSTR lpszDomain, LPCSTR lpszPassword, DWORD dwLogonType, DWORD dwLogonProvider, PHANDLE phToken); 
#line 7509
__declspec(dllimport) BOOL __stdcall 
#line 7512
LogonUserW(LPCWSTR lpszUsername, LPCWSTR lpszDomain, LPCWSTR lpszPassword, DWORD dwLogonType, DWORD dwLogonProvider, PHANDLE phToken); 
#line 7526 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
__declspec(dllimport) BOOL __stdcall 
#line 7529
LogonUserExA(LPCSTR lpszUsername, LPCSTR lpszDomain, LPCSTR lpszPassword, DWORD dwLogonType, DWORD dwLogonProvider, PHANDLE phToken, PSID * ppLogonSid, PVOID * ppProfileBuffer, LPDWORD pdwProfileLength, PQUOTA_LIMITS pQuotaLimits); 
#line 7541
__declspec(dllimport) BOOL __stdcall 
#line 7544
LogonUserExW(LPCWSTR lpszUsername, LPCWSTR lpszDomain, LPCWSTR lpszPassword, DWORD dwLogonType, DWORD dwLogonProvider, PHANDLE phToken, PSID * ppLogonSid, PVOID * ppProfileBuffer, LPDWORD pdwProfileLength, PQUOTA_LIMITS pQuotaLimits); 
#line 7563 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
#pragma endregion
#line 7570 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
#pragma region Desktop Family
#line 7582
__declspec(dllimport) BOOL __stdcall 
#line 7585
CreateProcessWithLogonW(LPCWSTR lpUsername, LPCWSTR lpDomain, LPCWSTR lpPassword, DWORD dwLogonFlags, LPCWSTR lpApplicationName, LPWSTR lpCommandLine, DWORD dwCreationFlags, LPVOID lpEnvironment, LPCWSTR lpCurrentDirectory, LPSTARTUPINFOW lpStartupInfo, LPPROCESS_INFORMATION lpProcessInformation); 
#line 7599
__declspec(dllimport) BOOL __stdcall 
#line 7602
CreateProcessWithTokenW(HANDLE hToken, DWORD dwLogonFlags, LPCWSTR lpApplicationName, LPWSTR lpCommandLine, DWORD dwCreationFlags, LPVOID lpEnvironment, LPCWSTR lpCurrentDirectory, LPSTARTUPINFOW lpStartupInfo, LPPROCESS_INFORMATION lpProcessInformation); 
#line 7616 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
__declspec(dllimport) BOOL __stdcall 
#line 7619
IsTokenUntrusted(HANDLE TokenHandle); 
#line 7625 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
#pragma region Desktop or Games Family
#line 7634
__declspec(dllimport) BOOL __stdcall 
#line 7637
RegisterWaitForSingleObject(PHANDLE phNewWaitObject, HANDLE hObject, WAITORTIMERCALLBACK Callback, PVOID Context, ULONG dwMilliseconds, ULONG dwFlags); 
#line 7646
__declspec(dllimport) BOOL __stdcall 
#line 7650
UnregisterWait(HANDLE WaitHandle); 
#line 7654
__declspec(dllimport) BOOL __stdcall 
#line 7657
BindIoCompletionCallback(HANDLE FileHandle, LPOVERLAPPED_COMPLETION_ROUTINE Function, ULONG Flags); 
#line 7663
__declspec(dllimport) HANDLE __stdcall 
#line 7666
SetTimerQueueTimer(HANDLE TimerQueue, WAITORTIMERCALLBACK Callback, PVOID Parameter, DWORD DueTime, DWORD Period, BOOL PreferIo); 
#line 7675
__declspec(dllimport) BOOL __stdcall 
#line 7679
CancelTimerQueueTimer(HANDLE TimerQueue, HANDLE Timer); 
#line 7698 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
__forceinline void InitializeThreadpoolEnvironment(PTP_CALLBACK_ENVIRON 
#line 7699
pcbe) 
#line 7701
{ 
#line 7702
TpInitializeCallbackEnviron(pcbe); 
#line 7703
} 
#line 7707
__forceinline void SetThreadpoolCallbackPool(PTP_CALLBACK_ENVIRON 
#line 7708
pcbe, PTP_POOL 
#line 7709
ptpp) 
#line 7711
{ 
#line 7712
TpSetCallbackThreadpool(pcbe, ptpp); 
#line 7713
} 
#line 7717
__forceinline void SetThreadpoolCallbackCleanupGroup(PTP_CALLBACK_ENVIRON 
#line 7718
pcbe, PTP_CLEANUP_GROUP 
#line 7719
ptpcg, PTP_CLEANUP_GROUP_CANCEL_CALLBACK 
#line 7720
pfng) 
#line 7722
{ 
#line 7723
TpSetCallbackCleanupGroup(pcbe, ptpcg, pfng); 
#line 7724
} 
#line 7728
__forceinline void SetThreadpoolCallbackRunsLong(PTP_CALLBACK_ENVIRON 
#line 7729
pcbe) 
#line 7731
{ 
#line 7732
TpSetCallbackLongFunction(pcbe); 
#line 7733
} 
#line 7737
__forceinline void SetThreadpoolCallbackLibrary(PTP_CALLBACK_ENVIRON 
#line 7738
pcbe, PVOID 
#line 7739
mod) 
#line 7741
{ 
#line 7742
TpSetCallbackRaceWithDll(pcbe, mod); 
#line 7743
} 
#line 7749
__forceinline void SetThreadpoolCallbackPriority(PTP_CALLBACK_ENVIRON 
#line 7750
pcbe, TP_CALLBACK_PRIORITY 
#line 7751
Priority) 
#line 7753
{ 
#line 7754
TpSetCallbackPriority(pcbe, Priority); 
#line 7755
} 
#line 7761 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
__forceinline void DestroyThreadpoolEnvironment(PTP_CALLBACK_ENVIRON 
#line 7762
pcbe) 
#line 7764
{ 
#line 7765
TpDestroyCallbackEnviron(pcbe); 
#line 7766
} 
#line 7778 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
#pragma region Desktop Family
#line 7785
__forceinline void SetThreadpoolCallbackPersistent(PTP_CALLBACK_ENVIRON 
#line 7786
pcbe) 
#line 7788
{ 
#line 7789
TpSetCallbackPersistent(pcbe); 
#line 7790
} 
#line 7795 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
#pragma endregion
#line 7797
#pragma region Application Family or OneCore Family
#line 7804
__declspec(dllimport) HANDLE __stdcall 
#line 7808
CreatePrivateNamespaceA(LPSECURITY_ATTRIBUTES lpPrivateNamespaceAttributes, LPVOID lpBoundaryDescriptor, LPCSTR lpAliasPrefix); 
#line 7820 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
__declspec(dllimport) HANDLE __stdcall 
#line 7824
OpenPrivateNamespaceA(LPVOID lpBoundaryDescriptor, LPCSTR lpAliasPrefix); 
#line 7840 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
__declspec(dllimport) HANDLE __stdcall 
#line 7844
CreateBoundaryDescriptorA(LPCSTR Name, ULONG Flags); 
#line 7856 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
#pragma endregion
#line 7858
#pragma region Desktop Family
#line 7861
__declspec(dllimport) BOOL __stdcall 
#line 7864
AddIntegrityLabelToBoundaryDescriptor(HANDLE * BoundaryDescriptor, PSID IntegrityLabel); 
#line 7870 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
#pragma endregion
#line 7874 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
#pragma region Desktop Family
#line 7895
typedef 
#line 7891
struct tagHW_PROFILE_INFOA { 
#line 7892
DWORD dwDockInfo; 
#line 7893
CHAR szHwProfileGuid[39]; 
#line 7894
CHAR szHwProfileName[80]; 
#line 7895
} HW_PROFILE_INFOA, *LPHW_PROFILE_INFOA; 
#line 7900
typedef 
#line 7896
struct tagHW_PROFILE_INFOW { 
#line 7897
DWORD dwDockInfo; 
#line 7898
WCHAR szHwProfileGuid[39]; 
#line 7899
WCHAR szHwProfileName[80]; 
#line 7900
} HW_PROFILE_INFOW, *LPHW_PROFILE_INFOW; 
#line 7905
typedef HW_PROFILE_INFOA HW_PROFILE_INFO; 
#line 7906
typedef LPHW_PROFILE_INFOA LPHW_PROFILE_INFO; 
#line 7910 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
__declspec(dllimport) BOOL __stdcall 
#line 7913
GetCurrentHwProfileA(LPHW_PROFILE_INFOA lpHwProfileInfo); 
#line 7916
__declspec(dllimport) BOOL __stdcall 
#line 7919
GetCurrentHwProfileW(LPHW_PROFILE_INFOW lpHwProfileInfo); 
#line 7930 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
#pragma endregion
#line 7932
#pragma region Desktop Family or Gaming Family
#line 7935
__declspec(dllimport) BOOL __stdcall 
#line 7938
VerifyVersionInfoA(LPOSVERSIONINFOEXA lpVersionInformation, DWORD dwTypeMask, DWORDLONG dwlConditionMask); 
#line 7943
__declspec(dllimport) BOOL __stdcall 
#line 7946
VerifyVersionInfoW(LPOSVERSIONINFOEXW lpVersionInformation, DWORD dwTypeMask, DWORDLONG dwlConditionMask); 
#line 7958 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
#pragma endregion
#line 29718 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\shared\\winerror.h"
constexpr __forceinline HRESULT HRESULT_FROM_WIN32(unsigned long x) { return (((HRESULT)x) <= (0)) ? (HRESULT)x : ((HRESULT)(((x & (65535)) | (7 << 16)) | (2147483648U))); } 
#line 23 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\timezoneapi.h"
extern "C" {
#line 28 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\timezoneapi.h"
#pragma region Application Family or OneCore Family or Games Family
#line 43
typedef 
#line 35
struct _TIME_ZONE_INFORMATION { 
#line 36
LONG Bias; 
#line 37
WCHAR StandardName[32]; 
#line 38
SYSTEMTIME StandardDate; 
#line 39
LONG StandardBias; 
#line 40
WCHAR DaylightName[32]; 
#line 41
SYSTEMTIME DaylightDate; 
#line 42
LONG DaylightBias; 
#line 43
} TIME_ZONE_INFORMATION, *PTIME_ZONE_INFORMATION, *LPTIME_ZONE_INFORMATION; 
#line 55
typedef 
#line 45
struct _TIME_DYNAMIC_ZONE_INFORMATION { 
#line 46
LONG Bias; 
#line 47
WCHAR StandardName[32]; 
#line 48
SYSTEMTIME StandardDate; 
#line 49
LONG StandardBias; 
#line 50
WCHAR DaylightName[32]; 
#line 51
SYSTEMTIME DaylightDate; 
#line 52
LONG DaylightBias; 
#line 53
WCHAR TimeZoneKeyName[128]; 
#line 54
BOOLEAN DynamicDaylightTimeDisabled; 
#line 55
} DYNAMIC_TIME_ZONE_INFORMATION, *PDYNAMIC_TIME_ZONE_INFORMATION; 
#line 57
__declspec(dllimport) BOOL __stdcall 
#line 61
SystemTimeToTzSpecificLocalTime(const TIME_ZONE_INFORMATION * lpTimeZoneInformation, const SYSTEMTIME * lpUniversalTime, LPSYSTEMTIME lpLocalTime); 
#line 67
__declspec(dllimport) BOOL __stdcall 
#line 71
TzSpecificLocalTimeToSystemTime(const TIME_ZONE_INFORMATION * lpTimeZoneInformation, const SYSTEMTIME * lpLocalTime, LPSYSTEMTIME lpUniversalTime); 
#line 77
__declspec(dllimport) BOOL __stdcall 
#line 81
FileTimeToSystemTime(const FILETIME * lpFileTime, LPSYSTEMTIME lpSystemTime); 
#line 86
__declspec(dllimport) BOOL __stdcall 
#line 90
SystemTimeToFileTime(const SYSTEMTIME * lpSystemTime, LPFILETIME lpFileTime); 
#line 95
__declspec(dllimport) DWORD __stdcall 
#line 99
GetTimeZoneInformation(LPTIME_ZONE_INFORMATION lpTimeZoneInformation); 
#line 103
__declspec(dllimport) BOOL __stdcall 
#line 106
SetTimeZoneInformation(const TIME_ZONE_INFORMATION * lpTimeZoneInformation); 
#line 112
__declspec(dllimport) BOOL __stdcall 
#line 115
SetDynamicTimeZoneInformation(const DYNAMIC_TIME_ZONE_INFORMATION * lpTimeZoneInformation); 
#line 123 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\timezoneapi.h"
__declspec(dllimport) DWORD __stdcall 
#line 127
GetDynamicTimeZoneInformation(PDYNAMIC_TIME_ZONE_INFORMATION pTimeZoneInformation); 
#line 138 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\timezoneapi.h"
BOOL __stdcall GetTimeZoneInformationForYear(USHORT wYear, PDYNAMIC_TIME_ZONE_INFORMATION pdtzi, LPTIME_ZONE_INFORMATION ptzi); 
#line 150 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\timezoneapi.h"
__declspec(dllimport) DWORD __stdcall 
#line 154
EnumDynamicTimeZoneInformation(const DWORD dwIndex, PDYNAMIC_TIME_ZONE_INFORMATION lpTimeZoneInformation); 
#line 159
__declspec(dllimport) DWORD __stdcall 
#line 163
GetDynamicTimeZoneInformationEffectiveYears(const PDYNAMIC_TIME_ZONE_INFORMATION lpTimeZoneInformation, LPDWORD FirstYear, LPDWORD LastYear); 
#line 169
__declspec(dllimport) BOOL __stdcall 
#line 173
SystemTimeToTzSpecificLocalTimeEx(const DYNAMIC_TIME_ZONE_INFORMATION * lpTimeZoneInformation, const SYSTEMTIME * lpUniversalTime, LPSYSTEMTIME lpLocalTime); 
#line 179
__declspec(dllimport) BOOL __stdcall 
#line 183
TzSpecificLocalTimeToSystemTimeEx(const DYNAMIC_TIME_ZONE_INFORMATION * lpTimeZoneInformation, const SYSTEMTIME * lpLocalTime, LPSYSTEMTIME lpUniversalTime); 
#line 193 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\timezoneapi.h"
__declspec(dllimport) BOOL __stdcall 
#line 197
LocalFileTimeToLocalSystemTime(const TIME_ZONE_INFORMATION * timeZoneInformation, const FILETIME * localFileTime, SYSTEMTIME * localSystemTime); 
#line 203
__declspec(dllimport) BOOL __stdcall 
#line 207
LocalSystemTimeToLocalFileTime(const TIME_ZONE_INFORMATION * timeZoneInformation, const SYSTEMTIME * localSystemTime, FILETIME * localFileTime); 
#line 221 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\timezoneapi.h"
}
#line 216
#pragma endregion
#line 7967 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
#pragma region Desktop Family
#line 7982
__declspec(dllimport) BOOL __stdcall 
#line 7985
SetSystemPowerState(BOOL fSuspend, BOOL fForce); 
#line 7993 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
#pragma endregion
#line 7995
#pragma region Desktop or PC Family
#line 8028
typedef 
#line 8021
struct _SYSTEM_POWER_STATUS { 
#line 8022
BYTE ACLineStatus; 
#line 8023
BYTE BatteryFlag; 
#line 8024
BYTE BatteryLifePercent; 
#line 8025
BYTE SystemStatusFlag; 
#line 8026
DWORD BatteryLifeTime; 
#line 8027
DWORD BatteryFullLifeTime; 
#line 8028
} SYSTEM_POWER_STATUS, *LPSYSTEM_POWER_STATUS; 
#line 8030
__declspec(dllimport) BOOL __stdcall 
#line 8033
GetSystemPowerStatus(LPSYSTEM_POWER_STATUS lpSystemPowerStatus); 
#line 8040 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
#pragma endregion
#line 8047
#pragma region Desktop Family
#line 8050
__declspec(dllimport) BOOL __stdcall 
#line 8053
MapUserPhysicalPagesScatter(PVOID * VirtualAddresses, ULONG_PTR NumberOfPages, PULONG_PTR PageArray); 
#line 8060 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
#pragma endregion
#line 8062
#pragma region Desktop Family
#line 8065
__declspec(dllimport) HANDLE __stdcall 
#line 8069
CreateJobObjectA(LPSECURITY_ATTRIBUTES lpJobAttributes, LPCSTR lpName); 
#line 8080 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
__declspec(dllimport) HANDLE __stdcall 
#line 8084
OpenJobObjectA(DWORD dwDesiredAccess, BOOL bInheritHandle, LPCSTR lpName); 
#line 8097 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
#pragma endregion
#line 8099
#pragma region Desktop Family
#line 8102
__declspec(dllimport) BOOL __stdcall 
#line 8105
CreateJobSet(ULONG NumJob, PJOB_SET_ARRAY UserJobSet, ULONG Flags); 
#line 8111 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
#pragma endregion
#line 8113
#pragma region Application Family or OneCore Family
#line 8116
__declspec(dllimport) HANDLE __stdcall 
#line 8119
FindFirstVolumeA(LPSTR lpszVolumeName, DWORD cchBufferLength); 
#line 8127 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
__declspec(dllimport) BOOL __stdcall 
#line 8130
FindNextVolumeA(HANDLE hFindVolume, LPSTR lpszVolumeName, DWORD cchBufferLength); 
#line 8140 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
#pragma endregion
#line 8142
#pragma region Desktop Family
#line 8145
__declspec(dllimport) HANDLE __stdcall 
#line 8148
FindFirstVolumeMountPointA(LPCSTR lpszRootPathName, LPSTR lpszVolumeMountPoint, DWORD cchBufferLength); 
#line 8153
__declspec(dllimport) HANDLE __stdcall 
#line 8156
FindFirstVolumeMountPointW(LPCWSTR lpszRootPathName, LPWSTR lpszVolumeMountPoint, DWORD cchBufferLength); 
#line 8167 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
__declspec(dllimport) BOOL __stdcall 
#line 8170
FindNextVolumeMountPointA(HANDLE hFindVolumeMountPoint, LPSTR lpszVolumeMountPoint, DWORD cchBufferLength); 
#line 8175
__declspec(dllimport) BOOL __stdcall 
#line 8178
FindNextVolumeMountPointW(HANDLE hFindVolumeMountPoint, LPWSTR lpszVolumeMountPoint, DWORD cchBufferLength); 
#line 8189 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
__declspec(dllimport) BOOL __stdcall 
#line 8192
FindVolumeMountPointClose(HANDLE hFindVolumeMountPoint); 
#line 8196
__declspec(dllimport) BOOL __stdcall 
#line 8199
SetVolumeMountPointA(LPCSTR lpszVolumeMountPoint, LPCSTR lpszVolumeName); 
#line 8203
__declspec(dllimport) BOOL __stdcall 
#line 8206
SetVolumeMountPointW(LPCWSTR lpszVolumeMountPoint, LPCWSTR lpszVolumeName); 
#line 8217 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
#pragma endregion
#line 8219
#pragma region Application Family or OneCore Family
#line 8222
__declspec(dllimport) BOOL __stdcall 
#line 8225
DeleteVolumeMountPointA(LPCSTR lpszVolumeMountPoint); 
#line 8233 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
#pragma endregion
#line 8235
#pragma region Desktop Family or OneCore Family
#line 8242 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
__declspec(dllimport) BOOL __stdcall 
#line 8245
GetVolumeNameForVolumeMountPointA(LPCSTR lpszVolumeMountPoint, LPSTR lpszVolumeName, DWORD cchBufferLength); 
#line 8252 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
#pragma endregion
#line 8254
#pragma region Application Family or OneCore Family or Games Family
#line 8257
__declspec(dllimport) BOOL __stdcall 
#line 8260
GetVolumePathNameA(LPCSTR lpszFileName, LPSTR lpszVolumePathName, DWORD cchBufferLength); 
#line 8270 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
#pragma endregion
#line 8274 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
#pragma region Desktop Family or OneCore Family
#line 8279
__declspec(dllimport) BOOL __stdcall 
#line 8282
GetVolumePathNamesForVolumeNameA(LPCSTR lpszVolumeName, LPCH lpszVolumePathNames, DWORD cchBufferLength, PDWORD lpcchReturnLength); 
#line 8316 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
typedef 
#line 8306
struct tagACTCTXA { 
#line 8307
ULONG cbSize; 
#line 8308
DWORD dwFlags; 
#line 8309
LPCSTR lpSource; 
#line 8310
USHORT wProcessorArchitecture; 
#line 8311
LANGID wLangId; 
#line 8312
LPCSTR lpAssemblyDirectory; 
#line 8313
LPCSTR lpResourceName; 
#line 8314
LPCSTR lpApplicationName; 
#line 8315
HMODULE hModule; 
#line 8316
} ACTCTXA, *PACTCTXA; 
#line 8327
typedef 
#line 8317
struct tagACTCTXW { 
#line 8318
ULONG cbSize; 
#line 8319
DWORD dwFlags; 
#line 8320
LPCWSTR lpSource; 
#line 8321
USHORT wProcessorArchitecture; 
#line 8322
LANGID wLangId; 
#line 8323
LPCWSTR lpAssemblyDirectory; 
#line 8324
LPCWSTR lpResourceName; 
#line 8325
LPCWSTR lpApplicationName; 
#line 8326
HMODULE hModule; 
#line 8327
} ACTCTXW, *PACTCTXW; 
#line 8332
typedef ACTCTXA ACTCTX; 
#line 8333
typedef PACTCTXA PACTCTX; 
#line 8336 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
typedef const ACTCTXA *PCACTCTXA; 
#line 8337
typedef const ACTCTXW *PCACTCTXW; 
#line 8341
typedef PCACTCTXA PCACTCTX; 
#line 8346 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
__declspec(dllimport) HANDLE __stdcall 
#line 8349
CreateActCtxA(PCACTCTXA pActCtx); 
#line 8352
__declspec(dllimport) HANDLE __stdcall 
#line 8355
CreateActCtxW(PCACTCTXW pActCtx); 
#line 8364 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
__declspec(dllimport) void __stdcall 
#line 8367
AddRefActCtx(HANDLE hActCtx); 
#line 8372
__declspec(dllimport) void __stdcall 
#line 8375
ReleaseActCtx(HANDLE hActCtx); 
#line 8379
__declspec(dllimport) BOOL __stdcall 
#line 8382
ZombifyActCtx(HANDLE hActCtx); 
#line 8388
__declspec(dllimport) BOOL __stdcall 
#line 8391
ActivateActCtx(HANDLE hActCtx, ULONG_PTR * lpCookie); 
#line 8400
__declspec(dllimport) BOOL __stdcall 
#line 8403
DeactivateActCtx(DWORD dwFlags, ULONG_PTR ulCookie); 
#line 8408
__declspec(dllimport) BOOL __stdcall 
#line 8411
GetCurrentActCtx(HANDLE * lphActCtx); 
#line 8426
typedef 
#line 8415
struct tagACTCTX_SECTION_KEYED_DATA_2600 { 
#line 8416
ULONG cbSize; 
#line 8417
ULONG ulDataFormatVersion; 
#line 8418
PVOID lpData; 
#line 8419
ULONG ulLength; 
#line 8420
PVOID lpSectionGlobalData; 
#line 8421
ULONG ulSectionGlobalDataLength; 
#line 8422
PVOID lpSectionBase; 
#line 8423
ULONG ulSectionTotalLength; 
#line 8424
HANDLE hActCtx; 
#line 8425
ULONG ulAssemblyRosterIndex; 
#line 8426
} ACTCTX_SECTION_KEYED_DATA_2600, *PACTCTX_SECTION_KEYED_DATA_2600; 
#line 8427
typedef const ACTCTX_SECTION_KEYED_DATA_2600 *PCACTCTX_SECTION_KEYED_DATA_2600; 
#line 8435
typedef 
#line 8429
struct tagACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA { 
#line 8430
PVOID lpInformation; 
#line 8431
PVOID lpSectionBase; 
#line 8432
ULONG ulSectionLength; 
#line 8433
PVOID lpSectionGlobalDataBase; 
#line 8434
ULONG ulSectionGlobalDataLength; 
#line 8435
} ACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA, *PACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA; 
#line 8436
typedef const ACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA *PCACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA; 
#line 8452
typedef 
#line 8438
struct tagACTCTX_SECTION_KEYED_DATA { 
#line 8439
ULONG cbSize; 
#line 8440
ULONG ulDataFormatVersion; 
#line 8441
PVOID lpData; 
#line 8442
ULONG ulLength; 
#line 8443
PVOID lpSectionGlobalData; 
#line 8444
ULONG ulSectionGlobalDataLength; 
#line 8445
PVOID lpSectionBase; 
#line 8446
ULONG ulSectionTotalLength; 
#line 8447
HANDLE hActCtx; 
#line 8448
ULONG ulAssemblyRosterIndex; 
#line 8450
ULONG ulFlags; 
#line 8451
ACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA AssemblyMetadata; 
#line 8452
} ACTCTX_SECTION_KEYED_DATA, *PACTCTX_SECTION_KEYED_DATA; 
#line 8453
typedef const ACTCTX_SECTION_KEYED_DATA *PCACTCTX_SECTION_KEYED_DATA; 
#line 8462
__declspec(dllimport) BOOL __stdcall 
#line 8465
FindActCtxSectionStringA(DWORD dwFlags, const GUID * lpExtensionGuid, ULONG ulSectionId, LPCSTR lpStringToFind, PACTCTX_SECTION_KEYED_DATA ReturnedData); 
#line 8473
__declspec(dllimport) BOOL __stdcall 
#line 8476
FindActCtxSectionStringW(DWORD dwFlags, const GUID * lpExtensionGuid, ULONG ulSectionId, LPCWSTR lpStringToFind, PACTCTX_SECTION_KEYED_DATA ReturnedData); 
#line 8489 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
__declspec(dllimport) BOOL __stdcall 
#line 8492
FindActCtxSectionGuid(DWORD dwFlags, const GUID * lpExtensionGuid, ULONG ulSectionId, const GUID * lpGuidToFind, PACTCTX_SECTION_KEYED_DATA ReturnedData); 
#line 8507
typedef 
#line 8504
struct _ACTIVATION_CONTEXT_BASIC_INFORMATION { 
#line 8505
HANDLE hActCtx; 
#line 8506
DWORD dwFlags; 
#line 8507
} ACTIVATION_CONTEXT_BASIC_INFORMATION, *PACTIVATION_CONTEXT_BASIC_INFORMATION; 
#line 8509
typedef const _ACTIVATION_CONTEXT_BASIC_INFORMATION *PCACTIVATION_CONTEXT_BASIC_INFORMATION; 
#line 8552 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
__declspec(dllimport) BOOL __stdcall 
#line 8555
QueryActCtxW(DWORD dwFlags, HANDLE hActCtx, PVOID pvSubInstance, ULONG ulInfoClass, PVOID pvBuffer, SIZE_T cbBuffer, SIZE_T * pcbWrittenOrRequired); 
#line 8565
typedef BOOL (__stdcall *PQUERYACTCTXW_FUNC)(DWORD dwFlags, HANDLE hActCtx, PVOID pvSubInstance, ULONG ulInfoClass, PVOID pvBuffer, SIZE_T cbBuffer, SIZE_T * pcbWrittenOrRequired); 
#line 8578 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
#pragma endregion
#line 8580
#pragma region Desktop Family
#line 8586
__declspec(dllimport) DWORD __stdcall 
#line 8589
WTSGetActiveConsoleSessionId(); 
#line 8597 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
__declspec(dllimport) DWORD __stdcall 
#line 8600
WTSGetServiceSessionId(); 
#line 8604
__declspec(dllimport) BOOLEAN __stdcall 
#line 8607
WTSIsServerContainer(); 
#line 8615 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
__declspec(dllimport) WORD __stdcall 
#line 8618
GetActiveProcessorGroupCount(); 
#line 8622
__declspec(dllimport) WORD __stdcall 
#line 8625
GetMaximumProcessorGroupCount(); 
#line 8629
__declspec(dllimport) DWORD __stdcall 
#line 8632
GetActiveProcessorCount(WORD GroupNumber); 
#line 8636
__declspec(dllimport) DWORD __stdcall 
#line 8639
GetMaximumProcessorCount(WORD GroupNumber); 
#line 8649 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
__declspec(dllimport) BOOL __stdcall 
#line 8652
GetNumaProcessorNode(UCHAR Processor, PUCHAR NodeNumber); 
#line 8659
__declspec(dllimport) BOOL __stdcall 
#line 8662
GetNumaNodeNumberFromHandle(HANDLE hFile, PUSHORT NodeNumber); 
#line 8671 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
__declspec(dllimport) BOOL __stdcall 
#line 8674
GetNumaProcessorNodeEx(PPROCESSOR_NUMBER Processor, PUSHORT NodeNumber); 
#line 8681 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
__declspec(dllimport) BOOL __stdcall 
#line 8684
GetNumaNodeProcessorMask(UCHAR Node, PULONGLONG ProcessorMask); 
#line 8689
__declspec(dllimport) BOOL __stdcall 
#line 8692
GetNumaAvailableMemoryNode(UCHAR Node, PULONGLONG AvailableBytes); 
#line 8699
__declspec(dllimport) BOOL __stdcall 
#line 8702
GetNumaAvailableMemoryNodeEx(USHORT Node, PULONGLONG AvailableBytes); 
#line 8711 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
__declspec(dllimport) BOOL __stdcall 
#line 8714
GetNumaProximityNode(ULONG ProximityId, PUCHAR NodeNumber); 
#line 8722 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
#pragma endregion
#line 8724
#pragma region Desktop Family or OneCore Family
#line 8730
typedef DWORD (__stdcall *APPLICATION_RECOVERY_CALLBACK)(PVOID pvParameter); 
#line 8761 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
#pragma endregion
#line 8763
#pragma region Desktop Family
#line 8768
__declspec(dllimport) HRESULT __stdcall 
#line 8771
RegisterApplicationRecoveryCallback(APPLICATION_RECOVERY_CALLBACK pRecoveyCallback, PVOID pvParameter, DWORD dwPingInterval, DWORD dwFlags); 
#line 8778
__declspec(dllimport) HRESULT __stdcall 
#line 8781
UnregisterApplicationRecoveryCallback(); 
#line 8783
__declspec(dllimport) HRESULT __stdcall 
#line 8786
RegisterApplicationRestart(PCWSTR pwzCommandline, DWORD dwFlags); 
#line 8791
__declspec(dllimport) HRESULT __stdcall 
#line 8794
UnregisterApplicationRestart(); 
#line 8799 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
#pragma endregion
#line 8801
#pragma region Desktop Family or OneCore Family
#line 8806
__declspec(dllimport) HRESULT __stdcall 
#line 8809
GetApplicationRecoveryCallback(HANDLE hProcess, APPLICATION_RECOVERY_CALLBACK * pRecoveryCallback, PVOID * ppvParameter, PDWORD pdwPingInterval, PDWORD pdwFlags); 
#line 8817
__declspec(dllimport) HRESULT __stdcall 
#line 8820
GetApplicationRestartSettings(HANDLE hProcess, PWSTR pwzCommandline, PDWORD pcchSize, PDWORD pdwFlags); 
#line 8830 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
#pragma endregion
#line 8832
#pragma region Desktop Family
#line 8837
__declspec(dllimport) HRESULT __stdcall 
#line 8840
ApplicationRecoveryInProgress(PBOOL pbCancelled); 
#line 8844
__declspec(dllimport) void __stdcall 
#line 8847
ApplicationRecoveryFinished(BOOL bSuccess); 
#line 8854 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
#pragma endregion
#line 8858
#pragma region Application Family or OneCore Family or Games Family
#line 8867
typedef 
#line 8861
struct _FILE_BASIC_INFO { 
#line 8862
LARGE_INTEGER CreationTime; 
#line 8863
LARGE_INTEGER LastAccessTime; 
#line 8864
LARGE_INTEGER LastWriteTime; 
#line 8865
LARGE_INTEGER ChangeTime; 
#line 8866
DWORD FileAttributes; 
#line 8867
} FILE_BASIC_INFO, *PFILE_BASIC_INFO; 
#line 8875
typedef 
#line 8869
struct _FILE_STANDARD_INFO { 
#line 8870
LARGE_INTEGER AllocationSize; 
#line 8871
LARGE_INTEGER EndOfFile; 
#line 8872
DWORD NumberOfLinks; 
#line 8873
BOOLEAN DeletePending; 
#line 8874
BOOLEAN Directory; 
#line 8875
} FILE_STANDARD_INFO, *PFILE_STANDARD_INFO; 
#line 8880
typedef 
#line 8877
struct _FILE_NAME_INFO { 
#line 8878
DWORD FileNameLength; 
#line 8879
WCHAR FileName[1]; 
#line 8880
} FILE_NAME_INFO, *PFILE_NAME_INFO; 
#line 8884
typedef 
#line 8882
struct _FILE_CASE_SENSITIVE_INFO { 
#line 8883
ULONG Flags; 
#line 8884
} FILE_CASE_SENSITIVE_INFO, *PFILE_CASE_SENSITIVE_INFO; 
#line 8907 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
typedef 
#line 8895 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
struct _FILE_RENAME_INFO { 
#line 8897
union { 
#line 8898
BOOLEAN ReplaceIfExists; 
#line 8899
DWORD Flags; 
#line 8900
}; 
#line 8904 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
HANDLE RootDirectory; 
#line 8905
DWORD FileNameLength; 
#line 8906
WCHAR FileName[1]; 
#line 8907
} FILE_RENAME_INFO, *PFILE_RENAME_INFO; 
#line 8911
typedef 
#line 8909
struct _FILE_ALLOCATION_INFO { 
#line 8910
LARGE_INTEGER AllocationSize; 
#line 8911
} FILE_ALLOCATION_INFO, *PFILE_ALLOCATION_INFO; 
#line 8915
typedef 
#line 8913
struct _FILE_END_OF_FILE_INFO { 
#line 8914
LARGE_INTEGER EndOfFile; 
#line 8915
} FILE_END_OF_FILE_INFO, *PFILE_END_OF_FILE_INFO; 
#line 8923
typedef 
#line 8917
struct _FILE_STREAM_INFO { 
#line 8918
DWORD NextEntryOffset; 
#line 8919
DWORD StreamNameLength; 
#line 8920
LARGE_INTEGER StreamSize; 
#line 8921
LARGE_INTEGER StreamAllocationSize; 
#line 8922
WCHAR StreamName[1]; 
#line 8923
} FILE_STREAM_INFO, *PFILE_STREAM_INFO; 
#line 8932
typedef 
#line 8925
struct _FILE_COMPRESSION_INFO { 
#line 8926
LARGE_INTEGER CompressedFileSize; 
#line 8927
WORD CompressionFormat; 
#line 8928
UCHAR CompressionUnitShift; 
#line 8929
UCHAR ChunkShift; 
#line 8930
UCHAR ClusterShift; 
#line 8931
UCHAR Reserved[3]; 
#line 8932
} FILE_COMPRESSION_INFO, *PFILE_COMPRESSION_INFO; 
#line 8937
typedef 
#line 8934
struct _FILE_ATTRIBUTE_TAG_INFO { 
#line 8935
DWORD FileAttributes; 
#line 8936
DWORD ReparseTag; 
#line 8937
} FILE_ATTRIBUTE_TAG_INFO, *PFILE_ATTRIBUTE_TAG_INFO; 
#line 8941
typedef 
#line 8939
struct _FILE_DISPOSITION_INFO { 
#line 8940
BOOLEAN DeleteFileA; 
#line 8941
} FILE_DISPOSITION_INFO, *PFILE_DISPOSITION_INFO; 
#line 8955 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
typedef 
#line 8953
struct _FILE_DISPOSITION_INFO_EX { 
#line 8954
DWORD Flags; 
#line 8955
} FILE_DISPOSITION_INFO_EX, *PFILE_DISPOSITION_INFO_EX; 
#line 8974 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
typedef 
#line 8958
struct _FILE_ID_BOTH_DIR_INFO { 
#line 8959
DWORD NextEntryOffset; 
#line 8960
DWORD FileIndex; 
#line 8961
LARGE_INTEGER CreationTime; 
#line 8962
LARGE_INTEGER LastAccessTime; 
#line 8963
LARGE_INTEGER LastWriteTime; 
#line 8964
LARGE_INTEGER ChangeTime; 
#line 8965
LARGE_INTEGER EndOfFile; 
#line 8966
LARGE_INTEGER AllocationSize; 
#line 8967
DWORD FileAttributes; 
#line 8968
DWORD FileNameLength; 
#line 8969
DWORD EaSize; 
#line 8970
CCHAR ShortNameLength; 
#line 8971
WCHAR ShortName[12]; 
#line 8972
LARGE_INTEGER FileId; 
#line 8973
WCHAR FileName[1]; 
#line 8974
} FILE_ID_BOTH_DIR_INFO, *PFILE_ID_BOTH_DIR_INFO; 
#line 8989
typedef 
#line 8976
struct _FILE_FULL_DIR_INFO { 
#line 8977
ULONG NextEntryOffset; 
#line 8978
ULONG FileIndex; 
#line 8979
LARGE_INTEGER CreationTime; 
#line 8980
LARGE_INTEGER LastAccessTime; 
#line 8981
LARGE_INTEGER LastWriteTime; 
#line 8982
LARGE_INTEGER ChangeTime; 
#line 8983
LARGE_INTEGER EndOfFile; 
#line 8984
LARGE_INTEGER AllocationSize; 
#line 8985
ULONG FileAttributes; 
#line 8986
ULONG FileNameLength; 
#line 8987
ULONG EaSize; 
#line 8988
WCHAR FileName[1]; 
#line 8989
} FILE_FULL_DIR_INFO, *PFILE_FULL_DIR_INFO; 
#line 8996
typedef 
#line 8991
enum _PRIORITY_HINT { 
#line 8992
IoPriorityHintVeryLow, 
#line 8993
IoPriorityHintLow, 
#line 8994
IoPriorityHintNormal, 
#line 8995
MaximumIoPriorityHintType
#line 8996
} PRIORITY_HINT; 
#line 9000
typedef 
#line 8998
struct _FILE_IO_PRIORITY_HINT_INFO { 
#line 8999
PRIORITY_HINT PriorityHint; 
#line 9000
} FILE_IO_PRIORITY_HINT_INFO, *PFILE_IO_PRIORITY_HINT_INFO; 
#line 9008
typedef 
#line 9006
struct _FILE_ALIGNMENT_INFO { 
#line 9007
ULONG AlignmentRequirement; 
#line 9008
} FILE_ALIGNMENT_INFO, *PFILE_ALIGNMENT_INFO; 
#line 9037
typedef 
#line 9029
struct _FILE_STORAGE_INFO { 
#line 9030
ULONG LogicalBytesPerSector; 
#line 9031
ULONG PhysicalBytesPerSectorForAtomicity; 
#line 9032
ULONG PhysicalBytesPerSectorForPerformance; 
#line 9033
ULONG FileSystemEffectivePhysicalBytesPerSectorForAtomicity; 
#line 9034
ULONG Flags; 
#line 9035
ULONG ByteOffsetForSectorAlignment; 
#line 9036
ULONG ByteOffsetForPartitionAlignment; 
#line 9037
} FILE_STORAGE_INFO, *PFILE_STORAGE_INFO; 
#line 9045
typedef 
#line 9042
struct _FILE_ID_INFO { 
#line 9043
ULONGLONG VolumeSerialNumber; 
#line 9044
FILE_ID_128 FileId; 
#line 9045
} FILE_ID_INFO, *PFILE_ID_INFO; 
#line 9065
typedef 
#line 9050
struct _FILE_ID_EXTD_DIR_INFO { 
#line 9051
ULONG NextEntryOffset; 
#line 9052
ULONG FileIndex; 
#line 9053
LARGE_INTEGER CreationTime; 
#line 9054
LARGE_INTEGER LastAccessTime; 
#line 9055
LARGE_INTEGER LastWriteTime; 
#line 9056
LARGE_INTEGER ChangeTime; 
#line 9057
LARGE_INTEGER EndOfFile; 
#line 9058
LARGE_INTEGER AllocationSize; 
#line 9059
ULONG FileAttributes; 
#line 9060
ULONG FileNameLength; 
#line 9061
ULONG EaSize; 
#line 9062
ULONG ReparsePointTag; 
#line 9063
FILE_ID_128 FileId; 
#line 9064
WCHAR FileName[1]; 
#line 9065
} FILE_ID_EXTD_DIR_INFO, *PFILE_ID_EXTD_DIR_INFO; 
#line 9159 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
typedef 
#line 9107 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
struct _FILE_REMOTE_PROTOCOL_INFO { 
#line 9110
USHORT StructureVersion; 
#line 9111
USHORT StructureSize; 
#line 9113
ULONG Protocol; 
#line 9116
USHORT ProtocolMajorVersion; 
#line 9117
USHORT ProtocolMinorVersion; 
#line 9118
USHORT ProtocolRevision; 
#line 9120
USHORT Reserved; 
#line 9123
ULONG Flags; 
#line 9125
struct { 
#line 9126
ULONG Reserved[8]; 
#line 9127
} GenericReserved; 
#line 9138 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
union { 
#line 9140
struct { 
#line 9142
struct { 
#line 9143
ULONG Capabilities; 
#line 9144
} Server; 
#line 9146
struct { 
#line 9147
ULONG Capabilities; 
#line 9148
ULONG CachingFlags; 
#line 9149
} Share; 
#line 9151
} Smb2; 
#line 9153
ULONG Reserved[16]; 
#line 9155
} ProtocolSpecific; 
#line 9159 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
} FILE_REMOTE_PROTOCOL_INFO, *PFILE_REMOTE_PROTOCOL_INFO; 
#line 9161
__declspec(dllimport) BOOL __stdcall 
#line 9164
GetFileInformationByHandleEx(HANDLE hFile, FILE_INFO_BY_HANDLE_CLASS FileInformationClass, LPVOID lpFileInformation, DWORD dwBufferSize); 
#line 9172 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
#pragma endregion
#line 9174
#pragma region Desktop Family or OneCore Family
#line 9182
typedef 
#line 9177
enum _FILE_ID_TYPE { 
#line 9178
FileIdType, 
#line 9179
ObjectIdType, 
#line 9180
ExtendedFileIdType, 
#line 9181
MaximumFileIdType
#line 9182
} FILE_ID_TYPE, *PFILE_ID_TYPE; 
#line 9194 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
typedef 
#line 9184 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
struct FILE_ID_DESCRIPTOR { 
#line 9185
DWORD dwSize; 
#line 9186
FILE_ID_TYPE Type; 
#line 9187
union { 
#line 9188
LARGE_INTEGER FileId; 
#line 9189
GUID ObjectId; 
#line 9191
FILE_ID_128 ExtendedFileId; 
#line 9193 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
}; 
#line 9194
} FILE_ID_DESCRIPTOR, *LPFILE_ID_DESCRIPTOR; 
#line 9196
__declspec(dllimport) HANDLE __stdcall 
#line 9199
OpenFileById(HANDLE hVolumeHint, LPFILE_ID_DESCRIPTOR lpFileId, DWORD dwDesiredAccess, DWORD dwShareMode, LPSECURITY_ATTRIBUTES lpSecurityAttributes, DWORD dwFlagsAndAttributes); 
#line 9209 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
#pragma endregion
#line 9213 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
#pragma region Desktop Family or OneCore Family
#line 9237
__declspec(dllimport) BOOLEAN __stdcall 
#line 9240
CreateSymbolicLinkA(LPCSTR lpSymlinkFileName, LPCSTR lpTargetFileName, DWORD dwFlags); 
#line 9245
__declspec(dllimport) BOOLEAN __stdcall 
#line 9248
CreateSymbolicLinkW(LPCWSTR lpSymlinkFileName, LPCWSTR lpTargetFileName, DWORD dwFlags); 
#line 9263 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
__declspec(dllimport) BOOL __stdcall 
#line 9266
QueryActCtxSettingsW(DWORD dwFlags, HANDLE hActCtx, PCWSTR settingsNameSpace, PCWSTR settingName, PWSTR pvBuffer, SIZE_T dwBuffer, SIZE_T * pdwWrittenOrRequired); 
#line 9279 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
#pragma endregion
#line 9281
#pragma region Desktop Family
#line 9286
__declspec(dllimport) BOOLEAN __stdcall 
#line 9289
CreateSymbolicLinkTransactedA(LPCSTR lpSymlinkFileName, LPCSTR lpTargetFileName, DWORD dwFlags, HANDLE hTransaction); 
#line 9295
__declspec(dllimport) BOOLEAN __stdcall 
#line 9298
CreateSymbolicLinkTransactedW(LPCWSTR lpSymlinkFileName, LPCWSTR lpTargetFileName, DWORD dwFlags, HANDLE hTransaction); 
#line 9314 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
__declspec(dllimport) BOOL __stdcall 
#line 9317
ReplacePartitionUnit(PWSTR TargetPartition, PWSTR SparePartition, ULONG Flags); 
#line 9328 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
__declspec(dllimport) BOOL __stdcall 
#line 9331
AddSecureMemoryCacheCallback(PSECURE_MEMORY_CACHE_CALLBACK pfnCallBack); 
#line 9335
__declspec(dllimport) BOOL __stdcall 
#line 9338
RemoveSecureMemoryCacheCallback(PSECURE_MEMORY_CACHE_CALLBACK pfnCallBack); 
#line 9345 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
#pragma endregion
#line 9349
#pragma region Desktop Family or OneCore Family or Games Family
#line 9353
__declspec(dllimport) BOOL __stdcall 
#line 9356
CopyContext(PCONTEXT Destination, DWORD ContextFlags, PCONTEXT Source); 
#line 9363 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
#pragma endregion
#line 9365
#pragma region Application Family or OneCore Family or Games Family
#line 9369
__declspec(dllimport) BOOL __stdcall 
#line 9372
InitializeContext(PVOID Buffer, DWORD ContextFlags, PCONTEXT * Context, PDWORD ContextLength); 
#line 9380 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
#pragma endregion
#line 9382
#pragma region Application Family or OneCore Family or Games Family
#line 9388
__declspec(dllimport) BOOL __stdcall 
#line 9391
InitializeContext2(PVOID Buffer, DWORD ContextFlags, PCONTEXT * Context, PDWORD ContextLength, ULONG64 XStateCompactionMask); 
#line 9402 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
#pragma endregion
#line 9406
#pragma region Application Family or OneCore Family or Games Family
#line 9409
__declspec(dllimport) DWORD64 __stdcall 
#line 9412
GetEnabledXStateFeatures(); 
#line 9417
__declspec(dllimport) BOOL __stdcall 
#line 9420
GetXStateFeaturesMask(PCONTEXT Context, PDWORD64 FeatureMask); 
#line 9426
__declspec(dllimport) PVOID __stdcall 
#line 9429
LocateXStateFeature(PCONTEXT Context, DWORD FeatureId, PDWORD Length); 
#line 9436
__declspec(dllimport) BOOL __stdcall 
#line 9439
SetXStateFeaturesMask(PCONTEXT Context, DWORD64 FeatureMask); 
#line 9446
__declspec(dllimport) DWORD64 __stdcall 
#line 9449
GetThreadEnabledXStateFeatures(); 
#line 9454
__declspec(dllimport) BOOL __stdcall 
#line 9457
EnableProcessOptionalXStateFeatures(DWORD64 Features); 
#line 9464 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
#pragma endregion
#line 9472 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
#pragma region Desktop Family
#line 9475
__declspec(dllimport) DWORD __stdcall 
#line 9478
EnableThreadProfiling(HANDLE ThreadHandle, DWORD Flags, DWORD64 HardwareCounters, HANDLE * PerformanceDataHandle); 
#line 9485
__declspec(dllimport) DWORD __stdcall 
#line 9488
DisableThreadProfiling(HANDLE PerformanceDataHandle); 
#line 9492
__declspec(dllimport) DWORD __stdcall 
#line 9495
QueryThreadProfiling(HANDLE ThreadHandle, PBOOLEAN Enabled); 
#line 9500
__declspec(dllimport) DWORD __stdcall 
#line 9503
ReadThreadProfilingData(HANDLE PerformanceDataHandle, DWORD Flags, PPERFORMANCE_DATA PerformanceData); 
#line 9510 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
#pragma endregion
#line 9516 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
#pragma region Desktop Family or OneCore Family
#line 9519
__declspec(dllimport) DWORD __stdcall 
#line 9522
RaiseCustomSystemEventTrigger(PCUSTOM_SYSTEM_EVENT_TRIGGER_CONFIG CustomSystemEventTriggerConfig); 
#line 9553 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
}
#line 9527 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
#pragma endregion
#line 9535 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
#pragma region Desktop Family or OneCore Family or Games Family
#line 9540 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
#pragma endregion
#line 9558 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
#pragma warning(pop)
#line 9615 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
extern "C++" {
#line 9619
__forceinline unsigned _InterlockedIncrement(volatile unsigned *
#line 9620
Addend) 
#line 9622
{ 
#line 9623
return (unsigned)_InterlockedIncrement((volatile long *)Addend); 
#line 9624
} 
#line 9628
__forceinline unsigned long _InterlockedIncrement(volatile unsigned long *
#line 9629
Addend) 
#line 9631
{ 
#line 9632
return (unsigned long)_InterlockedIncrement((volatile long *)Addend); 
#line 9633
} 
#line 9640
__forceinline unsigned __int64 _InterlockedIncrement(volatile unsigned __int64 *
#line 9641
Addend) 
#line 9643
{ 
#line 9644
return (unsigned __int64)(_InterlockedIncrement64)((volatile __int64 *)Addend); 
#line 9645
} 
#line 9651 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
__forceinline unsigned _InterlockedDecrement(volatile unsigned *
#line 9652
Addend) 
#line 9654
{ 
#line 9655
return (unsigned long)_InterlockedDecrement((volatile long *)Addend); 
#line 9656
} 
#line 9660
__forceinline unsigned long _InterlockedDecrement(volatile unsigned long *
#line 9661
Addend) 
#line 9663
{ 
#line 9664
return (unsigned long)_InterlockedDecrement((volatile long *)Addend); 
#line 9665
} 
#line 9672
__forceinline unsigned __int64 _InterlockedDecrement(volatile unsigned __int64 *
#line 9673
Addend) 
#line 9675
{ 
#line 9676
return (unsigned __int64)(_InterlockedDecrement64)((volatile __int64 *)Addend); 
#line 9677
} 
#line 9685 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
__forceinline unsigned _InterlockedExchange(volatile unsigned *
#line 9686
Target, unsigned 
#line 9687
Value) 
#line 9689
{ 
#line 9690
return (unsigned)_InterlockedExchange((volatile long *)Target, (long)Value); 
#line 9691
} 
#line 9695
__forceinline unsigned long _InterlockedExchange(volatile unsigned long *
#line 9696
Target, unsigned long 
#line 9697
Value) 
#line 9699
{ 
#line 9700
return (unsigned long)_InterlockedExchange((volatile long *)Target, (long)Value); 
#line 9701
} 
#line 9707
__forceinline unsigned __int64 _InterlockedExchange(volatile unsigned __int64 *
#line 9708
Target, unsigned __int64 
#line 9709
Value) 
#line 9711
{ 
#line 9712
return (unsigned __int64)_InterlockedExchange64((volatile __int64 *)Target, (__int64)Value); 
#line 9713
} 
#line 9719 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
__forceinline unsigned _InterlockedExchangeAdd(volatile unsigned *
#line 9720
Addend, unsigned 
#line 9721
Value) 
#line 9723
{ 
#line 9724
return (unsigned)_InterlockedExchangeAdd((volatile long *)Addend, (long)Value); 
#line 9725
} 
#line 9729
__forceinline unsigned InterlockedExchangeSubtract(volatile unsigned *
#line 9730
Addend, unsigned 
#line 9731
Value) 
#line 9733
{ 
#line 9734
return (unsigned)_InterlockedExchangeAdd((volatile long *)Addend, -((long)Value)); 
#line 9735
} 
#line 9739
__forceinline unsigned long _InterlockedExchangeAdd(volatile unsigned long *
#line 9740
Addend, unsigned long 
#line 9741
Value) 
#line 9743
{ 
#line 9744
return (unsigned long)_InterlockedExchangeAdd((volatile long *)Addend, (long)Value); 
#line 9745
} 
#line 9749
__forceinline unsigned long InterlockedExchangeSubtract(volatile unsigned long *
#line 9750
Addend, unsigned long 
#line 9751
Value) 
#line 9753
{ 
#line 9754
return (unsigned long)_InterlockedExchangeAdd((volatile long *)Addend, -((long)Value)); 
#line 9755
} 
#line 9761
__forceinline unsigned __int64 _InterlockedExchangeAdd(volatile unsigned __int64 *
#line 9762
Addend, unsigned __int64 
#line 9763
Value) 
#line 9765
{ 
#line 9766
return (unsigned __int64)_InterlockedExchangeAdd64((volatile __int64 *)Addend, (__int64)Value); 
#line 9767
} 
#line 9771
__forceinline unsigned __int64 InterlockedExchangeSubtract(volatile unsigned __int64 *
#line 9772
Addend, unsigned __int64 
#line 9773
Value) 
#line 9775
{ 
#line 9776
return (unsigned __int64)_InterlockedExchangeAdd64((volatile __int64 *)Addend, -((__int64)Value)); 
#line 9777
} 
#line 9783 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
__forceinline unsigned _InterlockedCompareExchange(volatile unsigned *
#line 9784
Destination, unsigned 
#line 9785
Exchange, unsigned 
#line 9786
Comperand) 
#line 9788
{ 
#line 9789
return (unsigned)_InterlockedCompareExchange((volatile long *)Destination, (long)Exchange, (long)Comperand); 
#line 9790
} 
#line 9794
__forceinline unsigned long _InterlockedCompareExchange(volatile unsigned long *
#line 9795
Destination, unsigned long 
#line 9796
Exchange, unsigned long 
#line 9797
Comperand) 
#line 9799
{ 
#line 9800
return (unsigned long)_InterlockedCompareExchange((volatile long *)Destination, (long)Exchange, (long)Comperand); 
#line 9801
} 
#line 9807
__forceinline unsigned __int64 _InterlockedCompareExchange(volatile unsigned __int64 *
#line 9808
Destination, unsigned __int64 
#line 9809
Exchange, unsigned __int64 
#line 9810
Comperand) 
#line 9812
{ 
#line 9813
return (unsigned __int64)_InterlockedCompareExchange64((volatile __int64 *)Destination, (__int64)Exchange, (__int64)Comperand); 
#line 9814
} 
#line 9818
__forceinline unsigned __int64 _InterlockedAnd(volatile unsigned __int64 *
#line 9819
Destination, unsigned __int64 
#line 9820
Value) 
#line 9822
{ 
#line 9823
return (unsigned __int64)_InterlockedAnd64((volatile __int64 *)Destination, (__int64)Value); 
#line 9824
} 
#line 9828
__forceinline unsigned __int64 _InterlockedOr(volatile unsigned __int64 *
#line 9829
Destination, unsigned __int64 
#line 9830
Value) 
#line 9832
{ 
#line 9833
return (unsigned __int64)_InterlockedOr64((volatile __int64 *)Destination, (__int64)Value); 
#line 9834
} 
#line 9838
__forceinline unsigned __int64 _InterlockedXor(volatile unsigned __int64 *
#line 9839
Destination, unsigned __int64 
#line 9840
Value) 
#line 9842
{ 
#line 9843
return (unsigned __int64)_InterlockedXor64((volatile __int64 *)Destination, (__int64)Value); 
#line 9844
} 
#line 9850 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winbase.h"
}
#line 18 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\wingdi.h"
#pragma warning(push)
#pragma warning(disable: 4201)
#line 23
#pragma warning(disable: 4820)
#line 52 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\wingdi.h"
extern "C" {
#line 289 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\wingdi.h"
#pragma region Desktop Family
#line 298
typedef 
#line 293
struct _DRAWPATRECT { 
#line 294
POINT ptPosition; 
#line 295
POINT ptSize; 
#line 296
WORD wStyle; 
#line 297
WORD wPattern; 
#line 298
} DRAWPATRECT, *PDRAWPATRECT; 
#line 302 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\wingdi.h"
#pragma endregion
#line 418 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\wingdi.h"
#pragma region Desktop Family
#line 433
typedef 
#line 425
struct _PSINJECTDATA { 
#line 427
DWORD DataBytes; 
#line 428
WORD InjectionPoint; 
#line 429
WORD PageNumber; 
#line 433
} PSINJECTDATA, *PPSINJECTDATA; 
#line 436 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\wingdi.h"
#pragma endregion
#line 506 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\wingdi.h"
#pragma region Desktop Family
#line 518
typedef 
#line 513
struct _PSFEATURE_OUTPUT { 
#line 515
BOOL bPageIndependent; 
#line 516
BOOL bSetPageDevice; 
#line 518
} PSFEATURE_OUTPUT, *PPSFEATURE_OUTPUT; 
#line 532
typedef 
#line 524
struct _PSFEATURE_CUSTPAPER { 
#line 526
LONG lOrientation; 
#line 527
LONG lWidth; 
#line 528
LONG lHeight; 
#line 529
LONG lWidthOffset; 
#line 530
LONG lHeightOffset; 
#line 532
} PSFEATURE_CUSTPAPER, *PPSFEATURE_CUSTPAPER; 
#line 535 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\wingdi.h"
#pragma endregion
#line 590
#pragma region Application Family
#line 601
typedef 
#line 593
struct tagXFORM { 
#line 595
FLOAT eM11; 
#line 596
FLOAT eM12; 
#line 597
FLOAT eM21; 
#line 598
FLOAT eM22; 
#line 599
FLOAT eDx; 
#line 600
FLOAT eDy; 
#line 601
} XFORM, *PXFORM, *LPXFORM; 
#line 613
typedef 
#line 604
struct tagBITMAP { 
#line 606
LONG bmType; 
#line 607
LONG bmWidth; 
#line 608
LONG bmHeight; 
#line 609
LONG bmWidthBytes; 
#line 610
WORD bmPlanes; 
#line 611
WORD bmBitsPixel; 
#line 612
LPVOID bmBits; 
#line 613
} BITMAP, *PBITMAP, *NPBITMAP, *LPBITMAP; 
#line 616 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\wingdi.h"
#pragma endregion
#line 24 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\shared\\pshpack1.h"
#pragma warning(disable:4103)
#line 26
#pragma pack ( push, 1 )
#line 620 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\wingdi.h"
#pragma region Application Family
#line 627
typedef 
#line 623
struct tagRGBTRIPLE { 
#line 624
BYTE rgbtBlue; 
#line 625
BYTE rgbtGreen; 
#line 626
BYTE rgbtRed; 
#line 627
} RGBTRIPLE, *PRGBTRIPLE, *NPRGBTRIPLE, *LPRGBTRIPLE; 
#line 630 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\wingdi.h"
#pragma endregion
#line 27 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\shared\\poppack.h"
#pragma warning(disable:4103)
#line 29
#pragma pack ( pop )
#line 634 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\wingdi.h"
#pragma region Application Family
#line 642
typedef 
#line 637
struct tagRGBQUAD { 
#line 638
BYTE rgbBlue; 
#line 639
BYTE rgbGreen; 
#line 640
BYTE rgbRed; 
#line 641
BYTE rgbReserved; 
#line 642
} RGBQUAD; 
#line 645 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\wingdi.h"
#pragma endregion
#line 647
#pragma region Desktop Family
#line 650
typedef RGBQUAD *LPRGBQUAD; 
#line 653 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\wingdi.h"
#pragma endregion
#line 672
#pragma region Application Family
#line 675
typedef LONG LCSCSTYPE; 
#line 679
typedef LONG LCSGAMUTMATCH; 
#line 707
typedef long FXPT16DOT16, *LPFXPT16DOT16; 
#line 708
typedef long FXPT2DOT30, *LPFXPT2DOT30; 
#line 718
typedef 
#line 713
struct tagCIEXYZ { 
#line 715
FXPT2DOT30 ciexyzX; 
#line 716
FXPT2DOT30 ciexyzY; 
#line 717
FXPT2DOT30 ciexyzZ; 
#line 718
} CIEXYZ; 
#line 721 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\wingdi.h"
#pragma endregion
#line 723
#pragma region Desktop Family
#line 726
typedef CIEXYZ *LPCIEXYZ; 
#line 729 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\wingdi.h"
#pragma endregion
#line 731
#pragma region Application Family
#line 739
typedef 
#line 734
struct tagICEXYZTRIPLE { 
#line 736
CIEXYZ ciexyzRed; 
#line 737
CIEXYZ ciexyzGreen; 
#line 738
CIEXYZ ciexyzBlue; 
#line 739
} CIEXYZTRIPLE; 
#line 742 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\wingdi.h"
#pragma endregion
#line 744
#pragma region Desktop Family
#line 747
typedef CIEXYZTRIPLE *LPCIEXYZTRIPLE; 
#line 750 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\wingdi.h"
#pragma endregion
#line 752
#pragma region Application Family
#line 771
typedef 
#line 760
struct tagLOGCOLORSPACEA { 
#line 761
DWORD lcsSignature; 
#line 762
DWORD lcsVersion; 
#line 763
DWORD lcsSize; 
#line 764
LCSCSTYPE lcsCSType; 
#line 765
LCSGAMUTMATCH lcsIntent; 
#line 766
CIEXYZTRIPLE lcsEndpoints; 
#line 767
DWORD lcsGammaRed; 
#line 768
DWORD lcsGammaGreen; 
#line 769
DWORD lcsGammaBlue; 
#line 770
CHAR lcsFilename[260]; 
#line 771
} LOGCOLORSPACEA, *LPLOGCOLORSPACEA; 
#line 783
typedef 
#line 772
struct tagLOGCOLORSPACEW { 
#line 773
DWORD lcsSignature; 
#line 774
DWORD lcsVersion; 
#line 775
DWORD lcsSize; 
#line 776
LCSCSTYPE lcsCSType; 
#line 777
LCSGAMUTMATCH lcsIntent; 
#line 778
CIEXYZTRIPLE lcsEndpoints; 
#line 779
DWORD lcsGammaRed; 
#line 780
DWORD lcsGammaGreen; 
#line 781
DWORD lcsGammaBlue; 
#line 782
WCHAR lcsFilename[260]; 
#line 783
} LOGCOLORSPACEW, *LPLOGCOLORSPACEW; 
#line 788
typedef LOGCOLORSPACEA LOGCOLORSPACE; 
#line 789
typedef LPLOGCOLORSPACEA LPLOGCOLORSPACE; 
#line 793 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\wingdi.h"
#pragma endregion
#line 797 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\wingdi.h"
#pragma region Desktop Family
#line 807
typedef 
#line 801
struct tagBITMAPCOREHEADER { 
#line 802
DWORD bcSize; 
#line 803
WORD bcWidth; 
#line 804
WORD bcHeight; 
#line 805
WORD bcPlanes; 
#line 806
WORD bcBitCount; 
#line 807
} BITMAPCOREHEADER, *LPBITMAPCOREHEADER, *PBITMAPCOREHEADER; 
#line 810 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\wingdi.h"
#pragma endregion
#line 812
#pragma region Application Family or OneCore Family or Games Family
#line 827
typedef 
#line 815
struct tagBITMAPINFOHEADER { 
#line 816
DWORD biSize; 
#line 817
LONG biWidth; 
#line 818
LONG biHeight; 
#line 819
WORD biPlanes; 
#line 820
WORD biBitCount; 
#line 821
DWORD biCompression; 
#line 822
DWORD biSizeImage; 
#line 823
LONG biXPelsPerMeter; 
#line 824
LONG biYPelsPerMeter; 
#line 825
DWORD biClrUsed; 
#line 826
DWORD biClrImportant; 
#line 827
} BITMAPINFOHEADER, *LPBITMAPINFOHEADER, *PBITMAPINFOHEADER; 
#line 830 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\wingdi.h"
#pragma endregion
#line 834
#pragma region Desktop Family
#line 858
typedef 
#line 837
struct { 
#line 838
DWORD bV4Size; 
#line 839
LONG bV4Width; 
#line 840
LONG bV4Height; 
#line 841
WORD bV4Planes; 
#line 842
WORD bV4BitCount; 
#line 843
DWORD bV4V4Compression; 
#line 844
DWORD bV4SizeImage; 
#line 845
LONG bV4XPelsPerMeter; 
#line 846
LONG bV4YPelsPerMeter; 
#line 847
DWORD bV4ClrUsed; 
#line 848
DWORD bV4ClrImportant; 
#line 849
DWORD bV4RedMask; 
#line 850
DWORD bV4GreenMask; 
#line 851
DWORD bV4BlueMask; 
#line 852
DWORD bV4AlphaMask; 
#line 853
DWORD bV4CSType; 
#line 854
CIEXYZTRIPLE bV4Endpoints; 
#line 855
DWORD bV4GammaRed; 
#line 856
DWORD bV4GammaGreen; 
#line 857
DWORD bV4GammaBlue; 
#line 858
} BITMAPV4HEADER, *LPBITMAPV4HEADER, *PBITMAPV4HEADER; 
#line 861 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\wingdi.h"
#pragma endregion
#line 866 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\wingdi.h"
#pragma region Desktop Family
#line 893
typedef 
#line 868
struct { 
#line 869
DWORD bV5Size; 
#line 870
LONG bV5Width; 
#line 871
LONG bV5Height; 
#line 872
WORD bV5Planes; 
#line 873
WORD bV5BitCount; 
#line 874
DWORD bV5Compression; 
#line 875
DWORD bV5SizeImage; 
#line 876
LONG bV5XPelsPerMeter; 
#line 877
LONG bV5YPelsPerMeter; 
#line 878
DWORD bV5ClrUsed; 
#line 879
DWORD bV5ClrImportant; 
#line 880
DWORD bV5RedMask; 
#line 881
DWORD bV5GreenMask; 
#line 882
DWORD bV5BlueMask; 
#line 883
DWORD bV5AlphaMask; 
#line 884
DWORD bV5CSType; 
#line 885
CIEXYZTRIPLE bV5Endpoints; 
#line 886
DWORD bV5GammaRed; 
#line 887
DWORD bV5GammaGreen; 
#line 888
DWORD bV5GammaBlue; 
#line 889
DWORD bV5Intent; 
#line 890
DWORD bV5ProfileData; 
#line 891
DWORD bV5ProfileSize; 
#line 892
DWORD bV5Reserved; 
#line 893
} BITMAPV5HEADER, *LPBITMAPV5HEADER, *PBITMAPV5HEADER; 
#line 896 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\wingdi.h"
#pragma endregion
#line 913 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\wingdi.h"
#pragma region Application Family
#line 919
typedef 
#line 916
struct tagBITMAPINFO { 
#line 917
BITMAPINFOHEADER bmiHeader; 
#line 918
RGBQUAD bmiColors[1]; 
#line 919
} BITMAPINFO, *LPBITMAPINFO, *PBITMAPINFO; 
#line 922 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\wingdi.h"
#pragma endregion
#line 924
#pragma region Desktop Family
#line 930
typedef 
#line 927
struct tagBITMAPCOREINFO { 
#line 928
BITMAPCOREHEADER bmciHeader; 
#line 929
RGBTRIPLE bmciColors[1]; 
#line 930
} BITMAPCOREINFO, *LPBITMAPCOREINFO, *PBITMAPCOREINFO; 
#line 933 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\wingdi.h"
#pragma endregion
#line 24 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\shared\\pshpack2.h"
#pragma warning(disable:4103)
#line 26
#pragma pack ( push, 2 )
#line 937 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\wingdi.h"
#pragma region Desktop Family
#line 946
typedef 
#line 940
struct tagBITMAPFILEHEADER { 
#line 941
WORD bfType; 
#line 942
DWORD bfSize; 
#line 943
WORD bfReserved1; 
#line 944
WORD bfReserved2; 
#line 945
DWORD bfOffBits; 
#line 946
} BITMAPFILEHEADER, *LPBITMAPFILEHEADER, *PBITMAPFILEHEADER; 
#line 949 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\wingdi.h"
#pragma endregion
#line 27 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\shared\\poppack.h"
#pragma warning(disable:4103)
#line 29
#pragma pack ( pop )
#line 958 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\wingdi.h"
#pragma region Application Family
#line 965
typedef 
#line 961
struct tagFONTSIGNATURE { 
#line 963
DWORD fsUsb[4]; 
#line 964
DWORD fsCsb[2]; 
#line 965
} FONTSIGNATURE, *PFONTSIGNATURE, *LPFONTSIGNATURE; 
#line 968 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\wingdi.h"
#pragma endregion
#line 970
#pragma region Desktop Family
#line 978
typedef 
#line 973
struct tagCHARSETINFO { 
#line 975
UINT ciCharset; 
#line 976
UINT ciACP; 
#line 977
FONTSIGNATURE fs; 
#line 978
} CHARSETINFO, *PCHARSETINFO, *NPCHARSETINFO, *LPCHARSETINFO; 
#line 981 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\wingdi.h"
#pragma endregion
#line 990 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\wingdi.h"
#pragma region Application Family
#line 998
typedef 
#line 993
struct tagLOCALESIGNATURE { 
#line 995
DWORD lsUsb[4]; 
#line 996
DWORD lsCsbDefault[2]; 
#line 997
DWORD lsCsbSupported[2]; 
#line 998
} LOCALESIGNATURE, *PLOCALESIGNATURE, *LPLOCALESIGNATURE; 
#line 1001 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\wingdi.h"
#pragma endregion
#line 1008 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\wingdi.h"
#pragma region Application Family
#line 1016
typedef 
#line 1013
struct tagHANDLETABLE { 
#line 1015
HGDIOBJ objectHandle[1]; 
#line 1016
} HANDLETABLE, *PHANDLETABLE, *LPHANDLETABLE; 
#line 1023
typedef 
#line 1018
struct tagMETARECORD { 
#line 1020
DWORD rdSize; 
#line 1021
WORD rdFunction; 
#line 1022
WORD rdParm[1]; 
#line 1023
} METARECORD; 
#line 1026 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\wingdi.h"
#pragma endregion
#line 1028
#pragma region Desktop Family
#line 1031
typedef __unaligned tagMETARECORD *PMETARECORD; 
#line 1034 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\wingdi.h"
#pragma endregion
#line 1036
#pragma region Application Family
#line 1039
typedef __unaligned tagMETARECORD *LPMETARECORD; 
#line 1047
typedef 
#line 1041
struct tagMETAFILEPICT { 
#line 1043
LONG mm; 
#line 1044
LONG xExt; 
#line 1045
LONG yExt; 
#line 1046
HMETAFILE hMF; 
#line 1047
} METAFILEPICT, *LPMETAFILEPICT; 
#line 1050 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\wingdi.h"
#pragma endregion
#line 24 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\shared\\pshpack2.h"
#pragma warning(disable:4103)
#line 26
#pragma pack ( push, 2 )
#line 1054 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\wingdi.h"
#pragma region Desktop Family
#line 1066
typedef 
#line 1057
struct tagMETAHEADER { 
#line 1059
WORD mtType; 
#line 1060
WORD mtHeaderSize; 
#line 1061
WORD mtVersion; 
#line 1062
DWORD mtSize; 
#line 1063
WORD mtNoObjects; 
#line 1064
DWORD mtMaxRecord; 
#line 1065
WORD mtNoParameters; 
#line 1066
} METAHEADER; 
#line 1067
typedef __unaligned tagMETAHEADER *PMETAHEADER; 
#line 1068
typedef __unaligned tagMETAHEADER *LPMETAHEADER; 
#line 1071 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\wingdi.h"
#pragma endregion
#line 27 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\shared\\poppack.h"
#pragma warning(disable:4103)
#line 29
#pragma pack ( pop )
#line 1075 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\wingdi.h"
#pragma region Application Family
#line 1084
typedef 
#line 1079
struct tagENHMETARECORD { 
#line 1081
DWORD iType; 
#line 1082
DWORD nSize; 
#line 1083
DWORD dParm[1]; 
#line 1084
} ENHMETARECORD, *PENHMETARECORD, *LPENHMETARECORD; 
#line 1119 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\wingdi.h"
typedef 
#line 1086 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\wingdi.h"
struct tagENHMETAHEADER { 
#line 1088
DWORD iType; 
#line 1089
DWORD nSize; 
#line 1091
RECTL rclBounds; 
#line 1092
RECTL rclFrame; 
#line 1093
DWORD dSignature; 
#line 1094
DWORD nVersion; 
#line 1095
DWORD nBytes; 
#line 1096
DWORD nRecords; 
#line 1097
WORD nHandles; 
#line 1099
WORD sReserved; 
#line 1100
DWORD nDescription; 
#line 1102
DWORD offDescription; 
#line 1104
DWORD nPalEntries; 
#line 1105
SIZEL szlDevice; 
#line 1106
SIZEL szlMillimeters; 
#line 1108
DWORD cbPixelFormat; 
#line 1110
DWORD offPixelFormat; 
#line 1112
DWORD bOpenGL; 
#line 1116 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\wingdi.h"
SIZEL szlMicrometers; 
#line 1119 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\wingdi.h"
} ENHMETAHEADER, *PENHMETAHEADER, *LPENHMETAHEADER; 
#line 1122 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\wingdi.h"
#pragma endregion
#line 1134 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\wingdi.h"
#pragma region Desktop Family
#line 1143
typedef BYTE BCHAR; 
#line 1147 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\wingdi.h"
#pragma endregion
#line 24 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\shared\\pshpack4.h"
#pragma warning(disable:4103)
#line 26
#pragma pack ( push, 4 )
#line 1153 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\wingdi.h"
#pragma region Application Family
#line 1178
typedef 
#line 1156
struct tagTEXTMETRICA { 
#line 1158
LONG tmHeight; 
#line 1159
LONG tmAscent; 
#line 1160
LONG tmDescent; 
#line 1161
LONG tmInternalLeading; 
#line 1162
LONG tmExternalLeading; 
#line 1163
LONG tmAveCharWidth; 
#line 1164
LONG tmMaxCharWidth; 
#line 1165
LONG tmWeight; 
#line 1166
LONG tmOverhang; 
#line 1167
LONG tmDigitizedAspectX; 
#line 1168
LONG tmDigitizedAspectY; 
#line 1169
BYTE tmFirstChar; 
#line 1170
BYTE tmLastChar; 
#line 1171
BYTE tmDefaultChar; 
#line 1172
BYTE tmBreakChar; 
#line 1173
BYTE tmItalic; 
#line 1174
BYTE tmUnderlined; 
#line 1175
BYTE tmStruckOut; 
#line 1176
BYTE tmPitchAndFamily; 
#line 1177
BYTE tmCharSet; 
#line 1178
} TEXTMETRICA, *PTEXTMETRICA, *NPTEXTMETRICA, *LPTEXTMETRICA; 
#line 1201
typedef 
#line 1179
struct tagTEXTMETRICW { 
#line 1181
LONG tmHeight; 
#line 1182
LONG tmAscent; 
#line 1183
LONG tmDescent; 
#line 1184
LONG tmInternalLeading; 
#line 1185
LONG tmExternalLeading; 
#line 1186
LONG tmAveCharWidth; 
#line 1187
LONG tmMaxCharWidth; 
#line 1188
LONG tmWeight; 
#line 1189
LONG tmOverhang; 
#line 1190
LONG tmDigitizedAspectX; 
#line 1191
LONG tmDigitizedAspectY; 
#line 1192
WCHAR tmFirstChar; 
#line 1193
WCHAR tmLastChar; 
#line 1194
WCHAR tmDefaultChar; 
#line 1195
WCHAR tmBreakChar; 
#line 1196
BYTE tmItalic; 
#line 1197
BYTE tmUnderlined; 
#line 1198
BYTE tmStruckOut; 
#line 1199
BYTE tmPitchAndFamily; 
#line 1200
BYTE tmCharSet; 
#line 1201
} TEXTMETRICW, *PTEXTMETRICW, *NPTEXTMETRICW, *LPTEXTMETRICW; 
#line 1208
typedef TEXTMETRICA TEXTMETRIC; 
#line 1209
typedef PTEXTMETRICA PTEXTMETRIC; 
#line 1210
typedef NPTEXTMETRICA NPTEXTMETRIC; 
#line 1211
typedef LPTEXTMETRICA LPTEXTMETRIC; 
#line 1215 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\wingdi.h"
#pragma endregion
#line 27 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\shared\\poppack.h"
#pragma warning(disable:4103)
#line 29
#pragma pack ( pop )
#line 24 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\shared\\pshpack4.h"
#pragma warning(disable:4103)
#line 26
#pragma pack ( push, 4 )
#line 1236 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\wingdi.h"
#pragma region Desktop Family
#line 1265
typedef 
#line 1239
struct tagNEWTEXTMETRICA { 
#line 1241
LONG tmHeight; 
#line 1242
LONG tmAscent; 
#line 1243
LONG tmDescent; 
#line 1244
LONG tmInternalLeading; 
#line 1245
LONG tmExternalLeading; 
#line 1246
LONG tmAveCharWidth; 
#line 1247
LONG tmMaxCharWidth; 
#line 1248
LONG tmWeight; 
#line 1249
LONG tmOverhang; 
#line 1250
LONG tmDigitizedAspectX; 
#line 1251
LONG tmDigitizedAspectY; 
#line 1252
BYTE tmFirstChar; 
#line 1253
BYTE tmLastChar; 
#line 1254
BYTE tmDefaultChar; 
#line 1255
BYTE tmBreakChar; 
#line 1256
BYTE tmItalic; 
#line 1257
BYTE tmUnderlined; 
#line 1258
BYTE tmStruckOut; 
#line 1259
BYTE tmPitchAndFamily; 
#line 1260
BYTE tmCharSet; 
#line 1261
DWORD ntmFlags; 
#line 1262
UINT ntmSizeEM; 
#line 1263
UINT ntmCellHeight; 
#line 1264
UINT ntmAvgWidth; 
#line 1265
} NEWTEXTMETRICA, *PNEWTEXTMETRICA, *NPNEWTEXTMETRICA, *LPNEWTEXTMETRICA; 
#line 1292
typedef 
#line 1266
struct tagNEWTEXTMETRICW { 
#line 1268
LONG tmHeight; 
#line 1269
LONG tmAscent; 
#line 1270
LONG tmDescent; 
#line 1271
LONG tmInternalLeading; 
#line 1272
LONG tmExternalLeading; 
#line 1273
LONG tmAveCharWidth; 
#line 1274
LONG tmMaxCharWidth; 
#line 1275
LONG tmWeight; 
#line 1276
LONG tmOverhang; 
#line 1277
LONG tmDigitizedAspectX; 
#line 1278
LONG tmDigitizedAspectY; 
#line 1279
WCHAR tmFirstChar; 
#line 1280
WCHAR tmLastChar; 
#line 1281
WCHAR tmDefaultChar; 
#line 1282
WCHAR tmBreakChar; 
#line 1283
BYTE tmItalic; 
#line 1284
BYTE tmUnderlined; 
#line 1285
BYTE tmStruckOut; 
#line 1286
BYTE tmPitchAndFamily; 
#line 1287
BYTE tmCharSet; 
#line 1288
DWORD ntmFlags; 
#line 1289
UINT ntmSizeEM; 
#line 1290
UINT ntmCellHeight; 
#line 1291
UINT ntmAvgWidth; 
#line 1292
} NEWTEXTMETRICW, *PNEWTEXTMETRICW, *NPNEWTEXTMETRICW, *LPNEWTEXTMETRICW; 
#line 1299
typedef NEWTEXTMETRICA NEWTEXTMETRIC; 
#line 1300
typedef PNEWTEXTMETRICA PNEWTEXTMETRIC; 
#line 1301
typedef NPNEWTEXTMETRICA NPNEWTEXTMETRIC; 
#line 1302
typedef LPNEWTEXTMETRICA LPNEWTEXTMETRIC; 
#line 1306 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\wingdi.h"
#pragma endregion
#line 27 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\shared\\poppack.h"
#pragma warning(disable:4103)
#line 29
#pragma pack ( pop )
#line 1312 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\wingdi.h"
#pragma region Desktop Family
#line 1319
typedef 
#line 1315
struct tagNEWTEXTMETRICEXA { 
#line 1317
NEWTEXTMETRICA ntmTm; 
#line 1318
FONTSIGNATURE ntmFontSig; 
#line 1319
} NEWTEXTMETRICEXA; 
#line 1324
typedef 
#line 1320
struct tagNEWTEXTMETRICEXW { 
#line 1322
NEWTEXTMETRICW ntmTm; 
#line 1323
FONTSIGNATURE ntmFontSig; 
#line 1324
} NEWTEXTMETRICEXW; 
#line 1328
typedef NEWTEXTMETRICEXA NEWTEXTMETRICEX; 
#line 1332 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\wingdi.h"
#pragma endregion
#line 1339 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\wingdi.h"
#pragma region Desktop Family
#line 1349
typedef 
#line 1342
struct tagPELARRAY { 
#line 1344
LONG paXCount; 
#line 1345
LONG paYCount; 
#line 1346
LONG paXExt; 
#line 1347
LONG paYExt; 
#line 1348
BYTE paRGBs; 
#line 1349
} PELARRAY, *PPELARRAY, *NPPELARRAY, *LPPELARRAY; 
#line 1352 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\wingdi.h"
#pragma endregion
#line 1354
#pragma region Application Family
#line 1363
typedef 
#line 1358
struct tagLOGBRUSH { 
#line 1360
UINT lbStyle; 
#line 1361
COLORREF lbColor; 
#line 1362
ULONG_PTR lbHatch; 
#line 1363
} LOGBRUSH, *PLOGBRUSH, *NPLOGBRUSH, *LPLOGBRUSH; 
#line 1370
typedef 
#line 1365
struct tagLOGBRUSH32 { 
#line 1367
UINT lbStyle; 
#line 1368
COLORREF lbColor; 
#line 1369
ULONG lbHatch; 
#line 1370
} LOGBRUSH32, *PLOGBRUSH32, *NPLOGBRUSH32, *LPLOGBRUSH32; 
#line 1373 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\wingdi.h"
#pragma endregion
#line 1375
#pragma region Desktop Family
#line 1378
typedef LOGBRUSH PATTERN; 
#line 1379
typedef PATTERN *PPATTERN; 
#line 1380
typedef PATTERN *NPPATTERN; 
#line 1381
typedef PATTERN *LPPATTERN; 
#line 1384 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\wingdi.h"
#pragma endregion
#line 1386
#pragma region Application Family
#line 1395
typedef 
#line 1390
struct tagLOGPEN { 
#line 1392
UINT lopnStyle; 
#line 1393
POINT lopnWidth; 
#line 1394
COLORREF lopnColor; 
#line 1395
} LOGPEN, *PLOGPEN, *NPLOGPEN, *LPLOGPEN; 
#line 1398 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\wingdi.h"
#pragma endregion
#line 1400
#pragma region Desktop Family
#line 1411
typedef 
#line 1403
struct tagEXTLOGPEN { 
#line 1404
DWORD elpPenStyle; 
#line 1405
DWORD elpWidth; 
#line 1406
UINT elpBrushStyle; 
#line 1407
COLORREF elpColor; 
#line 1408
ULONG_PTR elpHatch; 
#line 1409
DWORD elpNumEntries; 
#line 1410
DWORD elpStyleEntry[1]; 
#line 1411
} EXTLOGPEN, *PEXTLOGPEN, *NPEXTLOGPEN, *LPEXTLOGPEN; 
#line 1414 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\wingdi.h"
#pragma endregion
#line 1416
#pragma region Application Family
#line 1427
typedef 
#line 1419
struct tagEXTLOGPEN32 { 
#line 1420
DWORD elpPenStyle; 
#line 1421
DWORD elpWidth; 
#line 1422
UINT elpBrushStyle; 
#line 1423
COLORREF elpColor; 
#line 1424
ULONG elpHatch; 
#line 1425
DWORD elpNumEntries; 
#line 1426
DWORD elpStyleEntry[1]; 
#line 1427
} EXTLOGPEN32, *PEXTLOGPEN32, *NPEXTLOGPEN32, *LPEXTLOGPEN32; 
#line 1436
typedef 
#line 1431
struct tagPALETTEENTRY { 
#line 1432
BYTE peRed; 
#line 1433
BYTE peGreen; 
#line 1434
BYTE peBlue; 
#line 1435
BYTE peFlags; 
#line 1436
} PALETTEENTRY, *PPALETTEENTRY, *LPPALETTEENTRY; 
#line 1446 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\wingdi.h"
typedef 
#line 1442
struct tagLOGPALETTE { 
#line 1443
WORD palVersion; 
#line 1444
WORD palNumEntries; 
#line 1445
PALETTEENTRY palPalEntry[1]; 
#line 1446
} LOGPALETTE, *PLOGPALETTE, *NPLOGPALETTE, *LPLOGPALETTE; 
#line 1469 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\wingdi.h"
typedef 
#line 1453
struct tagLOGFONTA { 
#line 1455
LONG lfHeight; 
#line 1456
LONG lfWidth; 
#line 1457
LONG lfEscapement; 
#line 1458
LONG lfOrientation; 
#line 1459
LONG lfWeight; 
#line 1460
BYTE lfItalic; 
#line 1461
BYTE lfUnderline; 
#line 1462
BYTE lfStrikeOut; 
#line 1463
BYTE lfCharSet; 
#line 1464
BYTE lfOutPrecision; 
#line 1465
BYTE lfClipPrecision; 
#line 1466
BYTE lfQuality; 
#line 1467
BYTE lfPitchAndFamily; 
#line 1468
CHAR lfFaceName[32]; 
#line 1469
} LOGFONTA, *PLOGFONTA, *NPLOGFONTA, *LPLOGFONTA; 
#line 1486
typedef 
#line 1470
struct tagLOGFONTW { 
#line 1472
LONG lfHeight; 
#line 1473
LONG lfWidth; 
#line 1474
LONG lfEscapement; 
#line 1475
LONG lfOrientation; 
#line 1476
LONG lfWeight; 
#line 1477
BYTE lfItalic; 
#line 1478
BYTE lfUnderline; 
#line 1479
BYTE lfStrikeOut; 
#line 1480
BYTE lfCharSet; 
#line 1481
BYTE lfOutPrecision; 
#line 1482
BYTE lfClipPrecision; 
#line 1483
BYTE lfQuality; 
#line 1484
BYTE lfPitchAndFamily; 
#line 1485
WCHAR lfFaceName[32]; 
#line 1486
} LOGFONTW, *PLOGFONTW, *NPLOGFONTW, *LPLOGFONTW; 
#line 1493
typedef LOGFONTA LOGFONT; 
#line 1494
typedef PLOGFONTA PLOGFONT; 
#line 1495
typedef NPLOGFONTA NPLOGFONT; 
#line 1496
typedef LPLOGFONTA LPLOGFONT; 
#line 1500 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\wingdi.h"
#pragma endregion
#line 1504
#pragma region Desktop Family
#line 1513
typedef 
#line 1508
struct tagENUMLOGFONTA { 
#line 1510
LOGFONTA elfLogFont; 
#line 1511
BYTE elfFullName[64]; 
#line 1512
BYTE elfStyle[32]; 
#line 1513
} ENUMLOGFONTA, *LPENUMLOGFONTA; 
#line 1520
typedef 
#line 1515
struct tagENUMLOGFONTW { 
#line 1517
LOGFONTW elfLogFont; 
#line 1518
WCHAR elfFullName[64]; 
#line 1519
WCHAR elfStyle[32]; 
#line 1520
} ENUMLOGFONTW, *LPENUMLOGFONTW; 
#line 1525
typedef ENUMLOGFONTA ENUMLOGFONT; 
#line 1526
typedef LPENUMLOGFONTA LPENUMLOGFONT; 
#line 1536 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\wingdi.h"
typedef 
#line 1530
struct tagENUMLOGFONTEXA { 
#line 1532
LOGFONTA elfLogFont; 
#line 1533
BYTE elfFullName[64]; 
#line 1534
BYTE elfStyle[32]; 
#line 1535
BYTE elfScript[32]; 
#line 1536
} ENUMLOGFONTEXA, *LPENUMLOGFONTEXA; 
#line 1543
typedef 
#line 1537
struct tagENUMLOGFONTEXW { 
#line 1539
LOGFONTW elfLogFont; 
#line 1540
WCHAR elfFullName[64]; 
#line 1541
WCHAR elfStyle[32]; 
#line 1542
WCHAR elfScript[32]; 
#line 1543
} ENUMLOGFONTEXW, *LPENUMLOGFONTEXW; 
#line 1548
typedef ENUMLOGFONTEXA ENUMLOGFONTEX; 
#line 1549
typedef LPENUMLOGFONTEXA LPENUMLOGFONTEX; 
#line 1554 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\wingdi.h"
#pragma endregion
#line 1683 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\wingdi.h"
#pragma region Application Family
#line 1698
typedef 
#line 1686
struct tagPANOSE { 
#line 1688
BYTE bFamilyType; 
#line 1689
BYTE bSerifStyle; 
#line 1690
BYTE bWeight; 
#line 1691
BYTE bProportion; 
#line 1692
BYTE bContrast; 
#line 1693
BYTE bStrokeVariation; 
#line 1694
BYTE bArmStyle; 
#line 1695
BYTE bLetterform; 
#line 1696
BYTE bMidline; 
#line 1697
BYTE bXHeight; 
#line 1698
} PANOSE, *LPPANOSE; 
#line 1823
typedef 
#line 1812
struct tagEXTLOGFONTA { 
#line 1813
LOGFONTA elfLogFont; 
#line 1814
BYTE elfFullName[64]; 
#line 1815
BYTE elfStyle[32]; 
#line 1816
DWORD elfVersion; 
#line 1817
DWORD elfStyleSize; 
#line 1818
DWORD elfMatch; 
#line 1819
DWORD elfReserved; 
#line 1820
BYTE elfVendorId[4]; 
#line 1821
DWORD elfCulture; 
#line 1822
PANOSE elfPanose; 
#line 1823
} EXTLOGFONTA, *PEXTLOGFONTA, *NPEXTLOGFONTA, *LPEXTLOGFONTA; 
#line 1835
typedef 
#line 1824
struct tagEXTLOGFONTW { 
#line 1825
LOGFONTW elfLogFont; 
#line 1826
WCHAR elfFullName[64]; 
#line 1827
WCHAR elfStyle[32]; 
#line 1828
DWORD elfVersion; 
#line 1829
DWORD elfStyleSize; 
#line 1830
DWORD elfMatch; 
#line 1831
DWORD elfReserved; 
#line 1832
BYTE elfVendorId[4]; 
#line 1833
DWORD elfCulture; 
#line 1834
PANOSE elfPanose; 
#line 1835
} EXTLOGFONTW, *PEXTLOGFONTW, *NPEXTLOGFONTW, *LPEXTLOGFONTW; 
#line 1842
typedef EXTLOGFONTA EXTLOGFONT; 
#line 1843
typedef PEXTLOGFONTA PEXTLOGFONT; 
#line 1844
typedef NPEXTLOGFONTA NPEXTLOGFONT; 
#line 1845
typedef LPEXTLOGFONTA LPEXTLOGFONT; 
#line 1849 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\wingdi.h"
#pragma endregion
#line 2194 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\wingdi.h"
#pragma region Application Family
#line 2251 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\wingdi.h"
typedef 
#line 2198 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\wingdi.h"
struct _devicemodeA { 
#line 2199
BYTE dmDeviceName[32]; 
#line 2200
WORD dmSpecVersion; 
#line 2201
WORD dmDriverVersion; 
#line 2202
WORD dmSize; 
#line 2203
WORD dmDriverExtra; 
#line 2204
DWORD dmFields; 
#line 2205
union { 
#line 2207
struct { 
#line 2208
short dmOrientation; 
#line 2209
short dmPaperSize; 
#line 2210
short dmPaperLength; 
#line 2211
short dmPaperWidth; 
#line 2212
short dmScale; 
#line 2213
short dmCopies; 
#line 2214
short dmDefaultSource; 
#line 2215
short dmPrintQuality; 
#line 2216
}; 
#line 2218
struct { 
#line 2219
POINTL dmPosition; 
#line 2220
DWORD dmDisplayOrientation; 
#line 2221
DWORD dmDisplayFixedOutput; 
#line 2222
}; 
#line 2223
}; 
#line 2224
short dmColor; 
#line 2225
short dmDuplex; 
#line 2226
short dmYResolution; 
#line 2227
short dmTTOption; 
#line 2228
short dmCollate; 
#line 2229
BYTE dmFormName[32]; 
#line 2230
WORD dmLogPixels; 
#line 2231
DWORD dmBitsPerPel; 
#line 2232
DWORD dmPelsWidth; 
#line 2233
DWORD dmPelsHeight; 
#line 2234
union { 
#line 2235
DWORD dmDisplayFlags; 
#line 2236
DWORD dmNup; 
#line 2237
}; 
#line 2238
DWORD dmDisplayFrequency; 
#line 2240
DWORD dmICMMethod; 
#line 2241
DWORD dmICMIntent; 
#line 2242
DWORD dmMediaType; 
#line 2243
DWORD dmDitherType; 
#line 2244
DWORD dmReserved1; 
#line 2245
DWORD dmReserved2; 
#line 2247
DWORD dmPanningWidth; 
#line 2248
DWORD dmPanningHeight; 
#line 2251 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\wingdi.h"
} DEVMODEA, *PDEVMODEA, *NPDEVMODEA, *LPDEVMODEA; 
#line 2305 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\wingdi.h"
typedef 
#line 2252 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\wingdi.h"
struct _devicemodeW { 
#line 2253
WCHAR dmDeviceName[32]; 
#line 2254
WORD dmSpecVersion; 
#line 2255
WORD dmDriverVersion; 
#line 2256
WORD dmSize; 
#line 2257
WORD dmDriverExtra; 
#line 2258
DWORD dmFields; 
#line 2259
union { 
#line 2261
struct { 
#line 2262
short dmOrientation; 
#line 2263
short dmPaperSize; 
#line 2264
short dmPaperLength; 
#line 2265
short dmPaperWidth; 
#line 2266
short dmScale; 
#line 2267
short dmCopies; 
#line 2268
short dmDefaultSource; 
#line 2269
short dmPrintQuality; 
#line 2270
}; 
#line 2272
struct { 
#line 2273
POINTL dmPosition; 
#line 2274
DWORD dmDisplayOrientation; 
#line 2275
DWORD dmDisplayFixedOutput; 
#line 2276
}; 
#line 2277
}; 
#line 2278
short dmColor; 
#line 2279
short dmDuplex; 
#line 2280
short dmYResolution; 
#line 2281
short dmTTOption; 
#line 2282
short dmCollate; 
#line 2283
WCHAR dmFormName[32]; 
#line 2284
WORD dmLogPixels; 
#line 2285
DWORD dmBitsPerPel; 
#line 2286
DWORD dmPelsWidth; 
#line 2287
DWORD dmPelsHeight; 
#line 2288
union { 
#line 2289
DWORD dmDisplayFlags; 
#line 2290
DWORD dmNup; 
#line 2291
}; 
#line 2292
DWORD dmDisplayFrequency; 
#line 2294
DWORD dmICMMethod; 
#line 2295
DWORD dmICMIntent; 
#line 2296
DWORD dmMediaType; 
#line 2297
DWORD dmDitherType; 
#line 2298
DWORD dmReserved1; 
#line 2299
DWORD dmReserved2; 
#line 2301
DWORD dmPanningWidth; 
#line 2302
DWORD dmPanningHeight; 
#line 2305 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\wingdi.h"
} DEVMODEW, *PDEVMODEW, *NPDEVMODEW, *LPDEVMODEW; 
#line 2312
typedef DEVMODEA DEVMODE; 
#line 2313
typedef PDEVMODEA PDEVMODE; 
#line 2314
typedef NPDEVMODEA NPDEVMODE; 
#line 2315
typedef LPDEVMODEA LPDEVMODE; 
#line 2428 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\wingdi.h"
#pragma endregion
#line 2730 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\wingdi.h"
#pragma region Application Family
#line 2740
typedef 
#line 2733
struct _DISPLAY_DEVICEA { 
#line 2734
DWORD cb; 
#line 2735
CHAR DeviceName[32]; 
#line 2736
CHAR DeviceString[128]; 
#line 2737
DWORD StateFlags; 
#line 2738
CHAR DeviceID[128]; 
#line 2739
CHAR DeviceKey[128]; 
#line 2740
} DISPLAY_DEVICEA, *PDISPLAY_DEVICEA, *LPDISPLAY_DEVICEA; 
#line 2748
typedef 
#line 2741
struct _DISPLAY_DEVICEW { 
#line 2742
DWORD cb; 
#line 2743
WCHAR DeviceName[32]; 
#line 2744
WCHAR DeviceString[128]; 
#line 2745
DWORD StateFlags; 
#line 2746
WCHAR DeviceID[128]; 
#line 2747
WCHAR DeviceKey[128]; 
#line 2748
} DISPLAY_DEVICEW, *PDISPLAY_DEVICEW, *LPDISPLAY_DEVICEW; 
#line 2754
typedef DISPLAY_DEVICEA DISPLAY_DEVICE; 
#line 2755
typedef PDISPLAY_DEVICEA PDISPLAY_DEVICE; 
#line 2756
typedef LPDISPLAY_DEVICEA LPDISPLAY_DEVICE; 
#line 2760 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\wingdi.h"
#pragma endregion
#line 2796 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\wingdi.h"
#pragma region Application Family
#line 2803
typedef 
#line 2799
struct DISPLAYCONFIG_RATIONAL { 
#line 2801
UINT32 Numerator; 
#line 2802
UINT32 Denominator; 
#line 2803
} DISPLAYCONFIG_RATIONAL; 
#line 2828
typedef 
#line 2806
enum { 
#line 2807
DISPLAYCONFIG_OUTPUT_TECHNOLOGY_OTHER = (-1), 
#line 2808
DISPLAYCONFIG_OUTPUT_TECHNOLOGY_HD15 = 0, 
#line 2809
DISPLAYCONFIG_OUTPUT_TECHNOLOGY_SVIDEO, 
#line 2810
DISPLAYCONFIG_OUTPUT_TECHNOLOGY_COMPOSITE_VIDEO, 
#line 2811
DISPLAYCONFIG_OUTPUT_TECHNOLOGY_COMPONENT_VIDEO, 
#line 2812
DISPLAYCONFIG_OUTPUT_TECHNOLOGY_DVI, 
#line 2813
DISPLAYCONFIG_OUTPUT_TECHNOLOGY_HDMI, 
#line 2814
DISPLAYCONFIG_OUTPUT_TECHNOLOGY_LVDS, 
#line 2815
DISPLAYCONFIG_OUTPUT_TECHNOLOGY_D_JPN = 8, 
#line 2816
DISPLAYCONFIG_OUTPUT_TECHNOLOGY_SDI, 
#line 2817
DISPLAYCONFIG_OUTPUT_TECHNOLOGY_DISPLAYPORT_EXTERNAL, 
#line 2818
DISPLAYCONFIG_OUTPUT_TECHNOLOGY_DISPLAYPORT_EMBEDDED, 
#line 2819
DISPLAYCONFIG_OUTPUT_TECHNOLOGY_UDI_EXTERNAL, 
#line 2820
DISPLAYCONFIG_OUTPUT_TECHNOLOGY_UDI_EMBEDDED, 
#line 2821
DISPLAYCONFIG_OUTPUT_TECHNOLOGY_SDTVDONGLE, 
#line 2822
DISPLAYCONFIG_OUTPUT_TECHNOLOGY_MIRACAST, 
#line 2823
DISPLAYCONFIG_OUTPUT_TECHNOLOGY_INDIRECT_WIRED, 
#line 2824
DISPLAYCONFIG_OUTPUT_TECHNOLOGY_INDIRECT_VIRTUAL, 
#line 2825
DISPLAYCONFIG_OUTPUT_TECHNOLOGY_DISPLAYPORT_USB_TUNNEL, 
#line 2826
DISPLAYCONFIG_OUTPUT_TECHNOLOGY_INTERNAL = (-2147483647-1), 
#line 2827
DISPLAYCONFIG_OUTPUT_TECHNOLOGY_FORCE_UINT32 = (-1)
#line 2828
} DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY; 
#line 2838
typedef 
#line 2831
enum { 
#line 2832
DISPLAYCONFIG_SCANLINE_ORDERING_UNSPECIFIED, 
#line 2833
DISPLAYCONFIG_SCANLINE_ORDERING_PROGRESSIVE, 
#line 2834
DISPLAYCONFIG_SCANLINE_ORDERING_INTERLACED, 
#line 2835
DISPLAYCONFIG_SCANLINE_ORDERING_INTERLACED_UPPERFIELDFIRST = DISPLAYCONFIG_SCANLINE_ORDERING_INTERLACED, 
#line 2836
DISPLAYCONFIG_SCANLINE_ORDERING_INTERLACED_LOWERFIELDFIRST, 
#line 2837
DISPLAYCONFIG_SCANLINE_ORDERING_FORCE_UINT32 = (-1)
#line 2838
} DISPLAYCONFIG_SCANLINE_ORDERING; 
#line 2844
typedef 
#line 2840
struct DISPLAYCONFIG_2DREGION { 
#line 2842
UINT32 cx; 
#line 2843
UINT32 cy; 
#line 2844
} DISPLAYCONFIG_2DREGION; 
#line 2871
typedef 
#line 2846
struct DISPLAYCONFIG_VIDEO_SIGNAL_INFO { 
#line 2848
UINT64 pixelRate; 
#line 2849
DISPLAYCONFIG_RATIONAL hSyncFreq; 
#line 2850
DISPLAYCONFIG_RATIONAL vSyncFreq; 
#line 2851
DISPLAYCONFIG_2DREGION activeSize; 
#line 2852
DISPLAYCONFIG_2DREGION totalSize; 
#line 2855
union { 
#line 2857
struct { 
#line 2858
UINT32 videoStandard:16; 
#line 2861
UINT32 vSyncFreqDivider:6; 
#line 2863
UINT32 reserved:10; 
#line 2864
} AdditionalSignalInfo; 
#line 2866
UINT32 videoStandard; 
#line 2867
}; 
#line 2870
DISPLAYCONFIG_SCANLINE_ORDERING scanLineOrdering; 
#line 2871
} DISPLAYCONFIG_VIDEO_SIGNAL_INFO; 
#line 2882
typedef 
#line 2874
enum { 
#line 2875
DISPLAYCONFIG_SCALING_IDENTITY = 1, 
#line 2876
DISPLAYCONFIG_SCALING_CENTERED, 
#line 2877
DISPLAYCONFIG_SCALING_STRETCHED, 
#line 2878
DISPLAYCONFIG_SCALING_ASPECTRATIOCENTEREDMAX, 
#line 2879
DISPLAYCONFIG_SCALING_CUSTOM, 
#line 2880
DISPLAYCONFIG_SCALING_PREFERRED = 128, 
#line 2881
DISPLAYCONFIG_SCALING_FORCE_UINT32 = (-1)
#line 2882
} DISPLAYCONFIG_SCALING; 
#line 2891
typedef 
#line 2885
enum { 
#line 2886
DISPLAYCONFIG_ROTATION_IDENTITY = 1, 
#line 2887
DISPLAYCONFIG_ROTATION_ROTATE90, 
#line 2888
DISPLAYCONFIG_ROTATION_ROTATE180, 
#line 2889
DISPLAYCONFIG_ROTATION_ROTATE270, 
#line 2890
DISPLAYCONFIG_ROTATION_FORCE_UINT32 = (-1)
#line 2891
} DISPLAYCONFIG_ROTATION; 
#line 2899
typedef 
#line 2894
enum { 
#line 2895
DISPLAYCONFIG_MODE_INFO_TYPE_SOURCE = 1, 
#line 2896
DISPLAYCONFIG_MODE_INFO_TYPE_TARGET, 
#line 2897
DISPLAYCONFIG_MODE_INFO_TYPE_DESKTOP_IMAGE, 
#line 2898
DISPLAYCONFIG_MODE_INFO_TYPE_FORCE_UINT32 = (-1)
#line 2899
} DISPLAYCONFIG_MODE_INFO_TYPE; 
#line 2909
typedef 
#line 2902
enum { 
#line 2903
DISPLAYCONFIG_PIXELFORMAT_8BPP = 1, 
#line 2904
DISPLAYCONFIG_PIXELFORMAT_16BPP, 
#line 2905
DISPLAYCONFIG_PIXELFORMAT_24BPP, 
#line 2906
DISPLAYCONFIG_PIXELFORMAT_32BPP, 
#line 2907
DISPLAYCONFIG_PIXELFORMAT_NONGDI, 
#line 2908
DISPLAYCONFIG_PIXELFORMAT_FORCE_UINT32 = (-1)
#line 2909
} DISPLAYCONFIG_PIXELFORMAT; 
#line 2917
typedef 
#line 2911
struct DISPLAYCONFIG_SOURCE_MODE { 
#line 2913
UINT32 width; 
#line 2914
UINT32 height; 
#line 2915
DISPLAYCONFIG_PIXELFORMAT pixelFormat; 
#line 2916
POINTL position; 
#line 2917
} DISPLAYCONFIG_SOURCE_MODE; 
#line 2922
typedef 
#line 2919
struct DISPLAYCONFIG_TARGET_MODE { 
#line 2921
DISPLAYCONFIG_VIDEO_SIGNAL_INFO targetVideoSignalInfo; 
#line 2922
} DISPLAYCONFIG_TARGET_MODE; 
#line 2929
typedef 
#line 2924
struct DISPLAYCONFIG_DESKTOP_IMAGE_INFO { 
#line 2926
POINTL PathSourceSize; 
#line 2927
RECTL DesktopImageRegion; 
#line 2928
RECTL DesktopImageClip; 
#line 2929
} DISPLAYCONFIG_DESKTOP_IMAGE_INFO; 
#line 2942
typedef 
#line 2931
struct DISPLAYCONFIG_MODE_INFO { 
#line 2933
DISPLAYCONFIG_MODE_INFO_TYPE infoType; 
#line 2934
UINT32 id; 
#line 2935
LUID adapterId; 
#line 2937
union { 
#line 2938
DISPLAYCONFIG_TARGET_MODE targetMode; 
#line 2939
DISPLAYCONFIG_SOURCE_MODE sourceMode; 
#line 2940
DISPLAYCONFIG_DESKTOP_IMAGE_INFO desktopImageInfo; 
#line 2941
}; 
#line 2942
} DISPLAYCONFIG_MODE_INFO; 
#line 2965
typedef 
#line 2950
struct DISPLAYCONFIG_PATH_SOURCE_INFO { 
#line 2952
LUID adapterId; 
#line 2953
UINT32 id; 
#line 2955
union { 
#line 2956
UINT32 modeInfoIdx; 
#line 2958
struct { 
#line 2959
UINT32 cloneGroupId:16; 
#line 2960
UINT32 sourceModeInfoIdx:16; 
#line 2961
}; 
#line 2962
}; 
#line 2964
UINT32 statusFlags; 
#line 2965
} DISPLAYCONFIG_PATH_SOURCE_INFO; 
#line 2993
typedef 
#line 2973
struct DISPLAYCONFIG_PATH_TARGET_INFO { 
#line 2975
LUID adapterId; 
#line 2976
UINT32 id; 
#line 2978
union { 
#line 2979
UINT32 modeInfoIdx; 
#line 2981
struct { 
#line 2982
UINT32 desktopModeInfoIdx:16; 
#line 2983
UINT32 targetModeInfoIdx:16; 
#line 2984
}; 
#line 2985
}; 
#line 2986
DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY outputTechnology; 
#line 2987
DISPLAYCONFIG_ROTATION rotation; 
#line 2988
DISPLAYCONFIG_SCALING scaling; 
#line 2989
DISPLAYCONFIG_RATIONAL refreshRate; 
#line 2990
DISPLAYCONFIG_SCANLINE_ORDERING scanLineOrdering; 
#line 2991
BOOL targetAvailable; 
#line 2992
UINT32 statusFlags; 
#line 2993
} DISPLAYCONFIG_PATH_TARGET_INFO; 
#line 3010
typedef 
#line 3005
struct DISPLAYCONFIG_PATH_INFO { 
#line 3007
DISPLAYCONFIG_PATH_SOURCE_INFO sourceInfo; 
#line 3008
DISPLAYCONFIG_PATH_TARGET_INFO targetInfo; 
#line 3009
UINT32 flags; 
#line 3010
} DISPLAYCONFIG_PATH_INFO; 
#line 3028
typedef 
#line 3021
enum DISPLAYCONFIG_TOPOLOGY_ID { 
#line 3023
DISPLAYCONFIG_TOPOLOGY_INTERNAL = 1, 
#line 3024
DISPLAYCONFIG_TOPOLOGY_CLONE, 
#line 3025
DISPLAYCONFIG_TOPOLOGY_EXTEND = 4, 
#line 3026
DISPLAYCONFIG_TOPOLOGY_EXTERNAL = 8, 
#line 3027
DISPLAYCONFIG_TOPOLOGY_FORCE_UINT32 = (-1)
#line 3028
} DISPLAYCONFIG_TOPOLOGY_ID; 
#line 3047
typedef 
#line 3032
enum { 
#line 3033
DISPLAYCONFIG_DEVICE_INFO_GET_SOURCE_NAME = 1, 
#line 3034
DISPLAYCONFIG_DEVICE_INFO_GET_TARGET_NAME, 
#line 3035
DISPLAYCONFIG_DEVICE_INFO_GET_TARGET_PREFERRED_MODE, 
#line 3036
DISPLAYCONFIG_DEVICE_INFO_GET_ADAPTER_NAME, 
#line 3037
DISPLAYCONFIG_DEVICE_INFO_SET_TARGET_PERSISTENCE, 
#line 3038
DISPLAYCONFIG_DEVICE_INFO_GET_TARGET_BASE_TYPE, 
#line 3039
DISPLAYCONFIG_DEVICE_INFO_GET_SUPPORT_VIRTUAL_RESOLUTION, 
#line 3040
DISPLAYCONFIG_DEVICE_INFO_SET_SUPPORT_VIRTUAL_RESOLUTION, 
#line 3041
DISPLAYCONFIG_DEVICE_INFO_GET_ADVANCED_COLOR_INFO, 
#line 3042
DISPLAYCONFIG_DEVICE_INFO_SET_ADVANCED_COLOR_STATE, 
#line 3043
DISPLAYCONFIG_DEVICE_INFO_GET_SDR_WHITE_LEVEL, 
#line 3044
DISPLAYCONFIG_DEVICE_INFO_GET_MONITOR_SPECIALIZATION, 
#line 3045
DISPLAYCONFIG_DEVICE_INFO_SET_MONITOR_SPECIALIZATION, 
#line 3046
DISPLAYCONFIG_DEVICE_INFO_FORCE_UINT32 = (-1)
#line 3047
} DISPLAYCONFIG_DEVICE_INFO_TYPE; 
#line 3051 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\wingdi.h"
#pragma endregion
#line 3054
#pragma region Application Family
#line 3063
typedef 
#line 3057
struct DISPLAYCONFIG_DEVICE_INFO_HEADER { 
#line 3059
DISPLAYCONFIG_DEVICE_INFO_TYPE type; 
#line 3060
UINT32 size; 
#line 3061
LUID adapterId; 
#line 3062
UINT32 id; 
#line 3063
} DISPLAYCONFIG_DEVICE_INFO_HEADER; 
#line 3066 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\wingdi.h"
#pragma endregion
#line 3068
#pragma region Desktop Family
#line 3075
typedef 
#line 3071
struct DISPLAYCONFIG_SOURCE_DEVICE_NAME { 
#line 3073
DISPLAYCONFIG_DEVICE_INFO_HEADER header; 
#line 3074
WCHAR viewGdiDeviceName[32]; 
#line 3075
} DISPLAYCONFIG_SOURCE_DEVICE_NAME; 
#line 3090
typedef 
#line 3077
struct DISPLAYCONFIG_TARGET_DEVICE_NAME_FLAGS { 
#line 3080
union { 
#line 3082
struct { 
#line 3083
UINT32 friendlyNameFromEdid:1; 
#line 3084
UINT32 friendlyNameForced:1; 
#line 3085
UINT32 edidIdsValid:1; 
#line 3086
UINT32 reserved:29; 
#line 3087
}; 
#line 3088
UINT32 value; 
#line 3089
}; 
#line 3090
} DISPLAYCONFIG_TARGET_DEVICE_NAME_FLAGS; 
#line 3102
typedef 
#line 3092
struct DISPLAYCONFIG_TARGET_DEVICE_NAME { 
#line 3094
DISPLAYCONFIG_DEVICE_INFO_HEADER header; 
#line 3095
DISPLAYCONFIG_TARGET_DEVICE_NAME_FLAGS flags; 
#line 3096
DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY outputTechnology; 
#line 3097
UINT16 edidManufactureId; 
#line 3098
UINT16 edidProductCodeId; 
#line 3099
UINT32 connectorInstance; 
#line 3100
WCHAR monitorFriendlyDeviceName[64]; 
#line 3101
WCHAR monitorDevicePath[128]; 
#line 3102
} DISPLAYCONFIG_TARGET_DEVICE_NAME; 
#line 3110
typedef 
#line 3104
struct DISPLAYCONFIG_TARGET_PREFERRED_MODE { 
#line 3106
DISPLAYCONFIG_DEVICE_INFO_HEADER header; 
#line 3107
UINT32 width; 
#line 3108
UINT32 height; 
#line 3109
DISPLAYCONFIG_TARGET_MODE targetMode; 
#line 3110
} DISPLAYCONFIG_TARGET_PREFERRED_MODE; 
#line 3116
typedef 
#line 3112
struct DISPLAYCONFIG_ADAPTER_NAME { 
#line 3114
DISPLAYCONFIG_DEVICE_INFO_HEADER header; 
#line 3115
WCHAR adapterDevicePath[128]; 
#line 3116
} DISPLAYCONFIG_ADAPTER_NAME; 
#line 3121
typedef 
#line 3118
struct DISPLAYCONFIG_TARGET_BASE_TYPE { 
#line 3119
DISPLAYCONFIG_DEVICE_INFO_HEADER header; 
#line 3120
DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY baseOutputTechnology; 
#line 3121
} DISPLAYCONFIG_TARGET_BASE_TYPE; 
#line 3136
typedef 
#line 3124
struct DISPLAYCONFIG_SET_TARGET_PERSISTENCE { 
#line 3126
DISPLAYCONFIG_DEVICE_INFO_HEADER header; 
#line 3128
union { 
#line 3130
struct { 
#line 3131
UINT32 bootPersistenceOn:1; 
#line 3132
UINT32 reserved:31; 
#line 3133
}; 
#line 3134
UINT32 value; 
#line 3135
}; 
#line 3136
} DISPLAYCONFIG_SET_TARGET_PERSISTENCE; 
#line 3150
typedef 
#line 3138
struct DISPLAYCONFIG_SUPPORT_VIRTUAL_RESOLUTION { 
#line 3140
DISPLAYCONFIG_DEVICE_INFO_HEADER header; 
#line 3142
union { 
#line 3144
struct { 
#line 3145
UINT32 disableMonitorVirtualResolution:1; 
#line 3146
UINT32 reserved:31; 
#line 3147
}; 
#line 3148
UINT32 value; 
#line 3149
}; 
#line 3150
} DISPLAYCONFIG_SUPPORT_VIRTUAL_RESOLUTION; 
#line 3160
typedef 
#line 3152
enum _DISPLAYCONFIG_COLOR_ENCODING { 
#line 3154
DISPLAYCONFIG_COLOR_ENCODING_RGB, 
#line 3155
DISPLAYCONFIG_COLOR_ENCODING_YCBCR444, 
#line 3156
DISPLAYCONFIG_COLOR_ENCODING_YCBCR422, 
#line 3157
DISPLAYCONFIG_COLOR_ENCODING_YCBCR420, 
#line 3158
DISPLAYCONFIG_COLOR_ENCODING_INTENSITY, 
#line 3159
DISPLAYCONFIG_COLOR_ENCODING_FORCE_UINT32 = (-1)
#line 3160
} DISPLAYCONFIG_COLOR_ENCODING; 
#line 3181
typedef 
#line 3162
struct _DISPLAYCONFIG_GET_ADVANCED_COLOR_INFO { 
#line 3164
DISPLAYCONFIG_DEVICE_INFO_HEADER header; 
#line 3166
union { 
#line 3168
struct { 
#line 3169
UINT32 advancedColorSupported:1; 
#line 3170
UINT32 advancedColorEnabled:1; 
#line 3171
UINT32 wideColorEnforced:1; 
#line 3172
UINT32 advancedColorForceDisabled:1; 
#line 3173
UINT32 reserved:28; 
#line 3174
}; 
#line 3176
UINT32 value; 
#line 3177
}; 
#line 3179
DISPLAYCONFIG_COLOR_ENCODING colorEncoding; 
#line 3180
UINT32 bitsPerColorChannel; 
#line 3181
} DISPLAYCONFIG_GET_ADVANCED_COLOR_INFO; 
#line 3196
typedef 
#line 3183
struct _DISPLAYCONFIG_SET_ADVANCED_COLOR_STATE { 
#line 3185
DISPLAYCONFIG_DEVICE_INFO_HEADER header; 
#line 3187
union { 
#line 3189
struct { 
#line 3190
UINT32 enableAdvancedColor:1; 
#line 3191
UINT32 reserved:31; 
#line 3192
}; 
#line 3194
UINT32 value; 
#line 3195
}; 
#line 3196
} DISPLAYCONFIG_SET_ADVANCED_COLOR_STATE; 
#line 3207
typedef 
#line 3198
struct _DISPLAYCONFIG_SDR_WHITE_LEVEL { 
#line 3200
DISPLAYCONFIG_DEVICE_INFO_HEADER header; 
#line 3206
ULONG SDRWhiteLevel; 
#line 3207
} DISPLAYCONFIG_SDR_WHITE_LEVEL; 
#line 3223
typedef 
#line 3209
struct _DISPLAYCONFIG_GET_MONITOR_SPECIALIZATION { 
#line 3211
DISPLAYCONFIG_DEVICE_INFO_HEADER header; 
#line 3213
union { 
#line 3215
struct { 
#line 3216
UINT32 isSpecializationEnabled:1; 
#line 3217
UINT32 isSpecializationAvailableForMonitor:1; 
#line 3218
UINT32 isSpecializationAvailableForSystem:1; 
#line 3219
UINT32 reserved:29; 
#line 3220
}; 
#line 3221
UINT32 value; 
#line 3222
}; 
#line 3223
} DISPLAYCONFIG_GET_MONITOR_SPECIALIZATION; 
#line 3242
typedef 
#line 3225
struct _DISPLAYCONFIG_SET_MONITOR_SPECIALIZATION { 
#line 3227
DISPLAYCONFIG_DEVICE_INFO_HEADER header; 
#line 3229
union { 
#line 3231
struct { 
#line 3232
UINT32 isSpecializationEnabled:1; 
#line 3233
UINT32 reserved:31; 
#line 3234
}; 
#line 3235
UINT32 value; 
#line 3236
}; 
#line 3238
GUID specializationType; 
#line 3239
GUID specializationSubType; 
#line 3241
WCHAR specializationApplicationName[128]; 
#line 3242
} DISPLAYCONFIG_SET_MONITOR_SPECIALIZATION; 
#line 3245 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\wingdi.h"
#pragma endregion
#line 3291 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\wingdi.h"
#pragma region Application Family
#line 3300
typedef 
#line 3294
struct _RGNDATAHEADER { 
#line 3295
DWORD dwSize; 
#line 3296
DWORD iType; 
#line 3297
DWORD nCount; 
#line 3298
DWORD nRgnSize; 
#line 3299
RECT rcBound; 
#line 3300
} RGNDATAHEADER, *PRGNDATAHEADER; 
#line 3305
typedef 
#line 3302
struct _RGNDATA { 
#line 3303
RGNDATAHEADER rdh; 
#line 3304
char Buffer[1]; 
#line 3305
} RGNDATA, *PRGNDATA, *NPRGNDATA, *LPRGNDATA; 
#line 3308 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\wingdi.h"
#pragma endregion
#line 3315
#pragma region Desktop Family
#line 3322
typedef 
#line 3318
struct _ABC { 
#line 3319
int abcA; 
#line 3320
UINT abcB; 
#line 3321
int abcC; 
#line 3322
} ABC, *PABC, *NPABC, *LPABC; 
#line 3328
typedef 
#line 3324
struct _ABCFLOAT { 
#line 3325
FLOAT abcfA; 
#line 3326
FLOAT abcfB; 
#line 3327
FLOAT abcfC; 
#line 3328
} ABCFLOAT, *PABCFLOAT, *NPABCFLOAT, *LPABCFLOAT; 
#line 3331 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\wingdi.h"
#pragma endregion
#line 3339
#pragma region Desktop Family
#line 3375
typedef 
#line 3342
struct _OUTLINETEXTMETRICA { 
#line 3343
UINT otmSize; 
#line 3344
TEXTMETRICA otmTextMetrics; 
#line 3345
BYTE otmFiller; 
#line 3346
PANOSE otmPanoseNumber; 
#line 3347
UINT otmfsSelection; 
#line 3348
UINT otmfsType; 
#line 3349
int otmsCharSlopeRise; 
#line 3350
int otmsCharSlopeRun; 
#line 3351
int otmItalicAngle; 
#line 3352
UINT otmEMSquare; 
#line 3353
int otmAscent; 
#line 3354
int otmDescent; 
#line 3355
UINT otmLineGap; 
#line 3356
UINT otmsCapEmHeight; 
#line 3357
UINT otmsXHeight; 
#line 3358
RECT otmrcFontBox; 
#line 3359
int otmMacAscent; 
#line 3360
int otmMacDescent; 
#line 3361
UINT otmMacLineGap; 
#line 3362
UINT otmusMinimumPPEM; 
#line 3363
POINT otmptSubscriptSize; 
#line 3364
POINT otmptSubscriptOffset; 
#line 3365
POINT otmptSuperscriptSize; 
#line 3366
POINT otmptSuperscriptOffset; 
#line 3367
UINT otmsStrikeoutSize; 
#line 3368
int otmsStrikeoutPosition; 
#line 3369
int otmsUnderscoreSize; 
#line 3370
int otmsUnderscorePosition; 
#line 3371
PSTR otmpFamilyName; 
#line 3372
PSTR otmpFaceName; 
#line 3373
PSTR otmpStyleName; 
#line 3374
PSTR otmpFullName; 
#line 3375
} OUTLINETEXTMETRICA, *POUTLINETEXTMETRICA, *NPOUTLINETEXTMETRICA, *LPOUTLINETEXTMETRICA; 
#line 3409
typedef 
#line 3376
struct _OUTLINETEXTMETRICW { 
#line 3377
UINT otmSize; 
#line 3378
TEXTMETRICW otmTextMetrics; 
#line 3379
BYTE otmFiller; 
#line 3380
PANOSE otmPanoseNumber; 
#line 3381
UINT otmfsSelection; 
#line 3382
UINT otmfsType; 
#line 3383
int otmsCharSlopeRise; 
#line 3384
int otmsCharSlopeRun; 
#line 3385
int otmItalicAngle; 
#line 3386
UINT otmEMSquare; 
#line 3387
int otmAscent; 
#line 3388
int otmDescent; 
#line 3389
UINT otmLineGap; 
#line 3390
UINT otmsCapEmHeight; 
#line 3391
UINT otmsXHeight; 
#line 3392
RECT otmrcFontBox; 
#line 3393
int otmMacAscent; 
#line 3394
int otmMacDescent; 
#line 3395
UINT otmMacLineGap; 
#line 3396
UINT otmusMinimumPPEM; 
#line 3397
POINT otmptSubscriptSize; 
#line 3398
POINT otmptSubscriptOffset; 
#line 3399
POINT otmptSuperscriptSize; 
#line 3400
POINT otmptSuperscriptOffset; 
#line 3401
UINT otmsStrikeoutSize; 
#line 3402
int otmsStrikeoutPosition; 
#line 3403
int otmsUnderscoreSize; 
#line 3404
int otmsUnderscorePosition; 
#line 3405
PSTR otmpFamilyName; 
#line 3406
PSTR otmpFaceName; 
#line 3407
PSTR otmpStyleName; 
#line 3408
PSTR otmpFullName; 
#line 3409
} OUTLINETEXTMETRICW, *POUTLINETEXTMETRICW, *NPOUTLINETEXTMETRICW, *LPOUTLINETEXTMETRICW; 
#line 3416
typedef OUTLINETEXTMETRICA OUTLINETEXTMETRIC; 
#line 3417
typedef POUTLINETEXTMETRICA POUTLINETEXTMETRIC; 
#line 3418
typedef NPOUTLINETEXTMETRICA NPOUTLINETEXTMETRIC; 
#line 3419
typedef LPOUTLINETEXTMETRICA LPOUTLINETEXTMETRIC; 
#line 3423 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\wingdi.h"
#pragma endregion
#line 3431 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\wingdi.h"
#pragma region Application Family
#line 3443
typedef 
#line 3434
struct tagPOLYTEXTA { 
#line 3436
int x; 
#line 3437
int y; 
#line 3438
UINT n; 
#line 3439
LPCSTR lpstr; 
#line 3440
UINT uiFlags; 
#line 3441
RECT rcl; 
#line 3442
int *pdx; 
#line 3443
} POLYTEXTA, *PPOLYTEXTA, *NPPOLYTEXTA, *LPPOLYTEXTA; 
#line 3453
typedef 
#line 3444
struct tagPOLYTEXTW { 
#line 3446
int x; 
#line 3447
int y; 
#line 3448
UINT n; 
#line 3449
LPCWSTR lpstr; 
#line 3450
UINT uiFlags; 
#line 3451
RECT rcl; 
#line 3452
int *pdx; 
#line 3453
} POLYTEXTW, *PPOLYTEXTW, *NPPOLYTEXTW, *LPPOLYTEXTW; 
#line 3460
typedef POLYTEXTA POLYTEXT; 
#line 3461
typedef PPOLYTEXTA PPOLYTEXT; 
#line 3462
typedef NPPOLYTEXTA NPPOLYTEXT; 
#line 3463
typedef LPPOLYTEXTA LPPOLYTEXT; 
#line 3467 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\wingdi.h"
#pragma endregion
#line 3469
#pragma region Desktop Family
#line 3480 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\wingdi.h"
typedef 
#line 3472 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\wingdi.h"
struct _FIXED { 
#line 3474
WORD fract; 
#line 3475
short value; 
#line 3480 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\wingdi.h"
} FIXED; 
#line 3488
typedef 
#line 3483
struct _MAT2 { 
#line 3484
FIXED eM11; 
#line 3485
FIXED eM12; 
#line 3486
FIXED eM21; 
#line 3487
FIXED eM22; 
#line 3488
} MAT2, *LPMAT2; 
#line 3498
typedef 
#line 3492
struct _GLYPHMETRICS { 
#line 3493
UINT gmBlackBoxX; 
#line 3494
UINT gmBlackBoxY; 
#line 3495
POINT gmptGlyphOrigin; 
#line 3496
short gmCellIncX; 
#line 3497
short gmCellIncY; 
#line 3498
} GLYPHMETRICS, *LPGLYPHMETRICS; 
#line 3501 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\wingdi.h"
#pragma endregion
#line 3527 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\wingdi.h"
#pragma region Desktop Family
#line 3534
typedef 
#line 3530
struct tagPOINTFX { 
#line 3532
FIXED x; 
#line 3533
FIXED y; 
#line 3534
} POINTFX, *LPPOINTFX; 
#line 3541
typedef 
#line 3536
struct tagTTPOLYCURVE { 
#line 3538
WORD wType; 
#line 3539
WORD cpfx; 
#line 3540
POINTFX apfx[1]; 
#line 3541
} TTPOLYCURVE, *LPTTPOLYCURVE; 
#line 3548
typedef 
#line 3543
struct tagTTPOLYGONHEADER { 
#line 3545
DWORD cb; 
#line 3546
DWORD dwType; 
#line 3547
POINTFX pfxStart; 
#line 3548
} TTPOLYGONHEADER, *LPTTPOLYGONHEADER; 
#line 3551 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\wingdi.h"
#pragma endregion
#line 3597
#pragma region Desktop Family
#line 3611
typedef 
#line 3600
struct tagGCP_RESULTSA { 
#line 3602
DWORD lStructSize; 
#line 3603
LPSTR lpOutString; 
#line 3604
UINT *lpOrder; 
#line 3605
int *lpDx; 
#line 3606
int *lpCaretPos; 
#line 3607
LPSTR lpClass; 
#line 3608
LPWSTR lpGlyphs; 
#line 3609
UINT nGlyphs; 
#line 3610
int nMaxFit; 
#line 3611
} GCP_RESULTSA, *LPGCP_RESULTSA; 
#line 3623
typedef 
#line 3612
struct tagGCP_RESULTSW { 
#line 3614
DWORD lStructSize; 
#line 3615
LPWSTR lpOutString; 
#line 3616
UINT *lpOrder; 
#line 3617
int *lpDx; 
#line 3618
int *lpCaretPos; 
#line 3619
LPSTR lpClass; 
#line 3620
LPWSTR lpGlyphs; 
#line 3621
UINT nGlyphs; 
#line 3622
int nMaxFit; 
#line 3623
} GCP_RESULTSW, *LPGCP_RESULTSW; 
#line 3628
typedef GCP_RESULTSA GCP_RESULTS; 
#line 3629
typedef LPGCP_RESULTSA LPGCP_RESULTS; 
#line 3633 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\wingdi.h"
#pragma endregion
#line 3636 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\wingdi.h"
#pragma region Desktop Family
#line 3643
typedef 
#line 3639
struct _RASTERIZER_STATUS { 
#line 3640
short nSize; 
#line 3641
short wFlags; 
#line 3642
short nLanguageID; 
#line 3643
} RASTERIZER_STATUS, *LPRASTERIZER_STATUS; 
#line 3646 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\wingdi.h"
#pragma endregion
#line 3652
#pragma region Application Family
#line 3684
typedef 
#line 3656
struct tagPIXELFORMATDESCRIPTOR { 
#line 3658
WORD nSize; 
#line 3659
WORD nVersion; 
#line 3660
DWORD dwFlags; 
#line 3661
BYTE iPixelType; 
#line 3662
BYTE cColorBits; 
#line 3663
BYTE cRedBits; 
#line 3664
BYTE cRedShift; 
#line 3665
BYTE cGreenBits; 
#line 3666
BYTE cGreenShift; 
#line 3667
BYTE cBlueBits; 
#line 3668
BYTE cBlueShift; 
#line 3669
BYTE cAlphaBits; 
#line 3670
BYTE cAlphaShift; 
#line 3671
BYTE cAccumBits; 
#line 3672
BYTE cAccumRedBits; 
#line 3673
BYTE cAccumGreenBits; 
#line 3674
BYTE cAccumBlueBits; 
#line 3675
BYTE cAccumAlphaBits; 
#line 3676
BYTE cDepthBits; 
#line 3677
BYTE cStencilBits; 
#line 3678
BYTE cAuxBuffers; 
#line 3679
BYTE iLayerType; 
#line 3680
BYTE bReserved; 
#line 3681
DWORD dwLayerMask; 
#line 3682
DWORD dwVisibleMask; 
#line 3683
DWORD dwDamageMask; 
#line 3684
} PIXELFORMATDESCRIPTOR, *PPIXELFORMATDESCRIPTOR, *LPPIXELFORMATDESCRIPTOR; 
#line 3687 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\wingdi.h"
#pragma endregion
#line 3722
#pragma region Desktop Family
#line 3728
typedef int (__stdcall *OLDFONTENUMPROCA)(const LOGFONTA *, const TEXTMETRICA *, DWORD, LPARAM); 
#line 3729
typedef int (__stdcall *OLDFONTENUMPROCW)(const LOGFONTW *, const TEXTMETRICW *, DWORD, LPARAM); 
#line 3745 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\wingdi.h"
typedef OLDFONTENUMPROCA FONTENUMPROCA; 
#line 3746
typedef OLDFONTENUMPROCW FONTENUMPROCW; 
#line 3750
typedef FONTENUMPROCA FONTENUMPROC; 
#line 3753 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\wingdi.h"
typedef int (__stdcall *GOBJENUMPROC)(LPVOID, LPARAM); 
#line 3754
typedef void (__stdcall *LINEDDAPROC)(int, int, LPARAM); 
#line 3769 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\wingdi.h"
#pragma endregion
#line 3773
#pragma region Desktop Family
#line 3776
__declspec(dllimport) int __stdcall AddFontResourceA(LPCSTR); 
#line 3777
__declspec(dllimport) int __stdcall AddFontResourceW(LPCWSTR); 
#line 3784 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\wingdi.h"
__declspec(dllimport) BOOL __stdcall AnimatePalette(HPALETTE hPal, UINT iStartIndex, UINT cEntries, const PALETTEENTRY * ppe); 
#line 3785
__declspec(dllimport) BOOL __stdcall Arc(HDC hdc, int x1, int y1, int x2, int y2, int x3, int y3, int x4, int y4); 
#line 3786
__declspec(dllimport) BOOL __stdcall BitBlt(HDC hdc, int x, int y, int cx, int cy, HDC hdcSrc, int x1, int y1, DWORD rop); 
#line 3787
__declspec(dllimport) BOOL __stdcall CancelDC(HDC hdc); 
#line 3788
__declspec(dllimport) BOOL __stdcall Chord(HDC hdc, int x1, int y1, int x2, int y2, int x3, int y3, int x4, int y4); 
#line 3789
__declspec(dllimport) int __stdcall ChoosePixelFormat(HDC hdc, const PIXELFORMATDESCRIPTOR * ppfd); 
#line 3790
__declspec(dllimport) HMETAFILE __stdcall CloseMetaFile(HDC hdc); 
#line 3791
__declspec(dllimport) int __stdcall CombineRgn(HRGN hrgnDst, HRGN hrgnSrc1, HRGN hrgnSrc2, int iMode); 
#line 3792
__declspec(dllimport) HMETAFILE __stdcall CopyMetaFileA(HMETAFILE, LPCSTR); 
#line 3793
__declspec(dllimport) HMETAFILE __stdcall CopyMetaFileW(HMETAFILE, LPCWSTR); 
#line 3799 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\wingdi.h"
__declspec(dllimport) HBITMAP __stdcall CreateBitmap(int nWidth, int nHeight, UINT nPlanes, UINT nBitCount, const void * lpBits); 
#line 3800
__declspec(dllimport) HBITMAP __stdcall CreateBitmapIndirect(const BITMAP * pbm); 
#line 3801
__declspec(dllimport) HBRUSH __stdcall CreateBrushIndirect(const LOGBRUSH * plbrush); 
#line 3802
__declspec(dllimport) HBITMAP __stdcall CreateCompatibleBitmap(HDC hdc, int cx, int cy); 
#line 3803
__declspec(dllimport) HBITMAP __stdcall CreateDiscardableBitmap(HDC hdc, int cx, int cy); 
#line 3804
__declspec(dllimport) HDC __stdcall CreateCompatibleDC(HDC hdc); 
#line 3805
__declspec(dllimport) HDC __stdcall CreateDCA(LPCSTR pwszDriver, LPCSTR pwszDevice, LPCSTR pszPort, const DEVMODEA * pdm); 
#line 3806
__declspec(dllimport) HDC __stdcall CreateDCW(LPCWSTR pwszDriver, LPCWSTR pwszDevice, LPCWSTR pszPort, const DEVMODEW * pdm); 
#line 3812 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\wingdi.h"
__declspec(dllimport) HBITMAP __stdcall CreateDIBitmap(HDC hdc, const BITMAPINFOHEADER * pbmih, DWORD flInit, const void * pjBits, const BITMAPINFO * pbmi, UINT iUsage); 
#line 3813
__declspec(dllimport) HBRUSH __stdcall CreateDIBPatternBrush(HGLOBAL h, UINT iUsage); 
#line 3814
__declspec(dllimport) HBRUSH __stdcall CreateDIBPatternBrushPt(const void * lpPackedDIB, UINT iUsage); 
#line 3815
__declspec(dllimport) HRGN __stdcall CreateEllipticRgn(int x1, int y1, int x2, int y2); 
#line 3816
__declspec(dllimport) HRGN __stdcall CreateEllipticRgnIndirect(const RECT * lprect); 
#line 3817
__declspec(dllimport) HFONT __stdcall CreateFontIndirectA(const LOGFONTA * lplf); 
#line 3818
__declspec(dllimport) HFONT __stdcall CreateFontIndirectW(const LOGFONTW * lplf); 
#line 3824 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\wingdi.h"
__declspec(dllimport) HFONT __stdcall CreateFontA(int cHeight, int cWidth, int cEscapement, int cOrientation, int cWeight, DWORD bItalic, DWORD bUnderline, DWORD bStrikeOut, DWORD iCharSet, DWORD iOutPrecision, DWORD iClipPrecision, DWORD iQuality, DWORD iPitchAndFamily, LPCSTR pszFaceName); 
#line 3827
__declspec(dllimport) HFONT __stdcall CreateFontW(int cHeight, int cWidth, int cEscapement, int cOrientation, int cWeight, DWORD bItalic, DWORD bUnderline, DWORD bStrikeOut, DWORD iCharSet, DWORD iOutPrecision, DWORD iClipPrecision, DWORD iQuality, DWORD iPitchAndFamily, LPCWSTR pszFaceName); 
#line 3836 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\wingdi.h"
__declspec(dllimport) HBRUSH __stdcall CreateHatchBrush(int iHatch, COLORREF color); 
#line 3837
__declspec(dllimport) HDC __stdcall CreateICA(LPCSTR pszDriver, LPCSTR pszDevice, LPCSTR pszPort, const DEVMODEA * pdm); 
#line 3838
__declspec(dllimport) HDC __stdcall CreateICW(LPCWSTR pszDriver, LPCWSTR pszDevice, LPCWSTR pszPort, const DEVMODEW * pdm); 
#line 3844 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\wingdi.h"
__declspec(dllimport) HDC __stdcall CreateMetaFileA(LPCSTR pszFile); 
#line 3845
__declspec(dllimport) HDC __stdcall CreateMetaFileW(LPCWSTR pszFile); 
#line 3851 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\wingdi.h"
__declspec(dllimport) HPALETTE __stdcall CreatePalette(const LOGPALETTE * plpal); 
#line 3852
__declspec(dllimport) HPEN __stdcall CreatePen(int iStyle, int cWidth, COLORREF color); 
#line 3853
__declspec(dllimport) HPEN __stdcall CreatePenIndirect(const LOGPEN * plpen); 
#line 3854
__declspec(dllimport) HRGN __stdcall CreatePolyPolygonRgn(const POINT * pptl, const INT * pc, int cPoly, int iMode); 
#line 3858
__declspec(dllimport) HBRUSH __stdcall CreatePatternBrush(HBITMAP hbm); 
#line 3859
__declspec(dllimport) HRGN __stdcall CreateRectRgn(int x1, int y1, int x2, int y2); 
#line 3860
__declspec(dllimport) HRGN __stdcall CreateRectRgnIndirect(const RECT * lprect); 
#line 3861
__declspec(dllimport) HRGN __stdcall CreateRoundRectRgn(int x1, int y1, int x2, int y2, int w, int h); 
#line 3862
__declspec(dllimport) BOOL __stdcall CreateScalableFontResourceA(DWORD fdwHidden, LPCSTR lpszFont, LPCSTR lpszFile, LPCSTR lpszPath); 
#line 3863
__declspec(dllimport) BOOL __stdcall CreateScalableFontResourceW(DWORD fdwHidden, LPCWSTR lpszFont, LPCWSTR lpszFile, LPCWSTR lpszPath); 
#line 3869 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\wingdi.h"
__declspec(dllimport) HBRUSH __stdcall CreateSolidBrush(COLORREF color); 
#line 3871
__declspec(dllimport) BOOL __stdcall DeleteDC(HDC hdc); 
#line 3872
__declspec(dllimport) BOOL __stdcall DeleteMetaFile(HMETAFILE hmf); 
#line 3873
__declspec(dllimport) BOOL __stdcall DeleteObject(HGDIOBJ ho); 
#line 3874
__declspec(dllimport) int __stdcall DescribePixelFormat(HDC hdc, int iPixelFormat, UINT nBytes, LPPIXELFORMATDESCRIPTOR ppfd); 
#line 3883
typedef UINT (__stdcall *LPFNDEVMODE)(HWND, HMODULE, LPDEVMODE, LPSTR, LPSTR, LPDEVMODE, LPSTR, UINT); 
#line 3885
typedef DWORD (__stdcall *LPFNDEVCAPS)(LPSTR, LPSTR, UINT, LPSTR, LPDEVMODE); 
#line 3888 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\wingdi.h"
#pragma endregion
#line 3967 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\wingdi.h"
#pragma region Desktop Family
#line 3970
__declspec(dllimport) int __stdcall 
#line 3973
DeviceCapabilitiesA(LPCSTR pDevice, LPCSTR pPort, WORD fwCapability, LPSTR pOutput, const DEVMODEA * pDevMode); 
#line 3980
__declspec(dllimport) int __stdcall 
#line 3983
DeviceCapabilitiesW(LPCWSTR pDevice, LPCWSTR pPort, WORD fwCapability, LPWSTR pOutput, const DEVMODEW * pDevMode); 
#line 3996 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\wingdi.h"
__declspec(dllimport) int __stdcall DrawEscape(HDC hdc, int iEscape, int cjIn, LPCSTR lpIn); 
#line 4001
__declspec(dllimport) BOOL __stdcall Ellipse(HDC hdc, int left, int top, int right, int bottom); 
#line 4004
__declspec(dllimport) int __stdcall EnumFontFamiliesExA(HDC hdc, LPLOGFONTA lpLogfont, FONTENUMPROCA lpProc, LPARAM lParam, DWORD dwFlags); 
#line 4005
__declspec(dllimport) int __stdcall EnumFontFamiliesExW(HDC hdc, LPLOGFONTW lpLogfont, FONTENUMPROCW lpProc, LPARAM lParam, DWORD dwFlags); 
#line 4013 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\wingdi.h"
__declspec(dllimport) int __stdcall EnumFontFamiliesA(HDC hdc, LPCSTR lpLogfont, FONTENUMPROCA lpProc, LPARAM lParam); 
#line 4014
__declspec(dllimport) int __stdcall EnumFontFamiliesW(HDC hdc, LPCWSTR lpLogfont, FONTENUMPROCW lpProc, LPARAM lParam); 
#line 4020 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\wingdi.h"
__declspec(dllimport) int __stdcall EnumFontsA(HDC hdc, LPCSTR lpLogfont, FONTENUMPROCA lpProc, LPARAM lParam); 
#line 4021
__declspec(dllimport) int __stdcall EnumFontsW(HDC hdc, LPCWSTR lpLogfont, FONTENUMPROCW lpProc, LPARAM lParam); 
#line 4029 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\wingdi.h"
__declspec(dllimport) int __stdcall EnumObjects(HDC hdc, int nType, GOBJENUMPROC lpFunc, LPARAM lParam); 
#line 4035 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\wingdi.h"
__declspec(dllimport) BOOL __stdcall EqualRgn(HRGN hrgn1, HRGN hrgn2); 
#line 4036
__declspec(dllimport) int __stdcall Escape(HDC hdc, int iEscape, int cjIn, LPCSTR pvIn, LPVOID pvOut); 
#line 4041
__declspec(dllimport) int __stdcall ExtEscape(HDC hdc, int iEscape, int cjInput, LPCSTR lpInData, int cjOutput, LPSTR lpOutData); 
#line 4047
__declspec(dllimport) int __stdcall ExcludeClipRect(HDC hdc, int left, int top, int right, int bottom); 
#line 4048
__declspec(dllimport) HRGN __stdcall ExtCreateRegion(const XFORM * lpx, DWORD nCount, const RGNDATA * lpData); 
#line 4049
__declspec(dllimport) BOOL __stdcall ExtFloodFill(HDC hdc, int x, int y, COLORREF color, UINT type); 
#line 4050
__declspec(dllimport) BOOL __stdcall FillRgn(HDC hdc, HRGN hrgn, HBRUSH hbr); 
#line 4051
__declspec(dllimport) BOOL __stdcall FloodFill(HDC hdc, int x, int y, COLORREF color); 
#line 4052
__declspec(dllimport) BOOL __stdcall FrameRgn(HDC hdc, HRGN hrgn, HBRUSH hbr, int w, int h); 
#line 4053
__declspec(dllimport) int __stdcall GetROP2(HDC hdc); 
#line 4054
__declspec(dllimport) BOOL __stdcall GetAspectRatioFilterEx(HDC hdc, LPSIZE lpsize); 
#line 4055
__declspec(dllimport) COLORREF __stdcall GetBkColor(HDC hdc); 
#line 4058
__declspec(dllimport) COLORREF __stdcall GetDCBrushColor(HDC hdc); 
#line 4059
__declspec(dllimport) COLORREF __stdcall GetDCPenColor(HDC hdc); 
#line 4062 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\wingdi.h"
__declspec(dllimport) int __stdcall 
#line 4065
GetBkMode(HDC hdc); 
#line 4069
__declspec(dllimport) LONG __stdcall 
#line 4072
GetBitmapBits(HBITMAP hbit, LONG cb, LPVOID lpvBits); 
#line 4078
__declspec(dllimport) BOOL __stdcall GetBitmapDimensionEx(HBITMAP hbit, LPSIZE lpsize); 
#line 4079
__declspec(dllimport) UINT __stdcall GetBoundsRect(HDC hdc, LPRECT lprect, UINT flags); 
#line 4081
__declspec(dllimport) BOOL __stdcall GetBrushOrgEx(HDC hdc, LPPOINT lppt); 
#line 4083
__declspec(dllimport) BOOL __stdcall GetCharWidthA(HDC hdc, UINT iFirst, UINT iLast, LPINT lpBuffer); 
#line 4084
__declspec(dllimport) BOOL __stdcall GetCharWidthW(HDC hdc, UINT iFirst, UINT iLast, LPINT lpBuffer); 
#line 4090 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\wingdi.h"
__declspec(dllimport) BOOL __stdcall GetCharWidth32A(HDC hdc, UINT iFirst, UINT iLast, LPINT lpBuffer); 
#line 4091
__declspec(dllimport) BOOL __stdcall GetCharWidth32W(HDC hdc, UINT iFirst, UINT iLast, LPINT lpBuffer); 
#line 4097 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\wingdi.h"
__declspec(dllimport) BOOL __stdcall GetCharWidthFloatA(HDC hdc, UINT iFirst, UINT iLast, PFLOAT lpBuffer); 
#line 4098
__declspec(dllimport) BOOL __stdcall GetCharWidthFloatW(HDC hdc, UINT iFirst, UINT iLast, PFLOAT lpBuffer); 
#line 4105 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\wingdi.h"
__declspec(dllimport) BOOL __stdcall GetCharABCWidthsA(HDC hdc, UINT wFirst, UINT wLast, LPABC lpABC); 
#line 4109
__declspec(dllimport) BOOL __stdcall GetCharABCWidthsW(HDC hdc, UINT wFirst, UINT wLast, LPABC lpABC); 
#line 4119 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\wingdi.h"
__declspec(dllimport) BOOL __stdcall GetCharABCWidthsFloatA(HDC hdc, UINT iFirst, UINT iLast, LPABCFLOAT lpABC); 
#line 4120
__declspec(dllimport) BOOL __stdcall GetCharABCWidthsFloatW(HDC hdc, UINT iFirst, UINT iLast, LPABCFLOAT lpABC); 
#line 4126 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\wingdi.h"
__declspec(dllimport) int __stdcall GetClipBox(HDC hdc, LPRECT lprect); 
#line 4127
__declspec(dllimport) int __stdcall GetClipRgn(HDC hdc, HRGN hrgn); 
#line 4128
__declspec(dllimport) int __stdcall GetMetaRgn(HDC hdc, HRGN hrgn); 
#line 4129
__declspec(dllimport) HGDIOBJ __stdcall GetCurrentObject(HDC hdc, UINT type); 
#line 4130
__declspec(dllimport) BOOL __stdcall GetCurrentPositionEx(HDC hdc, LPPOINT lppt); 
#line 4131
__declspec(dllimport) int __stdcall GetDeviceCaps(HDC hdc, int index); 
#line 4132
__declspec(dllimport) int __stdcall GetDIBits(HDC hdc, HBITMAP hbm, UINT start, UINT cLines, LPVOID lpvBits, LPBITMAPINFO lpbmi, UINT usage); 
#line 4136
__declspec(dllimport) DWORD __stdcall GetFontData(HDC hdc, DWORD dwTable, DWORD dwOffset, PVOID pvBuffer, DWORD cjBuffer); 
#line 4143
__declspec(dllimport) DWORD __stdcall GetGlyphOutlineA(HDC hdc, UINT uChar, UINT fuFormat, LPGLYPHMETRICS lpgm, DWORD cjBuffer, LPVOID pvBuffer, const MAT2 * lpmat2); 
#line 4151
__declspec(dllimport) DWORD __stdcall GetGlyphOutlineW(HDC hdc, UINT uChar, UINT fuFormat, LPGLYPHMETRICS lpgm, DWORD cjBuffer, LPVOID pvBuffer, const MAT2 * lpmat2); 
#line 4165 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\wingdi.h"
__declspec(dllimport) int __stdcall GetGraphicsMode(HDC hdc); 
#line 4166
__declspec(dllimport) int __stdcall GetMapMode(HDC hdc); 
#line 4167
__declspec(dllimport) UINT __stdcall GetMetaFileBitsEx(HMETAFILE hMF, UINT cbBuffer, LPVOID lpData); 
#line 4168
__declspec(dllimport) HMETAFILE __stdcall GetMetaFileA(LPCSTR lpName); 
#line 4169
__declspec(dllimport) HMETAFILE __stdcall GetMetaFileW(LPCWSTR lpName); 
#line 4175 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\wingdi.h"
__declspec(dllimport) COLORREF __stdcall GetNearestColor(HDC hdc, COLORREF color); 
#line 4176
__declspec(dllimport) UINT __stdcall GetNearestPaletteIndex(HPALETTE h, COLORREF color); 
#line 4178
__declspec(dllimport) DWORD __stdcall GetObjectType(HGDIOBJ h); 
#line 4182
__declspec(dllimport) UINT __stdcall GetOutlineTextMetricsA(HDC hdc, UINT cjCopy, LPOUTLINETEXTMETRICA potm); 
#line 4185
__declspec(dllimport) UINT __stdcall GetOutlineTextMetricsW(HDC hdc, UINT cjCopy, LPOUTLINETEXTMETRICW potm); 
#line 4197 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\wingdi.h"
__declspec(dllimport) UINT __stdcall GetPaletteEntries(HPALETTE hpal, UINT iStart, UINT cEntries, LPPALETTEENTRY pPalEntries); 
#line 4201
__declspec(dllimport) COLORREF __stdcall GetPixel(HDC hdc, int x, int y); 
#line 4202
__declspec(dllimport) int __stdcall GetPixelFormat(HDC hdc); 
#line 4203
__declspec(dllimport) int __stdcall GetPolyFillMode(HDC hdc); 
#line 4204
__declspec(dllimport) BOOL __stdcall GetRasterizerCaps(LPRASTERIZER_STATUS lpraststat, UINT cjBytes); 
#line 4207
__declspec(dllimport) int __stdcall GetRandomRgn(HDC hdc, HRGN hrgn, INT i); 
#line 4208
__declspec(dllimport) DWORD __stdcall GetRegionData(HRGN hrgn, DWORD nCount, LPRGNDATA lpRgnData); 
#line 4211
__declspec(dllimport) int __stdcall GetRgnBox(HRGN hrgn, LPRECT lprc); 
#line 4212
__declspec(dllimport) HGDIOBJ __stdcall GetStockObject(int i); 
#line 4213
__declspec(dllimport) int __stdcall GetStretchBltMode(HDC hdc); 
#line 4214
__declspec(dllimport) UINT __stdcall 
#line 4217
GetSystemPaletteEntries(HDC hdc, UINT iStart, UINT cEntries, LPPALETTEENTRY pPalEntries); 
#line 4224
__declspec(dllimport) UINT __stdcall GetSystemPaletteUse(HDC hdc); 
#line 4225
__declspec(dllimport) int __stdcall GetTextCharacterExtra(HDC hdc); 
#line 4226
__declspec(dllimport) UINT __stdcall GetTextAlign(HDC hdc); 
#line 4227
__declspec(dllimport) COLORREF __stdcall GetTextColor(HDC hdc); 
#line 4229
__declspec(dllimport) BOOL __stdcall 
#line 4232
GetTextExtentPointA(HDC hdc, LPCSTR lpString, int c, LPSIZE lpsz); 
#line 4238
__declspec(dllimport) BOOL __stdcall 
#line 4241
GetTextExtentPointW(HDC hdc, LPCWSTR lpString, int c, LPSIZE lpsz); 
#line 4253 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\wingdi.h"
__declspec(dllimport) BOOL __stdcall 
#line 4256
GetTextExtentPoint32A(HDC hdc, LPCSTR lpString, int c, LPSIZE psizl); 
#line 4262
__declspec(dllimport) BOOL __stdcall 
#line 4265
GetTextExtentPoint32W(HDC hdc, LPCWSTR lpString, int c, LPSIZE psizl); 
#line 4277 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\wingdi.h"
__declspec(dllimport) BOOL __stdcall 
#line 4280
GetTextExtentExPointA(HDC hdc, LPCSTR lpszString, int cchString, int nMaxExtent, LPINT lpnFit, LPINT lpnDx, LPSIZE lpSize); 
#line 4289
__declspec(dllimport) BOOL __stdcall 
#line 4292
GetTextExtentExPointW(HDC hdc, LPCWSTR lpszString, int cchString, int nMaxExtent, LPINT lpnFit, LPINT lpnDx, LPSIZE lpSize); 
#line 4308 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\wingdi.h"
__declspec(dllimport) int __stdcall GetTextCharset(HDC hdc); 
#line 4309
__declspec(dllimport) int __stdcall GetTextCharsetInfo(HDC hdc, LPFONTSIGNATURE lpSig, DWORD dwFlags); 
#line 4310
__declspec(dllimport) BOOL __stdcall TranslateCharsetInfo(DWORD * lpSrc, LPCHARSETINFO lpCs, DWORD dwFlags); 
#line 4311
__declspec(dllimport) DWORD __stdcall GetFontLanguageInfo(HDC hdc); 
#line 4312
__declspec(dllimport) DWORD __stdcall GetCharacterPlacementA(HDC hdc, LPCSTR lpString, int nCount, int nMexExtent, LPGCP_RESULTSA lpResults, DWORD dwFlags); 
#line 4313
__declspec(dllimport) DWORD __stdcall GetCharacterPlacementW(HDC hdc, LPCWSTR lpString, int nCount, int nMexExtent, LPGCP_RESULTSW lpResults, DWORD dwFlags); 
#line 4322 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\wingdi.h"
#pragma endregion
#line 4326
#pragma region Desktop Family
#line 4333
typedef 
#line 4329
struct tagWCRANGE { 
#line 4331
WCHAR wcLow; 
#line 4332
USHORT cGlyphs; 
#line 4333
} WCRANGE, *PWCRANGE, *LPWCRANGE; 
#line 4343
typedef 
#line 4336
struct tagGLYPHSET { 
#line 4338
DWORD cbThis; 
#line 4339
DWORD flAccel; 
#line 4340
DWORD cGlyphsSupported; 
#line 4341
DWORD cRanges; 
#line 4342
WCRANGE ranges[1]; 
#line 4343
} GLYPHSET, *PGLYPHSET, *LPGLYPHSET; 
#line 4353
__declspec(dllimport) DWORD __stdcall GetFontUnicodeRanges(HDC hdc, LPGLYPHSET lpgs); 
#line 4354
__declspec(dllimport) DWORD __stdcall GetGlyphIndicesA(HDC hdc, LPCSTR lpstr, int c, LPWORD pgi, DWORD fl); 
#line 4355
__declspec(dllimport) DWORD __stdcall GetGlyphIndicesW(HDC hdc, LPCWSTR lpstr, int c, LPWORD pgi, DWORD fl); 
#line 4361 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\wingdi.h"
__declspec(dllimport) BOOL __stdcall GetTextExtentPointI(HDC hdc, LPWORD pgiIn, int cgi, LPSIZE psize); 
#line 4362
__declspec(dllimport) BOOL __stdcall GetTextExtentExPointI(HDC hdc, LPWORD lpwszString, int cwchString, int nMaxExtent, LPINT lpnFit, LPINT lpnDx, LPSIZE lpSize); 
#line 4371
__declspec(dllimport) BOOL __stdcall GetCharWidthI(HDC hdc, UINT giFirst, UINT cgi, LPWORD pgi, LPINT piWidths); 
#line 4378
__declspec(dllimport) BOOL __stdcall GetCharABCWidthsI(HDC hdc, UINT giFirst, UINT cgi, LPWORD pgi, LPABC pabc); 
#line 4399
typedef 
#line 4394
struct tagDESIGNVECTOR { 
#line 4396
DWORD dvReserved; 
#line 4397
DWORD dvNumAxes; 
#line 4398
LONG dvValues[16]; 
#line 4399
} DESIGNVECTOR, *PDESIGNVECTOR, *LPDESIGNVECTOR; 
#line 4401
__declspec(dllimport) int __stdcall AddFontResourceExA(LPCSTR name, DWORD fl, PVOID res); 
#line 4402
__declspec(dllimport) int __stdcall AddFontResourceExW(LPCWSTR name, DWORD fl, PVOID res); 
#line 4408 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\wingdi.h"
__declspec(dllimport) BOOL __stdcall RemoveFontResourceExA(LPCSTR name, DWORD fl, PVOID pdv); 
#line 4409
__declspec(dllimport) BOOL __stdcall RemoveFontResourceExW(LPCWSTR name, DWORD fl, PVOID pdv); 
#line 4415 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\wingdi.h"
__declspec(dllimport) HANDLE __stdcall AddFontMemResourceEx(PVOID pFileView, DWORD cjSize, PVOID pvResrved, DWORD * pNumFonts); 
#line 4420
__declspec(dllimport) BOOL __stdcall RemoveFontMemResourceEx(HANDLE h); 
#line 4435
typedef 
#line 4430
struct tagAXISINFOA { 
#line 4432
LONG axMinValue; 
#line 4433
LONG axMaxValue; 
#line 4434
BYTE axAxisName[16]; 
#line 4435
} AXISINFOA, *PAXISINFOA, *LPAXISINFOA; 
#line 4441
typedef 
#line 4436
struct tagAXISINFOW { 
#line 4438
LONG axMinValue; 
#line 4439
LONG axMaxValue; 
#line 4440
WCHAR axAxisName[16]; 
#line 4441
} AXISINFOW, *PAXISINFOW, *LPAXISINFOW; 
#line 4447
typedef AXISINFOA AXISINFO; 
#line 4448
typedef PAXISINFOA PAXISINFO; 
#line 4449
typedef LPAXISINFOA LPAXISINFO; 
#line 4457 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\wingdi.h"
typedef 
#line 4452
struct tagAXESLISTA { 
#line 4454
DWORD axlReserved; 
#line 4455
DWORD axlNumAxes; 
#line 4456
AXISINFOA axlAxisInfo[16]; 
#line 4457
} AXESLISTA, *PAXESLISTA, *LPAXESLISTA; 
#line 4463
typedef 
#line 4458
struct tagAXESLISTW { 
#line 4460
DWORD axlReserved; 
#line 4461
DWORD axlNumAxes; 
#line 4462
AXISINFOW axlAxisInfo[16]; 
#line 4463
} AXESLISTW, *PAXESLISTW, *LPAXESLISTW; 
#line 4469
typedef AXESLISTA AXESLIST; 
#line 4470
typedef PAXESLISTA PAXESLIST; 
#line 4471
typedef LPAXESLISTA LPAXESLIST; 
#line 4482 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\wingdi.h"
typedef 
#line 4478
struct tagENUMLOGFONTEXDVA { 
#line 4480
ENUMLOGFONTEXA elfEnumLogfontEx; 
#line 4481
DESIGNVECTOR elfDesignVector; 
#line 4482
} ENUMLOGFONTEXDVA, *PENUMLOGFONTEXDVA, *LPENUMLOGFONTEXDVA; 
#line 4487
typedef 
#line 4483
struct tagENUMLOGFONTEXDVW { 
#line 4485
ENUMLOGFONTEXW elfEnumLogfontEx; 
#line 4486
DESIGNVECTOR elfDesignVector; 
#line 4487
} ENUMLOGFONTEXDVW, *PENUMLOGFONTEXDVW, *LPENUMLOGFONTEXDVW; 
#line 4493
typedef ENUMLOGFONTEXDVA ENUMLOGFONTEXDV; 
#line 4494
typedef PENUMLOGFONTEXDVA PENUMLOGFONTEXDV; 
#line 4495
typedef LPENUMLOGFONTEXDVA LPENUMLOGFONTEXDV; 
#line 4498 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\wingdi.h"
__declspec(dllimport) HFONT __stdcall CreateFontIndirectExA(const ENUMLOGFONTEXDVA *); 
#line 4499
__declspec(dllimport) HFONT __stdcall CreateFontIndirectExW(const ENUMLOGFONTEXDVW *); 
#line 4511 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\wingdi.h"
typedef 
#line 4507
struct tagENUMTEXTMETRICA { 
#line 4509
NEWTEXTMETRICEXA etmNewTextMetricEx; 
#line 4510
AXESLISTA etmAxesList; 
#line 4511
} ENUMTEXTMETRICA, *PENUMTEXTMETRICA, *LPENUMTEXTMETRICA; 
#line 4516
typedef 
#line 4512
struct tagENUMTEXTMETRICW { 
#line 4514
NEWTEXTMETRICEXW etmNewTextMetricEx; 
#line 4515
AXESLISTW etmAxesList; 
#line 4516
} ENUMTEXTMETRICW, *PENUMTEXTMETRICW, *LPENUMTEXTMETRICW; 
#line 4522
typedef ENUMTEXTMETRICA ENUMTEXTMETRIC; 
#line 4523
typedef PENUMTEXTMETRICA PENUMTEXTMETRIC; 
#line 4524
typedef LPENUMTEXTMETRICA LPENUMTEXTMETRIC; 
#line 4529 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\wingdi.h"
#pragma endregion
#line 4533 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\wingdi.h"
#pragma region Desktop Family
#line 4536
__declspec(dllimport) BOOL __stdcall GetViewportExtEx(HDC hdc, LPSIZE lpsize); 
#line 4537
__declspec(dllimport) BOOL __stdcall GetViewportOrgEx(HDC hdc, LPPOINT lppoint); 
#line 4538
__declspec(dllimport) BOOL __stdcall GetWindowExtEx(HDC hdc, LPSIZE lpsize); 
#line 4539
__declspec(dllimport) BOOL __stdcall GetWindowOrgEx(HDC hdc, LPPOINT lppoint); 
#line 4541
__declspec(dllimport) int __stdcall IntersectClipRect(HDC hdc, int left, int top, int right, int bottom); 
#line 4542
__declspec(dllimport) BOOL __stdcall InvertRgn(HDC hdc, HRGN hrgn); 
#line 4543
__declspec(dllimport) BOOL __stdcall LineDDA(int xStart, int yStart, int xEnd, int yEnd, LINEDDAPROC lpProc, LPARAM data); 
#line 4544
__declspec(dllimport) BOOL __stdcall LineTo(HDC hdc, int x, int y); 
#line 4545
__declspec(dllimport) BOOL __stdcall MaskBlt(HDC hdcDest, int xDest, int yDest, int width, int height, HDC hdcSrc, int xSrc, int ySrc, HBITMAP hbmMask, int xMask, int yMask, DWORD rop); 
#line 4547
__declspec(dllimport) BOOL __stdcall PlgBlt(HDC hdcDest, const POINT * lpPoint, HDC hdcSrc, int xSrc, int ySrc, int width, int height, HBITMAP hbmMask, int xMask, int yMask); 
#line 4550
__declspec(dllimport) int __stdcall OffsetClipRgn(HDC hdc, int x, int y); 
#line 4551
__declspec(dllimport) int __stdcall OffsetRgn(HRGN hrgn, int x, int y); 
#line 4552
__declspec(dllimport) BOOL __stdcall PatBlt(HDC hdc, int x, int y, int w, int h, DWORD rop); 
#line 4553
__declspec(dllimport) BOOL __stdcall Pie(HDC hdc, int left, int top, int right, int bottom, int xr1, int yr1, int xr2, int yr2); 
#line 4554
__declspec(dllimport) BOOL __stdcall PlayMetaFile(HDC hdc, HMETAFILE hmf); 
#line 4555
__declspec(dllimport) BOOL __stdcall PaintRgn(HDC hdc, HRGN hrgn); 
#line 4556
__declspec(dllimport) BOOL __stdcall PolyPolygon(HDC hdc, const POINT * apt, const INT * asz, int csz); 
#line 4557
__declspec(dllimport) BOOL __stdcall PtInRegion(HRGN hrgn, int x, int y); 
#line 4558
__declspec(dllimport) BOOL __stdcall PtVisible(HDC hdc, int x, int y); 
#line 4559
__declspec(dllimport) BOOL __stdcall RectInRegion(HRGN hrgn, const RECT * lprect); 
#line 4560
__declspec(dllimport) BOOL __stdcall RectVisible(HDC hdc, const RECT * lprect); 
#line 4561
__declspec(dllimport) BOOL __stdcall Rectangle(HDC hdc, int left, int top, int right, int bottom); 
#line 4562
__declspec(dllimport) BOOL __stdcall RestoreDC(HDC hdc, int nSavedDC); 
#line 4563
__declspec(dllimport) HDC __stdcall ResetDCA(HDC hdc, const DEVMODEA * lpdm); 
#line 4564
__declspec(dllimport) HDC __stdcall ResetDCW(HDC hdc, const DEVMODEW * lpdm); 
#line 4570 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\wingdi.h"
__declspec(dllimport) UINT __stdcall RealizePalette(HDC hdc); 
#line 4571
__declspec(dllimport) BOOL __stdcall RemoveFontResourceA(LPCSTR lpFileName); 
#line 4572
__declspec(dllimport) BOOL __stdcall RemoveFontResourceW(LPCWSTR lpFileName); 
#line 4578 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\wingdi.h"
__declspec(dllimport) BOOL __stdcall RoundRect(HDC hdc, int left, int top, int right, int bottom, int width, int height); 
#line 4579
__declspec(dllimport) BOOL __stdcall ResizePalette(HPALETTE hpal, UINT n); 
#line 4581
__declspec(dllimport) int __stdcall SaveDC(HDC hdc); 
#line 4582
__declspec(dllimport) int __stdcall SelectClipRgn(HDC hdc, HRGN hrgn); 
#line 4583
__declspec(dllimport) int __stdcall ExtSelectClipRgn(HDC hdc, HRGN hrgn, int mode); 
#line 4584
__declspec(dllimport) int __stdcall SetMetaRgn(HDC hdc); 
#line 4585
__declspec(dllimport) HGDIOBJ __stdcall SelectObject(HDC hdc, HGDIOBJ h); 
#line 4586
__declspec(dllimport) HPALETTE __stdcall SelectPalette(HDC hdc, HPALETTE hPal, BOOL bForceBkgd); 
#line 4587
__declspec(dllimport) COLORREF __stdcall SetBkColor(HDC hdc, COLORREF color); 
#line 4590
__declspec(dllimport) COLORREF __stdcall SetDCBrushColor(HDC hdc, COLORREF color); 
#line 4591
__declspec(dllimport) COLORREF __stdcall SetDCPenColor(HDC hdc, COLORREF color); 
#line 4594 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\wingdi.h"
__declspec(dllimport) int __stdcall SetBkMode(HDC hdc, int mode); 
#line 4596
__declspec(dllimport) LONG __stdcall 
#line 4598
SetBitmapBits(HBITMAP hbm, DWORD cb, const void * pvBits); 
#line 4603
__declspec(dllimport) UINT __stdcall SetBoundsRect(HDC hdc, const RECT * lprect, UINT flags); 
#line 4604
__declspec(dllimport) int __stdcall SetDIBits(HDC hdc, HBITMAP hbm, UINT start, UINT cLines, const void * lpBits, const BITMAPINFO * lpbmi, UINT ColorUse); 
#line 4605
__declspec(dllimport) int __stdcall SetDIBitsToDevice(HDC hdc, int xDest, int yDest, DWORD w, DWORD h, int xSrc, int ySrc, UINT StartScan, UINT cLines, const void * lpvBits, const BITMAPINFO * lpbmi, UINT ColorUse); 
#line 4607
__declspec(dllimport) DWORD __stdcall SetMapperFlags(HDC hdc, DWORD flags); 
#line 4608
__declspec(dllimport) int __stdcall SetGraphicsMode(HDC hdc, int iMode); 
#line 4609
__declspec(dllimport) int __stdcall SetMapMode(HDC hdc, int iMode); 
#line 4612
__declspec(dllimport) DWORD __stdcall SetLayout(HDC hdc, DWORD l); 
#line 4613
__declspec(dllimport) DWORD __stdcall GetLayout(HDC hdc); 
#line 4616 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\wingdi.h"
__declspec(dllimport) HMETAFILE __stdcall SetMetaFileBitsEx(UINT cbBuffer, const BYTE * lpData); 
#line 4617
__declspec(dllimport) UINT __stdcall SetPaletteEntries(HPALETTE hpal, UINT iStart, UINT cEntries, const PALETTEENTRY * pPalEntries); 
#line 4621
__declspec(dllimport) COLORREF __stdcall SetPixel(HDC hdc, int x, int y, COLORREF color); 
#line 4622
__declspec(dllimport) BOOL __stdcall SetPixelV(HDC hdc, int x, int y, COLORREF color); 
#line 4623
__declspec(dllimport) BOOL __stdcall SetPixelFormat(HDC hdc, int format, const PIXELFORMATDESCRIPTOR * ppfd); 
#line 4624
__declspec(dllimport) int __stdcall SetPolyFillMode(HDC hdc, int mode); 
#line 4625
__declspec(dllimport) BOOL __stdcall StretchBlt(HDC hdcDest, int xDest, int yDest, int wDest, int hDest, HDC hdcSrc, int xSrc, int ySrc, int wSrc, int hSrc, DWORD rop); 
#line 4626
__declspec(dllimport) BOOL __stdcall SetRectRgn(HRGN hrgn, int left, int top, int right, int bottom); 
#line 4627
__declspec(dllimport) int __stdcall StretchDIBits(HDC hdc, int xDest, int yDest, int DestWidth, int DestHeight, int xSrc, int ySrc, int SrcWidth, int SrcHeight, const void * lpBits, const BITMAPINFO * lpbmi, UINT iUsage, DWORD rop); 
#line 4629
__declspec(dllimport) int __stdcall SetROP2(HDC hdc, int rop2); 
#line 4630
__declspec(dllimport) int __stdcall SetStretchBltMode(HDC hdc, int mode); 
#line 4631
__declspec(dllimport) UINT __stdcall SetSystemPaletteUse(HDC hdc, UINT use); 
#line 4632
__declspec(dllimport) int __stdcall SetTextCharacterExtra(HDC hdc, int extra); 
#line 4633
__declspec(dllimport) COLORREF __stdcall SetTextColor(HDC hdc, COLORREF color); 
#line 4634
__declspec(dllimport) UINT __stdcall SetTextAlign(HDC hdc, UINT align); 
#line 4635
__declspec(dllimport) BOOL __stdcall SetTextJustification(HDC hdc, int extra, int count); 
#line 4636
__declspec(dllimport) BOOL __stdcall UpdateColors(HDC hdc); 
#line 4639 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\wingdi.h"
#pragma endregion
#line 4684
#pragma region Application Family
#line 4687
typedef USHORT COLOR16; 
#line 4697
typedef 
#line 4689
struct _TRIVERTEX { 
#line 4691
LONG x; 
#line 4692
LONG y; 
#line 4693
COLOR16 Red; 
#line 4694
COLOR16 Green; 
#line 4695
COLOR16 Blue; 
#line 4696
COLOR16 Alpha; 
#line 4697
} TRIVERTEX, *PTRIVERTEX, *LPTRIVERTEX; 
#line 4700 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\wingdi.h"
#pragma endregion
#line 4702
#pragma region Desktop Family
#line 4710
typedef 
#line 4705
struct _GRADIENT_TRIANGLE { 
#line 4707
ULONG Vertex1; 
#line 4708
ULONG Vertex2; 
#line 4709
ULONG Vertex3; 
#line 4710
} GRADIENT_TRIANGLE, *PGRADIENT_TRIANGLE, *LPGRADIENT_TRIANGLE; 
#line 4716
typedef 
#line 4712
struct _GRADIENT_RECT { 
#line 4714
ULONG UpperLeft; 
#line 4715
ULONG LowerRight; 
#line 4716
} GRADIENT_RECT, *PGRADIENT_RECT, *LPGRADIENT_RECT; 
#line 4719 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\wingdi.h"
#pragma endregion
#line 4721
#pragma region Application Family
#line 4730
typedef 
#line 4724
struct _BLENDFUNCTION { 
#line 4726
BYTE BlendOp; 
#line 4727
BYTE BlendFlags; 
#line 4728
BYTE SourceConstantAlpha; 
#line 4729
BYTE AlphaFormat; 
#line 4730
} BLENDFUNCTION, *PBLENDFUNCTION; 
#line 4733 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\wingdi.h"
#pragma endregion
#line 4735
#pragma region Desktop Family
#line 4751
__declspec(dllimport) BOOL __stdcall AlphaBlend(HDC hdcDest, int xoriginDest, int yoriginDest, int wDest, int hDest, HDC hdcSrc, int xoriginSrc, int yoriginSrc, int wSrc, int hSrc, BLENDFUNCTION ftn); 
#line 4764
__declspec(dllimport) BOOL __stdcall TransparentBlt(HDC hdcDest, int xoriginDest, int yoriginDest, int wDest, int hDest, HDC hdcSrc, int xoriginSrc, int yoriginSrc, int wSrc, int hSrc, UINT crTransparent); 
#line 4787
__declspec(dllimport) BOOL __stdcall 
#line 4790
GradientFill(HDC hdc, PTRIVERTEX pVertex, ULONG nVertex, PVOID pMesh, ULONG nMesh, ULONG ulMode); 
#line 4800 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\wingdi.h"
#pragma endregion
#line 4804 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\wingdi.h"
#pragma region Desktop Family
#line 4810
__declspec(dllimport) BOOL __stdcall GdiAlphaBlend(HDC hdcDest, int xoriginDest, int yoriginDest, int wDest, int hDest, HDC hdcSrc, int xoriginSrc, int yoriginSrc, int wSrc, int hSrc, BLENDFUNCTION ftn); 
#line 4812
__declspec(dllimport) BOOL __stdcall GdiTransparentBlt(HDC hdcDest, int xoriginDest, int yoriginDest, int wDest, int hDest, HDC hdcSrc, int xoriginSrc, int yoriginSrc, int wSrc, int hSrc, UINT crTransparent); 
#line 4815
__declspec(dllimport) BOOL __stdcall GdiGradientFill(HDC hdc, PTRIVERTEX pVertex, ULONG nVertex, PVOID pMesh, ULONG nCount, ULONG ulMode); 
#line 4828 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\wingdi.h"
__declspec(dllimport) BOOL __stdcall PlayMetaFileRecord(HDC hdc, LPHANDLETABLE lpHandleTable, LPMETARECORD lpMR, UINT noObjs); 
#line 4833
typedef int (__stdcall *MFENUMPROC)(HDC hdc, HANDLETABLE * lpht, METARECORD * lpMR, int nObj, LPARAM param); 
#line 4834
__declspec(dllimport) BOOL __stdcall EnumMetaFile(HDC hdc, HMETAFILE hmf, MFENUMPROC proc, LPARAM param); 
#line 4836
typedef int (__stdcall *ENHMFENUMPROC)(HDC hdc, HANDLETABLE * lpht, const ENHMETARECORD * lpmr, int nHandles, LPARAM data); 
#line 4840
__declspec(dllimport) HENHMETAFILE __stdcall CloseEnhMetaFile(HDC hdc); 
#line 4841
__declspec(dllimport) HENHMETAFILE __stdcall CopyEnhMetaFileA(HENHMETAFILE hEnh, LPCSTR lpFileName); 
#line 4842
__declspec(dllimport) HENHMETAFILE __stdcall CopyEnhMetaFileW(HENHMETAFILE hEnh, LPCWSTR lpFileName); 
#line 4848 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\wingdi.h"
__declspec(dllimport) HDC __stdcall CreateEnhMetaFileA(HDC hdc, LPCSTR lpFilename, const RECT * lprc, LPCSTR lpDesc); 
#line 4849
__declspec(dllimport) HDC __stdcall CreateEnhMetaFileW(HDC hdc, LPCWSTR lpFilename, const RECT * lprc, LPCWSTR lpDesc); 
#line 4855 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\wingdi.h"
__declspec(dllimport) BOOL __stdcall DeleteEnhMetaFile(HENHMETAFILE hmf); 
#line 4856
__declspec(dllimport) BOOL __stdcall EnumEnhMetaFile(HDC hdc, HENHMETAFILE hmf, ENHMFENUMPROC proc, LPVOID param, const RECT * lpRect); 
#line 4858
__declspec(dllimport) HENHMETAFILE __stdcall GetEnhMetaFileA(LPCSTR lpName); 
#line 4859
__declspec(dllimport) HENHMETAFILE __stdcall GetEnhMetaFileW(LPCWSTR lpName); 
#line 4865 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\wingdi.h"
__declspec(dllimport) UINT __stdcall GetEnhMetaFileBits(HENHMETAFILE hEMF, UINT nSize, LPBYTE lpData); 
#line 4868
__declspec(dllimport) UINT __stdcall GetEnhMetaFileDescriptionA(HENHMETAFILE hemf, UINT cchBuffer, LPSTR lpDescription); 
#line 4871
__declspec(dllimport) UINT __stdcall GetEnhMetaFileDescriptionW(HENHMETAFILE hemf, UINT cchBuffer, LPWSTR lpDescription); 
#line 4879 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\wingdi.h"
__declspec(dllimport) UINT __stdcall GetEnhMetaFileHeader(HENHMETAFILE hemf, UINT nSize, LPENHMETAHEADER lpEnhMetaHeader); 
#line 4882
__declspec(dllimport) UINT __stdcall GetEnhMetaFilePaletteEntries(HENHMETAFILE hemf, UINT nNumEntries, LPPALETTEENTRY lpPaletteEntries); 
#line 4886
__declspec(dllimport) UINT __stdcall GetEnhMetaFilePixelFormat(HENHMETAFILE hemf, UINT cbBuffer, PIXELFORMATDESCRIPTOR * ppfd); 
#line 4889
__declspec(dllimport) UINT __stdcall GetWinMetaFileBits(HENHMETAFILE hemf, UINT cbData16, LPBYTE pData16, INT iMapMode, HDC hdcRef); 
#line 4894
__declspec(dllimport) BOOL __stdcall PlayEnhMetaFile(HDC hdc, HENHMETAFILE hmf, const RECT * lprect); 
#line 4895
__declspec(dllimport) BOOL __stdcall PlayEnhMetaFileRecord(HDC hdc, LPHANDLETABLE pht, const ENHMETARECORD * pmr, UINT cht); 
#line 4900
__declspec(dllimport) HENHMETAFILE __stdcall SetEnhMetaFileBits(UINT nSize, const BYTE * pb); 
#line 4903
__declspec(dllimport) HENHMETAFILE __stdcall SetWinMetaFileBits(UINT nSize, const BYTE * lpMeta16Data, HDC hdcRef, const METAFILEPICT * lpMFP); 
#line 4907
__declspec(dllimport) BOOL __stdcall GdiComment(HDC hdc, UINT nSize, const BYTE * lpData); 
#line 4913 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\wingdi.h"
__declspec(dllimport) BOOL __stdcall GetTextMetricsA(HDC hdc, LPTEXTMETRICA lptm); 
#line 4914
__declspec(dllimport) BOOL __stdcall GetTextMetricsW(HDC hdc, LPTEXTMETRICW lptm); 
#line 4951 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\wingdi.h"
typedef 
#line 4945
struct tagDIBSECTION { 
#line 4946
BITMAP dsBm; 
#line 4947
BITMAPINFOHEADER dsBmih; 
#line 4948
DWORD dsBitfields[3]; 
#line 4949
HANDLE dshSection; 
#line 4950
DWORD dsOffset; 
#line 4951
} DIBSECTION, *LPDIBSECTION, *PDIBSECTION; 
#line 4954
__declspec(dllimport) BOOL __stdcall AngleArc(HDC hdc, int x, int y, DWORD r, FLOAT StartAngle, FLOAT SweepAngle); 
#line 4955
__declspec(dllimport) BOOL __stdcall PolyPolyline(HDC hdc, const POINT * apt, const DWORD * asz, DWORD csz); 
#line 4956
__declspec(dllimport) BOOL __stdcall GetWorldTransform(HDC hdc, LPXFORM lpxf); 
#line 4957
__declspec(dllimport) BOOL __stdcall SetWorldTransform(HDC hdc, const XFORM * lpxf); 
#line 4958
__declspec(dllimport) BOOL __stdcall ModifyWorldTransform(HDC hdc, const XFORM * lpxf, DWORD mode); 
#line 4959
__declspec(dllimport) BOOL __stdcall CombineTransform(LPXFORM lpxfOut, const XFORM * lpxf1, const XFORM * lpxf2); 
#line 4966
__declspec(dllimport) HBITMAP __stdcall CreateDIBSection(HDC hdc, const BITMAPINFO * pbmi, UINT usage, void ** ppvBits, HANDLE hSection, DWORD offset); 
#line 4978
__declspec(dllimport) UINT __stdcall GetDIBColorTable(HDC hdc, UINT iStart, UINT cEntries, RGBQUAD * prgbq); 
#line 4982
__declspec(dllimport) UINT __stdcall SetDIBColorTable(HDC hdc, UINT iStart, UINT cEntries, const RGBQUAD * prgbq); 
#line 5035
typedef 
#line 5022
struct tagCOLORADJUSTMENT { 
#line 5023
WORD caSize; 
#line 5024
WORD caFlags; 
#line 5025
WORD caIlluminantIndex; 
#line 5026
WORD caRedGamma; 
#line 5027
WORD caGreenGamma; 
#line 5028
WORD caBlueGamma; 
#line 5029
WORD caReferenceBlack; 
#line 5030
WORD caReferenceWhite; 
#line 5031
SHORT caContrast; 
#line 5032
SHORT caBrightness; 
#line 5033
SHORT caColorfulness; 
#line 5034
SHORT caRedGreenTint; 
#line 5035
} COLORADJUSTMENT, *PCOLORADJUSTMENT, *LPCOLORADJUSTMENT; 
#line 5037
__declspec(dllimport) BOOL __stdcall SetColorAdjustment(HDC hdc, const COLORADJUSTMENT * lpca); 
#line 5038
__declspec(dllimport) BOOL __stdcall GetColorAdjustment(HDC hdc, LPCOLORADJUSTMENT lpca); 
#line 5039
__declspec(dllimport) HPALETTE __stdcall CreateHalftonePalette(HDC hdc); 
#line 5042
typedef BOOL (__stdcall *ABORTPROC)(HDC, int); 
#line 5055 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\wingdi.h"
typedef 
#line 5047 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\wingdi.h"
struct _DOCINFOA { 
#line 5048
int cbSize; 
#line 5049
LPCSTR lpszDocName; 
#line 5050
LPCSTR lpszOutput; 
#line 5052
LPCSTR lpszDatatype; 
#line 5053
DWORD fwType; 
#line 5055 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\wingdi.h"
} DOCINFOA, *LPDOCINFOA; 
#line 5064 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\wingdi.h"
typedef 
#line 5056 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\wingdi.h"
struct _DOCINFOW { 
#line 5057
int cbSize; 
#line 5058
LPCWSTR lpszDocName; 
#line 5059
LPCWSTR lpszOutput; 
#line 5061
LPCWSTR lpszDatatype; 
#line 5062
DWORD fwType; 
#line 5064 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\wingdi.h"
} DOCINFOW, *LPDOCINFOW; 
#line 5069
typedef DOCINFOA DOCINFO; 
#line 5070
typedef LPDOCINFOA LPDOCINFO; 
#line 5078 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\wingdi.h"
__declspec(dllimport) int __stdcall StartDocA(HDC hdc, const DOCINFOA * lpdi); 
#line 5079
__declspec(dllimport) int __stdcall StartDocW(HDC hdc, const DOCINFOW * lpdi); 
#line 5085 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\wingdi.h"
__declspec(dllimport) int __stdcall EndDoc(HDC hdc); 
#line 5086
__declspec(dllimport) int __stdcall StartPage(HDC hdc); 
#line 5087
__declspec(dllimport) int __stdcall EndPage(HDC hdc); 
#line 5088
__declspec(dllimport) int __stdcall AbortDoc(HDC hdc); 
#line 5089
__declspec(dllimport) int __stdcall SetAbortProc(HDC hdc, ABORTPROC proc); 
#line 5091
__declspec(dllimport) BOOL __stdcall AbortPath(HDC hdc); 
#line 5092
__declspec(dllimport) BOOL __stdcall ArcTo(HDC hdc, int left, int top, int right, int bottom, int xr1, int yr1, int xr2, int yr2); 
#line 5093
__declspec(dllimport) BOOL __stdcall BeginPath(HDC hdc); 
#line 5094
__declspec(dllimport) BOOL __stdcall CloseFigure(HDC hdc); 
#line 5095
__declspec(dllimport) BOOL __stdcall EndPath(HDC hdc); 
#line 5096
__declspec(dllimport) BOOL __stdcall FillPath(HDC hdc); 
#line 5097
__declspec(dllimport) BOOL __stdcall FlattenPath(HDC hdc); 
#line 5098
__declspec(dllimport) int __stdcall GetPath(HDC hdc, LPPOINT apt, LPBYTE aj, int cpt); 
#line 5099
__declspec(dllimport) HRGN __stdcall PathToRegion(HDC hdc); 
#line 5100
__declspec(dllimport) BOOL __stdcall PolyDraw(HDC hdc, const POINT * apt, const BYTE * aj, int cpt); 
#line 5101
__declspec(dllimport) BOOL __stdcall SelectClipPath(HDC hdc, int mode); 
#line 5102
__declspec(dllimport) int __stdcall SetArcDirection(HDC hdc, int dir); 
#line 5103
__declspec(dllimport) BOOL __stdcall SetMiterLimit(HDC hdc, FLOAT limit, PFLOAT old); 
#line 5104
__declspec(dllimport) BOOL __stdcall StrokeAndFillPath(HDC hdc); 
#line 5105
__declspec(dllimport) BOOL __stdcall StrokePath(HDC hdc); 
#line 5106
__declspec(dllimport) BOOL __stdcall WidenPath(HDC hdc); 
#line 5107
__declspec(dllimport) HPEN __stdcall ExtCreatePen(DWORD iPenStyle, DWORD cWidth, const LOGBRUSH * plbrush, DWORD cStyle, const DWORD * pstyle); 
#line 5112
__declspec(dllimport) BOOL __stdcall GetMiterLimit(HDC hdc, PFLOAT plimit); 
#line 5113
__declspec(dllimport) int __stdcall GetArcDirection(HDC hdc); 
#line 5115
__declspec(dllimport) int __stdcall GetObjectA(HANDLE h, int c, LPVOID pv); 
#line 5116
__declspec(dllimport) int __stdcall GetObjectW(HANDLE h, int c, LPVOID pv); 
#line 5145 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\wingdi.h"
__declspec(dllimport) BOOL __stdcall MoveToEx(HDC hdc, int x, int y, LPPOINT lppt); 
#line 5146
__declspec(dllimport) BOOL __stdcall TextOutA(HDC hdc, int x, int y, LPCSTR lpString, int c); 
#line 5147
__declspec(dllimport) BOOL __stdcall TextOutW(HDC hdc, int x, int y, LPCWSTR lpString, int c); 
#line 5153 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\wingdi.h"
__declspec(dllimport) BOOL __stdcall ExtTextOutA(HDC hdc, int x, int y, UINT options, const RECT * lprect, LPCSTR lpString, UINT c, const INT * lpDx); 
#line 5154
__declspec(dllimport) BOOL __stdcall ExtTextOutW(HDC hdc, int x, int y, UINT options, const RECT * lprect, LPCWSTR lpString, UINT c, const INT * lpDx); 
#line 5160 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\wingdi.h"
__declspec(dllimport) BOOL __stdcall PolyTextOutA(HDC hdc, const POLYTEXTA * ppt, int nstrings); 
#line 5161
__declspec(dllimport) BOOL __stdcall PolyTextOutW(HDC hdc, const POLYTEXTW * ppt, int nstrings); 
#line 5168 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\wingdi.h"
__declspec(dllimport) HRGN __stdcall CreatePolygonRgn(const POINT * pptl, int cPoint, int iMode); 
#line 5171
__declspec(dllimport) BOOL __stdcall DPtoLP(HDC hdc, LPPOINT lppt, int c); 
#line 5172
__declspec(dllimport) BOOL __stdcall LPtoDP(HDC hdc, LPPOINT lppt, int c); 
#line 5173
__declspec(dllimport) BOOL __stdcall Polygon(HDC hdc, const POINT * apt, int cpt); 
#line 5174
__declspec(dllimport) BOOL __stdcall Polyline(HDC hdc, const POINT * apt, int cpt); 
#line 5176
__declspec(dllimport) BOOL __stdcall PolyBezier(HDC hdc, const POINT * apt, DWORD cpt); 
#line 5177
__declspec(dllimport) BOOL __stdcall PolyBezierTo(HDC hdc, const POINT * apt, DWORD cpt); 
#line 5178
__declspec(dllimport) BOOL __stdcall PolylineTo(HDC hdc, const POINT * apt, DWORD cpt); 
#line 5180
__declspec(dllimport) BOOL __stdcall SetViewportExtEx(HDC hdc, int x, int y, LPSIZE lpsz); 
#line 5181
__declspec(dllimport) BOOL __stdcall SetViewportOrgEx(HDC hdc, int x, int y, LPPOINT lppt); 
#line 5182
__declspec(dllimport) BOOL __stdcall SetWindowExtEx(HDC hdc, int x, int y, LPSIZE lpsz); 
#line 5183
__declspec(dllimport) BOOL __stdcall SetWindowOrgEx(HDC hdc, int x, int y, LPPOINT lppt); 
#line 5185
__declspec(dllimport) BOOL __stdcall OffsetViewportOrgEx(HDC hdc, int x, int y, LPPOINT lppt); 
#line 5186
__declspec(dllimport) BOOL __stdcall OffsetWindowOrgEx(HDC hdc, int x, int y, LPPOINT lppt); 
#line 5187
__declspec(dllimport) BOOL __stdcall ScaleViewportExtEx(HDC hdc, int xn, int dx, int yn, int yd, LPSIZE lpsz); 
#line 5188
__declspec(dllimport) BOOL __stdcall ScaleWindowExtEx(HDC hdc, int xn, int xd, int yn, int yd, LPSIZE lpsz); 
#line 5189
__declspec(dllimport) BOOL __stdcall SetBitmapDimensionEx(HBITMAP hbm, int w, int h, LPSIZE lpsz); 
#line 5190
__declspec(dllimport) BOOL __stdcall SetBrushOrgEx(HDC hdc, int x, int y, LPPOINT lppt); 
#line 5192
__declspec(dllimport) int __stdcall GetTextFaceA(HDC hdc, int c, LPSTR lpName); 
#line 5193
__declspec(dllimport) int __stdcall GetTextFaceW(HDC hdc, int c, LPWSTR lpName); 
#line 5206 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\wingdi.h"
typedef 
#line 5202
struct tagKERNINGPAIR { 
#line 5203
WORD wFirst; 
#line 5204
WORD wSecond; 
#line 5205
int iKernAmount; 
#line 5206
} KERNINGPAIR, *LPKERNINGPAIR; 
#line 5208
__declspec(dllimport) DWORD __stdcall GetKerningPairsA(HDC hdc, DWORD nPairs, LPKERNINGPAIR lpKernPair); 
#line 5211
__declspec(dllimport) DWORD __stdcall GetKerningPairsW(HDC hdc, DWORD nPairs, LPKERNINGPAIR lpKernPair); 
#line 5221 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\wingdi.h"
__declspec(dllimport) BOOL __stdcall GetDCOrgEx(HDC hdc, LPPOINT lppt); 
#line 5222
__declspec(dllimport) BOOL __stdcall FixBrushOrgEx(HDC hdc, int x, int y, LPPOINT ptl); 
#line 5223
__declspec(dllimport) BOOL __stdcall UnrealizeObject(HGDIOBJ h); 
#line 5225
__declspec(dllimport) BOOL __stdcall GdiFlush(); 
#line 5226
__declspec(dllimport) DWORD __stdcall GdiSetBatchLimit(DWORD dw); 
#line 5227
__declspec(dllimport) DWORD __stdcall GdiGetBatchLimit(); 
#line 5236
typedef int (__stdcall *ICMENUMPROCA)(LPSTR, LPARAM); 
#line 5237
typedef int (__stdcall *ICMENUMPROCW)(LPWSTR, LPARAM); 
#line 5244 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\wingdi.h"
__declspec(dllimport) int __stdcall SetICMMode(HDC hdc, int mode); 
#line 5245
__declspec(dllimport) BOOL __stdcall CheckColorsInGamut(HDC hdc, LPRGBTRIPLE lpRGBTriple, LPVOID dlpBuffer, DWORD nCount); 
#line 5250
__declspec(dllimport) HCOLORSPACE __stdcall GetColorSpace(HDC hdc); 
#line 5251
__declspec(dllimport) BOOL __stdcall GetLogColorSpaceA(HCOLORSPACE hColorSpace, LPLOGCOLORSPACEA lpBuffer, DWORD nSize); 
#line 5254
__declspec(dllimport) BOOL __stdcall GetLogColorSpaceW(HCOLORSPACE hColorSpace, LPLOGCOLORSPACEW lpBuffer, DWORD nSize); 
#line 5263 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\wingdi.h"
__declspec(dllimport) HCOLORSPACE __stdcall CreateColorSpaceA(LPLOGCOLORSPACEA lplcs); 
#line 5264
__declspec(dllimport) HCOLORSPACE __stdcall CreateColorSpaceW(LPLOGCOLORSPACEW lplcs); 
#line 5270 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\wingdi.h"
__declspec(dllimport) HCOLORSPACE __stdcall SetColorSpace(HDC hdc, HCOLORSPACE hcs); 
#line 5271
__declspec(dllimport) BOOL __stdcall DeleteColorSpace(HCOLORSPACE hcs); 
#line 5272
__declspec(dllimport) BOOL __stdcall GetICMProfileA(HDC hdc, LPDWORD pBufSize, LPSTR pszFilename); 
#line 5275
__declspec(dllimport) BOOL __stdcall GetICMProfileW(HDC hdc, LPDWORD pBufSize, LPWSTR pszFilename); 
#line 5284 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\wingdi.h"
__declspec(dllimport) BOOL __stdcall SetICMProfileA(HDC hdc, LPSTR lpFileName); 
#line 5285
__declspec(dllimport) BOOL __stdcall SetICMProfileW(HDC hdc, LPWSTR lpFileName); 
#line 5291 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\wingdi.h"
__declspec(dllimport) BOOL __stdcall GetDeviceGammaRamp(HDC hdc, LPVOID lpRamp); 
#line 5292
__declspec(dllimport) BOOL __stdcall SetDeviceGammaRamp(HDC hdc, LPVOID lpRamp); 
#line 5293
__declspec(dllimport) BOOL __stdcall ColorMatchToTarget(HDC hdc, HDC hdcTarget, DWORD action); 
#line 5294
__declspec(dllimport) int __stdcall EnumICMProfilesA(HDC hdc, ICMENUMPROCA proc, LPARAM param); 
#line 5295
__declspec(dllimport) int __stdcall EnumICMProfilesW(HDC hdc, ICMENUMPROCW proc, LPARAM param); 
#line 5302 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\wingdi.h"
__declspec(dllimport) BOOL __stdcall UpdateICMRegKeyA(DWORD reserved, LPSTR lpszCMID, LPSTR lpszFileName, UINT command); 
#line 5304
__declspec(dllimport) BOOL __stdcall UpdateICMRegKeyW(DWORD reserved, LPWSTR lpszCMID, LPWSTR lpszFileName, UINT command); 
#line 5312 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\wingdi.h"
#pragma deprecated (UpdateICMRegKeyW)
#pragma deprecated (UpdateICMRegKeyA)
#line 5319 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\wingdi.h"
__declspec(dllimport) BOOL __stdcall ColorCorrectPalette(HDC hdc, HPALETTE hPal, DWORD deFirst, DWORD num); 
#line 5489 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\wingdi.h"
typedef 
#line 5484
struct tagEMR { 
#line 5486
DWORD iType; 
#line 5487
DWORD nSize; 
#line 5489
} EMR, *PEMR; 
#line 5502
typedef 
#line 5493
struct tagEMRTEXT { 
#line 5495
POINTL ptlReference; 
#line 5496
DWORD nChars; 
#line 5497
DWORD offString; 
#line 5498
DWORD fOptions; 
#line 5499
RECTL rcl; 
#line 5500
DWORD offDx; 
#line 5502
} EMRTEXT, *PEMRTEXT; 
#line 5509
typedef 
#line 5506
struct tagABORTPATH { 
#line 5508
EMR emr; 
#line 5509
} EMRABORTPATH, *PEMRABORTPATH, 
#line 5510
EMRBEGINPATH, *PEMRBEGINPATH, 
#line 5511
EMRENDPATH, *PEMRENDPATH, 
#line 5512
EMRCLOSEFIGURE, *PEMRCLOSEFIGURE, 
#line 5513
EMRFLATTENPATH, *PEMRFLATTENPATH, 
#line 5514
EMRWIDENPATH, *PEMRWIDENPATH, 
#line 5515
EMRSETMETARGN, *PEMRSETMETARGN, 
#line 5516
EMRSAVEDC, *PEMRSAVEDC, 
#line 5517
EMRREALIZEPALETTE, *PEMRREALIZEPALETTE; 
#line 5523
typedef 
#line 5519
struct tagEMRSELECTCLIPPATH { 
#line 5521
EMR emr; 
#line 5522
DWORD iMode; 
#line 5523
} EMRSELECTCLIPPATH, *PEMRSELECTCLIPPATH, 
#line 5524
EMRSETBKMODE, *PEMRSETBKMODE, 
#line 5525
EMRSETMAPMODE, *PEMRSETMAPMODE, 
#line 5527
EMRSETLAYOUT, *PEMRSETLAYOUT, 
#line 5529 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\wingdi.h"
EMRSETPOLYFILLMODE, *PEMRSETPOLYFILLMODE, 
#line 5530
EMRSETROP2, *PEMRSETROP2, 
#line 5531
EMRSETSTRETCHBLTMODE, *PEMRSETSTRETCHBLTMODE, 
#line 5532
EMRSETICMMODE, *PEMRSETICMMODE, 
#line 5533
EMRSETTEXTALIGN, *PEMRSETTEXTALIGN; 
#line 5539
typedef 
#line 5535
struct tagEMRSETMITERLIMIT { 
#line 5537
EMR emr; 
#line 5538
FLOAT eMiterLimit; 
#line 5539
} EMRSETMITERLIMIT, *PEMRSETMITERLIMIT; 
#line 5545
typedef 
#line 5541
struct tagEMRRESTOREDC { 
#line 5543
EMR emr; 
#line 5544
LONG iRelative; 
#line 5545
} EMRRESTOREDC, *PEMRRESTOREDC; 
#line 5552
typedef 
#line 5547
struct tagEMRSETARCDIRECTION { 
#line 5549
EMR emr; 
#line 5550
DWORD iArcDirection; 
#line 5552
} EMRSETARCDIRECTION, *PEMRSETARCDIRECTION; 
#line 5558
typedef 
#line 5554
struct tagEMRSETMAPPERFLAGS { 
#line 5556
EMR emr; 
#line 5557
DWORD dwFlags; 
#line 5558
} EMRSETMAPPERFLAGS, *PEMRSETMAPPERFLAGS; 
#line 5564
typedef 
#line 5560
struct tagEMRSETTEXTCOLOR { 
#line 5562
EMR emr; 
#line 5563
COLORREF crColor; 
#line 5564
} EMRSETBKCOLOR, *PEMRSETBKCOLOR, 
#line 5565
EMRSETTEXTCOLOR, *PEMRSETTEXTCOLOR; 
#line 5571
typedef 
#line 5567
struct tagEMRSELECTOBJECT { 
#line 5569
EMR emr; 
#line 5570
DWORD ihObject; 
#line 5571
} EMRSELECTOBJECT, *PEMRSELECTOBJECT, 
#line 5572
EMRDELETEOBJECT, *PEMRDELETEOBJECT; 
#line 5578
typedef 
#line 5574
struct tagEMRSELECTPALETTE { 
#line 5576
EMR emr; 
#line 5577
DWORD ihPal; 
#line 5578
} EMRSELECTPALETTE, *PEMRSELECTPALETTE; 
#line 5585
typedef 
#line 5580
struct tagEMRRESIZEPALETTE { 
#line 5582
EMR emr; 
#line 5583
DWORD ihPal; 
#line 5584
DWORD cEntries; 
#line 5585
} EMRRESIZEPALETTE, *PEMRRESIZEPALETTE; 
#line 5594
typedef 
#line 5587
struct tagEMRSETPALETTEENTRIES { 
#line 5589
EMR emr; 
#line 5590
DWORD ihPal; 
#line 5591
DWORD iStart; 
#line 5592
DWORD cEntries; 
#line 5593
PALETTEENTRY aPalEntries[1]; 
#line 5594
} EMRSETPALETTEENTRIES, *PEMRSETPALETTEENTRIES; 
#line 5600
typedef 
#line 5596
struct tagEMRSETCOLORADJUSTMENT { 
#line 5598
EMR emr; 
#line 5599
COLORADJUSTMENT ColorAdjustment; 
#line 5600
} EMRSETCOLORADJUSTMENT, *PEMRSETCOLORADJUSTMENT; 
#line 5607
typedef 
#line 5602
struct tagEMRGDICOMMENT { 
#line 5604
EMR emr; 
#line 5605
DWORD cbData; 
#line 5606
BYTE Data[1]; 
#line 5607
} EMRGDICOMMENT, *PEMRGDICOMMENT; 
#line 5617
typedef 
#line 5609
struct tagEMREOF { 
#line 5611
EMR emr; 
#line 5612
DWORD nPalEntries; 
#line 5613
DWORD offPalEntries; 
#line 5614
DWORD nSizeLast; 
#line 5617
} EMREOF, *PEMREOF; 
#line 5623
typedef 
#line 5619
struct tagEMRLINETO { 
#line 5621
EMR emr; 
#line 5622
POINTL ptl; 
#line 5623
} EMRLINETO, *PEMRLINETO, 
#line 5624
EMRMOVETOEX, *PEMRMOVETOEX; 
#line 5630
typedef 
#line 5626
struct tagEMROFFSETCLIPRGN { 
#line 5628
EMR emr; 
#line 5629
POINTL ptlOffset; 
#line 5630
} EMROFFSETCLIPRGN, *PEMROFFSETCLIPRGN; 
#line 5636
typedef 
#line 5632
struct tagEMRFILLPATH { 
#line 5634
EMR emr; 
#line 5635
RECTL rclBounds; 
#line 5636
} EMRFILLPATH, *PEMRFILLPATH, 
#line 5637
EMRSTROKEANDFILLPATH, *PEMRSTROKEANDFILLPATH, 
#line 5638
EMRSTROKEPATH, *PEMRSTROKEPATH; 
#line 5644
typedef 
#line 5640
struct tagEMREXCLUDECLIPRECT { 
#line 5642
EMR emr; 
#line 5643
RECTL rclClip; 
#line 5644
} EMREXCLUDECLIPRECT, *PEMREXCLUDECLIPRECT, 
#line 5645
EMRINTERSECTCLIPRECT, *PEMRINTERSECTCLIPRECT; 
#line 5651
typedef 
#line 5647
struct tagEMRSETVIEWPORTORGEX { 
#line 5649
EMR emr; 
#line 5650
POINTL ptlOrigin; 
#line 5651
} EMRSETVIEWPORTORGEX, *PEMRSETVIEWPORTORGEX, 
#line 5652
EMRSETWINDOWORGEX, *PEMRSETWINDOWORGEX, 
#line 5653
EMRSETBRUSHORGEX, *PEMRSETBRUSHORGEX; 
#line 5659
typedef 
#line 5655
struct tagEMRSETVIEWPORTEXTEX { 
#line 5657
EMR emr; 
#line 5658
SIZEL szlExtent; 
#line 5659
} EMRSETVIEWPORTEXTEX, *PEMRSETVIEWPORTEXTEX, 
#line 5660
EMRSETWINDOWEXTEX, *PEMRSETWINDOWEXTEX; 
#line 5669
typedef 
#line 5662
struct tagEMRSCALEVIEWPORTEXTEX { 
#line 5664
EMR emr; 
#line 5665
LONG xNum; 
#line 5666
LONG xDenom; 
#line 5667
LONG yNum; 
#line 5668
LONG yDenom; 
#line 5669
} EMRSCALEVIEWPORTEXTEX, *PEMRSCALEVIEWPORTEXTEX, 
#line 5670
EMRSCALEWINDOWEXTEX, *PEMRSCALEWINDOWEXTEX; 
#line 5676
typedef 
#line 5672
struct tagEMRSETWORLDTRANSFORM { 
#line 5674
EMR emr; 
#line 5675
XFORM xform; 
#line 5676
} EMRSETWORLDTRANSFORM, *PEMRSETWORLDTRANSFORM; 
#line 5683
typedef 
#line 5678
struct tagEMRMODIFYWORLDTRANSFORM { 
#line 5680
EMR emr; 
#line 5681
XFORM xform; 
#line 5682
DWORD iMode; 
#line 5683
} EMRMODIFYWORLDTRANSFORM, *PEMRMODIFYWORLDTRANSFORM; 
#line 5690
typedef 
#line 5685
struct tagEMRSETPIXELV { 
#line 5687
EMR emr; 
#line 5688
POINTL ptlPixel; 
#line 5689
COLORREF crColor; 
#line 5690
} EMRSETPIXELV, *PEMRSETPIXELV; 
#line 5698
typedef 
#line 5692
struct tagEMREXTFLOODFILL { 
#line 5694
EMR emr; 
#line 5695
POINTL ptlStart; 
#line 5696
COLORREF crColor; 
#line 5697
DWORD iMode; 
#line 5698
} EMREXTFLOODFILL, *PEMREXTFLOODFILL; 
#line 5704
typedef 
#line 5700
struct tagEMRELLIPSE { 
#line 5702
EMR emr; 
#line 5703
RECTL rclBox; 
#line 5704
} EMRELLIPSE, *PEMRELLIPSE, 
#line 5705
EMRRECTANGLE, *PEMRRECTANGLE; 
#line 5713
typedef 
#line 5708
struct tagEMRROUNDRECT { 
#line 5710
EMR emr; 
#line 5711
RECTL rclBox; 
#line 5712
SIZEL szlCorner; 
#line 5713
} EMRROUNDRECT, *PEMRROUNDRECT; 
#line 5721
typedef 
#line 5715
struct tagEMRARC { 
#line 5717
EMR emr; 
#line 5718
RECTL rclBox; 
#line 5719
POINTL ptlStart; 
#line 5720
POINTL ptlEnd; 
#line 5721
} EMRARC, *PEMRARC, 
#line 5722
EMRARCTO, *PEMRARCTO, 
#line 5723
EMRCHORD, *PEMRCHORD, 
#line 5724
EMRPIE, *PEMRPIE; 
#line 5733
typedef 
#line 5726
struct tagEMRANGLEARC { 
#line 5728
EMR emr; 
#line 5729
POINTL ptlCenter; 
#line 5730
DWORD nRadius; 
#line 5731
FLOAT eStartAngle; 
#line 5732
FLOAT eSweepAngle; 
#line 5733
} EMRANGLEARC, *PEMRANGLEARC; 
#line 5741
typedef 
#line 5735
struct tagEMRPOLYLINE { 
#line 5737
EMR emr; 
#line 5738
RECTL rclBounds; 
#line 5739
DWORD cptl; 
#line 5740
POINTL aptl[1]; 
#line 5741
} EMRPOLYLINE, *PEMRPOLYLINE, 
#line 5742
EMRPOLYBEZIER, *PEMRPOLYBEZIER, 
#line 5743
EMRPOLYGON, *PEMRPOLYGON, 
#line 5744
EMRPOLYBEZIERTO, *PEMRPOLYBEZIERTO, 
#line 5745
EMRPOLYLINETO, *PEMRPOLYLINETO; 
#line 5753
typedef 
#line 5747
struct tagEMRPOLYLINE16 { 
#line 5749
EMR emr; 
#line 5750
RECTL rclBounds; 
#line 5751
DWORD cpts; 
#line 5752
POINTS apts[1]; 
#line 5753
} EMRPOLYLINE16, *PEMRPOLYLINE16, 
#line 5754
EMRPOLYBEZIER16, *PEMRPOLYBEZIER16, 
#line 5755
EMRPOLYGON16, *PEMRPOLYGON16, 
#line 5756
EMRPOLYBEZIERTO16, *PEMRPOLYBEZIERTO16, 
#line 5757
EMRPOLYLINETO16, *PEMRPOLYLINETO16; 
#line 5766
typedef 
#line 5759
struct tagEMRPOLYDRAW { 
#line 5761
EMR emr; 
#line 5762
RECTL rclBounds; 
#line 5763
DWORD cptl; 
#line 5764
POINTL aptl[1]; 
#line 5765
BYTE abTypes[1]; 
#line 5766
} EMRPOLYDRAW, *PEMRPOLYDRAW; 
#line 5775
typedef 
#line 5768
struct tagEMRPOLYDRAW16 { 
#line 5770
EMR emr; 
#line 5771
RECTL rclBounds; 
#line 5772
DWORD cpts; 
#line 5773
POINTS apts[1]; 
#line 5774
BYTE abTypes[1]; 
#line 5775
} EMRPOLYDRAW16, *PEMRPOLYDRAW16; 
#line 5785
typedef 
#line 5777
struct tagEMRPOLYPOLYLINE { 
#line 5779
EMR emr; 
#line 5780
RECTL rclBounds; 
#line 5781
DWORD nPolys; 
#line 5782
DWORD cptl; 
#line 5783
DWORD aPolyCounts[1]; 
#line 5784
POINTL aptl[1]; 
#line 5785
} EMRPOLYPOLYLINE, *PEMRPOLYPOLYLINE, 
#line 5786
EMRPOLYPOLYGON, *PEMRPOLYPOLYGON; 
#line 5796
typedef 
#line 5788
struct tagEMRPOLYPOLYLINE16 { 
#line 5790
EMR emr; 
#line 5791
RECTL rclBounds; 
#line 5792
DWORD nPolys; 
#line 5793
DWORD cpts; 
#line 5794
DWORD aPolyCounts[1]; 
#line 5795
POINTS apts[1]; 
#line 5796
} EMRPOLYPOLYLINE16, *PEMRPOLYPOLYLINE16, 
#line 5797
EMRPOLYPOLYGON16, *PEMRPOLYPOLYGON16; 
#line 5805
typedef 
#line 5799
struct tagEMRINVERTRGN { 
#line 5801
EMR emr; 
#line 5802
RECTL rclBounds; 
#line 5803
DWORD cbRgnData; 
#line 5804
BYTE RgnData[1]; 
#line 5805
} EMRINVERTRGN, *PEMRINVERTRGN, 
#line 5806
EMRPAINTRGN, *PEMRPAINTRGN; 
#line 5815
typedef 
#line 5808
struct tagEMRFILLRGN { 
#line 5810
EMR emr; 
#line 5811
RECTL rclBounds; 
#line 5812
DWORD cbRgnData; 
#line 5813
DWORD ihBrush; 
#line 5814
BYTE RgnData[1]; 
#line 5815
} EMRFILLRGN, *PEMRFILLRGN; 
#line 5825
typedef 
#line 5817
struct tagEMRFRAMERGN { 
#line 5819
EMR emr; 
#line 5820
RECTL rclBounds; 
#line 5821
DWORD cbRgnData; 
#line 5822
DWORD ihBrush; 
#line 5823
SIZEL szlStroke; 
#line 5824
BYTE RgnData[1]; 
#line 5825
} EMRFRAMERGN, *PEMRFRAMERGN; 
#line 5833
typedef 
#line 5827
struct tagEMREXTSELECTCLIPRGN { 
#line 5829
EMR emr; 
#line 5830
DWORD cbRgnData; 
#line 5831
DWORD iMode; 
#line 5832
BYTE RgnData[1]; 
#line 5833
} EMREXTSELECTCLIPRGN, *PEMREXTSELECTCLIPRGN; 
#line 5844
typedef 
#line 5835
struct tagEMREXTTEXTOUTA { 
#line 5837
EMR emr; 
#line 5838
RECTL rclBounds; 
#line 5839
DWORD iGraphicsMode; 
#line 5840
FLOAT exScale; 
#line 5841
FLOAT eyScale; 
#line 5842
EMRTEXT emrtext; 
#line 5844
} EMREXTTEXTOUTA, *PEMREXTTEXTOUTA, 
#line 5845
EMREXTTEXTOUTW, *PEMREXTTEXTOUTW; 
#line 5857
typedef 
#line 5847
struct tagEMRPOLYTEXTOUTA { 
#line 5849
EMR emr; 
#line 5850
RECTL rclBounds; 
#line 5851
DWORD iGraphicsMode; 
#line 5852
FLOAT exScale; 
#line 5853
FLOAT eyScale; 
#line 5854
LONG cStrings; 
#line 5855
EMRTEXT aemrtext[1]; 
#line 5857
} EMRPOLYTEXTOUTA, *PEMRPOLYTEXTOUTA, 
#line 5858
EMRPOLYTEXTOUTW, *PEMRPOLYTEXTOUTW; 
#line 5879
typedef 
#line 5860
struct tagEMRBITBLT { 
#line 5862
EMR emr; 
#line 5863
RECTL rclBounds; 
#line 5864
LONG xDest; 
#line 5865
LONG yDest; 
#line 5866
LONG cxDest; 
#line 5867
LONG cyDest; 
#line 5868
DWORD dwRop; 
#line 5869
LONG xSrc; 
#line 5870
LONG ySrc; 
#line 5871
XFORM xformSrc; 
#line 5872
COLORREF crBkColorSrc; 
#line 5873
DWORD iUsageSrc; 
#line 5875
DWORD offBmiSrc; 
#line 5876
DWORD cbBmiSrc; 
#line 5877
DWORD offBitsSrc; 
#line 5878
DWORD cbBitsSrc; 
#line 5879
} EMRBITBLT, *PEMRBITBLT; 
#line 5902
typedef 
#line 5881
struct tagEMRSTRETCHBLT { 
#line 5883
EMR emr; 
#line 5884
RECTL rclBounds; 
#line 5885
LONG xDest; 
#line 5886
LONG yDest; 
#line 5887
LONG cxDest; 
#line 5888
LONG cyDest; 
#line 5889
DWORD dwRop; 
#line 5890
LONG xSrc; 
#line 5891
LONG ySrc; 
#line 5892
XFORM xformSrc; 
#line 5893
COLORREF crBkColorSrc; 
#line 5894
DWORD iUsageSrc; 
#line 5896
DWORD offBmiSrc; 
#line 5897
DWORD cbBmiSrc; 
#line 5898
DWORD offBitsSrc; 
#line 5899
DWORD cbBitsSrc; 
#line 5900
LONG cxSrc; 
#line 5901
LONG cySrc; 
#line 5902
} EMRSTRETCHBLT, *PEMRSTRETCHBLT; 
#line 5930
typedef 
#line 5904
struct tagEMRMASKBLT { 
#line 5906
EMR emr; 
#line 5907
RECTL rclBounds; 
#line 5908
LONG xDest; 
#line 5909
LONG yDest; 
#line 5910
LONG cxDest; 
#line 5911
LONG cyDest; 
#line 5912
DWORD dwRop; 
#line 5913
LONG xSrc; 
#line 5914
LONG ySrc; 
#line 5915
XFORM xformSrc; 
#line 5916
COLORREF crBkColorSrc; 
#line 5917
DWORD iUsageSrc; 
#line 5919
DWORD offBmiSrc; 
#line 5920
DWORD cbBmiSrc; 
#line 5921
DWORD offBitsSrc; 
#line 5922
DWORD cbBitsSrc; 
#line 5923
LONG xMask; 
#line 5924
LONG yMask; 
#line 5925
DWORD iUsageMask; 
#line 5926
DWORD offBmiMask; 
#line 5927
DWORD cbBmiMask; 
#line 5928
DWORD offBitsMask; 
#line 5929
DWORD cbBitsMask; 
#line 5930
} EMRMASKBLT, *PEMRMASKBLT; 
#line 5956
typedef 
#line 5932
struct tagEMRPLGBLT { 
#line 5934
EMR emr; 
#line 5935
RECTL rclBounds; 
#line 5936
POINTL aptlDest[3]; 
#line 5937
LONG xSrc; 
#line 5938
LONG ySrc; 
#line 5939
LONG cxSrc; 
#line 5940
LONG cySrc; 
#line 5941
XFORM xformSrc; 
#line 5942
COLORREF crBkColorSrc; 
#line 5943
DWORD iUsageSrc; 
#line 5945
DWORD offBmiSrc; 
#line 5946
DWORD cbBmiSrc; 
#line 5947
DWORD offBitsSrc; 
#line 5948
DWORD cbBitsSrc; 
#line 5949
LONG xMask; 
#line 5950
LONG yMask; 
#line 5951
DWORD iUsageMask; 
#line 5952
DWORD offBmiMask; 
#line 5953
DWORD cbBmiMask; 
#line 5954
DWORD offBitsMask; 
#line 5955
DWORD cbBitsMask; 
#line 5956
} EMRPLGBLT, *PEMRPLGBLT; 
#line 5975
typedef 
#line 5958
struct tagEMRSETDIBITSTODEVICE { 
#line 5960
EMR emr; 
#line 5961
RECTL rclBounds; 
#line 5962
LONG xDest; 
#line 5963
LONG yDest; 
#line 5964
LONG xSrc; 
#line 5965
LONG ySrc; 
#line 5966
LONG cxSrc; 
#line 5967
LONG cySrc; 
#line 5968
DWORD offBmiSrc; 
#line 5969
DWORD cbBmiSrc; 
#line 5970
DWORD offBitsSrc; 
#line 5971
DWORD cbBitsSrc; 
#line 5972
DWORD iUsageSrc; 
#line 5973
DWORD iStartScan; 
#line 5974
DWORD cScans; 
#line 5975
} EMRSETDIBITSTODEVICE, *PEMRSETDIBITSTODEVICE; 
#line 5995
typedef 
#line 5977
struct tagEMRSTRETCHDIBITS { 
#line 5979
EMR emr; 
#line 5980
RECTL rclBounds; 
#line 5981
LONG xDest; 
#line 5982
LONG yDest; 
#line 5983
LONG xSrc; 
#line 5984
LONG ySrc; 
#line 5985
LONG cxSrc; 
#line 5986
LONG cySrc; 
#line 5987
DWORD offBmiSrc; 
#line 5988
DWORD cbBmiSrc; 
#line 5989
DWORD offBitsSrc; 
#line 5990
DWORD cbBitsSrc; 
#line 5991
DWORD iUsageSrc; 
#line 5992
DWORD dwRop; 
#line 5993
LONG cxDest; 
#line 5994
LONG cyDest; 
#line 5995
} EMRSTRETCHDIBITS, *PEMRSTRETCHDIBITS; 
#line 6002
typedef 
#line 5997
struct tagEMREXTCREATEFONTINDIRECTW { 
#line 5999
EMR emr; 
#line 6000
DWORD ihFont; 
#line 6001
EXTLOGFONTW elfw; 
#line 6002
} EMREXTCREATEFONTINDIRECTW, *PEMREXTCREATEFONTINDIRECTW; 
#line 6010
typedef 
#line 6004
struct tagEMRCREATEPALETTE { 
#line 6006
EMR emr; 
#line 6007
DWORD ihPal; 
#line 6008
LOGPALETTE lgpl; 
#line 6010
} EMRCREATEPALETTE, *PEMRCREATEPALETTE; 
#line 6017
typedef 
#line 6012
struct tagEMRCREATEPEN { 
#line 6014
EMR emr; 
#line 6015
DWORD ihPen; 
#line 6016
LOGPEN lopn; 
#line 6017
} EMRCREATEPEN, *PEMRCREATEPEN; 
#line 6030
typedef 
#line 6019
struct tagEMREXTCREATEPEN { 
#line 6021
EMR emr; 
#line 6022
DWORD ihPen; 
#line 6023
DWORD offBmi; 
#line 6024
DWORD cbBmi; 
#line 6027
DWORD offBits; 
#line 6028
DWORD cbBits; 
#line 6029
EXTLOGPEN32 elp; 
#line 6030
} EMREXTCREATEPEN, *PEMREXTCREATEPEN; 
#line 6038
typedef 
#line 6032
struct tagEMRCREATEBRUSHINDIRECT { 
#line 6034
EMR emr; 
#line 6035
DWORD ihBrush; 
#line 6036
LOGBRUSH32 lb; 
#line 6038
} EMRCREATEBRUSHINDIRECT, *PEMRCREATEBRUSHINDIRECT; 
#line 6049
typedef 
#line 6040
struct tagEMRCREATEMONOBRUSH { 
#line 6042
EMR emr; 
#line 6043
DWORD ihBrush; 
#line 6044
DWORD iUsage; 
#line 6045
DWORD offBmi; 
#line 6046
DWORD cbBmi; 
#line 6047
DWORD offBits; 
#line 6048
DWORD cbBits; 
#line 6049
} EMRCREATEMONOBRUSH, *PEMRCREATEMONOBRUSH; 
#line 6062
typedef 
#line 6051
struct tagEMRCREATEDIBPATTERNBRUSHPT { 
#line 6053
EMR emr; 
#line 6054
DWORD ihBrush; 
#line 6055
DWORD iUsage; 
#line 6056
DWORD offBmi; 
#line 6057
DWORD cbBmi; 
#line 6060
DWORD offBits; 
#line 6061
DWORD cbBits; 
#line 6062
} EMRCREATEDIBPATTERNBRUSHPT, *PEMRCREATEDIBPATTERNBRUSHPT; 
#line 6071
typedef 
#line 6064
struct tagEMRFORMAT { 
#line 6066
DWORD dSignature; 
#line 6067
DWORD nVersion; 
#line 6068
DWORD cbData; 
#line 6069
DWORD offData; 
#line 6071
} EMRFORMAT, *PEMRFORMAT; 
#line 6080
typedef 
#line 6075
struct tagEMRGLSRECORD { 
#line 6077
EMR emr; 
#line 6078
DWORD cbData; 
#line 6079
BYTE Data[1]; 
#line 6080
} EMRGLSRECORD, *PEMRGLSRECORD; 
#line 6088
typedef 
#line 6082
struct tagEMRGLSBOUNDEDRECORD { 
#line 6084
EMR emr; 
#line 6085
RECTL rclBounds; 
#line 6086
DWORD cbData; 
#line 6087
BYTE Data[1]; 
#line 6088
} EMRGLSBOUNDEDRECORD, *PEMRGLSBOUNDEDRECORD; 
#line 6094
typedef 
#line 6090
struct tagEMRPIXELFORMAT { 
#line 6092
EMR emr; 
#line 6093
PIXELFORMATDESCRIPTOR pfd; 
#line 6094
} EMRPIXELFORMAT, *PEMRPIXELFORMAT; 
#line 6101
typedef 
#line 6096
struct tagEMRCREATECOLORSPACE { 
#line 6098
EMR emr; 
#line 6099
DWORD ihCS; 
#line 6100
LOGCOLORSPACEA lcs; 
#line 6101
} EMRCREATECOLORSPACE, *PEMRCREATECOLORSPACE; 
#line 6107
typedef 
#line 6103
struct tagEMRSETCOLORSPACE { 
#line 6105
EMR emr; 
#line 6106
DWORD ihCS; 
#line 6107
} EMRSETCOLORSPACE, *PEMRSETCOLORSPACE, 
#line 6108
EMRSELECTCOLORSPACE, *PEMRSELECTCOLORSPACE, 
#line 6109
EMRDELETECOLORSPACE, *PEMRDELETECOLORSPACE; 
#line 6121 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\wingdi.h"
typedef 
#line 6115
struct tagEMREXTESCAPE { 
#line 6117
EMR emr; 
#line 6118
INT iEscape; 
#line 6119
INT cbEscData; 
#line 6120
BYTE EscData[1]; 
#line 6121
} EMREXTESCAPE, *PEMREXTESCAPE, 
#line 6122
EMRDRAWESCAPE, *PEMRDRAWESCAPE; 
#line 6131
typedef 
#line 6124
struct tagEMRNAMEDESCAPE { 
#line 6126
EMR emr; 
#line 6127
INT iEscape; 
#line 6128
INT cbDriver; 
#line 6129
INT cbEscData; 
#line 6130
BYTE EscData[1]; 
#line 6131
} EMRNAMEDESCAPE, *PEMRNAMEDESCAPE; 
#line 6142
typedef 
#line 6135
struct tagEMRSETICMPROFILE { 
#line 6137
EMR emr; 
#line 6138
DWORD dwFlags; 
#line 6139
DWORD cbName; 
#line 6140
DWORD cbData; 
#line 6141
BYTE Data[1]; 
#line 6142
} EMRSETICMPROFILE, *PEMRSETICMPROFILE, 
#line 6143
EMRSETICMPROFILEA, *PEMRSETICMPROFILEA, 
#line 6144
EMRSETICMPROFILEW, *PEMRSETICMPROFILEW; 
#line 6156
typedef 
#line 6148
struct tagEMRCREATECOLORSPACEW { 
#line 6150
EMR emr; 
#line 6151
DWORD ihCS; 
#line 6152
LOGCOLORSPACEW lcs; 
#line 6153
DWORD dwFlags; 
#line 6154
DWORD cbData; 
#line 6155
BYTE Data[1]; 
#line 6156
} EMRCREATECOLORSPACEW, *PEMRCREATECOLORSPACEW; 
#line 6168
typedef 
#line 6160
struct tagCOLORMATCHTOTARGET { 
#line 6162
EMR emr; 
#line 6163
DWORD dwAction; 
#line 6164
DWORD dwFlags; 
#line 6165
DWORD cbName; 
#line 6166
DWORD cbData; 
#line 6167
BYTE Data[1]; 
#line 6168
} EMRCOLORMATCHTOTARGET, *PEMRCOLORMATCHTOTARGET; 
#line 6177
typedef 
#line 6170
struct tagCOLORCORRECTPALETTE { 
#line 6172
EMR emr; 
#line 6173
DWORD ihPalette; 
#line 6174
DWORD nFirstEntry; 
#line 6175
DWORD nPalEntries; 
#line 6176
DWORD nReserved; 
#line 6177
} EMRCOLORCORRECTPALETTE, *PEMRCOLORCORRECTPALETTE; 
#line 6200
typedef 
#line 6179
struct tagEMRALPHABLEND { 
#line 6181
EMR emr; 
#line 6182
RECTL rclBounds; 
#line 6183
LONG xDest; 
#line 6184
LONG yDest; 
#line 6185
LONG cxDest; 
#line 6186
LONG cyDest; 
#line 6187
DWORD dwRop; 
#line 6188
LONG xSrc; 
#line 6189
LONG ySrc; 
#line 6190
XFORM xformSrc; 
#line 6191
COLORREF crBkColorSrc; 
#line 6192
DWORD iUsageSrc; 
#line 6194
DWORD offBmiSrc; 
#line 6195
DWORD cbBmiSrc; 
#line 6196
DWORD offBitsSrc; 
#line 6197
DWORD cbBitsSrc; 
#line 6198
LONG cxSrc; 
#line 6199
LONG cySrc; 
#line 6200
} EMRALPHABLEND, *PEMRALPHABLEND; 
#line 6210
typedef 
#line 6202
struct tagEMRGRADIENTFILL { 
#line 6204
EMR emr; 
#line 6205
RECTL rclBounds; 
#line 6206
DWORD nVer; 
#line 6207
DWORD nTri; 
#line 6208
ULONG ulMode; 
#line 6209
TRIVERTEX Ver[1]; 
#line 6210
} EMRGRADIENTFILL, *PEMRGRADIENTFILL; 
#line 6233
typedef 
#line 6212
struct tagEMRTRANSPARENTBLT { 
#line 6214
EMR emr; 
#line 6215
RECTL rclBounds; 
#line 6216
LONG xDest; 
#line 6217
LONG yDest; 
#line 6218
LONG cxDest; 
#line 6219
LONG cyDest; 
#line 6220
DWORD dwRop; 
#line 6221
LONG xSrc; 
#line 6222
LONG ySrc; 
#line 6223
XFORM xformSrc; 
#line 6224
COLORREF crBkColorSrc; 
#line 6225
DWORD iUsageSrc; 
#line 6227
DWORD offBmiSrc; 
#line 6228
DWORD cbBmiSrc; 
#line 6229
DWORD offBitsSrc; 
#line 6230
DWORD cbBitsSrc; 
#line 6231
LONG cxSrc; 
#line 6232
LONG cySrc; 
#line 6233
} EMRTRANSPARENTBLT, *PEMRTRANSPARENTBLT; 
#line 6252 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\wingdi.h"
__declspec(dllimport) BOOL __stdcall wglCopyContext(HGLRC, HGLRC, UINT); 
#line 6253
__declspec(dllimport) HGLRC __stdcall wglCreateContext(HDC); 
#line 6254
__declspec(dllimport) HGLRC __stdcall wglCreateLayerContext(HDC, int); 
#line 6255
__declspec(dllimport) BOOL __stdcall wglDeleteContext(HGLRC); 
#line 6256
__declspec(dllimport) HGLRC __stdcall wglGetCurrentContext(); 
#line 6257
__declspec(dllimport) HDC __stdcall wglGetCurrentDC(); 
#line 6258
__declspec(dllimport) PROC __stdcall wglGetProcAddress(LPCSTR); 
#line 6259
__declspec(dllimport) BOOL __stdcall wglMakeCurrent(HDC, HGLRC); 
#line 6260
__declspec(dllimport) BOOL __stdcall wglShareLists(HGLRC, HGLRC); 
#line 6261
__declspec(dllimport) BOOL __stdcall wglUseFontBitmapsA(HDC, DWORD, DWORD, DWORD); 
#line 6262
__declspec(dllimport) BOOL __stdcall wglUseFontBitmapsW(HDC, DWORD, DWORD, DWORD); 
#line 6268 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\wingdi.h"
__declspec(dllimport) BOOL __stdcall SwapBuffers(HDC); 
#line 6273
typedef 
#line 6270
struct _POINTFLOAT { 
#line 6271
FLOAT x; 
#line 6272
FLOAT y; 
#line 6273
} POINTFLOAT, *PPOINTFLOAT; 
#line 6281
typedef 
#line 6275
struct _GLYPHMETRICSFLOAT { 
#line 6276
FLOAT gmfBlackBoxX; 
#line 6277
FLOAT gmfBlackBoxY; 
#line 6278
POINTFLOAT gmfptGlyphOrigin; 
#line 6279
FLOAT gmfCellIncX; 
#line 6280
FLOAT gmfCellIncY; 
#line 6281
} GLYPHMETRICSFLOAT, *PGLYPHMETRICSFLOAT, *LPGLYPHMETRICSFLOAT; 
#line 6285
__declspec(dllimport) BOOL __stdcall wglUseFontOutlinesA(HDC, DWORD, DWORD, DWORD, FLOAT, FLOAT, int, LPGLYPHMETRICSFLOAT); 
#line 6287
__declspec(dllimport) BOOL __stdcall wglUseFontOutlinesW(HDC, DWORD, DWORD, DWORD, FLOAT, FLOAT, int, LPGLYPHMETRICSFLOAT); 
#line 6321 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\wingdi.h"
typedef 
#line 6296
struct tagLAYERPLANEDESCRIPTOR { 
#line 6297
WORD nSize; 
#line 6298
WORD nVersion; 
#line 6299
DWORD dwFlags; 
#line 6300
BYTE iPixelType; 
#line 6301
BYTE cColorBits; 
#line 6302
BYTE cRedBits; 
#line 6303
BYTE cRedShift; 
#line 6304
BYTE cGreenBits; 
#line 6305
BYTE cGreenShift; 
#line 6306
BYTE cBlueBits; 
#line 6307
BYTE cBlueShift; 
#line 6308
BYTE cAlphaBits; 
#line 6309
BYTE cAlphaShift; 
#line 6310
BYTE cAccumBits; 
#line 6311
BYTE cAccumRedBits; 
#line 6312
BYTE cAccumGreenBits; 
#line 6313
BYTE cAccumBlueBits; 
#line 6314
BYTE cAccumAlphaBits; 
#line 6315
BYTE cDepthBits; 
#line 6316
BYTE cStencilBits; 
#line 6317
BYTE cAuxBuffers; 
#line 6318
BYTE iLayerPlane; 
#line 6319
BYTE bReserved; 
#line 6320
COLORREF crTransparent; 
#line 6321
} LAYERPLANEDESCRIPTOR, *PLAYERPLANEDESCRIPTOR, *LPLAYERPLANEDESCRIPTOR; 
#line 6371
__declspec(dllimport) BOOL __stdcall wglDescribeLayerPlane(HDC, int, int, UINT, LPLAYERPLANEDESCRIPTOR); 
#line 6373
__declspec(dllimport) int __stdcall wglSetLayerPaletteEntries(HDC, int, int, int, const COLORREF *); 
#line 6375
__declspec(dllimport) int __stdcall wglGetLayerPaletteEntries(HDC, int, int, int, COLORREF *); 
#line 6377
__declspec(dllimport) BOOL __stdcall wglRealizeLayerPalette(HDC, int, BOOL); 
#line 6378
__declspec(dllimport) BOOL __stdcall wglSwapLayerBuffers(HDC, UINT); 
#line 6386
typedef 
#line 6382
struct _WGLSWAP { 
#line 6384
HDC hdc; 
#line 6385
UINT uiFlags; 
#line 6386
} WGLSWAP, *PWGLSWAP, *LPWGLSWAP; 
#line 6390
__declspec(dllimport) DWORD __stdcall wglSwapMultipleBuffers(UINT, const WGLSWAP *); 
#line 6407 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\wingdi.h"
}
#line 6395 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\wingdi.h"
#pragma endregion
#line 6399 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\wingdi.h"
#pragma region Desktop Family
#line 6404 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\wingdi.h"
#pragma endregion
#line 6411 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\wingdi.h"
#pragma warning(pop)
#line 44 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
extern "C" {
#line 47 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
#pragma warning(push)
#line 51
#pragma warning(disable:4820)
#line 66 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
#pragma region Desktop Family
#line 69
typedef HANDLE HDWP; 
#line 70
typedef void MENUTEMPLATEA; 
#line 71
typedef void MENUTEMPLATEW; 
#line 75
typedef MENUTEMPLATEA MENUTEMPLATE; 
#line 77 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
typedef PVOID LPMENUTEMPLATEA; 
#line 78
typedef PVOID LPMENUTEMPLATEW; 
#line 82
typedef LPMENUTEMPLATEA LPMENUTEMPLATE; 
#line 86 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
#pragma endregion
#line 88
#pragma region Desktop Family
#line 91
typedef LRESULT (__stdcall *WNDPROC)(HWND, UINT, WPARAM, LPARAM); 
#line 94 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
#pragma endregion
#line 98
#pragma region Application Family or OneCore Family
#line 101
typedef INT_PTR (__stdcall *DLGPROC)(HWND, UINT, WPARAM, LPARAM); 
#line 104 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
#pragma endregion
#line 106
#pragma region Desktop Family or Games Family
#line 109
typedef void (__stdcall *TIMERPROC)(HWND, UINT, UINT_PTR, DWORD); 
#line 112 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
#pragma endregion
#line 114
#pragma region Desktop Family
#line 117
typedef BOOL (__stdcall *GRAYSTRINGPROC)(HDC, LPARAM, int); 
#line 118
typedef BOOL (__stdcall *WNDENUMPROC)(HWND, LPARAM); 
#line 119
typedef LRESULT (__stdcall *HOOKPROC)(int code, WPARAM wParam, LPARAM lParam); 
#line 120
typedef void (__stdcall *SENDASYNCPROC)(HWND, UINT, ULONG_PTR, LRESULT); 
#line 122
typedef BOOL (__stdcall *PROPENUMPROCA)(HWND, LPCSTR, HANDLE); 
#line 123
typedef BOOL (__stdcall *PROPENUMPROCW)(HWND, LPCWSTR, HANDLE); 
#line 125
typedef BOOL (__stdcall *PROPENUMPROCEXA)(HWND, LPSTR, HANDLE, ULONG_PTR); 
#line 126
typedef BOOL (__stdcall *PROPENUMPROCEXW)(HWND, LPWSTR, HANDLE, ULONG_PTR); 
#line 128
typedef int (__stdcall *EDITWORDBREAKPROCA)(LPSTR lpch, int ichCurrent, int cch, int code); 
#line 129
typedef int (__stdcall *EDITWORDBREAKPROCW)(LPWSTR lpch, int ichCurrent, int cch, int code); 
#line 132
typedef BOOL (__stdcall *DRAWSTATEPROC)(HDC hdc, LPARAM lData, WPARAM wData, int cx, int cy); 
#line 137 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
#pragma endregion
#line 184 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
#pragma region Desktop Family
#line 192
typedef PROPENUMPROCA PROPENUMPROC; 
#line 193
typedef PROPENUMPROCEXA PROPENUMPROCEX; 
#line 194
typedef EDITWORDBREAKPROCA EDITWORDBREAKPROC; 
#line 199 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
typedef BOOL (__stdcall *NAMEENUMPROCA)(LPSTR, LPARAM); 
#line 200
typedef BOOL (__stdcall *NAMEENUMPROCW)(LPWSTR, LPARAM); 
#line 202
typedef NAMEENUMPROCA WINSTAENUMPROCA; 
#line 203
typedef NAMEENUMPROCA DESKTOPENUMPROCA; 
#line 204
typedef NAMEENUMPROCW WINSTAENUMPROCW; 
#line 205
typedef NAMEENUMPROCW DESKTOPENUMPROCW; 
#line 226 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
typedef WINSTAENUMPROCA WINSTAENUMPROC; 
#line 227
typedef DESKTOPENUMPROCA DESKTOPENUMPROC; 
#line 232 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
#pragma endregion
#line 295 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
#pragma region Desktop Family
#line 299
#pragma warning(push)
#pragma warning(disable:4995)
#line 303 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
__declspec(dllimport) int __stdcall 
#line 306
wvsprintfA(LPSTR, LPCSTR, va_list arglist); 
#line 310
__declspec(dllimport) int __stdcall 
#line 313
wvsprintfW(LPWSTR, LPCWSTR, va_list arglist); 
#line 323 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
__declspec(dllimport) int __cdecl 
#line 326
wsprintfA(LPSTR, LPCSTR, ...); 
#line 330
__declspec(dllimport) int __cdecl 
#line 333
wsprintfW(LPWSTR, LPCWSTR, ...); 
#line 344 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
#pragma warning(pop)
#line 348 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
#pragma endregion
#line 847 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
#pragma region Desktop Family
#line 857
typedef 
#line 853
struct tagCBT_CREATEWNDA { 
#line 855
struct tagCREATESTRUCTA *lpcs; 
#line 856
HWND hwndInsertAfter; 
#line 857
} CBT_CREATEWNDA, *LPCBT_CREATEWNDA; 
#line 865
typedef 
#line 861
struct tagCBT_CREATEWNDW { 
#line 863
struct tagCREATESTRUCTW *lpcs; 
#line 864
HWND hwndInsertAfter; 
#line 865
} CBT_CREATEWNDW, *LPCBT_CREATEWNDW; 
#line 870
typedef CBT_CREATEWNDA CBT_CREATEWND; 
#line 871
typedef LPCBT_CREATEWNDA LPCBT_CREATEWND; 
#line 881 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
typedef 
#line 877
struct tagCBTACTIVATESTRUCT { 
#line 879
BOOL fMouse; 
#line 880
HWND hWndActive; 
#line 881
} CBTACTIVATESTRUCT, *LPCBTACTIVATESTRUCT; 
#line 884 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
#pragma endregion
#line 888
#pragma region Desktop Family
#line 899
typedef 
#line 894
struct tagWTSSESSION_NOTIFICATION { 
#line 896
DWORD cbSize; 
#line 897
DWORD dwSessionId; 
#line 899
} WTSSESSION_NOTIFICATION, *PWTSSESSION_NOTIFICATION; 
#line 902 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
#pragma endregion
#line 1045 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
#pragma region Desktop Family
#line 1052
typedef 
#line 1049
struct { 
#line 1050
HWND hwnd; 
#line 1051
RECT rc; 
#line 1052
} SHELLHOOKINFO, *LPSHELLHOOKINFO; 
#line 1063
typedef 
#line 1057
struct tagEVENTMSG { 
#line 1058
UINT message; 
#line 1059
UINT paramL; 
#line 1060
UINT paramH; 
#line 1061
DWORD time; 
#line 1062
HWND hwnd; 
#line 1063
} EVENTMSG, *PEVENTMSGMSG, *NPEVENTMSGMSG, *LPEVENTMSGMSG; 
#line 1065
typedef tagEVENTMSG *PEVENTMSG, *NPEVENTMSG, *LPEVENTMSG; 
#line 1075
typedef 
#line 1070
struct tagCWPSTRUCT { 
#line 1071
LPARAM lParam; 
#line 1072
WPARAM wParam; 
#line 1073
UINT message; 
#line 1074
HWND hwnd; 
#line 1075
} CWPSTRUCT, *PCWPSTRUCT, *NPCWPSTRUCT, *LPCWPSTRUCT; 
#line 1087
typedef 
#line 1081
struct tagCWPRETSTRUCT { 
#line 1082
LRESULT lResult; 
#line 1083
LPARAM lParam; 
#line 1084
WPARAM wParam; 
#line 1085
UINT message; 
#line 1086
HWND hwnd; 
#line 1087
} CWPRETSTRUCT, *PCWPRETSTRUCT, *NPCWPRETSTRUCT, *LPCWPRETSTRUCT; 
#line 1092 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
#pragma endregion
#line 1109
#pragma region Desktop Family
#line 1121
typedef 
#line 1115
struct tagKBDLLHOOKSTRUCT { 
#line 1116
DWORD vkCode; 
#line 1117
DWORD scanCode; 
#line 1118
DWORD flags; 
#line 1119
DWORD time; 
#line 1120
ULONG_PTR dwExtraInfo; 
#line 1121
} KBDLLHOOKSTRUCT, *LPKBDLLHOOKSTRUCT, *PKBDLLHOOKSTRUCT; 
#line 1132
typedef 
#line 1126
struct tagMSLLHOOKSTRUCT { 
#line 1127
POINT pt; 
#line 1128
DWORD mouseData; 
#line 1129
DWORD flags; 
#line 1130
DWORD time; 
#line 1131
ULONG_PTR dwExtraInfo; 
#line 1132
} MSLLHOOKSTRUCT, *LPMSLLHOOKSTRUCT, *PMSLLHOOKSTRUCT; 
#line 1135 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
#pragma endregion
#line 1139 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
#pragma region Desktop Family
#line 1152
typedef 
#line 1145
struct tagDEBUGHOOKINFO { 
#line 1147
DWORD idThread; 
#line 1148
DWORD idThreadInstaller; 
#line 1149
LPARAM lParam; 
#line 1150
WPARAM wParam; 
#line 1151
int code; 
#line 1152
} DEBUGHOOKINFO, *PDEBUGHOOKINFO, *NPDEBUGHOOKINFO, *LPDEBUGHOOKINFO; 
#line 1162
typedef 
#line 1157
struct tagMOUSEHOOKSTRUCT { 
#line 1158
POINT pt; 
#line 1159
HWND hwnd; 
#line 1160
UINT wHitTestCode; 
#line 1161
ULONG_PTR dwExtraInfo; 
#line 1162
} MOUSEHOOKSTRUCT, *LPMOUSEHOOKSTRUCT, *PMOUSEHOOKSTRUCT; 
#line 1169
typedef 
#line 1166
struct tagMOUSEHOOKSTRUCTEX : public tagMOUSEHOOKSTRUCT { 
#line 1168
DWORD mouseData; 
#line 1169
} MOUSEHOOKSTRUCTEX, *LPMOUSEHOOKSTRUCTEX, *PMOUSEHOOKSTRUCTEX; 
#line 1188 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
typedef 
#line 1183
struct tagHARDWAREHOOKSTRUCT { 
#line 1184
HWND hwnd; 
#line 1185
UINT message; 
#line 1186
WPARAM wParam; 
#line 1187
LPARAM lParam; 
#line 1188
} HARDWAREHOOKSTRUCT, *LPHARDWAREHOOKSTRUCT, *PHARDWAREHOOKSTRUCT; 
#line 1192 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
#pragma endregion
#line 1231 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
#pragma region Desktop Family
#line 1234
__declspec(dllimport) HKL __stdcall 
#line 1237
LoadKeyboardLayoutA(LPCSTR pwszKLID, UINT Flags); 
#line 1240
__declspec(dllimport) HKL __stdcall 
#line 1243
LoadKeyboardLayoutW(LPCWSTR pwszKLID, UINT Flags); 
#line 1254 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
__declspec(dllimport) HKL __stdcall 
#line 1257
ActivateKeyboardLayout(HKL hkl, UINT Flags); 
#line 1270 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
__declspec(dllimport) int __stdcall 
#line 1273
ToUnicodeEx(UINT wVirtKey, UINT wScanCode, const BYTE * lpKeyState, LPWSTR pwszBuff, int cchBuff, UINT wFlags, HKL dwhkl); 
#line 1283 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
__declspec(dllimport) BOOL __stdcall 
#line 1286
UnloadKeyboardLayout(HKL hkl); 
#line 1289
__declspec(dllimport) BOOL __stdcall 
#line 1292
GetKeyboardLayoutNameA(LPSTR pwszKLID); 
#line 1294
__declspec(dllimport) BOOL __stdcall 
#line 1297
GetKeyboardLayoutNameW(LPWSTR pwszKLID); 
#line 1306 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
__declspec(dllimport) int __stdcall 
#line 1309
GetKeyboardLayoutList(int nBuff, HKL * lpList); 
#line 1313
__declspec(dllimport) HKL __stdcall 
#line 1316
GetKeyboardLayout(DWORD idThread); 
#line 1323 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
#pragma endregion
#line 1327
#pragma region Desktop Family
#line 1335
typedef 
#line 1330
struct tagMOUSEMOVEPOINT { 
#line 1331
int x; 
#line 1332
int y; 
#line 1333
DWORD time; 
#line 1334
ULONG_PTR dwExtraInfo; 
#line 1335
} MOUSEMOVEPOINT, *PMOUSEMOVEPOINT, *LPMOUSEMOVEPOINT; 
#line 1338 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
#pragma endregion
#line 1346
#pragma region Desktop Family
#line 1349
__declspec(dllimport) int __stdcall 
#line 1352
GetMouseMovePointsEx(UINT cbSize, LPMOUSEMOVEPOINT lppt, LPMOUSEMOVEPOINT lpptBuf, int nBufPoints, DWORD resolution); 
#line 1360 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
#pragma endregion
#line 1386 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
#pragma region Desktop Family
#line 1389
__declspec(dllimport) HDESK __stdcall 
#line 1392
CreateDesktopA(LPCSTR lpszDesktop, LPCSTR lpszDevice, DEVMODEA * pDevmode, DWORD dwFlags, ACCESS_MASK dwDesiredAccess, LPSECURITY_ATTRIBUTES lpsa); 
#line 1399
__declspec(dllimport) HDESK __stdcall 
#line 1402
CreateDesktopW(LPCWSTR lpszDesktop, LPCWSTR lpszDevice, DEVMODEW * pDevmode, DWORD dwFlags, ACCESS_MASK dwDesiredAccess, LPSECURITY_ATTRIBUTES lpsa); 
#line 1415 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
__declspec(dllimport) HDESK __stdcall 
#line 1418
CreateDesktopExA(LPCSTR lpszDesktop, LPCSTR lpszDevice, DEVMODEA * pDevmode, DWORD dwFlags, ACCESS_MASK dwDesiredAccess, LPSECURITY_ATTRIBUTES lpsa, ULONG ulHeapSize, PVOID pvoid); 
#line 1427
__declspec(dllimport) HDESK __stdcall 
#line 1430
CreateDesktopExW(LPCWSTR lpszDesktop, LPCWSTR lpszDevice, DEVMODEW * pDevmode, DWORD dwFlags, ACCESS_MASK dwDesiredAccess, LPSECURITY_ATTRIBUTES lpsa, ULONG ulHeapSize, PVOID pvoid); 
#line 1446 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
#pragma endregion
#line 1451 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
#pragma region Desktop Family
#line 1454
__declspec(dllimport) HDESK __stdcall 
#line 1457
OpenDesktopA(LPCSTR lpszDesktop, DWORD dwFlags, BOOL fInherit, ACCESS_MASK dwDesiredAccess); 
#line 1462
__declspec(dllimport) HDESK __stdcall 
#line 1465
OpenDesktopW(LPCWSTR lpszDesktop, DWORD dwFlags, BOOL fInherit, ACCESS_MASK dwDesiredAccess); 
#line 1476 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
__declspec(dllimport) HDESK __stdcall 
#line 1479
OpenInputDesktop(DWORD dwFlags, BOOL fInherit, ACCESS_MASK dwDesiredAccess); 
#line 1485
__declspec(dllimport) BOOL __stdcall 
#line 1488
EnumDesktopsA(HWINSTA hwinsta, DESKTOPENUMPROCA lpEnumFunc, LPARAM lParam); 
#line 1492
__declspec(dllimport) BOOL __stdcall 
#line 1495
EnumDesktopsW(HWINSTA hwinsta, DESKTOPENUMPROCW lpEnumFunc, LPARAM lParam); 
#line 1505 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
__declspec(dllimport) BOOL __stdcall 
#line 1508
EnumDesktopWindows(HDESK hDesktop, WNDENUMPROC lpfn, LPARAM lParam); 
#line 1514
__declspec(dllimport) BOOL __stdcall 
#line 1517
SwitchDesktop(HDESK hDesktop); 
#line 1521
__declspec(dllimport) BOOL __stdcall 
#line 1524
SetThreadDesktop(HDESK hDesktop); 
#line 1527
__declspec(dllimport) BOOL __stdcall 
#line 1530
CloseDesktop(HDESK hDesktop); 
#line 1533
__declspec(dllimport) HDESK __stdcall 
#line 1536
GetThreadDesktop(DWORD dwThreadId); 
#line 1540 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
#pragma endregion
#line 1572 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
#pragma region Desktop Family
#line 1575
__declspec(dllimport) HWINSTA __stdcall 
#line 1578
CreateWindowStationA(LPCSTR lpwinsta, DWORD dwFlags, ACCESS_MASK dwDesiredAccess, LPSECURITY_ATTRIBUTES lpsa); 
#line 1583
__declspec(dllimport) HWINSTA __stdcall 
#line 1586
CreateWindowStationW(LPCWSTR lpwinsta, DWORD dwFlags, ACCESS_MASK dwDesiredAccess, LPSECURITY_ATTRIBUTES lpsa); 
#line 1597 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
__declspec(dllimport) HWINSTA __stdcall 
#line 1600
OpenWindowStationA(LPCSTR lpszWinSta, BOOL fInherit, ACCESS_MASK dwDesiredAccess); 
#line 1604
__declspec(dllimport) HWINSTA __stdcall 
#line 1607
OpenWindowStationW(LPCWSTR lpszWinSta, BOOL fInherit, ACCESS_MASK dwDesiredAccess); 
#line 1617 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
__declspec(dllimport) BOOL __stdcall 
#line 1620
EnumWindowStationsA(WINSTAENUMPROCA lpEnumFunc, LPARAM lParam); 
#line 1623
__declspec(dllimport) BOOL __stdcall 
#line 1626
EnumWindowStationsW(WINSTAENUMPROCW lpEnumFunc, LPARAM lParam); 
#line 1635 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
__declspec(dllimport) BOOL __stdcall 
#line 1638
CloseWindowStation(HWINSTA hWinSta); 
#line 1641
__declspec(dllimport) BOOL __stdcall 
#line 1644
SetProcessWindowStation(HWINSTA hWinSta); 
#line 1647
__declspec(dllimport) HWINSTA __stdcall 
#line 1650
GetProcessWindowStation(); 
#line 1654 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
#pragma endregion
#line 1660 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
#pragma region Desktop Family
#line 1663
__declspec(dllimport) BOOL __stdcall 
#line 1666
SetUserObjectSecurity(HANDLE hObj, PSECURITY_INFORMATION pSIRequested, PSECURITY_DESCRIPTOR pSID); 
#line 1671
__declspec(dllimport) BOOL __stdcall 
#line 1674
GetUserObjectSecurity(HANDLE hObj, PSECURITY_INFORMATION pSIRequested, PSECURITY_DESCRIPTOR pSID, DWORD nLength, LPDWORD lpnLengthNeeded); 
#line 1682 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
#pragma endregion
#line 1694 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
#pragma region Desktop Family
#line 1701
typedef 
#line 1697
struct tagUSEROBJECTFLAGS { 
#line 1698
BOOL fInherit; 
#line 1699
BOOL fReserved; 
#line 1700
DWORD dwFlags; 
#line 1701
} USEROBJECTFLAGS, *PUSEROBJECTFLAGS; 
#line 1703
__declspec(dllimport) BOOL __stdcall 
#line 1706
GetUserObjectInformationA(HANDLE hObj, int nIndex, PVOID pvInfo, DWORD nLength, LPDWORD lpnLengthNeeded); 
#line 1712
__declspec(dllimport) BOOL __stdcall 
#line 1715
GetUserObjectInformationW(HANDLE hObj, int nIndex, PVOID pvInfo, DWORD nLength, LPDWORD lpnLengthNeeded); 
#line 1727 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
__declspec(dllimport) BOOL __stdcall 
#line 1730
SetUserObjectInformationA(HANDLE hObj, int nIndex, PVOID pvInfo, DWORD nLength); 
#line 1735
__declspec(dllimport) BOOL __stdcall 
#line 1738
SetUserObjectInformationW(HANDLE hObj, int nIndex, PVOID pvInfo, DWORD nLength); 
#line 1750 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
#pragma endregion
#line 1754 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
#pragma region Desktop or Games Family
#line 1773
typedef 
#line 1758
struct tagWNDCLASSEXA { 
#line 1759
UINT cbSize; 
#line 1761
UINT style; 
#line 1762
WNDPROC lpfnWndProc; 
#line 1763
int cbClsExtra; 
#line 1764
int cbWndExtra; 
#line 1765
HINSTANCE hInstance; 
#line 1766
HICON hIcon; 
#line 1767
HCURSOR hCursor; 
#line 1768
HBRUSH hbrBackground; 
#line 1769
LPCSTR lpszMenuName; 
#line 1770
LPCSTR lpszClassName; 
#line 1772
HICON hIconSm; 
#line 1773
} WNDCLASSEXA, *PWNDCLASSEXA, *NPWNDCLASSEXA, *LPWNDCLASSEXA; 
#line 1789
typedef 
#line 1774
struct tagWNDCLASSEXW { 
#line 1775
UINT cbSize; 
#line 1777
UINT style; 
#line 1778
WNDPROC lpfnWndProc; 
#line 1779
int cbClsExtra; 
#line 1780
int cbWndExtra; 
#line 1781
HINSTANCE hInstance; 
#line 1782
HICON hIcon; 
#line 1783
HCURSOR hCursor; 
#line 1784
HBRUSH hbrBackground; 
#line 1785
LPCWSTR lpszMenuName; 
#line 1786
LPCWSTR lpszClassName; 
#line 1788
HICON hIconSm; 
#line 1789
} WNDCLASSEXW, *PWNDCLASSEXW, *NPWNDCLASSEXW, *LPWNDCLASSEXW; 
#line 1796
typedef WNDCLASSEXA WNDCLASSEX; 
#line 1797
typedef PWNDCLASSEXA PWNDCLASSEX; 
#line 1798
typedef NPWNDCLASSEXA NPWNDCLASSEX; 
#line 1799
typedef LPWNDCLASSEXA LPWNDCLASSEX; 
#line 1814 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
typedef 
#line 1803
struct tagWNDCLASSA { 
#line 1804
UINT style; 
#line 1805
WNDPROC lpfnWndProc; 
#line 1806
int cbClsExtra; 
#line 1807
int cbWndExtra; 
#line 1808
HINSTANCE hInstance; 
#line 1809
HICON hIcon; 
#line 1810
HCURSOR hCursor; 
#line 1811
HBRUSH hbrBackground; 
#line 1812
LPCSTR lpszMenuName; 
#line 1813
LPCSTR lpszClassName; 
#line 1814
} WNDCLASSA, *PWNDCLASSA, *NPWNDCLASSA, *LPWNDCLASSA; 
#line 1826
typedef 
#line 1815
struct tagWNDCLASSW { 
#line 1816
UINT style; 
#line 1817
WNDPROC lpfnWndProc; 
#line 1818
int cbClsExtra; 
#line 1819
int cbWndExtra; 
#line 1820
HINSTANCE hInstance; 
#line 1821
HICON hIcon; 
#line 1822
HCURSOR hCursor; 
#line 1823
HBRUSH hbrBackground; 
#line 1824
LPCWSTR lpszMenuName; 
#line 1825
LPCWSTR lpszClassName; 
#line 1826
} WNDCLASSW, *PWNDCLASSW, *NPWNDCLASSW, *LPWNDCLASSW; 
#line 1833
typedef WNDCLASSA WNDCLASS; 
#line 1834
typedef PWNDCLASSA PWNDCLASS; 
#line 1835
typedef NPWNDCLASSA NPWNDCLASS; 
#line 1836
typedef LPWNDCLASSA LPWNDCLASS; 
#line 1840 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
#pragma endregion
#line 1842
#pragma region Desktop Family
#line 1845
__declspec(dllimport) BOOL __stdcall 
#line 1848
IsHungAppWindow(HWND hwnd); 
#line 1853
__declspec(dllimport) void __stdcall 
#line 1856
DisableProcessWindowsGhosting(); 
#line 1861 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
#pragma endregion
#line 1866
#pragma region Application Family or OneCore Family or Games Family
#line 1882
typedef 
#line 1872
struct tagMSG { 
#line 1873
HWND hwnd; 
#line 1874
UINT message; 
#line 1875
WPARAM wParam; 
#line 1876
LPARAM lParam; 
#line 1877
DWORD time; 
#line 1878
POINT pt; 
#line 1882
} MSG, *PMSG, *NPMSG, *LPMSG; 
#line 1885 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
#pragma endregion
#line 2027 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
#pragma region Desktop Family
#line 2039
typedef 
#line 2033
struct tagMINMAXINFO { 
#line 2034
POINT ptReserved; 
#line 2035
POINT ptMaxSize; 
#line 2036
POINT ptMaxPosition; 
#line 2037
POINT ptMinTrackSize; 
#line 2038
POINT ptMaxTrackSize; 
#line 2039
} MINMAXINFO, *PMINMAXINFO, *LPMINMAXINFO; 
#line 2042 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
#pragma endregion
#line 2083 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
#pragma region Desktop Family
#line 2093
typedef 
#line 2089
struct tagCOPYDATASTRUCT { 
#line 2090
ULONG_PTR dwData; 
#line 2091
DWORD cbData; 
#line 2092
PVOID lpData; 
#line 2093
} COPYDATASTRUCT, *PCOPYDATASTRUCT; 
#line 2101
typedef 
#line 2096
struct tagMDINEXTMENU { 
#line 2098
HMENU hmenuIn; 
#line 2099
HMENU hmenuNext; 
#line 2100
HWND hwndNext; 
#line 2101
} MDINEXTMENU, *PMDINEXTMENU, *LPMDINEXTMENU; 
#line 2105 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
#pragma endregion
#line 2348 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
#pragma region Desktop Family
#line 2355
typedef 
#line 2351
struct { 
#line 2352
GUID PowerSetting; 
#line 2353
DWORD DataLength; 
#line 2354
UCHAR Data[1]; 
#line 2355
} POWERBROADCAST_SETTING, *PPOWERBROADCAST_SETTING; 
#line 2359 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
#pragma endregion
#line 2632 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
#pragma region Desktop Family
#line 2635
__declspec(dllimport) UINT __stdcall 
#line 2638
RegisterWindowMessageA(LPCSTR lpString); 
#line 2640
__declspec(dllimport) UINT __stdcall 
#line 2643
RegisterWindowMessageW(LPCWSTR lpString); 
#line 2652 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
#pragma endregion
#line 2674
#pragma region Desktop Family
#line 2688
typedef 
#line 2680
struct tagWINDOWPOS { 
#line 2681
HWND hwnd; 
#line 2682
HWND hwndInsertAfter; 
#line 2683
int x; 
#line 2684
int y; 
#line 2685
int cx; 
#line 2686
int cy; 
#line 2687
UINT flags; 
#line 2688
} WINDOWPOS, *LPWINDOWPOS, *PWINDOWPOS; 
#line 2696
typedef 
#line 2693
struct tagNCCALCSIZE_PARAMS { 
#line 2694
RECT rgrc[3]; 
#line 2695
PWINDOWPOS lppos; 
#line 2696
} NCCALCSIZE_PARAMS, *LPNCCALCSIZE_PARAMS; 
#line 2699 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
#pragma endregion
#line 2750 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
#pragma region Desktop Family
#line 2758
typedef 
#line 2753
struct tagTRACKMOUSEEVENT { 
#line 2754
DWORD cbSize; 
#line 2755
DWORD dwFlags; 
#line 2756
HWND hwndTrack; 
#line 2757
DWORD dwHoverTime; 
#line 2758
} TRACKMOUSEEVENT, *LPTRACKMOUSEEVENT; 
#line 2760
__declspec(dllimport) BOOL __stdcall 
#line 2763
TrackMouseEvent(LPTRACKMOUSEEVENT lpEventTrack); 
#line 2767 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
#pragma endregion
#line 2968 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
#pragma region Desktop Family
#line 2971
__declspec(dllimport) BOOL __stdcall 
#line 2974
DrawEdge(HDC hdc, LPRECT qrc, UINT edge, UINT grfFlags); 
#line 2981 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
#pragma endregion
#line 3031 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
#pragma region Desktop Family
#line 3034
__declspec(dllimport) BOOL __stdcall 
#line 3037
DrawFrameControl(HDC, LPRECT, UINT, UINT); 
#line 3045 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
#pragma endregion
#line 3061 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
#pragma region Desktop Family
#line 3064
__declspec(dllimport) BOOL __stdcall 
#line 3067
DrawCaption(HWND hwnd, HDC hdc, const RECT * lprect, UINT flags); 
#line 3075 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
#pragma endregion
#line 3080
#pragma region Desktop Family
#line 3083
__declspec(dllimport) BOOL __stdcall 
#line 3086
DrawAnimatedRects(HWND hwnd, int idAni, const RECT * lprcFrom, const RECT * lprcTo); 
#line 3093 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
#pragma endregion
#line 3163 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
#pragma region Desktop Family
#line 3176 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
typedef 
#line 3166 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
struct tagACCEL { 
#line 3168
BYTE fVirt; 
#line 3169
WORD key; 
#line 3170
WORD cmd; 
#line 3176 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
} ACCEL, *LPACCEL; 
#line 3185
typedef 
#line 3178
struct tagPAINTSTRUCT { 
#line 3179
HDC hdc; 
#line 3180
BOOL fErase; 
#line 3181
RECT rcPaint; 
#line 3182
BOOL fRestore; 
#line 3183
BOOL fIncUpdate; 
#line 3184
BYTE rgbReserved[32]; 
#line 3185
} PAINTSTRUCT, *PPAINTSTRUCT, *NPPAINTSTRUCT, *LPPAINTSTRUCT; 
#line 3188 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
#pragma endregion
#line 3190
#pragma region Desktop Family or Games Family
#line 3206
typedef 
#line 3193
struct tagCREATESTRUCTA { 
#line 3194
LPVOID lpCreateParams; 
#line 3195
HINSTANCE hInstance; 
#line 3196
HMENU hMenu; 
#line 3197
HWND hwndParent; 
#line 3198
int cy; 
#line 3199
int cx; 
#line 3200
int y; 
#line 3201
int x; 
#line 3202
LONG style; 
#line 3203
LPCSTR lpszName; 
#line 3204
LPCSTR lpszClass; 
#line 3205
DWORD dwExStyle; 
#line 3206
} CREATESTRUCTA, *LPCREATESTRUCTA; 
#line 3220
typedef 
#line 3207
struct tagCREATESTRUCTW { 
#line 3208
LPVOID lpCreateParams; 
#line 3209
HINSTANCE hInstance; 
#line 3210
HMENU hMenu; 
#line 3211
HWND hwndParent; 
#line 3212
int cy; 
#line 3213
int cx; 
#line 3214
int y; 
#line 3215
int x; 
#line 3216
LONG style; 
#line 3217
LPCWSTR lpszName; 
#line 3218
LPCWSTR lpszClass; 
#line 3219
DWORD dwExStyle; 
#line 3220
} CREATESTRUCTW, *LPCREATESTRUCTW; 
#line 3225
typedef CREATESTRUCTA CREATESTRUCT; 
#line 3226
typedef LPCREATESTRUCTA LPCREATESTRUCT; 
#line 3230 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
#pragma endregion
#line 3232
#pragma region Desktop Family
#line 3245
typedef 
#line 3235
struct tagWINDOWPLACEMENT { 
#line 3236
UINT length; 
#line 3237
UINT flags; 
#line 3238
UINT showCmd; 
#line 3239
POINT ptMinPosition; 
#line 3240
POINT ptMaxPosition; 
#line 3241
RECT rcNormalPosition; 
#line 3245
} WINDOWPLACEMENT; 
#line 3246
typedef WINDOWPLACEMENT *PWINDOWPLACEMENT, *LPWINDOWPLACEMENT; 
#line 3255 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
#pragma endregion
#line 3259
#pragma region Application Family or OneCore Family
#line 3267
typedef 
#line 3262
struct tagNMHDR { 
#line 3264
HWND hwndFrom; 
#line 3265
UINT_PTR idFrom; 
#line 3266
UINT code; 
#line 3267
} NMHDR; 
#line 3270 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
#pragma endregion
#line 3272
#pragma region Desktop Family
#line 3275
typedef NMHDR *LPNMHDR; 
#line 3281
typedef 
#line 3277
struct tagSTYLESTRUCT { 
#line 3279
DWORD styleOld; 
#line 3280
DWORD styleNew; 
#line 3281
} STYLESTRUCT, *LPSTYLESTRUCT; 
#line 3284 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
#pragma endregion
#line 3327 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
#pragma region Desktop Family
#line 3340
typedef 
#line 3333
struct tagMEASUREITEMSTRUCT { 
#line 3334
UINT CtlType; 
#line 3335
UINT CtlID; 
#line 3336
UINT itemID; 
#line 3337
UINT itemWidth; 
#line 3338
UINT itemHeight; 
#line 3339
ULONG_PTR itemData; 
#line 3340
} MEASUREITEMSTRUCT, *PMEASUREITEMSTRUCT, *LPMEASUREITEMSTRUCT; 
#line 3355
typedef 
#line 3345
struct tagDRAWITEMSTRUCT { 
#line 3346
UINT CtlType; 
#line 3347
UINT CtlID; 
#line 3348
UINT itemID; 
#line 3349
UINT itemAction; 
#line 3350
UINT itemState; 
#line 3351
HWND hwndItem; 
#line 3352
HDC hDC; 
#line 3353
RECT rcItem; 
#line 3354
ULONG_PTR itemData; 
#line 3355
} DRAWITEMSTRUCT, *PDRAWITEMSTRUCT, *LPDRAWITEMSTRUCT; 
#line 3366
typedef 
#line 3360
struct tagDELETEITEMSTRUCT { 
#line 3361
UINT CtlType; 
#line 3362
UINT CtlID; 
#line 3363
UINT itemID; 
#line 3364
HWND hwndItem; 
#line 3365
ULONG_PTR itemData; 
#line 3366
} DELETEITEMSTRUCT, *PDELETEITEMSTRUCT, *LPDELETEITEMSTRUCT; 
#line 3380
typedef 
#line 3371
struct tagCOMPAREITEMSTRUCT { 
#line 3372
UINT CtlType; 
#line 3373
UINT CtlID; 
#line 3374
HWND hwndItem; 
#line 3375
UINT itemID1; 
#line 3376
ULONG_PTR itemData1; 
#line 3377
UINT itemID2; 
#line 3378
ULONG_PTR itemData2; 
#line 3379
DWORD dwLocaleId; 
#line 3380
} COMPAREITEMSTRUCT, *PCOMPAREITEMSTRUCT, *LPCOMPAREITEMSTRUCT; 
#line 3383 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
#pragma endregion
#line 3387
#pragma region Desktop Family or Games Family
#line 3394
__declspec(dllimport) BOOL __stdcall 
#line 3397
GetMessageA(LPMSG lpMsg, HWND hWnd, UINT wMsgFilterMin, UINT wMsgFilterMax); 
#line 3402
__declspec(dllimport) BOOL __stdcall 
#line 3405
GetMessageW(LPMSG lpMsg, HWND hWnd, UINT wMsgFilterMin, UINT wMsgFilterMax); 
#line 3441 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
__declspec(dllimport) BOOL __stdcall 
#line 3444
TranslateMessage(const MSG * lpMsg); 
#line 3447
__declspec(dllimport) LRESULT __stdcall 
#line 3450
DispatchMessageA(const MSG * lpMsg); 
#line 3452
__declspec(dllimport) LRESULT __stdcall 
#line 3455
DispatchMessageW(const MSG * lpMsg); 
#line 3482 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
#pragma endregion
#line 3484
#pragma region Desktop Family
#line 3487
__declspec(dllimport) BOOL __stdcall 
#line 3490
SetMessageQueue(int cMessagesMax); 
#line 3494 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
#pragma endregion
#line 3496
#pragma region Desktop Family or Games Family
#line 3499
__declspec(dllimport) BOOL __stdcall 
#line 3502
PeekMessageA(LPMSG lpMsg, HWND hWnd, UINT wMsgFilterMin, UINT wMsgFilterMax, UINT wRemoveMsg); 
#line 3508
__declspec(dllimport) BOOL __stdcall 
#line 3511
PeekMessageW(LPMSG lpMsg, HWND hWnd, UINT wMsgFilterMin, UINT wMsgFilterMax, UINT wRemoveMsg); 
#line 3524 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
#pragma endregion
#line 3544 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
#pragma region Desktop Family
#line 3547
__declspec(dllimport) BOOL __stdcall 
#line 3550
RegisterHotKey(HWND hWnd, int id, UINT fsModifiers, UINT vk); 
#line 3556
__declspec(dllimport) BOOL __stdcall 
#line 3559
UnregisterHotKey(HWND hWnd, int id); 
#line 3564 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
#pragma endregion
#line 3619 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
#pragma region Desktop Family
#line 3627 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
__declspec(dllimport) BOOL __stdcall 
#line 3630
ExitWindowsEx(UINT uFlags, DWORD dwReason); 
#line 3634
__declspec(dllimport) BOOL __stdcall 
#line 3637
SwapMouseButton(BOOL fSwap); 
#line 3640
__declspec(dllimport) DWORD __stdcall 
#line 3643
GetMessagePos(); 
#line 3646
__declspec(dllimport) LONG __stdcall 
#line 3649
GetMessageTime(); 
#line 3652
__declspec(dllimport) LPARAM __stdcall 
#line 3655
GetMessageExtraInfo(); 
#line 3659
__declspec(dllimport) DWORD __stdcall 
#line 3662
GetUnpredictedMessagePos(); 
#line 3667 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
__declspec(dllimport) BOOL __stdcall 
#line 3670
IsWow64Message(); 
#line 3675 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
__declspec(dllimport) LPARAM __stdcall 
#line 3678
SetMessageExtraInfo(LPARAM lParam); 
#line 3683 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
#pragma endregion
#line 3685
#pragma region Desktop Family or Games Family
#line 3688
__declspec(dllimport) LRESULT __stdcall 
#line 3691
SendMessageA(HWND hWnd, UINT Msg, WPARAM wParam, LPARAM lParam); 
#line 3696
__declspec(dllimport) LRESULT __stdcall 
#line 3699
SendMessageW(HWND hWnd, UINT Msg, WPARAM wParam, LPARAM lParam); 
#line 3735 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
#pragma endregion
#line 3737
#pragma region Desktop Family
#line 3740
__declspec(dllimport) LRESULT __stdcall 
#line 3743
SendMessageTimeoutA(HWND hWnd, UINT Msg, WPARAM wParam, LPARAM lParam, UINT fuFlags, UINT uTimeout, PDWORD_PTR lpdwResult); 
#line 3751
__declspec(dllimport) LRESULT __stdcall 
#line 3754
SendMessageTimeoutW(HWND hWnd, UINT Msg, WPARAM wParam, LPARAM lParam, UINT fuFlags, UINT uTimeout, PDWORD_PTR lpdwResult); 
#line 3768 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
__declspec(dllimport) BOOL __stdcall 
#line 3771
SendNotifyMessageA(HWND hWnd, UINT Msg, WPARAM wParam, LPARAM lParam); 
#line 3776
__declspec(dllimport) BOOL __stdcall 
#line 3779
SendNotifyMessageW(HWND hWnd, UINT Msg, WPARAM wParam, LPARAM lParam); 
#line 3790 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
__declspec(dllimport) BOOL __stdcall 
#line 3793
SendMessageCallbackA(HWND hWnd, UINT Msg, WPARAM wParam, LPARAM lParam, SENDASYNCPROC lpResultCallBack, ULONG_PTR dwData); 
#line 3800
__declspec(dllimport) BOOL __stdcall 
#line 3803
SendMessageCallbackW(HWND hWnd, UINT Msg, WPARAM wParam, LPARAM lParam, SENDASYNCPROC lpResultCallBack, ULONG_PTR dwData); 
#line 3822 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
typedef 
#line 3817
struct { 
#line 3818
UINT cbSize; 
#line 3819
HDESK hdesk; 
#line 3820
HWND hwnd; 
#line 3821
LUID luid; 
#line 3822
} BSMINFO, *PBSMINFO; 
#line 3824
__declspec(dllimport) long __stdcall 
#line 3827
BroadcastSystemMessageExA(DWORD flags, LPDWORD lpInfo, UINT Msg, WPARAM wParam, LPARAM lParam, PBSMINFO pbsmInfo); 
#line 3834
__declspec(dllimport) long __stdcall 
#line 3837
BroadcastSystemMessageExW(DWORD flags, LPDWORD lpInfo, UINT Msg, WPARAM wParam, LPARAM lParam, PBSMINFO pbsmInfo); 
#line 3852 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
#pragma endregion
#line 3856
#pragma region Desktop Family
#line 3860
__declspec(dllimport) long __stdcall 
#line 3863
BroadcastSystemMessageA(DWORD flags, LPDWORD lpInfo, UINT Msg, WPARAM wParam, LPARAM lParam); 
#line 3869
__declspec(dllimport) long __stdcall 
#line 3872
BroadcastSystemMessageW(DWORD flags, LPDWORD lpInfo, UINT Msg, WPARAM wParam, LPARAM lParam); 
#line 3898 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
#pragma endregion
#line 3930 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
#pragma region Desktop Family
#line 3934
typedef PVOID HDEVNOTIFY; 
#line 3935
typedef HDEVNOTIFY *PHDEVNOTIFY; 
#line 3943 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
__declspec(dllimport) HDEVNOTIFY __stdcall 
#line 3946
RegisterDeviceNotificationA(HANDLE hRecipient, LPVOID NotificationFilter, DWORD Flags); 
#line 3950
__declspec(dllimport) HDEVNOTIFY __stdcall 
#line 3953
RegisterDeviceNotificationW(HANDLE hRecipient, LPVOID NotificationFilter, DWORD Flags); 
#line 3963 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
__declspec(dllimport) BOOL __stdcall 
#line 3966
UnregisterDeviceNotification(HDEVNOTIFY Handle); 
#line 3976
typedef PVOID HPOWERNOTIFY; 
#line 3977
typedef HPOWERNOTIFY *PHPOWERNOTIFY; 
#line 3981 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
__declspec(dllimport) HPOWERNOTIFY __stdcall 
#line 3984
RegisterPowerSettingNotification(HANDLE hRecipient, LPCGUID PowerSettingGuid, DWORD Flags); 
#line 3990
__declspec(dllimport) BOOL __stdcall 
#line 3993
UnregisterPowerSettingNotification(HPOWERNOTIFY Handle); 
#line 3997
__declspec(dllimport) HPOWERNOTIFY __stdcall 
#line 4000
RegisterSuspendResumeNotification(HANDLE hRecipient, DWORD Flags); 
#line 4005
__declspec(dllimport) BOOL __stdcall 
#line 4008
UnregisterSuspendResumeNotification(HPOWERNOTIFY Handle); 
#line 4017 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
#pragma endregion
#line 4019
#pragma region Desktop Family
#line 4022
__declspec(dllimport) BOOL __stdcall 
#line 4025
PostMessageA(HWND hWnd, UINT Msg, WPARAM wParam, LPARAM lParam); 
#line 4030
__declspec(dllimport) BOOL __stdcall 
#line 4033
PostMessageW(HWND hWnd, UINT Msg, WPARAM wParam, LPARAM lParam); 
#line 4044 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
__declspec(dllimport) BOOL __stdcall 
#line 4047
PostThreadMessageA(DWORD idThread, UINT Msg, WPARAM wParam, LPARAM lParam); 
#line 4052
__declspec(dllimport) BOOL __stdcall 
#line 4055
PostThreadMessageW(DWORD idThread, UINT Msg, WPARAM wParam, LPARAM lParam); 
#line 4067 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
#pragma endregion
#line 4088 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
#pragma region Desktop Family
#line 4091
__declspec(dllimport) BOOL __stdcall 
#line 4094
AttachThreadInput(DWORD idAttach, DWORD idAttachTo, BOOL fAttach); 
#line 4100
__declspec(dllimport) BOOL __stdcall 
#line 4103
ReplyMessage(LRESULT lResult); 
#line 4106
__declspec(dllimport) BOOL __stdcall 
#line 4109
WaitMessage(); 
#line 4116 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
__declspec(dllimport) DWORD __stdcall 
#line 4119
WaitForInputIdle(HANDLE hProcess, DWORD dwMilliseconds); 
#line 4124 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
#pragma endregion
#line 4126
#pragma region Desktop Family or Games Family
#line 4129
__declspec(dllimport) LRESULT __stdcall 
#line 4137 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
DefWindowProcA(HWND hWnd, UINT Msg, WPARAM wParam, LPARAM lParam); 
#line 4142
__declspec(dllimport) LRESULT __stdcall 
#line 4150 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
DefWindowProcW(HWND hWnd, UINT Msg, WPARAM wParam, LPARAM lParam); 
#line 4161 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
__declspec(dllimport) void __stdcall 
#line 4164
PostQuitMessage(int nExitCode); 
#line 4169
__declspec(dllimport) LRESULT __stdcall 
#line 4172
CallWindowProcA(WNDPROC lpPrevWndFunc, HWND hWnd, UINT Msg, WPARAM wParam, LPARAM lParam); 
#line 4178
__declspec(dllimport) LRESULT __stdcall 
#line 4181
CallWindowProcW(WNDPROC lpPrevWndFunc, HWND hWnd, UINT Msg, WPARAM wParam, LPARAM lParam); 
#line 4222 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
#pragma endregion
#line 4224
#pragma region Desktop Family
#line 4227
__declspec(dllimport) BOOL __stdcall 
#line 4230
InSendMessage(); 
#line 4234 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
#pragma endregion
#line 4238
#pragma region Desktop Family
#line 4241
__declspec(dllimport) DWORD __stdcall 
#line 4244
InSendMessageEx(LPVOID lpReserved); 
#line 4248 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
#pragma endregion
#line 4261 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
#pragma region Desktop Family
#line 4264
__declspec(dllimport) UINT __stdcall 
#line 4267
GetDoubleClickTime(); 
#line 4270
__declspec(dllimport) BOOL __stdcall 
#line 4273
SetDoubleClickTime(UINT); 
#line 4277 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
#pragma endregion
#line 4279
#pragma region Desktop Family or Games Family
#line 4282
__declspec(dllimport) ATOM __stdcall 
#line 4285
RegisterClassA(const WNDCLASSA * lpWndClass); 
#line 4287
__declspec(dllimport) ATOM __stdcall 
#line 4290
RegisterClassW(const WNDCLASSW * lpWndClass); 
#line 4298 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
__declspec(dllimport) BOOL __stdcall 
#line 4301
UnregisterClassA(LPCSTR lpClassName, HINSTANCE hInstance); 
#line 4304
__declspec(dllimport) BOOL __stdcall 
#line 4307
UnregisterClassW(LPCWSTR lpClassName, HINSTANCE hInstance); 
#line 4317 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
#pragma endregion
#line 4319
#pragma region Desktop Family
#line 4323
__declspec(dllimport) BOOL __stdcall 
#line 4326
GetClassInfoA(HINSTANCE hInstance, LPCSTR lpClassName, LPWNDCLASSA lpWndClass); 
#line 4331
__declspec(dllimport) BOOL __stdcall 
#line 4334
GetClassInfoW(HINSTANCE hInstance, LPCWSTR lpClassName, LPWNDCLASSW lpWndClass); 
#line 4345 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
#pragma endregion
#line 4347
#pragma region Desktop Family or Games Family
#line 4351
__declspec(dllimport) ATOM __stdcall 
#line 4354
RegisterClassExA(const WNDCLASSEXA *); 
#line 4356
__declspec(dllimport) ATOM __stdcall 
#line 4359
RegisterClassExW(const WNDCLASSEXW *); 
#line 4368 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
#pragma endregion
#line 4370
#pragma region Desktop Family
#line 4374
__declspec(dllimport) BOOL __stdcall 
#line 4377
GetClassInfoExA(HINSTANCE hInstance, LPCSTR lpszClass, LPWNDCLASSEXA lpwcx); 
#line 4382
__declspec(dllimport) BOOL __stdcall 
#line 4385
GetClassInfoExW(HINSTANCE hInstance, LPCWSTR lpszClass, LPWNDCLASSEXW lpwcx); 
#line 4398 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
#pragma endregion
#line 4407
#pragma region Desktop Family or Games Family
#line 4411
typedef BOOLEAN (__stdcall *PREGISTERCLASSNAMEW)(LPCWSTR); 
#line 4414 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
__declspec(dllimport) HWND __stdcall 
#line 4417
CreateWindowExA(DWORD dwExStyle, LPCSTR lpClassName, LPCSTR lpWindowName, DWORD dwStyle, int X, int Y, int nWidth, int nHeight, HWND hWndParent, HMENU hMenu, HINSTANCE hInstance, LPVOID lpParam); 
#line 4430
__declspec(dllimport) HWND __stdcall 
#line 4433
CreateWindowExW(DWORD dwExStyle, LPCWSTR lpClassName, LPCWSTR lpWindowName, DWORD dwStyle, int X, int Y, int nWidth, int nHeight, HWND hWndParent, HMENU hMenu, HINSTANCE hInstance, LPVOID lpParam); 
#line 4453 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
#pragma endregion
#line 4469 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
#pragma region Desktop Family
#line 4473
__declspec(dllimport) BOOL __stdcall 
#line 4476
IsWindow(HWND hWnd); 
#line 4480
__declspec(dllimport) BOOL __stdcall 
#line 4483
IsMenu(HMENU hMenu); 
#line 4486
__declspec(dllimport) BOOL __stdcall 
#line 4489
IsChild(HWND hWndParent, HWND hWnd); 
#line 4494 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
#pragma endregion
#line 4496
#pragma region Desktop or Games Family
#line 4499
__declspec(dllimport) BOOL __stdcall 
#line 4502
DestroyWindow(HWND hWnd); 
#line 4505
__declspec(dllimport) BOOL __stdcall 
#line 4508
ShowWindow(HWND hWnd, int nCmdShow); 
#line 4513 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
#pragma endregion
#line 4515
#pragma region Desktop Family
#line 4519
__declspec(dllimport) BOOL __stdcall 
#line 4522
AnimateWindow(HWND hWnd, DWORD dwTime, DWORD dwFlags); 
#line 4529 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
#pragma endregion
#line 4534
#pragma region Desktop Family
#line 4537
__declspec(dllimport) BOOL __stdcall 
#line 4540
UpdateLayeredWindow(HWND hWnd, HDC hdcDst, POINT * pptDst, SIZE * psize, HDC hdcSrc, POINT * pptSrc, COLORREF crKey, BLENDFUNCTION * pblend, DWORD dwFlags); 
#line 4566
typedef 
#line 4554
struct tagUPDATELAYEREDWINDOWINFO { 
#line 4556
DWORD cbSize; 
#line 4557
HDC hdcDst; 
#line 4558
const POINT *pptDst; 
#line 4559
const SIZE *psize; 
#line 4560
HDC hdcSrc; 
#line 4561
const POINT *pptSrc; 
#line 4562
COLORREF crKey; 
#line 4563
const BLENDFUNCTION *pblend; 
#line 4564
DWORD dwFlags; 
#line 4565
const RECT *prcDirty; 
#line 4566
} UPDATELAYEREDWINDOWINFO, *PUPDATELAYEREDWINDOWINFO; 
#line 4572 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
__declspec(dllimport) BOOL __stdcall 
#line 4575
UpdateLayeredWindowIndirect(HWND hWnd, const UPDATELAYEREDWINDOWINFO * pULWInfo); 
#line 4580 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
#pragma endregion
#line 4586 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
#pragma region Desktop Family
#line 4589
__declspec(dllimport) BOOL __stdcall 
#line 4592
GetLayeredWindowAttributes(HWND hwnd, COLORREF * pcrKey, BYTE * pbAlpha, DWORD * pdwFlags); 
#line 4605 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
__declspec(dllimport) BOOL __stdcall 
#line 4608
PrintWindow(HWND hwnd, HDC hdcBlt, UINT nFlags); 
#line 4614 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
#pragma endregion
#line 4618 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
#pragma region Desktop Family
#line 4621
__declspec(dllimport) BOOL __stdcall 
#line 4624
SetLayeredWindowAttributes(HWND hwnd, COLORREF crKey, BYTE bAlpha, DWORD dwFlags); 
#line 4631 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
#pragma endregion
#line 4646 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
#pragma region Desktop Family
#line 4651
__declspec(dllimport) BOOL __stdcall 
#line 4654
ShowWindowAsync(HWND hWnd, int nCmdShow); 
#line 4659 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
__declspec(dllimport) BOOL __stdcall 
#line 4662
FlashWindow(HWND hWnd, BOOL bInvert); 
#line 4673
typedef 
#line 4667
struct { 
#line 4668
UINT cbSize; 
#line 4669
HWND hwnd; 
#line 4670
DWORD dwFlags; 
#line 4671
UINT uCount; 
#line 4672
DWORD dwTimeout; 
#line 4673
} FLASHWINFO, *PFLASHWINFO; 
#line 4675
__declspec(dllimport) BOOL __stdcall 
#line 4678
FlashWindowEx(PFLASHWINFO pfwi); 
#line 4690 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
__declspec(dllimport) BOOL __stdcall 
#line 4693
ShowOwnedPopups(HWND hWnd, BOOL fShow); 
#line 4697
__declspec(dllimport) BOOL __stdcall 
#line 4700
OpenIcon(HWND hWnd); 
#line 4703
__declspec(dllimport) BOOL __stdcall 
#line 4706
CloseWindow(HWND hWnd); 
#line 4710 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
#pragma endregion
#line 4712
#pragma region Desktop Family
#line 4715
__declspec(dllimport) BOOL __stdcall 
#line 4718
MoveWindow(HWND hWnd, int X, int Y, int nWidth, int nHeight, BOOL bRepaint); 
#line 4726
__declspec(dllimport) BOOL __stdcall 
#line 4729
SetWindowPos(HWND hWnd, HWND hWndInsertAfter, int X, int Y, int cx, int cy, UINT uFlags); 
#line 4739 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
#pragma endregion
#line 4741
#pragma region Desktop Family
#line 4744
__declspec(dllimport) BOOL __stdcall 
#line 4747
GetWindowPlacement(HWND hWnd, WINDOWPLACEMENT * lpwndpl); 
#line 4751
__declspec(dllimport) BOOL __stdcall 
#line 4754
SetWindowPlacement(HWND hWnd, const WINDOWPLACEMENT * lpwndpl); 
#line 4764
__declspec(dllimport) BOOL __stdcall 
#line 4767
GetWindowDisplayAffinity(HWND hWnd, DWORD * pdwAffinity); 
#line 4771
__declspec(dllimport) BOOL __stdcall 
#line 4774
SetWindowDisplayAffinity(HWND hWnd, DWORD dwAffinity); 
#line 4781 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
#pragma endregion
#line 4785
#pragma region Desktop Family
#line 4788
__declspec(dllimport) HDWP __stdcall 
#line 4791
BeginDeferWindowPos(int nNumWindows); 
#line 4794
__declspec(dllimport) HDWP __stdcall 
#line 4797
DeferWindowPos(HDWP hWinPosInfo, HWND hWnd, HWND hWndInsertAfter, int x, int y, int cx, int cy, UINT uFlags); 
#line 4808
__declspec(dllimport) BOOL __stdcall 
#line 4811
EndDeferWindowPos(HDWP hWinPosInfo); 
#line 4815 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
#pragma endregion
#line 4819 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
#pragma region Desktop Family
#line 4822
__declspec(dllimport) BOOL __stdcall 
#line 4825
IsWindowVisible(HWND hWnd); 
#line 4829 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
#pragma endregion
#line 4831
#pragma region Desktop Family
#line 4834
__declspec(dllimport) BOOL __stdcall 
#line 4837
IsIconic(HWND hWnd); 
#line 4840
__declspec(dllimport) BOOL __stdcall 
#line 4843
AnyPopup(); 
#line 4846
__declspec(dllimport) BOOL __stdcall 
#line 4849
BringWindowToTop(HWND hWnd); 
#line 4852
__declspec(dllimport) BOOL __stdcall 
#line 4855
IsZoomed(HWND hWnd); 
#line 4859 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
#pragma endregion
#line 24 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\shared\\pshpack2.h"
#pragma warning(disable:4103)
#line 26
#pragma pack ( push, 2 )
#line 4899 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
#pragma region Application Family or OneCore Family
#line 4913
typedef 
#line 4905
struct { 
#line 4906
DWORD style; 
#line 4907
DWORD dwExtendedStyle; 
#line 4908
WORD cdit; 
#line 4909
short x; 
#line 4910
short y; 
#line 4911
short cx; 
#line 4912
short cy; 
#line 4913
} DLGTEMPLATE; 
#line 4916 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
#pragma endregion
#line 4918
#pragma region Desktop Family
#line 4921
typedef DLGTEMPLATE *LPDLGTEMPLATEA; 
#line 4922
typedef DLGTEMPLATE *LPDLGTEMPLATEW; 
#line 4926
typedef LPDLGTEMPLATEA LPDLGTEMPLATE; 
#line 4930 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
#pragma endregion
#line 4932
#pragma region Application Family or OneCore Family
#line 4935
typedef const DLGTEMPLATE *LPCDLGTEMPLATEA; 
#line 4936
typedef const DLGTEMPLATE *LPCDLGTEMPLATEW; 
#line 4940
typedef LPCDLGTEMPLATEA LPCDLGTEMPLATE; 
#line 4944 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
#pragma endregion
#line 4947
#pragma region Desktop Family
#line 4961
typedef 
#line 4953
struct { 
#line 4954
DWORD style; 
#line 4955
DWORD dwExtendedStyle; 
#line 4956
short x; 
#line 4957
short y; 
#line 4958
short cx; 
#line 4959
short cy; 
#line 4960
WORD id; 
#line 4961
} DLGITEMTEMPLATE; 
#line 4962
typedef DLGITEMTEMPLATE *PDLGITEMTEMPLATEA; 
#line 4963
typedef DLGITEMTEMPLATE *PDLGITEMTEMPLATEW; 
#line 4967
typedef PDLGITEMTEMPLATEA PDLGITEMTEMPLATE; 
#line 4969 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
typedef DLGITEMTEMPLATE *LPDLGITEMTEMPLATEA; 
#line 4970
typedef DLGITEMTEMPLATE *LPDLGITEMTEMPLATEW; 
#line 4974
typedef LPDLGITEMTEMPLATEA LPDLGITEMTEMPLATE; 
#line 4978 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
#pragma endregion
#line 27 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\shared\\poppack.h"
#pragma warning(disable:4103)
#line 29
#pragma pack ( pop )
#line 4983 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
#pragma region Desktop Family
#line 4986
__declspec(dllimport) HWND __stdcall 
#line 4989
CreateDialogParamA(HINSTANCE hInstance, LPCSTR lpTemplateName, HWND hWndParent, DLGPROC lpDialogFunc, LPARAM dwInitParam); 
#line 4995
__declspec(dllimport) HWND __stdcall 
#line 4998
CreateDialogParamW(HINSTANCE hInstance, LPCWSTR lpTemplateName, HWND hWndParent, DLGPROC lpDialogFunc, LPARAM dwInitParam); 
#line 5010 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
__declspec(dllimport) HWND __stdcall 
#line 5013
CreateDialogIndirectParamA(HINSTANCE hInstance, LPCDLGTEMPLATEA lpTemplate, HWND hWndParent, DLGPROC lpDialogFunc, LPARAM dwInitParam); 
#line 5019
__declspec(dllimport) HWND __stdcall 
#line 5022
CreateDialogIndirectParamW(HINSTANCE hInstance, LPCDLGTEMPLATEW lpTemplate, HWND hWndParent, DLGPROC lpDialogFunc, LPARAM dwInitParam); 
#line 5054 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
__declspec(dllimport) INT_PTR __stdcall 
#line 5057
DialogBoxParamA(HINSTANCE hInstance, LPCSTR lpTemplateName, HWND hWndParent, DLGPROC lpDialogFunc, LPARAM dwInitParam); 
#line 5063
__declspec(dllimport) INT_PTR __stdcall 
#line 5066
DialogBoxParamW(HINSTANCE hInstance, LPCWSTR lpTemplateName, HWND hWndParent, DLGPROC lpDialogFunc, LPARAM dwInitParam); 
#line 5078 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
__declspec(dllimport) INT_PTR __stdcall 
#line 5081
DialogBoxIndirectParamA(HINSTANCE hInstance, LPCDLGTEMPLATEA hDialogTemplate, HWND hWndParent, DLGPROC lpDialogFunc, LPARAM dwInitParam); 
#line 5087
__declspec(dllimport) INT_PTR __stdcall 
#line 5090
DialogBoxIndirectParamW(HINSTANCE hInstance, LPCDLGTEMPLATEW hDialogTemplate, HWND hWndParent, DLGPROC lpDialogFunc, LPARAM dwInitParam); 
#line 5122 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
__declspec(dllimport) BOOL __stdcall 
#line 5125
EndDialog(HWND hDlg, INT_PTR nResult); 
#line 5129
__declspec(dllimport) HWND __stdcall 
#line 5132
GetDlgItem(HWND hDlg, int nIDDlgItem); 
#line 5136
__declspec(dllimport) BOOL __stdcall 
#line 5139
SetDlgItemInt(HWND hDlg, int nIDDlgItem, UINT uValue, BOOL bSigned); 
#line 5145
__declspec(dllimport) UINT __stdcall 
#line 5148
GetDlgItemInt(HWND hDlg, int nIDDlgItem, BOOL * lpTranslated, BOOL bSigned); 
#line 5154
__declspec(dllimport) BOOL __stdcall 
#line 5157
SetDlgItemTextA(HWND hDlg, int nIDDlgItem, LPCSTR lpString); 
#line 5161
__declspec(dllimport) BOOL __stdcall 
#line 5164
SetDlgItemTextW(HWND hDlg, int nIDDlgItem, LPCWSTR lpString); 
#line 5175 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
__declspec(dllimport) UINT __stdcall 
#line 5178
GetDlgItemTextA(HWND hDlg, int nIDDlgItem, LPSTR lpString, int cchMax); 
#line 5184
__declspec(dllimport) UINT __stdcall 
#line 5187
GetDlgItemTextW(HWND hDlg, int nIDDlgItem, LPWSTR lpString, int cchMax); 
#line 5198 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
__declspec(dllimport) BOOL __stdcall 
#line 5201
CheckDlgButton(HWND hDlg, int nIDButton, UINT uCheck); 
#line 5206
__declspec(dllimport) BOOL __stdcall 
#line 5209
CheckRadioButton(HWND hDlg, int nIDFirstButton, int nIDLastButton, int nIDCheckButton); 
#line 5215
__declspec(dllimport) UINT __stdcall 
#line 5218
IsDlgButtonChecked(HWND hDlg, int nIDButton); 
#line 5222
__declspec(dllimport) LRESULT __stdcall 
#line 5225
SendDlgItemMessageA(HWND hDlg, int nIDDlgItem, UINT Msg, WPARAM wParam, LPARAM lParam); 
#line 5231
__declspec(dllimport) LRESULT __stdcall 
#line 5234
SendDlgItemMessageW(HWND hDlg, int nIDDlgItem, UINT Msg, WPARAM wParam, LPARAM lParam); 
#line 5246 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
__declspec(dllimport) HWND __stdcall 
#line 5249
GetNextDlgGroupItem(HWND hDlg, HWND hCtl, BOOL bPrevious); 
#line 5254
__declspec(dllimport) HWND __stdcall 
#line 5257
GetNextDlgTabItem(HWND hDlg, HWND hCtl, BOOL bPrevious); 
#line 5262
__declspec(dllimport) int __stdcall 
#line 5265
GetDlgCtrlID(HWND hWnd); 
#line 5268
__declspec(dllimport) long __stdcall 
#line 5271
GetDialogBaseUnits(); 
#line 5274
__declspec(dllimport) LRESULT __stdcall 
#line 5282 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
DefDlgProcA(HWND hDlg, UINT Msg, WPARAM wParam, LPARAM lParam); 
#line 5287
__declspec(dllimport) LRESULT __stdcall 
#line 5295 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
DefDlgProcW(HWND hDlg, UINT Msg, WPARAM wParam, LPARAM lParam); 
#line 5310 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
typedef 
#line 5306
enum DIALOG_CONTROL_DPI_CHANGE_BEHAVIORS { 
#line 5307
DCDC_DEFAULT, 
#line 5308
DCDC_DISABLE_FONT_UPDATE, 
#line 5309
DCDC_DISABLE_RELAYOUT
#line 5310
} DIALOG_CONTROL_DPI_CHANGE_BEHAVIORS; 
#line 5313
extern "C++" {constexpr DIALOG_CONTROL_DPI_CHANGE_BEHAVIORS operator|(DIALOG_CONTROL_DPI_CHANGE_BEHAVIORS a, DIALOG_CONTROL_DPI_CHANGE_BEHAVIORS b) noexcept { return (DIALOG_CONTROL_DPI_CHANGE_BEHAVIORS)(((_ENUM_FLAG_SIZED_INTEGER< DIALOG_CONTROL_DPI_CHANGE_BEHAVIORS> ::type)a) | ((_ENUM_FLAG_SIZED_INTEGER< DIALOG_CONTROL_DPI_CHANGE_BEHAVIORS> ::type)b)); } inline DIALOG_CONTROL_DPI_CHANGE_BEHAVIORS &operator|=(DIALOG_CONTROL_DPI_CHANGE_BEHAVIORS &a, DIALOG_CONTROL_DPI_CHANGE_BEHAVIORS b) noexcept { return (DIALOG_CONTROL_DPI_CHANGE_BEHAVIORS &)(((_ENUM_FLAG_SIZED_INTEGER< DIALOG_CONTROL_DPI_CHANGE_BEHAVIORS> ::type &)a) |= ((_ENUM_FLAG_SIZED_INTEGER< DIALOG_CONTROL_DPI_CHANGE_BEHAVIORS> ::type)b)); } constexpr DIALOG_CONTROL_DPI_CHANGE_BEHAVIORS operator&(DIALOG_CONTROL_DPI_CHANGE_BEHAVIORS a, DIALOG_CONTROL_DPI_CHANGE_BEHAVIORS b) noexcept { return (DIALOG_CONTROL_DPI_CHANGE_BEHAVIORS)(((_ENUM_FLAG_SIZED_INTEGER< DIALOG_CONTROL_DPI_CHANGE_BEHAVIORS> ::type)a) & ((_ENUM_FLAG_SIZED_INTEGER< DIALOG_CONTROL_DPI_CHANGE_BEHAVIORS> ::type)b)); } inline DIALOG_CONTROL_DPI_CHANGE_BEHAVIORS &operator&=(DIALOG_CONTROL_DPI_CHANGE_BEHAVIORS &a, DIALOG_CONTROL_DPI_CHANGE_BEHAVIORS b) noexcept { return (DIALOG_CONTROL_DPI_CHANGE_BEHAVIORS &)(((_ENUM_FLAG_SIZED_INTEGER< DIALOG_CONTROL_DPI_CHANGE_BEHAVIORS> ::type &)a) &= ((_ENUM_FLAG_SIZED_INTEGER< DIALOG_CONTROL_DPI_CHANGE_BEHAVIORS> ::type)b)); } constexpr DIALOG_CONTROL_DPI_CHANGE_BEHAVIORS operator~(DIALOG_CONTROL_DPI_CHANGE_BEHAVIORS a) noexcept { return (DIALOG_CONTROL_DPI_CHANGE_BEHAVIORS)(~((_ENUM_FLAG_SIZED_INTEGER< DIALOG_CONTROL_DPI_CHANGE_BEHAVIORS> ::type)a)); } constexpr DIALOG_CONTROL_DPI_CHANGE_BEHAVIORS operator^(DIALOG_CONTROL_DPI_CHANGE_BEHAVIORS a, DIALOG_CONTROL_DPI_CHANGE_BEHAVIORS b) noexcept { return (DIALOG_CONTROL_DPI_CHANGE_BEHAVIORS)(((_ENUM_FLAG_SIZED_INTEGER< DIALOG_CONTROL_DPI_CHANGE_BEHAVIORS> ::type)a) ^ ((_ENUM_FLAG_SIZED_INTEGER< DIALOG_CONTROL_DPI_CHANGE_BEHAVIORS> ::type)b)); } inline DIALOG_CONTROL_DPI_CHANGE_BEHAVIORS &operator^=(DIALOG_CONTROL_DPI_CHANGE_BEHAVIORS &a, DIALOG_CONTROL_DPI_CHANGE_BEHAVIORS b) noexcept { return (DIALOG_CONTROL_DPI_CHANGE_BEHAVIORS &)(((_ENUM_FLAG_SIZED_INTEGER< DIALOG_CONTROL_DPI_CHANGE_BEHAVIORS> ::type &)a) ^= ((_ENUM_FLAG_SIZED_INTEGER< DIALOG_CONTROL_DPI_CHANGE_BEHAVIORS> ::type)b)); } }
#line 5318 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
BOOL __stdcall SetDialogControlDpiChangeBehavior(HWND hWnd, DIALOG_CONTROL_DPI_CHANGE_BEHAVIORS mask, DIALOG_CONTROL_DPI_CHANGE_BEHAVIORS values); 
#line 5325
DIALOG_CONTROL_DPI_CHANGE_BEHAVIORS __stdcall GetDialogControlDpiChangeBehavior(HWND hWnd); 
#line 5333
typedef 
#line 5328
enum DIALOG_DPI_CHANGE_BEHAVIORS { 
#line 5329
DDC_DEFAULT, 
#line 5330
DDC_DISABLE_ALL, 
#line 5331
DDC_DISABLE_RESIZE, 
#line 5332
DDC_DISABLE_CONTROL_RELAYOUT = 4
#line 5333
} DIALOG_DPI_CHANGE_BEHAVIORS; 
#line 5336
extern "C++" {constexpr DIALOG_DPI_CHANGE_BEHAVIORS operator|(DIALOG_DPI_CHANGE_BEHAVIORS a, DIALOG_DPI_CHANGE_BEHAVIORS b) noexcept { return (DIALOG_DPI_CHANGE_BEHAVIORS)(((_ENUM_FLAG_SIZED_INTEGER< DIALOG_DPI_CHANGE_BEHAVIORS> ::type)a) | ((_ENUM_FLAG_SIZED_INTEGER< DIALOG_DPI_CHANGE_BEHAVIORS> ::type)b)); } inline DIALOG_DPI_CHANGE_BEHAVIORS &operator|=(DIALOG_DPI_CHANGE_BEHAVIORS &a, DIALOG_DPI_CHANGE_BEHAVIORS b) noexcept { return (DIALOG_DPI_CHANGE_BEHAVIORS &)(((_ENUM_FLAG_SIZED_INTEGER< DIALOG_DPI_CHANGE_BEHAVIORS> ::type &)a) |= ((_ENUM_FLAG_SIZED_INTEGER< DIALOG_DPI_CHANGE_BEHAVIORS> ::type)b)); } constexpr DIALOG_DPI_CHANGE_BEHAVIORS operator&(DIALOG_DPI_CHANGE_BEHAVIORS a, DIALOG_DPI_CHANGE_BEHAVIORS b) noexcept { return (DIALOG_DPI_CHANGE_BEHAVIORS)(((_ENUM_FLAG_SIZED_INTEGER< DIALOG_DPI_CHANGE_BEHAVIORS> ::type)a) & ((_ENUM_FLAG_SIZED_INTEGER< DIALOG_DPI_CHANGE_BEHAVIORS> ::type)b)); } inline DIALOG_DPI_CHANGE_BEHAVIORS &operator&=(DIALOG_DPI_CHANGE_BEHAVIORS &a, DIALOG_DPI_CHANGE_BEHAVIORS b) noexcept { return (DIALOG_DPI_CHANGE_BEHAVIORS &)(((_ENUM_FLAG_SIZED_INTEGER< DIALOG_DPI_CHANGE_BEHAVIORS> ::type &)a) &= ((_ENUM_FLAG_SIZED_INTEGER< DIALOG_DPI_CHANGE_BEHAVIORS> ::type)b)); } constexpr DIALOG_DPI_CHANGE_BEHAVIORS operator~(DIALOG_DPI_CHANGE_BEHAVIORS a) noexcept { return (DIALOG_DPI_CHANGE_BEHAVIORS)(~((_ENUM_FLAG_SIZED_INTEGER< DIALOG_DPI_CHANGE_BEHAVIORS> ::type)a)); } constexpr DIALOG_DPI_CHANGE_BEHAVIORS operator^(DIALOG_DPI_CHANGE_BEHAVIORS a, DIALOG_DPI_CHANGE_BEHAVIORS b) noexcept { return (DIALOG_DPI_CHANGE_BEHAVIORS)(((_ENUM_FLAG_SIZED_INTEGER< DIALOG_DPI_CHANGE_BEHAVIORS> ::type)a) ^ ((_ENUM_FLAG_SIZED_INTEGER< DIALOG_DPI_CHANGE_BEHAVIORS> ::type)b)); } inline DIALOG_DPI_CHANGE_BEHAVIORS &operator^=(DIALOG_DPI_CHANGE_BEHAVIORS &a, DIALOG_DPI_CHANGE_BEHAVIORS b) noexcept { return (DIALOG_DPI_CHANGE_BEHAVIORS &)(((_ENUM_FLAG_SIZED_INTEGER< DIALOG_DPI_CHANGE_BEHAVIORS> ::type &)a) ^= ((_ENUM_FLAG_SIZED_INTEGER< DIALOG_DPI_CHANGE_BEHAVIORS> ::type)b)); } }
#line 5341 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
BOOL __stdcall SetDialogDpiChangeBehavior(HWND hDlg, DIALOG_DPI_CHANGE_BEHAVIORS mask, DIALOG_DPI_CHANGE_BEHAVIORS values); 
#line 5348
DIALOG_DPI_CHANGE_BEHAVIORS __stdcall GetDialogDpiChangeBehavior(HWND hDlg); 
#line 5352 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
#pragma endregion
#line 5365 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
#pragma region Desktop Family
#line 5370
__declspec(dllimport) BOOL __stdcall 
#line 5373
CallMsgFilterA(LPMSG lpMsg, int nCode); 
#line 5376
__declspec(dllimport) BOOL __stdcall 
#line 5379
CallMsgFilterW(LPMSG lpMsg, int nCode); 
#line 5396 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
__declspec(dllimport) BOOL __stdcall 
#line 5399
OpenClipboard(HWND hWndNewOwner); 
#line 5402
__declspec(dllimport) BOOL __stdcall 
#line 5405
CloseClipboard(); 
#line 5411
__declspec(dllimport) DWORD __stdcall 
#line 5414
GetClipboardSequenceNumber(); 
#line 5419 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
__declspec(dllimport) HWND __stdcall 
#line 5422
GetClipboardOwner(); 
#line 5425
__declspec(dllimport) HWND __stdcall 
#line 5428
SetClipboardViewer(HWND hWndNewViewer); 
#line 5431
__declspec(dllimport) HWND __stdcall 
#line 5434
GetClipboardViewer(); 
#line 5437
__declspec(dllimport) BOOL __stdcall 
#line 5440
ChangeClipboardChain(HWND hWndRemove, HWND hWndNewNext); 
#line 5444
__declspec(dllimport) HANDLE __stdcall 
#line 5447
SetClipboardData(UINT uFormat, HANDLE hMem); 
#line 5451
__declspec(dllimport) HANDLE __stdcall 
#line 5454
GetClipboardData(UINT uFormat); 
#line 5457
__declspec(dllimport) UINT __stdcall 
#line 5460
RegisterClipboardFormatA(LPCSTR lpszFormat); 
#line 5462
__declspec(dllimport) UINT __stdcall 
#line 5465
RegisterClipboardFormatW(LPCWSTR lpszFormat); 
#line 5473 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
__declspec(dllimport) int __stdcall 
#line 5476
CountClipboardFormats(); 
#line 5479
__declspec(dllimport) UINT __stdcall 
#line 5482
EnumClipboardFormats(UINT format); 
#line 5485
__declspec(dllimport) int __stdcall 
#line 5488
GetClipboardFormatNameA(UINT format, LPSTR lpszFormatName, int cchMaxCount); 
#line 5492
__declspec(dllimport) int __stdcall 
#line 5495
GetClipboardFormatNameW(UINT format, LPWSTR lpszFormatName, int cchMaxCount); 
#line 5505 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
__declspec(dllimport) BOOL __stdcall 
#line 5508
EmptyClipboard(); 
#line 5511
__declspec(dllimport) BOOL __stdcall 
#line 5514
IsClipboardFormatAvailable(UINT format); 
#line 5517
__declspec(dllimport) int __stdcall 
#line 5520
GetPriorityClipboardFormat(UINT * paFormatPriorityList, int cFormats); 
#line 5524
__declspec(dllimport) HWND __stdcall 
#line 5527
GetOpenClipboardWindow(); 
#line 5531
__declspec(dllimport) BOOL __stdcall 
#line 5534
AddClipboardFormatListener(HWND hwnd); 
#line 5537
__declspec(dllimport) BOOL __stdcall 
#line 5540
RemoveClipboardFormatListener(HWND hwnd); 
#line 5543
__declspec(dllimport) BOOL __stdcall 
#line 5546
GetUpdatedClipboardFormats(PUINT lpuiFormats, UINT cFormats, PUINT pcFormatsOut); 
#line 5558 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
__declspec(dllimport) BOOL __stdcall 
#line 5561
CharToOemA(LPCSTR pSrc, LPSTR pDst); 
#line 5564
__declspec(dllimport) BOOL __stdcall 
#line 5567
CharToOemW(LPCWSTR pSrc, LPSTR pDst); 
#line 5577 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
__declspec(dllimport) BOOL __stdcall 
#line 5580
OemToCharA(LPCSTR pSrc, LPSTR pDst); 
#line 5584
__declspec(dllimport) BOOL __stdcall 
#line 5587
OemToCharW(LPCSTR pSrc, LPWSTR pDst); 
#line 5596 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
__declspec(dllimport) BOOL __stdcall 
#line 5599
CharToOemBuffA(LPCSTR lpszSrc, LPSTR lpszDst, DWORD cchDstLength); 
#line 5603
__declspec(dllimport) BOOL __stdcall 
#line 5606
CharToOemBuffW(LPCWSTR lpszSrc, LPSTR lpszDst, DWORD cchDstLength); 
#line 5616 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
__declspec(dllimport) BOOL __stdcall 
#line 5619
OemToCharBuffA(LPCSTR lpszSrc, LPSTR lpszDst, DWORD cchDstLength); 
#line 5623
__declspec(dllimport) BOOL __stdcall 
#line 5626
OemToCharBuffW(LPCSTR lpszSrc, LPWSTR lpszDst, DWORD cchDstLength); 
#line 5637 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
#pragma endregion
#line 5639
#pragma region Desktop Family or OneCore Family
#line 5642
__declspec(dllimport) LPSTR __stdcall 
#line 5645
CharUpperA(LPSTR lpsz); 
#line 5647
__declspec(dllimport) LPWSTR __stdcall 
#line 5650
CharUpperW(LPWSTR lpsz); 
#line 5658 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
__declspec(dllimport) DWORD __stdcall 
#line 5661
CharUpperBuffA(LPSTR lpsz, DWORD cchLength); 
#line 5664
__declspec(dllimport) DWORD __stdcall 
#line 5667
CharUpperBuffW(LPWSTR lpsz, DWORD cchLength); 
#line 5676 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
__declspec(dllimport) LPSTR __stdcall 
#line 5679
CharLowerA(LPSTR lpsz); 
#line 5681
__declspec(dllimport) LPWSTR __stdcall 
#line 5684
CharLowerW(LPWSTR lpsz); 
#line 5692 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
__declspec(dllimport) DWORD __stdcall 
#line 5695
CharLowerBuffA(LPSTR lpsz, DWORD cchLength); 
#line 5698
__declspec(dllimport) DWORD __stdcall 
#line 5701
CharLowerBuffW(LPWSTR lpsz, DWORD cchLength); 
#line 5710 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
__declspec(dllimport) LPSTR __stdcall 
#line 5713
CharNextA(LPCSTR lpsz); 
#line 5715
__declspec(dllimport) LPWSTR __stdcall 
#line 5718
CharNextW(LPCWSTR lpsz); 
#line 5726 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
__declspec(dllimport) LPSTR __stdcall 
#line 5729
CharPrevA(LPCSTR lpszStart, LPCSTR lpszCurrent); 
#line 5732
__declspec(dllimport) LPWSTR __stdcall 
#line 5735
CharPrevW(LPCWSTR lpszStart, LPCWSTR lpszCurrent); 
#line 5745 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
__declspec(dllimport) LPSTR __stdcall 
#line 5748
CharNextExA(WORD CodePage, LPCSTR lpCurrentChar, DWORD dwFlags); 
#line 5753
__declspec(dllimport) LPSTR __stdcall 
#line 5756
CharPrevExA(WORD CodePage, LPCSTR lpStart, LPCSTR lpCurrentChar, DWORD dwFlags); 
#line 5764 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
#pragma endregion
#line 5780
#pragma region Desktop or OneCore Family
#line 5788
__declspec(dllimport) BOOL __stdcall 
#line 5791
IsCharAlphaA(CHAR ch); 
#line 5793
__declspec(dllimport) BOOL __stdcall 
#line 5796
IsCharAlphaW(WCHAR ch); 
#line 5804 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
__declspec(dllimport) BOOL __stdcall 
#line 5807
IsCharAlphaNumericA(CHAR ch); 
#line 5809
__declspec(dllimport) BOOL __stdcall 
#line 5812
IsCharAlphaNumericW(WCHAR ch); 
#line 5820 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
__declspec(dllimport) BOOL __stdcall 
#line 5823
IsCharUpperA(CHAR ch); 
#line 5825
__declspec(dllimport) BOOL __stdcall 
#line 5828
IsCharUpperW(WCHAR ch); 
#line 5836 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
__declspec(dllimport) BOOL __stdcall 
#line 5839
IsCharLowerA(CHAR ch); 
#line 5841
__declspec(dllimport) BOOL __stdcall 
#line 5844
IsCharLowerW(WCHAR ch); 
#line 5855 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
#pragma endregion
#line 5857
#pragma region Desktop Family
#line 5860
__declspec(dllimport) HWND __stdcall 
#line 5863
SetFocus(HWND hWnd); 
#line 5866
__declspec(dllimport) HWND __stdcall 
#line 5869
GetActiveWindow(); 
#line 5872
__declspec(dllimport) HWND __stdcall 
#line 5875
GetFocus(); 
#line 5878
__declspec(dllimport) UINT __stdcall 
#line 5881
GetKBCodePage(); 
#line 5884
__declspec(dllimport) SHORT __stdcall 
#line 5887
GetKeyState(int nVirtKey); 
#line 5890
__declspec(dllimport) SHORT __stdcall 
#line 5893
GetAsyncKeyState(int vKey); 
#line 5896
__declspec(dllimport) BOOL __stdcall 
#line 5900
GetKeyboardState(PBYTE lpKeyState); 
#line 5903
__declspec(dllimport) BOOL __stdcall 
#line 5906
SetKeyboardState(LPBYTE lpKeyState); 
#line 5911 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
#pragma endregion
#line 5913
#pragma region Desktop or PC Family
#line 5916
__declspec(dllimport) int __stdcall 
#line 5919
GetKeyNameTextA(LONG lParam, LPSTR lpString, int cchSize); 
#line 5923
__declspec(dllimport) int __stdcall 
#line 5926
GetKeyNameTextW(LONG lParam, LPWSTR lpString, int cchSize); 
#line 5937 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
#pragma endregion
#line 5939
#pragma region Desktop Family
#line 5943
__declspec(dllimport) int __stdcall 
#line 5946
GetKeyboardType(int nTypeFlag); 
#line 5949
__declspec(dllimport) int __stdcall 
#line 5952
ToAscii(UINT uVirtKey, UINT uScanCode, const BYTE * lpKeyState, LPWORD lpChar, UINT uFlags); 
#line 5960
__declspec(dllimport) int __stdcall 
#line 5963
ToAsciiEx(UINT uVirtKey, UINT uScanCode, const BYTE * lpKeyState, LPWORD lpChar, UINT uFlags, HKL dwhkl); 
#line 5972 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
__declspec(dllimport) int __stdcall 
#line 5975
ToUnicode(UINT wVirtKey, UINT wScanCode, const BYTE * lpKeyState, LPWSTR pwszBuff, int cchBuff, UINT wFlags); 
#line 5983
__declspec(dllimport) DWORD __stdcall 
#line 5986
OemKeyScan(WORD wOemChar); 
#line 5989
__declspec(dllimport) SHORT __stdcall 
#line 5992
VkKeyScanA(CHAR ch); 
#line 5994
__declspec(dllimport) SHORT __stdcall 
#line 5997
VkKeyScanW(WCHAR ch); 
#line 6006 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
__declspec(dllimport) SHORT __stdcall 
#line 6009
VkKeyScanExA(CHAR ch, HKL dwhkl); 
#line 6012
__declspec(dllimport) SHORT __stdcall 
#line 6015
VkKeyScanExW(WCHAR ch, HKL dwhkl); 
#line 6031 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
__declspec(dllimport) void __stdcall 
#line 6034
keybd_event(BYTE bVk, BYTE bScan, DWORD dwFlags, ULONG_PTR dwExtraInfo); 
#line 6041 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
#pragma endregion
#line 6062 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
#pragma region Desktop Family
#line 6065
__declspec(dllimport) void __stdcall 
#line 6068
mouse_event(DWORD dwFlags, DWORD dx, DWORD dy, DWORD dwData, ULONG_PTR dwExtraInfo); 
#line 6076 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
#pragma endregion
#line 6087
typedef 
#line 6080
struct tagMOUSEINPUT { 
#line 6081
LONG dx; 
#line 6082
LONG dy; 
#line 6083
DWORD mouseData; 
#line 6084
DWORD dwFlags; 
#line 6085
DWORD time; 
#line 6086
ULONG_PTR dwExtraInfo; 
#line 6087
} MOUSEINPUT, *PMOUSEINPUT, *LPMOUSEINPUT; 
#line 6105
typedef 
#line 6089
struct tagKEYBDINPUT { 
#line 6090
WORD wVk; 
#line 6091
WORD wScan; 
#line 6092
DWORD dwFlags; 
#line 6093
DWORD time; 
#line 6104
ULONG_PTR dwExtraInfo; 
#line 6105
} KEYBDINPUT, *PKEYBDINPUT, *LPKEYBDINPUT; 
#line 6107
#pragma region Desktop Family
#line 6114
typedef 
#line 6110
struct tagHARDWAREINPUT { 
#line 6111
DWORD uMsg; 
#line 6112
WORD wParamL; 
#line 6113
WORD wParamH; 
#line 6114
} HARDWAREINPUT, *PHARDWAREINPUT, *LPHARDWAREINPUT; 
#line 6129
typedef 
#line 6120
struct tagINPUT { 
#line 6121
DWORD type; 
#line 6124
union { 
#line 6125
MOUSEINPUT mi; 
#line 6126
KEYBDINPUT ki; 
#line 6127
HARDWAREINPUT hi; 
#line 6128
}; 
#line 6129
} INPUT, *PINPUT, *LPINPUT; 
#line 6131
__declspec(dllimport) UINT __stdcall 
#line 6134
SendInput(UINT cInputs, LPINPUT pInputs, int cbSize); 
#line 6140 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
#pragma endregion
#line 6146 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
#pragma region Desktop Family
#line 6156
struct HTOUCHINPUT__ { int unused; }; typedef HTOUCHINPUT__ *HTOUCHINPUT; 
#line 6169
typedef 
#line 6158
struct tagTOUCHINPUT { 
#line 6159
LONG x; 
#line 6160
LONG y; 
#line 6161
HANDLE hSource; 
#line 6162
DWORD dwID; 
#line 6163
DWORD dwFlags; 
#line 6164
DWORD dwMask; 
#line 6165
DWORD dwTime; 
#line 6166
ULONG_PTR dwExtraInfo; 
#line 6167
DWORD cxContact; 
#line 6168
DWORD cyContact; 
#line 6169
} TOUCHINPUT, *PTOUCHINPUT; 
#line 6170
typedef const TOUCHINPUT *PCTOUCHINPUT; 
#line 6174 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
#pragma endregion
#line 6200
#pragma region Desktop Family
#line 6203
__declspec(dllimport) BOOL __stdcall 
#line 6206
GetTouchInputInfo(HTOUCHINPUT hTouchInput, UINT cInputs, PTOUCHINPUT pInputs, int cbSize); 
#line 6212
__declspec(dllimport) BOOL __stdcall 
#line 6215
CloseTouchInputHandle(HTOUCHINPUT hTouchInput); 
#line 6220 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
#pragma endregion
#line 6229
#pragma region Desktop Family
#line 6232
__declspec(dllimport) BOOL __stdcall 
#line 6235
RegisterTouchWindow(HWND hwnd, ULONG ulFlags); 
#line 6239
__declspec(dllimport) BOOL __stdcall 
#line 6242
UnregisterTouchWindow(HWND hwnd); 
#line 6245
__declspec(dllimport) BOOL __stdcall 
#line 6248
IsTouchWindow(HWND hwnd, PULONG pulFlags); 
#line 6253 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
#pragma endregion
#line 6259 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
#pragma region Desktop Family
#line 6264
enum tagPOINTER_INPUT_TYPE { 
#line 6265
PT_POINTER = 1, 
#line 6266
PT_TOUCH, 
#line 6267
PT_PEN, 
#line 6268
PT_MOUSE, 
#line 6270
PT_TOUCHPAD
#line 6272 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
}; 
#line 6275
typedef DWORD POINTER_INPUT_TYPE; 
#line 6277
typedef UINT32 POINTER_FLAGS; 
#line 6280 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
#pragma endregion
#line 6309
#pragma region Desktop Family
#line 6324
typedef 
#line 6312
enum tagPOINTER_BUTTON_CHANGE_TYPE { 
#line 6313
POINTER_CHANGE_NONE, 
#line 6314
POINTER_CHANGE_FIRSTBUTTON_DOWN, 
#line 6315
POINTER_CHANGE_FIRSTBUTTON_UP, 
#line 6316
POINTER_CHANGE_SECONDBUTTON_DOWN, 
#line 6317
POINTER_CHANGE_SECONDBUTTON_UP, 
#line 6318
POINTER_CHANGE_THIRDBUTTON_DOWN, 
#line 6319
POINTER_CHANGE_THIRDBUTTON_UP, 
#line 6320
POINTER_CHANGE_FOURTHBUTTON_DOWN, 
#line 6321
POINTER_CHANGE_FOURTHBUTTON_UP, 
#line 6322
POINTER_CHANGE_FIFTHBUTTON_DOWN, 
#line 6323
POINTER_CHANGE_FIFTHBUTTON_UP
#line 6324
} POINTER_BUTTON_CHANGE_TYPE; 
#line 6343
typedef 
#line 6326
struct tagPOINTER_INFO { 
#line 6327
POINTER_INPUT_TYPE pointerType; 
#line 6328
UINT32 pointerId; 
#line 6329
UINT32 frameId; 
#line 6330
POINTER_FLAGS pointerFlags; 
#line 6331
HANDLE sourceDevice; 
#line 6332
HWND hwndTarget; 
#line 6333
POINT ptPixelLocation; 
#line 6334
POINT ptHimetricLocation; 
#line 6335
POINT ptPixelLocationRaw; 
#line 6336
POINT ptHimetricLocationRaw; 
#line 6337
DWORD dwTime; 
#line 6338
UINT32 historyCount; 
#line 6339
INT32 InputData; 
#line 6340
DWORD dwKeyStates; 
#line 6341
UINT64 PerformanceCount; 
#line 6342
POINTER_BUTTON_CHANGE_TYPE ButtonChangeType; 
#line 6343
} POINTER_INFO; 
#line 6346
typedef UINT32 TOUCH_FLAGS; 
#line 6349
typedef UINT32 TOUCH_MASK; 
#line 6363
typedef 
#line 6355
struct tagPOINTER_TOUCH_INFO { 
#line 6356
POINTER_INFO pointerInfo; 
#line 6357
TOUCH_FLAGS touchFlags; 
#line 6358
TOUCH_MASK touchMask; 
#line 6359
RECT rcContact; 
#line 6360
RECT rcContactRaw; 
#line 6361
UINT32 orientation; 
#line 6362
UINT32 pressure; 
#line 6363
} POINTER_TOUCH_INFO; 
#line 6365
typedef UINT32 PEN_FLAGS; 
#line 6371
typedef UINT32 PEN_MASK; 
#line 6386
typedef 
#line 6378
struct tagPOINTER_PEN_INFO { 
#line 6379
POINTER_INFO pointerInfo; 
#line 6380
PEN_FLAGS penFlags; 
#line 6381
PEN_MASK penMask; 
#line 6382
UINT32 pressure; 
#line 6383
UINT32 rotation; 
#line 6384
INT32 tiltX; 
#line 6385
INT32 tiltY; 
#line 6386
} POINTER_PEN_INFO; 
#line 6389 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
#pragma endregion
#line 6440
typedef 
#line 6436
enum { 
#line 6437
POINTER_FEEDBACK_DEFAULT = 1, 
#line 6438
POINTER_FEEDBACK_INDIRECT, 
#line 6439
POINTER_FEEDBACK_NONE
#line 6440
} POINTER_FEEDBACK_MODE; 
#line 6442
#pragma region Desktop Family
#line 6445
__declspec(dllimport) BOOL __stdcall 
#line 6448
InitializeTouchInjection(UINT32 maxCount, DWORD dwMode); 
#line 6452
__declspec(dllimport) BOOL __stdcall 
#line 6455
InjectTouchInput(UINT32 count, const POINTER_TOUCH_INFO * contacts); 
#line 6470
typedef 
#line 6459
struct tagUSAGE_PROPERTIES { 
#line 6460
USHORT level; 
#line 6461
USHORT page; 
#line 6462
USHORT usage; 
#line 6463
INT32 logicalMinimum; 
#line 6464
INT32 logicalMaximum; 
#line 6465
USHORT unit; 
#line 6466
USHORT exponent; 
#line 6467
BYTE count; 
#line 6468
INT32 physicalMinimum; 
#line 6469
INT32 physicalMaximum; 
#line 6470
} USAGE_PROPERTIES, *PUSAGE_PROPERTIES; 
#line 6478
typedef 
#line 6472
struct tagPOINTER_TYPE_INFO { 
#line 6473
POINTER_INPUT_TYPE type; 
#line 6474
union { 
#line 6475
POINTER_TOUCH_INFO touchInfo; 
#line 6476
POINTER_PEN_INFO penInfo; 
#line 6477
}; 
#line 6478
} POINTER_TYPE_INFO, *PPOINTER_TYPE_INFO; 
#line 6485
typedef 
#line 6480
struct tagINPUT_INJECTION_VALUE { 
#line 6481
USHORT page; 
#line 6482
USHORT usage; 
#line 6483
INT32 value; 
#line 6484
USHORT index; 
#line 6485
} INPUT_INJECTION_VALUE, *PINPUT_INJECTION_VALUE; 
#line 6487
__declspec(dllimport) BOOL __stdcall 
#line 6490
GetPointerType(UINT32 pointerId, POINTER_INPUT_TYPE * pointerType); 
#line 6494
__declspec(dllimport) BOOL __stdcall 
#line 6497
GetPointerCursorId(UINT32 pointerId, UINT32 * cursorId); 
#line 6501
__declspec(dllimport) BOOL __stdcall 
#line 6504
GetPointerInfo(UINT32 pointerId, POINTER_INFO * pointerInfo); 
#line 6508
__declspec(dllimport) BOOL __stdcall 
#line 6511
GetPointerInfoHistory(UINT32 pointerId, UINT32 * entriesCount, POINTER_INFO * pointerInfo); 
#line 6516
__declspec(dllimport) BOOL __stdcall 
#line 6519
GetPointerFrameInfo(UINT32 pointerId, UINT32 * pointerCount, POINTER_INFO * pointerInfo); 
#line 6524
__declspec(dllimport) BOOL __stdcall 
#line 6527
GetPointerFrameInfoHistory(UINT32 pointerId, UINT32 * entriesCount, UINT32 * pointerCount, POINTER_INFO * pointerInfo); 
#line 6533
__declspec(dllimport) BOOL __stdcall 
#line 6536
GetPointerTouchInfo(UINT32 pointerId, POINTER_TOUCH_INFO * touchInfo); 
#line 6540
__declspec(dllimport) BOOL __stdcall 
#line 6543
GetPointerTouchInfoHistory(UINT32 pointerId, UINT32 * entriesCount, POINTER_TOUCH_INFO * touchInfo); 
#line 6548
__declspec(dllimport) BOOL __stdcall 
#line 6551
GetPointerFrameTouchInfo(UINT32 pointerId, UINT32 * pointerCount, POINTER_TOUCH_INFO * touchInfo); 
#line 6556
__declspec(dllimport) BOOL __stdcall 
#line 6559
GetPointerFrameTouchInfoHistory(UINT32 pointerId, UINT32 * entriesCount, UINT32 * pointerCount, POINTER_TOUCH_INFO * touchInfo); 
#line 6565
__declspec(dllimport) BOOL __stdcall 
#line 6568
GetPointerPenInfo(UINT32 pointerId, POINTER_PEN_INFO * penInfo); 
#line 6572
__declspec(dllimport) BOOL __stdcall 
#line 6575
GetPointerPenInfoHistory(UINT32 pointerId, UINT32 * entriesCount, POINTER_PEN_INFO * penInfo); 
#line 6580
__declspec(dllimport) BOOL __stdcall 
#line 6583
GetPointerFramePenInfo(UINT32 pointerId, UINT32 * pointerCount, POINTER_PEN_INFO * penInfo); 
#line 6588
__declspec(dllimport) BOOL __stdcall 
#line 6591
GetPointerFramePenInfoHistory(UINT32 pointerId, UINT32 * entriesCount, UINT32 * pointerCount, POINTER_PEN_INFO * penInfo); 
#line 6598
__declspec(dllimport) BOOL __stdcall 
#line 6601
SkipPointerFrameMessages(UINT32 pointerId); 
#line 6604
__declspec(dllimport) BOOL __stdcall 
#line 6607
RegisterPointerInputTarget(HWND hwnd, POINTER_INPUT_TYPE pointerType); 
#line 6611
__declspec(dllimport) BOOL __stdcall 
#line 6614
UnregisterPointerInputTarget(HWND hwnd, POINTER_INPUT_TYPE pointerType); 
#line 6618
__declspec(dllimport) BOOL __stdcall 
#line 6621
RegisterPointerInputTargetEx(HWND hwnd, POINTER_INPUT_TYPE pointerType, BOOL fObserve); 
#line 6626
__declspec(dllimport) BOOL __stdcall 
#line 6629
UnregisterPointerInputTargetEx(HWND hwnd, POINTER_INPUT_TYPE pointerType); 
#line 6634
struct HSYNTHETICPOINTERDEVICE__ { int unused; }; typedef HSYNTHETICPOINTERDEVICE__ *HSYNTHETICPOINTERDEVICE; 
#line 6635
__declspec(dllimport) HSYNTHETICPOINTERDEVICE __stdcall 
#line 6638
CreateSyntheticPointerDevice(POINTER_INPUT_TYPE pointerType, ULONG maxCount, POINTER_FEEDBACK_MODE mode); 
#line 6643
__declspec(dllimport) BOOL __stdcall 
#line 6646
InjectSyntheticPointerInput(HSYNTHETICPOINTERDEVICE device, const POINTER_TYPE_INFO * pointerInfo, UINT32 count); 
#line 6651
__declspec(dllimport) void __stdcall 
#line 6654
DestroySyntheticPointerDevice(HSYNTHETICPOINTERDEVICE device); 
#line 6659 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
__declspec(dllimport) BOOL __stdcall 
#line 6662
EnableMouseInPointer(BOOL fEnable); 
#line 6665
__declspec(dllimport) BOOL __stdcall 
#line 6668
IsMouseInPointerEnabled(); 
#line 6672
__declspec(dllimport) BOOL __stdcall 
#line 6675
EnableMouseInPointerForThread(); 
#line 6683 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
__declspec(dllimport) BOOL __stdcall 
#line 6686
RegisterTouchHitTestingWindow(HWND hwnd, ULONG value); 
#line 6694
typedef 
#line 6690
struct tagTOUCH_HIT_TESTING_PROXIMITY_EVALUATION { 
#line 6692
UINT16 score; 
#line 6693
POINT adjustedPoint; 
#line 6694
} TOUCH_HIT_TESTING_PROXIMITY_EVALUATION, *PTOUCH_HIT_TESTING_PROXIMITY_EVALUATION; 
#line 6707
typedef 
#line 6700
struct tagTOUCH_HIT_TESTING_INPUT { 
#line 6702
UINT32 pointerId; 
#line 6703
POINT point; 
#line 6704
RECT boundingBox; 
#line 6705
RECT nonOccludedBoundingBox; 
#line 6706
UINT32 orientation; 
#line 6707
} TOUCH_HIT_TESTING_INPUT, *PTOUCH_HIT_TESTING_INPUT; 
#line 6713
__declspec(dllimport) BOOL __stdcall 
#line 6716
EvaluateProximityToRect(const RECT * controlBoundingBox, const TOUCH_HIT_TESTING_INPUT * pHitTestingInput, TOUCH_HIT_TESTING_PROXIMITY_EVALUATION * pProximityEval); 
#line 6721
__declspec(dllimport) BOOL __stdcall 
#line 6724
EvaluateProximityToPolygon(UINT32 numVertices, const POINT * controlPolygon, const TOUCH_HIT_TESTING_INPUT * pHitTestingInput, TOUCH_HIT_TESTING_PROXIMITY_EVALUATION * pProximityEval); 
#line 6730
__declspec(dllimport) LRESULT __stdcall 
#line 6733
PackTouchHitTestingProximityEvaluation(const TOUCH_HIT_TESTING_INPUT * pHitTestingInput, const TOUCH_HIT_TESTING_PROXIMITY_EVALUATION * pProximityEval); 
#line 6751
typedef 
#line 6738
enum tagFEEDBACK_TYPE { 
#line 6739
FEEDBACK_TOUCH_CONTACTVISUALIZATION = 1, 
#line 6740
FEEDBACK_PEN_BARRELVISUALIZATION, 
#line 6741
FEEDBACK_PEN_TAP, 
#line 6742
FEEDBACK_PEN_DOUBLETAP, 
#line 6743
FEEDBACK_PEN_PRESSANDHOLD, 
#line 6744
FEEDBACK_PEN_RIGHTTAP, 
#line 6745
FEEDBACK_TOUCH_TAP, 
#line 6746
FEEDBACK_TOUCH_DOUBLETAP, 
#line 6747
FEEDBACK_TOUCH_PRESSANDHOLD, 
#line 6748
FEEDBACK_TOUCH_RIGHTTAP, 
#line 6749
FEEDBACK_GESTURE_PRESSANDTAP, 
#line 6750
FEEDBACK_MAX = (-1)
#line 6751
} FEEDBACK_TYPE; 
#line 6757
__declspec(dllimport) BOOL __stdcall 
#line 6760
GetWindowFeedbackSetting(HWND hwnd, FEEDBACK_TYPE feedback, DWORD dwFlags, UINT32 * pSize, void * config); 
#line 6767
__declspec(dllimport) BOOL __stdcall 
#line 6770
SetWindowFeedbackSetting(HWND hwnd, FEEDBACK_TYPE feedback, DWORD dwFlags, UINT32 size, const void * configuration); 
#line 6779 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
#pragma endregion
#line 6785 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
#pragma region Desktop Family
#line 6790
#pragma warning(push)
#line 6792 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
#pragma warning(disable : 4201)
#line 6804
typedef 
#line 6794
struct tagINPUT_TRANSFORM { 
#line 6795
union { 
#line 6796
struct { 
#line 6797
float _11, _12, _13, _14; 
#line 6798
float _21, _22, _23, _24; 
#line 6799
float _31, _32, _33, _34; 
#line 6800
float _41, _42, _43, _44; 
#line 6801
}; 
#line 6802
float m[4][4]; 
#line 6803
}; 
#line 6804
} INPUT_TRANSFORM; 
#line 6807
#pragma warning(pop)
#line 6811 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
__declspec(dllimport) BOOL __stdcall 
#line 6814
GetPointerInputTransform(UINT32 pointerId, UINT32 historyCount, INPUT_TRANSFORM * inputTransform); 
#line 6820 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
#pragma endregion
#line 6824 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
#pragma region Desktop Family
#line 6828 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
#pragma endregion
#line 6830
#pragma region Desktop Family
#line 6837
typedef 
#line 6834
struct tagLASTINPUTINFO { 
#line 6835
UINT cbSize; 
#line 6836
DWORD dwTime; 
#line 6837
} LASTINPUTINFO, *PLASTINPUTINFO; 
#line 6839
__declspec(dllimport) BOOL __stdcall 
#line 6842
GetLastInputInfo(PLASTINPUTINFO plii); 
#line 6847 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
#pragma endregion
#line 6849
#pragma region Desktop or PC Family
#line 6852
__declspec(dllimport) UINT __stdcall 
#line 6855
MapVirtualKeyA(UINT uCode, UINT uMapType); 
#line 6858
__declspec(dllimport) UINT __stdcall 
#line 6861
MapVirtualKeyW(UINT uCode, UINT uMapType); 
#line 6871 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
__declspec(dllimport) UINT __stdcall 
#line 6874
MapVirtualKeyExA(UINT uCode, UINT uMapType, HKL dwhkl); 
#line 6878
__declspec(dllimport) UINT __stdcall 
#line 6881
MapVirtualKeyExW(UINT uCode, UINT uMapType, HKL dwhkl); 
#line 6892 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
#pragma endregion
#line 6894
#pragma region Desktop Family
#line 6906 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
__declspec(dllimport) BOOL __stdcall 
#line 6909
GetInputState(); 
#line 6912
__declspec(dllimport) DWORD __stdcall 
#line 6915
GetQueueStatus(UINT flags); 
#line 6919
__declspec(dllimport) HWND __stdcall 
#line 6922
GetCapture(); 
#line 6925
__declspec(dllimport) HWND __stdcall 
#line 6928
SetCapture(HWND hWnd); 
#line 6931
__declspec(dllimport) BOOL __stdcall 
#line 6934
ReleaseCapture(); 
#line 6937
__declspec(dllimport) DWORD __stdcall 
#line 6940
MsgWaitForMultipleObjects(DWORD nCount, const HANDLE * pHandles, BOOL fWaitAll, DWORD dwMilliseconds, DWORD dwWakeMask); 
#line 6947
__declspec(dllimport) DWORD __stdcall 
#line 6950
MsgWaitForMultipleObjectsEx(DWORD nCount, const HANDLE * pHandles, DWORD dwMilliseconds, DWORD dwWakeMask, DWORD dwFlags); 
#line 6959 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
#pragma endregion
#line 7024 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
#pragma region Desktop Family or Games Family
#line 7034
__declspec(dllimport) UINT_PTR __stdcall 
#line 7037
SetTimer(HWND hWnd, UINT_PTR nIDEvent, UINT uElapse, TIMERPROC lpTimerFunc); 
#line 7054 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
#pragma endregion
#line 7056
#pragma region Desktop Family
#line 7061
__declspec(dllimport) UINT_PTR __stdcall 
#line 7064
SetCoalescableTimer(HWND hWnd, UINT_PTR nIDEvent, UINT uElapse, TIMERPROC lpTimerFunc, ULONG uToleranceDelay); 
#line 7074 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
#pragma endregion
#line 7076
#pragma region Desktop Family or Games Family
#line 7079
__declspec(dllimport) BOOL __stdcall 
#line 7082
KillTimer(HWND hWnd, UINT_PTR uIDEvent); 
#line 7087 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
#pragma endregion
#line 7089
#pragma region Desktop Family
#line 7092
__declspec(dllimport) BOOL __stdcall 
#line 7095
IsWindowUnicode(HWND hWnd); 
#line 7098
__declspec(dllimport) BOOL __stdcall 
#line 7101
EnableWindow(HWND hWnd, BOOL bEnable); 
#line 7105
__declspec(dllimport) BOOL __stdcall 
#line 7108
IsWindowEnabled(HWND hWnd); 
#line 7111
__declspec(dllimport) HACCEL __stdcall 
#line 7114
LoadAcceleratorsA(HINSTANCE hInstance, LPCSTR lpTableName); 
#line 7117
__declspec(dllimport) HACCEL __stdcall 
#line 7120
LoadAcceleratorsW(HINSTANCE hInstance, LPCWSTR lpTableName); 
#line 7129 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
__declspec(dllimport) HACCEL __stdcall 
#line 7132
CreateAcceleratorTableA(LPACCEL paccel, int cAccel); 
#line 7135
__declspec(dllimport) HACCEL __stdcall 
#line 7138
CreateAcceleratorTableW(LPACCEL paccel, int cAccel); 
#line 7147 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
__declspec(dllimport) BOOL __stdcall 
#line 7150
DestroyAcceleratorTable(HACCEL hAccel); 
#line 7153
__declspec(dllimport) int __stdcall 
#line 7156
CopyAcceleratorTableA(HACCEL hAccelSrc, LPACCEL lpAccelDst, int cAccelEntries); 
#line 7160
__declspec(dllimport) int __stdcall 
#line 7163
CopyAcceleratorTableW(HACCEL hAccelSrc, LPACCEL lpAccelDst, int cAccelEntries); 
#line 7175 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
__declspec(dllimport) int __stdcall 
#line 7178
TranslateAcceleratorA(HWND hWnd, HACCEL hAccTable, LPMSG lpMsg); 
#line 7182
__declspec(dllimport) int __stdcall 
#line 7185
TranslateAcceleratorW(HWND hWnd, HACCEL hAccTable, LPMSG lpMsg); 
#line 7198 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
#pragma endregion
#line 7362 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
#pragma region Desktop Family
#line 7365
__declspec(dllimport) int __stdcall 
#line 7368
GetSystemMetrics(int nIndex); 
#line 7373
__declspec(dllimport) int __stdcall 
#line 7376
GetSystemMetricsForDpi(int nIndex, UINT dpi); 
#line 7383 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
#pragma endregion
#line 7387 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
#pragma region Desktop Family
#line 7392
__declspec(dllimport) HMENU __stdcall 
#line 7395
LoadMenuA(HINSTANCE hInstance, LPCSTR lpMenuName); 
#line 7398
__declspec(dllimport) HMENU __stdcall 
#line 7401
LoadMenuW(HINSTANCE hInstance, LPCWSTR lpMenuName); 
#line 7410 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
__declspec(dllimport) HMENU __stdcall 
#line 7413
LoadMenuIndirectA(const MENUTEMPLATEA * lpMenuTemplate); 
#line 7415
__declspec(dllimport) HMENU __stdcall 
#line 7418
LoadMenuIndirectW(const MENUTEMPLATEW * lpMenuTemplate); 
#line 7426 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
__declspec(dllimport) HMENU __stdcall 
#line 7429
GetMenu(HWND hWnd); 
#line 7432
__declspec(dllimport) BOOL __stdcall 
#line 7435
SetMenu(HWND hWnd, HMENU hMenu); 
#line 7439
__declspec(dllimport) BOOL __stdcall 
#line 7442
ChangeMenuA(HMENU hMenu, UINT cmd, LPCSTR lpszNewItem, UINT cmdInsert, UINT flags); 
#line 7448
__declspec(dllimport) BOOL __stdcall 
#line 7451
ChangeMenuW(HMENU hMenu, UINT cmd, LPCWSTR lpszNewItem, UINT cmdInsert, UINT flags); 
#line 7463 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
__declspec(dllimport) BOOL __stdcall 
#line 7466
HiliteMenuItem(HWND hWnd, HMENU hMenu, UINT uIDHiliteItem, UINT uHilite); 
#line 7472
__declspec(dllimport) int __stdcall 
#line 7475
GetMenuStringA(HMENU hMenu, UINT uIDItem, LPSTR lpString, int cchMax, UINT flags); 
#line 7481
__declspec(dllimport) int __stdcall 
#line 7484
GetMenuStringW(HMENU hMenu, UINT uIDItem, LPWSTR lpString, int cchMax, UINT flags); 
#line 7496 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
__declspec(dllimport) UINT __stdcall 
#line 7499
GetMenuState(HMENU hMenu, UINT uId, UINT uFlags); 
#line 7504
__declspec(dllimport) BOOL __stdcall 
#line 7507
DrawMenuBar(HWND hWnd); 
#line 7516 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
__declspec(dllimport) HMENU __stdcall 
#line 7519
GetSystemMenu(HWND hWnd, BOOL bRevert); 
#line 7524
__declspec(dllimport) HMENU __stdcall 
#line 7527
CreateMenu(); 
#line 7530
__declspec(dllimport) HMENU __stdcall 
#line 7533
CreatePopupMenu(); 
#line 7536
__declspec(dllimport) BOOL __stdcall 
#line 7539
DestroyMenu(HMENU hMenu); 
#line 7542
__declspec(dllimport) DWORD __stdcall 
#line 7545
CheckMenuItem(HMENU hMenu, UINT uIDCheckItem, UINT uCheck); 
#line 7550
__declspec(dllimport) BOOL __stdcall 
#line 7553
EnableMenuItem(HMENU hMenu, UINT uIDEnableItem, UINT uEnable); 
#line 7558
__declspec(dllimport) HMENU __stdcall 
#line 7561
GetSubMenu(HMENU hMenu, int nPos); 
#line 7565
__declspec(dllimport) UINT __stdcall 
#line 7568
GetMenuItemID(HMENU hMenu, int nPos); 
#line 7572
__declspec(dllimport) int __stdcall 
#line 7575
GetMenuItemCount(HMENU hMenu); 
#line 7578
__declspec(dllimport) BOOL __stdcall 
#line 7581
InsertMenuA(HMENU hMenu, UINT uPosition, UINT uFlags, UINT_PTR uIDNewItem, LPCSTR lpNewItem); 
#line 7587
__declspec(dllimport) BOOL __stdcall 
#line 7590
InsertMenuW(HMENU hMenu, UINT uPosition, UINT uFlags, UINT_PTR uIDNewItem, LPCWSTR lpNewItem); 
#line 7602 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
__declspec(dllimport) BOOL __stdcall 
#line 7605
AppendMenuA(HMENU hMenu, UINT uFlags, UINT_PTR uIDNewItem, LPCSTR lpNewItem); 
#line 7610
__declspec(dllimport) BOOL __stdcall 
#line 7613
AppendMenuW(HMENU hMenu, UINT uFlags, UINT_PTR uIDNewItem, LPCWSTR lpNewItem); 
#line 7624 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
__declspec(dllimport) BOOL __stdcall 
#line 7627
ModifyMenuA(HMENU hMnu, UINT uPosition, UINT uFlags, UINT_PTR uIDNewItem, LPCSTR lpNewItem); 
#line 7633
__declspec(dllimport) BOOL __stdcall 
#line 7636
ModifyMenuW(HMENU hMnu, UINT uPosition, UINT uFlags, UINT_PTR uIDNewItem, LPCWSTR lpNewItem); 
#line 7648 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
__declspec(dllimport) BOOL __stdcall 
#line 7650
RemoveMenu(HMENU hMenu, UINT uPosition, UINT uFlags); 
#line 7655
__declspec(dllimport) BOOL __stdcall 
#line 7658
DeleteMenu(HMENU hMenu, UINT uPosition, UINT uFlags); 
#line 7663
__declspec(dllimport) BOOL __stdcall 
#line 7666
SetMenuItemBitmaps(HMENU hMenu, UINT uPosition, UINT uFlags, HBITMAP hBitmapUnchecked, HBITMAP hBitmapChecked); 
#line 7673
__declspec(dllimport) LONG __stdcall 
#line 7676
GetMenuCheckMarkDimensions(); 
#line 7679
__declspec(dllimport) BOOL __stdcall 
#line 7682
TrackPopupMenu(HMENU hMenu, UINT uFlags, int x, int y, int nReserved, HWND hWnd, const RECT * prcRect); 
#line 7702
typedef 
#line 7698
struct tagTPMPARAMS { 
#line 7700
UINT cbSize; 
#line 7701
RECT rcExclude; 
#line 7702
} TPMPARAMS; 
#line 7703
typedef TPMPARAMS *LPTPMPARAMS; 
#line 7705
__declspec(dllimport) BOOL __stdcall 
#line 7708
TrackPopupMenuEx(HMENU hMenu, UINT uFlags, int x, int y, HWND hwnd, LPTPMPARAMS lptpm); 
#line 7718 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
__declspec(dllimport) BOOL __stdcall 
#line 7721
CalculatePopupWindowPosition(const POINT * anchorPoint, const SIZE * windowSize, UINT flags, RECT * excludeRect, RECT * popupWindowPosition); 
#line 7755 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
typedef 
#line 7746
struct tagMENUINFO { 
#line 7748
DWORD cbSize; 
#line 7749
DWORD fMask; 
#line 7750
DWORD dwStyle; 
#line 7751
UINT cyMax; 
#line 7752
HBRUSH hbrBack; 
#line 7753
DWORD dwContextHelpID; 
#line 7754
ULONG_PTR dwMenuData; 
#line 7755
} MENUINFO, *LPMENUINFO; 
#line 7756
typedef const MENUINFO *LPCMENUINFO; 
#line 7758
__declspec(dllimport) BOOL __stdcall 
#line 7761
GetMenuInfo(HMENU, LPMENUINFO); 
#line 7765
__declspec(dllimport) BOOL __stdcall 
#line 7768
SetMenuInfo(HMENU, LPCMENUINFO); 
#line 7772
__declspec(dllimport) BOOL __stdcall 
#line 7775
EndMenu(); 
#line 7791
typedef 
#line 7784
struct tagMENUGETOBJECTINFO { 
#line 7786
DWORD dwFlags; 
#line 7787
UINT uPos; 
#line 7788
HMENU hmenu; 
#line 7789
PVOID riid; 
#line 7790
PVOID pvObj; 
#line 7791
} MENUGETOBJECTINFO, *PMENUGETOBJECTINFO; 
#line 7850 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
typedef 
#line 7834 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
struct tagMENUITEMINFOA { 
#line 7836
UINT cbSize; 
#line 7837
UINT fMask; 
#line 7838
UINT fType; 
#line 7839
UINT fState; 
#line 7840
UINT wID; 
#line 7841
HMENU hSubMenu; 
#line 7842
HBITMAP hbmpChecked; 
#line 7843
HBITMAP hbmpUnchecked; 
#line 7844
ULONG_PTR dwItemData; 
#line 7845
LPSTR dwTypeData; 
#line 7846
UINT cch; 
#line 7848
HBITMAP hbmpItem; 
#line 7850 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
} MENUITEMINFOA, *LPMENUITEMINFOA; 
#line 7867 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
typedef 
#line 7851 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
struct tagMENUITEMINFOW { 
#line 7853
UINT cbSize; 
#line 7854
UINT fMask; 
#line 7855
UINT fType; 
#line 7856
UINT fState; 
#line 7857
UINT wID; 
#line 7858
HMENU hSubMenu; 
#line 7859
HBITMAP hbmpChecked; 
#line 7860
HBITMAP hbmpUnchecked; 
#line 7861
ULONG_PTR dwItemData; 
#line 7862
LPWSTR dwTypeData; 
#line 7863
UINT cch; 
#line 7865
HBITMAP hbmpItem; 
#line 7867 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
} MENUITEMINFOW, *LPMENUITEMINFOW; 
#line 7872
typedef MENUITEMINFOA MENUITEMINFO; 
#line 7873
typedef LPMENUITEMINFOA LPMENUITEMINFO; 
#line 7875 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
typedef const MENUITEMINFOA *LPCMENUITEMINFOA; 
#line 7876
typedef const MENUITEMINFOW *LPCMENUITEMINFOW; 
#line 7880
typedef LPCMENUITEMINFOA LPCMENUITEMINFO; 
#line 7884 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
__declspec(dllimport) BOOL __stdcall 
#line 7887
InsertMenuItemA(HMENU hmenu, UINT item, BOOL fByPosition, LPCMENUITEMINFOA lpmi); 
#line 7892
__declspec(dllimport) BOOL __stdcall 
#line 7895
InsertMenuItemW(HMENU hmenu, UINT item, BOOL fByPosition, LPCMENUITEMINFOW lpmi); 
#line 7906 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
__declspec(dllimport) BOOL __stdcall 
#line 7909
GetMenuItemInfoA(HMENU hmenu, UINT item, BOOL fByPosition, LPMENUITEMINFOA lpmii); 
#line 7914
__declspec(dllimport) BOOL __stdcall 
#line 7917
GetMenuItemInfoW(HMENU hmenu, UINT item, BOOL fByPosition, LPMENUITEMINFOW lpmii); 
#line 7928 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
__declspec(dllimport) BOOL __stdcall 
#line 7931
SetMenuItemInfoA(HMENU hmenu, UINT item, BOOL fByPositon, LPCMENUITEMINFOA lpmii); 
#line 7936
__declspec(dllimport) BOOL __stdcall 
#line 7939
SetMenuItemInfoW(HMENU hmenu, UINT item, BOOL fByPositon, LPCMENUITEMINFOW lpmii); 
#line 7954 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
__declspec(dllimport) UINT __stdcall 
#line 7957
GetMenuDefaultItem(HMENU hMenu, UINT fByPos, UINT gmdiFlags); 
#line 7962
__declspec(dllimport) BOOL __stdcall 
#line 7965
SetMenuDefaultItem(HMENU hMenu, UINT uItem, UINT fByPos); 
#line 7970
__declspec(dllimport) BOOL __stdcall 
#line 7973
GetMenuItemRect(HWND hWnd, HMENU hMenu, UINT uItem, LPRECT lprcItem); 
#line 7979
__declspec(dllimport) int __stdcall 
#line 7982
MenuItemFromPoint(HWND hWnd, HMENU hMenu, POINT ptScreen); 
#line 8027 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
#pragma endregion
#line 8032
#pragma region Desktop Family
#line 8047
typedef 
#line 8039
struct tagDROPSTRUCT { 
#line 8041
HWND hwndSource; 
#line 8042
HWND hwndSink; 
#line 8043
DWORD wFmt; 
#line 8044
ULONG_PTR dwData; 
#line 8045
POINT ptDrop; 
#line 8046
DWORD dwControlData; 
#line 8047
} DROPSTRUCT, *PDROPSTRUCT, *LPDROPSTRUCT; 
#line 8050 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
#pragma endregion
#line 8062
#pragma region Desktop Family
#line 8065
__declspec(dllimport) DWORD __stdcall 
#line 8068
DragObject(HWND hwndParent, HWND hwndFrom, UINT fmt, ULONG_PTR data, HCURSOR hcur); 
#line 8075
__declspec(dllimport) BOOL __stdcall 
#line 8078
DragDetect(HWND hwnd, POINT pt); 
#line 8083 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
#pragma endregion
#line 8087 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
#pragma region Desktop Family
#line 8090
__declspec(dllimport) BOOL __stdcall 
#line 8093
DrawIcon(HDC hDC, int X, int Y, HICON hIcon); 
#line 8100 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
#pragma endregion
#line 8138 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
#pragma region Desktop Family
#line 8148
typedef 
#line 8141
struct tagDRAWTEXTPARAMS { 
#line 8143
UINT cbSize; 
#line 8144
int iTabLength; 
#line 8145
int iLeftMargin; 
#line 8146
int iRightMargin; 
#line 8147
UINT uiLengthDrawn; 
#line 8148
} DRAWTEXTPARAMS, *LPDRAWTEXTPARAMS; 
#line 8151 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
#pragma endregion
#line 8156 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
#pragma region Desktop Family
#line 8167
__declspec(dllimport) int __stdcall 
#line 8171
DrawTextA(HDC hdc, LPCSTR lpchText, int cchText, LPRECT lprc, UINT format); 
#line 8179
__declspec(dllimport) int __stdcall 
#line 8183
DrawTextW(HDC hdc, LPCWSTR lpchText, int cchText, LPRECT lprc, UINT format); 
#line 8225 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
__declspec(dllimport) int __stdcall 
#line 8229
DrawTextExA(HDC hdc, LPSTR lpchText, int cchText, LPRECT lprc, UINT format, LPDRAWTEXTPARAMS lpdtp); 
#line 8239
__declspec(dllimport) int __stdcall 
#line 8243
DrawTextExW(HDC hdc, LPWSTR lpchText, int cchText, LPRECT lprc, UINT format, LPDRAWTEXTPARAMS lpdtp); 
#line 8261 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
#pragma endregion
#line 8265 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
#pragma region Desktop Family
#line 8268
__declspec(dllimport) BOOL __stdcall 
#line 8271
GrayStringA(HDC hDC, HBRUSH hBrush, GRAYSTRINGPROC lpOutputFunc, LPARAM lpData, int nCount, int X, int Y, int nWidth, int nHeight); 
#line 8281
__declspec(dllimport) BOOL __stdcall 
#line 8284
GrayStringW(HDC hDC, HBRUSH hBrush, GRAYSTRINGPROC lpOutputFunc, LPARAM lpData, int nCount, int X, int Y, int nWidth, int nHeight); 
#line 8301 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
#pragma endregion
#line 8323 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
#pragma region Desktop Family
#line 8326
__declspec(dllimport) BOOL __stdcall 
#line 8329
DrawStateA(HDC hdc, HBRUSH hbrFore, DRAWSTATEPROC qfnCallBack, LPARAM lData, WPARAM wData, int x, int y, int cx, int cy, UINT uFlags); 
#line 8340
__declspec(dllimport) BOOL __stdcall 
#line 8343
DrawStateW(HDC hdc, HBRUSH hbrFore, DRAWSTATEPROC qfnCallBack, LPARAM lData, WPARAM wData, int x, int y, int cx, int cy, UINT uFlags); 
#line 8361 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
#pragma endregion
#line 8365 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
#pragma region Desktop Family
#line 8368
__declspec(dllimport) LONG __stdcall 
#line 8371
TabbedTextOutA(HDC hdc, int x, int y, LPCSTR lpString, int chCount, int nTabPositions, const INT * lpnTabStopPositions, int nTabOrigin); 
#line 8380
__declspec(dllimport) LONG __stdcall 
#line 8383
TabbedTextOutW(HDC hdc, int x, int y, LPCWSTR lpString, int chCount, int nTabPositions, const INT * lpnTabStopPositions, int nTabOrigin); 
#line 8398 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
__declspec(dllimport) DWORD __stdcall 
#line 8401
GetTabbedTextExtentA(HDC hdc, LPCSTR lpString, int chCount, int nTabPositions, const INT * lpnTabStopPositions); 
#line 8407
__declspec(dllimport) DWORD __stdcall 
#line 8410
GetTabbedTextExtentW(HDC hdc, LPCWSTR lpString, int chCount, int nTabPositions, const INT * lpnTabStopPositions); 
#line 8422 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
__declspec(dllimport) BOOL __stdcall 
#line 8425
UpdateWindow(HWND hWnd); 
#line 8428
__declspec(dllimport) HWND __stdcall 
#line 8431
SetActiveWindow(HWND hWnd); 
#line 8435
__declspec(dllimport) HWND __stdcall 
#line 8438
GetForegroundWindow(); 
#line 8442
__declspec(dllimport) BOOL __stdcall 
#line 8445
PaintDesktop(HDC hdc); 
#line 8448
__declspec(dllimport) void __stdcall 
#line 8451
SwitchToThisWindow(HWND hwnd, BOOL fUnknown); 
#line 8457 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
__declspec(dllimport) BOOL __stdcall 
#line 8460
SetForegroundWindow(HWND hWnd); 
#line 8464
__declspec(dllimport) BOOL __stdcall 
#line 8467
AllowSetForegroundWindow(DWORD dwProcessId); 
#line 8472
__declspec(dllimport) BOOL __stdcall 
#line 8475
LockSetForegroundWindow(UINT uLockCode); 
#line 8483 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
__declspec(dllimport) HWND __stdcall 
#line 8486
WindowFromDC(HDC hDC); 
#line 8489
__declspec(dllimport) HDC __stdcall 
#line 8492
GetDC(HWND hWnd); 
#line 8495
__declspec(dllimport) HDC __stdcall 
#line 8498
GetDCEx(HWND hWnd, HRGN hrgnClip, DWORD flags); 
#line 8504 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
#pragma endregion
#line 8523
#pragma region Desktop Family
#line 8526
__declspec(dllimport) HDC __stdcall 
#line 8529
GetWindowDC(HWND hWnd); 
#line 8532
__declspec(dllimport) int __stdcall 
#line 8535
ReleaseDC(HWND hWnd, HDC hDC); 
#line 8539
__declspec(dllimport) HDC __stdcall 
#line 8542
BeginPaint(HWND hWnd, LPPAINTSTRUCT lpPaint); 
#line 8546
__declspec(dllimport) BOOL __stdcall 
#line 8549
EndPaint(HWND hWnd, const PAINTSTRUCT * lpPaint); 
#line 8553
__declspec(dllimport) BOOL __stdcall 
#line 8556
GetUpdateRect(HWND hWnd, LPRECT lpRect, BOOL bErase); 
#line 8561
__declspec(dllimport) int __stdcall 
#line 8564
GetUpdateRgn(HWND hWnd, HRGN hRgn, BOOL bErase); 
#line 8569
__declspec(dllimport) int __stdcall 
#line 8572
SetWindowRgn(HWND hWnd, HRGN hRgn, BOOL bRedraw); 
#line 8578 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
#pragma endregion
#line 8581
#pragma region Desktop Family
#line 8584
__declspec(dllimport) int __stdcall 
#line 8587
GetWindowRgn(HWND hWnd, HRGN hRgn); 
#line 8593
__declspec(dllimport) int __stdcall 
#line 8596
GetWindowRgnBox(HWND hWnd, LPRECT lprc); 
#line 8602 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
__declspec(dllimport) int __stdcall 
#line 8605
ExcludeUpdateRgn(HDC hDC, HWND hWnd); 
#line 8609
__declspec(dllimport) BOOL __stdcall 
#line 8612
InvalidateRect(HWND hWnd, const RECT * lpRect, BOOL bErase); 
#line 8617
__declspec(dllimport) BOOL __stdcall 
#line 8620
ValidateRect(HWND hWnd, const RECT * lpRect); 
#line 8624
__declspec(dllimport) BOOL __stdcall 
#line 8627
InvalidateRgn(HWND hWnd, HRGN hRgn, BOOL bErase); 
#line 8632
__declspec(dllimport) BOOL __stdcall 
#line 8635
ValidateRgn(HWND hWnd, HRGN hRgn); 
#line 8640
__declspec(dllimport) BOOL __stdcall 
#line 8643
RedrawWindow(HWND hWnd, const RECT * lprcUpdate, HRGN hrgnUpdate, UINT flags); 
#line 8650 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
#pragma endregion
#line 8673
#pragma region Desktop Family
#line 8680
__declspec(dllimport) BOOL __stdcall 
#line 8683
LockWindowUpdate(HWND hWndLock); 
#line 8686
__declspec(dllimport) BOOL __stdcall 
#line 8689
ScrollWindow(HWND hWnd, int XAmount, int YAmount, const RECT * lpRect, const RECT * lpClipRect); 
#line 8696
__declspec(dllimport) BOOL __stdcall 
#line 8699
ScrollDC(HDC hDC, int dx, int dy, const RECT * lprcScroll, const RECT * lprcClip, HRGN hrgnUpdate, LPRECT lprcUpdate); 
#line 8708
__declspec(dllimport) int __stdcall 
#line 8711
ScrollWindowEx(HWND hWnd, int dx, int dy, const RECT * prcScroll, const RECT * prcClip, HRGN hrgnUpdate, LPRECT prcUpdate, UINT flags); 
#line 8722 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
#pragma endregion
#line 8731 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
#pragma region Desktop Family
#line 8736
__declspec(dllimport) int __stdcall 
#line 8739
SetScrollPos(HWND hWnd, int nBar, int nPos, BOOL bRedraw); 
#line 8745
__declspec(dllimport) int __stdcall 
#line 8748
GetScrollPos(HWND hWnd, int nBar); 
#line 8752
__declspec(dllimport) BOOL __stdcall 
#line 8755
SetScrollRange(HWND hWnd, int nBar, int nMinPos, int nMaxPos, BOOL bRedraw); 
#line 8762
__declspec(dllimport) BOOL __stdcall 
#line 8765
GetScrollRange(HWND hWnd, int nBar, LPINT lpMinPos, LPINT lpMaxPos); 
#line 8771
__declspec(dllimport) BOOL __stdcall 
#line 8774
ShowScrollBar(HWND hWnd, int wBar, BOOL bShow); 
#line 8779
__declspec(dllimport) BOOL __stdcall 
#line 8782
EnableScrollBar(HWND hWnd, UINT wSBflags, UINT wArrows); 
#line 8807 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
__declspec(dllimport) BOOL __stdcall 
#line 8810
SetPropA(HWND hWnd, LPCSTR lpString, HANDLE hData); 
#line 8814
__declspec(dllimport) BOOL __stdcall 
#line 8817
SetPropW(HWND hWnd, LPCWSTR lpString, HANDLE hData); 
#line 8827 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
__declspec(dllimport) HANDLE __stdcall 
#line 8830
GetPropA(HWND hWnd, LPCSTR lpString); 
#line 8833
__declspec(dllimport) HANDLE __stdcall 
#line 8836
GetPropW(HWND hWnd, LPCWSTR lpString); 
#line 8845 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
__declspec(dllimport) HANDLE __stdcall 
#line 8848
RemovePropA(HWND hWnd, LPCSTR lpString); 
#line 8851
__declspec(dllimport) HANDLE __stdcall 
#line 8854
RemovePropW(HWND hWnd, LPCWSTR lpString); 
#line 8863 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
__declspec(dllimport) int __stdcall 
#line 8866
EnumPropsExA(HWND hWnd, PROPENUMPROCEXA lpEnumFunc, LPARAM lParam); 
#line 8870
__declspec(dllimport) int __stdcall 
#line 8873
EnumPropsExW(HWND hWnd, PROPENUMPROCEXW lpEnumFunc, LPARAM lParam); 
#line 8883 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
__declspec(dllimport) int __stdcall 
#line 8886
EnumPropsA(HWND hWnd, PROPENUMPROCA lpEnumFunc); 
#line 8889
__declspec(dllimport) int __stdcall 
#line 8892
EnumPropsW(HWND hWnd, PROPENUMPROCW lpEnumFunc); 
#line 8901 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
__declspec(dllimport) BOOL __stdcall 
#line 8904
SetWindowTextA(HWND hWnd, LPCSTR lpString); 
#line 8907
__declspec(dllimport) BOOL __stdcall 
#line 8910
SetWindowTextW(HWND hWnd, LPCWSTR lpString); 
#line 8920 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
__declspec(dllimport) int __stdcall 
#line 8923
GetWindowTextA(HWND hWnd, LPSTR lpString, int nMaxCount); 
#line 8928
__declspec(dllimport) int __stdcall 
#line 8931
GetWindowTextW(HWND hWnd, LPWSTR lpString, int nMaxCount); 
#line 8941 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
__declspec(dllimport) int __stdcall 
#line 8944
GetWindowTextLengthA(HWND hWnd); 
#line 8946
__declspec(dllimport) int __stdcall 
#line 8949
GetWindowTextLengthW(HWND hWnd); 
#line 8958 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
#pragma endregion
#line 8960
#pragma region Desktop Family or Games Family
#line 8963
__declspec(dllimport) BOOL __stdcall 
#line 8966
GetClientRect(HWND hWnd, LPRECT lpRect); 
#line 8971 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
#pragma endregion
#line 8973
#pragma region Desktop Family
#line 8976
__declspec(dllimport) BOOL __stdcall 
#line 8979
GetWindowRect(HWND hWnd, LPRECT lpRect); 
#line 8984 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
#pragma endregion
#line 8986
#pragma region Desktop Family or Games Family
#line 8989
__declspec(dllimport) BOOL __stdcall 
#line 8992
AdjustWindowRect(LPRECT lpRect, DWORD dwStyle, BOOL bMenu); 
#line 8997
__declspec(dllimport) BOOL __stdcall 
#line 9000
AdjustWindowRectEx(LPRECT lpRect, DWORD dwStyle, BOOL bMenu, DWORD dwExStyle); 
#line 9007 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
#pragma endregion
#line 9009
#pragma region Desktop Family
#line 9013
__declspec(dllimport) BOOL __stdcall 
#line 9016
AdjustWindowRectExForDpi(LPRECT lpRect, DWORD dwStyle, BOOL bMenu, DWORD dwExStyle, UINT dpi); 
#line 9026 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
#pragma endregion
#line 9032
#pragma region Desktop Family
#line 9043
typedef 
#line 9035
struct tagHELPINFO { 
#line 9037
UINT cbSize; 
#line 9038
int iContextType; 
#line 9039
int iCtrlId; 
#line 9040
HANDLE hItemHandle; 
#line 9041
DWORD_PTR dwContextId; 
#line 9042
POINT MousePos; 
#line 9043
} HELPINFO, *LPHELPINFO; 
#line 9045
__declspec(dllimport) BOOL __stdcall 
#line 9048
SetWindowContextHelpId(HWND, DWORD); 
#line 9052
__declspec(dllimport) DWORD __stdcall 
#line 9055
GetWindowContextHelpId(HWND); 
#line 9058
__declspec(dllimport) BOOL __stdcall 
#line 9061
SetMenuContextHelpId(HMENU, DWORD); 
#line 9065
__declspec(dllimport) DWORD __stdcall 
#line 9068
GetMenuContextHelpId(HMENU); 
#line 9072 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
#pragma endregion
#line 9147 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
#pragma region Desktop Family
#line 9150
__declspec(dllimport) int __stdcall 
#line 9153
MessageBoxA(HWND hWnd, LPCSTR lpText, LPCSTR lpCaption, UINT uType); 
#line 9158
__declspec(dllimport) int __stdcall 
#line 9161
MessageBoxW(HWND hWnd, LPCWSTR lpText, LPCWSTR lpCaption, UINT uType); 
#line 9196 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
__declspec(dllimport) int __stdcall 
#line 9199
MessageBoxExA(HWND hWnd, LPCSTR lpText, LPCSTR lpCaption, UINT uType, WORD wLanguageId); 
#line 9205
__declspec(dllimport) int __stdcall 
#line 9208
MessageBoxExW(HWND hWnd, LPCWSTR lpText, LPCWSTR lpCaption, UINT uType, WORD wLanguageId); 
#line 9222 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
typedef void (__stdcall *MSGBOXCALLBACK)(LPHELPINFO lpHelpInfo); 
#line 9236
typedef 
#line 9224
struct tagMSGBOXPARAMSA { 
#line 9226
UINT cbSize; 
#line 9227
HWND hwndOwner; 
#line 9228
HINSTANCE hInstance; 
#line 9229
LPCSTR lpszText; 
#line 9230
LPCSTR lpszCaption; 
#line 9231
DWORD dwStyle; 
#line 9232
LPCSTR lpszIcon; 
#line 9233
DWORD_PTR dwContextHelpId; 
#line 9234
MSGBOXCALLBACK lpfnMsgBoxCallback; 
#line 9235
DWORD dwLanguageId; 
#line 9236
} MSGBOXPARAMSA, *PMSGBOXPARAMSA, *LPMSGBOXPARAMSA; 
#line 9249
typedef 
#line 9237
struct tagMSGBOXPARAMSW { 
#line 9239
UINT cbSize; 
#line 9240
HWND hwndOwner; 
#line 9241
HINSTANCE hInstance; 
#line 9242
LPCWSTR lpszText; 
#line 9243
LPCWSTR lpszCaption; 
#line 9244
DWORD dwStyle; 
#line 9245
LPCWSTR lpszIcon; 
#line 9246
DWORD_PTR dwContextHelpId; 
#line 9247
MSGBOXCALLBACK lpfnMsgBoxCallback; 
#line 9248
DWORD dwLanguageId; 
#line 9249
} MSGBOXPARAMSW, *PMSGBOXPARAMSW, *LPMSGBOXPARAMSW; 
#line 9255
typedef MSGBOXPARAMSA MSGBOXPARAMS; 
#line 9256
typedef PMSGBOXPARAMSA PMSGBOXPARAMS; 
#line 9257
typedef LPMSGBOXPARAMSA LPMSGBOXPARAMS; 
#line 9260 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
__declspec(dllimport) int __stdcall 
#line 9263
MessageBoxIndirectA(const MSGBOXPARAMSA * lpmbp); 
#line 9265
__declspec(dllimport) int __stdcall 
#line 9268
MessageBoxIndirectW(const MSGBOXPARAMSW * lpmbp); 
#line 9279 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
#pragma endregion
#line 9282
#pragma region Desktop Family
#line 9285
__declspec(dllimport) BOOL __stdcall 
#line 9288
MessageBeep(UINT uType); 
#line 9292 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
#pragma endregion
#line 9296 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
#pragma region Desktop Family
#line 9301 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
#pragma endregion
#line 9303
#pragma region Desktop Family or Games Family
#line 9306
__declspec(dllimport) int __stdcall 
#line 9309
ShowCursor(BOOL bShow); 
#line 9313 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
#pragma endregion
#line 9315
#pragma region Desktop Family
#line 9318
__declspec(dllimport) BOOL __stdcall 
#line 9321
SetCursorPos(int X, int Y); 
#line 9326
__declspec(dllimport) BOOL __stdcall 
#line 9329
SetPhysicalCursorPos(int X, int Y); 
#line 9335 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
#pragma endregion
#line 9337
#pragma region Desktop Family or Games Family
#line 9340
__declspec(dllimport) HCURSOR __stdcall 
#line 9343
SetCursor(HCURSOR hCursor); 
#line 9346
__declspec(dllimport) BOOL __stdcall 
#line 9349
GetCursorPos(LPPOINT lpPoint); 
#line 9353 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
#pragma endregion
#line 9355
#pragma region Desktop Family
#line 9359
__declspec(dllimport) BOOL __stdcall 
#line 9362
GetPhysicalCursorPos(LPPOINT lpPoint); 
#line 9367 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
__declspec(dllimport) BOOL __stdcall 
#line 9370
GetClipCursor(LPRECT lpRect); 
#line 9373
__declspec(dllimport) HCURSOR __stdcall 
#line 9376
GetCursor(); 
#line 9379
__declspec(dllimport) BOOL __stdcall 
#line 9382
CreateCaret(HWND hWnd, HBITMAP hBitmap, int nWidth, int nHeight); 
#line 9388
__declspec(dllimport) UINT __stdcall 
#line 9391
GetCaretBlinkTime(); 
#line 9394
__declspec(dllimport) BOOL __stdcall 
#line 9397
SetCaretBlinkTime(UINT uMSeconds); 
#line 9400
__declspec(dllimport) BOOL __stdcall 
#line 9403
DestroyCaret(); 
#line 9406
__declspec(dllimport) BOOL __stdcall 
#line 9409
HideCaret(HWND hWnd); 
#line 9412
__declspec(dllimport) BOOL __stdcall 
#line 9415
ShowCaret(HWND hWnd); 
#line 9418
__declspec(dllimport) BOOL __stdcall 
#line 9421
SetCaretPos(int X, int Y); 
#line 9425
__declspec(dllimport) BOOL __stdcall 
#line 9428
GetCaretPos(LPPOINT lpPoint); 
#line 9431
__declspec(dllimport) BOOL __stdcall 
#line 9434
ClientToScreen(HWND hWnd, LPPOINT lpPoint); 
#line 9438
__declspec(dllimport) BOOL __stdcall 
#line 9441
ScreenToClient(HWND hWnd, LPPOINT lpPoint); 
#line 9446
__declspec(dllimport) BOOL __stdcall 
#line 9449
LogicalToPhysicalPoint(HWND hWnd, LPPOINT lpPoint); 
#line 9453
__declspec(dllimport) BOOL __stdcall 
#line 9456
PhysicalToLogicalPoint(HWND hWnd, LPPOINT lpPoint); 
#line 9463 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
__declspec(dllimport) BOOL __stdcall 
#line 9466
LogicalToPhysicalPointForPerMonitorDPI(HWND hWnd, LPPOINT lpPoint); 
#line 9470
__declspec(dllimport) BOOL __stdcall 
#line 9473
PhysicalToLogicalPointForPerMonitorDPI(HWND hWnd, LPPOINT lpPoint); 
#line 9479 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
__declspec(dllimport) int __stdcall 
#line 9482
MapWindowPoints(HWND hWndFrom, HWND hWndTo, LPPOINT lpPoints, UINT cPoints); 
#line 9488
__declspec(dllimport) HWND __stdcall 
#line 9491
WindowFromPoint(POINT Point); 
#line 9495
__declspec(dllimport) HWND __stdcall 
#line 9498
WindowFromPhysicalPoint(POINT Point); 
#line 9502 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
__declspec(dllimport) HWND __stdcall 
#line 9505
ChildWindowFromPoint(HWND hWndParent, POINT Point); 
#line 9510 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
#pragma endregion
#line 9512
#pragma region Desktop or PC Family
#line 9514
__declspec(dllimport) BOOL __stdcall 
#line 9517
ClipCursor(const RECT * lpRect); 
#line 9520 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
#pragma endregion
#line 9528
#pragma region Desktop Family
#line 9531
__declspec(dllimport) HWND __stdcall 
#line 9534
ChildWindowFromPointEx(HWND hwnd, POINT pt, UINT flags); 
#line 9540 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
#pragma endregion
#line 9607 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
#pragma region Desktop Family
#line 9610
__declspec(dllimport) DWORD __stdcall 
#line 9613
GetSysColor(int nIndex); 
#line 9617
__declspec(dllimport) HBRUSH __stdcall 
#line 9620
GetSysColorBrush(int nIndex); 
#line 9626 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
__declspec(dllimport) BOOL __stdcall 
#line 9629
SetSysColors(int cElements, const INT * lpaElements, const COLORREF * lpaRgbValues); 
#line 9635 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
#pragma endregion
#line 9639 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
#pragma region Desktop Family
#line 9642
__declspec(dllimport) BOOL __stdcall 
#line 9645
DrawFocusRect(HDC hDC, const RECT * lprc); 
#line 9649
__declspec(dllimport) int __stdcall 
#line 9652
FillRect(HDC hDC, const RECT * lprc, HBRUSH hbr); 
#line 9657
__declspec(dllimport) int __stdcall 
#line 9660
FrameRect(HDC hDC, const RECT * lprc, HBRUSH hbr); 
#line 9665
__declspec(dllimport) BOOL __stdcall 
#line 9668
InvertRect(HDC hDC, const RECT * lprc); 
#line 9672
__declspec(dllimport) BOOL __stdcall 
#line 9675
SetRect(LPRECT lprc, int xLeft, int yTop, int xRight, int yBottom); 
#line 9682
__declspec(dllimport) BOOL __stdcall 
#line 9685
SetRectEmpty(LPRECT lprc); 
#line 9688
__declspec(dllimport) BOOL __stdcall 
#line 9691
CopyRect(LPRECT lprcDst, const RECT * lprcSrc); 
#line 9695
__declspec(dllimport) BOOL __stdcall 
#line 9698
InflateRect(LPRECT lprc, int dx, int dy); 
#line 9703
__declspec(dllimport) BOOL __stdcall 
#line 9706
IntersectRect(LPRECT lprcDst, const RECT * lprcSrc1, const RECT * lprcSrc2); 
#line 9711
__declspec(dllimport) BOOL __stdcall 
#line 9714
UnionRect(LPRECT lprcDst, const RECT * lprcSrc1, const RECT * lprcSrc2); 
#line 9719
__declspec(dllimport) BOOL __stdcall 
#line 9722
SubtractRect(LPRECT lprcDst, const RECT * lprcSrc1, const RECT * lprcSrc2); 
#line 9727
__declspec(dllimport) BOOL __stdcall 
#line 9730
OffsetRect(LPRECT lprc, int dx, int dy); 
#line 9735
__declspec(dllimport) BOOL __stdcall 
#line 9738
IsRectEmpty(const RECT * lprc); 
#line 9741
__declspec(dllimport) BOOL __stdcall 
#line 9744
EqualRect(const RECT * lprc1, const RECT * lprc2); 
#line 9748
__declspec(dllimport) BOOL __stdcall 
#line 9751
PtInRect(const RECT * lprc, POINT pt); 
#line 9757
__declspec(dllimport) WORD __stdcall 
#line 9760
GetWindowWord(HWND hWnd, int nIndex); 
#line 9764
__declspec(dllimport) WORD __stdcall 
#line 9767
SetWindowWord(HWND hWnd, int nIndex, WORD wNewWord); 
#line 9775 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
#pragma endregion
#line 9777
#pragma region Desktop Family or Games Family
#line 9782
__declspec(dllimport) LONG __stdcall 
#line 9785
GetWindowLongA(HWND hWnd, int nIndex); 
#line 9788
__declspec(dllimport) LONG __stdcall 
#line 9791
GetWindowLongW(HWND hWnd, int nIndex); 
#line 9800 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
__declspec(dllimport) LONG __stdcall 
#line 9803
SetWindowLongA(HWND hWnd, int nIndex, LONG dwNewLong); 
#line 9807
__declspec(dllimport) LONG __stdcall 
#line 9810
SetWindowLongW(HWND hWnd, int nIndex, LONG dwNewLong); 
#line 9822 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
__declspec(dllimport) LONG_PTR __stdcall 
#line 9825
GetWindowLongPtrA(HWND hWnd, int nIndex); 
#line 9828
__declspec(dllimport) LONG_PTR __stdcall 
#line 9831
GetWindowLongPtrW(HWND hWnd, int nIndex); 
#line 9840 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
__declspec(dllimport) LONG_PTR __stdcall 
#line 9843
SetWindowLongPtrA(HWND hWnd, int nIndex, LONG_PTR dwNewLong); 
#line 9847
__declspec(dllimport) LONG_PTR __stdcall 
#line 9850
SetWindowLongPtrW(HWND hWnd, int nIndex, LONG_PTR dwNewLong); 
#line 9883 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
#pragma endregion
#line 9885
#pragma region Desktop Family
#line 9890
__declspec(dllimport) WORD __stdcall 
#line 9893
GetClassWord(HWND hWnd, int nIndex); 
#line 9897
__declspec(dllimport) WORD __stdcall 
#line 9900
SetClassWord(HWND hWnd, int nIndex, WORD wNewWord); 
#line 9905
__declspec(dllimport) DWORD __stdcall 
#line 9908
GetClassLongA(HWND hWnd, int nIndex); 
#line 9911
__declspec(dllimport) DWORD __stdcall 
#line 9914
GetClassLongW(HWND hWnd, int nIndex); 
#line 9923 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
__declspec(dllimport) DWORD __stdcall 
#line 9926
SetClassLongA(HWND hWnd, int nIndex, LONG dwNewLong); 
#line 9930
__declspec(dllimport) DWORD __stdcall 
#line 9933
SetClassLongW(HWND hWnd, int nIndex, LONG dwNewLong); 
#line 9945 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
__declspec(dllimport) ULONG_PTR __stdcall 
#line 9948
GetClassLongPtrA(HWND hWnd, int nIndex); 
#line 9951
__declspec(dllimport) ULONG_PTR __stdcall 
#line 9954
GetClassLongPtrW(HWND hWnd, int nIndex); 
#line 9963 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
__declspec(dllimport) ULONG_PTR __stdcall 
#line 9966
SetClassLongPtrA(HWND hWnd, int nIndex, LONG_PTR dwNewLong); 
#line 9970
__declspec(dllimport) ULONG_PTR __stdcall 
#line 9973
SetClassLongPtrW(HWND hWnd, int nIndex, LONG_PTR dwNewLong); 
#line 10006 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
__declspec(dllimport) BOOL __stdcall 
#line 10009
GetProcessDefaultLayout(DWORD * pdwDefaultLayout); 
#line 10012
__declspec(dllimport) BOOL __stdcall 
#line 10015
SetProcessDefaultLayout(DWORD dwDefaultLayout); 
#line 10019 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
__declspec(dllimport) HWND __stdcall 
#line 10022
GetDesktopWindow(); 
#line 10026
__declspec(dllimport) HWND __stdcall 
#line 10029
GetParent(HWND hWnd); 
#line 10032
__declspec(dllimport) HWND __stdcall 
#line 10035
SetParent(HWND hWndChild, HWND hWndNewParent); 
#line 10039
__declspec(dllimport) BOOL __stdcall 
#line 10042
EnumChildWindows(HWND hWndParent, WNDENUMPROC lpEnumFunc, LPARAM lParam); 
#line 10048
__declspec(dllimport) HWND __stdcall 
#line 10051
FindWindowA(LPCSTR lpClassName, LPCSTR lpWindowName); 
#line 10054
__declspec(dllimport) HWND __stdcall 
#line 10057
FindWindowW(LPCWSTR lpClassName, LPCWSTR lpWindowName); 
#line 10067 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
__declspec(dllimport) HWND __stdcall 
#line 10070
FindWindowExA(HWND hWndParent, HWND hWndChildAfter, LPCSTR lpszClass, LPCSTR lpszWindow); 
#line 10075
__declspec(dllimport) HWND __stdcall 
#line 10078
FindWindowExW(HWND hWndParent, HWND hWndChildAfter, LPCWSTR lpszClass, LPCWSTR lpszWindow); 
#line 10089 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
__declspec(dllimport) HWND __stdcall 
#line 10092
GetShellWindow(); 
#line 10098 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
__declspec(dllimport) BOOL __stdcall 
#line 10101
RegisterShellHookWindow(HWND hwnd); 
#line 10104
__declspec(dllimport) BOOL __stdcall 
#line 10107
DeregisterShellHookWindow(HWND hwnd); 
#line 10110
__declspec(dllimport) BOOL __stdcall 
#line 10113
EnumWindows(WNDENUMPROC lpEnumFunc, LPARAM lParam); 
#line 10117
__declspec(dllimport) BOOL __stdcall 
#line 10120
EnumThreadWindows(DWORD dwThreadId, WNDENUMPROC lpfn, LPARAM lParam); 
#line 10129 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
#pragma endregion
#line 10131
#pragma region Desktop Family or Games Family
#line 10134
__declspec(dllimport) int __stdcall 
#line 10137
GetClassNameA(HWND hWnd, LPSTR lpClassName, int nMaxCount); 
#line 10142
__declspec(dllimport) int __stdcall 
#line 10145
GetClassNameW(HWND hWnd, LPWSTR lpClassName, int nMaxCount); 
#line 10179 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
#pragma endregion
#line 10181
#pragma region Desktop Family
#line 10184
__declspec(dllimport) HWND __stdcall 
#line 10187
GetTopWindow(HWND hWnd); 
#line 10194
__declspec(dllimport) DWORD __stdcall 
#line 10197
GetWindowThreadProcessId(HWND hWnd, LPDWORD lpdwProcessId); 
#line 10203
__declspec(dllimport) BOOL __stdcall 
#line 10206
IsGUIThread(BOOL bConvert); 
#line 10215 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
__declspec(dllimport) HWND __stdcall 
#line 10218
GetLastActivePopup(HWND hWnd); 
#line 10237 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
__declspec(dllimport) HWND __stdcall 
#line 10240
GetWindow(HWND hWnd, UINT uCmd); 
#line 10249
__declspec(dllimport) HHOOK __stdcall 
#line 10252
SetWindowsHookA(int nFilterType, HOOKPROC pfnFilterProc); 
#line 10255
__declspec(dllimport) HHOOK __stdcall 
#line 10258
SetWindowsHookW(int nFilterType, HOOKPROC pfnFilterProc); 
#line 10289 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
__declspec(dllimport) BOOL __stdcall 
#line 10292
UnhookWindowsHook(int nCode, HOOKPROC pfnFilterProc); 
#line 10296
__declspec(dllimport) HHOOK __stdcall 
#line 10299
SetWindowsHookExA(int idHook, HOOKPROC lpfn, HINSTANCE hmod, DWORD dwThreadId); 
#line 10304
__declspec(dllimport) HHOOK __stdcall 
#line 10307
SetWindowsHookExW(int idHook, HOOKPROC lpfn, HINSTANCE hmod, DWORD dwThreadId); 
#line 10319 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
__declspec(dllimport) BOOL __stdcall 
#line 10322
UnhookWindowsHookEx(HHOOK hhk); 
#line 10325
__declspec(dllimport) LRESULT __stdcall 
#line 10328
CallNextHookEx(HHOOK hhk, int nCode, WPARAM wParam, LPARAM lParam); 
#line 10347 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
#pragma endregion
#line 10424 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
#pragma region Desktop Family
#line 10429
__declspec(dllimport) BOOL __stdcall 
#line 10432
CheckMenuRadioItem(HMENU hmenu, UINT first, UINT last, UINT check, UINT flags); 
#line 10446 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
typedef 
#line 10443
struct { 
#line 10444
WORD versionNumber; 
#line 10445
WORD offset; 
#line 10446
} MENUITEMTEMPLATEHEADER, *PMENUITEMTEMPLATEHEADER; 
#line 10452
typedef 
#line 10448
struct { 
#line 10449
WORD mtOption; 
#line 10450
WORD mtID; 
#line 10451
WCHAR mtString[1]; 
#line 10452
} MENUITEMTEMPLATE, *PMENUITEMTEMPLATE; 
#line 10456 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
#pragma endregion
#line 10506 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
#pragma region Desktop Family
#line 10509
__declspec(dllimport) HBITMAP __stdcall 
#line 10512
LoadBitmapA(HINSTANCE hInstance, LPCSTR lpBitmapName); 
#line 10515
__declspec(dllimport) HBITMAP __stdcall 
#line 10518
LoadBitmapW(HINSTANCE hInstance, LPCWSTR lpBitmapName); 
#line 10528 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
#pragma endregion
#line 10530
#pragma region Desktop or Games Family
#line 10533
__declspec(dllimport) HCURSOR __stdcall 
#line 10536
LoadCursorA(HINSTANCE hInstance, LPCSTR lpCursorName); 
#line 10539
__declspec(dllimport) HCURSOR __stdcall 
#line 10542
LoadCursorW(HINSTANCE hInstance, LPCWSTR lpCursorName); 
#line 10552 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
#pragma endregion
#line 10554
#pragma region Desktop Family
#line 10557
__declspec(dllimport) HCURSOR __stdcall 
#line 10560
LoadCursorFromFileA(LPCSTR lpFileName); 
#line 10562
__declspec(dllimport) HCURSOR __stdcall 
#line 10565
LoadCursorFromFileW(LPCWSTR lpFileName); 
#line 10574 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
#pragma endregion
#line 10576
#pragma region Desktop or Games Family
#line 10579
__declspec(dllimport) HCURSOR __stdcall 
#line 10582
CreateCursor(HINSTANCE hInst, int xHotSpot, int yHotSpot, int nWidth, int nHeight, const void * pvANDPlane, const void * pvXORPlane); 
#line 10591
__declspec(dllimport) BOOL __stdcall 
#line 10594
DestroyCursor(HCURSOR hCursor); 
#line 10598 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
#pragma endregion
#line 10600
#pragma region Desktop Family
#line 10614 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
#pragma endregion
#line 10645 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
#pragma region Desktop Family
#line 10648
__declspec(dllimport) BOOL __stdcall 
#line 10651
SetSystemCursor(HCURSOR hcur, DWORD id); 
#line 10661
typedef 
#line 10655
struct _ICONINFO { 
#line 10656
BOOL fIcon; 
#line 10657
DWORD xHotspot; 
#line 10658
DWORD yHotspot; 
#line 10659
HBITMAP hbmMask; 
#line 10660
HBITMAP hbmColor; 
#line 10661
} ICONINFO; 
#line 10662
typedef ICONINFO *PICONINFO; 
#line 10664
__declspec(dllimport) HICON __stdcall 
#line 10667
LoadIconA(HINSTANCE hInstance, LPCSTR lpIconName); 
#line 10670
__declspec(dllimport) HICON __stdcall 
#line 10673
LoadIconW(HINSTANCE hInstance, LPCWSTR lpIconName); 
#line 10683 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
__declspec(dllimport) UINT __stdcall 
#line 10686
PrivateExtractIconsA(LPCSTR szFileName, int nIconIndex, int cxIcon, int cyIcon, HICON * phicon, UINT * piconid, UINT nIcons, UINT flags); 
#line 10695
__declspec(dllimport) UINT __stdcall 
#line 10698
PrivateExtractIconsW(LPCWSTR szFileName, int nIconIndex, int cxIcon, int cyIcon, HICON * phicon, UINT * piconid, UINT nIcons, UINT flags); 
#line 10713 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
__declspec(dllimport) HICON __stdcall 
#line 10716
CreateIcon(HINSTANCE hInstance, int nWidth, int nHeight, BYTE cPlanes, BYTE cBitsPixel, const BYTE * lpbANDbits, const BYTE * lpbXORbits); 
#line 10725
__declspec(dllimport) BOOL __stdcall 
#line 10728
DestroyIcon(HICON hIcon); 
#line 10731
__declspec(dllimport) int __stdcall 
#line 10734
LookupIconIdFromDirectory(PBYTE presbits, BOOL fIcon); 
#line 10739
__declspec(dllimport) int __stdcall 
#line 10742
LookupIconIdFromDirectoryEx(PBYTE presbits, BOOL fIcon, int cxDesired, int cyDesired, UINT Flags); 
#line 10750 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
__declspec(dllimport) HICON __stdcall 
#line 10753
CreateIconFromResource(PBYTE presbits, DWORD dwResSize, BOOL fIcon, DWORD dwVer); 
#line 10760
__declspec(dllimport) HICON __stdcall 
#line 10763
CreateIconFromResourceEx(PBYTE presbits, DWORD dwResSize, BOOL fIcon, DWORD dwVer, int cxDesired, int cyDesired, UINT Flags); 
#line 10782
typedef 
#line 10773
struct tagCURSORSHAPE { 
#line 10775
int xHotSpot; 
#line 10776
int yHotSpot; 
#line 10777
int cx; 
#line 10778
int cy; 
#line 10779
int cbWidth; 
#line 10780
BYTE Planes; 
#line 10781
BYTE BitsPixel; 
#line 10782
} CURSORSHAPE, *LPCURSORSHAPE; 
#line 10786 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
#pragma endregion
#line 10788
#pragma region Desktop or Games Family
#line 10794
__declspec(dllimport) UINT __stdcall 
#line 10797
SetThreadCursorCreationScaling(UINT cursorDpi); 
#line 10801 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
#pragma endregion
#line 10823
#pragma region Desktop Family
#line 10826
__declspec(dllimport) HANDLE __stdcall 
#line 10829
LoadImageA(HINSTANCE hInst, LPCSTR name, UINT type, int cx, int cy, UINT fuLoad); 
#line 10836
__declspec(dllimport) HANDLE __stdcall 
#line 10839
LoadImageW(HINSTANCE hInst, LPCWSTR name, UINT type, int cx, int cy, UINT fuLoad); 
#line 10852 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
__declspec(dllimport) HANDLE __stdcall 
#line 10855
CopyImage(HANDLE h, UINT type, int cx, int cy, UINT flags); 
#line 10871 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
__declspec(dllimport) BOOL __stdcall DrawIconEx(HDC hdc, int xLeft, int yTop, HICON hIcon, int cxWidth, int cyWidth, UINT istepIfAniCur, HBRUSH hbrFlickerFreeDraw, UINT diFlags); 
#line 10883 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
#pragma endregion
#line 10887 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
#pragma region Desktop Family
#line 10890
__declspec(dllimport) HICON __stdcall 
#line 10893
CreateIconIndirect(PICONINFO piconinfo); 
#line 10896
__declspec(dllimport) HICON __stdcall 
#line 10899
CopyIcon(HICON hIcon); 
#line 10902
__declspec(dllimport) BOOL __stdcall 
#line 10905
GetIconInfo(HICON hIcon, PICONINFO piconinfo); 
#line 10920
typedef 
#line 10910
struct _ICONINFOEXA { 
#line 10911
DWORD cbSize; 
#line 10912
BOOL fIcon; 
#line 10913
DWORD xHotspot; 
#line 10914
DWORD yHotspot; 
#line 10915
HBITMAP hbmMask; 
#line 10916
HBITMAP hbmColor; 
#line 10917
WORD wResID; 
#line 10918
CHAR szModName[260]; 
#line 10919
CHAR szResName[260]; 
#line 10920
} ICONINFOEXA, *PICONINFOEXA; 
#line 10931
typedef 
#line 10921
struct _ICONINFOEXW { 
#line 10922
DWORD cbSize; 
#line 10923
BOOL fIcon; 
#line 10924
DWORD xHotspot; 
#line 10925
DWORD yHotspot; 
#line 10926
HBITMAP hbmMask; 
#line 10927
HBITMAP hbmColor; 
#line 10928
WORD wResID; 
#line 10929
WCHAR szModName[260]; 
#line 10930
WCHAR szResName[260]; 
#line 10931
} ICONINFOEXW, *PICONINFOEXW; 
#line 10936
typedef ICONINFOEXA ICONINFOEX; 
#line 10937
typedef PICONINFOEXA PICONINFOEX; 
#line 10940 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
__declspec(dllimport) BOOL __stdcall 
#line 10943
GetIconInfoExA(HICON hicon, PICONINFOEXA piconinfo); 
#line 10946
__declspec(dllimport) BOOL __stdcall 
#line 10949
GetIconInfoExW(HICON hicon, PICONINFOEXW piconinfo); 
#line 10965 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
#pragma endregion
#line 11292 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
typedef 
#line 11289
enum { 
#line 11290
EDIT_CONTROL_FEATURE_ENTERPRISE_DATA_PROTECTION_PASTE_SUPPORT, 
#line 11291
EDIT_CONTROL_FEATURE_PASTE_NOTIFICATIONS
#line 11292
} EDIT_CONTROL_FEATURE; 
#line 11464 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
#pragma region Desktop Family
#line 11473
__declspec(dllimport) BOOL __stdcall 
#line 11476
IsDialogMessageA(HWND hDlg, LPMSG lpMsg); 
#line 11479
__declspec(dllimport) BOOL __stdcall 
#line 11482
IsDialogMessageW(HWND hDlg, LPMSG lpMsg); 
#line 11493 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
__declspec(dllimport) BOOL __stdcall 
#line 11496
MapDialogRect(HWND hDlg, LPRECT lpRect); 
#line 11500
__declspec(dllimport) int __stdcall 
#line 11503
DlgDirListA(HWND hDlg, LPSTR lpPathSpec, int nIDListBox, int nIDStaticPath, UINT uFileType); 
#line 11509
__declspec(dllimport) int __stdcall 
#line 11512
DlgDirListW(HWND hDlg, LPWSTR lpPathSpec, int nIDListBox, int nIDStaticPath, UINT uFileType); 
#line 11525 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
#pragma endregion
#line 11541
#pragma region Desktop Family
#line 11544
__declspec(dllimport) BOOL __stdcall 
#line 11547
DlgDirSelectExA(HWND hwndDlg, LPSTR lpString, int chCount, int idListBox); 
#line 11552
__declspec(dllimport) BOOL __stdcall 
#line 11555
DlgDirSelectExW(HWND hwndDlg, LPWSTR lpString, int chCount, int idListBox); 
#line 11566 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
__declspec(dllimport) int __stdcall 
#line 11569
DlgDirListComboBoxA(HWND hDlg, LPSTR lpPathSpec, int nIDComboBox, int nIDStaticPath, UINT uFiletype); 
#line 11575
__declspec(dllimport) int __stdcall 
#line 11578
DlgDirListComboBoxW(HWND hDlg, LPWSTR lpPathSpec, int nIDComboBox, int nIDStaticPath, UINT uFiletype); 
#line 11590 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
__declspec(dllimport) BOOL __stdcall 
#line 11593
DlgDirSelectComboBoxExA(HWND hwndDlg, LPSTR lpString, int cchOut, int idComboBox); 
#line 11598
__declspec(dllimport) BOOL __stdcall 
#line 11601
DlgDirSelectComboBoxExW(HWND hwndDlg, LPWSTR lpString, int cchOut, int idComboBox); 
#line 11613 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
#pragma endregion
#line 11957 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
#pragma region Desktop Family
#line 11969
typedef 
#line 11960
struct tagSCROLLINFO { 
#line 11962
UINT cbSize; 
#line 11963
UINT fMask; 
#line 11964
int nMin; 
#line 11965
int nMax; 
#line 11966
UINT nPage; 
#line 11967
int nPos; 
#line 11968
int nTrackPos; 
#line 11969
} SCROLLINFO, *LPSCROLLINFO; 
#line 11970
typedef const SCROLLINFO *LPCSCROLLINFO; 
#line 11972
__declspec(dllimport) int __stdcall 
#line 11975
SetScrollInfo(HWND hwnd, int nBar, LPCSCROLLINFO lpsi, BOOL redraw); 
#line 11981
__declspec(dllimport) BOOL __stdcall 
#line 11984
GetScrollInfo(HWND hwnd, int nBar, LPSCROLLINFO lpsi); 
#line 11991 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
#pragma endregion
#line 12014 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
#pragma region Desktop Family
#line 12027
typedef 
#line 12017
struct tagMDICREATESTRUCTA { 
#line 12018
LPCSTR szClass; 
#line 12019
LPCSTR szTitle; 
#line 12020
HANDLE hOwner; 
#line 12021
int x; 
#line 12022
int y; 
#line 12023
int cx; 
#line 12024
int cy; 
#line 12025
DWORD style; 
#line 12026
LPARAM lParam; 
#line 12027
} MDICREATESTRUCTA, *LPMDICREATESTRUCTA; 
#line 12038
typedef 
#line 12028
struct tagMDICREATESTRUCTW { 
#line 12029
LPCWSTR szClass; 
#line 12030
LPCWSTR szTitle; 
#line 12031
HANDLE hOwner; 
#line 12032
int x; 
#line 12033
int y; 
#line 12034
int cx; 
#line 12035
int cy; 
#line 12036
DWORD style; 
#line 12037
LPARAM lParam; 
#line 12038
} MDICREATESTRUCTW, *LPMDICREATESTRUCTW; 
#line 12043
typedef MDICREATESTRUCTA MDICREATESTRUCT; 
#line 12044
typedef LPMDICREATESTRUCTA LPMDICREATESTRUCT; 
#line 12050 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
typedef 
#line 12047
struct tagCLIENTCREATESTRUCT { 
#line 12048
HANDLE hWindowMenu; 
#line 12049
UINT idFirstChild; 
#line 12050
} CLIENTCREATESTRUCT, *LPCLIENTCREATESTRUCT; 
#line 12052
__declspec(dllimport) LRESULT __stdcall 
#line 12055
DefFrameProcA(HWND hWnd, HWND hWndMDIClient, UINT uMsg, WPARAM wParam, LPARAM lParam); 
#line 12061
__declspec(dllimport) LRESULT __stdcall 
#line 12064
DefFrameProcW(HWND hWnd, HWND hWndMDIClient, UINT uMsg, WPARAM wParam, LPARAM lParam); 
#line 12076 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
__declspec(dllimport) LRESULT __stdcall 
#line 12084 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
DefMDIChildProcA(HWND hWnd, UINT uMsg, WPARAM wParam, LPARAM lParam); 
#line 12089
__declspec(dllimport) LRESULT __stdcall 
#line 12097 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
DefMDIChildProcW(HWND hWnd, UINT uMsg, WPARAM wParam, LPARAM lParam); 
#line 12110 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
__declspec(dllimport) BOOL __stdcall 
#line 12113
TranslateMDISysAccel(HWND hWndClient, LPMSG lpMsg); 
#line 12119 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
__declspec(dllimport) UINT __stdcall 
#line 12122
ArrangeIconicWindows(HWND hWnd); 
#line 12125
__declspec(dllimport) HWND __stdcall 
#line 12128
CreateMDIWindowA(LPCSTR lpClassName, LPCSTR lpWindowName, DWORD dwStyle, int X, int Y, int nWidth, int nHeight, HWND hWndParent, HINSTANCE hInstance, LPARAM lParam); 
#line 12139
__declspec(dllimport) HWND __stdcall 
#line 12142
CreateMDIWindowW(LPCWSTR lpClassName, LPCWSTR lpWindowName, DWORD dwStyle, int X, int Y, int nWidth, int nHeight, HWND hWndParent, HINSTANCE hInstance, LPARAM lParam); 
#line 12160 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
__declspec(dllimport) WORD __stdcall 
#line 12163
TileWindows(HWND hwndParent, UINT wHow, const RECT * lpRect, UINT cKids, const HWND * lpKids); 
#line 12170
__declspec(dllimport) WORD __stdcall 
#line 12172
CascadeWindows(HWND hwndParent, UINT wHow, const RECT * lpRect, UINT cKids, const HWND * lpKids); 
#line 12182 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
#pragma endregion
#line 12190 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
#pragma region Desktop Family
#line 12195
typedef DWORD HELPPOLY; 
#line 12204 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
typedef 
#line 12196 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
struct tagMULTIKEYHELPA { 
#line 12198
DWORD mkSize; 
#line 12202 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
CHAR mkKeylist; 
#line 12203
CHAR szKeyphrase[1]; 
#line 12204
} MULTIKEYHELPA, *PMULTIKEYHELPA, *LPMULTIKEYHELPA; 
#line 12213 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
typedef 
#line 12205 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
struct tagMULTIKEYHELPW { 
#line 12207
DWORD mkSize; 
#line 12211 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
WCHAR mkKeylist; 
#line 12212
WCHAR szKeyphrase[1]; 
#line 12213
} MULTIKEYHELPW, *PMULTIKEYHELPW, *LPMULTIKEYHELPW; 
#line 12219
typedef MULTIKEYHELPA MULTIKEYHELP; 
#line 12220
typedef PMULTIKEYHELPA PMULTIKEYHELP; 
#line 12221
typedef LPMULTIKEYHELPA LPMULTIKEYHELP; 
#line 12232 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
typedef 
#line 12224
struct tagHELPWININFOA { 
#line 12225
int wStructSize; 
#line 12226
int x; 
#line 12227
int y; 
#line 12228
int dx; 
#line 12229
int dy; 
#line 12230
int wMax; 
#line 12231
CHAR rgchMember[2]; 
#line 12232
} HELPWININFOA, *PHELPWININFOA, *LPHELPWININFOA; 
#line 12241
typedef 
#line 12233
struct tagHELPWININFOW { 
#line 12234
int wStructSize; 
#line 12235
int x; 
#line 12236
int y; 
#line 12237
int dx; 
#line 12238
int dy; 
#line 12239
int wMax; 
#line 12240
WCHAR rgchMember[2]; 
#line 12241
} HELPWININFOW, *PHELPWININFOW, *LPHELPWININFOW; 
#line 12247
typedef HELPWININFOA HELPWININFO; 
#line 12248
typedef PHELPWININFOA PHELPWININFO; 
#line 12249
typedef LPHELPWININFOA LPHELPWININFO; 
#line 12292 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
__declspec(dllimport) BOOL __stdcall 
#line 12295
WinHelpA(HWND hWndMain, LPCSTR lpszHelp, UINT uCommand, ULONG_PTR dwData); 
#line 12300
__declspec(dllimport) BOOL __stdcall 
#line 12303
WinHelpW(HWND hWndMain, LPCWSTR lpszHelp, UINT uCommand, ULONG_PTR dwData); 
#line 12317 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
#pragma endregion
#line 12333 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
#pragma region Desktop Family
#line 12337
__declspec(dllimport) DWORD __stdcall 
#line 12340
GetGuiResources(HANDLE hProcess, DWORD uiFlags); 
#line 12346 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
#pragma endregion
#line 12349
#pragma region Desktop Family
#line 12354 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
#pragma endregion
#line 12531 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
#pragma region Desktop Family
#line 12540
typedef 
#line 12534
struct tagTouchPredictionParameters { 
#line 12536
UINT cbSize; 
#line 12537
UINT dwLatency; 
#line 12538
UINT dwSampleTime; 
#line 12539
UINT bUseHWTimeStamp; 
#line 12540
} TOUCHPREDICTIONPARAMETERS, *PTOUCHPREDICTIONPARAMETERS; 
#line 12552 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
#pragma endregion
#line 12751 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
typedef 
#line 12748
enum tagHANDEDNESS { 
#line 12749
HANDEDNESS_LEFT, 
#line 12750
HANDEDNESS_RIGHT
#line 12751
} HANDEDNESS, *PHANDEDNESS; 
#line 12768 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
#pragma region Desktop Family
#line 12791 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
typedef 
#line 12771 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
struct tagNONCLIENTMETRICSA { 
#line 12773
UINT cbSize; 
#line 12774
int iBorderWidth; 
#line 12775
int iScrollWidth; 
#line 12776
int iScrollHeight; 
#line 12777
int iCaptionWidth; 
#line 12778
int iCaptionHeight; 
#line 12779
LOGFONTA lfCaptionFont; 
#line 12780
int iSmCaptionWidth; 
#line 12781
int iSmCaptionHeight; 
#line 12782
LOGFONTA lfSmCaptionFont; 
#line 12783
int iMenuWidth; 
#line 12784
int iMenuHeight; 
#line 12785
LOGFONTA lfMenuFont; 
#line 12786
LOGFONTA lfStatusFont; 
#line 12787
LOGFONTA lfMessageFont; 
#line 12789
int iPaddedBorderWidth; 
#line 12791 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
} NONCLIENTMETRICSA, *PNONCLIENTMETRICSA, *LPNONCLIENTMETRICSA; 
#line 12812 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
typedef 
#line 12792 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
struct tagNONCLIENTMETRICSW { 
#line 12794
UINT cbSize; 
#line 12795
int iBorderWidth; 
#line 12796
int iScrollWidth; 
#line 12797
int iScrollHeight; 
#line 12798
int iCaptionWidth; 
#line 12799
int iCaptionHeight; 
#line 12800
LOGFONTW lfCaptionFont; 
#line 12801
int iSmCaptionWidth; 
#line 12802
int iSmCaptionHeight; 
#line 12803
LOGFONTW lfSmCaptionFont; 
#line 12804
int iMenuWidth; 
#line 12805
int iMenuHeight; 
#line 12806
LOGFONTW lfMenuFont; 
#line 12807
LOGFONTW lfStatusFont; 
#line 12808
LOGFONTW lfMessageFont; 
#line 12810
int iPaddedBorderWidth; 
#line 12812 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
} NONCLIENTMETRICSW, *PNONCLIENTMETRICSW, *LPNONCLIENTMETRICSW; 
#line 12818
typedef NONCLIENTMETRICSA NONCLIENTMETRICS; 
#line 12819
typedef PNONCLIENTMETRICSA PNONCLIENTMETRICS; 
#line 12820
typedef LPNONCLIENTMETRICSA LPNONCLIENTMETRICS; 
#line 12824 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
#pragma endregion
#line 12843 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
#pragma region Desktop Family
#line 12853
typedef 
#line 12846
struct tagMINIMIZEDMETRICS { 
#line 12848
UINT cbSize; 
#line 12849
int iWidth; 
#line 12850
int iHorzGap; 
#line 12851
int iVertGap; 
#line 12852
int iArrange; 
#line 12853
} MINIMIZEDMETRICS, *PMINIMIZEDMETRICS, *LPMINIMIZEDMETRICS; 
#line 12864
typedef 
#line 12857
struct tagICONMETRICSA { 
#line 12859
UINT cbSize; 
#line 12860
int iHorzSpacing; 
#line 12861
int iVertSpacing; 
#line 12862
int iTitleWrap; 
#line 12863
LOGFONTA lfFont; 
#line 12864
} ICONMETRICSA, *PICONMETRICSA, *LPICONMETRICSA; 
#line 12872
typedef 
#line 12865
struct tagICONMETRICSW { 
#line 12867
UINT cbSize; 
#line 12868
int iHorzSpacing; 
#line 12869
int iVertSpacing; 
#line 12870
int iTitleWrap; 
#line 12871
LOGFONTW lfFont; 
#line 12872
} ICONMETRICSW, *PICONMETRICSW, *LPICONMETRICSW; 
#line 12878
typedef ICONMETRICSA ICONMETRICS; 
#line 12879
typedef PICONMETRICSA PICONMETRICS; 
#line 12880
typedef LPICONMETRICSA LPICONMETRICS; 
#line 12889 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
typedef 
#line 12885
struct tagANIMATIONINFO { 
#line 12887
UINT cbSize; 
#line 12888
int iMinAnimate; 
#line 12889
} ANIMATIONINFO, *LPANIMATIONINFO; 
#line 12900
typedef 
#line 12891
struct tagSERIALKEYSA { 
#line 12893
UINT cbSize; 
#line 12894
DWORD dwFlags; 
#line 12895
LPSTR lpszActivePort; 
#line 12896
LPSTR lpszPort; 
#line 12897
UINT iBaudRate; 
#line 12898
UINT iPortState; 
#line 12899
UINT iActive; 
#line 12900
} SERIALKEYSA, *LPSERIALKEYSA; 
#line 12910
typedef 
#line 12901
struct tagSERIALKEYSW { 
#line 12903
UINT cbSize; 
#line 12904
DWORD dwFlags; 
#line 12905
LPWSTR lpszActivePort; 
#line 12906
LPWSTR lpszPort; 
#line 12907
UINT iBaudRate; 
#line 12908
UINT iPortState; 
#line 12909
UINT iActive; 
#line 12910
} SERIALKEYSW, *LPSERIALKEYSW; 
#line 12915
typedef SERIALKEYSA SERIALKEYS; 
#line 12916
typedef LPSERIALKEYSA LPSERIALKEYS; 
#line 12930 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
typedef 
#line 12925
struct tagHIGHCONTRASTA { 
#line 12927
UINT cbSize; 
#line 12928
DWORD dwFlags; 
#line 12929
LPSTR lpszDefaultScheme; 
#line 12930
} HIGHCONTRASTA, *LPHIGHCONTRASTA; 
#line 12936
typedef 
#line 12931
struct tagHIGHCONTRASTW { 
#line 12933
UINT cbSize; 
#line 12934
DWORD dwFlags; 
#line 12935
LPWSTR lpszDefaultScheme; 
#line 12936
} HIGHCONTRASTW, *LPHIGHCONTRASTW; 
#line 12941
typedef HIGHCONTRASTA HIGHCONTRAST; 
#line 12942
typedef LPHIGHCONTRASTA LPHIGHCONTRAST; 
#line 12946 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
#pragma endregion
#line 19 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\shared\\tvout.h"
#pragma region Desktop Family
#line 46
typedef 
#line 22
struct _VIDEOPARAMETERS { 
#line 23
GUID Guid; 
#line 24
ULONG dwOffset; 
#line 25
ULONG dwCommand; 
#line 26
ULONG dwFlags; 
#line 27
ULONG dwMode; 
#line 28
ULONG dwTVStandard; 
#line 29
ULONG dwAvailableModes; 
#line 30
ULONG dwAvailableTVStandard; 
#line 31
ULONG dwFlickerFilter; 
#line 32
ULONG dwOverScanX; 
#line 33
ULONG dwOverScanY; 
#line 34
ULONG dwMaxUnscaledX; 
#line 35
ULONG dwMaxUnscaledY; 
#line 36
ULONG dwPositionX; 
#line 37
ULONG dwPositionY; 
#line 38
ULONG dwBrightness; 
#line 39
ULONG dwContrast; 
#line 40
ULONG dwCPType; 
#line 41
ULONG dwCPCommand; 
#line 42
ULONG dwCPStandard; 
#line 43
ULONG dwCPKey; 
#line 44
ULONG bCP_APSTriggerBits; 
#line 45
UCHAR bOEMCopyProtection[256]; 
#line 46
} VIDEOPARAMETERS, *PVIDEOPARAMETERS, *LPVIDEOPARAMETERS; 
#line 95 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\shared\\tvout.h"
#pragma endregion
#line 12989 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
#pragma region Desktop Family
#line 12995
__declspec(dllimport) LONG __stdcall 
#line 12998
ChangeDisplaySettingsA(DEVMODEA * lpDevMode, DWORD dwFlags); 
#line 13001
__declspec(dllimport) LONG __stdcall 
#line 13004
ChangeDisplaySettingsW(DEVMODEW * lpDevMode, DWORD dwFlags); 
#line 13013 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
__declspec(dllimport) LONG __stdcall 
#line 13016
ChangeDisplaySettingsExA(LPCSTR lpszDeviceName, DEVMODEA * lpDevMode, HWND hwnd, DWORD dwflags, LPVOID lParam); 
#line 13022
__declspec(dllimport) LONG __stdcall 
#line 13025
ChangeDisplaySettingsExW(LPCWSTR lpszDeviceName, DEVMODEW * lpDevMode, HWND hwnd, DWORD dwflags, LPVOID lParam); 
#line 13041 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
__declspec(dllimport) BOOL __stdcall 
#line 13044
EnumDisplaySettingsA(LPCSTR lpszDeviceName, DWORD iModeNum, DEVMODEA * lpDevMode); 
#line 13048
__declspec(dllimport) BOOL __stdcall 
#line 13051
EnumDisplaySettingsW(LPCWSTR lpszDeviceName, DWORD iModeNum, DEVMODEW * lpDevMode); 
#line 13063 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
__declspec(dllimport) BOOL __stdcall 
#line 13066
EnumDisplaySettingsExA(LPCSTR lpszDeviceName, DWORD iModeNum, DEVMODEA * lpDevMode, DWORD dwFlags); 
#line 13071
__declspec(dllimport) BOOL __stdcall 
#line 13074
EnumDisplaySettingsExW(LPCWSTR lpszDeviceName, DWORD iModeNum, DEVMODEW * lpDevMode, DWORD dwFlags); 
#line 13089 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
__declspec(dllimport) BOOL __stdcall 
#line 13092
EnumDisplayDevicesA(LPCSTR lpDevice, DWORD iDevNum, PDISPLAY_DEVICEA lpDisplayDevice, DWORD dwFlags); 
#line 13097
__declspec(dllimport) BOOL __stdcall 
#line 13100
EnumDisplayDevicesW(LPCWSTR lpDevice, DWORD iDevNum, PDISPLAY_DEVICEW lpDisplayDevice, DWORD dwFlags); 
#line 13118 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
__declspec(dllimport) LONG __stdcall 
#line 13121
GetDisplayConfigBufferSizes(UINT32 flags, UINT32 * numPathArrayElements, UINT32 * numModeInfoArrayElements); 
#line 13126
__declspec(dllimport) LONG __stdcall 
#line 13129
SetDisplayConfig(UINT32 numPathArrayElements, DISPLAYCONFIG_PATH_INFO * pathArray, UINT32 numModeInfoArrayElements, DISPLAYCONFIG_MODE_INFO * modeInfoArray, UINT32 flags); 
#line 13136
__declspec(dllimport) LONG __stdcall 
#line 13139
QueryDisplayConfig(UINT32 flags, UINT32 * numPathArrayElements, DISPLAYCONFIG_PATH_INFO * pathArray, UINT32 * numModeInfoArrayElements, DISPLAYCONFIG_MODE_INFO * modeInfoArray, DISPLAYCONFIG_TOPOLOGY_ID * currentTopologyId); 
#line 13149
__declspec(dllimport) LONG __stdcall 
#line 13152
DisplayConfigGetDeviceInfo(DISPLAYCONFIG_DEVICE_INFO_HEADER * requestPacket); 
#line 13155
__declspec(dllimport) LONG __stdcall 
#line 13158
DisplayConfigSetDeviceInfo(DISPLAYCONFIG_DEVICE_INFO_HEADER * setPacket); 
#line 13168 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
__declspec(dllimport) BOOL __stdcall 
#line 13172
SystemParametersInfoA(UINT uiAction, UINT uiParam, PVOID pvParam, UINT fWinIni); 
#line 13177
__declspec(dllimport) BOOL __stdcall 
#line 13181
SystemParametersInfoW(UINT uiAction, UINT uiParam, PVOID pvParam, UINT fWinIni); 
#line 13194 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
__declspec(dllimport) BOOL __stdcall 
#line 13198
SystemParametersInfoForDpi(UINT uiAction, UINT uiParam, PVOID pvParam, UINT fWinIni, UINT dpi); 
#line 13208 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
#pragma endregion
#line 13212 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
#pragma region Desktop Family
#line 13226
typedef 
#line 13218
struct tagFILTERKEYS { 
#line 13220
UINT cbSize; 
#line 13221
DWORD dwFlags; 
#line 13222
DWORD iWaitMSec; 
#line 13223
DWORD iDelayMSec; 
#line 13224
DWORD iRepeatMSec; 
#line 13225
DWORD iBounceMSec; 
#line 13226
} FILTERKEYS, *LPFILTERKEYS; 
#line 13229 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
#pragma endregion
#line 13242
#pragma region Desktop Family
#line 13249
typedef 
#line 13245
struct tagSTICKYKEYS { 
#line 13247
UINT cbSize; 
#line 13248
DWORD dwFlags; 
#line 13249
} STICKYKEYS, *LPSTICKYKEYS; 
#line 13252 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
#pragma endregion
#line 13285 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
#pragma region Desktop Family
#line 13297
typedef 
#line 13288
struct tagMOUSEKEYS { 
#line 13290
UINT cbSize; 
#line 13291
DWORD dwFlags; 
#line 13292
DWORD iMaxSpeed; 
#line 13293
DWORD iTimeToMaxSpeed; 
#line 13294
DWORD iCtrlSpeed; 
#line 13295
DWORD dwReserved1; 
#line 13296
DWORD dwReserved2; 
#line 13297
} MOUSEKEYS, *LPMOUSEKEYS; 
#line 13300 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
#pragma endregion
#line 13321 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
#pragma region Desktop Family
#line 13329
typedef 
#line 13324
struct tagACCESSTIMEOUT { 
#line 13326
UINT cbSize; 
#line 13327
DWORD dwFlags; 
#line 13328
DWORD iTimeOutMSec; 
#line 13329
} ACCESSTIMEOUT, *LPACCESSTIMEOUT; 
#line 13332 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
#pragma endregion
#line 13357
#pragma region Desktop Family
#line 13374
typedef 
#line 13360
struct tagSOUNDSENTRYA { 
#line 13362
UINT cbSize; 
#line 13363
DWORD dwFlags; 
#line 13364
DWORD iFSTextEffect; 
#line 13365
DWORD iFSTextEffectMSec; 
#line 13366
DWORD iFSTextEffectColorBits; 
#line 13367
DWORD iFSGrafEffect; 
#line 13368
DWORD iFSGrafEffectMSec; 
#line 13369
DWORD iFSGrafEffectColor; 
#line 13370
DWORD iWindowsEffect; 
#line 13371
DWORD iWindowsEffectMSec; 
#line 13372
LPSTR lpszWindowsEffectDLL; 
#line 13373
DWORD iWindowsEffectOrdinal; 
#line 13374
} SOUNDSENTRYA, *LPSOUNDSENTRYA; 
#line 13389
typedef 
#line 13375
struct tagSOUNDSENTRYW { 
#line 13377
UINT cbSize; 
#line 13378
DWORD dwFlags; 
#line 13379
DWORD iFSTextEffect; 
#line 13380
DWORD iFSTextEffectMSec; 
#line 13381
DWORD iFSTextEffectColorBits; 
#line 13382
DWORD iFSGrafEffect; 
#line 13383
DWORD iFSGrafEffectMSec; 
#line 13384
DWORD iFSGrafEffectColor; 
#line 13385
DWORD iWindowsEffect; 
#line 13386
DWORD iWindowsEffectMSec; 
#line 13387
LPWSTR lpszWindowsEffectDLL; 
#line 13388
DWORD iWindowsEffectOrdinal; 
#line 13389
} SOUNDSENTRYW, *LPSOUNDSENTRYW; 
#line 13394
typedef SOUNDSENTRYA SOUNDSENTRY; 
#line 13395
typedef LPSOUNDSENTRYA LPSOUNDSENTRY; 
#line 13399 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
#pragma endregion
#line 13408
#pragma region Desktop or PC Family
#line 13411
__declspec(dllimport) BOOL __stdcall 
#line 13414
SoundSentry(); 
#line 13417 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
#pragma endregion
#line 13419
#pragma region Desktop Family
#line 13425
typedef 
#line 13421
struct tagTOGGLEKEYS { 
#line 13423
UINT cbSize; 
#line 13424
DWORD dwFlags; 
#line 13425
} TOGGLEKEYS, *LPTOGGLEKEYS; 
#line 13428 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
#pragma endregion
#line 13440
#pragma region Desktop Family
#line 13448
typedef 
#line 13444
struct tagAUDIODESCRIPTION { 
#line 13445
UINT cbSize; 
#line 13446
BOOL Enabled; 
#line 13447
LCID Locale; 
#line 13448
} AUDIODESCRIPTION, *LPAUDIODESCRIPTION; 
#line 13456 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
__declspec(dllimport) void __stdcall 
#line 13459
SetDebugErrorLevel(DWORD dwLevel); 
#line 13463 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
#pragma endregion
#line 13473
#pragma region Desktop Family
#line 13476
__declspec(dllimport) void __stdcall 
#line 13479
SetLastErrorEx(DWORD dwErrCode, DWORD dwType); 
#line 13483
__declspec(dllimport) int __stdcall 
#line 13486
InternalGetWindowText(HWND hWnd, LPWSTR pString, int cchMaxCount); 
#line 13502 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
__declspec(dllimport) BOOL __stdcall 
#line 13505
CancelShutdown(); 
#line 13509 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
#pragma endregion
#line 13522
#pragma region Desktop Family
#line 13525
__declspec(dllimport) HMONITOR __stdcall 
#line 13528
MonitorFromPoint(POINT pt, DWORD dwFlags); 
#line 13532
__declspec(dllimport) HMONITOR __stdcall 
#line 13535
MonitorFromRect(LPCRECT lprc, DWORD dwFlags); 
#line 13539
__declspec(dllimport) HMONITOR __stdcall 
#line 13542
MonitorFromWindow(HWND hwnd, DWORD dwFlags); 
#line 13547 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
#pragma endregion
#line 13555
#pragma region Desktop Family
#line 13564
typedef 
#line 13558
struct tagMONITORINFO { 
#line 13560
DWORD cbSize; 
#line 13561
RECT rcMonitor; 
#line 13562
RECT rcWork; 
#line 13563
DWORD dwFlags; 
#line 13564
} MONITORINFO, *LPMONITORINFO; 
#line 13570
typedef 
#line 13567
struct tagMONITORINFOEXA : public tagMONITORINFO { 
#line 13569
CHAR szDevice[32]; 
#line 13570
} MONITORINFOEXA, *LPMONITORINFOEXA; 
#line 13574
typedef 
#line 13571
struct tagMONITORINFOEXW : public tagMONITORINFO { 
#line 13573
WCHAR szDevice[32]; 
#line 13574
} MONITORINFOEXW, *LPMONITORINFOEXW; 
#line 13579
typedef MONITORINFOEXA MONITORINFOEX; 
#line 13580
typedef LPMONITORINFOEXA LPMONITORINFOEX; 
#line 13602 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
__declspec(dllimport) BOOL __stdcall 
#line 13605
GetMonitorInfoA(HMONITOR hMonitor, LPMONITORINFO lpmi); 
#line 13608
__declspec(dllimport) BOOL __stdcall 
#line 13611
GetMonitorInfoW(HMONITOR hMonitor, LPMONITORINFO lpmi); 
#line 13620 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
typedef BOOL (__stdcall *MONITORENUMPROC)(HMONITOR, HDC, LPRECT, LPARAM); 
#line 13622
__declspec(dllimport) BOOL __stdcall 
#line 13625
EnumDisplayMonitors(HDC hdc, LPCRECT lprcClip, MONITORENUMPROC lpfnEnum, LPARAM dwData); 
#line 13632 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
#pragma endregion
#line 13636
#pragma region Desktop Family
#line 13643
__declspec(dllimport) void __stdcall 
#line 13646
NotifyWinEvent(DWORD event, HWND hwnd, LONG idObject, LONG idChild); 
#line 13652
typedef void (__stdcall *WINEVENTPROC)(HWINEVENTHOOK hWinEventHook, DWORD event, HWND hwnd, LONG idObject, LONG idChild, DWORD idEventThread, DWORD dwmsEventTime); 
#line 13661
__declspec(dllimport) HWINEVENTHOOK __stdcall 
#line 13664
SetWinEventHook(DWORD eventMin, DWORD eventMax, HMODULE hmodWinEventProc, WINEVENTPROC pfnWinEventProc, DWORD idProcess, DWORD idThread, DWORD dwFlags); 
#line 13674
__declspec(dllimport) BOOL __stdcall 
#line 13677
IsWinEventHookInstalled(DWORD event); 
#line 13682 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
#pragma endregion
#line 13692
#pragma region Desktop Family
#line 13695
__declspec(dllimport) BOOL __stdcall 
#line 13698
UnhookWinEvent(HWINEVENTHOOK hWinEventHook); 
#line 13702 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
#pragma endregion
#line 14310 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
#pragma region Desktop Family
#line 14324
typedef 
#line 14313
struct tagGUITHREADINFO { 
#line 14315
DWORD cbSize; 
#line 14316
DWORD flags; 
#line 14317
HWND hwndActive; 
#line 14318
HWND hwndFocus; 
#line 14319
HWND hwndCapture; 
#line 14320
HWND hwndMenuOwner; 
#line 14321
HWND hwndMoveSize; 
#line 14322
HWND hwndCaret; 
#line 14323
RECT rcCaret; 
#line 14324
} GUITHREADINFO, *PGUITHREADINFO, *LPGUITHREADINFO; 
#line 14327 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
#pragma endregion
#line 14342 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
#pragma region Desktop Family
#line 14345
__declspec(dllimport) BOOL __stdcall 
#line 14348
GetGUIThreadInfo(DWORD idThread, PGUITHREADINFO pgui); 
#line 14352
__declspec(dllimport) BOOL __stdcall 
#line 14355
BlockInput(BOOL fBlockIt); 
#line 14362
__declspec(dllimport) BOOL __stdcall 
#line 14365
SetProcessDPIAware(); 
#line 14368
__declspec(dllimport) BOOL __stdcall 
#line 14371
IsProcessDPIAware(); 
#line 14377 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
__declspec(dllimport) DPI_AWARENESS_CONTEXT __stdcall 
#line 14380
SetThreadDpiAwarenessContext(DPI_AWARENESS_CONTEXT dpiContext); 
#line 14383
__declspec(dllimport) DPI_AWARENESS_CONTEXT __stdcall 
#line 14386
GetThreadDpiAwarenessContext(); 
#line 14389
__declspec(dllimport) DPI_AWARENESS_CONTEXT __stdcall 
#line 14392
GetWindowDpiAwarenessContext(HWND hwnd); 
#line 14395
__declspec(dllimport) DPI_AWARENESS __stdcall 
#line 14398
GetAwarenessFromDpiAwarenessContext(DPI_AWARENESS_CONTEXT value); 
#line 14401
__declspec(dllimport) UINT __stdcall 
#line 14404
GetDpiFromDpiAwarenessContext(DPI_AWARENESS_CONTEXT value); 
#line 14407
__declspec(dllimport) BOOL __stdcall 
#line 14410
AreDpiAwarenessContextsEqual(DPI_AWARENESS_CONTEXT dpiContextA, DPI_AWARENESS_CONTEXT dpiContextB); 
#line 14414
__declspec(dllimport) BOOL __stdcall 
#line 14417
IsValidDpiAwarenessContext(DPI_AWARENESS_CONTEXT value); 
#line 14420
__declspec(dllimport) UINT __stdcall 
#line 14423
GetDpiForWindow(HWND hwnd); 
#line 14426
__declspec(dllimport) UINT __stdcall 
#line 14429
GetDpiForSystem(); 
#line 14432
__declspec(dllimport) UINT __stdcall 
#line 14435
GetSystemDpiForProcess(HANDLE hProcess); 
#line 14438
__declspec(dllimport) BOOL __stdcall 
#line 14441
EnableNonClientDpiScaling(HWND hwnd); 
#line 14444
__declspec(dllimport) BOOL __stdcall 
#line 14447
InheritWindowMonitor(HWND hwnd, HWND hwndInherit); 
#line 14454 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
__declspec(dllimport) BOOL __stdcall 
#line 14457
SetProcessDpiAwarenessContext(DPI_AWARENESS_CONTEXT value); 
#line 14465 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
__declspec(dllimport) DPI_AWARENESS_CONTEXT __stdcall 
#line 14468
GetDpiAwarenessContextForProcess(HANDLE hProcess); 
#line 14475 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
__declspec(dllimport) DPI_HOSTING_BEHAVIOR __stdcall 
#line 14478
SetThreadDpiHostingBehavior(DPI_HOSTING_BEHAVIOR value); 
#line 14481
__declspec(dllimport) DPI_HOSTING_BEHAVIOR __stdcall 
#line 14484
GetThreadDpiHostingBehavior(); 
#line 14486
__declspec(dllimport) DPI_HOSTING_BEHAVIOR __stdcall 
#line 14489
GetWindowDpiHostingBehavior(HWND hwnd); 
#line 14495 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
__declspec(dllimport) UINT __stdcall 
#line 14498
GetWindowModuleFileNameA(HWND hwnd, LPSTR pszFileName, UINT cchFileNameMax); 
#line 14502
__declspec(dllimport) UINT __stdcall 
#line 14505
GetWindowModuleFileNameW(HWND hwnd, LPWSTR pszFileName, UINT cchFileNameMax); 
#line 14516 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
#pragma endregion
#line 14556 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
#pragma region Desktop Family or Games Family
#line 14568
typedef 
#line 14562
struct tagCURSORINFO { 
#line 14564
DWORD cbSize; 
#line 14565
DWORD flags; 
#line 14566
HCURSOR hCursor; 
#line 14567
POINT ptScreenPos; 
#line 14568
} CURSORINFO, *PCURSORINFO, *LPCURSORINFO; 
#line 14575 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
__declspec(dllimport) BOOL __stdcall 
#line 14578
GetCursorInfo(PCURSORINFO pci); 
#line 14582 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
#pragma endregion
#line 14584
#pragma region Desktop Family
#line 14602
typedef 
#line 14590
struct tagWINDOWINFO { 
#line 14592
DWORD cbSize; 
#line 14593
RECT rcWindow; 
#line 14594
RECT rcClient; 
#line 14595
DWORD dwStyle; 
#line 14596
DWORD dwExStyle; 
#line 14597
DWORD dwWindowStatus; 
#line 14598
UINT cxWindowBorders; 
#line 14599
UINT cyWindowBorders; 
#line 14600
ATOM atomWindowType; 
#line 14601
WORD wCreatorVersion; 
#line 14602
} WINDOWINFO, *PWINDOWINFO, *LPWINDOWINFO; 
#line 14606
__declspec(dllimport) BOOL __stdcall 
#line 14609
GetWindowInfo(HWND hwnd, PWINDOWINFO pwi); 
#line 14621
typedef 
#line 14616
struct tagTITLEBARINFO { 
#line 14618
DWORD cbSize; 
#line 14619
RECT rcTitleBar; 
#line 14620
DWORD rgstate[5 + 1]; 
#line 14621
} TITLEBARINFO, *PTITLEBARINFO, *LPTITLEBARINFO; 
#line 14623
__declspec(dllimport) BOOL __stdcall 
#line 14626
GetTitleBarInfo(HWND hwnd, PTITLEBARINFO pti); 
#line 14637
typedef 
#line 14631
struct tagTITLEBARINFOEX { 
#line 14633
DWORD cbSize; 
#line 14634
RECT rcTitleBar; 
#line 14635
DWORD rgstate[5 + 1]; 
#line 14636
RECT rgrect[5 + 1]; 
#line 14637
} TITLEBARINFOEX, *PTITLEBARINFOEX, *LPTITLEBARINFOEX; 
#line 14652 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
typedef 
#line 14643
struct tagMENUBARINFO { 
#line 14645
DWORD cbSize; 
#line 14646
RECT rcBar; 
#line 14647
HMENU hMenu; 
#line 14648
HWND hwndMenu; 
#line 14649
BOOL fBarFocused:1; 
#line 14650
BOOL fFocused:1; 
#line 14651
BOOL fUnused:30; 
#line 14652
} MENUBARINFO, *PMENUBARINFO, *LPMENUBARINFO; 
#line 14654
__declspec(dllimport) BOOL __stdcall 
#line 14657
GetMenuBarInfo(HWND hwnd, LONG idObject, LONG idItem, PMENUBARINFO pmbi); 
#line 14675
typedef 
#line 14666
struct tagSCROLLBARINFO { 
#line 14668
DWORD cbSize; 
#line 14669
RECT rcScrollBar; 
#line 14670
int dxyLineButton; 
#line 14671
int xyThumbTop; 
#line 14672
int xyThumbBottom; 
#line 14673
int reserved; 
#line 14674
DWORD rgstate[5 + 1]; 
#line 14675
} SCROLLBARINFO, *PSCROLLBARINFO, *LPSCROLLBARINFO; 
#line 14677
__declspec(dllimport) BOOL __stdcall 
#line 14680
GetScrollBarInfo(HWND hwnd, LONG idObject, PSCROLLBARINFO psbi); 
#line 14697
typedef 
#line 14688
struct tagCOMBOBOXINFO { 
#line 14690
DWORD cbSize; 
#line 14691
RECT rcItem; 
#line 14692
RECT rcButton; 
#line 14693
DWORD stateButton; 
#line 14694
HWND hwndCombo; 
#line 14695
HWND hwndItem; 
#line 14696
HWND hwndList; 
#line 14697
} COMBOBOXINFO, *PCOMBOBOXINFO, *LPCOMBOBOXINFO; 
#line 14699
__declspec(dllimport) BOOL __stdcall 
#line 14702
GetComboBoxInfo(HWND hwndCombo, PCOMBOBOXINFO pcbi); 
#line 14707 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
#pragma endregion
#line 14716
#pragma region Desktop Family
#line 14719
__declspec(dllimport) HWND __stdcall 
#line 14722
GetAncestor(HWND hwnd, UINT gaFlags); 
#line 14733
__declspec(dllimport) HWND __stdcall 
#line 14736
RealChildWindowFromPoint(HWND hwndParent, POINT ptParentClientCoords); 
#line 14745
__declspec(dllimport) UINT __stdcall 
#line 14748
RealGetWindowClassA(HWND hwnd, LPSTR ptszClassName, UINT cchClassNameMax); 
#line 14756
__declspec(dllimport) UINT __stdcall 
#line 14759
RealGetWindowClassW(HWND hwnd, LPWSTR ptszClassName, UINT cchClassNameMax); 
#line 14783 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
typedef 
#line 14772
struct tagALTTABINFO { 
#line 14774
DWORD cbSize; 
#line 14775
int cItems; 
#line 14776
int cColumns; 
#line 14777
int cRows; 
#line 14778
int iColFocus; 
#line 14779
int iRowFocus; 
#line 14780
int cxItem; 
#line 14781
int cyItem; 
#line 14782
POINT ptStart; 
#line 14783
} ALTTABINFO, *PALTTABINFO, *LPALTTABINFO; 
#line 14785
__declspec(dllimport) BOOL __stdcall 
#line 14788
GetAltTabInfoA(HWND hwnd, int iItem, PALTTABINFO pati, LPSTR pszItemText, UINT cchItemText); 
#line 14794
__declspec(dllimport) BOOL __stdcall 
#line 14797
GetAltTabInfoW(HWND hwnd, int iItem, PALTTABINFO pati, LPWSTR pszItemText, UINT cchItemText); 
#line 14813 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
__declspec(dllimport) DWORD __stdcall 
#line 14816
GetListBoxInfo(HWND hwnd); 
#line 14820 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
#pragma endregion
#line 14825 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
#pragma region Desktop Family
#line 14830
__declspec(dllimport) BOOL __stdcall 
#line 14833
LockWorkStation(); 
#line 14839 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
__declspec(dllimport) BOOL __stdcall 
#line 14842
UserHandleGrantAccess(HANDLE hUserHandle, HANDLE hJob, BOOL bGrant); 
#line 14850 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
#pragma endregion
#line 14858
#pragma region Desktop Family
#line 14861
struct HRAWINPUT__ { int unused; }; typedef HRAWINPUT__ *HRAWINPUT; 
#line 14864 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
#pragma endregion
#line 14888
#pragma region Desktop Family
#line 14899
typedef 
#line 14894
struct tagRAWINPUTHEADER { 
#line 14895
DWORD dwType; 
#line 14896
DWORD dwSize; 
#line 14897
HANDLE hDevice; 
#line 14898
WPARAM wParam; 
#line 14899
} RAWINPUTHEADER, *PRAWINPUTHEADER, *LPRAWINPUTHEADER; 
#line 14902 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
#pragma endregion
#line 14912
#pragma region Desktop Family
#line 14917
#pragma warning(push)
#line 14919 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
#pragma warning(disable : 4201)
#line 14962
typedef 
#line 14924
struct tagRAWMOUSE { 
#line 14928
USHORT usFlags; 
#line 14933
union { 
#line 14934
ULONG ulButtons; 
#line 14935
struct { 
#line 14936
USHORT usButtonFlags; 
#line 14937
USHORT usButtonData; 
#line 14938
}; 
#line 14939
}; 
#line 14945
ULONG ulRawButtons; 
#line 14950
LONG lLastX; 
#line 14955
LONG lLastY; 
#line 14960
ULONG ulExtraInformation; 
#line 14962
} RAWMOUSE, *PRAWMOUSE, *LPRAWMOUSE; 
#line 14965
#pragma warning(pop)
#line 14969 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
#pragma endregion
#line 15014 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
#pragma region Desktop Family
#line 15046
typedef 
#line 15020
struct tagRAWKEYBOARD { 
#line 15024
USHORT MakeCode; 
#line 15030
USHORT Flags; 
#line 15032
USHORT Reserved; 
#line 15037
USHORT VKey; 
#line 15038
UINT Message; 
#line 15043
ULONG ExtraInformation; 
#line 15046
} RAWKEYBOARD, *PRAWKEYBOARD, *LPRAWKEYBOARD; 
#line 15049 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
#pragma endregion
#line 15067
#pragma region Desktop Family
#line 15077
typedef 
#line 15073
struct tagRAWHID { 
#line 15074
DWORD dwSizeHid; 
#line 15075
DWORD dwCount; 
#line 15076
BYTE bRawData[1]; 
#line 15077
} RAWHID, *PRAWHID, *LPRAWHID; 
#line 15080 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
#pragma endregion
#line 15086
#pragma region Desktop Family
#line 15096
typedef 
#line 15089
struct tagRAWINPUT { 
#line 15090
RAWINPUTHEADER header; 
#line 15091
union { 
#line 15092
RAWMOUSE mouse; 
#line 15093
RAWKEYBOARD keyboard; 
#line 15094
RAWHID hid; 
#line 15095
} data; 
#line 15096
} RAWINPUT, *PRAWINPUT, *LPRAWINPUT; 
#line 15099 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
#pragma endregion
#line 15116 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
#pragma region Desktop Family
#line 15119
__declspec(dllimport) UINT __stdcall 
#line 15122
GetRawInputData(HRAWINPUT hRawInput, UINT uiCommand, LPVOID pData, PUINT pcbSize, UINT cbSizeHeader); 
#line 15130 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
#pragma endregion
#line 15139
#pragma region Desktop Family
#line 15147
typedef 
#line 15142
struct tagRID_DEVICE_INFO_MOUSE { 
#line 15143
DWORD dwId; 
#line 15144
DWORD dwNumberOfButtons; 
#line 15145
DWORD dwSampleRate; 
#line 15146
BOOL fHasHorizontalWheel; 
#line 15147
} RID_DEVICE_INFO_MOUSE, *PRID_DEVICE_INFO_MOUSE; 
#line 15156
typedef 
#line 15149
struct tagRID_DEVICE_INFO_KEYBOARD { 
#line 15150
DWORD dwType; 
#line 15151
DWORD dwSubType; 
#line 15152
DWORD dwKeyboardMode; 
#line 15153
DWORD dwNumberOfFunctionKeys; 
#line 15154
DWORD dwNumberOfIndicators; 
#line 15155
DWORD dwNumberOfKeysTotal; 
#line 15156
} RID_DEVICE_INFO_KEYBOARD, *PRID_DEVICE_INFO_KEYBOARD; 
#line 15168
typedef 
#line 15158
struct tagRID_DEVICE_INFO_HID { 
#line 15159
DWORD dwVendorId; 
#line 15160
DWORD dwProductId; 
#line 15161
DWORD dwVersionNumber; 
#line 15166
USHORT usUsagePage; 
#line 15167
USHORT usUsage; 
#line 15168
} RID_DEVICE_INFO_HID, *PRID_DEVICE_INFO_HID; 
#line 15178
typedef 
#line 15170
struct tagRID_DEVICE_INFO { 
#line 15171
DWORD cbSize; 
#line 15172
DWORD dwType; 
#line 15173
union { 
#line 15174
RID_DEVICE_INFO_MOUSE mouse; 
#line 15175
RID_DEVICE_INFO_KEYBOARD keyboard; 
#line 15176
RID_DEVICE_INFO_HID hid; 
#line 15177
}; 
#line 15178
} RID_DEVICE_INFO, *PRID_DEVICE_INFO, *LPRID_DEVICE_INFO; 
#line 15180
__declspec(dllimport) UINT __stdcall 
#line 15183
GetRawInputDeviceInfoA(HANDLE hDevice, UINT uiCommand, LPVOID pData, PUINT pcbSize); 
#line 15188
__declspec(dllimport) UINT __stdcall 
#line 15191
GetRawInputDeviceInfoW(HANDLE hDevice, UINT uiCommand, LPVOID pData, PUINT pcbSize); 
#line 15206 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
__declspec(dllimport) UINT __stdcall 
#line 15209
GetRawInputBuffer(PRAWINPUT pData, PUINT pcbSize, UINT cbSizeHeader); 
#line 15222
typedef 
#line 15217
struct tagRAWINPUTDEVICE { 
#line 15218
USHORT usUsagePage; 
#line 15219
USHORT usUsage; 
#line 15220
DWORD dwFlags; 
#line 15221
HWND hwndTarget; 
#line 15222
} RAWINPUTDEVICE, *PRAWINPUTDEVICE, *LPRAWINPUTDEVICE; 
#line 15224
typedef const RAWINPUTDEVICE *PCRAWINPUTDEVICE; 
#line 15227 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
#pragma endregion
#line 15259 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
#pragma region Desktop Family
#line 15262
__declspec(dllimport) BOOL __stdcall 
#line 15265
RegisterRawInputDevices(PCRAWINPUTDEVICE pRawInputDevices, UINT uiNumDevices, UINT cbSize); 
#line 15270
__declspec(dllimport) UINT __stdcall 
#line 15273
GetRegisteredRawInputDevices(PRAWINPUTDEVICE pRawInputDevices, PUINT puiNumDevices, UINT cbSize); 
#line 15282
typedef 
#line 15279
struct tagRAWINPUTDEVICELIST { 
#line 15280
HANDLE hDevice; 
#line 15281
DWORD dwType; 
#line 15282
} RAWINPUTDEVICELIST, *PRAWINPUTDEVICELIST; 
#line 15284
__declspec(dllimport) UINT __stdcall 
#line 15287
GetRawInputDeviceList(PRAWINPUTDEVICELIST pRawInputDeviceList, PUINT puiNumDevices, UINT cbSize); 
#line 15292
__declspec(dllimport) LRESULT __stdcall 
#line 15295
DefRawInputProc(PRAWINPUT * paRawInput, INT nInput, UINT cbSizeHeader); 
#line 15301 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
#pragma endregion
#line 15325 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
#pragma region Desktop Family
#line 15336 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
typedef 
#line 15328 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
enum tagPOINTER_DEVICE_TYPE { 
#line 15329
POINTER_DEVICE_TYPE_INTEGRATED_PEN = 1, 
#line 15330
POINTER_DEVICE_TYPE_EXTERNAL_PEN, 
#line 15331
POINTER_DEVICE_TYPE_TOUCH, 
#line 15333
POINTER_DEVICE_TYPE_TOUCH_PAD, 
#line 15335 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
POINTER_DEVICE_TYPE_MAX = (-1)
#line 15336
} POINTER_DEVICE_TYPE; 
#line 15346
typedef 
#line 15338
struct tagPOINTER_DEVICE_INFO { 
#line 15339
DWORD displayOrientation; 
#line 15340
HANDLE device; 
#line 15341
POINTER_DEVICE_TYPE pointerDeviceType; 
#line 15342
HMONITOR monitor; 
#line 15343
ULONG startingCursorId; 
#line 15344
USHORT maxActiveContacts; 
#line 15345
WCHAR productString[520]; 
#line 15346
} POINTER_DEVICE_INFO; 
#line 15357
typedef 
#line 15348
struct tagPOINTER_DEVICE_PROPERTY { 
#line 15349
INT32 logicalMin; 
#line 15350
INT32 logicalMax; 
#line 15351
INT32 physicalMin; 
#line 15352
INT32 physicalMax; 
#line 15353
UINT32 unit; 
#line 15354
UINT32 unitExponent; 
#line 15355
USHORT usagePageId; 
#line 15356
USHORT usageId; 
#line 15357
} POINTER_DEVICE_PROPERTY; 
#line 15364
typedef 
#line 15359
enum tagPOINTER_DEVICE_CURSOR_TYPE { 
#line 15360
POINTER_DEVICE_CURSOR_TYPE_UNKNOWN, 
#line 15361
POINTER_DEVICE_CURSOR_TYPE_TIP, 
#line 15362
POINTER_DEVICE_CURSOR_TYPE_ERASER, 
#line 15363
POINTER_DEVICE_CURSOR_TYPE_MAX = (-1)
#line 15364
} POINTER_DEVICE_CURSOR_TYPE; 
#line 15369
typedef 
#line 15366
struct tagPOINTER_DEVICE_CURSOR_INFO { 
#line 15367
UINT32 cursorId; 
#line 15368
POINTER_DEVICE_CURSOR_TYPE cursor; 
#line 15369
} POINTER_DEVICE_CURSOR_INFO; 
#line 15371
__declspec(dllimport) BOOL __stdcall 
#line 15374
GetPointerDevices(UINT32 * deviceCount, POINTER_DEVICE_INFO * pointerDevices); 
#line 15378
__declspec(dllimport) BOOL __stdcall 
#line 15381
GetPointerDevice(HANDLE device, POINTER_DEVICE_INFO * pointerDevice); 
#line 15385
__declspec(dllimport) BOOL __stdcall 
#line 15388
GetPointerDeviceProperties(HANDLE device, UINT32 * propertyCount, POINTER_DEVICE_PROPERTY * pointerProperties); 
#line 15393
__declspec(dllimport) BOOL __stdcall 
#line 15396
RegisterPointerDeviceNotifications(HWND window, BOOL notifyRange); 
#line 15400
__declspec(dllimport) BOOL __stdcall 
#line 15403
GetPointerDeviceRects(HANDLE device, RECT * pointerDeviceRect, RECT * displayRect); 
#line 15408
__declspec(dllimport) BOOL __stdcall 
#line 15411
GetPointerDeviceCursors(HANDLE device, UINT32 * cursorCount, POINTER_DEVICE_CURSOR_INFO * deviceCursors); 
#line 15416
__declspec(dllimport) BOOL __stdcall 
#line 15419
GetRawPointerDeviceData(UINT32 pointerId, UINT32 historyCount, UINT32 propertiesCount, POINTER_DEVICE_PROPERTY * pProperties, LONG * pValues); 
#line 15428 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
#pragma endregion
#line 15442 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
#pragma region Desktop Family
#line 15445
__declspec(dllimport) BOOL __stdcall 
#line 15448
ChangeWindowMessageFilter(UINT message, DWORD dwFlag); 
#line 15453 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
#pragma endregion
#line 15467 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
#pragma region Desktop Family
#line 15473
typedef 
#line 15470
struct tagCHANGEFILTERSTRUCT { 
#line 15471
DWORD cbSize; 
#line 15472
DWORD ExtStatus; 
#line 15473
} CHANGEFILTERSTRUCT, *PCHANGEFILTERSTRUCT; 
#line 15476 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
#pragma endregion
#line 15485
#pragma region Desktop Family
#line 15488
__declspec(dllimport) BOOL __stdcall 
#line 15491
ChangeWindowMessageFilterEx(HWND hwnd, UINT message, DWORD action, PCHANGEFILTERSTRUCT pChangeFilterStruct); 
#line 15498 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
#pragma endregion
#line 15511 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
#pragma region Desktop Family
#line 15517
struct HGESTUREINFO__ { int unused; }; typedef HGESTUREINFO__ *HGESTUREINFO; 
#line 15520 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
#pragma endregion
#line 15541
#pragma region Desktop Family
#line 15562
typedef 
#line 15552
struct tagGESTUREINFO { 
#line 15553
UINT cbSize; 
#line 15554
DWORD dwFlags; 
#line 15555
DWORD dwID; 
#line 15556
HWND hwndTarget; 
#line 15557
POINTS ptsLocation; 
#line 15558
DWORD dwInstanceID; 
#line 15559
DWORD dwSequenceID; 
#line 15560
ULONGLONG ullArguments; 
#line 15561
UINT cbExtraArgs; 
#line 15562
} GESTUREINFO, *PGESTUREINFO; 
#line 15563
typedef const GESTUREINFO *PCGESTUREINFO; 
#line 15579
typedef 
#line 15573
struct tagGESTURENOTIFYSTRUCT { 
#line 15574
UINT cbSize; 
#line 15575
DWORD dwFlags; 
#line 15576
HWND hwndTarget; 
#line 15577
POINTS ptsLocation; 
#line 15578
DWORD dwInstanceID; 
#line 15579
} GESTURENOTIFYSTRUCT, *PGESTURENOTIFYSTRUCT; 
#line 15593
__declspec(dllimport) BOOL __stdcall 
#line 15596
GetGestureInfo(HGESTUREINFO hGestureInfo, PGESTUREINFO pGestureInfo); 
#line 15606
__declspec(dllimport) BOOL __stdcall 
#line 15609
GetGestureExtraArgs(HGESTUREINFO hGestureInfo, UINT cbExtraArgs, PBYTE pExtraArgs); 
#line 15624
__declspec(dllimport) BOOL __stdcall 
#line 15627
CloseGestureInfoHandle(HGESTUREINFO hGestureInfo); 
#line 15642
typedef 
#line 15638
struct tagGESTURECONFIG { 
#line 15639
DWORD dwID; 
#line 15640
DWORD dwWant; 
#line 15641
DWORD dwBlock; 
#line 15642
} GESTURECONFIG, *PGESTURECONFIG; 
#line 15645 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
#pragma endregion
#line 15689
#pragma region Desktop Family
#line 15692
__declspec(dllimport) BOOL __stdcall 
#line 15695
SetGestureConfig(HWND hwnd, DWORD dwReserved, UINT cIDs, PGESTURECONFIG pGestureConfig, UINT cbSize); 
#line 15707
__declspec(dllimport) BOOL __stdcall 
#line 15710
GetGestureConfig(HWND hwnd, DWORD dwReserved, DWORD dwFlags, PUINT pcIDs, PGESTURECONFIG pGestureConfig, UINT cbSize); 
#line 15721 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
#pragma endregion
#line 15744 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
#pragma region Desktop Family
#line 15747
__declspec(dllimport) BOOL __stdcall 
#line 15750
ShutdownBlockReasonCreate(HWND hWnd, LPCWSTR pwszReason); 
#line 15754
__declspec(dllimport) BOOL __stdcall 
#line 15757
ShutdownBlockReasonQuery(HWND hWnd, LPWSTR pwszBuff, DWORD * pcchBuff); 
#line 15762
__declspec(dllimport) BOOL __stdcall 
#line 15765
ShutdownBlockReasonDestroy(HWND hWnd); 
#line 15769 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
#pragma endregion
#line 15774
#pragma region Desktop Family
#line 15789 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
typedef 
#line 15780 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
enum tagINPUT_MESSAGE_DEVICE_TYPE { 
#line 15781
IMDT_UNAVAILABLE, 
#line 15782
IMDT_KEYBOARD, 
#line 15783
IMDT_MOUSE, 
#line 15784
IMDT_TOUCH = 4, 
#line 15785
IMDT_PEN = 8, 
#line 15787
IMDT_TOUCHPAD = 16
#line 15789 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
} INPUT_MESSAGE_DEVICE_TYPE; 
#line 15796
typedef 
#line 15791
enum tagINPUT_MESSAGE_ORIGIN_ID { 
#line 15792
IMO_UNAVAILABLE, 
#line 15793
IMO_HARDWARE, 
#line 15794
IMO_INJECTED, 
#line 15795
IMO_SYSTEM = 4
#line 15796
} INPUT_MESSAGE_ORIGIN_ID; 
#line 15804
typedef 
#line 15801
struct tagINPUT_MESSAGE_SOURCE { 
#line 15802
INPUT_MESSAGE_DEVICE_TYPE deviceType; 
#line 15803
INPUT_MESSAGE_ORIGIN_ID originId; 
#line 15804
} INPUT_MESSAGE_SOURCE; 
#line 15810
__declspec(dllimport) BOOL __stdcall 
#line 15813
GetCurrentInputMessageSource(INPUT_MESSAGE_SOURCE * inputMessageSource); 
#line 15816
__declspec(dllimport) BOOL __stdcall 
#line 15819
GetCIMSSM(INPUT_MESSAGE_SOURCE * inputMessageSource); 
#line 15823 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
#pragma endregion
#line 15829 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
#pragma region Application Family or OneCore Family or Games Family
#line 15845
typedef 
#line 15835
enum tagAR_STATE { 
#line 15836
AR_ENABLED, 
#line 15837
AR_DISABLED, 
#line 15838
AR_SUPPRESSED, 
#line 15839
AR_REMOTESESSION = 4, 
#line 15840
AR_MULTIMON = 8, 
#line 15841
AR_NOSENSOR = 16, 
#line 15842
AR_NOT_SUPPORTED = 32, 
#line 15843
AR_DOCKED = 64, 
#line 15844
AR_LAPTOP = 128
#line 15845
} AR_STATE, *PAR_STATE; 
#line 15848 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
#pragma endregion
#line 15854
extern "C++" {constexpr AR_STATE operator|(AR_STATE a, AR_STATE b) noexcept { return (AR_STATE)(((_ENUM_FLAG_SIZED_INTEGER< tagAR_STATE> ::type)a) | ((_ENUM_FLAG_SIZED_INTEGER< tagAR_STATE> ::type)b)); } inline AR_STATE &operator|=(AR_STATE &a, AR_STATE b) noexcept { return (AR_STATE &)(((_ENUM_FLAG_SIZED_INTEGER< tagAR_STATE> ::type &)a) |= ((_ENUM_FLAG_SIZED_INTEGER< tagAR_STATE> ::type)b)); } constexpr AR_STATE operator&(AR_STATE a, AR_STATE b) noexcept { return (AR_STATE)(((_ENUM_FLAG_SIZED_INTEGER< tagAR_STATE> ::type)a) & ((_ENUM_FLAG_SIZED_INTEGER< tagAR_STATE> ::type)b)); } inline AR_STATE &operator&=(AR_STATE &a, AR_STATE b) noexcept { return (AR_STATE &)(((_ENUM_FLAG_SIZED_INTEGER< tagAR_STATE> ::type &)a) &= ((_ENUM_FLAG_SIZED_INTEGER< tagAR_STATE> ::type)b)); } constexpr AR_STATE operator~(AR_STATE a) noexcept { return (AR_STATE)(~((_ENUM_FLAG_SIZED_INTEGER< tagAR_STATE> ::type)a)); } constexpr AR_STATE operator^(AR_STATE a, AR_STATE b) noexcept { return (AR_STATE)(((_ENUM_FLAG_SIZED_INTEGER< tagAR_STATE> ::type)a) ^ ((_ENUM_FLAG_SIZED_INTEGER< tagAR_STATE> ::type)b)); } inline AR_STATE &operator^=(AR_STATE &a, AR_STATE b) noexcept { return (AR_STATE &)(((_ENUM_FLAG_SIZED_INTEGER< tagAR_STATE> ::type &)a) ^= ((_ENUM_FLAG_SIZED_INTEGER< tagAR_STATE> ::type)b)); } }
#line 15857 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
#pragma region Desktop Family
#line 15870
typedef 
#line 15864
enum ORIENTATION_PREFERENCE { 
#line 15865
ORIENTATION_PREFERENCE_NONE, 
#line 15866
ORIENTATION_PREFERENCE_LANDSCAPE, 
#line 15867
ORIENTATION_PREFERENCE_PORTRAIT, 
#line 15868
ORIENTATION_PREFERENCE_LANDSCAPE_FLIPPED = 4, 
#line 15869
ORIENTATION_PREFERENCE_PORTRAIT_FLIPPED = 8
#line 15870
} ORIENTATION_PREFERENCE; 
#line 15877
extern "C++" {constexpr ORIENTATION_PREFERENCE operator|(ORIENTATION_PREFERENCE a, ORIENTATION_PREFERENCE b) noexcept { return (ORIENTATION_PREFERENCE)(((_ENUM_FLAG_SIZED_INTEGER< ORIENTATION_PREFERENCE> ::type)a) | ((_ENUM_FLAG_SIZED_INTEGER< ORIENTATION_PREFERENCE> ::type)b)); } inline ORIENTATION_PREFERENCE &operator|=(ORIENTATION_PREFERENCE &a, ORIENTATION_PREFERENCE b) noexcept { return (ORIENTATION_PREFERENCE &)(((_ENUM_FLAG_SIZED_INTEGER< ORIENTATION_PREFERENCE> ::type &)a) |= ((_ENUM_FLAG_SIZED_INTEGER< ORIENTATION_PREFERENCE> ::type)b)); } constexpr ORIENTATION_PREFERENCE operator&(ORIENTATION_PREFERENCE a, ORIENTATION_PREFERENCE b) noexcept { return (ORIENTATION_PREFERENCE)(((_ENUM_FLAG_SIZED_INTEGER< ORIENTATION_PREFERENCE> ::type)a) & ((_ENUM_FLAG_SIZED_INTEGER< ORIENTATION_PREFERENCE> ::type)b)); } inline ORIENTATION_PREFERENCE &operator&=(ORIENTATION_PREFERENCE &a, ORIENTATION_PREFERENCE b) noexcept { return (ORIENTATION_PREFERENCE &)(((_ENUM_FLAG_SIZED_INTEGER< ORIENTATION_PREFERENCE> ::type &)a) &= ((_ENUM_FLAG_SIZED_INTEGER< ORIENTATION_PREFERENCE> ::type)b)); } constexpr ORIENTATION_PREFERENCE operator~(ORIENTATION_PREFERENCE a) noexcept { return (ORIENTATION_PREFERENCE)(~((_ENUM_FLAG_SIZED_INTEGER< ORIENTATION_PREFERENCE> ::type)a)); } constexpr ORIENTATION_PREFERENCE operator^(ORIENTATION_PREFERENCE a, ORIENTATION_PREFERENCE b) noexcept { return (ORIENTATION_PREFERENCE)(((_ENUM_FLAG_SIZED_INTEGER< ORIENTATION_PREFERENCE> ::type)a) ^ ((_ENUM_FLAG_SIZED_INTEGER< ORIENTATION_PREFERENCE> ::type)b)); } inline ORIENTATION_PREFERENCE &operator^=(ORIENTATION_PREFERENCE &a, ORIENTATION_PREFERENCE b) noexcept { return (ORIENTATION_PREFERENCE &)(((_ENUM_FLAG_SIZED_INTEGER< ORIENTATION_PREFERENCE> ::type &)a) ^= ((_ENUM_FLAG_SIZED_INTEGER< ORIENTATION_PREFERENCE> ::type)b)); } }
#line 15880 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
__declspec(dllimport) BOOL __stdcall 
#line 15883
GetAutoRotationState(PAR_STATE pState); 
#line 15886
__declspec(dllimport) BOOL __stdcall 
#line 15889
GetDisplayAutoRotationPreferences(ORIENTATION_PREFERENCE * pOrientation); 
#line 15892
__declspec(dllimport) BOOL __stdcall 
#line 15895
GetDisplayAutoRotationPreferencesByProcessId(DWORD dwProcessId, ORIENTATION_PREFERENCE * pOrientation, BOOL * fRotateScreen); 
#line 15900
__declspec(dllimport) BOOL __stdcall 
#line 15903
SetDisplayAutoRotationPreferences(ORIENTATION_PREFERENCE orientation); 
#line 15907 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
#pragma endregion
#line 15913 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
#pragma region Desktop Family
#line 15917
__declspec(dllimport) BOOL __stdcall 
#line 15920
IsImmersiveProcess(HANDLE hProcess); 
#line 15923
__declspec(dllimport) BOOL __stdcall 
#line 15926
SetProcessRestrictionExemption(BOOL fEnableExemption); 
#line 15958 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
}
#line 15930 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
#pragma endregion
#line 15935 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
#pragma region Desktop Family
#line 15947 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winuser.h"
#pragma warning(pop)
#line 24 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnls.h"
extern "C" {
#line 22 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\datetimeapi.h"
extern "C" {
#line 25 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\datetimeapi.h"
#pragma region Desktop Family or OneCore or Games Family
#line 30
__declspec(dllimport) int __stdcall 
#line 33
GetDateFormatA(LCID Locale, DWORD dwFlags, const SYSTEMTIME * lpDate, LPCSTR lpFormat, LPSTR lpDateStr, int cchDate); 
#line 42
__declspec(dllimport) int __stdcall 
#line 45
GetDateFormatW(LCID Locale, DWORD dwFlags, const SYSTEMTIME * lpDate, LPCWSTR lpFormat, LPWSTR lpDateStr, int cchDate); 
#line 61 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\datetimeapi.h"
__declspec(dllimport) int __stdcall 
#line 64
GetTimeFormatA(LCID Locale, DWORD dwFlags, const SYSTEMTIME * lpTime, LPCSTR lpFormat, LPSTR lpTimeStr, int cchTime); 
#line 73
__declspec(dllimport) int __stdcall 
#line 76
GetTimeFormatW(LCID Locale, DWORD dwFlags, const SYSTEMTIME * lpTime, LPCWSTR lpFormat, LPWSTR lpTimeStr, int cchTime); 
#line 91 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\datetimeapi.h"
#pragma endregion
#line 93
#pragma region Application Family or OneCore or Games Family
#line 96
__declspec(dllimport) int __stdcall 
#line 99
GetTimeFormatEx(LPCWSTR lpLocaleName, DWORD dwFlags, const SYSTEMTIME * lpTime, LPCWSTR lpFormat, LPWSTR lpTimeStr, int cchTime); 
#line 108
__declspec(dllimport) int __stdcall 
#line 111
GetDateFormatEx(LPCWSTR lpLocaleName, DWORD dwFlags, const SYSTEMTIME * lpDate, LPCWSTR lpFormat, LPWSTR lpDateStr, int cchDate, LPCWSTR lpCalendar); 
#line 122 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\datetimeapi.h"
#pragma endregion
#line 124
#pragma region Desktop Family or OneCore Family
#line 129
__declspec(dllimport) int __stdcall 
#line 132
GetDurationFormatEx(LPCWSTR lpLocaleName, DWORD dwFlags, const SYSTEMTIME * lpDuration, ULONGLONG ullDuration, LPCWSTR lpFormat, LPWSTR lpDurationStr, int cchDuration); 
#line 146 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\datetimeapi.h"
}
#line 143
#pragma endregion
#line 36 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnls.h"
#pragma warning(push)
#pragma warning(disable:4820)
#line 75 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnls.h"
#pragma region Application Family or OneCore or Games Family
#line 1067 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnls.h"
typedef DWORD LGRPID; 
#line 1072
typedef DWORD LCTYPE; 
#line 1077
typedef DWORD CALTYPE; 
#line 1083
typedef DWORD CALID; 
#line 1100
typedef 
#line 1096
struct _cpinfo { 
#line 1097
UINT MaxCharSize; 
#line 1098
BYTE DefaultChar[2]; 
#line 1099
BYTE LeadByte[12]; 
#line 1100
} CPINFO, *LPCPINFO; 
#line 1105
typedef DWORD GEOTYPE; 
#line 1106
typedef DWORD GEOCLASS; 
#line 1120
typedef LONG GEOID; 
#line 1125 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnls.h"
#pragma endregion
#line 1127
#pragma region Application Family or OneCore Family or Games Family
#line 1139
typedef 
#line 1132
struct _cpinfoexA { 
#line 1133
UINT MaxCharSize; 
#line 1134
BYTE DefaultChar[2]; 
#line 1135
BYTE LeadByte[12]; 
#line 1136
WCHAR UnicodeDefaultChar; 
#line 1137
UINT CodePage; 
#line 1138
CHAR CodePageName[260]; 
#line 1139
} CPINFOEXA, *LPCPINFOEXA; 
#line 1148
typedef 
#line 1141
struct _cpinfoexW { 
#line 1142
UINT MaxCharSize; 
#line 1143
BYTE DefaultChar[2]; 
#line 1144
BYTE LeadByte[12]; 
#line 1145
WCHAR UnicodeDefaultChar; 
#line 1146
UINT CodePage; 
#line 1147
WCHAR CodePageName[260]; 
#line 1148
} CPINFOEXW, *LPCPINFOEXW; 
#line 1153
typedef CPINFOEXA CPINFOEX; 
#line 1154
typedef LPCPINFOEXA LPCPINFOEX; 
#line 1158 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnls.h"
#pragma endregion
#line 1160
#pragma region Application Family or OneCore or Games Family
#line 1173
typedef 
#line 1166
struct _numberfmtA { 
#line 1167
UINT NumDigits; 
#line 1168
UINT LeadingZero; 
#line 1169
UINT Grouping; 
#line 1170
LPSTR lpDecimalSep; 
#line 1171
LPSTR lpThousandSep; 
#line 1172
UINT NegativeOrder; 
#line 1173
} NUMBERFMTA, *LPNUMBERFMTA; 
#line 1181
typedef 
#line 1174
struct _numberfmtW { 
#line 1175
UINT NumDigits; 
#line 1176
UINT LeadingZero; 
#line 1177
UINT Grouping; 
#line 1178
LPWSTR lpDecimalSep; 
#line 1179
LPWSTR lpThousandSep; 
#line 1180
UINT NegativeOrder; 
#line 1181
} NUMBERFMTW, *LPNUMBERFMTW; 
#line 1186
typedef NUMBERFMTA NUMBERFMT; 
#line 1187
typedef LPNUMBERFMTA LPNUMBERFMT; 
#line 1204 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnls.h"
typedef 
#line 1195
struct _currencyfmtA { 
#line 1196
UINT NumDigits; 
#line 1197
UINT LeadingZero; 
#line 1198
UINT Grouping; 
#line 1199
LPSTR lpDecimalSep; 
#line 1200
LPSTR lpThousandSep; 
#line 1201
UINT NegativeOrder; 
#line 1202
UINT PositiveOrder; 
#line 1203
LPSTR lpCurrencySymbol; 
#line 1204
} CURRENCYFMTA, *LPCURRENCYFMTA; 
#line 1214
typedef 
#line 1205
struct _currencyfmtW { 
#line 1206
UINT NumDigits; 
#line 1207
UINT LeadingZero; 
#line 1208
UINT Grouping; 
#line 1209
LPWSTR lpDecimalSep; 
#line 1210
LPWSTR lpThousandSep; 
#line 1211
UINT NegativeOrder; 
#line 1212
UINT PositiveOrder; 
#line 1213
LPWSTR lpCurrencySymbol; 
#line 1214
} CURRENCYFMTW, *LPCURRENCYFMTW; 
#line 1219
typedef CURRENCYFMTA CURRENCYFMT; 
#line 1220
typedef LPCURRENCYFMTA LPCURRENCYFMT; 
#line 1224 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnls.h"
#pragma endregion
#line 1226
#pragma region Application Family or OneCore Family
#line 1232
enum SYSNLS_FUNCTION { 
#line 1233
COMPARE_STRING = 1
#line 1234
}; 
#line 1235
typedef DWORD NLS_FUNCTION; 
#line 1243 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnls.h"
#pragma endregion
#line 1245
#pragma region Application Family or OneCore or Games Family
#line 1262
typedef 
#line 1256
struct _nlsversioninfo { 
#line 1257
DWORD dwNLSVersionInfoSize; 
#line 1258
DWORD dwNLSVersion; 
#line 1259
DWORD dwDefinedVersion; 
#line 1260
DWORD dwEffectiveId; 
#line 1261
GUID guidCustomVersion; 
#line 1262
} NLSVERSIONINFO, *LPNLSVERSIONINFO; 
#line 1279 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnls.h"
#pragma endregion
#line 1281
#pragma region Application Family or OneCore or Games Family
#line 1293
typedef 
#line 1287
struct _nlsversioninfoex { 
#line 1288
DWORD dwNLSVersionInfoSize; 
#line 1289
DWORD dwNLSVersion; 
#line 1290
DWORD dwDefinedVersion; 
#line 1291
DWORD dwEffectiveId; 
#line 1292
GUID guidCustomVersion; 
#line 1293
} NLSVERSIONINFOEX, *LPNLSVERSIONINFOEX; 
#line 1308 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnls.h"
enum SYSGEOTYPE { 
#line 1309
GEO_NATION = 1, 
#line 1310
GEO_LATITUDE, 
#line 1311
GEO_LONGITUDE, 
#line 1312
GEO_ISO2, 
#line 1313
GEO_ISO3, 
#line 1314
GEO_RFC1766, 
#line 1315
GEO_LCID, 
#line 1316
GEO_FRIENDLYNAME, 
#line 1317
GEO_OFFICIALNAME, 
#line 1318
GEO_TIMEZONES, 
#line 1319
GEO_OFFICIALLANGUAGES, 
#line 1320
GEO_ISO_UN_NUMBER, 
#line 1321
GEO_PARENT, 
#line 1322
GEO_DIALINGCODE, 
#line 1323
GEO_CURRENCYCODE, 
#line 1324
GEO_CURRENCYSYMBOL, 
#line 1326
GEO_NAME, 
#line 1327
GEO_ID
#line 1329 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnls.h"
}; 
#line 1335
enum SYSGEOCLASS { 
#line 1336
GEOCLASS_NATION = 16, 
#line 1337
GEOCLASS_REGION = 14, 
#line 1338
GEOCLASS_ALL = 0
#line 1339
}; 
#line 1343
typedef BOOL (__stdcall *LOCALE_ENUMPROCA)(LPSTR); 
#line 1344
typedef BOOL (__stdcall *LOCALE_ENUMPROCW)(LPWSTR); 
#line 1349 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnls.h"
#pragma endregion
#line 1351
#pragma region Desktop Family or OneCore Family
#line 1367
typedef 
#line 1359
enum _NORM_FORM { 
#line 1360
NormalizationOther, 
#line 1361
NormalizationC, 
#line 1362
NormalizationD, 
#line 1363
NormalizationKC = 5, 
#line 1365
NormalizationKD
#line 1367
} NORM_FORM; 
#line 1390 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnls.h"
typedef BOOL (__stdcall *LANGUAGEGROUP_ENUMPROCA)(LGRPID, LPSTR, LPSTR, DWORD, LONG_PTR); 
#line 1392
typedef BOOL (__stdcall *LANGGROUPLOCALE_ENUMPROCA)(LGRPID, LCID, LPSTR, LONG_PTR); 
#line 1393
typedef BOOL (__stdcall *UILANGUAGE_ENUMPROCA)(LPSTR, LONG_PTR); 
#line 1394
typedef BOOL (__stdcall *CODEPAGE_ENUMPROCA)(LPSTR); 
#line 1395
typedef BOOL (__stdcall *DATEFMT_ENUMPROCA)(LPSTR); 
#line 1396
typedef BOOL (__stdcall *DATEFMT_ENUMPROCEXA)(LPSTR, CALID); 
#line 1397
typedef BOOL (__stdcall *TIMEFMT_ENUMPROCA)(LPSTR); 
#line 1398
typedef BOOL (__stdcall *CALINFO_ENUMPROCA)(LPSTR); 
#line 1399
typedef BOOL (__stdcall *CALINFO_ENUMPROCEXA)(LPSTR, CALID); 
#line 1402
typedef BOOL (__stdcall *LANGUAGEGROUP_ENUMPROCW)(LGRPID, LPWSTR, LPWSTR, DWORD, LONG_PTR); 
#line 1404
typedef BOOL (__stdcall *LANGGROUPLOCALE_ENUMPROCW)(LGRPID, LCID, LPWSTR, LONG_PTR); 
#line 1405
typedef BOOL (__stdcall *UILANGUAGE_ENUMPROCW)(LPWSTR, LONG_PTR); 
#line 1406
typedef BOOL (__stdcall *CODEPAGE_ENUMPROCW)(LPWSTR); 
#line 1407
typedef BOOL (__stdcall *DATEFMT_ENUMPROCW)(LPWSTR); 
#line 1408
typedef BOOL (__stdcall *DATEFMT_ENUMPROCEXW)(LPWSTR, CALID); 
#line 1409
typedef BOOL (__stdcall *TIMEFMT_ENUMPROCW)(LPWSTR); 
#line 1410
typedef BOOL (__stdcall *CALINFO_ENUMPROCW)(LPWSTR); 
#line 1411
typedef BOOL (__stdcall *CALINFO_ENUMPROCEXW)(LPWSTR, CALID); 
#line 1412
typedef BOOL (__stdcall *GEO_ENUMPROC)(GEOID); 
#line 1414
typedef BOOL (__stdcall *GEO_ENUMNAMEPROC)(PWSTR, LPARAM); 
#line 1435 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnls.h"
#pragma endregion
#line 1437
#pragma region Application Family or OneCore or Games Family
#line 1448 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnls.h"
#pragma endregion
#line 1451
#pragma region Desktop Family or OneCore Family
#line 1525 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnls.h"
typedef 
#line 1511
struct _FILEMUIINFO { 
#line 1512
DWORD dwSize; 
#line 1513
DWORD dwVersion; 
#line 1514
DWORD dwFileType; 
#line 1515
BYTE pChecksum[16]; 
#line 1516
BYTE pServiceChecksum[16]; 
#line 1517
DWORD dwLanguageNameOffset; 
#line 1518
DWORD dwTypeIDMainSize; 
#line 1519
DWORD dwTypeIDMainOffset; 
#line 1520
DWORD dwTypeNameMainOffset; 
#line 1521
DWORD dwTypeIDMUISize; 
#line 1522
DWORD dwTypeIDMUIOffset; 
#line 1523
DWORD dwTypeNameMUIOffset; 
#line 1524
BYTE abBuffer[8]; 
#line 1525
} FILEMUIINFO, *PFILEMUIINFO; 
#line 1528 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnls.h"
#pragma endregion
#line 1530
#pragma region Application Family or OneCore or Games Family
#line 22 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\stringapiset.h"
extern "C" {
#line 25 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\stringapiset.h"
#pragma region Desktop or OneCore or Application or Games Family
#line 30
__declspec(dllimport) int __stdcall 
#line 33
CompareStringEx(LPCWSTR lpLocaleName, DWORD dwCmpFlags, LPCWCH lpString1, int cchCount1, LPCWCH lpString2, int cchCount2, LPNLSVERSIONINFO lpVersionInformation, LPVOID lpReserved, LPARAM lParam); 
#line 45
__declspec(dllimport) int __stdcall 
#line 48
CompareStringOrdinal(LPCWCH lpString1, int cchCount1, LPCWCH lpString2, int cchCount2, BOOL bIgnoreCase); 
#line 58 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\stringapiset.h"
__declspec(dllimport) int __stdcall 
#line 61
CompareStringW(LCID Locale, DWORD dwCmpFlags, PCNZWCH lpString1, int cchCount1, PCNZWCH lpString2, int cchCount2); 
#line 73
__declspec(dllimport) int __stdcall 
#line 76
FoldStringW(DWORD dwMapFlags, LPCWCH lpSrcStr, int cchSrc, LPWSTR lpDestStr, int cchDest); 
#line 87
__declspec(dllimport) BOOL __stdcall 
#line 90
GetStringTypeExW(LCID Locale, DWORD dwInfoType, LPCWCH lpSrcStr, int cchSrc, LPWORD lpCharType); 
#line 101
__declspec(dllimport) BOOL __stdcall 
#line 104
GetStringTypeW(DWORD dwInfoType, LPCWCH lpSrcStr, int cchSrc, LPWORD lpCharType); 
#line 115
__declspec(dllimport) int __stdcall 
#line 120
MultiByteToWideChar(UINT CodePage, DWORD dwFlags, LPCCH lpMultiByteStr, int cbMultiByte, LPWSTR lpWideCharStr, int cchWideChar); 
#line 129
__declspec(dllimport) int __stdcall 
#line 134
WideCharToMultiByte(UINT CodePage, DWORD dwFlags, LPCWCH lpWideCharStr, int cchWideChar, LPSTR lpMultiByteStr, int cbMultiByte, LPCCH lpDefaultChar, LPBOOL lpUsedDefaultChar); 
#line 149 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\stringapiset.h"
}
#line 146
#pragma endregion
#line 1538 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnls.h"
#pragma endregion
#line 1540
#pragma region Desktop Family or OneCore Family
#line 1603 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnls.h"
#pragma endregion
#line 1605
#pragma region Application Family or OneCore or Games Family
#line 1614
__declspec(dllimport) BOOL __stdcall 
#line 1617
IsValidCodePage(UINT CodePage); 
#line 1620
__declspec(dllimport) UINT __stdcall 
#line 1623
GetACP(); 
#line 1626 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnls.h"
#pragma endregion
#line 1628
#pragma region Desktop Family or OneCore Family
#line 1631
__declspec(dllimport) UINT __stdcall 
#line 1634
GetOEMCP(); 
#line 1637 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnls.h"
#pragma endregion
#line 1639
#pragma region Desktop or Pc Family or OneCore or Games Family
#line 1643
__declspec(dllimport) BOOL __stdcall 
#line 1646
GetCPInfo(UINT CodePage, LPCPINFO lpCPInfo); 
#line 1651 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnls.h"
#pragma endregion
#line 1653
#pragma region Desktop or Pc Family or OneCore Family or Games Family
#line 1657
__declspec(dllimport) BOOL __stdcall 
#line 1660
GetCPInfoExA(UINT CodePage, DWORD dwFlags, LPCPINFOEXA lpCPInfoEx); 
#line 1665
__declspec(dllimport) BOOL __stdcall 
#line 1668
GetCPInfoExW(UINT CodePage, DWORD dwFlags, LPCPINFOEXW lpCPInfoEx); 
#line 1679 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnls.h"
#pragma endregion
#line 1685
#pragma region Desktop or OneCore or Application or Games Family
#line 1689
__declspec(dllimport) int __stdcall 
#line 1692
CompareStringA(LCID Locale, DWORD dwCmpFlags, PCNZCH lpString1, int cchCount1, PCNZCH lpString2, int cchCount2); 
#line 1734 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnls.h"
#pragma endregion
#line 1736
#pragma region Application or OneCore or Games Family
#line 1742
__declspec(dllimport) int __stdcall 
#line 1745
FindNLSString(LCID Locale, DWORD dwFindNLSStringFlags, LPCWSTR lpStringSource, int cchSource, LPCWSTR lpStringValue, int cchValue, LPINT pcchFound); 
#line 1757 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnls.h"
#pragma endregion
#line 1759
#pragma region Desktop or OneCore or Games Family
#line 1763
__declspec(dllimport) int __stdcall 
#line 1766
LCMapStringW(LCID Locale, DWORD dwMapFlags, LPCWSTR lpSrcStr, int cchSrc, LPWSTR lpDestStr, int cchDest); 
#line 1778
__declspec(dllimport) int __stdcall 
#line 1781
LCMapStringA(LCID Locale, DWORD dwMapFlags, LPCSTR lpSrcStr, int cchSrc, LPSTR lpDestStr, int cchDest); 
#line 1793 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnls.h"
#pragma endregion
#line 1795
#pragma region Application Family or OneCore or Games Family
#line 1799
__declspec(dllimport) int __stdcall 
#line 1802
GetLocaleInfoW(LCID Locale, LCTYPE LCType, LPWSTR lpLCData, int cchData); 
#line 1813
__declspec(dllimport) int __stdcall 
#line 1816
GetLocaleInfoA(LCID Locale, LCTYPE LCType, LPSTR lpLCData, int cchData); 
#line 1828 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnls.h"
#pragma endregion
#line 1830
#pragma region Application or OneCore Family
#line 1833
__declspec(dllimport) BOOL __stdcall 
#line 1836
SetLocaleInfoA(LCID Locale, LCTYPE LCType, LPCSTR lpLCData); 
#line 1840
__declspec(dllimport) BOOL __stdcall 
#line 1843
SetLocaleInfoW(LCID Locale, LCTYPE LCType, LPCWSTR lpLCData); 
#line 1856 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnls.h"
__declspec(dllimport) int __stdcall 
#line 1859
GetCalendarInfoA(LCID Locale, CALID Calendar, CALTYPE CalType, LPSTR lpCalData, int cchData, LPDWORD lpValue); 
#line 1867
__declspec(dllimport) int __stdcall 
#line 1870
GetCalendarInfoW(LCID Locale, CALID Calendar, CALTYPE CalType, LPWSTR lpCalData, int cchData, LPDWORD lpValue); 
#line 1883 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnls.h"
__declspec(dllimport) BOOL __stdcall 
#line 1886
SetCalendarInfoA(LCID Locale, CALID Calendar, CALTYPE CalType, LPCSTR lpCalData); 
#line 1891
__declspec(dllimport) BOOL __stdcall 
#line 1894
SetCalendarInfoW(LCID Locale, CALID Calendar, CALTYPE CalType, LPCWSTR lpCalData); 
#line 1907 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnls.h"
#pragma endregion
#line 1909
#pragma region Desktop Family
#line 1922
__declspec(dllimport) BOOL __stdcall 
#line 1925
LoadStringByReference(DWORD Flags, PCWSTR Language, PCWSTR SourceString, PWSTR Buffer, ULONG cchBuffer, PCWSTR Directory, PULONG pcchBufferOut); 
#line 1938 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnls.h"
#pragma endregion
#line 1940
#pragma region Application Family or OneCore Family
#line 1944
__declspec(dllimport) BOOL __stdcall 
#line 1947
IsDBCSLeadByte(BYTE TestChar); 
#line 1952
__declspec(dllimport) BOOL __stdcall 
#line 1955
IsDBCSLeadByteEx(UINT CodePage, BYTE TestChar); 
#line 1961 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnls.h"
#pragma endregion
#line 1963
#pragma region Application Family or OneCore or Games Family
#line 1970
__declspec(dllimport) LCID __stdcall 
#line 1973
LocaleNameToLCID(LPCWSTR lpName, DWORD dwFlags); 
#line 1979
__declspec(dllimport) int __stdcall 
#line 1982
LCIDToLocaleName(LCID Locale, LPWSTR lpName, int cchName, DWORD dwFlags); 
#line 1991 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnls.h"
#pragma endregion
#line 1993
#pragma region Desktop Family
#line 1998
__declspec(dllimport) int __stdcall 
#line 2001
GetDurationFormat(LCID Locale, DWORD dwFlags, const SYSTEMTIME * lpDuration, ULONGLONG ullDuration, LPCWSTR lpFormat, LPWSTR lpDurationStr, int cchDuration); 
#line 2012 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnls.h"
#pragma endregion
#line 2014
#pragma region Desktop Family or OneCore or Games Family
#line 2018
__declspec(dllimport) int __stdcall 
#line 2021
GetNumberFormatA(LCID Locale, DWORD dwFlags, LPCSTR lpValue, const NUMBERFMTA * lpFormat, LPSTR lpNumberStr, int cchNumber); 
#line 2029
__declspec(dllimport) int __stdcall 
#line 2032
GetNumberFormatW(LCID Locale, DWORD dwFlags, LPCWSTR lpValue, const NUMBERFMTW * lpFormat, LPWSTR lpNumberStr, int cchNumber); 
#line 2046 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnls.h"
__declspec(dllimport) int __stdcall 
#line 2049
GetCurrencyFormatA(LCID Locale, DWORD dwFlags, LPCSTR lpValue, const CURRENCYFMTA * lpFormat, LPSTR lpCurrencyStr, int cchCurrency); 
#line 2057
__declspec(dllimport) int __stdcall 
#line 2060
GetCurrencyFormatW(LCID Locale, DWORD dwFlags, LPCWSTR lpValue, const CURRENCYFMTW * lpFormat, LPWSTR lpCurrencyStr, int cchCurrency); 
#line 2074 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnls.h"
#pragma endregion
#line 2076
#pragma region Desktop Family or OneCore Family
#line 2080
__declspec(dllimport) BOOL __stdcall 
#line 2083
EnumCalendarInfoA(CALINFO_ENUMPROCA lpCalInfoEnumProc, LCID Locale, CALID Calendar, CALTYPE CalType); 
#line 2089
__declspec(dllimport) BOOL __stdcall 
#line 2092
EnumCalendarInfoW(CALINFO_ENUMPROCW lpCalInfoEnumProc, LCID Locale, CALID Calendar, CALTYPE CalType); 
#line 2105 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnls.h"
__declspec(dllimport) BOOL __stdcall 
#line 2108
EnumCalendarInfoExA(CALINFO_ENUMPROCEXA lpCalInfoEnumProcEx, LCID Locale, CALID Calendar, CALTYPE CalType); 
#line 2114
__declspec(dllimport) BOOL __stdcall 
#line 2117
EnumCalendarInfoExW(CALINFO_ENUMPROCEXW lpCalInfoEnumProcEx, LCID Locale, CALID Calendar, CALTYPE CalType); 
#line 2130 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnls.h"
__declspec(dllimport) BOOL __stdcall 
#line 2133
EnumTimeFormatsA(TIMEFMT_ENUMPROCA lpTimeFmtEnumProc, LCID Locale, DWORD dwFlags); 
#line 2138
__declspec(dllimport) BOOL __stdcall 
#line 2141
EnumTimeFormatsW(TIMEFMT_ENUMPROCW lpTimeFmtEnumProc, LCID Locale, DWORD dwFlags); 
#line 2152 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnls.h"
__declspec(dllimport) BOOL __stdcall 
#line 2155
EnumDateFormatsA(DATEFMT_ENUMPROCA lpDateFmtEnumProc, LCID Locale, DWORD dwFlags); 
#line 2160
__declspec(dllimport) BOOL __stdcall 
#line 2163
EnumDateFormatsW(DATEFMT_ENUMPROCW lpDateFmtEnumProc, LCID Locale, DWORD dwFlags); 
#line 2175 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnls.h"
__declspec(dllimport) BOOL __stdcall 
#line 2178
EnumDateFormatsExA(DATEFMT_ENUMPROCEXA lpDateFmtEnumProcEx, LCID Locale, DWORD dwFlags); 
#line 2183
__declspec(dllimport) BOOL __stdcall 
#line 2186
EnumDateFormatsExW(DATEFMT_ENUMPROCEXW lpDateFmtEnumProcEx, LCID Locale, DWORD dwFlags); 
#line 2198 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnls.h"
#pragma endregion
#line 2200
#pragma region Application Family or OneCore Family
#line 2205
__declspec(dllimport) BOOL __stdcall 
#line 2208
IsValidLanguageGroup(LGRPID LanguageGroup, DWORD dwFlags); 
#line 2214 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnls.h"
__declspec(dllimport) BOOL __stdcall 
#line 2217
GetNLSVersion(NLS_FUNCTION Function, LCID Locale, LPNLSVERSIONINFO lpVersionInformation); 
#line 2223 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnls.h"
#pragma endregion
#line 2225
#pragma region Desktop Family or OneCore Family
#line 2229
__declspec(dllimport) BOOL __stdcall 
#line 2232
IsValidLocale(LCID Locale, DWORD dwFlags); 
#line 2237 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnls.h"
#pragma endregion
#line 2239
#pragma region Application Family or OneCore or Games Family
#line 2244
__declspec(dllimport) int __stdcall 
#line 2247
GetGeoInfoA(GEOID Location, GEOTYPE GeoType, LPSTR lpGeoData, int cchData, LANGID LangId); 
#line 2255
__declspec(dllimport) int __stdcall 
#line 2258
GetGeoInfoW(GEOID Location, GEOTYPE GeoType, LPWSTR lpGeoData, int cchData, LANGID LangId); 
#line 2271 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnls.h"
__declspec(dllimport) int __stdcall 
#line 2274
GetGeoInfoEx(PWSTR location, GEOTYPE geoType, PWSTR geoData, int geoDataCount); 
#line 2282 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnls.h"
#pragma endregion
#line 2284
#pragma region Desktop or PC Family or OneCore Family
#line 2289
__declspec(dllimport) BOOL __stdcall 
#line 2292
EnumSystemGeoID(GEOCLASS GeoClass, GEOID ParentGeoId, GEO_ENUMPROC lpGeoEnumProc); 
#line 2298
__declspec(dllimport) BOOL __stdcall 
#line 2301
EnumSystemGeoNames(GEOCLASS geoClass, GEO_ENUMNAMEPROC geoEnumProc, LPARAM data); 
#line 2308 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnls.h"
#pragma endregion
#line 2310
#pragma region Application Family or OneCore or Games Family
#line 2315
__declspec(dllimport) GEOID __stdcall 
#line 2318
GetUserGeoID(GEOCLASS GeoClass); 
#line 2326
__declspec(dllimport) int __stdcall 
#line 2329
GetUserDefaultGeoName(LPWSTR geoName, int geoNameCount); 
#line 2335 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnls.h"
#pragma endregion
#line 2337
#pragma region Desktop Family or OneCore Family
#line 2343
__declspec(dllimport) BOOL __stdcall 
#line 2346
SetUserGeoID(GEOID GeoId); 
#line 2351
__declspec(dllimport) BOOL __stdcall 
#line 2354
SetUserGeoName(PWSTR geoName); 
#line 2359 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnls.h"
__declspec(dllimport) LCID __stdcall 
#line 2362
ConvertDefaultLocale(LCID Locale); 
#line 2367
__declspec(dllimport) LANGID __stdcall 
#line 2370
GetSystemDefaultUILanguage(); 
#line 2374 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnls.h"
#pragma endregion
#line 2376
#pragma region Application Family or OneCore Family
#line 2380
__declspec(dllimport) LCID __stdcall 
#line 2383
GetThreadLocale(); 
#line 2385
__declspec(dllimport) BOOL __stdcall 
#line 2388
SetThreadLocale(LCID Locale); 
#line 2394 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnls.h"
#pragma endregion
#line 2396
#pragma region Application Family or OneCore Family
#line 2400
__declspec(dllimport) LANGID __stdcall 
#line 2403
GetUserDefaultUILanguage(); 
#line 2407 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnls.h"
__declspec(dllimport) LANGID __stdcall 
#line 2410
GetUserDefaultLangID(); 
#line 2413 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnls.h"
#pragma endregion
#line 2415
#pragma region Desktop Family or OneCore Family
#line 2419
__declspec(dllimport) LANGID __stdcall 
#line 2422
GetSystemDefaultLangID(); 
#line 2425
__declspec(dllimport) LCID __stdcall 
#line 2428
GetSystemDefaultLCID(); 
#line 2431
__declspec(dllimport) LCID __stdcall 
#line 2434
GetUserDefaultLCID(); 
#line 2437 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnls.h"
#pragma endregion
#line 2439
#pragma region Desktop Family
#line 2444 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnls.h"
#pragma endregion
#line 2446
#pragma region Desktop Family or OneCore Family
#line 2449
__declspec(dllimport) LANGID __stdcall 
#line 2452
SetThreadUILanguage(LANGID LangId); 
#line 2457
__declspec(dllimport) LANGID __stdcall 
#line 2460
GetThreadUILanguage(); 
#line 2462
__declspec(dllimport) BOOL __stdcall 
#line 2465
GetProcessPreferredUILanguages(DWORD dwFlags, PULONG pulNumLanguages, PZZWSTR pwszLanguagesBuffer, PULONG pcchLanguagesBuffer); 
#line 2473
__declspec(dllimport) BOOL __stdcall 
#line 2476
SetProcessPreferredUILanguages(DWORD dwFlags, PCZZWSTR pwszLanguagesBuffer, PULONG pulNumLanguages); 
#line 2484 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnls.h"
#pragma endregion
#line 2486
#pragma region Desktop Family or Phone Family or OneCore or Games Family
#line 2490
__declspec(dllimport) BOOL __stdcall 
#line 2493
GetUserPreferredUILanguages(DWORD dwFlags, PULONG pulNumLanguages, PZZWSTR pwszLanguagesBuffer, PULONG pcchLanguagesBuffer); 
#line 2503 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnls.h"
#pragma endregion
#line 2505
#pragma region Application Family or OneCore Family
#line 2510
__declspec(dllimport) BOOL __stdcall 
#line 2513
GetSystemPreferredUILanguages(DWORD dwFlags, PULONG pulNumLanguages, PZZWSTR pwszLanguagesBuffer, PULONG pcchLanguagesBuffer); 
#line 2521
__declspec(dllimport) BOOL __stdcall 
#line 2524
GetThreadPreferredUILanguages(DWORD dwFlags, PULONG pulNumLanguages, PZZWSTR pwszLanguagesBuffer, PULONG pcchLanguagesBuffer); 
#line 2532
__declspec(dllimport) BOOL __stdcall 
#line 2535
SetThreadPreferredUILanguages(DWORD dwFlags, PCZZWSTR pwszLanguagesBuffer, PULONG pulNumLanguages); 
#line 2541
__declspec(dllimport) BOOL __stdcall 
#line 2545
GetFileMUIInfo(DWORD dwFlags, PCWSTR pcwszFilePath, PFILEMUIINFO pFileMUIInfo, DWORD * pcbFileMUIInfo); 
#line 2551
__declspec(dllimport) BOOL __stdcall 
#line 2554
GetFileMUIPath(DWORD dwFlags, PCWSTR pcwszFilePath, PWSTR pwszLanguage, PULONG pcchLanguage, PWSTR pwszFileMUIPath, PULONG pcchFileMUIPath, PULONGLONG pululEnumerator); 
#line 2565
__declspec(dllimport) BOOL __stdcall 
#line 2568
GetUILanguageInfo(DWORD dwFlags, PCZZWSTR pwmszLanguage, PZZWSTR pwszFallbackLanguages, PDWORD pcchFallbackLanguages, PDWORD pAttributes); 
#line 2579 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnls.h"
#pragma endregion
#line 2581
#pragma region Desktop Family or OneCore Family
#line 2586
struct HSAVEDUILANGUAGES__ { int unused; }; typedef HSAVEDUILANGUAGES__ *HSAVEDUILANGUAGES; 
#line 2588
__declspec(dllimport) BOOL __stdcall 
#line 2591
SetThreadPreferredUILanguages2(ULONG flags, PCZZWSTR languages, PULONG numLanguagesSet, HSAVEDUILANGUAGES * snapshot); 
#line 2597
__declspec(dllimport) void __stdcall 
#line 2600
RestoreThreadPreferredUILanguages(const HSAVEDUILANGUAGES snapshot); 
#line 2605 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnls.h"
#pragma endregion
#line 2607
#pragma region Desktop Family
#line 2612
__declspec(dllimport) BOOL __stdcall 
#line 2615
NotifyUILanguageChange(DWORD dwFlags, PCWSTR pcwstrNewLanguage, PCWSTR pcwstrPreviousLanguage, DWORD dwReserved, PDWORD pdwStatusRtrn); 
#line 2626 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnls.h"
#pragma endregion
#line 2633
#pragma region Desktop or OneCore or Application or Games Family
#line 2636
__declspec(dllimport) BOOL __stdcall 
#line 2639
GetStringTypeExA(LCID Locale, DWORD dwInfoType, LPCSTR lpSrcStr, int cchSrc, LPWORD lpCharType); 
#line 2661 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnls.h"
__declspec(dllimport) BOOL __stdcall 
#line 2664
GetStringTypeA(LCID Locale, DWORD dwInfoType, LPCSTR lpSrcStr, int cchSrc, LPWORD lpCharType); 
#line 2671
__declspec(dllimport) int __stdcall 
#line 2674
FoldStringA(DWORD dwMapFlags, LPCSTR lpSrcStr, int cchSrc, LPSTR lpDestStr, int cchDest); 
#line 2685 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnls.h"
#pragma endregion
#line 2687
#pragma region Desktop Family or OneCore or Games Family
#line 2693
__declspec(dllimport) BOOL __stdcall 
#line 2696
EnumSystemLocalesA(LOCALE_ENUMPROCA lpLocaleEnumProc, DWORD dwFlags); 
#line 2700
__declspec(dllimport) BOOL __stdcall 
#line 2703
EnumSystemLocalesW(LOCALE_ENUMPROCW lpLocaleEnumProc, DWORD dwFlags); 
#line 2715 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnls.h"
#pragma endregion
#line 2717
#pragma region Desktop Family or OneCore Family
#line 2723
__declspec(dllimport) BOOL __stdcall 
#line 2726
EnumSystemLanguageGroupsA(LANGUAGEGROUP_ENUMPROCA lpLanguageGroupEnumProc, DWORD dwFlags, LONG_PTR lParam); 
#line 2731
__declspec(dllimport) BOOL __stdcall 
#line 2734
EnumSystemLanguageGroupsW(LANGUAGEGROUP_ENUMPROCW lpLanguageGroupEnumProc, DWORD dwFlags, LONG_PTR lParam); 
#line 2745 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnls.h"
__declspec(dllimport) BOOL __stdcall 
#line 2748
EnumLanguageGroupLocalesA(LANGGROUPLOCALE_ENUMPROCA lpLangGroupLocaleEnumProc, LGRPID LanguageGroup, DWORD dwFlags, LONG_PTR lParam); 
#line 2754
__declspec(dllimport) BOOL __stdcall 
#line 2757
EnumLanguageGroupLocalesW(LANGGROUPLOCALE_ENUMPROCW lpLangGroupLocaleEnumProc, LGRPID LanguageGroup, DWORD dwFlags, LONG_PTR lParam); 
#line 2769 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnls.h"
#pragma endregion
#line 2771
#pragma region Application Family or OneCore Family
#line 2775
__declspec(dllimport) BOOL __stdcall 
#line 2778
EnumUILanguagesA(UILANGUAGE_ENUMPROCA lpUILanguageEnumProc, DWORD dwFlags, LONG_PTR lParam); 
#line 2783
__declspec(dllimport) BOOL __stdcall 
#line 2786
EnumUILanguagesW(UILANGUAGE_ENUMPROCW lpUILanguageEnumProc, DWORD dwFlags, LONG_PTR lParam); 
#line 2799 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnls.h"
#pragma endregion
#line 2801
#pragma region Desktop or PC Family or OneCore Family
#line 2805
__declspec(dllimport) BOOL __stdcall 
#line 2808
EnumSystemCodePagesA(CODEPAGE_ENUMPROCA lpCodePageEnumProc, DWORD dwFlags); 
#line 2812
__declspec(dllimport) BOOL __stdcall 
#line 2815
EnumSystemCodePagesW(CODEPAGE_ENUMPROCW lpCodePageEnumProc, DWORD dwFlags); 
#line 2825 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnls.h"
#pragma endregion
#line 2831
#pragma region Application Family or OneCore or Games Family
#line 2839
__declspec(dllimport) int __stdcall 
#line 2841
IdnToAscii(DWORD dwFlags, LPCWSTR lpUnicodeCharStr, int cchUnicodeChar, LPWSTR lpASCIICharStr, int cchASCIIChar); 
#line 2847
__declspec(dllimport) int __stdcall 
#line 2849
IdnToUnicode(DWORD dwFlags, LPCWSTR lpASCIICharStr, int cchASCIIChar, LPWSTR lpUnicodeCharStr, int cchUnicodeChar); 
#line 2855
__declspec(dllimport) int __stdcall 
#line 2857
IdnToNameprepUnicode(DWORD dwFlags, LPCWSTR lpUnicodeCharStr, int cchUnicodeChar, LPWSTR lpNameprepCharStr, int cchNameprepChar); 
#line 2866 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnls.h"
#pragma endregion
#line 2868
#pragma region Application Family or OneCore Family
#line 2873
__declspec(dllimport) int __stdcall 
#line 2875
NormalizeString(NORM_FORM NormForm, LPCWSTR lpSrcString, int cwSrcLength, LPWSTR lpDstString, int cwDstLength); 
#line 2881
__declspec(dllimport) BOOL __stdcall 
#line 2883
IsNormalizedString(NORM_FORM NormForm, LPCWSTR lpString, int cwLength); 
#line 2887
__declspec(dllimport) BOOL __stdcall 
#line 2889
VerifyScripts(DWORD dwFlags, LPCWSTR lpLocaleScripts, int cchLocaleScripts, LPCWSTR lpTestScripts, int cchTestScripts); 
#line 2896
__declspec(dllimport) int __stdcall 
#line 2898
GetStringScripts(DWORD dwFlags, LPCWSTR lpString, int cchString, LPWSTR lpScripts, int cchScripts); 
#line 2908 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnls.h"
#pragma endregion
#line 2912
#pragma region Application Family or OneCore or Games Family
#line 2923
__declspec(dllimport) int __stdcall 
#line 2926
GetLocaleInfoEx(LPCWSTR lpLocaleName, LCTYPE LCType, LPWSTR lpLCData, int cchData); 
#line 2934 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnls.h"
#pragma endregion
#line 2936
#pragma region Desktop or PC Family or OneCore Family
#line 2939
__declspec(dllimport) int __stdcall 
#line 2942
GetCalendarInfoEx(LPCWSTR lpLocaleName, CALID Calendar, LPCWSTR lpReserved, CALTYPE CalType, LPWSTR lpCalData, int cchData, LPDWORD lpValue); 
#line 2953 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnls.h"
#pragma endregion
#line 2955
#pragma region Application Family
#line 2974 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnls.h"
#pragma endregion
#line 2976
#pragma region Application Family or OneCore Family
#line 2979
__declspec(dllimport) int __stdcall 
#line 2982
GetNumberFormatEx(LPCWSTR lpLocaleName, DWORD dwFlags, LPCWSTR lpValue, const NUMBERFMTW * lpFormat, LPWSTR lpNumberStr, int cchNumber); 
#line 2991
__declspec(dllimport) int __stdcall 
#line 2994
GetCurrencyFormatEx(LPCWSTR lpLocaleName, DWORD dwFlags, LPCWSTR lpValue, const CURRENCYFMTW * lpFormat, LPWSTR lpCurrencyStr, int cchCurrency); 
#line 3003
__declspec(dllimport) int __stdcall 
#line 3006
GetUserDefaultLocaleName(LPWSTR lpLocaleName, int cchLocaleName); 
#line 3012 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnls.h"
#pragma endregion
#line 3014
#pragma region Desktop or PC Family or OneCore Family
#line 3017
__declspec(dllimport) int __stdcall 
#line 3020
GetSystemDefaultLocaleName(LPWSTR lpLocaleName, int cchLocaleName); 
#line 3025
__declspec(dllimport) BOOL __stdcall 
#line 3028
IsNLSDefinedString(NLS_FUNCTION Function, DWORD dwFlags, LPNLSVERSIONINFO lpVersionInformation, LPCWSTR lpString, INT cchStr); 
#line 3035
__declspec(dllimport) BOOL __stdcall 
#line 3038
GetNLSVersionEx(NLS_FUNCTION function, LPCWSTR lpLocaleName, LPNLSVERSIONINFOEX lpVersionInformation); 
#line 3045
__declspec(dllimport) DWORD __stdcall 
#line 3048
IsValidNLSVersion(NLS_FUNCTION function, LPCWSTR lpLocaleName, LPNLSVERSIONINFOEX lpVersionInformation); 
#line 3056 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnls.h"
#pragma endregion
#line 3058
#pragma region Application Family or OneCore or Gamaes Family
#line 3061
__declspec(dllimport) int __stdcall 
#line 3064
FindNLSStringEx(LPCWSTR lpLocaleName, DWORD dwFindNLSStringFlags, LPCWSTR lpStringSource, int cchSource, LPCWSTR lpStringValue, int cchValue, LPINT pcchFound, LPNLSVERSIONINFO lpVersionInformation, LPVOID lpReserved, LPARAM sortHandle); 
#line 3084 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnls.h"
__declspec(dllimport) int __stdcall 
#line 3087
LCMapStringEx(LPCWSTR lpLocaleName, DWORD dwMapFlags, LPCWSTR lpSrcStr, int cchSrc, LPWSTR lpDestStr, int cchDest, LPNLSVERSIONINFO lpVersionInformation, LPVOID lpReserved, LPARAM sortHandle); 
#line 3099
__declspec(dllimport) BOOL __stdcall 
#line 3102
IsValidLocaleName(LPCWSTR lpLocaleName); 
#line 3107 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnls.h"
#pragma endregion
#line 3109
#pragma region Desktop or PC Family or OneCore Family
#line 3112
typedef BOOL (__stdcall *CALINFO_ENUMPROCEXEX)(LPWSTR, CALID, LPWSTR, LPARAM); 
#line 3114
__declspec(dllimport) BOOL __stdcall 
#line 3117
EnumCalendarInfoExEx(CALINFO_ENUMPROCEXEX pCalInfoEnumProcExEx, LPCWSTR lpLocaleName, CALID Calendar, LPCWSTR lpReserved, CALTYPE CalType, LPARAM lParam); 
#line 3126
typedef BOOL (__stdcall *DATEFMT_ENUMPROCEXEX)(LPWSTR, CALID, LPARAM); 
#line 3128
__declspec(dllimport) BOOL __stdcall 
#line 3131
EnumDateFormatsExEx(DATEFMT_ENUMPROCEXEX lpDateFmtEnumProcExEx, LPCWSTR lpLocaleName, DWORD dwFlags, LPARAM lParam); 
#line 3138
typedef BOOL (__stdcall *TIMEFMT_ENUMPROCEX)(LPWSTR, LPARAM); 
#line 3140
__declspec(dllimport) BOOL __stdcall 
#line 3143
EnumTimeFormatsEx(TIMEFMT_ENUMPROCEX lpTimeFmtEnumProcEx, LPCWSTR lpLocaleName, DWORD dwFlags, LPARAM lParam); 
#line 3151 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnls.h"
#pragma endregion
#line 3153
#pragma region Desktop or PC Family or OneCore or Games Family
#line 3156
typedef BOOL (__stdcall *LOCALE_ENUMPROCEX)(LPWSTR, DWORD, LPARAM); 
#line 3158
__declspec(dllimport) BOOL __stdcall 
#line 3161
EnumSystemLocalesEx(LOCALE_ENUMPROCEX lpLocaleEnumProcEx, DWORD dwFlags, LPARAM lParam, LPVOID lpReserved); 
#line 3169 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnls.h"
#pragma endregion
#line 3175 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnls.h"
#pragma region Application Family or OneCore or Games Family
#line 3178
__declspec(dllimport) int __stdcall 
#line 3181
ResolveLocaleName(LPCWSTR lpNameToResolve, LPWSTR lpLocaleName, int cchLocaleName); 
#line 3210 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnls.h"
}
#line 3188 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnls.h"
#pragma endregion
#line 3192 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnls.h"
#pragma region Desktop Family
#line 3197 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnls.h"
#pragma endregion
#line 3206 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnls.h"
#pragma warning(pop)
#line 30 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\wincon.h"
extern "C" {
#line 34 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\wincon.h"
#pragma warning(push)
#pragma warning(disable:4820)
#line 30 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\wincontypes.h"
extern "C" {
#line 33 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\wincontypes.h"
#pragma region Application Family
#line 39
typedef 
#line 36
struct _COORD { 
#line 37
SHORT X; 
#line 38
SHORT Y; 
#line 39
} COORD, *PCOORD; 
#line 46
typedef 
#line 41
struct _SMALL_RECT { 
#line 42
SHORT Left; 
#line 43
SHORT Top; 
#line 44
SHORT Right; 
#line 45
SHORT Bottom; 
#line 46
} SMALL_RECT, *PSMALL_RECT; 
#line 58
typedef 
#line 48
struct _KEY_EVENT_RECORD { 
#line 49
BOOL bKeyDown; 
#line 50
WORD wRepeatCount; 
#line 51
WORD wVirtualKeyCode; 
#line 52
WORD wVirtualScanCode; 
#line 53
union { 
#line 54
WCHAR UnicodeChar; 
#line 55
CHAR AsciiChar; 
#line 56
} uChar; 
#line 57
DWORD dwControlKeyState; 
#line 58
} KEY_EVENT_RECORD, *PKEY_EVENT_RECORD; 
#line 87
typedef 
#line 82
struct _MOUSE_EVENT_RECORD { 
#line 83
COORD dwMousePosition; 
#line 84
DWORD dwButtonState; 
#line 85
DWORD dwControlKeyState; 
#line 86
DWORD dwEventFlags; 
#line 87
} MOUSE_EVENT_RECORD, *PMOUSE_EVENT_RECORD; 
#line 112 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\wincontypes.h"
typedef 
#line 110
struct _WINDOW_BUFFER_SIZE_RECORD { 
#line 111
COORD dwSize; 
#line 112
} WINDOW_BUFFER_SIZE_RECORD, *PWINDOW_BUFFER_SIZE_RECORD; 
#line 116
typedef 
#line 114
struct _MENU_EVENT_RECORD { 
#line 115
UINT dwCommandId; 
#line 116
} MENU_EVENT_RECORD, *PMENU_EVENT_RECORD; 
#line 120
typedef 
#line 118
struct _FOCUS_EVENT_RECORD { 
#line 119
BOOL bSetFocus; 
#line 120
} FOCUS_EVENT_RECORD, *PFOCUS_EVENT_RECORD; 
#line 131
typedef 
#line 122
struct _INPUT_RECORD { 
#line 123
WORD EventType; 
#line 124
union { 
#line 125
KEY_EVENT_RECORD KeyEvent; 
#line 126
MOUSE_EVENT_RECORD MouseEvent; 
#line 127
WINDOW_BUFFER_SIZE_RECORD WindowBufferSizeEvent; 
#line 128
MENU_EVENT_RECORD MenuEvent; 
#line 129
FOCUS_EVENT_RECORD FocusEvent; 
#line 130
} Event; 
#line 131
} INPUT_RECORD, *PINPUT_RECORD; 
#line 149
typedef 
#line 143
struct _CHAR_INFO { 
#line 144
union { 
#line 145
WCHAR UnicodeChar; 
#line 146
CHAR AsciiChar; 
#line 147
} Char; 
#line 148
WORD Attributes; 
#line 149
} CHAR_INFO, *PCHAR_INFO; 
#line 154
typedef 
#line 151
struct _CONSOLE_FONT_INFO { 
#line 152
DWORD nFont; 
#line 153
COORD dwFontSize; 
#line 154
} CONSOLE_FONT_INFO, *PCONSOLE_FONT_INFO; 
#line 156
typedef void *HPCON; 
#line 162 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\wincontypes.h"
}
#line 159
#pragma endregion
#line 25 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\consoleapi.h"
extern "C" {
#line 28 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\consoleapi.h"
#pragma region Application Family or OneCore Family
#line 31
__declspec(dllimport) BOOL __stdcall 
#line 34
AllocConsole(); 
#line 38
__declspec(dllimport) BOOL __stdcall 
#line 41
FreeConsole(); 
#line 47
__declspec(dllimport) BOOL __stdcall 
#line 50
AttachConsole(DWORD dwProcessId); 
#line 58 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\consoleapi.h"
__declspec(dllimport) UINT __stdcall 
#line 61
GetConsoleCP(); 
#line 65
__declspec(dllimport) UINT __stdcall 
#line 68
GetConsoleOutputCP(); 
#line 97
__declspec(dllimport) BOOL __stdcall 
#line 100
GetConsoleMode(HANDLE hConsoleHandle, LPDWORD lpMode); 
#line 105
__declspec(dllimport) BOOL __stdcall 
#line 108
SetConsoleMode(HANDLE hConsoleHandle, DWORD dwMode); 
#line 113
__declspec(dllimport) BOOL __stdcall 
#line 116
GetNumberOfConsoleInputEvents(HANDLE hConsoleInput, LPDWORD lpNumberOfEvents); 
#line 121
__declspec(dllimport) BOOL __stdcall 
#line 125
ReadConsoleInputA(HANDLE hConsoleInput, PINPUT_RECORD lpBuffer, DWORD nLength, LPDWORD lpNumberOfEventsRead); 
#line 132
__declspec(dllimport) BOOL __stdcall 
#line 136
ReadConsoleInputW(HANDLE hConsoleInput, PINPUT_RECORD lpBuffer, DWORD nLength, LPDWORD lpNumberOfEventsRead); 
#line 156 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\consoleapi.h"
__declspec(dllimport) BOOL __stdcall 
#line 159
PeekConsoleInputA(HANDLE hConsoleInput, PINPUT_RECORD lpBuffer, DWORD nLength, LPDWORD lpNumberOfEventsRead); 
#line 166
__declspec(dllimport) BOOL __stdcall 
#line 169
PeekConsoleInputW(HANDLE hConsoleInput, PINPUT_RECORD lpBuffer, DWORD nLength, LPDWORD lpNumberOfEventsRead); 
#line 186 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\consoleapi.h"
typedef 
#line 181
struct _CONSOLE_READCONSOLE_CONTROL { 
#line 182
ULONG nLength; 
#line 183
ULONG nInitialChars; 
#line 184
ULONG dwCtrlWakeupMask; 
#line 185
ULONG dwControlKeyState; 
#line 186
} CONSOLE_READCONSOLE_CONTROL, *PCONSOLE_READCONSOLE_CONTROL; 
#line 188
__declspec(dllimport) BOOL __stdcall 
#line 192
ReadConsoleA(HANDLE hConsoleInput, LPVOID lpBuffer, DWORD nNumberOfCharsToRead, LPDWORD lpNumberOfCharsRead, PCONSOLE_READCONSOLE_CONTROL pInputControl); 
#line 200
__declspec(dllimport) BOOL __stdcall 
#line 204
ReadConsoleW(HANDLE hConsoleInput, LPVOID lpBuffer, DWORD nNumberOfCharsToRead, LPDWORD lpNumberOfCharsRead, PCONSOLE_READCONSOLE_CONTROL pInputControl); 
#line 217 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\consoleapi.h"
__declspec(dllimport) BOOL __stdcall 
#line 220
WriteConsoleA(HANDLE hConsoleOutput, const void * lpBuffer, DWORD nNumberOfCharsToWrite, LPDWORD lpNumberOfCharsWritten, LPVOID lpReserved); 
#line 228
__declspec(dllimport) BOOL __stdcall 
#line 231
WriteConsoleW(HANDLE hConsoleOutput, const void * lpBuffer, DWORD nNumberOfCharsToWrite, LPDWORD lpNumberOfCharsWritten, LPVOID lpReserved); 
#line 262 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\consoleapi.h"
typedef BOOL (__stdcall *PHANDLER_ROUTINE)(DWORD CtrlType); 
#line 266
__declspec(dllimport) BOOL __stdcall 
#line 269
SetConsoleCtrlHandler(PHANDLER_ROUTINE HandlerRoutine, BOOL Add); 
#line 275 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\consoleapi.h"
#pragma endregion
#line 277
#pragma region Desktop Family or OneCore Family
#line 285
__declspec(dllimport) HRESULT __stdcall 
#line 288
CreatePseudoConsole(COORD size, HANDLE hInput, HANDLE hOutput, DWORD dwFlags, HPCON * phPC); 
#line 296
__declspec(dllimport) HRESULT __stdcall 
#line 299
ResizePseudoConsole(HPCON hPC, COORD size); 
#line 304
__declspec(dllimport) void __stdcall 
#line 307
ClosePseudoConsole(HPCON hPC); 
#line 317 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\consoleapi.h"
}
#line 314
#pragma endregion
#line 25 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\consoleapi2.h"
extern "C" {
#line 28 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\consoleapi2.h"
#pragma region Application Family or OneCore Family
#line 53
__declspec(dllimport) BOOL __stdcall 
#line 56
FillConsoleOutputCharacterA(HANDLE hConsoleOutput, CHAR cCharacter, DWORD nLength, COORD dwWriteCoord, LPDWORD lpNumberOfCharsWritten); 
#line 64
__declspec(dllimport) BOOL __stdcall 
#line 67
FillConsoleOutputCharacterW(HANDLE hConsoleOutput, WCHAR cCharacter, DWORD nLength, COORD dwWriteCoord, LPDWORD lpNumberOfCharsWritten); 
#line 80 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\consoleapi2.h"
__declspec(dllimport) BOOL __stdcall 
#line 83
FillConsoleOutputAttribute(HANDLE hConsoleOutput, WORD wAttribute, DWORD nLength, COORD dwWriteCoord, LPDWORD lpNumberOfAttrsWritten); 
#line 91
__declspec(dllimport) BOOL __stdcall 
#line 94
GenerateConsoleCtrlEvent(DWORD dwCtrlEvent, DWORD dwProcessGroupId); 
#line 99
__declspec(dllimport) HANDLE __stdcall 
#line 102
CreateConsoleScreenBuffer(DWORD dwDesiredAccess, DWORD dwShareMode, const SECURITY_ATTRIBUTES * lpSecurityAttributes, DWORD dwFlags, LPVOID lpScreenBufferData); 
#line 110
__declspec(dllimport) BOOL __stdcall 
#line 113
SetConsoleActiveScreenBuffer(HANDLE hConsoleOutput); 
#line 117
__declspec(dllimport) BOOL __stdcall 
#line 120
FlushConsoleInputBuffer(HANDLE hConsoleInput); 
#line 124
__declspec(dllimport) BOOL __stdcall 
#line 127
SetConsoleCP(UINT wCodePageID); 
#line 131
__declspec(dllimport) BOOL __stdcall 
#line 134
SetConsoleOutputCP(UINT wCodePageID); 
#line 141
typedef 
#line 138
struct _CONSOLE_CURSOR_INFO { 
#line 139
DWORD dwSize; 
#line 140
BOOL bVisible; 
#line 141
} CONSOLE_CURSOR_INFO, *PCONSOLE_CURSOR_INFO; 
#line 143
__declspec(dllimport) BOOL __stdcall 
#line 146
GetConsoleCursorInfo(HANDLE hConsoleOutput, PCONSOLE_CURSOR_INFO lpConsoleCursorInfo); 
#line 151
__declspec(dllimport) BOOL __stdcall 
#line 154
SetConsoleCursorInfo(HANDLE hConsoleOutput, const CONSOLE_CURSOR_INFO * lpConsoleCursorInfo); 
#line 165
typedef 
#line 159
struct _CONSOLE_SCREEN_BUFFER_INFO { 
#line 160
COORD dwSize; 
#line 161
COORD dwCursorPosition; 
#line 162
WORD wAttributes; 
#line 163
SMALL_RECT srWindow; 
#line 164
COORD dwMaximumWindowSize; 
#line 165
} CONSOLE_SCREEN_BUFFER_INFO, *PCONSOLE_SCREEN_BUFFER_INFO; 
#line 167
__declspec(dllimport) BOOL __stdcall 
#line 170
GetConsoleScreenBufferInfo(HANDLE hConsoleOutput, PCONSOLE_SCREEN_BUFFER_INFO lpConsoleScreenBufferInfo); 
#line 185
typedef 
#line 175
struct _CONSOLE_SCREEN_BUFFER_INFOEX { 
#line 176
ULONG cbSize; 
#line 177
COORD dwSize; 
#line 178
COORD dwCursorPosition; 
#line 179
WORD wAttributes; 
#line 180
SMALL_RECT srWindow; 
#line 181
COORD dwMaximumWindowSize; 
#line 182
WORD wPopupAttributes; 
#line 183
BOOL bFullscreenSupported; 
#line 184
COLORREF ColorTable[16]; 
#line 185
} CONSOLE_SCREEN_BUFFER_INFOEX, *PCONSOLE_SCREEN_BUFFER_INFOEX; 
#line 187
__declspec(dllimport) BOOL __stdcall 
#line 190
GetConsoleScreenBufferInfoEx(HANDLE hConsoleOutput, PCONSOLE_SCREEN_BUFFER_INFOEX lpConsoleScreenBufferInfoEx); 
#line 195
__declspec(dllimport) BOOL __stdcall 
#line 198
SetConsoleScreenBufferInfoEx(HANDLE hConsoleOutput, PCONSOLE_SCREEN_BUFFER_INFOEX lpConsoleScreenBufferInfoEx); 
#line 203
__declspec(dllimport) BOOL __stdcall 
#line 206
SetConsoleScreenBufferSize(HANDLE hConsoleOutput, COORD dwSize); 
#line 211
__declspec(dllimport) BOOL __stdcall 
#line 214
SetConsoleCursorPosition(HANDLE hConsoleOutput, COORD dwCursorPosition); 
#line 219
__declspec(dllimport) COORD __stdcall 
#line 222
GetLargestConsoleWindowSize(HANDLE hConsoleOutput); 
#line 226
__declspec(dllimport) BOOL __stdcall 
#line 229
SetConsoleTextAttribute(HANDLE hConsoleOutput, WORD wAttributes); 
#line 234
__declspec(dllimport) BOOL __stdcall 
#line 237
SetConsoleWindowInfo(HANDLE hConsoleOutput, BOOL bAbsolute, const SMALL_RECT * lpConsoleWindow); 
#line 243
__declspec(dllimport) BOOL __stdcall 
#line 246
WriteConsoleOutputCharacterA(HANDLE hConsoleOutput, LPCSTR lpCharacter, DWORD nLength, COORD dwWriteCoord, LPDWORD lpNumberOfCharsWritten); 
#line 254
__declspec(dllimport) BOOL __stdcall 
#line 257
WriteConsoleOutputCharacterW(HANDLE hConsoleOutput, LPCWSTR lpCharacter, DWORD nLength, COORD dwWriteCoord, LPDWORD lpNumberOfCharsWritten); 
#line 270 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\consoleapi2.h"
__declspec(dllimport) BOOL __stdcall 
#line 273
WriteConsoleOutputAttribute(HANDLE hConsoleOutput, const WORD * lpAttribute, DWORD nLength, COORD dwWriteCoord, LPDWORD lpNumberOfAttrsWritten); 
#line 281
__declspec(dllimport) BOOL __stdcall 
#line 284
ReadConsoleOutputCharacterA(HANDLE hConsoleOutput, LPSTR lpCharacter, DWORD nLength, COORD dwReadCoord, LPDWORD lpNumberOfCharsRead); 
#line 292
__declspec(dllimport) BOOL __stdcall 
#line 295
ReadConsoleOutputCharacterW(HANDLE hConsoleOutput, LPWSTR lpCharacter, DWORD nLength, COORD dwReadCoord, LPDWORD lpNumberOfCharsRead); 
#line 308 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\consoleapi2.h"
__declspec(dllimport) BOOL __stdcall 
#line 311
ReadConsoleOutputAttribute(HANDLE hConsoleOutput, LPWORD lpAttribute, DWORD nLength, COORD dwReadCoord, LPDWORD lpNumberOfAttrsRead); 
#line 319
__declspec(dllimport) BOOL __stdcall 
#line 322
WriteConsoleInputA(HANDLE hConsoleInput, const INPUT_RECORD * lpBuffer, DWORD nLength, LPDWORD lpNumberOfEventsWritten); 
#line 329
__declspec(dllimport) BOOL __stdcall 
#line 332
WriteConsoleInputW(HANDLE hConsoleInput, const INPUT_RECORD * lpBuffer, DWORD nLength, LPDWORD lpNumberOfEventsWritten); 
#line 344 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\consoleapi2.h"
__declspec(dllimport) BOOL __stdcall 
#line 347
ScrollConsoleScreenBufferA(HANDLE hConsoleOutput, const SMALL_RECT * lpScrollRectangle, const SMALL_RECT * lpClipRectangle, COORD dwDestinationOrigin, const CHAR_INFO * lpFill); 
#line 355
__declspec(dllimport) BOOL __stdcall 
#line 358
ScrollConsoleScreenBufferW(HANDLE hConsoleOutput, const SMALL_RECT * lpScrollRectangle, const SMALL_RECT * lpClipRectangle, COORD dwDestinationOrigin, const CHAR_INFO * lpFill); 
#line 371 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\consoleapi2.h"
__declspec(dllimport) BOOL __stdcall 
#line 374
WriteConsoleOutputA(HANDLE hConsoleOutput, const CHAR_INFO * lpBuffer, COORD dwBufferSize, COORD dwBufferCoord, PSMALL_RECT lpWriteRegion); 
#line 382
__declspec(dllimport) BOOL __stdcall 
#line 385
WriteConsoleOutputW(HANDLE hConsoleOutput, const CHAR_INFO * lpBuffer, COORD dwBufferSize, COORD dwBufferCoord, PSMALL_RECT lpWriteRegion); 
#line 398 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\consoleapi2.h"
__declspec(dllimport) BOOL __stdcall 
#line 401
ReadConsoleOutputA(HANDLE hConsoleOutput, PCHAR_INFO lpBuffer, COORD dwBufferSize, COORD dwBufferCoord, PSMALL_RECT lpReadRegion); 
#line 409
__declspec(dllimport) BOOL __stdcall 
#line 412
ReadConsoleOutputW(HANDLE hConsoleOutput, PCHAR_INFO lpBuffer, COORD dwBufferSize, COORD dwBufferCoord, PSMALL_RECT lpReadRegion); 
#line 425 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\consoleapi2.h"
__declspec(dllimport) DWORD __stdcall 
#line 428
GetConsoleTitleA(LPSTR lpConsoleTitle, DWORD nSize); 
#line 433
__declspec(dllimport) DWORD __stdcall 
#line 436
GetConsoleTitleW(LPWSTR lpConsoleTitle, DWORD nSize); 
#line 448 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\consoleapi2.h"
__declspec(dllimport) DWORD __stdcall 
#line 451
GetConsoleOriginalTitleA(LPSTR lpConsoleTitle, DWORD nSize); 
#line 456
__declspec(dllimport) DWORD __stdcall 
#line 459
GetConsoleOriginalTitleW(LPWSTR lpConsoleTitle, DWORD nSize); 
#line 471 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\consoleapi2.h"
__declspec(dllimport) BOOL __stdcall 
#line 474
SetConsoleTitleA(LPCSTR lpConsoleTitle); 
#line 478
__declspec(dllimport) BOOL __stdcall 
#line 481
SetConsoleTitleW(LPCWSTR lpConsoleTitle); 
#line 494 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\consoleapi2.h"
}
#line 491
#pragma endregion
#line 29 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\consoleapi3.h"
extern "C" {
#line 32 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\consoleapi3.h"
#pragma region Application Family or OneCore Family
#line 35
__declspec(dllimport) BOOL __stdcall 
#line 38
GetNumberOfConsoleMouseButtons(LPDWORD lpNumberOfMouseButtons); 
#line 44
__declspec(dllimport) COORD __stdcall 
#line 47
GetConsoleFontSize(HANDLE hConsoleOutput, DWORD nFont); 
#line 52
__declspec(dllimport) BOOL __stdcall 
#line 55
GetCurrentConsoleFont(HANDLE hConsoleOutput, BOOL bMaximumWindow, PCONSOLE_FONT_INFO lpConsoleCurrentFont); 
#line 70
typedef 
#line 63
struct _CONSOLE_FONT_INFOEX { 
#line 64
ULONG cbSize; 
#line 65
DWORD nFont; 
#line 66
COORD dwFontSize; 
#line 67
UINT FontFamily; 
#line 68
UINT FontWeight; 
#line 69
WCHAR FaceName[32]; 
#line 70
} CONSOLE_FONT_INFOEX, *PCONSOLE_FONT_INFOEX; 
#line 72
__declspec(dllimport) BOOL __stdcall 
#line 75
GetCurrentConsoleFontEx(HANDLE hConsoleOutput, BOOL bMaximumWindow, PCONSOLE_FONT_INFOEX lpConsoleCurrentFontEx); 
#line 81
__declspec(dllimport) BOOL __stdcall 
#line 84
SetCurrentConsoleFontEx(HANDLE hConsoleOutput, BOOL bMaximumWindow, PCONSOLE_FONT_INFOEX lpConsoleCurrentFontEx); 
#line 106 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\consoleapi3.h"
typedef 
#line 102
struct _CONSOLE_SELECTION_INFO { 
#line 103
DWORD dwFlags; 
#line 104
COORD dwSelectionAnchor; 
#line 105
SMALL_RECT srSelection; 
#line 106
} CONSOLE_SELECTION_INFO, *PCONSOLE_SELECTION_INFO; 
#line 108
__declspec(dllimport) BOOL __stdcall 
#line 111
GetConsoleSelectionInfo(PCONSOLE_SELECTION_INFO lpConsoleSelectionInfo); 
#line 126
typedef 
#line 121
struct _CONSOLE_HISTORY_INFO { 
#line 122
UINT cbSize; 
#line 123
UINT HistoryBufferSize; 
#line 124
UINT NumberOfHistoryBuffers; 
#line 125
DWORD dwFlags; 
#line 126
} CONSOLE_HISTORY_INFO, *PCONSOLE_HISTORY_INFO; 
#line 128
__declspec(dllimport) BOOL __stdcall 
#line 131
GetConsoleHistoryInfo(PCONSOLE_HISTORY_INFO lpConsoleHistoryInfo); 
#line 135
__declspec(dllimport) BOOL __stdcall 
#line 138
SetConsoleHistoryInfo(PCONSOLE_HISTORY_INFO lpConsoleHistoryInfo); 
#line 145
__declspec(dllimport) BOOL __stdcall 
#line 148
GetConsoleDisplayMode(LPDWORD lpModeFlags); 
#line 155
__declspec(dllimport) BOOL __stdcall 
#line 158
SetConsoleDisplayMode(HANDLE hConsoleOutput, DWORD dwFlags, PCOORD lpNewScreenBufferDimensions); 
#line 164
__declspec(dllimport) HWND __stdcall 
#line 167
GetConsoleWindow(); 
#line 175 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\consoleapi3.h"
__declspec(dllimport) BOOL __stdcall 
#line 178
AddConsoleAliasA(LPSTR Source, LPSTR Target, LPSTR ExeName); 
#line 184
__declspec(dllimport) BOOL __stdcall 
#line 187
AddConsoleAliasW(LPWSTR Source, LPWSTR Target, LPWSTR ExeName); 
#line 198 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\consoleapi3.h"
__declspec(dllimport) DWORD __stdcall 
#line 201
GetConsoleAliasA(LPSTR Source, LPSTR TargetBuffer, DWORD TargetBufferLength, LPSTR ExeName); 
#line 208
__declspec(dllimport) DWORD __stdcall 
#line 211
GetConsoleAliasW(LPWSTR Source, LPWSTR TargetBuffer, DWORD TargetBufferLength, LPWSTR ExeName); 
#line 223 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\consoleapi3.h"
__declspec(dllimport) DWORD __stdcall 
#line 226
GetConsoleAliasesLengthA(LPSTR ExeName); 
#line 230
__declspec(dllimport) DWORD __stdcall 
#line 233
GetConsoleAliasesLengthW(LPWSTR ExeName); 
#line 242 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\consoleapi3.h"
__declspec(dllimport) DWORD __stdcall 
#line 245
GetConsoleAliasExesLengthA(); 
#line 249
__declspec(dllimport) DWORD __stdcall 
#line 252
GetConsoleAliasExesLengthW(); 
#line 261 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\consoleapi3.h"
__declspec(dllimport) DWORD __stdcall 
#line 264
GetConsoleAliasesA(LPSTR AliasBuffer, DWORD AliasBufferLength, LPSTR ExeName); 
#line 270
__declspec(dllimport) DWORD __stdcall 
#line 273
GetConsoleAliasesW(LPWSTR AliasBuffer, DWORD AliasBufferLength, LPWSTR ExeName); 
#line 284 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\consoleapi3.h"
__declspec(dllimport) DWORD __stdcall 
#line 287
GetConsoleAliasExesA(LPSTR ExeNameBuffer, DWORD ExeNameBufferLength); 
#line 292
__declspec(dllimport) DWORD __stdcall 
#line 295
GetConsoleAliasExesW(LPWSTR ExeNameBuffer, DWORD ExeNameBufferLength); 
#line 307 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\consoleapi3.h"
__declspec(dllimport) void __stdcall 
#line 310
ExpungeConsoleCommandHistoryA(LPSTR ExeName); 
#line 314
__declspec(dllimport) void __stdcall 
#line 317
ExpungeConsoleCommandHistoryW(LPWSTR ExeName); 
#line 326 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\consoleapi3.h"
__declspec(dllimport) BOOL __stdcall 
#line 329
SetConsoleNumberOfCommandsA(DWORD Number, LPSTR ExeName); 
#line 334
__declspec(dllimport) BOOL __stdcall 
#line 337
SetConsoleNumberOfCommandsW(DWORD Number, LPWSTR ExeName); 
#line 347 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\consoleapi3.h"
__declspec(dllimport) DWORD __stdcall 
#line 350
GetConsoleCommandHistoryLengthA(LPSTR ExeName); 
#line 354
__declspec(dllimport) DWORD __stdcall 
#line 357
GetConsoleCommandHistoryLengthW(LPWSTR ExeName); 
#line 366 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\consoleapi3.h"
__declspec(dllimport) DWORD __stdcall 
#line 369
GetConsoleCommandHistoryA(LPSTR Commands, DWORD CommandBufferLength, LPSTR ExeName); 
#line 375
__declspec(dllimport) DWORD __stdcall 
#line 378
GetConsoleCommandHistoryW(LPWSTR Commands, DWORD CommandBufferLength, LPWSTR ExeName); 
#line 391 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\consoleapi3.h"
__declspec(dllimport) DWORD __stdcall 
#line 394
GetConsoleProcessList(LPDWORD lpdwProcessList, DWORD dwProcessCount); 
#line 405 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\consoleapi3.h"
}
#line 402
#pragma endregion
#line 65 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\wincon.h"
}
#line 61 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\wincon.h"
#pragma warning(pop)
#line 13 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\verrsrc.h"
#pragma region Application Family or OneCore Family or Games Family
#line 88 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\verrsrc.h"
#pragma endregion
#line 90
#pragma region Desktop Family or OneCore Family or Games Family
#line 133
extern "C" {
#line 162 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\verrsrc.h"
typedef 
#line 147
struct tagVS_FIXEDFILEINFO { 
#line 149
DWORD dwSignature; 
#line 150
DWORD dwStrucVersion; 
#line 151
DWORD dwFileVersionMS; 
#line 152
DWORD dwFileVersionLS; 
#line 153
DWORD dwProductVersionMS; 
#line 154
DWORD dwProductVersionLS; 
#line 155
DWORD dwFileFlagsMask; 
#line 156
DWORD dwFileFlags; 
#line 157
DWORD dwFileOS; 
#line 158
DWORD dwFileType; 
#line 159
DWORD dwFileSubtype; 
#line 160
DWORD dwFileDateMS; 
#line 161
DWORD dwFileDateLS; 
#line 162
} VS_FIXEDFILEINFO; 
#line 165
}
#line 171 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\verrsrc.h"
#pragma endregion
#line 23 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winver.h"
extern "C" {
#line 26 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winver.h"
#pragma region Desktop Family or OneCore Family
#line 36
DWORD __stdcall VerFindFileA(DWORD uFlags, LPCSTR szFileName, LPCSTR szWinDir, LPCSTR szAppDir, LPSTR szCurDir, PUINT puCurDirLen, LPSTR szDestDir, PUINT puDestDirLen); 
#line 48
DWORD __stdcall VerFindFileW(DWORD uFlags, LPCWSTR szFileName, LPCWSTR szWinDir, LPCWSTR szAppDir, LPWSTR szCurDir, PUINT puCurDirLen, LPWSTR szDestDir, PUINT puDestDirLen); 
#line 67 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winver.h"
#pragma endregion
#line 69
#pragma region Desktop Family
#line 76
DWORD __stdcall VerInstallFileA(DWORD uFlags, LPCSTR szSrcFileName, LPCSTR szDestFileName, LPCSTR szSrcDir, LPCSTR szDestDir, LPCSTR szCurDir, LPSTR szTmpFile, PUINT puTmpFileLen); 
#line 88
DWORD __stdcall VerInstallFileW(DWORD uFlags, LPCWSTR szSrcFileName, LPCWSTR szDestFileName, LPCWSTR szSrcDir, LPCWSTR szDestDir, LPCWSTR szCurDir, LPWSTR szTmpFile, PUINT puTmpFileLen); 
#line 107 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winver.h"
#pragma endregion
#line 109
#pragma region Application Family or OneCore Family
#line 117
DWORD __stdcall GetFileVersionInfoSizeA(LPCSTR lptstrFilename, LPDWORD lpdwHandle); 
#line 124
DWORD __stdcall GetFileVersionInfoSizeW(LPCWSTR lptstrFilename, LPDWORD lpdwHandle); 
#line 137 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winver.h"
BOOL __stdcall GetFileVersionInfoA(LPCSTR lptstrFilename, DWORD dwHandle, DWORD dwLen, LPVOID lpData); 
#line 146
BOOL __stdcall GetFileVersionInfoW(LPCWSTR lptstrFilename, DWORD dwHandle, DWORD dwLen, LPVOID lpData); 
#line 158 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winver.h"
DWORD __stdcall GetFileVersionInfoSizeExA(DWORD dwFlags, LPCSTR lpwstrFilename, LPDWORD lpdwHandle); 
#line 159
DWORD __stdcall GetFileVersionInfoSizeExW(DWORD dwFlags, LPCWSTR lpwstrFilename, LPDWORD lpdwHandle); 
#line 166 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winver.h"
BOOL __stdcall GetFileVersionInfoExA(DWORD dwFlags, LPCSTR lpwstrFilename, DWORD dwHandle, DWORD dwLen, LPVOID lpData); 
#line 171
BOOL __stdcall GetFileVersionInfoExW(DWORD dwFlags, LPCWSTR lpwstrFilename, DWORD dwHandle, DWORD dwLen, LPVOID lpData); 
#line 185 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winver.h"
#pragma endregion
#line 187
#pragma region Desktop Family
#line 196 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winver.h"
#pragma endregion
#line 198
#pragma region Application Family or OneCore Family
#line 205
DWORD __stdcall VerLanguageNameA(DWORD wLang, LPSTR szLang, DWORD cchLang); 
#line 212
DWORD __stdcall VerLanguageNameW(DWORD wLang, LPWSTR szLang, DWORD cchLang); 
#line 225 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winver.h"
BOOL __stdcall VerQueryValueA(LPCVOID pBlock, LPCSTR lpSubBlock, LPVOID * lplpBuffer, PUINT puLen); 
#line 233
BOOL __stdcall VerQueryValueW(LPCVOID pBlock, LPCWSTR lpSubBlock, LPVOID * lplpBuffer, PUINT puLen); 
#line 252 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winver.h"
}
#line 249
#pragma endregion
#line 31 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winreg.h"
extern "C" {
#line 35 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winreg.h"
#pragma warning(push)
#pragma warning(disable:4820)
#line 39 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winreg.h"
#pragma region Application Family or Desktop Family or OneCore Family
#line 47 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winreg.h"
#pragma endregion
#line 49
#pragma region Application Family or Desktop Family or OneCore Family or Games Family
#line 52
typedef LONG LSTATUS; 
#line 55 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winreg.h"
#pragma endregion
#line 57
#pragma region Application Family or Desktop Family or OneCore Family
#line 93 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winreg.h"
#pragma endregion
#line 95
#pragma region Application Family or Desktop Family or OneCore Family or Games Family
#line 102
typedef ACCESS_MASK REGSAM; 
#line 121 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winreg.h"
#pragma endregion
#line 123
#pragma region Application Family or Desktop Family or OneCore Family
#line 131
struct val_context { 
#line 132
int valuelen; 
#line 133
LPVOID value_context; 
#line 134
LPVOID val_buff_ptr; 
#line 135
}; 
#line 137
typedef val_context *PVALCONTEXT; 
#line 144
typedef 
#line 139
struct pvalueA { 
#line 140
LPSTR pv_valuename; 
#line 141
int pv_valuelen; 
#line 142
LPVOID pv_value_context; 
#line 143
DWORD pv_type; 
#line 144
} PVALUEA, *PPVALUEA; 
#line 150
typedef 
#line 145
struct pvalueW { 
#line 146
LPWSTR pv_valuename; 
#line 147
int pv_valuelen; 
#line 148
LPVOID pv_value_context; 
#line 149
DWORD pv_type; 
#line 150
} PVALUEW, *PPVALUEW; 
#line 155
typedef PVALUEA PVALUE; 
#line 156
typedef PPVALUEA PPVALUE; 
#line 161 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winreg.h"
typedef DWORD __cdecl QUERYHANDLER(LPVOID keycontext, PVALCONTEXT val_list, DWORD num_vals, LPVOID outputbuffer, DWORD * total_outlen, DWORD input_blen); 
#line 164
typedef QUERYHANDLER *PQUERYHANDLER; 
#line 173
typedef 
#line 166
struct provider_info { 
#line 167
PQUERYHANDLER pi_R0_1val; 
#line 168
PQUERYHANDLER pi_R0_allvals; 
#line 169
PQUERYHANDLER pi_R3_1val; 
#line 170
PQUERYHANDLER pi_R3_allvals; 
#line 171
DWORD pi_flags; 
#line 172
LPVOID pi_key_context; 
#line 173
} REG_PROVIDER; 
#line 175
typedef provider_info *PPROVIDER; 
#line 182
typedef 
#line 177
struct value_entA { 
#line 178
LPSTR ve_valuename; 
#line 179
DWORD ve_valuelen; 
#line 180
DWORD_PTR ve_valueptr; 
#line 181
DWORD ve_type; 
#line 182
} VALENTA, *PVALENTA; 
#line 188
typedef 
#line 183
struct value_entW { 
#line 184
LPWSTR ve_valuename; 
#line 185
DWORD ve_valuelen; 
#line 186
DWORD_PTR ve_valueptr; 
#line 187
DWORD ve_type; 
#line 188
} VALENTW, *PVALENTW; 
#line 193
typedef VALENTA VALENT; 
#line 194
typedef PVALENTA PVALENT; 
#line 215 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winreg.h"
#pragma endregion
#line 217
#pragma region Desktop Family or OneCore Family
#line 230 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winreg.h"
#pragma endregion
#line 236
#pragma region Application Family or OneCore Family or Games Family
#line 239
__declspec(dllimport) LSTATUS __stdcall 
#line 242
RegCloseKey(HKEY hKey); 
#line 247 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winreg.h"
#pragma endregion
#line 249
#pragma region Application Family or OneCore Family
#line 252
__declspec(dllimport) LSTATUS __stdcall 
#line 255
RegOverridePredefKey(HKEY hKey, HKEY hNewHKey); 
#line 260
__declspec(dllimport) LSTATUS __stdcall 
#line 263
RegOpenUserClassesRoot(HANDLE hToken, DWORD dwOptions, REGSAM samDesired, PHKEY phkResult); 
#line 270
__declspec(dllimport) LSTATUS __stdcall 
#line 273
RegOpenCurrentUser(REGSAM samDesired, PHKEY phkResult); 
#line 278
__declspec(dllimport) LSTATUS __stdcall 
#line 281
RegDisablePredefinedCache(); 
#line 285
__declspec(dllimport) LSTATUS __stdcall 
#line 288
RegDisablePredefinedCacheEx(); 
#line 292
__declspec(dllimport) LSTATUS __stdcall 
#line 295
RegConnectRegistryA(LPCSTR lpMachineName, HKEY hKey, PHKEY phkResult); 
#line 300
__declspec(dllimport) LSTATUS __stdcall 
#line 303
RegConnectRegistryW(LPCWSTR lpMachineName, HKEY hKey, PHKEY phkResult); 
#line 315 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winreg.h"
#pragma endregion
#line 317
#pragma region Desktop Family or OneCore Family
#line 320
__declspec(dllimport) LSTATUS __stdcall 
#line 323
RegConnectRegistryExA(LPCSTR lpMachineName, HKEY hKey, ULONG Flags, PHKEY phkResult); 
#line 329
__declspec(dllimport) LSTATUS __stdcall 
#line 332
RegConnectRegistryExW(LPCWSTR lpMachineName, HKEY hKey, ULONG Flags, PHKEY phkResult); 
#line 345 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winreg.h"
#pragma endregion
#line 347
#pragma region Application Family or OneCore Family or Games Family
#line 350
__declspec(dllimport) LSTATUS __stdcall 
#line 353
RegCreateKeyA(HKEY hKey, LPCSTR lpSubKey, PHKEY phkResult); 
#line 358
__declspec(dllimport) LSTATUS __stdcall 
#line 361
RegCreateKeyW(HKEY hKey, LPCWSTR lpSubKey, PHKEY phkResult); 
#line 372 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winreg.h"
__declspec(dllimport) LSTATUS __stdcall 
#line 375
RegCreateKeyExA(HKEY hKey, LPCSTR lpSubKey, DWORD Reserved, LPSTR lpClass, DWORD dwOptions, REGSAM samDesired, const LPSECURITY_ATTRIBUTES lpSecurityAttributes, PHKEY phkResult, LPDWORD lpdwDisposition); 
#line 387
__declspec(dllimport) LSTATUS __stdcall 
#line 390
RegCreateKeyExW(HKEY hKey, LPCWSTR lpSubKey, DWORD Reserved, LPWSTR lpClass, DWORD dwOptions, REGSAM samDesired, const LPSECURITY_ATTRIBUTES lpSecurityAttributes, PHKEY phkResult, LPDWORD lpdwDisposition); 
#line 408 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winreg.h"
#pragma endregion
#line 410
#pragma region Application Family or OneCore Family
#line 413
__declspec(dllimport) LSTATUS __stdcall 
#line 416
RegCreateKeyTransactedA(HKEY hKey, LPCSTR lpSubKey, DWORD Reserved, LPSTR lpClass, DWORD dwOptions, REGSAM samDesired, const LPSECURITY_ATTRIBUTES lpSecurityAttributes, PHKEY phkResult, LPDWORD lpdwDisposition, HANDLE hTransaction, PVOID pExtendedParemeter); 
#line 429
__declspec(dllimport) LSTATUS __stdcall 
#line 432
RegCreateKeyTransactedW(HKEY hKey, LPCWSTR lpSubKey, DWORD Reserved, LPWSTR lpClass, DWORD dwOptions, REGSAM samDesired, const LPSECURITY_ATTRIBUTES lpSecurityAttributes, PHKEY phkResult, LPDWORD lpdwDisposition, HANDLE hTransaction, PVOID pExtendedParemeter); 
#line 452 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winreg.h"
#pragma endregion
#line 454
#pragma region Application Family or OneCore Family or Games Family
#line 457
__declspec(dllimport) LSTATUS __stdcall 
#line 460
RegDeleteKeyA(HKEY hKey, LPCSTR lpSubKey); 
#line 464
__declspec(dllimport) LSTATUS __stdcall 
#line 467
RegDeleteKeyW(HKEY hKey, LPCWSTR lpSubKey); 
#line 477 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winreg.h"
__declspec(dllimport) LSTATUS __stdcall 
#line 480
RegDeleteKeyExA(HKEY hKey, LPCSTR lpSubKey, REGSAM samDesired, DWORD Reserved); 
#line 487
__declspec(dllimport) LSTATUS __stdcall 
#line 490
RegDeleteKeyExW(HKEY hKey, LPCWSTR lpSubKey, REGSAM samDesired, DWORD Reserved); 
#line 503 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winreg.h"
#pragma endregion
#line 505
#pragma region Application Family or OneCore Family
#line 508
__declspec(dllimport) LSTATUS __stdcall 
#line 511
RegDeleteKeyTransactedA(HKEY hKey, LPCSTR lpSubKey, REGSAM samDesired, DWORD Reserved, HANDLE hTransaction, PVOID pExtendedParameter); 
#line 519
__declspec(dllimport) LSTATUS __stdcall 
#line 522
RegDeleteKeyTransactedW(HKEY hKey, LPCWSTR lpSubKey, REGSAM samDesired, DWORD Reserved, HANDLE hTransaction, PVOID pExtendedParameter); 
#line 537 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winreg.h"
#pragma endregion
#line 539
#pragma region Desktop Family or OneCore Family
#line 542
__declspec(dllimport) LONG __stdcall 
#line 545
RegDisableReflectionKey(HKEY hBase); 
#line 549
__declspec(dllimport) LONG __stdcall 
#line 552
RegEnableReflectionKey(HKEY hBase); 
#line 556
__declspec(dllimport) LONG __stdcall 
#line 559
RegQueryReflectionKey(HKEY hBase, BOOL * bIsReflectionDisabled); 
#line 565 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winreg.h"
#pragma endregion
#line 567
#pragma region Application Family or OneCore Family or Games Family
#line 570
__declspec(dllimport) LSTATUS __stdcall 
#line 573
RegDeleteValueA(HKEY hKey, LPCSTR lpValueName); 
#line 578
__declspec(dllimport) LSTATUS __stdcall 
#line 581
RegDeleteValueW(HKEY hKey, LPCWSTR lpValueName); 
#line 591 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winreg.h"
__declspec(dllimport) LSTATUS __stdcall 
#line 594
RegEnumKeyA(HKEY hKey, DWORD dwIndex, LPSTR lpName, DWORD cchName); 
#line 600
__declspec(dllimport) LSTATUS __stdcall 
#line 603
RegEnumKeyW(HKEY hKey, DWORD dwIndex, LPWSTR lpName, DWORD cchName); 
#line 615 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winreg.h"
__declspec(dllimport) LSTATUS __stdcall 
#line 618
RegEnumKeyExA(HKEY hKey, DWORD dwIndex, LPSTR lpName, LPDWORD lpcchName, LPDWORD lpReserved, LPSTR lpClass, LPDWORD lpcchClass, PFILETIME lpftLastWriteTime); 
#line 629
__declspec(dllimport) LSTATUS __stdcall 
#line 632
RegEnumKeyExW(HKEY hKey, DWORD dwIndex, LPWSTR lpName, LPDWORD lpcchName, LPDWORD lpReserved, LPWSTR lpClass, LPDWORD lpcchClass, PFILETIME lpftLastWriteTime); 
#line 648 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winreg.h"
__declspec(dllimport) LSTATUS __stdcall 
#line 651
RegEnumValueA(HKEY hKey, DWORD dwIndex, LPSTR lpValueName, LPDWORD lpcchValueName, LPDWORD lpReserved, LPDWORD lpType, LPBYTE lpData, LPDWORD lpcbData); 
#line 662
__declspec(dllimport) LSTATUS __stdcall 
#line 665
RegEnumValueW(HKEY hKey, DWORD dwIndex, LPWSTR lpValueName, LPDWORD lpcchValueName, LPDWORD lpReserved, LPDWORD lpType, LPBYTE lpData, LPDWORD lpcbData); 
#line 682 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winreg.h"
#pragma endregion
#line 684
#pragma region Application Family or OneCore Family
#line 687
__declspec(dllimport) LSTATUS __stdcall 
#line 690
RegFlushKey(HKEY hKey); 
#line 694
__declspec(dllimport) LSTATUS __stdcall 
#line 697
RegGetKeySecurity(HKEY hKey, SECURITY_INFORMATION SecurityInformation, PSECURITY_DESCRIPTOR pSecurityDescriptor, LPDWORD lpcbSecurityDescriptor); 
#line 704
__declspec(dllimport) LSTATUS __stdcall 
#line 707
RegLoadKeyA(HKEY hKey, LPCSTR lpSubKey, LPCSTR lpFile); 
#line 713
__declspec(dllimport) LSTATUS __stdcall 
#line 716
RegLoadKeyW(HKEY hKey, LPCWSTR lpSubKey, LPCWSTR lpFile); 
#line 727 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winreg.h"
__declspec(dllimport) LSTATUS __stdcall 
#line 730
RegNotifyChangeKeyValue(HKEY hKey, BOOL bWatchSubtree, DWORD dwNotifyFilter, HANDLE hEvent, BOOL fAsynchronous); 
#line 739 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winreg.h"
#pragma endregion
#line 741
#pragma region Application Family or OneCore Family or Games Family
#line 744
__declspec(dllimport) LSTATUS __stdcall 
#line 747
RegOpenKeyA(HKEY hKey, LPCSTR lpSubKey, PHKEY phkResult); 
#line 752
__declspec(dllimport) LSTATUS __stdcall 
#line 755
RegOpenKeyW(HKEY hKey, LPCWSTR lpSubKey, PHKEY phkResult); 
#line 766 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winreg.h"
__declspec(dllimport) LSTATUS __stdcall 
#line 769
RegOpenKeyExA(HKEY hKey, LPCSTR lpSubKey, DWORD ulOptions, REGSAM samDesired, PHKEY phkResult); 
#line 777
__declspec(dllimport) LSTATUS __stdcall 
#line 780
RegOpenKeyExW(HKEY hKey, LPCWSTR lpSubKey, DWORD ulOptions, REGSAM samDesired, PHKEY phkResult); 
#line 794 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winreg.h"
#pragma endregion
#line 796
#pragma region Application Family or OneCore Family
#line 799
__declspec(dllimport) LSTATUS __stdcall 
#line 802
RegOpenKeyTransactedA(HKEY hKey, LPCSTR lpSubKey, DWORD ulOptions, REGSAM samDesired, PHKEY phkResult, HANDLE hTransaction, PVOID pExtendedParemeter); 
#line 811
__declspec(dllimport) LSTATUS __stdcall 
#line 814
RegOpenKeyTransactedW(HKEY hKey, LPCWSTR lpSubKey, DWORD ulOptions, REGSAM samDesired, PHKEY phkResult, HANDLE hTransaction, PVOID pExtendedParemeter); 
#line 830 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winreg.h"
#pragma endregion
#line 832
#pragma region Application Family or OneCore Family or Games Family
#line 835
__declspec(dllimport) LSTATUS __stdcall 
#line 838
RegQueryInfoKeyA(HKEY hKey, LPSTR lpClass, LPDWORD lpcchClass, LPDWORD lpReserved, LPDWORD lpcSubKeys, LPDWORD lpcbMaxSubKeyLen, LPDWORD lpcbMaxClassLen, LPDWORD lpcValues, LPDWORD lpcbMaxValueNameLen, LPDWORD lpcbMaxValueLen, LPDWORD lpcbSecurityDescriptor, PFILETIME lpftLastWriteTime); 
#line 853
__declspec(dllimport) LSTATUS __stdcall 
#line 856
RegQueryInfoKeyW(HKEY hKey, LPWSTR lpClass, LPDWORD lpcchClass, LPDWORD lpReserved, LPDWORD lpcSubKeys, LPDWORD lpcbMaxSubKeyLen, LPDWORD lpcbMaxClassLen, LPDWORD lpcValues, LPDWORD lpcbMaxValueNameLen, LPDWORD lpcbMaxValueLen, LPDWORD lpcbSecurityDescriptor, PFILETIME lpftLastWriteTime); 
#line 877 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winreg.h"
#pragma endregion
#line 879
#pragma region Application Family or OneCore Family
#line 882
__declspec(dllimport) LSTATUS __stdcall 
#line 885
RegQueryValueA(HKEY hKey, LPCSTR lpSubKey, LPSTR lpData, PLONG lpcbData); 
#line 891
__declspec(dllimport) LSTATUS __stdcall 
#line 894
RegQueryValueW(HKEY hKey, LPCWSTR lpSubKey, LPWSTR lpData, PLONG lpcbData); 
#line 908 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winreg.h"
__declspec(dllimport) LSTATUS __stdcall 
#line 911
RegQueryMultipleValuesA(HKEY hKey, PVALENTA val_list, DWORD num_vals, LPSTR lpValueBuf, LPDWORD ldwTotsize); 
#line 919
__declspec(dllimport) LSTATUS __stdcall 
#line 922
RegQueryMultipleValuesW(HKEY hKey, PVALENTW val_list, DWORD num_vals, LPWSTR lpValueBuf, LPDWORD ldwTotsize); 
#line 938 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winreg.h"
#pragma endregion
#line 940
#pragma region Application Family or OneCore Family or Games Family
#line 943
__declspec(dllimport) LSTATUS __stdcall 
#line 946
RegQueryValueExA(HKEY hKey, LPCSTR lpValueName, LPDWORD lpReserved, LPDWORD lpType, LPBYTE lpData, LPDWORD lpcbData); 
#line 955
__declspec(dllimport) LSTATUS __stdcall 
#line 958
RegQueryValueExW(HKEY hKey, LPCWSTR lpValueName, LPDWORD lpReserved, LPDWORD lpType, LPBYTE lpData, LPDWORD lpcbData); 
#line 973 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winreg.h"
#pragma endregion
#line 975
#pragma region Application Family or OneCore Family
#line 978
__declspec(dllimport) LSTATUS __stdcall 
#line 981
RegReplaceKeyA(HKEY hKey, LPCSTR lpSubKey, LPCSTR lpNewFile, LPCSTR lpOldFile); 
#line 987
__declspec(dllimport) LSTATUS __stdcall 
#line 990
RegReplaceKeyW(HKEY hKey, LPCWSTR lpSubKey, LPCWSTR lpNewFile, LPCWSTR lpOldFile); 
#line 1002 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winreg.h"
__declspec(dllimport) LSTATUS __stdcall 
#line 1005
RegRestoreKeyA(HKEY hKey, LPCSTR lpFile, DWORD dwFlags); 
#line 1011
__declspec(dllimport) LSTATUS __stdcall 
#line 1014
RegRestoreKeyW(HKEY hKey, LPCWSTR lpFile, DWORD dwFlags); 
#line 1026 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winreg.h"
#pragma endregion
#line 1028
#pragma region Desktop Family or OneCore Family
#line 1033
__declspec(dllimport) LSTATUS __stdcall 
#line 1036
RegRenameKey(HKEY hKey, LPCWSTR lpSubKeyName, LPCWSTR lpNewKeyName); 
#line 1045 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winreg.h"
#pragma endregion
#line 1047
#pragma region Application Family or OneCore Family
#line 1050
__declspec(dllimport) LSTATUS __stdcall 
#line 1053
RegSaveKeyA(HKEY hKey, LPCSTR lpFile, const LPSECURITY_ATTRIBUTES lpSecurityAttributes); 
#line 1058
__declspec(dllimport) LSTATUS __stdcall 
#line 1061
RegSaveKeyW(HKEY hKey, LPCWSTR lpFile, const LPSECURITY_ATTRIBUTES lpSecurityAttributes); 
#line 1072 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winreg.h"
__declspec(dllimport) LSTATUS __stdcall 
#line 1075
RegSetKeySecurity(HKEY hKey, SECURITY_INFORMATION SecurityInformation, PSECURITY_DESCRIPTOR pSecurityDescriptor); 
#line 1081
__declspec(dllimport) LSTATUS __stdcall 
#line 1084
RegSetValueA(HKEY hKey, LPCSTR lpSubKey, DWORD dwType, LPCSTR lpData, DWORD cbData); 
#line 1091
__declspec(dllimport) LSTATUS __stdcall 
#line 1094
RegSetValueW(HKEY hKey, LPCWSTR lpSubKey, DWORD dwType, LPCWSTR lpData, DWORD cbData); 
#line 1108 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winreg.h"
#pragma endregion
#line 1110
#pragma region Application Family or OneCore Family or Games Family
#line 1113
__declspec(dllimport) LSTATUS __stdcall 
#line 1116
RegSetValueExA(HKEY hKey, LPCSTR lpValueName, DWORD Reserved, DWORD dwType, const BYTE * lpData, DWORD cbData); 
#line 1125
__declspec(dllimport) LSTATUS __stdcall 
#line 1128
RegSetValueExW(HKEY hKey, LPCWSTR lpValueName, DWORD Reserved, DWORD dwType, const BYTE * lpData, DWORD cbData); 
#line 1143 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winreg.h"
#pragma endregion
#line 1145
#pragma region Application Family or OneCore Family
#line 1148
__declspec(dllimport) LSTATUS __stdcall 
#line 1151
RegUnLoadKeyA(HKEY hKey, LPCSTR lpSubKey); 
#line 1156
__declspec(dllimport) LSTATUS __stdcall 
#line 1159
RegUnLoadKeyW(HKEY hKey, LPCWSTR lpSubKey); 
#line 1174 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winreg.h"
__declspec(dllimport) LSTATUS __stdcall 
#line 1177
RegDeleteKeyValueA(HKEY hKey, LPCSTR lpSubKey, LPCSTR lpValueName); 
#line 1183
__declspec(dllimport) LSTATUS __stdcall 
#line 1186
RegDeleteKeyValueW(HKEY hKey, LPCWSTR lpSubKey, LPCWSTR lpValueName); 
#line 1197 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winreg.h"
__declspec(dllimport) LSTATUS __stdcall 
#line 1200
RegSetKeyValueA(HKEY hKey, LPCSTR lpSubKey, LPCSTR lpValueName, DWORD dwType, LPCVOID lpData, DWORD cbData); 
#line 1209
__declspec(dllimport) LSTATUS __stdcall 
#line 1212
RegSetKeyValueW(HKEY hKey, LPCWSTR lpSubKey, LPCWSTR lpValueName, DWORD dwType, LPCVOID lpData, DWORD cbData); 
#line 1226 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winreg.h"
__declspec(dllimport) LSTATUS __stdcall 
#line 1229
RegDeleteTreeA(HKEY hKey, LPCSTR lpSubKey); 
#line 1234
__declspec(dllimport) LSTATUS __stdcall 
#line 1237
RegDeleteTreeW(HKEY hKey, LPCWSTR lpSubKey); 
#line 1247 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winreg.h"
__declspec(dllimport) LSTATUS __stdcall 
#line 1250
RegCopyTreeA(HKEY hKeySrc, LPCSTR lpSubKey, HKEY hKeyDest); 
#line 1263 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winreg.h"
__declspec(dllimport) LSTATUS __stdcall 
#line 1266
RegGetValueA(HKEY hkey, LPCSTR lpSubKey, LPCSTR lpValue, DWORD dwFlags, LPDWORD pdwType, PVOID pvData, LPDWORD pcbData); 
#line 1283 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winreg.h"
__declspec(dllimport) LSTATUS __stdcall 
#line 1286
RegGetValueW(HKEY hkey, LPCWSTR lpSubKey, LPCWSTR lpValue, DWORD dwFlags, LPDWORD pdwType, PVOID pvData, LPDWORD pcbData); 
#line 1312 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winreg.h"
__declspec(dllimport) LSTATUS __stdcall 
#line 1315
RegCopyTreeW(HKEY hKeySrc, LPCWSTR lpSubKey, HKEY hKeyDest); 
#line 1324
__declspec(dllimport) LSTATUS __stdcall 
#line 1327
RegLoadMUIStringA(HKEY hKey, LPCSTR pszValue, LPSTR pszOutBuf, DWORD cbOutBuf, LPDWORD pcbData, DWORD Flags, LPCSTR pszDirectory); 
#line 1337
__declspec(dllimport) LSTATUS __stdcall 
#line 1340
RegLoadMUIStringW(HKEY hKey, LPCWSTR pszValue, LPWSTR pszOutBuf, DWORD cbOutBuf, LPDWORD pcbData, DWORD Flags, LPCWSTR pszDirectory); 
#line 1355 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winreg.h"
__declspec(dllimport) LSTATUS __stdcall 
#line 1358
RegLoadAppKeyA(LPCSTR lpFile, PHKEY phkResult, REGSAM samDesired, DWORD dwOptions, DWORD Reserved); 
#line 1366
__declspec(dllimport) LSTATUS __stdcall 
#line 1369
RegLoadAppKeyW(LPCWSTR lpFile, PHKEY phkResult, REGSAM samDesired, DWORD dwOptions, DWORD Reserved); 
#line 1385 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winreg.h"
#pragma endregion
#line 1387
#pragma region Desktop Family or OneCore Family
#line 1395
__declspec(dllimport) BOOL __stdcall 
#line 1398
InitiateSystemShutdownA(LPSTR lpMachineName, LPSTR lpMessage, DWORD dwTimeout, BOOL bForceAppsClosed, BOOL bRebootAfterShutdown); 
#line 1406
__declspec(dllimport) BOOL __stdcall 
#line 1409
InitiateSystemShutdownW(LPWSTR lpMachineName, LPWSTR lpMessage, DWORD dwTimeout, BOOL bForceAppsClosed, BOOL bRebootAfterShutdown); 
#line 1422 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winreg.h"
__declspec(dllimport) BOOL __stdcall 
#line 1425
AbortSystemShutdownA(LPSTR lpMachineName); 
#line 1428
__declspec(dllimport) BOOL __stdcall 
#line 1431
AbortSystemShutdownW(LPWSTR lpMachineName); 
#line 19 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\reason.h"
#pragma region Desktop Family
#line 124 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\reason.h"
#pragma endregion
#line 1466 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winreg.h"
__declspec(dllimport) BOOL __stdcall 
#line 1469
InitiateSystemShutdownExA(LPSTR lpMachineName, LPSTR lpMessage, DWORD dwTimeout, BOOL bForceAppsClosed, BOOL bRebootAfterShutdown, DWORD dwReason); 
#line 1480 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winreg.h"
__declspec(dllimport) BOOL __stdcall 
#line 1483
InitiateSystemShutdownExW(LPWSTR lpMachineName, LPWSTR lpMessage, DWORD dwTimeout, BOOL bForceAppsClosed, BOOL bRebootAfterShutdown, DWORD dwReason); 
#line 1519 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winreg.h"
__declspec(dllimport) DWORD __stdcall 
#line 1522
InitiateShutdownA(LPSTR lpMachineName, LPSTR lpMessage, DWORD dwGracePeriod, DWORD dwShutdownFlags, DWORD dwReason); 
#line 1529
__declspec(dllimport) DWORD __stdcall 
#line 1532
InitiateShutdownW(LPWSTR lpMachineName, LPWSTR lpMessage, DWORD dwGracePeriod, DWORD dwShutdownFlags, DWORD dwReason); 
#line 1545 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winreg.h"
__declspec(dllimport) DWORD __stdcall 
#line 1548
CheckForHiberboot(PBOOLEAN pHiberboot, BOOLEAN bClearFlag); 
#line 1554 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winreg.h"
#pragma endregion
#line 1556
#pragma region Application Family or OneCore Family
#line 1559
__declspec(dllimport) LSTATUS __stdcall 
#line 1562
RegSaveKeyExA(HKEY hKey, LPCSTR lpFile, const LPSECURITY_ATTRIBUTES lpSecurityAttributes, DWORD Flags); 
#line 1569
__declspec(dllimport) LSTATUS __stdcall 
#line 1572
RegSaveKeyExW(HKEY hKey, LPCWSTR lpFile, const LPSECURITY_ATTRIBUTES lpSecurityAttributes, DWORD Flags); 
#line 1592 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winreg.h"
}
#line 1585 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winreg.h"
#pragma endregion
#line 1588
#pragma warning(pop)
#line 33 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnetwk.h"
extern "C" {
#line 37 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnetwk.h"
#pragma warning(push)
#pragma warning(disable:4820)
#line 42 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnetwk.h"
#pragma region Desktop Family or System Family
#line 28 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\shared\\wnnc.h"
#pragma region Desktop Family or OneCore Family
#line 117 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\shared\\wnnc.h"
#pragma endregion
#line 109 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnetwk.h"
typedef 
#line 100
struct _NETRESOURCEA { 
#line 101
DWORD dwScope; 
#line 102
DWORD dwType; 
#line 103
DWORD dwDisplayType; 
#line 104
DWORD dwUsage; 
#line 105
LPSTR lpLocalName; 
#line 106
LPSTR lpRemoteName; 
#line 107
LPSTR lpComment; 
#line 108
LPSTR lpProvider; 
#line 109
} NETRESOURCEA, *LPNETRESOURCEA; 
#line 119
typedef 
#line 110
struct _NETRESOURCEW { 
#line 111
DWORD dwScope; 
#line 112
DWORD dwType; 
#line 113
DWORD dwDisplayType; 
#line 114
DWORD dwUsage; 
#line 115
LPWSTR lpLocalName; 
#line 116
LPWSTR lpRemoteName; 
#line 117
LPWSTR lpComment; 
#line 118
LPWSTR lpProvider; 
#line 119
} NETRESOURCEW, *LPNETRESOURCEW; 
#line 124
typedef NETRESOURCEA NETRESOURCE; 
#line 125
typedef LPNETRESOURCEA LPNETRESOURCE; 
#line 167 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnetwk.h"
DWORD __stdcall WNetAddConnectionA(LPCSTR lpRemoteName, LPCSTR lpPassword, LPCSTR lpLocalName); 
#line 174
DWORD __stdcall WNetAddConnectionW(LPCWSTR lpRemoteName, LPCWSTR lpPassword, LPCWSTR lpLocalName); 
#line 187 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnetwk.h"
DWORD __stdcall WNetAddConnection2A(LPNETRESOURCEA lpNetResource, LPCSTR lpPassword, LPCSTR lpUserName, DWORD dwFlags); 
#line 195
DWORD __stdcall WNetAddConnection2W(LPNETRESOURCEW lpNetResource, LPCWSTR lpPassword, LPCWSTR lpUserName, DWORD dwFlags); 
#line 209 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnetwk.h"
DWORD __stdcall WNetAddConnection3A(HWND hwndOwner, LPNETRESOURCEA lpNetResource, LPCSTR lpPassword, LPCSTR lpUserName, DWORD dwFlags); 
#line 218
DWORD __stdcall WNetAddConnection3W(HWND hwndOwner, LPNETRESOURCEW lpNetResource, LPCWSTR lpPassword, LPCWSTR lpUserName, DWORD dwFlags); 
#line 234 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnetwk.h"
DWORD __stdcall WNetAddConnection4A(HWND hwndOwner, LPNETRESOURCEA lpNetResource, PVOID pAuthBuffer, DWORD cbAuthBuffer, DWORD dwFlags, PBYTE lpUseOptions, DWORD cbUseOptions); 
#line 245
DWORD __stdcall WNetAddConnection4W(HWND hwndOwner, LPNETRESOURCEW lpNetResource, PVOID pAuthBuffer, DWORD cbAuthBuffer, DWORD dwFlags, PBYTE lpUseOptions, DWORD cbUseOptions); 
#line 263 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnetwk.h"
DWORD __stdcall WNetCancelConnectionA(LPCSTR lpName, BOOL fForce); 
#line 269
DWORD __stdcall WNetCancelConnectionW(LPCWSTR lpName, BOOL fForce); 
#line 281 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnetwk.h"
DWORD __stdcall WNetCancelConnection2A(LPCSTR lpName, DWORD dwFlags, BOOL fForce); 
#line 288
DWORD __stdcall WNetCancelConnection2W(LPCWSTR lpName, DWORD dwFlags, BOOL fForce); 
#line 301 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnetwk.h"
DWORD __stdcall WNetGetConnectionA(LPCSTR lpLocalName, LPSTR lpRemoteName, LPDWORD lpnLength); 
#line 308
DWORD __stdcall WNetGetConnectionW(LPCWSTR lpLocalName, LPWSTR lpRemoteName, LPDWORD lpnLength); 
#line 321 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnetwk.h"
#pragma endregion
#line 323
#pragma region Desktop Family
#line 329
DWORD __stdcall WNetRestoreSingleConnectionW(HWND hwndParent, LPCWSTR lpDevice, BOOL fUseUI); 
#line 346 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnetwk.h"
#pragma endregion
#line 348
#pragma region Desktop Family or System Family
#line 354
DWORD __stdcall WNetUseConnectionA(HWND hwndOwner, LPNETRESOURCEA lpNetResource, LPCSTR lpPassword, LPCSTR lpUserId, DWORD dwFlags, LPSTR lpAccessName, LPDWORD lpBufferSize, LPDWORD lpResult); 
#line 366
DWORD __stdcall WNetUseConnectionW(HWND hwndOwner, LPNETRESOURCEW lpNetResource, LPCWSTR lpPassword, LPCWSTR lpUserId, DWORD dwFlags, LPWSTR lpAccessName, LPDWORD lpBufferSize, LPDWORD lpResult); 
#line 386 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnetwk.h"
DWORD __stdcall WNetUseConnection4A(HWND hwndOwner, LPNETRESOURCEA lpNetResource, PVOID pAuthBuffer, DWORD cbAuthBuffer, DWORD dwFlags, PBYTE lpUseOptions, DWORD cbUseOptions, LPSTR lpAccessName, LPDWORD lpBufferSize, LPDWORD lpResult); 
#line 400
DWORD __stdcall WNetUseConnection4W(HWND hwndOwner, LPNETRESOURCEW lpNetResource, PVOID pAuthBuffer, DWORD cbAuthBuffer, DWORD dwFlags, PBYTE lpUseOptions, DWORD cbUseOptions, LPWSTR lpAccessName, LPDWORD lpBufferSize, LPDWORD lpResult); 
#line 425 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnetwk.h"
DWORD __stdcall WNetConnectionDialog(HWND hwnd, DWORD dwType); 
#line 432
DWORD __stdcall WNetDisconnectDialog(HWND hwnd, DWORD dwType); 
#line 444
typedef 
#line 438
struct _CONNECTDLGSTRUCTA { 
#line 439
DWORD cbStructure; 
#line 440
HWND hwndOwner; 
#line 441
LPNETRESOURCEA lpConnRes; 
#line 442
DWORD dwFlags; 
#line 443
DWORD dwDevNum; 
#line 444
} CONNECTDLGSTRUCTA, *LPCONNECTDLGSTRUCTA; 
#line 451
typedef 
#line 445
struct _CONNECTDLGSTRUCTW { 
#line 446
DWORD cbStructure; 
#line 447
HWND hwndOwner; 
#line 448
LPNETRESOURCEW lpConnRes; 
#line 449
DWORD dwFlags; 
#line 450
DWORD dwDevNum; 
#line 451
} CONNECTDLGSTRUCTW, *LPCONNECTDLGSTRUCTW; 
#line 456
typedef CONNECTDLGSTRUCTA CONNECTDLGSTRUCT; 
#line 457
typedef LPCONNECTDLGSTRUCTA LPCONNECTDLGSTRUCT; 
#line 475 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnetwk.h"
DWORD __stdcall WNetConnectionDialog1A(LPCONNECTDLGSTRUCTA lpConnDlgStruct); 
#line 480
DWORD __stdcall WNetConnectionDialog1W(LPCONNECTDLGSTRUCTW lpConnDlgStruct); 
#line 495 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnetwk.h"
typedef 
#line 489
struct _DISCDLGSTRUCTA { 
#line 490
DWORD cbStructure; 
#line 491
HWND hwndOwner; 
#line 492
LPSTR lpLocalName; 
#line 493
LPSTR lpRemoteName; 
#line 494
DWORD dwFlags; 
#line 495
} DISCDLGSTRUCTA, *LPDISCDLGSTRUCTA; 
#line 502
typedef 
#line 496
struct _DISCDLGSTRUCTW { 
#line 497
DWORD cbStructure; 
#line 498
HWND hwndOwner; 
#line 499
LPWSTR lpLocalName; 
#line 500
LPWSTR lpRemoteName; 
#line 501
DWORD dwFlags; 
#line 502
} DISCDLGSTRUCTW, *LPDISCDLGSTRUCTW; 
#line 507
typedef DISCDLGSTRUCTA DISCDLGSTRUCT; 
#line 508
typedef LPDISCDLGSTRUCTA LPDISCDLGSTRUCT; 
#line 516 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnetwk.h"
DWORD __stdcall WNetDisconnectDialog1A(LPDISCDLGSTRUCTA lpConnDlgStruct); 
#line 521
DWORD __stdcall WNetDisconnectDialog1W(LPDISCDLGSTRUCTW lpConnDlgStruct); 
#line 537 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnetwk.h"
DWORD __stdcall WNetOpenEnumA(DWORD dwScope, DWORD dwType, DWORD dwUsage, LPNETRESOURCEA lpNetResource, LPHANDLE lphEnum); 
#line 546
DWORD __stdcall WNetOpenEnumW(DWORD dwScope, DWORD dwType, DWORD dwUsage, LPNETRESOURCEW lpNetResource, LPHANDLE lphEnum); 
#line 561 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnetwk.h"
DWORD __stdcall WNetEnumResourceA(HANDLE hEnum, LPDWORD lpcCount, LPVOID lpBuffer, LPDWORD lpBufferSize); 
#line 569
DWORD __stdcall WNetEnumResourceW(HANDLE hEnum, LPDWORD lpcCount, LPVOID lpBuffer, LPDWORD lpBufferSize); 
#line 583 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnetwk.h"
DWORD __stdcall WNetCloseEnum(HANDLE hEnum); 
#line 590
DWORD __stdcall WNetGetResourceParentA(LPNETRESOURCEA lpNetResource, LPVOID lpBuffer, LPDWORD lpcbBuffer); 
#line 597
DWORD __stdcall WNetGetResourceParentW(LPNETRESOURCEW lpNetResource, LPVOID lpBuffer, LPDWORD lpcbBuffer); 
#line 610 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnetwk.h"
DWORD __stdcall WNetGetResourceInformationA(LPNETRESOURCEA lpNetResource, LPVOID lpBuffer, LPDWORD lpcbBuffer, LPSTR * lplpSystem); 
#line 618
DWORD __stdcall WNetGetResourceInformationW(LPNETRESOURCEW lpNetResource, LPVOID lpBuffer, LPDWORD lpcbBuffer, LPWSTR * lplpSystem); 
#line 640 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnetwk.h"
typedef 
#line 638
struct _UNIVERSAL_NAME_INFOA { 
#line 639
LPSTR lpUniversalName; 
#line 640
} UNIVERSAL_NAME_INFOA, *LPUNIVERSAL_NAME_INFOA; 
#line 643
typedef 
#line 641
struct _UNIVERSAL_NAME_INFOW { 
#line 642
LPWSTR lpUniversalName; 
#line 643
} UNIVERSAL_NAME_INFOW, *LPUNIVERSAL_NAME_INFOW; 
#line 648
typedef UNIVERSAL_NAME_INFOA UNIVERSAL_NAME_INFO; 
#line 649
typedef LPUNIVERSAL_NAME_INFOA LPUNIVERSAL_NAME_INFO; 
#line 656 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnetwk.h"
typedef 
#line 652
struct _REMOTE_NAME_INFOA { 
#line 653
LPSTR lpUniversalName; 
#line 654
LPSTR lpConnectionName; 
#line 655
LPSTR lpRemainingPath; 
#line 656
} REMOTE_NAME_INFOA, *LPREMOTE_NAME_INFOA; 
#line 661
typedef 
#line 657
struct _REMOTE_NAME_INFOW { 
#line 658
LPWSTR lpUniversalName; 
#line 659
LPWSTR lpConnectionName; 
#line 660
LPWSTR lpRemainingPath; 
#line 661
} REMOTE_NAME_INFOW, *LPREMOTE_NAME_INFOW; 
#line 666
typedef REMOTE_NAME_INFOA REMOTE_NAME_INFO; 
#line 667
typedef LPREMOTE_NAME_INFOA LPREMOTE_NAME_INFO; 
#line 672 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnetwk.h"
DWORD __stdcall WNetGetUniversalNameA(LPCSTR lpLocalPath, DWORD dwInfoLevel, LPVOID lpBuffer, LPDWORD lpBufferSize); 
#line 680
DWORD __stdcall WNetGetUniversalNameW(LPCWSTR lpLocalPath, DWORD dwInfoLevel, LPVOID lpBuffer, LPDWORD lpBufferSize); 
#line 697 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnetwk.h"
DWORD __stdcall WNetGetUserA(LPCSTR lpName, LPSTR lpUserName, LPDWORD lpnLength); 
#line 707
DWORD __stdcall WNetGetUserW(LPCWSTR lpName, LPWSTR lpUserName, LPDWORD lpnLength); 
#line 735 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnetwk.h"
DWORD __stdcall WNetGetProviderNameA(DWORD dwNetType, LPSTR lpProviderName, LPDWORD lpBufferSize); 
#line 742
DWORD __stdcall WNetGetProviderNameW(DWORD dwNetType, LPWSTR lpProviderName, LPDWORD lpBufferSize); 
#line 762 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnetwk.h"
typedef 
#line 753
struct _NETINFOSTRUCT { 
#line 754
DWORD cbStructure; 
#line 755
DWORD dwProviderVersion; 
#line 756
DWORD dwStatus; 
#line 757
DWORD dwCharacteristics; 
#line 758
ULONG_PTR dwHandle; 
#line 759
WORD wNetType; 
#line 760
DWORD dwPrinters; 
#line 761
DWORD dwDrives; 
#line 762
} NETINFOSTRUCT, *LPNETINFOSTRUCT; 
#line 770
DWORD __stdcall WNetGetNetworkInformationA(LPCSTR lpProvider, LPNETINFOSTRUCT lpNetInfoStruct); 
#line 776
DWORD __stdcall WNetGetNetworkInformationW(LPCWSTR lpProvider, LPNETINFOSTRUCT lpNetInfoStruct); 
#line 794 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnetwk.h"
DWORD __stdcall WNetGetLastErrorA(LPDWORD lpError, LPSTR lpErrorBuf, DWORD nErrorBufSize, LPSTR lpNameBuf, DWORD nNameBufSize); 
#line 803
DWORD __stdcall WNetGetLastErrorW(LPDWORD lpError, LPWSTR lpErrorBuf, DWORD nErrorBufSize, LPWSTR lpNameBuf, DWORD nNameBufSize); 
#line 891 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnetwk.h"
typedef 
#line 885
struct _NETCONNECTINFOSTRUCT { 
#line 886
DWORD cbStructure; 
#line 887
DWORD dwFlags; 
#line 888
DWORD dwSpeed; 
#line 889
DWORD dwDelay; 
#line 890
DWORD dwOptDataSize; 
#line 891
} NETCONNECTINFOSTRUCT, *LPNETCONNECTINFOSTRUCT; 
#line 900
DWORD __stdcall MultinetGetConnectionPerformanceA(LPNETRESOURCEA lpNetResource, LPNETCONNECTINFOSTRUCT lpNetConnectInfoStruct); 
#line 906
DWORD __stdcall MultinetGetConnectionPerformanceW(LPNETRESOURCEW lpNetResource, LPNETCONNECTINFOSTRUCT lpNetConnectInfoStruct); 
#line 927 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnetwk.h"
}
#line 919 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winnetwk.h"
#pragma endregion
#line 923
#pragma warning(pop)
#line 65 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\shared\\stralign.h"
extern "C" {
#line 68 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\shared\\stralign.h"
#pragma region Desktop Family
#line 81
#pragma warning(push)
#pragma warning(disable:4127)
#line 153 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\shared\\stralign.h"
LPUWSTR __stdcall uaw_CharUpperW(LPUWSTR String); 
#line 159
int __stdcall uaw_lstrcmpW(PCUWSTR String1, PCUWSTR String2); 
#line 166
int __stdcall uaw_lstrcmpiW(PCUWSTR String1, PCUWSTR String2); 
#line 173
int __stdcall uaw_lstrlenW(LPCUWSTR String); 
#line 179
PUWSTR __cdecl uaw_wcschr(PCUWSTR String, WCHAR Character); 
#line 186
PUWSTR __cdecl uaw_wcscpy(PUWSTR Destination, PCUWSTR Source); 
#line 193
int __cdecl uaw_wcsicmp(PCUWSTR String1, PCUWSTR String2); 
#line 200
size_t __cdecl uaw_wcslen(PCUWSTR String); 
#line 206
PUWSTR __cdecl uaw_wcsrchr(PCUWSTR String, WCHAR Character); 
#line 222
static __inline LPUWSTR ua_CharUpperW(LPUWSTR 
#line 223
String) 
#line 225
{ 
#line 226
if (1) { 
#line 227
return CharUpperW((PWSTR)String); 
#line 228
} else { 
#line 229
return uaw_CharUpperW(String); 
#line 230
}  
#line 231
} 
#line 238 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\shared\\stralign.h"
static __inline int ua_lstrcmpW(LPCUWSTR 
#line 239
String1, LPCUWSTR 
#line 240
String2) 
#line 242
{ 
#line 243
if ((1) && (1)) { 
#line 244
return lstrcmpW((LPCWSTR)String1, (LPCWSTR)String2); 
#line 245
} else { 
#line 246
return uaw_lstrcmpW(String1, String2); 
#line 247
}  
#line 248
} 
#line 255 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\shared\\stralign.h"
static __inline int ua_lstrcmpiW(LPCUWSTR 
#line 256
String1, LPCUWSTR 
#line 257
String2) 
#line 259
{ 
#line 260
if ((1) && (1)) { 
#line 261
return lstrcmpiW((LPCWSTR)String1, (LPCWSTR)String2); 
#line 262
} else { 
#line 263
return uaw_lstrcmpiW(String1, String2); 
#line 264
}  
#line 265
} 
#line 272 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\shared\\stralign.h"
static __inline int ua_lstrlenW(LPCUWSTR 
#line 273
String) 
#line 275
{ 
#line 276
if (1) { 
#pragma warning(suppress: 28750)
return lstrlenW((PCWSTR)String); 
#line 279
} else { 
#line 280
return uaw_lstrlenW(String); 
#line 281
}  
#line 282
} 
#line 316 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\shared\\stralign.h"
typedef const __unaligned WCHAR *PUWSTR_C; 
#line 328 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\shared\\stralign.h"
static __inline PUWSTR_C ua_wcschr(PCUWSTR 
#line 329
String, WCHAR 
#line 330
Character) 
#line 332
{ 
#line 333
if (1) { 
#line 334
return wcschr((PCWSTR)String, Character); 
#line 335
} else { 
#line 336
return (PUWSTR_C)uaw_wcschr(String, Character); 
#line 337
}  
#line 338
} 
#line 343
static __inline PUWSTR_C ua_wcsrchr(PCUWSTR 
#line 344
String, WCHAR 
#line 345
Character) 
#line 347
{ 
#line 348
if (1) { 
#line 349
return wcsrchr((PCWSTR)String, Character); 
#line 350
} else { 
#line 351
return (PUWSTR_C)uaw_wcsrchr(String, Character); 
#line 352
}  
#line 353
} 
#line 418 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\shared\\stralign.h"
__declspec(deprecated) static __inline PUWSTR 
#line 419
ua_wcscpy(PUWSTR 
#line 420
Destination, PCUWSTR 
#line 421
Source) 
#line 423
{ 
#line 424
if ((1) && (1)) { 
#pragma warning(push)
#pragma warning(disable:4995)
#pragma warning(disable:4996)
#line 431
return wcscpy((PWSTR)Destination, (PCWSTR)Source); 
#pragma warning(pop)
} else { 
#line 434
return uaw_wcscpy(Destination, Source); 
#line 435
}  
#line 436
} 
#line 443
static __inline PUWSTR ua_wcscpy_s(PUWSTR 
#line 444
Destination, size_t 
#line 445
DestinationSize, PCUWSTR 
#line 446
Source) 
#line 448
{ 
#line 449
if ((1) && (1)) { 
#line 450
return ((wcscpy_s((PWSTR)Destination, DestinationSize, (PCWSTR)Source) == 0) ? Destination : (0)); 
#line 451
} else { 
#line 453
return uaw_wcscpy(Destination, Source); 
#line 454
}  
#line 455
} 
#line 461 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\shared\\stralign.h"
static __inline size_t ua_wcslen(PCUWSTR 
#line 462
String) 
#line 464
{ 
#line 465
if (1) { 
#line 466
return wcslen((PCWSTR)String); 
#line 467
} else { 
#line 468
return uaw_wcslen(String); 
#line 469
}  
#line 470
} 
#line 477 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\shared\\stralign.h"
static __inline int ua_wcsicmp(PCUWSTR 
#line 478
String1, PCUWSTR 
#line 479
String2) 
#line 481
{ 
#line 482
if ((1) && (1)) { 
#line 483
return _wcsicmp((LPCWSTR)String1, (LPCWSTR)String2); 
#line 484
} else { 
#line 485
return uaw_wcsicmp(String1, String2); 
#line 486
}  
#line 487
} 
#line 683 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\shared\\stralign.h"
}
#line 676 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\shared\\stralign.h"
#pragma warning(pop)
#line 680 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\shared\\stralign.h"
#pragma endregion
#line 36 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winsvc.h"
#pragma warning(push)
#pragma warning(disable:4820)
#line 41 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winsvc.h"
extern "C" {
#line 44 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winsvc.h"
#pragma region Desktop Family or OneCore Family
#line 363 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winsvc.h"
extern const GUID NETWORK_MANAGER_FIRST_IP_ADDRESS_ARRIVAL_GUID; 
#line 371 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winsvc.h"
extern const GUID NETWORK_MANAGER_LAST_IP_ADDRESS_REMOVAL_GUID; 
#line 382 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winsvc.h"
extern const GUID DOMAIN_JOIN_GUID; 
#line 390 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winsvc.h"
extern const GUID DOMAIN_LEAVE_GUID; 
#line 402 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winsvc.h"
extern const GUID FIREWALL_PORT_OPEN_GUID; 
#line 410 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winsvc.h"
extern const GUID FIREWALL_PORT_CLOSE_GUID; 
#line 422 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winsvc.h"
extern const GUID MACHINE_POLICY_PRESENT_GUID; 
#line 430 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winsvc.h"
extern const GUID USER_POLICY_PRESENT_GUID; 
#line 442 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winsvc.h"
extern const GUID RPC_INTERFACE_EVENT_GUID; 
#line 450 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winsvc.h"
extern const GUID NAMED_PIPE_EVENT_GUID; 
#line 461 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winsvc.h"
extern const GUID CUSTOM_SYSTEM_STATE_CHANGE_EVENT_GUID; 
#line 475 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winsvc.h"
typedef 
#line 473
struct { 
#line 474
DWORD Data[2]; 
#line 475
} SERVICE_TRIGGER_CUSTOM_STATE_ID; 
#line 485
typedef 
#line 477
struct _SERVICE_CUSTOM_SYSTEM_STATE_CHANGE_DATA_ITEM { 
#line 478
union { 
#line 479
SERVICE_TRIGGER_CUSTOM_STATE_ID CustomStateId; 
#line 480
struct { 
#line 481
DWORD DataOffset; 
#line 482
BYTE Data[1]; 
#line 483
} s; 
#line 484
} u; 
#line 485
} SERVICE_CUSTOM_SYSTEM_STATE_CHANGE_DATA_ITEM, *LPSERVICE_CUSTOM_SYSTEM_STATE_CHANGE_DATA_ITEM; 
#line 504
typedef 
#line 502
struct _SERVICE_DESCRIPTIONA { 
#line 503
LPSTR lpDescription; 
#line 504
} SERVICE_DESCRIPTIONA, *LPSERVICE_DESCRIPTIONA; 
#line 510
typedef 
#line 508
struct _SERVICE_DESCRIPTIONW { 
#line 509
LPWSTR lpDescription; 
#line 510
} SERVICE_DESCRIPTIONW, *LPSERVICE_DESCRIPTIONW; 
#line 515
typedef SERVICE_DESCRIPTIONA SERVICE_DESCRIPTION; 
#line 516
typedef LPSERVICE_DESCRIPTIONA LPSERVICE_DESCRIPTION; 
#line 528 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winsvc.h"
typedef 
#line 522
enum _SC_ACTION_TYPE { 
#line 523
SC_ACTION_NONE, 
#line 524
SC_ACTION_RESTART, 
#line 525
SC_ACTION_REBOOT, 
#line 526
SC_ACTION_RUN_COMMAND, 
#line 527
SC_ACTION_OWN_RESTART
#line 528
} SC_ACTION_TYPE; 
#line 533
typedef 
#line 530
struct _SC_ACTION { 
#line 531
SC_ACTION_TYPE Type; 
#line 532
DWORD Delay; 
#line 533
} SC_ACTION, *LPSC_ACTION; 
#line 547
typedef 
#line 535
struct _SERVICE_FAILURE_ACTIONSA { 
#line 536
DWORD dwResetPeriod; 
#line 537
LPSTR lpRebootMsg; 
#line 538
LPSTR lpCommand; 
#line 542
DWORD cActions; 
#line 546
SC_ACTION *lpsaActions; 
#line 547
} SERVICE_FAILURE_ACTIONSA, *LPSERVICE_FAILURE_ACTIONSA; 
#line 560
typedef 
#line 548
struct _SERVICE_FAILURE_ACTIONSW { 
#line 549
DWORD dwResetPeriod; 
#line 550
LPWSTR lpRebootMsg; 
#line 551
LPWSTR lpCommand; 
#line 555
DWORD cActions; 
#line 559
SC_ACTION *lpsaActions; 
#line 560
} SERVICE_FAILURE_ACTIONSW, *LPSERVICE_FAILURE_ACTIONSW; 
#line 565
typedef SERVICE_FAILURE_ACTIONSA SERVICE_FAILURE_ACTIONS; 
#line 566
typedef LPSERVICE_FAILURE_ACTIONSA LPSERVICE_FAILURE_ACTIONS; 
#line 574 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winsvc.h"
typedef 
#line 572
struct _SERVICE_DELAYED_AUTO_START_INFO { 
#line 573
BOOL fDelayedAutostart; 
#line 574
} SERVICE_DELAYED_AUTO_START_INFO, *LPSERVICE_DELAYED_AUTO_START_INFO; 
#line 581
typedef 
#line 579
struct _SERVICE_FAILURE_ACTIONS_FLAG { 
#line 580
BOOL fFailureActionsOnNonCrashFailures; 
#line 581
} SERVICE_FAILURE_ACTIONS_FLAG, *LPSERVICE_FAILURE_ACTIONS_FLAG; 
#line 588
typedef 
#line 586
struct _SERVICE_SID_INFO { 
#line 587
DWORD dwServiceSidType; 
#line 588
} SERVICE_SID_INFO, *LPSERVICE_SID_INFO; 
#line 595
typedef 
#line 593
struct _SERVICE_REQUIRED_PRIVILEGES_INFOA { 
#line 594
LPSTR pmszRequiredPrivileges; 
#line 595
} SERVICE_REQUIRED_PRIVILEGES_INFOA, *LPSERVICE_REQUIRED_PRIVILEGES_INFOA; 
#line 601
typedef 
#line 599
struct _SERVICE_REQUIRED_PRIVILEGES_INFOW { 
#line 600
LPWSTR pmszRequiredPrivileges; 
#line 601
} SERVICE_REQUIRED_PRIVILEGES_INFOW, *LPSERVICE_REQUIRED_PRIVILEGES_INFOW; 
#line 606
typedef SERVICE_REQUIRED_PRIVILEGES_INFOA SERVICE_REQUIRED_PRIVILEGES_INFO; 
#line 607
typedef LPSERVICE_REQUIRED_PRIVILEGES_INFOA LPSERVICE_REQUIRED_PRIVILEGES_INFO; 
#line 615 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winsvc.h"
typedef 
#line 613
struct _SERVICE_PRESHUTDOWN_INFO { 
#line 614
DWORD dwPreshutdownTimeout; 
#line 615
} SERVICE_PRESHUTDOWN_INFO, *LPSERVICE_PRESHUTDOWN_INFO; 
#line 631
typedef 
#line 620
struct _SERVICE_TRIGGER_SPECIFIC_DATA_ITEM { 
#line 622
DWORD dwDataType; 
#line 626
DWORD cbData; 
#line 630
PBYTE pData; 
#line 631
} SERVICE_TRIGGER_SPECIFIC_DATA_ITEM, *PSERVICE_TRIGGER_SPECIFIC_DATA_ITEM; 
#line 652
typedef 
#line 636
struct _SERVICE_TRIGGER { 
#line 638
DWORD dwTriggerType; 
#line 639
DWORD dwAction; 
#line 640
GUID *pTriggerSubtype; 
#line 647
DWORD cDataItems; 
#line 651
PSERVICE_TRIGGER_SPECIFIC_DATA_ITEM pDataItems; 
#line 652
} SERVICE_TRIGGER, *PSERVICE_TRIGGER; 
#line 667
typedef 
#line 657
struct _SERVICE_TRIGGER_INFO { 
#line 661
DWORD cTriggers; 
#line 665
PSERVICE_TRIGGER pTriggers; 
#line 666
PBYTE pReserved; 
#line 667
} SERVICE_TRIGGER_INFO, *PSERVICE_TRIGGER_INFO; 
#line 677
typedef 
#line 674
struct _SERVICE_PREFERRED_NODE_INFO { 
#line 675
USHORT usPreferredNode; 
#line 676
BOOLEAN fDelete; 
#line 677
} SERVICE_PREFERRED_NODE_INFO, *LPSERVICE_PREFERRED_NODE_INFO; 
#line 685
typedef 
#line 682
struct _SERVICE_TIMECHANGE_INFO { 
#line 683
LARGE_INTEGER liNewTime; 
#line 684
LARGE_INTEGER liOldTime; 
#line 685
} SERVICE_TIMECHANGE_INFO, *PSERVICE_TIMECHANGE_INFO; 
#line 692
typedef 
#line 690
struct _SERVICE_LAUNCH_PROTECTED_INFO { 
#line 691
DWORD dwLaunchProtected; 
#line 692
} SERVICE_LAUNCH_PROTECTED_INFO, *PSERVICE_LAUNCH_PROTECTED_INFO; 
#line 698
struct SC_HANDLE__ { int unused; }; typedef SC_HANDLE__ *SC_HANDLE; 
#line 699
typedef SC_HANDLE *LPSC_HANDLE; 
#line 701
struct SERVICE_STATUS_HANDLE__ { int unused; }; typedef SERVICE_STATUS_HANDLE__ *SERVICE_STATUS_HANDLE; 
#line 709
typedef 
#line 707
enum _SC_STATUS_TYPE { 
#line 708
SC_STATUS_PROCESS_INFO
#line 709
} SC_STATUS_TYPE; 
#line 716
typedef 
#line 714
enum _SC_ENUM_TYPE { 
#line 715
SC_ENUM_PROCESS_INFO
#line 716
} SC_ENUM_TYPE; 
#line 731
typedef 
#line 723
struct _SERVICE_STATUS { 
#line 724
DWORD dwServiceType; 
#line 725
DWORD dwCurrentState; 
#line 726
DWORD dwControlsAccepted; 
#line 727
DWORD dwWin32ExitCode; 
#line 728
DWORD dwServiceSpecificExitCode; 
#line 729
DWORD dwCheckPoint; 
#line 730
DWORD dwWaitHint; 
#line 731
} SERVICE_STATUS, *LPSERVICE_STATUS; 
#line 743
typedef 
#line 733
struct _SERVICE_STATUS_PROCESS { 
#line 734
DWORD dwServiceType; 
#line 735
DWORD dwCurrentState; 
#line 736
DWORD dwControlsAccepted; 
#line 737
DWORD dwWin32ExitCode; 
#line 738
DWORD dwServiceSpecificExitCode; 
#line 739
DWORD dwCheckPoint; 
#line 740
DWORD dwWaitHint; 
#line 741
DWORD dwProcessId; 
#line 742
DWORD dwServiceFlags; 
#line 743
} SERVICE_STATUS_PROCESS, *LPSERVICE_STATUS_PROCESS; 
#line 754
typedef 
#line 750
struct _ENUM_SERVICE_STATUSA { 
#line 751
LPSTR lpServiceName; 
#line 752
LPSTR lpDisplayName; 
#line 753
SERVICE_STATUS ServiceStatus; 
#line 754
} ENUM_SERVICE_STATUSA, *LPENUM_SERVICE_STATUSA; 
#line 759
typedef 
#line 755
struct _ENUM_SERVICE_STATUSW { 
#line 756
LPWSTR lpServiceName; 
#line 757
LPWSTR lpDisplayName; 
#line 758
SERVICE_STATUS ServiceStatus; 
#line 759
} ENUM_SERVICE_STATUSW, *LPENUM_SERVICE_STATUSW; 
#line 764
typedef ENUM_SERVICE_STATUSA ENUM_SERVICE_STATUS; 
#line 765
typedef LPENUM_SERVICE_STATUSA LPENUM_SERVICE_STATUS; 
#line 772 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winsvc.h"
typedef 
#line 768
struct _ENUM_SERVICE_STATUS_PROCESSA { 
#line 769
LPSTR lpServiceName; 
#line 770
LPSTR lpDisplayName; 
#line 771
SERVICE_STATUS_PROCESS ServiceStatusProcess; 
#line 772
} ENUM_SERVICE_STATUS_PROCESSA, *LPENUM_SERVICE_STATUS_PROCESSA; 
#line 777
typedef 
#line 773
struct _ENUM_SERVICE_STATUS_PROCESSW { 
#line 774
LPWSTR lpServiceName; 
#line 775
LPWSTR lpDisplayName; 
#line 776
SERVICE_STATUS_PROCESS ServiceStatusProcess; 
#line 777
} ENUM_SERVICE_STATUS_PROCESSW, *LPENUM_SERVICE_STATUS_PROCESSW; 
#line 782
typedef ENUM_SERVICE_STATUS_PROCESSA ENUM_SERVICE_STATUS_PROCESS; 
#line 783
typedef LPENUM_SERVICE_STATUS_PROCESSA LPENUM_SERVICE_STATUS_PROCESS; 
#line 790 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winsvc.h"
typedef LPVOID SC_LOCK; 
#line 796
typedef 
#line 792
struct _QUERY_SERVICE_LOCK_STATUSA { 
#line 793
DWORD fIsLocked; 
#line 794
LPSTR lpLockOwner; 
#line 795
DWORD dwLockDuration; 
#line 796
} QUERY_SERVICE_LOCK_STATUSA, *LPQUERY_SERVICE_LOCK_STATUSA; 
#line 801
typedef 
#line 797
struct _QUERY_SERVICE_LOCK_STATUSW { 
#line 798
DWORD fIsLocked; 
#line 799
LPWSTR lpLockOwner; 
#line 800
DWORD dwLockDuration; 
#line 801
} QUERY_SERVICE_LOCK_STATUSW, *LPQUERY_SERVICE_LOCK_STATUSW; 
#line 806
typedef QUERY_SERVICE_LOCK_STATUSA QUERY_SERVICE_LOCK_STATUS; 
#line 807
typedef LPQUERY_SERVICE_LOCK_STATUSA LPQUERY_SERVICE_LOCK_STATUS; 
#line 826 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winsvc.h"
typedef 
#line 816
struct _QUERY_SERVICE_CONFIGA { 
#line 817
DWORD dwServiceType; 
#line 818
DWORD dwStartType; 
#line 819
DWORD dwErrorControl; 
#line 820
LPSTR lpBinaryPathName; 
#line 821
LPSTR lpLoadOrderGroup; 
#line 822
DWORD dwTagId; 
#line 823
LPSTR lpDependencies; 
#line 824
LPSTR lpServiceStartName; 
#line 825
LPSTR lpDisplayName; 
#line 826
} QUERY_SERVICE_CONFIGA, *LPQUERY_SERVICE_CONFIGA; 
#line 837
typedef 
#line 827
struct _QUERY_SERVICE_CONFIGW { 
#line 828
DWORD dwServiceType; 
#line 829
DWORD dwStartType; 
#line 830
DWORD dwErrorControl; 
#line 831
LPWSTR lpBinaryPathName; 
#line 832
LPWSTR lpLoadOrderGroup; 
#line 833
DWORD dwTagId; 
#line 834
LPWSTR lpDependencies; 
#line 835
LPWSTR lpServiceStartName; 
#line 836
LPWSTR lpDisplayName; 
#line 837
} QUERY_SERVICE_CONFIGW, *LPQUERY_SERVICE_CONFIGW; 
#line 842
typedef QUERY_SERVICE_CONFIGA QUERY_SERVICE_CONFIG; 
#line 843
typedef LPQUERY_SERVICE_CONFIGA LPQUERY_SERVICE_CONFIG; 
#line 852 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winsvc.h"
typedef void __stdcall SERVICE_MAIN_FUNCTIONW(DWORD dwNumServicesArgs, LPWSTR * lpServiceArgVectors); 
#line 857
typedef void __stdcall SERVICE_MAIN_FUNCTIONA(DWORD dwNumServicesArgs, LPTSTR * lpServiceArgVectors); 
#line 868 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winsvc.h"
typedef void (__stdcall *LPSERVICE_MAIN_FUNCTIONW)(DWORD dwNumServicesArgs, LPWSTR * lpServiceArgVectors); 
#line 873
typedef void (__stdcall *LPSERVICE_MAIN_FUNCTIONA)(DWORD dwNumServicesArgs, LPSTR * lpServiceArgVectors); 
#line 892 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winsvc.h"
typedef 
#line 889
struct _SERVICE_TABLE_ENTRYA { 
#line 890
LPSTR lpServiceName; 
#line 891
LPSERVICE_MAIN_FUNCTIONA lpServiceProc; 
#line 892
} SERVICE_TABLE_ENTRYA, *LPSERVICE_TABLE_ENTRYA; 
#line 896
typedef 
#line 893
struct _SERVICE_TABLE_ENTRYW { 
#line 894
LPWSTR lpServiceName; 
#line 895
LPSERVICE_MAIN_FUNCTIONW lpServiceProc; 
#line 896
} SERVICE_TABLE_ENTRYW, *LPSERVICE_TABLE_ENTRYW; 
#line 901
typedef SERVICE_TABLE_ENTRYA SERVICE_TABLE_ENTRY; 
#line 902
typedef LPSERVICE_TABLE_ENTRYA LPSERVICE_TABLE_ENTRY; 
#line 909 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winsvc.h"
typedef void __stdcall HANDLER_FUNCTION(DWORD dwControl); 
#line 913
typedef DWORD __stdcall HANDLER_FUNCTION_EX(DWORD dwControl, DWORD dwEventType, LPVOID lpEventData, LPVOID lpContext); 
#line 920
typedef void (__stdcall *LPHANDLER_FUNCTION)(DWORD dwControl); 
#line 924
typedef DWORD (__stdcall *LPHANDLER_FUNCTION_EX)(DWORD dwControl, DWORD dwEventType, LPVOID lpEventData, LPVOID lpContext); 
#line 936
typedef void (__stdcall *PFN_SC_NOTIFY_CALLBACK)(PVOID pParameter); 
#line 949
typedef 
#line 943
struct _SERVICE_NOTIFY_1 { 
#line 944
DWORD dwVersion; 
#line 945
PFN_SC_NOTIFY_CALLBACK pfnNotifyCallback; 
#line 946
PVOID pContext; 
#line 947
DWORD dwNotificationStatus; 
#line 948
SERVICE_STATUS_PROCESS ServiceStatus; 
#line 949
} SERVICE_NOTIFY_1, *PSERVICE_NOTIFY_1; 
#line 959
typedef 
#line 951
struct _SERVICE_NOTIFY_2A { 
#line 952
DWORD dwVersion; 
#line 953
PFN_SC_NOTIFY_CALLBACK pfnNotifyCallback; 
#line 954
PVOID pContext; 
#line 955
DWORD dwNotificationStatus; 
#line 956
SERVICE_STATUS_PROCESS ServiceStatus; 
#line 957
DWORD dwNotificationTriggered; 
#line 958
LPSTR pszServiceNames; 
#line 959
} SERVICE_NOTIFY_2A, *PSERVICE_NOTIFY_2A; 
#line 968
typedef 
#line 960
struct _SERVICE_NOTIFY_2W { 
#line 961
DWORD dwVersion; 
#line 962
PFN_SC_NOTIFY_CALLBACK pfnNotifyCallback; 
#line 963
PVOID pContext; 
#line 964
DWORD dwNotificationStatus; 
#line 965
SERVICE_STATUS_PROCESS ServiceStatus; 
#line 966
DWORD dwNotificationTriggered; 
#line 967
LPWSTR pszServiceNames; 
#line 968
} SERVICE_NOTIFY_2W, *PSERVICE_NOTIFY_2W; 
#line 973
typedef SERVICE_NOTIFY_2A SERVICE_NOTIFY_2; 
#line 974
typedef PSERVICE_NOTIFY_2A PSERVICE_NOTIFY_2; 
#line 977 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winsvc.h"
typedef SERVICE_NOTIFY_2A SERVICE_NOTIFYA, *PSERVICE_NOTIFYA; 
#line 978
typedef SERVICE_NOTIFY_2W SERVICE_NOTIFYW, *PSERVICE_NOTIFYW; 
#line 983
typedef SERVICE_NOTIFYA SERVICE_NOTIFY; 
#line 984
typedef PSERVICE_NOTIFYA PSERVICE_NOTIFY; 
#line 994 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winsvc.h"
typedef 
#line 990
struct _SERVICE_CONTROL_STATUS_REASON_PARAMSA { 
#line 991
DWORD dwReason; 
#line 992
LPSTR pszComment; 
#line 993
SERVICE_STATUS_PROCESS ServiceStatus; 
#line 994
} SERVICE_CONTROL_STATUS_REASON_PARAMSA, *PSERVICE_CONTROL_STATUS_REASON_PARAMSA; 
#line 1002
typedef 
#line 998
struct _SERVICE_CONTROL_STATUS_REASON_PARAMSW { 
#line 999
DWORD dwReason; 
#line 1000
LPWSTR pszComment; 
#line 1001
SERVICE_STATUS_PROCESS ServiceStatus; 
#line 1002
} SERVICE_CONTROL_STATUS_REASON_PARAMSW, *PSERVICE_CONTROL_STATUS_REASON_PARAMSW; 
#line 1007
typedef SERVICE_CONTROL_STATUS_REASON_PARAMSA SERVICE_CONTROL_STATUS_REASON_PARAMS; 
#line 1008
typedef PSERVICE_CONTROL_STATUS_REASON_PARAMSA PSERVICE_CONTROL_STATUS_REASON_PARAMS; 
#line 1016 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winsvc.h"
typedef 
#line 1014
struct _SERVICE_START_REASON { 
#line 1015
DWORD dwReason; 
#line 1016
} SERVICE_START_REASON, *PSERVICE_START_REASON; 
#line 1022
__declspec(dllimport) BOOL __stdcall 
#line 1025
ChangeServiceConfigA(SC_HANDLE hService, DWORD dwServiceType, DWORD dwStartType, DWORD dwErrorControl, LPCSTR lpBinaryPathName, LPCSTR lpLoadOrderGroup, LPDWORD lpdwTagId, LPCSTR lpDependencies, LPCSTR lpServiceStartName, LPCSTR lpPassword, LPCSTR lpDisplayName); 
#line 1038
__declspec(dllimport) BOOL __stdcall 
#line 1041
ChangeServiceConfigW(SC_HANDLE hService, DWORD dwServiceType, DWORD dwStartType, DWORD dwErrorControl, LPCWSTR lpBinaryPathName, LPCWSTR lpLoadOrderGroup, LPDWORD lpdwTagId, LPCWSTR lpDependencies, LPCWSTR lpServiceStartName, LPCWSTR lpPassword, LPCWSTR lpDisplayName); 
#line 1060 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winsvc.h"
__declspec(dllimport) BOOL __stdcall 
#line 1063
ChangeServiceConfig2A(SC_HANDLE hService, DWORD dwInfoLevel, LPVOID lpInfo); 
#line 1068
__declspec(dllimport) BOOL __stdcall 
#line 1071
ChangeServiceConfig2W(SC_HANDLE hService, DWORD dwInfoLevel, LPVOID lpInfo); 
#line 1082 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winsvc.h"
__declspec(dllimport) BOOL __stdcall 
#line 1085
CloseServiceHandle(SC_HANDLE hSCObject); 
#line 1089
__declspec(dllimport) BOOL __stdcall 
#line 1092
ControlService(SC_HANDLE hService, DWORD dwControl, LPSERVICE_STATUS lpServiceStatus); 
#line 1099
__declspec(dllimport) SC_HANDLE __stdcall 
#line 1102
CreateServiceA(SC_HANDLE hSCManager, LPCSTR lpServiceName, LPCSTR lpDisplayName, DWORD dwDesiredAccess, DWORD dwServiceType, DWORD dwStartType, DWORD dwErrorControl, LPCSTR lpBinaryPathName, LPCSTR lpLoadOrderGroup, LPDWORD lpdwTagId, LPCSTR lpDependencies, LPCSTR lpServiceStartName, LPCSTR lpPassword); 
#line 1118
__declspec(dllimport) SC_HANDLE __stdcall 
#line 1121
CreateServiceW(SC_HANDLE hSCManager, LPCWSTR lpServiceName, LPCWSTR lpDisplayName, DWORD dwDesiredAccess, DWORD dwServiceType, DWORD dwStartType, DWORD dwErrorControl, LPCWSTR lpBinaryPathName, LPCWSTR lpLoadOrderGroup, LPDWORD lpdwTagId, LPCWSTR lpDependencies, LPCWSTR lpServiceStartName, LPCWSTR lpPassword); 
#line 1142 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winsvc.h"
__declspec(dllimport) BOOL __stdcall 
#line 1145
DeleteService(SC_HANDLE hService); 
#line 1150
__declspec(dllimport) BOOL __stdcall 
#line 1153
EnumDependentServicesA(SC_HANDLE hService, DWORD dwServiceState, LPENUM_SERVICE_STATUSA lpServices, DWORD cbBufSize, LPDWORD pcbBytesNeeded, LPDWORD lpServicesReturned); 
#line 1163
__declspec(dllimport) BOOL __stdcall 
#line 1166
EnumDependentServicesW(SC_HANDLE hService, DWORD dwServiceState, LPENUM_SERVICE_STATUSW lpServices, DWORD cbBufSize, LPDWORD pcbBytesNeeded, LPDWORD lpServicesReturned); 
#line 1182 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winsvc.h"
#pragma endregion
#line 1184
#pragma region Desktop Family
#line 1188
__declspec(dllimport) BOOL __stdcall 
#line 1191
EnumServicesStatusA(SC_HANDLE hSCManager, DWORD dwServiceType, DWORD dwServiceState, LPENUM_SERVICE_STATUSA lpServices, DWORD cbBufSize, LPDWORD pcbBytesNeeded, LPDWORD lpServicesReturned, LPDWORD lpResumeHandle); 
#line 1203
__declspec(dllimport) BOOL __stdcall 
#line 1206
EnumServicesStatusW(SC_HANDLE hSCManager, DWORD dwServiceType, DWORD dwServiceState, LPENUM_SERVICE_STATUSW lpServices, DWORD cbBufSize, LPDWORD pcbBytesNeeded, LPDWORD lpServicesReturned, LPDWORD lpResumeHandle); 
#line 1224 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winsvc.h"
#pragma endregion
#line 1226
#pragma region Desktop Family or OneCore Family
#line 1230
__declspec(dllimport) BOOL __stdcall 
#line 1233
EnumServicesStatusExA(SC_HANDLE hSCManager, SC_ENUM_TYPE InfoLevel, DWORD dwServiceType, DWORD dwServiceState, LPBYTE lpServices, DWORD cbBufSize, LPDWORD pcbBytesNeeded, LPDWORD lpServicesReturned, LPDWORD lpResumeHandle, LPCSTR pszGroupName); 
#line 1247
__declspec(dllimport) BOOL __stdcall 
#line 1250
EnumServicesStatusExW(SC_HANDLE hSCManager, SC_ENUM_TYPE InfoLevel, DWORD dwServiceType, DWORD dwServiceState, LPBYTE lpServices, DWORD cbBufSize, LPDWORD pcbBytesNeeded, LPDWORD lpServicesReturned, LPDWORD lpResumeHandle, LPCWSTR pszGroupName); 
#line 1270 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winsvc.h"
__declspec(dllimport) BOOL __stdcall 
#line 1273
GetServiceKeyNameA(SC_HANDLE hSCManager, LPCSTR lpDisplayName, LPSTR lpServiceName, LPDWORD lpcchBuffer); 
#line 1281
__declspec(dllimport) BOOL __stdcall 
#line 1284
GetServiceKeyNameW(SC_HANDLE hSCManager, LPCWSTR lpDisplayName, LPWSTR lpServiceName, LPDWORD lpcchBuffer); 
#line 1298 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winsvc.h"
__declspec(dllimport) BOOL __stdcall 
#line 1301
GetServiceDisplayNameA(SC_HANDLE hSCManager, LPCSTR lpServiceName, LPSTR lpDisplayName, LPDWORD lpcchBuffer); 
#line 1309
__declspec(dllimport) BOOL __stdcall 
#line 1312
GetServiceDisplayNameW(SC_HANDLE hSCManager, LPCWSTR lpServiceName, LPWSTR lpDisplayName, LPDWORD lpcchBuffer); 
#line 1326 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winsvc.h"
#pragma endregion
#line 1328
#pragma region Desktop Family
#line 1331
__declspec(dllimport) SC_LOCK __stdcall 
#line 1334
LockServiceDatabase(SC_HANDLE hSCManager); 
#line 1338
__declspec(dllimport) BOOL __stdcall 
#line 1341
NotifyBootConfigStatus(BOOL BootAcceptable); 
#line 1346 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winsvc.h"
#pragma endregion
#line 1348
#pragma region Desktop Family or OneCore Family
#line 1352
__declspec(dllimport) SC_HANDLE __stdcall 
#line 1355
OpenSCManagerA(LPCSTR lpMachineName, LPCSTR lpDatabaseName, DWORD dwDesiredAccess); 
#line 1361
__declspec(dllimport) SC_HANDLE __stdcall 
#line 1364
OpenSCManagerW(LPCWSTR lpMachineName, LPCWSTR lpDatabaseName, DWORD dwDesiredAccess); 
#line 1376 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winsvc.h"
__declspec(dllimport) SC_HANDLE __stdcall 
#line 1379
OpenServiceA(SC_HANDLE hSCManager, LPCSTR lpServiceName, DWORD dwDesiredAccess); 
#line 1385
__declspec(dllimport) SC_HANDLE __stdcall 
#line 1388
OpenServiceW(SC_HANDLE hSCManager, LPCWSTR lpServiceName, DWORD dwDesiredAccess); 
#line 1400 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winsvc.h"
__declspec(dllimport) BOOL __stdcall 
#line 1403
QueryServiceConfigA(SC_HANDLE hService, LPQUERY_SERVICE_CONFIGA lpServiceConfig, DWORD cbBufSize, LPDWORD pcbBytesNeeded); 
#line 1411
__declspec(dllimport) BOOL __stdcall 
#line 1414
QueryServiceConfigW(SC_HANDLE hService, LPQUERY_SERVICE_CONFIGW lpServiceConfig, DWORD cbBufSize, LPDWORD pcbBytesNeeded); 
#line 1435 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winsvc.h"
__declspec(dllimport) BOOL __stdcall 
#line 1438
QueryServiceConfig2A(SC_HANDLE hService, DWORD dwInfoLevel, LPBYTE lpBuffer, DWORD cbBufSize, LPDWORD pcbBytesNeeded); 
#line 1454 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winsvc.h"
__declspec(dllimport) BOOL __stdcall 
#line 1457
QueryServiceConfig2W(SC_HANDLE hService, DWORD dwInfoLevel, LPBYTE lpBuffer, DWORD cbBufSize, LPDWORD pcbBytesNeeded); 
#line 1472 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winsvc.h"
#pragma endregion
#line 1474
#pragma region Desktop Family
#line 1478
__declspec(dllimport) BOOL __stdcall 
#line 1481
QueryServiceLockStatusA(SC_HANDLE hSCManager, LPQUERY_SERVICE_LOCK_STATUSA lpLockStatus, DWORD cbBufSize, LPDWORD pcbBytesNeeded); 
#line 1489
__declspec(dllimport) BOOL __stdcall 
#line 1492
QueryServiceLockStatusW(SC_HANDLE hSCManager, LPQUERY_SERVICE_LOCK_STATUSW lpLockStatus, DWORD cbBufSize, LPDWORD pcbBytesNeeded); 
#line 1506 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winsvc.h"
#pragma endregion
#line 1508
#pragma region Desktop Family or OneCore Family
#line 1512
__declspec(dllimport) BOOL __stdcall 
#line 1515
QueryServiceObjectSecurity(SC_HANDLE hService, SECURITY_INFORMATION dwSecurityInformation, PSECURITY_DESCRIPTOR lpSecurityDescriptor, DWORD cbBufSize, LPDWORD pcbBytesNeeded); 
#line 1525
__declspec(dllimport) BOOL __stdcall 
#line 1528
QueryServiceStatus(SC_HANDLE hService, LPSERVICE_STATUS lpServiceStatus); 
#line 1534
__declspec(dllimport) BOOL __stdcall 
#line 1537
QueryServiceStatusEx(SC_HANDLE hService, SC_STATUS_TYPE InfoLevel, LPBYTE lpBuffer, DWORD cbBufSize, LPDWORD pcbBytesNeeded); 
#line 1547
__declspec(dllimport) SERVICE_STATUS_HANDLE __stdcall 
#line 1550
RegisterServiceCtrlHandlerA(LPCSTR lpServiceName, LPHANDLER_FUNCTION lpHandlerProc); 
#line 1556
__declspec(dllimport) SERVICE_STATUS_HANDLE __stdcall 
#line 1559
RegisterServiceCtrlHandlerW(LPCWSTR lpServiceName, LPHANDLER_FUNCTION lpHandlerProc); 
#line 1571 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winsvc.h"
__declspec(dllimport) SERVICE_STATUS_HANDLE __stdcall 
#line 1574
RegisterServiceCtrlHandlerExA(LPCSTR lpServiceName, LPHANDLER_FUNCTION_EX lpHandlerProc, LPVOID lpContext); 
#line 1581
__declspec(dllimport) SERVICE_STATUS_HANDLE __stdcall 
#line 1584
RegisterServiceCtrlHandlerExW(LPCWSTR lpServiceName, LPHANDLER_FUNCTION_EX lpHandlerProc, LPVOID lpContext); 
#line 1596 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winsvc.h"
__declspec(dllimport) BOOL __stdcall 
#line 1599
SetServiceObjectSecurity(SC_HANDLE hService, SECURITY_INFORMATION dwSecurityInformation, PSECURITY_DESCRIPTOR lpSecurityDescriptor); 
#line 1605
__declspec(dllimport) BOOL __stdcall 
#line 1608
SetServiceStatus(SERVICE_STATUS_HANDLE hServiceStatus, LPSERVICE_STATUS lpServiceStatus); 
#line 1613
__declspec(dllimport) BOOL __stdcall 
#line 1616
StartServiceCtrlDispatcherA(const SERVICE_TABLE_ENTRYA * lpServiceStartTable); 
#line 1619
__declspec(dllimport) BOOL __stdcall 
#line 1622
StartServiceCtrlDispatcherW(const SERVICE_TABLE_ENTRYW * lpServiceStartTable); 
#line 1632 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winsvc.h"
__declspec(dllimport) BOOL __stdcall 
#line 1635
StartServiceA(SC_HANDLE hService, DWORD dwNumServiceArgs, LPCSTR * lpServiceArgVectors); 
#line 1641
__declspec(dllimport) BOOL __stdcall 
#line 1644
StartServiceW(SC_HANDLE hService, DWORD dwNumServiceArgs, LPCWSTR * lpServiceArgVectors); 
#line 1657 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winsvc.h"
#pragma endregion
#line 1659
#pragma region Desktop Family
#line 1662
__declspec(dllimport) BOOL __stdcall 
#line 1665
UnlockServiceDatabase(SC_LOCK ScLock); 
#line 1670 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winsvc.h"
#pragma endregion
#line 1672
#pragma region Desktop Family or OneCore Family
#line 1677
__declspec(dllimport) DWORD __stdcall 
#line 1680
NotifyServiceStatusChangeA(SC_HANDLE hService, DWORD dwNotifyMask, PSERVICE_NOTIFYA pNotifyBuffer); 
#line 1685
__declspec(dllimport) DWORD __stdcall 
#line 1688
NotifyServiceStatusChangeW(SC_HANDLE hService, DWORD dwNotifyMask, PSERVICE_NOTIFYW pNotifyBuffer); 
#line 1699 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winsvc.h"
__declspec(dllimport) BOOL __stdcall 
#line 1702
ControlServiceExA(SC_HANDLE hService, DWORD dwControl, DWORD dwInfoLevel, PVOID pControlParams); 
#line 1708
__declspec(dllimport) BOOL __stdcall 
#line 1711
ControlServiceExW(SC_HANDLE hService, DWORD dwControl, DWORD dwInfoLevel, PVOID pControlParams); 
#line 1723 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winsvc.h"
__declspec(dllimport) BOOL __stdcall 
#line 1726
QueryServiceDynamicInformation(SERVICE_STATUS_HANDLE hServiceStatus, DWORD dwInfoLevel, PVOID * ppDynamicInfo); 
#line 1744 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winsvc.h"
typedef 
#line 1740
enum _SC_EVENT_TYPE { 
#line 1741
SC_EVENT_DATABASE_CHANGE, 
#line 1742
SC_EVENT_PROPERTY_CHANGE, 
#line 1743
SC_EVENT_STATUS_CHANGE
#line 1744
} SC_EVENT_TYPE, *PSC_EVENT_TYPE; 
#line 1749
typedef void __stdcall SC_NOTIFICATION_CALLBACK(DWORD dwNotify, PVOID pCallbackContext); 
#line 1753
typedef SC_NOTIFICATION_CALLBACK *PSC_NOTIFICATION_CALLBACK; 
#line 1755
typedef struct _SC_NOTIFICATION_REGISTRATION *PSC_NOTIFICATION_REGISTRATION; 
#line 1757
__declspec(dllimport) DWORD __stdcall 
#line 1760
SubscribeServiceChangeNotifications(SC_HANDLE hService, SC_EVENT_TYPE eEventType, PSC_NOTIFICATION_CALLBACK pCallback, PVOID pCallbackContext, PSC_NOTIFICATION_REGISTRATION * pSubscription); 
#line 1768
__declspec(dllimport) void __stdcall 
#line 1771
UnsubscribeServiceChangeNotifications(PSC_NOTIFICATION_REGISTRATION pSubscription); 
#line 1775
__declspec(dllimport) DWORD __stdcall 
#line 1778
WaitServiceState(SC_HANDLE hService, DWORD dwNotify, DWORD dwTimeout, HANDLE hCancelEvent); 
#line 1797 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winsvc.h"
typedef 
#line 1793
enum SERVICE_REGISTRY_STATE_TYPE { 
#line 1794
ServiceRegistryStateParameters, 
#line 1795
ServiceRegistryStatePersistent, 
#line 1796
MaxServiceRegistryStateType
#line 1797
} SERVICE_REGISTRY_STATE_TYPE; 
#line 1802
DWORD __stdcall GetServiceRegistryStateKey(SERVICE_STATUS_HANDLE ServiceStatusHandle, SERVICE_REGISTRY_STATE_TYPE StateType, DWORD AccessMask, HKEY * ServiceStateKey); 
#line 1816 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winsvc.h"
typedef 
#line 1813
enum SERVICE_DIRECTORY_TYPE { 
#line 1814
ServiceDirectoryPersistentState, 
#line 1815
ServiceDirectoryTypeMax
#line 1816
} SERVICE_DIRECTORY_TYPE; 
#line 1821
DWORD __stdcall GetServiceDirectory(SERVICE_STATUS_HANDLE hServiceStatus, SERVICE_DIRECTORY_TYPE eDirectoryType, PWCHAR lpPathBuffer, DWORD cchPathBufferLength, DWORD * lpcchRequiredBufferLength); 
#line 1835 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winsvc.h"
typedef 
#line 1833
enum SERVICE_SHARED_REGISTRY_STATE_TYPE { 
#line 1834
ServiceSharedRegistryPersistentState
#line 1835
} SERVICE_SHARED_REGISTRY_STATE_TYPE; 
#line 1840
DWORD __stdcall GetSharedServiceRegistryStateKey(SC_HANDLE ServiceHandle, SERVICE_SHARED_REGISTRY_STATE_TYPE StateType, DWORD AccessMask, HKEY * ServiceStateKey); 
#line 1849
typedef 
#line 1847
enum SERVICE_SHARED_DIRECTORY_TYPE { 
#line 1848
ServiceSharedDirectoryPersistentState
#line 1849
} SERVICE_SHARED_DIRECTORY_TYPE; 
#line 1854
DWORD __stdcall GetSharedServiceDirectory(SC_HANDLE ServiceHandle, SERVICE_SHARED_DIRECTORY_TYPE DirectoryType, PWCHAR PathBuffer, DWORD PathBufferLength, DWORD * RequiredBufferLength); 
#line 1868 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winsvc.h"
}
#line 1865
#pragma endregion
#line 1872 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\winsvc.h"
#pragma warning(pop)
#line 17 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\mcx.h"
#pragma warning(push)
#pragma warning(disable:4820)
#line 48 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\mcx.h"
typedef 
#line 21
struct _MODEMDEVCAPS { 
#line 22
DWORD dwActualSize; 
#line 23
DWORD dwRequiredSize; 
#line 24
DWORD dwDevSpecificOffset; 
#line 25
DWORD dwDevSpecificSize; 
#line 28
DWORD dwModemProviderVersion; 
#line 29
DWORD dwModemManufacturerOffset; 
#line 30
DWORD dwModemManufacturerSize; 
#line 31
DWORD dwModemModelOffset; 
#line 32
DWORD dwModemModelSize; 
#line 33
DWORD dwModemVersionOffset; 
#line 34
DWORD dwModemVersionSize; 
#line 37
DWORD dwDialOptions; 
#line 38
DWORD dwCallSetupFailTimer; 
#line 39
DWORD dwInactivityTimeout; 
#line 40
DWORD dwSpeakerVolume; 
#line 41
DWORD dwSpeakerMode; 
#line 42
DWORD dwModemOptions; 
#line 43
DWORD dwMaxDTERate; 
#line 44
DWORD dwMaxDCERate; 
#line 47
BYTE abVariablePortion[1]; 
#line 48
} MODEMDEVCAPS, *PMODEMDEVCAPS, *LPMODEMDEVCAPS; 
#line 69
typedef 
#line 50
struct _MODEMSETTINGS { 
#line 51
DWORD dwActualSize; 
#line 52
DWORD dwRequiredSize; 
#line 53
DWORD dwDevSpecificOffset; 
#line 54
DWORD dwDevSpecificSize; 
#line 57
DWORD dwCallSetupFailTimer; 
#line 58
DWORD dwInactivityTimeout; 
#line 59
DWORD dwSpeakerVolume; 
#line 60
DWORD dwSpeakerMode; 
#line 61
DWORD dwPreferredModemOptions; 
#line 64
DWORD dwNegotiatedModemOptions; 
#line 65
DWORD dwNegotiatedDCERate; 
#line 68
BYTE abVariablePortion[1]; 
#line 69
} MODEMSETTINGS, *PMODEMSETTINGS, *LPMODEMSETTINGS; 
#line 728
#pragma warning(pop)
#line 14 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\imm.h"
extern "C" {
#line 18 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\imm.h"
#pragma warning(push)
#pragma warning(disable:4820)
#line 27 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\imm.h"
#pragma region Application Family
#line 31
struct HIMC__ { int unused; }; typedef HIMC__ *HIMC; 
#line 32
struct HIMCC__ { int unused; }; typedef HIMCC__ *HIMCC; 
#line 39 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\imm.h"
#pragma endregion
#line 41
#pragma region Desktop Family
#line 44
typedef HKL *LPHKL; 
#line 45
typedef UINT *LPUINT; 
#line 48 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\imm.h"
#pragma endregion
#line 50
#pragma region Application Family
#line 57
typedef 
#line 53
struct tagCOMPOSITIONFORM { 
#line 54
DWORD dwStyle; 
#line 55
POINT ptCurrentPos; 
#line 56
RECT rcArea; 
#line 57
} COMPOSITIONFORM, *PCOMPOSITIONFORM, *NPCOMPOSITIONFORM, *LPCOMPOSITIONFORM; 
#line 65
typedef 
#line 60
struct tagCANDIDATEFORM { 
#line 61
DWORD dwIndex; 
#line 62
DWORD dwStyle; 
#line 63
POINT ptCurrentPos; 
#line 64
RECT rcArea; 
#line 65
} CANDIDATEFORM, *PCANDIDATEFORM, *NPCANDIDATEFORM, *LPCANDIDATEFORM; 
#line 68 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\imm.h"
#pragma endregion
#line 72
#pragma region Desktop Family
#line 83
typedef 
#line 75
struct tagCANDIDATELIST { 
#line 76
DWORD dwSize; 
#line 77
DWORD dwStyle; 
#line 78
DWORD dwCount; 
#line 79
DWORD dwSelection; 
#line 80
DWORD dwPageStart; 
#line 81
DWORD dwPageSize; 
#line 82
DWORD dwOffset[1]; 
#line 83
} CANDIDATELIST, *PCANDIDATELIST, *NPCANDIDATELIST, *LPCANDIDATELIST; 
#line 86 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\imm.h"
#pragma endregion
#line 89
#pragma region Application Family
#line 95
typedef 
#line 92
struct tagREGISTERWORDA { 
#line 93
LPSTR lpReading; 
#line 94
LPSTR lpWord; 
#line 95
} REGISTERWORDA, *PREGISTERWORDA, *NPREGISTERWORDA, *LPREGISTERWORDA; 
#line 99
typedef 
#line 96
struct tagREGISTERWORDW { 
#line 97
LPWSTR lpReading; 
#line 98
LPWSTR lpWord; 
#line 99
} REGISTERWORDW, *PREGISTERWORDW, *NPREGISTERWORDW, *LPREGISTERWORDW; 
#line 106
typedef REGISTERWORDA REGISTERWORD; 
#line 107
typedef PREGISTERWORDA PREGISTERWORD; 
#line 108
typedef NPREGISTERWORDA NPREGISTERWORD; 
#line 109
typedef LPREGISTERWORDA LPREGISTERWORD; 
#line 113 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\imm.h"
#pragma endregion
#line 117
#pragma region Desktop Family
#line 129
typedef 
#line 120
struct tagRECONVERTSTRING { 
#line 121
DWORD dwSize; 
#line 122
DWORD dwVersion; 
#line 123
DWORD dwStrLen; 
#line 124
DWORD dwStrOffset; 
#line 125
DWORD dwCompStrLen; 
#line 126
DWORD dwCompStrOffset; 
#line 127
DWORD dwTargetStrLen; 
#line 128
DWORD dwTargetStrOffset; 
#line 129
} RECONVERTSTRING, *PRECONVERTSTRING, *NPRECONVERTSTRING, *LPRECONVERTSTRING; 
#line 132 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\imm.h"
#pragma endregion
#line 138 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\imm.h"
#pragma region Application Family
#line 144
typedef 
#line 141
struct tagSTYLEBUFA { 
#line 142
DWORD dwStyle; 
#line 143
CHAR szDescription[32]; 
#line 144
} STYLEBUFA, *PSTYLEBUFA, *NPSTYLEBUFA, *LPSTYLEBUFA; 
#line 148
typedef 
#line 145
struct tagSTYLEBUFW { 
#line 146
DWORD dwStyle; 
#line 147
WCHAR szDescription[32]; 
#line 148
} STYLEBUFW, *PSTYLEBUFW, *NPSTYLEBUFW, *LPSTYLEBUFW; 
#line 155
typedef STYLEBUFA STYLEBUF; 
#line 156
typedef PSTYLEBUFA PSTYLEBUF; 
#line 157
typedef NPSTYLEBUFA NPSTYLEBUF; 
#line 158
typedef LPSTYLEBUFA LPSTYLEBUF; 
#line 162 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\imm.h"
#pragma endregion
#line 168
#pragma region Desktop Family
#line 181
typedef 
#line 171
struct tagIMEMENUITEMINFOA { 
#line 172
UINT cbSize; 
#line 173
UINT fType; 
#line 174
UINT fState; 
#line 175
UINT wID; 
#line 176
HBITMAP hbmpChecked; 
#line 177
HBITMAP hbmpUnchecked; 
#line 178
DWORD dwItemData; 
#line 179
CHAR szString[80]; 
#line 180
HBITMAP hbmpItem; 
#line 181
} IMEMENUITEMINFOA, *PIMEMENUITEMINFOA, *NPIMEMENUITEMINFOA, *LPIMEMENUITEMINFOA; 
#line 192
typedef 
#line 182
struct tagIMEMENUITEMINFOW { 
#line 183
UINT cbSize; 
#line 184
UINT fType; 
#line 185
UINT fState; 
#line 186
UINT wID; 
#line 187
HBITMAP hbmpChecked; 
#line 188
HBITMAP hbmpUnchecked; 
#line 189
DWORD dwItemData; 
#line 190
WCHAR szString[80]; 
#line 191
HBITMAP hbmpItem; 
#line 192
} IMEMENUITEMINFOW, *PIMEMENUITEMINFOW, *NPIMEMENUITEMINFOW, *LPIMEMENUITEMINFOW; 
#line 199
typedef IMEMENUITEMINFOA IMEMENUITEMINFO; 
#line 200
typedef PIMEMENUITEMINFOA PIMEMENUITEMINFO; 
#line 201
typedef NPIMEMENUITEMINFOA NPIMEMENUITEMINFO; 
#line 202
typedef LPIMEMENUITEMINFOA LPIMEMENUITEMINFO; 
#line 211 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\imm.h"
typedef 
#line 205
struct tagIMECHARPOSITION { 
#line 206
DWORD dwSize; 
#line 207
DWORD dwCharPos; 
#line 208
POINT pt; 
#line 209
UINT cLineHeight; 
#line 210
RECT rcDocument; 
#line 211
} IMECHARPOSITION, *PIMECHARPOSITION, *NPIMECHARPOSITION, *LPIMECHARPOSITION; 
#line 213
typedef BOOL (__stdcall *IMCENUMPROC)(HIMC, LPARAM); 
#line 216 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\imm.h"
#pragma endregion
#line 224 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\imm.h"
#pragma region Desktop Family
#line 227
HKL __stdcall ImmInstallIMEA(LPCSTR lpszIMEFileName, LPCSTR lpszLayoutText); 
#line 228
HKL __stdcall ImmInstallIMEW(LPCWSTR lpszIMEFileName, LPCWSTR lpszLayoutText); 
#line 235 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\imm.h"
HWND __stdcall ImmGetDefaultIMEWnd(HWND); 
#line 237
UINT __stdcall ImmGetDescriptionA(HKL, LPSTR lpszDescription, UINT uBufLen); 
#line 238
UINT __stdcall ImmGetDescriptionW(HKL, LPWSTR lpszDescription, UINT uBufLen); 
#line 245 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\imm.h"
UINT __stdcall ImmGetIMEFileNameA(HKL, LPSTR lpszFileName, UINT uBufLen); 
#line 246
UINT __stdcall ImmGetIMEFileNameW(HKL, LPWSTR lpszFileName, UINT uBufLen); 
#line 253 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\imm.h"
DWORD __stdcall ImmGetProperty(HKL, DWORD); 
#line 255
BOOL __stdcall ImmIsIME(HKL); 
#line 257
BOOL __stdcall ImmSimulateHotKey(HWND, DWORD); 
#line 259
HIMC __stdcall ImmCreateContext(); 
#line 260
BOOL __stdcall ImmDestroyContext(HIMC); 
#line 261
HIMC __stdcall ImmGetContext(HWND); 
#line 262
BOOL __stdcall ImmReleaseContext(HWND, HIMC); 
#line 263
HIMC __stdcall ImmAssociateContext(HWND, HIMC); 
#line 265
BOOL __stdcall ImmAssociateContextEx(HWND, HIMC, DWORD); 
#line 268 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\imm.h"
LONG __stdcall ImmGetCompositionStringA(HIMC, DWORD, LPVOID lpBuf, DWORD dwBufLen); 
#line 269
LONG __stdcall ImmGetCompositionStringW(HIMC, DWORD, LPVOID lpBuf, DWORD dwBufLen); 
#line 276 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\imm.h"
BOOL __stdcall ImmSetCompositionStringA(HIMC, DWORD dwIndex, LPVOID lpComp, DWORD dwCompLen, LPVOID lpRead, DWORD dwReadLen); 
#line 277
BOOL __stdcall ImmSetCompositionStringW(HIMC, DWORD dwIndex, LPVOID lpComp, DWORD dwCompLen, LPVOID lpRead, DWORD dwReadLen); 
#line 284 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\imm.h"
DWORD __stdcall ImmGetCandidateListCountA(HIMC, LPDWORD lpdwListCount); 
#line 285
DWORD __stdcall ImmGetCandidateListCountW(HIMC, LPDWORD lpdwListCount); 
#line 292 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\imm.h"
DWORD __stdcall ImmGetCandidateListA(HIMC, DWORD deIndex, LPCANDIDATELIST lpCandList, DWORD dwBufLen); 
#line 293
DWORD __stdcall ImmGetCandidateListW(HIMC, DWORD deIndex, LPCANDIDATELIST lpCandList, DWORD dwBufLen); 
#line 300 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\imm.h"
DWORD __stdcall ImmGetGuideLineA(HIMC, DWORD dwIndex, LPSTR lpBuf, DWORD dwBufLen); 
#line 301
DWORD __stdcall ImmGetGuideLineW(HIMC, DWORD dwIndex, LPWSTR lpBuf, DWORD dwBufLen); 
#line 308 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\imm.h"
BOOL __stdcall ImmGetConversionStatus(HIMC, LPDWORD lpfdwConversion, LPDWORD lpfdwSentence); 
#line 309
BOOL __stdcall ImmSetConversionStatus(HIMC, DWORD, DWORD); 
#line 310
BOOL __stdcall ImmGetOpenStatus(HIMC); 
#line 311
BOOL __stdcall ImmSetOpenStatus(HIMC, BOOL); 
#line 314
BOOL __stdcall ImmGetCompositionFontA(HIMC, LPLOGFONTA lplf); 
#line 315
BOOL __stdcall ImmGetCompositionFontW(HIMC, LPLOGFONTW lplf); 
#line 322 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\imm.h"
BOOL __stdcall ImmSetCompositionFontA(HIMC, LPLOGFONTA lplf); 
#line 323
BOOL __stdcall ImmSetCompositionFontW(HIMC, LPLOGFONTW lplf); 
#line 331 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\imm.h"
BOOL __stdcall ImmConfigureIMEA(HKL, HWND, DWORD, LPVOID); 
#line 332
BOOL __stdcall ImmConfigureIMEW(HKL, HWND, DWORD, LPVOID); 
#line 339 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\imm.h"
LRESULT __stdcall ImmEscapeA(HKL, HIMC, UINT, LPVOID); 
#line 340
LRESULT __stdcall ImmEscapeW(HKL, HIMC, UINT, LPVOID); 
#line 347 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\imm.h"
DWORD __stdcall ImmGetConversionListA(HKL, HIMC, LPCSTR lpSrc, LPCANDIDATELIST lpDst, DWORD dwBufLen, UINT uFlag); 
#line 348
DWORD __stdcall ImmGetConversionListW(HKL, HIMC, LPCWSTR lpSrc, LPCANDIDATELIST lpDst, DWORD dwBufLen, UINT uFlag); 
#line 355 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\imm.h"
BOOL __stdcall ImmNotifyIME(HIMC, DWORD dwAction, DWORD dwIndex, DWORD dwValue); 
#line 357
BOOL __stdcall ImmGetStatusWindowPos(HIMC, LPPOINT lpptPos); 
#line 358
BOOL __stdcall ImmSetStatusWindowPos(HIMC, LPPOINT lpptPos); 
#line 359
BOOL __stdcall ImmGetCompositionWindow(HIMC, LPCOMPOSITIONFORM lpCompForm); 
#line 360
BOOL __stdcall ImmSetCompositionWindow(HIMC, LPCOMPOSITIONFORM lpCompForm); 
#line 361
BOOL __stdcall ImmGetCandidateWindow(HIMC, DWORD, LPCANDIDATEFORM lpCandidate); 
#line 362
BOOL __stdcall ImmSetCandidateWindow(HIMC, LPCANDIDATEFORM lpCandidate); 
#line 364
BOOL __stdcall ImmIsUIMessageA(HWND, UINT, WPARAM, LPARAM); 
#line 365
BOOL __stdcall ImmIsUIMessageW(HWND, UINT, WPARAM, LPARAM); 
#line 372 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\imm.h"
UINT __stdcall ImmGetVirtualKey(HWND); 
#line 374
typedef int (__stdcall *REGISTERWORDENUMPROCA)(LPCSTR lpszReading, DWORD, LPCSTR lpszString, LPVOID); 
#line 375
typedef int (__stdcall *REGISTERWORDENUMPROCW)(LPCWSTR lpszReading, DWORD, LPCWSTR lpszString, LPVOID); 
#line 382 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\imm.h"
BOOL __stdcall ImmRegisterWordA(HKL, LPCSTR lpszReading, DWORD, LPCSTR lpszRegister); 
#line 383
BOOL __stdcall ImmRegisterWordW(HKL, LPCWSTR lpszReading, DWORD, LPCWSTR lpszRegister); 
#line 390 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\imm.h"
BOOL __stdcall ImmUnregisterWordA(HKL, LPCSTR lpszReading, DWORD, LPCSTR lpszUnregister); 
#line 391
BOOL __stdcall ImmUnregisterWordW(HKL, LPCWSTR lpszReading, DWORD, LPCWSTR lpszUnregister); 
#line 398 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\imm.h"
UINT __stdcall ImmGetRegisterWordStyleA(HKL, UINT nItem, LPSTYLEBUFA lpStyleBuf); 
#line 399
UINT __stdcall ImmGetRegisterWordStyleW(HKL, UINT nItem, LPSTYLEBUFW lpStyleBuf); 
#line 406 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\imm.h"
UINT __stdcall ImmEnumRegisterWordA(HKL, REGISTERWORDENUMPROCA, LPCSTR lpszReading, DWORD, LPCSTR lpszRegister, LPVOID); 
#line 407
UINT __stdcall ImmEnumRegisterWordW(HKL, REGISTERWORDENUMPROCW, LPCWSTR lpszReading, DWORD, LPCWSTR lpszRegister, LPVOID); 
#line 415 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\imm.h"
BOOL __stdcall ImmDisableIME(DWORD); 
#line 416
BOOL __stdcall ImmEnumInputContext(DWORD idThread, IMCENUMPROC lpfn, LPARAM lParam); 
#line 417
DWORD __stdcall ImmGetImeMenuItemsA(HIMC, DWORD, DWORD, LPIMEMENUITEMINFOA lpImeParentMenu, LPIMEMENUITEMINFOA lpImeMenu, DWORD dwSize); 
#line 418
DWORD __stdcall ImmGetImeMenuItemsW(HIMC, DWORD, DWORD, LPIMEMENUITEMINFOW lpImeParentMenu, LPIMEMENUITEMINFOW lpImeMenu, DWORD dwSize); 
#line 425 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\imm.h"
BOOL __stdcall ImmDisableTextFrameService(DWORD idThread); 
#line 429 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\imm.h"
BOOL __stdcall ImmDisableLegacyIME(); 
#line 777 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\imm.h"
}
#line 433 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\imm.h"
#pragma endregion
#line 773 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\imm.h"
#pragma warning(pop)
#line 254 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\windows.h"
#pragma warning(pop)
#line 267 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\windows.h"
#pragma endregion
#line 81 "D:\\Projekty\\RayTracer\\packages\\nupengl.core.0.1.0.1\\build\\native\\include\\GL\\freeglut_std.h"
#pragma comment(lib, "freeglut.lib")
#line 90 "D:\\Projekty\\RayTracer\\packages\\nupengl.core.0.1.0.1\\build\\native\\include\\GL\\freeglut_std.h"
#pragma comment(lib, "glu32.lib")
#pragma comment(lib, "opengl32.lib")
#pragma comment(lib, "gdi32.lib")
#pragma comment(lib, "winmm.lib")
#pragma comment(lib, "user32.lib")
#line 25 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\GL/gl.h"
extern "C" {
#line 45 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\GL/gl.h"
#pragma region Desktop Family
#line 48
typedef unsigned GLenum; 
#line 49
typedef unsigned char GLboolean; 
#line 50
typedef unsigned GLbitfield; 
#line 51
typedef signed char GLbyte; 
#line 52
typedef short GLshort; 
#line 53
typedef int GLint; 
#line 54
typedef int GLsizei; 
#line 55
typedef unsigned char GLubyte; 
#line 56
typedef unsigned short GLushort; 
#line 57
typedef unsigned GLuint; 
#line 58
typedef float GLfloat; 
#line 59
typedef float GLclampf; 
#line 60
typedef double GLdouble; 
#line 61
typedef double GLclampd; 
#line 62
typedef void GLvoid; 
#line 1157
__declspec(dllimport) void __stdcall glAccum(GLenum op, GLfloat value); 
#line 1158
__declspec(dllimport) void __stdcall glAlphaFunc(GLenum func, GLclampf ref); 
#line 1159
__declspec(dllimport) GLboolean __stdcall glAreTexturesResident(GLsizei n, const GLuint * textures, GLboolean * residences); 
#line 1160
__declspec(dllimport) void __stdcall glArrayElement(GLint i); 
#line 1161
__declspec(dllimport) void __stdcall glBegin(GLenum mode); 
#line 1162
__declspec(dllimport) void __stdcall glBindTexture(GLenum target, GLuint texture); 
#line 1163
__declspec(dllimport) void __stdcall glBitmap(GLsizei width, GLsizei height, GLfloat xorig, GLfloat yorig, GLfloat xmove, GLfloat ymove, const GLubyte * bitmap); 
#line 1164
__declspec(dllimport) void __stdcall glBlendFunc(GLenum sfactor, GLenum dfactor); 
#line 1165
__declspec(dllimport) void __stdcall glCallList(GLuint list); 
#line 1166
__declspec(dllimport) void __stdcall glCallLists(GLsizei n, GLenum type, const GLvoid * lists); 
#line 1167
__declspec(dllimport) void __stdcall glClear(GLbitfield mask); 
#line 1168
__declspec(dllimport) void __stdcall glClearAccum(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha); 
#line 1169
__declspec(dllimport) void __stdcall glClearColor(GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha); 
#line 1170
__declspec(dllimport) void __stdcall glClearDepth(GLclampd depth); 
#line 1171
__declspec(dllimport) void __stdcall glClearIndex(GLfloat c); 
#line 1172
__declspec(dllimport) void __stdcall glClearStencil(GLint s); 
#line 1173
__declspec(dllimport) void __stdcall glClipPlane(GLenum plane, const GLdouble * equation); 
#line 1174
__declspec(dllimport) void __stdcall glColor3b(GLbyte red, GLbyte green, GLbyte blue); 
#line 1175
__declspec(dllimport) void __stdcall glColor3bv(const GLbyte * v); 
#line 1176
__declspec(dllimport) void __stdcall glColor3d(GLdouble red, GLdouble green, GLdouble blue); 
#line 1177
__declspec(dllimport) void __stdcall glColor3dv(const GLdouble * v); 
#line 1178
__declspec(dllimport) void __stdcall glColor3f(GLfloat red, GLfloat green, GLfloat blue); 
#line 1179
__declspec(dllimport) void __stdcall glColor3fv(const GLfloat * v); 
#line 1180
__declspec(dllimport) void __stdcall glColor3i(GLint red, GLint green, GLint blue); 
#line 1181
__declspec(dllimport) void __stdcall glColor3iv(const GLint * v); 
#line 1182
__declspec(dllimport) void __stdcall glColor3s(GLshort red, GLshort green, GLshort blue); 
#line 1183
__declspec(dllimport) void __stdcall glColor3sv(const GLshort * v); 
#line 1184
__declspec(dllimport) void __stdcall glColor3ub(GLubyte red, GLubyte green, GLubyte blue); 
#line 1185
__declspec(dllimport) void __stdcall glColor3ubv(const GLubyte * v); 
#line 1186
__declspec(dllimport) void __stdcall glColor3ui(GLuint red, GLuint green, GLuint blue); 
#line 1187
__declspec(dllimport) void __stdcall glColor3uiv(const GLuint * v); 
#line 1188
__declspec(dllimport) void __stdcall glColor3us(GLushort red, GLushort green, GLushort blue); 
#line 1189
__declspec(dllimport) void __stdcall glColor3usv(const GLushort * v); 
#line 1190
__declspec(dllimport) void __stdcall glColor4b(GLbyte red, GLbyte green, GLbyte blue, GLbyte alpha); 
#line 1191
__declspec(dllimport) void __stdcall glColor4bv(const GLbyte * v); 
#line 1192
__declspec(dllimport) void __stdcall glColor4d(GLdouble red, GLdouble green, GLdouble blue, GLdouble alpha); 
#line 1193
__declspec(dllimport) void __stdcall glColor4dv(const GLdouble * v); 
#line 1194
__declspec(dllimport) void __stdcall glColor4f(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha); 
#line 1195
__declspec(dllimport) void __stdcall glColor4fv(const GLfloat * v); 
#line 1196
__declspec(dllimport) void __stdcall glColor4i(GLint red, GLint green, GLint blue, GLint alpha); 
#line 1197
__declspec(dllimport) void __stdcall glColor4iv(const GLint * v); 
#line 1198
__declspec(dllimport) void __stdcall glColor4s(GLshort red, GLshort green, GLshort blue, GLshort alpha); 
#line 1199
__declspec(dllimport) void __stdcall glColor4sv(const GLshort * v); 
#line 1200
__declspec(dllimport) void __stdcall glColor4ub(GLubyte red, GLubyte green, GLubyte blue, GLubyte alpha); 
#line 1201
__declspec(dllimport) void __stdcall glColor4ubv(const GLubyte * v); 
#line 1202
__declspec(dllimport) void __stdcall glColor4ui(GLuint red, GLuint green, GLuint blue, GLuint alpha); 
#line 1203
__declspec(dllimport) void __stdcall glColor4uiv(const GLuint * v); 
#line 1204
__declspec(dllimport) void __stdcall glColor4us(GLushort red, GLushort green, GLushort blue, GLushort alpha); 
#line 1205
__declspec(dllimport) void __stdcall glColor4usv(const GLushort * v); 
#line 1206
__declspec(dllimport) void __stdcall glColorMask(GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha); 
#line 1207
__declspec(dllimport) void __stdcall glColorMaterial(GLenum face, GLenum mode); 
#line 1208
__declspec(dllimport) void __stdcall glColorPointer(GLint size, GLenum type, GLsizei stride, const GLvoid * pointer); 
#line 1209
__declspec(dllimport) void __stdcall glCopyPixels(GLint x, GLint y, GLsizei width, GLsizei height, GLenum type); 
#line 1210
__declspec(dllimport) void __stdcall glCopyTexImage1D(GLenum target, GLint level, GLenum internalFormat, GLint x, GLint y, GLsizei width, GLint border); 
#line 1211
__declspec(dllimport) void __stdcall glCopyTexImage2D(GLenum target, GLint level, GLenum internalFormat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border); 
#line 1212
__declspec(dllimport) void __stdcall glCopyTexSubImage1D(GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width); 
#line 1213
__declspec(dllimport) void __stdcall glCopyTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height); 
#line 1214
__declspec(dllimport) void __stdcall glCullFace(GLenum mode); 
#line 1215
__declspec(dllimport) void __stdcall glDeleteLists(GLuint list, GLsizei range); 
#line 1216
__declspec(dllimport) void __stdcall glDeleteTextures(GLsizei n, const GLuint * textures); 
#line 1217
__declspec(dllimport) void __stdcall glDepthFunc(GLenum func); 
#line 1218
__declspec(dllimport) void __stdcall glDepthMask(GLboolean flag); 
#line 1219
__declspec(dllimport) void __stdcall glDepthRange(GLclampd zNear, GLclampd zFar); 
#line 1220
__declspec(dllimport) void __stdcall glDisable(GLenum cap); 
#line 1221
__declspec(dllimport) void __stdcall glDisableClientState(GLenum array); 
#line 1222
__declspec(dllimport) void __stdcall glDrawArrays(GLenum mode, GLint first, GLsizei count); 
#line 1223
__declspec(dllimport) void __stdcall glDrawBuffer(GLenum mode); 
#line 1224
__declspec(dllimport) void __stdcall glDrawElements(GLenum mode, GLsizei count, GLenum type, const GLvoid * indices); 
#line 1225
__declspec(dllimport) void __stdcall glDrawPixels(GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid * pixels); 
#line 1226
__declspec(dllimport) void __stdcall glEdgeFlag(GLboolean flag); 
#line 1227
__declspec(dllimport) void __stdcall glEdgeFlagPointer(GLsizei stride, const GLvoid * pointer); 
#line 1228
__declspec(dllimport) void __stdcall glEdgeFlagv(const GLboolean * flag); 
#line 1229
__declspec(dllimport) void __stdcall glEnable(GLenum cap); 
#line 1230
__declspec(dllimport) void __stdcall glEnableClientState(GLenum array); 
#line 1231
__declspec(dllimport) void __stdcall glEnd(); 
#line 1232
__declspec(dllimport) void __stdcall glEndList(); 
#line 1233
__declspec(dllimport) void __stdcall glEvalCoord1d(GLdouble u); 
#line 1234
__declspec(dllimport) void __stdcall glEvalCoord1dv(const GLdouble * u); 
#line 1235
__declspec(dllimport) void __stdcall glEvalCoord1f(GLfloat u); 
#line 1236
__declspec(dllimport) void __stdcall glEvalCoord1fv(const GLfloat * u); 
#line 1237
__declspec(dllimport) void __stdcall glEvalCoord2d(GLdouble u, GLdouble v); 
#line 1238
__declspec(dllimport) void __stdcall glEvalCoord2dv(const GLdouble * u); 
#line 1239
__declspec(dllimport) void __stdcall glEvalCoord2f(GLfloat u, GLfloat v); 
#line 1240
__declspec(dllimport) void __stdcall glEvalCoord2fv(const GLfloat * u); 
#line 1241
__declspec(dllimport) void __stdcall glEvalMesh1(GLenum mode, GLint i1, GLint i2); 
#line 1242
__declspec(dllimport) void __stdcall glEvalMesh2(GLenum mode, GLint i1, GLint i2, GLint j1, GLint j2); 
#line 1243
__declspec(dllimport) void __stdcall glEvalPoint1(GLint i); 
#line 1244
__declspec(dllimport) void __stdcall glEvalPoint2(GLint i, GLint j); 
#line 1245
__declspec(dllimport) void __stdcall glFeedbackBuffer(GLsizei size, GLenum type, GLfloat * buffer); 
#line 1246
__declspec(dllimport) void __stdcall glFinish(); 
#line 1247
__declspec(dllimport) void __stdcall glFlush(); 
#line 1248
__declspec(dllimport) void __stdcall glFogf(GLenum pname, GLfloat param); 
#line 1249
__declspec(dllimport) void __stdcall glFogfv(GLenum pname, const GLfloat * params); 
#line 1250
__declspec(dllimport) void __stdcall glFogi(GLenum pname, GLint param); 
#line 1251
__declspec(dllimport) void __stdcall glFogiv(GLenum pname, const GLint * params); 
#line 1252
__declspec(dllimport) void __stdcall glFrontFace(GLenum mode); 
#line 1253
__declspec(dllimport) void __stdcall glFrustum(GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar); 
#line 1254
__declspec(dllimport) GLuint __stdcall glGenLists(GLsizei range); 
#line 1255
__declspec(dllimport) void __stdcall glGenTextures(GLsizei n, GLuint * textures); 
#line 1256
__declspec(dllimport) void __stdcall glGetBooleanv(GLenum pname, GLboolean * params); 
#line 1257
__declspec(dllimport) void __stdcall glGetClipPlane(GLenum plane, GLdouble * equation); 
#line 1258
__declspec(dllimport) void __stdcall glGetDoublev(GLenum pname, GLdouble * params); 
#line 1259
__declspec(dllimport) GLenum __stdcall glGetError(); 
#line 1260
__declspec(dllimport) void __stdcall glGetFloatv(GLenum pname, GLfloat * params); 
#line 1261
__declspec(dllimport) void __stdcall glGetIntegerv(GLenum pname, GLint * params); 
#line 1262
__declspec(dllimport) void __stdcall glGetLightfv(GLenum light, GLenum pname, GLfloat * params); 
#line 1263
__declspec(dllimport) void __stdcall glGetLightiv(GLenum light, GLenum pname, GLint * params); 
#line 1264
__declspec(dllimport) void __stdcall glGetMapdv(GLenum target, GLenum query, GLdouble * v); 
#line 1265
__declspec(dllimport) void __stdcall glGetMapfv(GLenum target, GLenum query, GLfloat * v); 
#line 1266
__declspec(dllimport) void __stdcall glGetMapiv(GLenum target, GLenum query, GLint * v); 
#line 1267
__declspec(dllimport) void __stdcall glGetMaterialfv(GLenum face, GLenum pname, GLfloat * params); 
#line 1268
__declspec(dllimport) void __stdcall glGetMaterialiv(GLenum face, GLenum pname, GLint * params); 
#line 1269
__declspec(dllimport) void __stdcall glGetPixelMapfv(GLenum map, GLfloat * values); 
#line 1270
__declspec(dllimport) void __stdcall glGetPixelMapuiv(GLenum map, GLuint * values); 
#line 1271
__declspec(dllimport) void __stdcall glGetPixelMapusv(GLenum map, GLushort * values); 
#line 1272
__declspec(dllimport) void __stdcall glGetPointerv(GLenum pname, GLvoid ** params); 
#line 1273
__declspec(dllimport) void __stdcall glGetPolygonStipple(GLubyte * mask); 
#line 1274
__declspec(dllimport) const GLubyte *__stdcall glGetString(GLenum name); 
#line 1275
__declspec(dllimport) void __stdcall glGetTexEnvfv(GLenum target, GLenum pname, GLfloat * params); 
#line 1276
__declspec(dllimport) void __stdcall glGetTexEnviv(GLenum target, GLenum pname, GLint * params); 
#line 1277
__declspec(dllimport) void __stdcall glGetTexGendv(GLenum coord, GLenum pname, GLdouble * params); 
#line 1278
__declspec(dllimport) void __stdcall glGetTexGenfv(GLenum coord, GLenum pname, GLfloat * params); 
#line 1279
__declspec(dllimport) void __stdcall glGetTexGeniv(GLenum coord, GLenum pname, GLint * params); 
#line 1280
__declspec(dllimport) void __stdcall glGetTexImage(GLenum target, GLint level, GLenum format, GLenum type, GLvoid * pixels); 
#line 1281
__declspec(dllimport) void __stdcall glGetTexLevelParameterfv(GLenum target, GLint level, GLenum pname, GLfloat * params); 
#line 1282
__declspec(dllimport) void __stdcall glGetTexLevelParameteriv(GLenum target, GLint level, GLenum pname, GLint * params); 
#line 1283
__declspec(dllimport) void __stdcall glGetTexParameterfv(GLenum target, GLenum pname, GLfloat * params); 
#line 1284
__declspec(dllimport) void __stdcall glGetTexParameteriv(GLenum target, GLenum pname, GLint * params); 
#line 1285
__declspec(dllimport) void __stdcall glHint(GLenum target, GLenum mode); 
#line 1286
__declspec(dllimport) void __stdcall glIndexMask(GLuint mask); 
#line 1287
__declspec(dllimport) void __stdcall glIndexPointer(GLenum type, GLsizei stride, const GLvoid * pointer); 
#line 1288
__declspec(dllimport) void __stdcall glIndexd(GLdouble c); 
#line 1289
__declspec(dllimport) void __stdcall glIndexdv(const GLdouble * c); 
#line 1290
__declspec(dllimport) void __stdcall glIndexf(GLfloat c); 
#line 1291
__declspec(dllimport) void __stdcall glIndexfv(const GLfloat * c); 
#line 1292
__declspec(dllimport) void __stdcall glIndexi(GLint c); 
#line 1293
__declspec(dllimport) void __stdcall glIndexiv(const GLint * c); 
#line 1294
__declspec(dllimport) void __stdcall glIndexs(GLshort c); 
#line 1295
__declspec(dllimport) void __stdcall glIndexsv(const GLshort * c); 
#line 1296
__declspec(dllimport) void __stdcall glIndexub(GLubyte c); 
#line 1297
__declspec(dllimport) void __stdcall glIndexubv(const GLubyte * c); 
#line 1298
__declspec(dllimport) void __stdcall glInitNames(); 
#line 1299
__declspec(dllimport) void __stdcall glInterleavedArrays(GLenum format, GLsizei stride, const GLvoid * pointer); 
#line 1300
__declspec(dllimport) GLboolean __stdcall glIsEnabled(GLenum cap); 
#line 1301
__declspec(dllimport) GLboolean __stdcall glIsList(GLuint list); 
#line 1302
__declspec(dllimport) GLboolean __stdcall glIsTexture(GLuint texture); 
#line 1303
__declspec(dllimport) void __stdcall glLightModelf(GLenum pname, GLfloat param); 
#line 1304
__declspec(dllimport) void __stdcall glLightModelfv(GLenum pname, const GLfloat * params); 
#line 1305
__declspec(dllimport) void __stdcall glLightModeli(GLenum pname, GLint param); 
#line 1306
__declspec(dllimport) void __stdcall glLightModeliv(GLenum pname, const GLint * params); 
#line 1307
__declspec(dllimport) void __stdcall glLightf(GLenum light, GLenum pname, GLfloat param); 
#line 1308
__declspec(dllimport) void __stdcall glLightfv(GLenum light, GLenum pname, const GLfloat * params); 
#line 1309
__declspec(dllimport) void __stdcall glLighti(GLenum light, GLenum pname, GLint param); 
#line 1310
__declspec(dllimport) void __stdcall glLightiv(GLenum light, GLenum pname, const GLint * params); 
#line 1311
__declspec(dllimport) void __stdcall glLineStipple(GLint factor, GLushort pattern); 
#line 1312
__declspec(dllimport) void __stdcall glLineWidth(GLfloat width); 
#line 1313
__declspec(dllimport) void __stdcall glListBase(GLuint base); 
#line 1314
__declspec(dllimport) void __stdcall glLoadIdentity(); 
#line 1315
__declspec(dllimport) void __stdcall glLoadMatrixd(const GLdouble * m); 
#line 1316
__declspec(dllimport) void __stdcall glLoadMatrixf(const GLfloat * m); 
#line 1317
__declspec(dllimport) void __stdcall glLoadName(GLuint name); 
#line 1318
__declspec(dllimport) void __stdcall glLogicOp(GLenum opcode); 
#line 1319
__declspec(dllimport) void __stdcall glMap1d(GLenum target, GLdouble u1, GLdouble u2, GLint stride, GLint order, const GLdouble * points); 
#line 1320
__declspec(dllimport) void __stdcall glMap1f(GLenum target, GLfloat u1, GLfloat u2, GLint stride, GLint order, const GLfloat * points); 
#line 1321
__declspec(dllimport) void __stdcall glMap2d(GLenum target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, const GLdouble * points); 
#line 1322
__declspec(dllimport) void __stdcall glMap2f(GLenum target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, const GLfloat * points); 
#line 1323
__declspec(dllimport) void __stdcall glMapGrid1d(GLint un, GLdouble u1, GLdouble u2); 
#line 1324
__declspec(dllimport) void __stdcall glMapGrid1f(GLint un, GLfloat u1, GLfloat u2); 
#line 1325
__declspec(dllimport) void __stdcall glMapGrid2d(GLint un, GLdouble u1, GLdouble u2, GLint vn, GLdouble v1, GLdouble v2); 
#line 1326
__declspec(dllimport) void __stdcall glMapGrid2f(GLint un, GLfloat u1, GLfloat u2, GLint vn, GLfloat v1, GLfloat v2); 
#line 1327
__declspec(dllimport) void __stdcall glMaterialf(GLenum face, GLenum pname, GLfloat param); 
#line 1328
__declspec(dllimport) void __stdcall glMaterialfv(GLenum face, GLenum pname, const GLfloat * params); 
#line 1329
__declspec(dllimport) void __stdcall glMateriali(GLenum face, GLenum pname, GLint param); 
#line 1330
__declspec(dllimport) void __stdcall glMaterialiv(GLenum face, GLenum pname, const GLint * params); 
#line 1331
__declspec(dllimport) void __stdcall glMatrixMode(GLenum mode); 
#line 1332
__declspec(dllimport) void __stdcall glMultMatrixd(const GLdouble * m); 
#line 1333
__declspec(dllimport) void __stdcall glMultMatrixf(const GLfloat * m); 
#line 1334
__declspec(dllimport) void __stdcall glNewList(GLuint list, GLenum mode); 
#line 1335
__declspec(dllimport) void __stdcall glNormal3b(GLbyte nx, GLbyte ny, GLbyte nz); 
#line 1336
__declspec(dllimport) void __stdcall glNormal3bv(const GLbyte * v); 
#line 1337
__declspec(dllimport) void __stdcall glNormal3d(GLdouble nx, GLdouble ny, GLdouble nz); 
#line 1338
__declspec(dllimport) void __stdcall glNormal3dv(const GLdouble * v); 
#line 1339
__declspec(dllimport) void __stdcall glNormal3f(GLfloat nx, GLfloat ny, GLfloat nz); 
#line 1340
__declspec(dllimport) void __stdcall glNormal3fv(const GLfloat * v); 
#line 1341
__declspec(dllimport) void __stdcall glNormal3i(GLint nx, GLint ny, GLint nz); 
#line 1342
__declspec(dllimport) void __stdcall glNormal3iv(const GLint * v); 
#line 1343
__declspec(dllimport) void __stdcall glNormal3s(GLshort nx, GLshort ny, GLshort nz); 
#line 1344
__declspec(dllimport) void __stdcall glNormal3sv(const GLshort * v); 
#line 1345
__declspec(dllimport) void __stdcall glNormalPointer(GLenum type, GLsizei stride, const GLvoid * pointer); 
#line 1346
__declspec(dllimport) void __stdcall glOrtho(GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar); 
#line 1347
__declspec(dllimport) void __stdcall glPassThrough(GLfloat token); 
#line 1348
__declspec(dllimport) void __stdcall glPixelMapfv(GLenum map, GLsizei mapsize, const GLfloat * values); 
#line 1349
__declspec(dllimport) void __stdcall glPixelMapuiv(GLenum map, GLsizei mapsize, const GLuint * values); 
#line 1350
__declspec(dllimport) void __stdcall glPixelMapusv(GLenum map, GLsizei mapsize, const GLushort * values); 
#line 1351
__declspec(dllimport) void __stdcall glPixelStoref(GLenum pname, GLfloat param); 
#line 1352
__declspec(dllimport) void __stdcall glPixelStorei(GLenum pname, GLint param); 
#line 1353
__declspec(dllimport) void __stdcall glPixelTransferf(GLenum pname, GLfloat param); 
#line 1354
__declspec(dllimport) void __stdcall glPixelTransferi(GLenum pname, GLint param); 
#line 1355
__declspec(dllimport) void __stdcall glPixelZoom(GLfloat xfactor, GLfloat yfactor); 
#line 1356
__declspec(dllimport) void __stdcall glPointSize(GLfloat size); 
#line 1357
__declspec(dllimport) void __stdcall glPolygonMode(GLenum face, GLenum mode); 
#line 1358
__declspec(dllimport) void __stdcall glPolygonOffset(GLfloat factor, GLfloat units); 
#line 1359
__declspec(dllimport) void __stdcall glPolygonStipple(const GLubyte * mask); 
#line 1360
__declspec(dllimport) void __stdcall glPopAttrib(); 
#line 1361
__declspec(dllimport) void __stdcall glPopClientAttrib(); 
#line 1362
__declspec(dllimport) void __stdcall glPopMatrix(); 
#line 1363
__declspec(dllimport) void __stdcall glPopName(); 
#line 1364
__declspec(dllimport) void __stdcall glPrioritizeTextures(GLsizei n, const GLuint * textures, const GLclampf * priorities); 
#line 1365
__declspec(dllimport) void __stdcall glPushAttrib(GLbitfield mask); 
#line 1366
__declspec(dllimport) void __stdcall glPushClientAttrib(GLbitfield mask); 
#line 1367
__declspec(dllimport) void __stdcall glPushMatrix(); 
#line 1368
__declspec(dllimport) void __stdcall glPushName(GLuint name); 
#line 1369
__declspec(dllimport) void __stdcall glRasterPos2d(GLdouble x, GLdouble y); 
#line 1370
__declspec(dllimport) void __stdcall glRasterPos2dv(const GLdouble * v); 
#line 1371
__declspec(dllimport) void __stdcall glRasterPos2f(GLfloat x, GLfloat y); 
#line 1372
__declspec(dllimport) void __stdcall glRasterPos2fv(const GLfloat * v); 
#line 1373
__declspec(dllimport) void __stdcall glRasterPos2i(GLint x, GLint y); 
#line 1374
__declspec(dllimport) void __stdcall glRasterPos2iv(const GLint * v); 
#line 1375
__declspec(dllimport) void __stdcall glRasterPos2s(GLshort x, GLshort y); 
#line 1376
__declspec(dllimport) void __stdcall glRasterPos2sv(const GLshort * v); 
#line 1377
__declspec(dllimport) void __stdcall glRasterPos3d(GLdouble x, GLdouble y, GLdouble z); 
#line 1378
__declspec(dllimport) void __stdcall glRasterPos3dv(const GLdouble * v); 
#line 1379
__declspec(dllimport) void __stdcall glRasterPos3f(GLfloat x, GLfloat y, GLfloat z); 
#line 1380
__declspec(dllimport) void __stdcall glRasterPos3fv(const GLfloat * v); 
#line 1381
__declspec(dllimport) void __stdcall glRasterPos3i(GLint x, GLint y, GLint z); 
#line 1382
__declspec(dllimport) void __stdcall glRasterPos3iv(const GLint * v); 
#line 1383
__declspec(dllimport) void __stdcall glRasterPos3s(GLshort x, GLshort y, GLshort z); 
#line 1384
__declspec(dllimport) void __stdcall glRasterPos3sv(const GLshort * v); 
#line 1385
__declspec(dllimport) void __stdcall glRasterPos4d(GLdouble x, GLdouble y, GLdouble z, GLdouble w); 
#line 1386
__declspec(dllimport) void __stdcall glRasterPos4dv(const GLdouble * v); 
#line 1387
__declspec(dllimport) void __stdcall glRasterPos4f(GLfloat x, GLfloat y, GLfloat z, GLfloat w); 
#line 1388
__declspec(dllimport) void __stdcall glRasterPos4fv(const GLfloat * v); 
#line 1389
__declspec(dllimport) void __stdcall glRasterPos4i(GLint x, GLint y, GLint z, GLint w); 
#line 1390
__declspec(dllimport) void __stdcall glRasterPos4iv(const GLint * v); 
#line 1391
__declspec(dllimport) void __stdcall glRasterPos4s(GLshort x, GLshort y, GLshort z, GLshort w); 
#line 1392
__declspec(dllimport) void __stdcall glRasterPos4sv(const GLshort * v); 
#line 1393
__declspec(dllimport) void __stdcall glReadBuffer(GLenum mode); 
#line 1394
__declspec(dllimport) void __stdcall glReadPixels(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLvoid * pixels); 
#line 1395
__declspec(dllimport) void __stdcall glRectd(GLdouble x1, GLdouble y1, GLdouble x2, GLdouble y2); 
#line 1396
__declspec(dllimport) void __stdcall glRectdv(const GLdouble * v1, const GLdouble * v2); 
#line 1397
__declspec(dllimport) void __stdcall glRectf(GLfloat x1, GLfloat y1, GLfloat x2, GLfloat y2); 
#line 1398
__declspec(dllimport) void __stdcall glRectfv(const GLfloat * v1, const GLfloat * v2); 
#line 1399
__declspec(dllimport) void __stdcall glRecti(GLint x1, GLint y1, GLint x2, GLint y2); 
#line 1400
__declspec(dllimport) void __stdcall glRectiv(const GLint * v1, const GLint * v2); 
#line 1401
__declspec(dllimport) void __stdcall glRects(GLshort x1, GLshort y1, GLshort x2, GLshort y2); 
#line 1402
__declspec(dllimport) void __stdcall glRectsv(const GLshort * v1, const GLshort * v2); 
#line 1403
__declspec(dllimport) GLint __stdcall glRenderMode(GLenum mode); 
#line 1404
__declspec(dllimport) void __stdcall glRotated(GLdouble angle, GLdouble x, GLdouble y, GLdouble z); 
#line 1405
__declspec(dllimport) void __stdcall glRotatef(GLfloat angle, GLfloat x, GLfloat y, GLfloat z); 
#line 1406
__declspec(dllimport) void __stdcall glScaled(GLdouble x, GLdouble y, GLdouble z); 
#line 1407
__declspec(dllimport) void __stdcall glScalef(GLfloat x, GLfloat y, GLfloat z); 
#line 1408
__declspec(dllimport) void __stdcall glScissor(GLint x, GLint y, GLsizei width, GLsizei height); 
#line 1409
__declspec(dllimport) void __stdcall glSelectBuffer(GLsizei size, GLuint * buffer); 
#line 1410
__declspec(dllimport) void __stdcall glShadeModel(GLenum mode); 
#line 1411
__declspec(dllimport) void __stdcall glStencilFunc(GLenum func, GLint ref, GLuint mask); 
#line 1412
__declspec(dllimport) void __stdcall glStencilMask(GLuint mask); 
#line 1413
__declspec(dllimport) void __stdcall glStencilOp(GLenum fail, GLenum zfail, GLenum zpass); 
#line 1414
__declspec(dllimport) void __stdcall glTexCoord1d(GLdouble s); 
#line 1415
__declspec(dllimport) void __stdcall glTexCoord1dv(const GLdouble * v); 
#line 1416
__declspec(dllimport) void __stdcall glTexCoord1f(GLfloat s); 
#line 1417
__declspec(dllimport) void __stdcall glTexCoord1fv(const GLfloat * v); 
#line 1418
__declspec(dllimport) void __stdcall glTexCoord1i(GLint s); 
#line 1419
__declspec(dllimport) void __stdcall glTexCoord1iv(const GLint * v); 
#line 1420
__declspec(dllimport) void __stdcall glTexCoord1s(GLshort s); 
#line 1421
__declspec(dllimport) void __stdcall glTexCoord1sv(const GLshort * v); 
#line 1422
__declspec(dllimport) void __stdcall glTexCoord2d(GLdouble s, GLdouble t); 
#line 1423
__declspec(dllimport) void __stdcall glTexCoord2dv(const GLdouble * v); 
#line 1424
__declspec(dllimport) void __stdcall glTexCoord2f(GLfloat s, GLfloat t); 
#line 1425
__declspec(dllimport) void __stdcall glTexCoord2fv(const GLfloat * v); 
#line 1426
__declspec(dllimport) void __stdcall glTexCoord2i(GLint s, GLint t); 
#line 1427
__declspec(dllimport) void __stdcall glTexCoord2iv(const GLint * v); 
#line 1428
__declspec(dllimport) void __stdcall glTexCoord2s(GLshort s, GLshort t); 
#line 1429
__declspec(dllimport) void __stdcall glTexCoord2sv(const GLshort * v); 
#line 1430
__declspec(dllimport) void __stdcall glTexCoord3d(GLdouble s, GLdouble t, GLdouble r); 
#line 1431
__declspec(dllimport) void __stdcall glTexCoord3dv(const GLdouble * v); 
#line 1432
__declspec(dllimport) void __stdcall glTexCoord3f(GLfloat s, GLfloat t, GLfloat r); 
#line 1433
__declspec(dllimport) void __stdcall glTexCoord3fv(const GLfloat * v); 
#line 1434
__declspec(dllimport) void __stdcall glTexCoord3i(GLint s, GLint t, GLint r); 
#line 1435
__declspec(dllimport) void __stdcall glTexCoord3iv(const GLint * v); 
#line 1436
__declspec(dllimport) void __stdcall glTexCoord3s(GLshort s, GLshort t, GLshort r); 
#line 1437
__declspec(dllimport) void __stdcall glTexCoord3sv(const GLshort * v); 
#line 1438
__declspec(dllimport) void __stdcall glTexCoord4d(GLdouble s, GLdouble t, GLdouble r, GLdouble q); 
#line 1439
__declspec(dllimport) void __stdcall glTexCoord4dv(const GLdouble * v); 
#line 1440
__declspec(dllimport) void __stdcall glTexCoord4f(GLfloat s, GLfloat t, GLfloat r, GLfloat q); 
#line 1441
__declspec(dllimport) void __stdcall glTexCoord4fv(const GLfloat * v); 
#line 1442
__declspec(dllimport) void __stdcall glTexCoord4i(GLint s, GLint t, GLint r, GLint q); 
#line 1443
__declspec(dllimport) void __stdcall glTexCoord4iv(const GLint * v); 
#line 1444
__declspec(dllimport) void __stdcall glTexCoord4s(GLshort s, GLshort t, GLshort r, GLshort q); 
#line 1445
__declspec(dllimport) void __stdcall glTexCoord4sv(const GLshort * v); 
#line 1446
__declspec(dllimport) void __stdcall glTexCoordPointer(GLint size, GLenum type, GLsizei stride, const GLvoid * pointer); 
#line 1447
__declspec(dllimport) void __stdcall glTexEnvf(GLenum target, GLenum pname, GLfloat param); 
#line 1448
__declspec(dllimport) void __stdcall glTexEnvfv(GLenum target, GLenum pname, const GLfloat * params); 
#line 1449
__declspec(dllimport) void __stdcall glTexEnvi(GLenum target, GLenum pname, GLint param); 
#line 1450
__declspec(dllimport) void __stdcall glTexEnviv(GLenum target, GLenum pname, const GLint * params); 
#line 1451
__declspec(dllimport) void __stdcall glTexGend(GLenum coord, GLenum pname, GLdouble param); 
#line 1452
__declspec(dllimport) void __stdcall glTexGendv(GLenum coord, GLenum pname, const GLdouble * params); 
#line 1453
__declspec(dllimport) void __stdcall glTexGenf(GLenum coord, GLenum pname, GLfloat param); 
#line 1454
__declspec(dllimport) void __stdcall glTexGenfv(GLenum coord, GLenum pname, const GLfloat * params); 
#line 1455
__declspec(dllimport) void __stdcall glTexGeni(GLenum coord, GLenum pname, GLint param); 
#line 1456
__declspec(dllimport) void __stdcall glTexGeniv(GLenum coord, GLenum pname, const GLint * params); 
#line 1457
__declspec(dllimport) void __stdcall glTexImage1D(GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const GLvoid * pixels); 
#line 1458
__declspec(dllimport) void __stdcall glTexImage2D(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const GLvoid * pixels); 
#line 1459
__declspec(dllimport) void __stdcall glTexParameterf(GLenum target, GLenum pname, GLfloat param); 
#line 1460
__declspec(dllimport) void __stdcall glTexParameterfv(GLenum target, GLenum pname, const GLfloat * params); 
#line 1461
__declspec(dllimport) void __stdcall glTexParameteri(GLenum target, GLenum pname, GLint param); 
#line 1462
__declspec(dllimport) void __stdcall glTexParameteriv(GLenum target, GLenum pname, const GLint * params); 
#line 1463
__declspec(dllimport) void __stdcall glTexSubImage1D(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const GLvoid * pixels); 
#line 1464
__declspec(dllimport) void __stdcall glTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid * pixels); 
#line 1465
__declspec(dllimport) void __stdcall glTranslated(GLdouble x, GLdouble y, GLdouble z); 
#line 1466
__declspec(dllimport) void __stdcall glTranslatef(GLfloat x, GLfloat y, GLfloat z); 
#line 1467
__declspec(dllimport) void __stdcall glVertex2d(GLdouble x, GLdouble y); 
#line 1468
__declspec(dllimport) void __stdcall glVertex2dv(const GLdouble * v); 
#line 1469
__declspec(dllimport) void __stdcall glVertex2f(GLfloat x, GLfloat y); 
#line 1470
__declspec(dllimport) void __stdcall glVertex2fv(const GLfloat * v); 
#line 1471
__declspec(dllimport) void __stdcall glVertex2i(GLint x, GLint y); 
#line 1472
__declspec(dllimport) void __stdcall glVertex2iv(const GLint * v); 
#line 1473
__declspec(dllimport) void __stdcall glVertex2s(GLshort x, GLshort y); 
#line 1474
__declspec(dllimport) void __stdcall glVertex2sv(const GLshort * v); 
#line 1475
__declspec(dllimport) void __stdcall glVertex3d(GLdouble x, GLdouble y, GLdouble z); 
#line 1476
__declspec(dllimport) void __stdcall glVertex3dv(const GLdouble * v); 
#line 1477
__declspec(dllimport) void __stdcall glVertex3f(GLfloat x, GLfloat y, GLfloat z); 
#line 1478
__declspec(dllimport) void __stdcall glVertex3fv(const GLfloat * v); 
#line 1479
__declspec(dllimport) void __stdcall glVertex3i(GLint x, GLint y, GLint z); 
#line 1480
__declspec(dllimport) void __stdcall glVertex3iv(const GLint * v); 
#line 1481
__declspec(dllimport) void __stdcall glVertex3s(GLshort x, GLshort y, GLshort z); 
#line 1482
__declspec(dllimport) void __stdcall glVertex3sv(const GLshort * v); 
#line 1483
__declspec(dllimport) void __stdcall glVertex4d(GLdouble x, GLdouble y, GLdouble z, GLdouble w); 
#line 1484
__declspec(dllimport) void __stdcall glVertex4dv(const GLdouble * v); 
#line 1485
__declspec(dllimport) void __stdcall glVertex4f(GLfloat x, GLfloat y, GLfloat z, GLfloat w); 
#line 1486
__declspec(dllimport) void __stdcall glVertex4fv(const GLfloat * v); 
#line 1487
__declspec(dllimport) void __stdcall glVertex4i(GLint x, GLint y, GLint z, GLint w); 
#line 1488
__declspec(dllimport) void __stdcall glVertex4iv(const GLint * v); 
#line 1489
__declspec(dllimport) void __stdcall glVertex4s(GLshort x, GLshort y, GLshort z, GLshort w); 
#line 1490
__declspec(dllimport) void __stdcall glVertex4sv(const GLshort * v); 
#line 1491
__declspec(dllimport) void __stdcall glVertexPointer(GLint size, GLenum type, GLsizei stride, const GLvoid * pointer); 
#line 1492
__declspec(dllimport) void __stdcall glViewport(GLint x, GLint y, GLsizei width, GLsizei height); 
#line 1495
typedef void (__stdcall *PFNGLARRAYELEMENTEXTPROC)(GLint i); 
#line 1496
typedef void (__stdcall *PFNGLDRAWARRAYSEXTPROC)(GLenum mode, GLint first, GLsizei count); 
#line 1497
typedef void (__stdcall *PFNGLVERTEXPOINTEREXTPROC)(GLint size, GLenum type, GLsizei stride, GLsizei count, const GLvoid * pointer); 
#line 1498
typedef void (__stdcall *PFNGLNORMALPOINTEREXTPROC)(GLenum type, GLsizei stride, GLsizei count, const GLvoid * pointer); 
#line 1499
typedef void (__stdcall *PFNGLCOLORPOINTEREXTPROC)(GLint size, GLenum type, GLsizei stride, GLsizei count, const GLvoid * pointer); 
#line 1500
typedef void (__stdcall *PFNGLINDEXPOINTEREXTPROC)(GLenum type, GLsizei stride, GLsizei count, const GLvoid * pointer); 
#line 1501
typedef void (__stdcall *PFNGLTEXCOORDPOINTEREXTPROC)(GLint size, GLenum type, GLsizei stride, GLsizei count, const GLvoid * pointer); 
#line 1502
typedef void (__stdcall *PFNGLEDGEFLAGPOINTEREXTPROC)(GLsizei stride, GLsizei count, const GLboolean * pointer); 
#line 1503
typedef void (__stdcall *PFNGLGETPOINTERVEXTPROC)(GLenum pname, GLvoid ** params); 
#line 1504
typedef void (__stdcall *PFNGLARRAYELEMENTARRAYEXTPROC)(GLenum mode, GLsizei count, const GLvoid * pi); 
#line 1507
typedef void (__stdcall *PFNGLDRAWRANGEELEMENTSWINPROC)(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const GLvoid * indices); 
#line 1510
typedef void (__stdcall *PFNGLADDSWAPHINTRECTWINPROC)(GLint x, GLint y, GLsizei width, GLsizei height); 
#line 1513
typedef void (__stdcall *PFNGLCOLORTABLEEXTPROC)(GLenum target, GLenum internalFormat, GLsizei width, GLenum format, GLenum type, const GLvoid * data); 
#line 1516
typedef void (__stdcall *PFNGLCOLORSUBTABLEEXTPROC)(GLenum target, GLsizei start, GLsizei count, GLenum format, GLenum type, const GLvoid * data); 
#line 1519
typedef void (__stdcall *PFNGLGETCOLORTABLEEXTPROC)(GLenum target, GLenum format, GLenum type, GLvoid * data); 
#line 1521
typedef void (__stdcall *PFNGLGETCOLORTABLEPARAMETERIVEXTPROC)(GLenum target, GLenum pname, GLint * params); 
#line 1523
typedef void (__stdcall *PFNGLGETCOLORTABLEPARAMETERFVEXTPROC)(GLenum target, GLenum pname, GLfloat * params); 
#line 1530 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\GL/gl.h"
}
#line 1527
#pragma endregion
#line 26 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\GL/glu.h"
extern "C" {
#line 46 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\GL/glu.h"
#pragma region Desktop Family
#line 64 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\GL/glu.h"
const GLubyte *__stdcall gluErrorString(GLenum errCode); 
#line 67
const __wchar_t *__stdcall gluErrorUnicodeStringEXT(GLenum errCode); 
#line 70
const GLubyte *__stdcall gluGetString(GLenum name); 
#line 73
void __stdcall gluOrtho2D(GLdouble left, GLdouble right, GLdouble bottom, GLdouble top); 
#line 79
void __stdcall gluPerspective(GLdouble fovy, GLdouble aspect, GLdouble zNear, GLdouble zFar); 
#line 85
void __stdcall gluPickMatrix(GLdouble x, GLdouble y, GLdouble width, GLdouble height, GLint  viewport[4]); 
#line 92
void __stdcall gluLookAt(GLdouble eyex, GLdouble eyey, GLdouble eyez, GLdouble centerx, GLdouble centery, GLdouble centerz, GLdouble upx, GLdouble upy, GLdouble upz); 
#line 103
int __stdcall gluProject(GLdouble objx, GLdouble objy, GLdouble objz, const GLdouble  modelMatrix[16], const GLdouble  projMatrix[16], const GLint  viewport[4], GLdouble * winx, GLdouble * winy, GLdouble * winz); 
#line 114
int __stdcall gluUnProject(GLdouble winx, GLdouble winy, GLdouble winz, const GLdouble  modelMatrix[16], const GLdouble  projMatrix[16], const GLint  viewport[4], GLdouble * objx, GLdouble * objy, GLdouble * objz); 
#line 126
int __stdcall gluScaleImage(GLenum format, GLint widthin, GLint heightin, GLenum typein, const void * datain, GLint widthout, GLint heightout, GLenum typeout, void * dataout); 
#line 138
int __stdcall gluBuild1DMipmaps(GLenum target, GLint components, GLint width, GLenum format, GLenum type, const void * data); 
#line 146
int __stdcall gluBuild2DMipmaps(GLenum target, GLint components, GLint width, GLint height, GLenum format, GLenum type, const void * data); 
#line 157
class GLUnurbs; 
#line 158
class GLUquadric; 
#line 159
class GLUtesselator; 
#line 162
typedef GLUnurbs GLUnurbsObj; 
#line 163
typedef GLUquadric GLUquadricObj; 
#line 164
typedef GLUtesselator GLUtesselatorObj; 
#line 165
typedef GLUtesselator GLUtriangulatorObj; 
#line 182 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\GL/glu.h"
GLUquadric *__stdcall gluNewQuadric(); 
#line 183
void __stdcall gluDeleteQuadric(GLUquadric * state); 
#line 186
void __stdcall gluQuadricNormals(GLUquadric * quadObject, GLenum normals); 
#line 190
void __stdcall gluQuadricTexture(GLUquadric * quadObject, GLboolean textureCoords); 
#line 194
void __stdcall gluQuadricOrientation(GLUquadric * quadObject, GLenum orientation); 
#line 198
void __stdcall gluQuadricDrawStyle(GLUquadric * quadObject, GLenum drawStyle); 
#line 202
void __stdcall gluCylinder(GLUquadric * qobj, GLdouble baseRadius, GLdouble topRadius, GLdouble height, GLint slices, GLint stacks); 
#line 210
void __stdcall gluDisk(GLUquadric * qobj, GLdouble innerRadius, GLdouble outerRadius, GLint slices, GLint loops); 
#line 217
void __stdcall gluPartialDisk(GLUquadric * qobj, GLdouble innerRadius, GLdouble outerRadius, GLint slices, GLint loops, GLdouble startAngle, GLdouble sweepAngle); 
#line 226
void __stdcall gluSphere(GLUquadric * qobj, GLdouble radius, GLint slices, GLint stacks); 
#line 232
void __stdcall gluQuadricCallback(GLUquadric * qobj, GLenum which, void (__stdcall * fn)(void)); 
#line 237
GLUtesselator *__stdcall gluNewTess(); 
#line 240
void __stdcall gluDeleteTess(GLUtesselator * tess); 
#line 243
void __stdcall gluTessBeginPolygon(GLUtesselator * tess, void * polygon_data); 
#line 247
void __stdcall gluTessBeginContour(GLUtesselator * tess); 
#line 250
void __stdcall gluTessVertex(GLUtesselator * tess, GLdouble  coords[3], void * data); 
#line 255
void __stdcall gluTessEndContour(GLUtesselator * tess); 
#line 258
void __stdcall gluTessEndPolygon(GLUtesselator * tess); 
#line 261
void __stdcall gluTessProperty(GLUtesselator * tess, GLenum which, GLdouble value); 
#line 266
void __stdcall gluTessNormal(GLUtesselator * tess, GLdouble x, GLdouble y, GLdouble z); 
#line 272
void __stdcall gluTessCallback(GLUtesselator * tess, GLenum which, void (__stdcall * fn)(void)); 
#line 277
void __stdcall gluGetTessProperty(GLUtesselator * tess, GLenum which, GLdouble * value); 
#line 282
GLUnurbs *__stdcall gluNewNurbsRenderer(); 
#line 284
void __stdcall gluDeleteNurbsRenderer(GLUnurbs * nobj); 
#line 287
void __stdcall gluBeginSurface(GLUnurbs * nobj); 
#line 290
void __stdcall gluBeginCurve(GLUnurbs * nobj); 
#line 293
void __stdcall gluEndCurve(GLUnurbs * nobj); 
#line 296
void __stdcall gluEndSurface(GLUnurbs * nobj); 
#line 299
void __stdcall gluBeginTrim(GLUnurbs * nobj); 
#line 302
void __stdcall gluEndTrim(GLUnurbs * nobj); 
#line 305
void __stdcall gluPwlCurve(GLUnurbs * nobj, GLint count, GLfloat * array, GLint stride, GLenum type); 
#line 312
void __stdcall gluNurbsCurve(GLUnurbs * nobj, GLint nknots, GLfloat * knot, GLint stride, GLfloat * ctlarray, GLint order, GLenum type); 
#line 322
void __stdcall gluNurbsSurface(GLUnurbs * nobj, GLint sknot_count, float * sknot, GLint tknot_count, GLfloat * tknot, GLint s_stride, GLint t_stride, GLfloat * ctlarray, GLint sorder, GLint torder, GLenum type); 
#line 336
void __stdcall gluLoadSamplingMatrices(GLUnurbs * nobj, const GLfloat  modelMatrix[16], const GLfloat  projMatrix[16], const GLint  viewport[4]); 
#line 343
void __stdcall gluNurbsProperty(GLUnurbs * nobj, GLenum property, GLfloat value); 
#line 349
void __stdcall gluGetNurbsProperty(GLUnurbs * nobj, GLenum property, GLfloat * value); 
#line 355
void __stdcall gluNurbsCallback(GLUnurbs * nobj, GLenum which, void (__stdcall * fn)(void)); 
#line 364
typedef void (__stdcall *GLUquadricErrorProc)(GLenum); 
#line 367
typedef void (__stdcall *GLUtessBeginProc)(GLenum); 
#line 368
typedef void (__stdcall *GLUtessEdgeFlagProc)(GLboolean); 
#line 369
typedef void (__stdcall *GLUtessVertexProc)(void *); 
#line 370
typedef void (__stdcall *GLUtessEndProc)(void); 
#line 371
typedef void (__stdcall *GLUtessErrorProc)(GLenum); 
#line 372
typedef void (__stdcall *GLUtessCombineProc)(GLdouble [3], void *[4], GLfloat [4], void **); 
#line 376
typedef void (__stdcall *GLUtessBeginDataProc)(GLenum, void *); 
#line 377
typedef void (__stdcall *GLUtessEdgeFlagDataProc)(GLboolean, void *); 
#line 378
typedef void (__stdcall *GLUtessVertexDataProc)(void *, void *); 
#line 379
typedef void (__stdcall *GLUtessEndDataProc)(void *); 
#line 380
typedef void (__stdcall *GLUtessErrorDataProc)(GLenum, void *); 
#line 381
typedef void (__stdcall *GLUtessCombineDataProc)(GLdouble [3], void *[4], GLfloat [4], void **, void *); 
#line 388
typedef void (__stdcall *GLUnurbsErrorProc)(GLenum); 
#line 562
void __stdcall gluBeginPolygon(GLUtesselator * tess); 
#line 564
void __stdcall gluNextContour(GLUtesselator * tess, GLenum type); 
#line 567
void __stdcall gluEndPolygon(GLUtesselator * tess); 
#line 587 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um\\GL/glu.h"
}
#line 584
#pragma endregion
#line 392 "D:\\Projekty\\RayTracer\\packages\\nupengl.core.0.1.0.1\\build\\native\\include\\GL\\freeglut_std.h"
__declspec(dllimport) void __stdcall glutInit(int * pargc, char ** argv); 
#line 393
__declspec(dllimport) void __stdcall glutInitWindowPosition(int x, int y); 
#line 394
__declspec(dllimport) void __stdcall glutInitWindowSize(int width, int height); 
#line 395
__declspec(dllimport) void __stdcall glutInitDisplayMode(unsigned displayMode); 
#line 396
__declspec(dllimport) void __stdcall glutInitDisplayString(const char * displayMode); 
#line 401
__declspec(dllimport) void __stdcall glutMainLoop(); 
#line 406
__declspec(dllimport) int __stdcall glutCreateWindow(const char * title); 
#line 407
__declspec(dllimport) int __stdcall glutCreateSubWindow(int window, int x, int y, int width, int height); 
#line 408
__declspec(dllimport) void __stdcall glutDestroyWindow(int window); 
#line 409
__declspec(dllimport) void __stdcall glutSetWindow(int window); 
#line 410
__declspec(dllimport) int __stdcall glutGetWindow(); 
#line 411
__declspec(dllimport) void __stdcall glutSetWindowTitle(const char * title); 
#line 412
__declspec(dllimport) void __stdcall glutSetIconTitle(const char * title); 
#line 413
__declspec(dllimport) void __stdcall glutReshapeWindow(int width, int height); 
#line 414
__declspec(dllimport) void __stdcall glutPositionWindow(int x, int y); 
#line 415
__declspec(dllimport) void __stdcall glutShowWindow(); 
#line 416
__declspec(dllimport) void __stdcall glutHideWindow(); 
#line 417
__declspec(dllimport) void __stdcall glutIconifyWindow(); 
#line 418
__declspec(dllimport) void __stdcall glutPushWindow(); 
#line 419
__declspec(dllimport) void __stdcall glutPopWindow(); 
#line 420
__declspec(dllimport) void __stdcall glutFullScreen(); 
#line 425
__declspec(dllimport) void __stdcall glutPostWindowRedisplay(int window); 
#line 426
__declspec(dllimport) void __stdcall glutPostRedisplay(); 
#line 427
__declspec(dllimport) void __stdcall glutSwapBuffers(); 
#line 432
__declspec(dllimport) void __stdcall glutWarpPointer(int x, int y); 
#line 433
__declspec(dllimport) void __stdcall glutSetCursor(int cursor); 
#line 438
__declspec(dllimport) void __stdcall glutEstablishOverlay(); 
#line 439
__declspec(dllimport) void __stdcall glutRemoveOverlay(); 
#line 440
__declspec(dllimport) void __stdcall glutUseLayer(GLenum layer); 
#line 441
__declspec(dllimport) void __stdcall glutPostOverlayRedisplay(); 
#line 442
__declspec(dllimport) void __stdcall glutPostWindowOverlayRedisplay(int window); 
#line 443
__declspec(dllimport) void __stdcall glutShowOverlay(); 
#line 444
__declspec(dllimport) void __stdcall glutHideOverlay(); 
#line 449
__declspec(dllimport) int __stdcall glutCreateMenu(void (* callback)(int menu)); 
#line 450
__declspec(dllimport) void __stdcall glutDestroyMenu(int menu); 
#line 451
__declspec(dllimport) int __stdcall glutGetMenu(); 
#line 452
__declspec(dllimport) void __stdcall glutSetMenu(int menu); 
#line 453
__declspec(dllimport) void __stdcall glutAddMenuEntry(const char * label, int value); 
#line 454
__declspec(dllimport) void __stdcall glutAddSubMenu(const char * label, int subMenu); 
#line 455
__declspec(dllimport) void __stdcall glutChangeToMenuEntry(int item, const char * label, int value); 
#line 456
__declspec(dllimport) void __stdcall glutChangeToSubMenu(int item, const char * label, int value); 
#line 457
__declspec(dllimport) void __stdcall glutRemoveMenuItem(int item); 
#line 458
__declspec(dllimport) void __stdcall glutAttachMenu(int button); 
#line 459
__declspec(dllimport) void __stdcall glutDetachMenu(int button); 
#line 464
__declspec(dllimport) void __stdcall glutTimerFunc(unsigned time, void (* callback)(int), int value); 
#line 465
__declspec(dllimport) void __stdcall glutIdleFunc(void (* callback)(void)); 
#line 470
__declspec(dllimport) void __stdcall glutKeyboardFunc(void (* callback)(unsigned char, int, int)); 
#line 471
__declspec(dllimport) void __stdcall glutSpecialFunc(void (* callback)(int, int, int)); 
#line 472
__declspec(dllimport) void __stdcall glutReshapeFunc(void (* callback)(int, int)); 
#line 473
__declspec(dllimport) void __stdcall glutVisibilityFunc(void (* callback)(int)); 
#line 474
__declspec(dllimport) void __stdcall glutDisplayFunc(void (* callback)(void)); 
#line 475
__declspec(dllimport) void __stdcall glutMouseFunc(void (* callback)(int, int, int, int)); 
#line 476
__declspec(dllimport) void __stdcall glutMotionFunc(void (* callback)(int, int)); 
#line 477
__declspec(dllimport) void __stdcall glutPassiveMotionFunc(void (* callback)(int, int)); 
#line 478
__declspec(dllimport) void __stdcall glutEntryFunc(void (* callback)(int)); 
#line 480
__declspec(dllimport) void __stdcall glutKeyboardUpFunc(void (* callback)(unsigned char, int, int)); 
#line 481
__declspec(dllimport) void __stdcall glutSpecialUpFunc(void (* callback)(int, int, int)); 
#line 482
__declspec(dllimport) void __stdcall glutJoystickFunc(void (* callback)(unsigned, int, int, int), int pollInterval); 
#line 483
__declspec(dllimport) void __stdcall glutMenuStateFunc(void (* callback)(int)); 
#line 484
__declspec(dllimport) void __stdcall glutMenuStatusFunc(void (* callback)(int, int, int)); 
#line 485
__declspec(dllimport) void __stdcall glutOverlayDisplayFunc(void (* callback)(void)); 
#line 486
__declspec(dllimport) void __stdcall glutWindowStatusFunc(void (* callback)(int)); 
#line 488
__declspec(dllimport) void __stdcall glutSpaceballMotionFunc(void (* callback)(int, int, int)); 
#line 489
__declspec(dllimport) void __stdcall glutSpaceballRotateFunc(void (* callback)(int, int, int)); 
#line 490
__declspec(dllimport) void __stdcall glutSpaceballButtonFunc(void (* callback)(int, int)); 
#line 491
__declspec(dllimport) void __stdcall glutButtonBoxFunc(void (* callback)(int, int)); 
#line 492
__declspec(dllimport) void __stdcall glutDialsFunc(void (* callback)(int, int)); 
#line 493
__declspec(dllimport) void __stdcall glutTabletMotionFunc(void (* callback)(int, int)); 
#line 494
__declspec(dllimport) void __stdcall glutTabletButtonFunc(void (* callback)(int, int, int, int)); 
#line 499
__declspec(dllimport) int __stdcall glutGet(GLenum query); 
#line 500
__declspec(dllimport) int __stdcall glutDeviceGet(GLenum query); 
#line 501
__declspec(dllimport) int __stdcall glutGetModifiers(); 
#line 502
__declspec(dllimport) int __stdcall glutLayerGet(GLenum query); 
#line 507
__declspec(dllimport) void __stdcall glutBitmapCharacter(void * font, int character); 
#line 508
__declspec(dllimport) int __stdcall glutBitmapWidth(void * font, int character); 
#line 509
__declspec(dllimport) void __stdcall glutStrokeCharacter(void * font, int character); 
#line 510
__declspec(dllimport) int __stdcall glutStrokeWidth(void * font, int character); 
#line 511
__declspec(dllimport) int __stdcall glutBitmapLength(void * font, const unsigned char * string); 
#line 512
__declspec(dllimport) int __stdcall glutStrokeLength(void * font, const unsigned char * string); 
#line 517
__declspec(dllimport) void __stdcall glutWireCube(GLdouble size); 
#line 518
__declspec(dllimport) void __stdcall glutSolidCube(GLdouble size); 
#line 519
__declspec(dllimport) void __stdcall glutWireSphere(GLdouble radius, GLint slices, GLint stacks); 
#line 520
__declspec(dllimport) void __stdcall glutSolidSphere(GLdouble radius, GLint slices, GLint stacks); 
#line 521
__declspec(dllimport) void __stdcall glutWireCone(GLdouble base, GLdouble height, GLint slices, GLint stacks); 
#line 522
__declspec(dllimport) void __stdcall glutSolidCone(GLdouble base, GLdouble height, GLint slices, GLint stacks); 
#line 524
__declspec(dllimport) void __stdcall glutWireTorus(GLdouble innerRadius, GLdouble outerRadius, GLint sides, GLint rings); 
#line 525
__declspec(dllimport) void __stdcall glutSolidTorus(GLdouble innerRadius, GLdouble outerRadius, GLint sides, GLint rings); 
#line 526
__declspec(dllimport) void __stdcall glutWireDodecahedron(); 
#line 527
__declspec(dllimport) void __stdcall glutSolidDodecahedron(); 
#line 528
__declspec(dllimport) void __stdcall glutWireOctahedron(); 
#line 529
__declspec(dllimport) void __stdcall glutSolidOctahedron(); 
#line 530
__declspec(dllimport) void __stdcall glutWireTetrahedron(); 
#line 531
__declspec(dllimport) void __stdcall glutSolidTetrahedron(); 
#line 532
__declspec(dllimport) void __stdcall glutWireIcosahedron(); 
#line 533
__declspec(dllimport) void __stdcall glutSolidIcosahedron(); 
#line 539
__declspec(dllimport) void __stdcall glutWireTeapot(GLdouble size); 
#line 540
__declspec(dllimport) void __stdcall glutSolidTeapot(GLdouble size); 
#line 545
__declspec(dllimport) void __stdcall glutGameModeString(const char * string); 
#line 546
__declspec(dllimport) int __stdcall glutEnterGameMode(); 
#line 547
__declspec(dllimport) void __stdcall glutLeaveGameMode(); 
#line 548
__declspec(dllimport) int __stdcall glutGameModeGet(GLenum query); 
#line 553
__declspec(dllimport) int __stdcall glutVideoResizeGet(GLenum query); 
#line 554
__declspec(dllimport) void __stdcall glutSetupVideoResizing(); 
#line 555
__declspec(dllimport) void __stdcall glutStopVideoResizing(); 
#line 556
__declspec(dllimport) void __stdcall glutVideoResize(int x, int y, int width, int height); 
#line 557
__declspec(dllimport) void __stdcall glutVideoPan(int x, int y, int width, int height); 
#line 562
__declspec(dllimport) void __stdcall glutSetColor(int color, GLfloat red, GLfloat green, GLfloat blue); 
#line 563
__declspec(dllimport) GLfloat __stdcall glutGetColor(int color, int component); 
#line 564
__declspec(dllimport) void __stdcall glutCopyColormap(int window); 
#line 569
__declspec(dllimport) void __stdcall glutIgnoreKeyRepeat(int ignore); 
#line 570
__declspec(dllimport) void __stdcall glutSetKeyRepeat(int repeatMode); 
#line 571
__declspec(dllimport) void __stdcall glutForceJoystickFunc(); 
#line 576
__declspec(dllimport) int __stdcall glutExtensionSupported(const char * extension); 
#line 577
__declspec(dllimport) void __stdcall glutReportErrors(); 
#line 605
__declspec(dllimport) void __stdcall __glutInitWithExit(int * argcp, char ** argv, void (__cdecl * exitfunc)(int)); 
#line 606
__declspec(dllimport) int __stdcall __glutCreateWindowWithExit(const char * title, void (__cdecl * exitfunc)(int)); 
#line 607
__declspec(dllimport) int __stdcall __glutCreateMenuWithExit(void (* func)(int), void (__cdecl * exitfunc)(int)); 
#line 614 "D:\\Projekty\\RayTracer\\packages\\nupengl.core.0.1.0.1\\build\\native\\include\\GL\\freeglut_std.h"
static void __stdcall glutInit_ATEXIT_HACK(int *argcp, char **argv) { __glutInitWithExit(argcp, argv, exit); } 
#line 616
static int __stdcall glutCreateWindow_ATEXIT_HACK(const char *title) { return __glutCreateWindowWithExit(title, exit); } 
#line 618
static int __stdcall glutCreateMenu_ATEXIT_HACK(void (*func)(int)) { return __glutCreateMenuWithExit(func, exit); } 
#line 624 "D:\\Projekty\\RayTracer\\packages\\nupengl.core.0.1.0.1\\build\\native\\include\\GL\\freeglut_std.h"
}
#line 46 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\nv/target"
namespace nv { 
#line 47
namespace target { 
#line 48
namespace detail { 
#line 50
typedef unsigned __int64 base_int_t; 
#line 53
constexpr base_int_t all_hosts = (1); 
#line 56
constexpr base_int_t sm_35_bit = (1 << 1); 
#line 57
constexpr base_int_t sm_37_bit = (1 << 2); 
#line 58
constexpr base_int_t sm_50_bit = (1 << 3); 
#line 59
constexpr base_int_t sm_52_bit = (1 << 4); 
#line 60
constexpr base_int_t sm_53_bit = (1 << 5); 
#line 61
constexpr base_int_t sm_60_bit = (1 << 6); 
#line 62
constexpr base_int_t sm_61_bit = (1 << 7); 
#line 63
constexpr base_int_t sm_62_bit = (1 << 8); 
#line 64
constexpr base_int_t sm_70_bit = (1 << 9); 
#line 65
constexpr base_int_t sm_72_bit = (1 << 10); 
#line 66
constexpr base_int_t sm_75_bit = (1 << 11); 
#line 67
constexpr base_int_t sm_80_bit = (1 << 12); 
#line 68
constexpr base_int_t sm_86_bit = (1 << 13); 
#line 69
constexpr base_int_t sm_87_bit = (1 << 14); 
#line 70
constexpr base_int_t sm_89_bit = (1 << 15); 
#line 71
constexpr base_int_t sm_90_bit = (1 << 16); 
#line 72
constexpr base_int_t all_devices = (((((((((((((((sm_35_bit | sm_37_bit) | sm_50_bit) | sm_52_bit) | sm_53_bit) | sm_60_bit) | sm_61_bit) | sm_62_bit) | sm_70_bit) | sm_72_bit) | sm_75_bit) | sm_80_bit) | sm_86_bit) | sm_87_bit) | sm_89_bit) | sm_90_bit); 
#line 81
struct target_description { 
#line 82
base_int_t targets; 
#line 84
constexpr target_description(base_int_t a) : targets(a) { } 
#line 85
}; 
#line 88
enum class sm_selector: base_int_t { 
#line 89
sm_35 = 35Ui64, sm_37 = 37Ui64, 
#line 90
sm_50 = 50Ui64, sm_52 = 52Ui64, sm_53, 
#line 91
sm_60 = 60Ui64, sm_61, sm_62, 
#line 92
sm_70 = 70Ui64, sm_72 = 72Ui64, sm_75 = 75Ui64, 
#line 93
sm_80 = 80Ui64, sm_86 = 86Ui64, sm_87, 
#line 94
sm_89 = 89Ui64, sm_90
#line 95
}; 
#line 97
constexpr base_int_t toint(sm_selector a) { 
#line 98
return static_cast< base_int_t>(a); 
#line 99
} 
#line 101
constexpr base_int_t bitexact(sm_selector a) { 
#line 102
return (toint(a) == (35)) ? sm_35_bit : ((toint(a) == (37)) ? sm_37_bit : ((toint(a) == (50)) ? sm_50_bit : ((toint(a) == (52)) ? sm_52_bit : ((toint(a) == (53)) ? sm_53_bit : ((toint(a) == (60)) ? sm_60_bit : ((toint(a) == (61)) ? sm_61_bit : ((toint(a) == (62)) ? sm_62_bit : ((toint(a) == (70)) ? sm_70_bit : ((toint(a) == (72)) ? sm_72_bit : ((toint(a) == (75)) ? sm_75_bit : ((toint(a) == (80)) ? sm_80_bit : ((toint(a) == (86)) ? sm_86_bit : ((toint(a) == (87)) ? sm_87_bit : ((toint(a) == (89)) ? sm_89_bit : ((toint(a) == (90)) ? sm_90_bit : (0)))))))))))))))); 
#line 118
} 
#line 120
constexpr base_int_t bitrounddown(sm_selector a) { 
#line 121
return (toint(a) >= (90)) ? sm_90_bit : ((toint(a) >= (89)) ? sm_89_bit : ((toint(a) >= (87)) ? sm_87_bit : ((toint(a) >= (86)) ? sm_86_bit : ((toint(a) >= (80)) ? sm_80_bit : ((toint(a) >= (75)) ? sm_75_bit : ((toint(a) >= (72)) ? sm_72_bit : ((toint(a) >= (70)) ? sm_70_bit : ((toint(a) >= (62)) ? sm_62_bit : ((toint(a) >= (61)) ? sm_61_bit : ((toint(a) >= (60)) ? sm_60_bit : ((toint(a) >= (53)) ? sm_53_bit : ((toint(a) >= (52)) ? sm_52_bit : ((toint(a) >= (50)) ? sm_50_bit : ((toint(a) >= (37)) ? sm_37_bit : ((toint(a) >= (35)) ? sm_35_bit : (0)))))))))))))))); 
#line 137
} 
#line 142
constexpr target_description is_exactly(sm_selector a) { 
#line 143
return ((target_description)(bitexact(a))); 
#line 144
} 
#line 147
constexpr target_description provides(sm_selector a) { 
#line 148
return ((target_description)((~(bitrounddown(a) - (1))) & all_devices)); 
#line 149
} 
#line 154
constexpr target_description operator&&(target_description a, target_description 
#line 155
b) { 
#line 156
return ((target_description)((a.targets) & (b.targets))); 
#line 157
} 
#line 160
constexpr target_description operator||(target_description a, target_description 
#line 161
b) { 
#line 162
return ((target_description)((a.targets) | (b.targets))); 
#line 163
} 
#line 166
constexpr target_description operator!(target_description a) { 
#line 167
return ((target_description)((~(a.targets)) & (all_devices | all_hosts))); 
#line 168
} 
#line 169
}
#line 171
using detail::target_description;
#line 172
using detail::sm_selector;
#line 175
constexpr detail::target_description is_host = ((detail::target_description)(detail::all_hosts)); 
#line 177
constexpr detail::target_description is_device = ((detail::target_description)(detail::all_devices)); 
#line 179
constexpr detail::target_description any_target = ((detail::target_description)(detail::all_hosts | detail::all_devices)); 
#line 181
constexpr detail::target_description no_target = ((detail::target_description)(0)); 
#line 185
constexpr detail::sm_selector sm_35 = sm_selector::sm_35; 
#line 186
constexpr detail::sm_selector sm_37 = sm_selector::sm_37; 
#line 187
constexpr detail::sm_selector sm_50 = sm_selector::sm_50; 
#line 188
constexpr detail::sm_selector sm_52 = sm_selector::sm_52; 
#line 189
constexpr detail::sm_selector sm_53 = sm_selector::sm_53; 
#line 190
constexpr detail::sm_selector sm_60 = sm_selector::sm_60; 
#line 191
constexpr detail::sm_selector sm_61 = sm_selector::sm_61; 
#line 192
constexpr detail::sm_selector sm_62 = sm_selector::sm_62; 
#line 193
constexpr detail::sm_selector sm_70 = sm_selector::sm_70; 
#line 194
constexpr detail::sm_selector sm_72 = sm_selector::sm_72; 
#line 195
constexpr detail::sm_selector sm_75 = sm_selector::sm_75; 
#line 196
constexpr detail::sm_selector sm_80 = sm_selector::sm_80; 
#line 197
constexpr detail::sm_selector sm_86 = sm_selector::sm_86; 
#line 198
constexpr detail::sm_selector sm_87 = sm_selector::sm_87; 
#line 199
constexpr detail::sm_selector sm_89 = sm_selector::sm_89; 
#line 200
constexpr detail::sm_selector sm_90 = sm_selector::sm_90; 
#line 202
using detail::is_exactly;
#line 203
using detail::provides;
#line 204
}
#line 205
}
#line 90 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\curand_kernel.h"
namespace curand_detail { 
#line 91
template< bool B, class T = void> 
#line 92
struct enable_if { }; 
#line 94
template< class T> 
#line 95
struct enable_if< true, T>  { typedef T type; }; 
#line 97
template< class T, class U> 
#line 98
struct is_same { static const bool value = false; }; 
#line 100
template< class T> 
#line 101
struct is_same< T, T>  { static const bool value = true; }; 
#line 102
}
#line 71 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\curand.h"
extern "C" {
#line 90 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\curand.h"
enum curandStatus { 
#line 91
CURAND_STATUS_SUCCESS, 
#line 92
CURAND_STATUS_VERSION_MISMATCH = 100, 
#line 93
CURAND_STATUS_NOT_INITIALIZED, 
#line 94
CURAND_STATUS_ALLOCATION_FAILED, 
#line 95
CURAND_STATUS_TYPE_ERROR, 
#line 96
CURAND_STATUS_OUT_OF_RANGE, 
#line 97
CURAND_STATUS_LENGTH_NOT_MULTIPLE, 
#line 98
CURAND_STATUS_DOUBLE_PRECISION_REQUIRED, 
#line 99
CURAND_STATUS_LAUNCH_FAILURE = 201, 
#line 100
CURAND_STATUS_PREEXISTING_FAILURE, 
#line 101
CURAND_STATUS_INITIALIZATION_FAILED, 
#line 102
CURAND_STATUS_ARCH_MISMATCH, 
#line 103
CURAND_STATUS_INTERNAL_ERROR = 999
#line 104
}; 
#line 110
typedef curandStatus curandStatus_t; 
#line 116
enum curandRngType { 
#line 117
CURAND_RNG_TEST, 
#line 118
CURAND_RNG_PSEUDO_DEFAULT = 100, 
#line 119
CURAND_RNG_PSEUDO_XORWOW, 
#line 120
CURAND_RNG_PSEUDO_MRG32K3A = 121, 
#line 121
CURAND_RNG_PSEUDO_MTGP32 = 141, 
#line 122
CURAND_RNG_PSEUDO_MT19937, 
#line 123
CURAND_RNG_PSEUDO_PHILOX4_32_10 = 161, 
#line 124
CURAND_RNG_QUASI_DEFAULT = 200, 
#line 125
CURAND_RNG_QUASI_SOBOL32, 
#line 126
CURAND_RNG_QUASI_SCRAMBLED_SOBOL32, 
#line 127
CURAND_RNG_QUASI_SOBOL64, 
#line 128
CURAND_RNG_QUASI_SCRAMBLED_SOBOL64
#line 129
}; 
#line 135
typedef curandRngType curandRngType_t; 
#line 141
enum curandOrdering { 
#line 142
CURAND_ORDERING_PSEUDO_BEST = 100, 
#line 143
CURAND_ORDERING_PSEUDO_DEFAULT, 
#line 144
CURAND_ORDERING_PSEUDO_SEEDED, 
#line 145
CURAND_ORDERING_PSEUDO_LEGACY, 
#line 146
CURAND_ORDERING_PSEUDO_DYNAMIC, 
#line 147
CURAND_ORDERING_QUASI_DEFAULT = 201
#line 148
}; 
#line 154
typedef curandOrdering curandOrdering_t; 
#line 160
enum curandDirectionVectorSet { 
#line 161
CURAND_DIRECTION_VECTORS_32_JOEKUO6 = 101, 
#line 162
CURAND_SCRAMBLED_DIRECTION_VECTORS_32_JOEKUO6, 
#line 163
CURAND_DIRECTION_VECTORS_64_JOEKUO6, 
#line 164
CURAND_SCRAMBLED_DIRECTION_VECTORS_64_JOEKUO6
#line 165
}; 
#line 171
typedef curandDirectionVectorSet curandDirectionVectorSet_t; 
#line 178
typedef unsigned curandDirectionVectors32_t[32]; 
#line 185
typedef unsigned __int64 curandDirectionVectors64_t[64]; 
#line 191
struct curandGenerator_st; 
#line 197
typedef curandGenerator_st *curandGenerator_t; 
#line 204
typedef double curandDistribution_st; 
#line 205
typedef curandDistribution_st *curandDistribution_t; 
#line 206
typedef struct curandDistributionShift_st *curandDistributionShift_t; 
#line 212
typedef struct curandDistributionM2Shift_st *curandDistributionM2Shift_t; 
#line 213
typedef struct curandHistogramM2_st *curandHistogramM2_t; 
#line 214
typedef unsigned curandHistogramM2K_st; 
#line 215
typedef curandHistogramM2K_st *curandHistogramM2K_t; 
#line 216
typedef curandDistribution_st curandHistogramM2V_st; 
#line 217
typedef curandHistogramM2V_st *curandHistogramM2V_t; 
#line 219
typedef struct curandDiscreteDistribution_st *curandDiscreteDistribution_t; 
#line 226
enum curandMethod { 
#line 227
CURAND_CHOOSE_BEST, 
#line 228
CURAND_ITR, 
#line 229
CURAND_KNUTH, 
#line 230
CURAND_HITR, 
#line 231
CURAND_M1, 
#line 232
CURAND_M2, 
#line 233
CURAND_BINARY_SEARCH, 
#line 234
CURAND_DISCRETE_GAUSS, 
#line 235
CURAND_REJECTION, 
#line 236
CURAND_DEVICE_API, 
#line 237
CURAND_FAST_REJECTION, 
#line 238
CURAND_3RD, 
#line 239
CURAND_DEFINITION, 
#line 240
CURAND_POISSON
#line 241
}; 
#line 243
typedef curandMethod curandMethod_t; 
#line 335
curandStatus_t __stdcall curandCreateGenerator(curandGenerator_t * generator, curandRngType_t rng_type); 
#line 415
curandStatus_t __stdcall curandCreateGeneratorHost(curandGenerator_t * generator, curandRngType_t rng_type); 
#line 429
curandStatus_t __stdcall curandDestroyGenerator(curandGenerator_t generator); 
#line 445
curandStatus_t __stdcall curandGetVersion(int * version); 
#line 461
curandStatus_t __stdcall curandGetProperty(libraryPropertyType type, int * value); 
#line 478
curandStatus_t __stdcall curandSetStream(curandGenerator_t generator, cudaStream_t stream); 
#line 497
curandStatus_t __stdcall curandSetPseudoRandomGeneratorSeed(curandGenerator_t generator, unsigned __int64 seed); 
#line 515
curandStatus_t __stdcall curandSetGeneratorOffset(curandGenerator_t generator, unsigned __int64 offset); 
#line 540
curandStatus_t __stdcall curandSetGeneratorOrdering(curandGenerator_t generator, curandOrdering_t order); 
#line 560
curandStatus_t __stdcall curandSetQuasiRandomGeneratorDimensions(curandGenerator_t generator, unsigned num_dimensions); 
#line 590
curandStatus_t __stdcall curandGenerate(curandGenerator_t generator, unsigned * outputPtr, size_t num); 
#line 618
curandStatus_t __stdcall curandGenerateLongLong(curandGenerator_t generator, unsigned __int64 * outputPtr, size_t num); 
#line 647
curandStatus_t __stdcall curandGenerateUniform(curandGenerator_t generator, float * outputPtr, size_t num); 
#line 677
curandStatus_t __stdcall curandGenerateUniformDouble(curandGenerator_t generator, double * outputPtr, size_t num); 
#line 723
curandStatus_t __stdcall curandGenerateNormal(curandGenerator_t generator, float * outputPtr, size_t n, float mean, float stddev); 
#line 771
curandStatus_t __stdcall curandGenerateNormalDouble(curandGenerator_t generator, double * outputPtr, size_t n, double mean, double stddev); 
#line 819
curandStatus_t __stdcall curandGenerateLogNormal(curandGenerator_t generator, float * outputPtr, size_t n, float mean, float stddev); 
#line 868
curandStatus_t __stdcall curandGenerateLogNormalDouble(curandGenerator_t generator, double * outputPtr, size_t n, double mean, double stddev); 
#line 894
curandStatus_t __stdcall curandCreatePoissonDistribution(double lambda, curandDiscreteDistribution_t * discrete_distribution); 
#line 910
curandStatus_t __stdcall curandDestroyDistribution(curandDiscreteDistribution_t discrete_distribution); 
#line 943
curandStatus_t __stdcall curandGeneratePoisson(curandGenerator_t generator, unsigned * outputPtr, size_t n, double lambda); 
#line 947
curandStatus_t __stdcall curandGeneratePoissonMethod(curandGenerator_t generator, unsigned * outputPtr, size_t n, double lambda, curandMethod_t method); 
#line 952
curandStatus_t __stdcall curandGenerateBinomial(curandGenerator_t generator, unsigned * outputPtr, size_t num, unsigned n, double p); 
#line 956
curandStatus_t __stdcall curandGenerateBinomialMethod(curandGenerator_t generator, unsigned * outputPtr, size_t num, unsigned n, double p, curandMethod_t method); 
#line 982
curandStatus_t __stdcall curandGenerateSeeds(curandGenerator_t generator); 
#line 1006
curandStatus_t __stdcall curandGetDirectionVectors32(curandDirectionVectors32_t * vectors[], curandDirectionVectorSet_t set); 
#line 1024
curandStatus_t __stdcall curandGetScrambleConstants32(unsigned ** constants); 
#line 1048
curandStatus_t __stdcall curandGetDirectionVectors64(curandDirectionVectors64_t * vectors[], curandDirectionVectorSet_t set); 
#line 1066
curandStatus_t __stdcall curandGetScrambleConstants64(unsigned __int64 ** constants); 
#line 1073 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\curand.h"
}
#line 52 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\curand_discrete.h"
struct curandDistributionShift_st { 
#line 53
curandDistribution_t probability; 
#line 54
curandDistribution_t host_probability; 
#line 55
unsigned shift; 
#line 56
unsigned length; 
#line 57
unsigned host_gen; 
#line 58
}; 
#line 60
struct curandHistogramM2_st { 
#line 61
curandHistogramM2V_t V; 
#line 62
curandHistogramM2V_t host_V; 
#line 63
curandHistogramM2K_t K; 
#line 64
curandHistogramM2K_t host_K; 
#line 65
unsigned host_gen; 
#line 66
}; 
#line 69
struct curandDistributionM2Shift_st { 
#line 70
curandHistogramM2_t histogram; 
#line 71
curandHistogramM2_t host_histogram; 
#line 72
unsigned shift; 
#line 73
unsigned length; 
#line 74
unsigned host_gen; 
#line 75
}; 
#line 77
struct curandDiscreteDistribution_st { 
#line 78
curandDiscreteDistribution_t self_host_ptr; 
#line 79
curandDistributionM2Shift_t M2; 
#line 80
curandDistributionM2Shift_t host_M2; 
#line 81
double stddev; 
#line 82
double mean; 
#line 83
curandMethod_t method; 
#line 84
unsigned host_gen; 
#line 85
}; 
#line 67 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\curand_precalc.h"
static unsigned precalc_xorwow_matrix[32][800]; 
#line 935
static unsigned precalc_xorwow_matrix_host[32][800] = {{(850664906UL), (2293210629UL), (1517805917UL), (1215500405UL), (1612415445UL), (645388200UL), (824349799UL), (3517232886UL), (4075591755UL), (3089899292UL), (4249786064UL), (3811424903UL), (1100783479UL), (53649761UL), (2817264826UL), (3159462529UL), (1654848550UL), (950025444UL), (3095510002UL), (4080567211UL), (4111078399UL), (3241719305UL), (2788212779UL), (4256963770UL), (2426893717UL), (4190211142UL), (1420776905UL), (3780537969UL), (1102912875UL), (1657948873UL), (3354905256UL), (2519610308UL), (515777663UL), (3396785394UL), (1832603711UL), (1154211550UL), (1915690212UL), (1933919046UL), (789578337UL), (337961173UL), (1359089498UL), (2249086205UL), (3417955173UL), (862571348UL), (528120760UL), (1265685672UL), (1970052076UL), (3585976752UL), (3645339918UL), (312171257UL), (1360991400UL), (1994321680UL), (2327168468UL), (2540437053UL), (1180483641UL), (2217962701UL), (182726833UL), (590204372UL), (1904496495UL), (2545607041UL), (3697978033UL), (1084030545UL), (3397906968UL), (2192325323UL), (2704204176UL), (1069092002UL), (2364406907UL), (1578647245UL), (3561974633UL), (3437665426UL), (1464127305UL), (1616628807UL), (2243114101UL), (3639967880UL), (1702613633UL), (2437350057UL), (39991274UL), (2024323584UL), (3795072940UL), (3604530798UL), (443099203UL), (643536212UL), (1919517328UL), (3931285769UL), (427935569UL), (276421624UL), (2492081750UL), (262729512UL), (3088549877UL), (2922650665UL), (1816283755UL), (4246096489UL), (842575914UL), (1460435650UL), (3050522190UL), (2640849794UL), (3697925816UL), (3465779075UL), (3856929655UL), (1365559780UL), (2897029415UL), (2747033756UL), (3611830629UL), (1891542518UL), (1897590206UL), (437451803UL), (677924906UL), (123809117UL), (3940574372UL), (687640291UL), (3488484529UL), (470218446UL), (1092571016UL), (1537938503UL), (1073323937UL), (611300083UL), (3809285994UL), (3975678726UL), (925845389UL), (2514775760UL), (2859302390UL), (2761919483UL), (993285307UL), (164095287UL), (3736193671UL), (2078946336UL), (1418537059UL), (1202525920UL), (4234029440UL), (1313593624UL), (2484428922UL), (1833969372UL), (661495122UL), (2217907395UL), (2795045321UL), (2950835531UL), (1402379354UL), (351314168UL), (1902476749UL), (1914974334UL), (2873973176UL), (1321203603UL), (3316118265UL), (3282193947UL), (1342191737UL), (793441242UL), (3281524559UL), (296088733UL), (487851702UL), (712098215UL), (1388727135UL), (1705533557UL), (3557800292UL), (399729516UL), (1355829467UL), (291276309UL), (421164833UL), (1318404599UL), (2064519128UL), (1161612642UL), (2076623594UL), (850664906UL), (2293210629UL), (1517805917UL), (1215500405UL), (3847487204UL), (645388200UL), (824349799UL), (3517232886UL), (4075591755UL), (2755872609UL), (4249786064UL), (3811424903UL), (1100783479UL), (53649761UL), (1417544262UL), (3159462529UL), (1654848550UL), (950025444UL), (3095510002UL), (1908900347UL), (4111078399UL), (3241719305UL), (2788212779UL), (4256963770UL), (3750258343UL), (4190211142UL), (1420776905UL), (3780537969UL), (1102912875UL), (1690550UL), (3354905256UL), (2519610308UL), (515777663UL), (3396785394UL), (2658162202UL), (1154211550UL), (1915690212UL), (1933919046UL), (789578337UL), (189880016UL), (1359089498UL), (2249086205UL), (3417955173UL), (862571348UL), (998719835UL), (1265685672UL), (1970052076UL), (3585976752UL), (3645339918UL), (2973042959UL), (1360991400UL), (1994321680UL), (2327168468UL), (2540437053UL), (2283905032UL), (2217962701UL), (182726833UL), (590204372UL), (1904496495UL), (110719262UL), (3697978033UL), (1084030545UL), (3397906968UL), (2192325323UL), (4133333579UL), (1069092002UL), (2364406907UL), (1578647245UL), (3561974633UL), (3629845331UL), (1464127305UL), (1616628807UL), (2243114101UL), (3639967880UL), (3256744141UL), (2437350057UL), (39991274UL), (2024323584UL), (3795072940UL), (1024703328UL), (443099203UL), (643536212UL), (1919517328UL), (3931285769UL), (2755167056UL), (276421624UL), (2492081750UL), (262729512UL), (3088549877UL), (2817867653UL), (1816283755UL), (4246096489UL), (842575914UL), (1460435650UL), (2276077438UL), (2640849794UL), (3697925816UL), (3465779075UL), (3856929655UL), (130551477UL), (2897029415UL), (2747033756UL), (3611830629UL), (1891542518UL), (804565809UL), (437451803UL), (677924906UL), (123809117UL), (3940574372UL), (2446610749UL), (3488484529UL), (470218446UL), (1092571016UL), (1537938503UL), (1502147484UL), (611300083UL), (3809285994UL), (3975678726UL), (925845389UL), (872826112UL), (2859302390UL), (2761919483UL), (993285307UL), (164095287UL), (3901654538UL), (2078946336UL), (1418537059UL), (1202525920UL), (4234029440UL), (704759480UL), (2484428922UL), (1833969372UL), (661495122UL), (2217907395UL), (3287413716UL), (2950835531UL), (1402379354UL), (351314168UL), (1902476749UL), (2033316109UL), (2873973176UL), (1321203603UL), (3316118265UL), (3282193947UL), (1316780684UL), (793441242UL), (3281524559UL), (296088733UL), (487851702UL), (314311643UL), (1388727135UL), (1705533557UL), (3557800292UL), (399729516UL), (1660074989UL), (291276309UL), (421164833UL), (1318404599UL), (2064519128UL), (3156334112UL), (2076623594UL), (850664906UL), (2293210629UL), (1517805917UL), (335452425UL), (3847487204UL), (645388200UL), (824349799UL), (3517232886UL), (954487767UL), (2755872609UL), (4249786064UL), (3811424903UL), (1100783479UL), (3408594583UL), (1417544262UL), (3159462529UL), (1654848550UL), (950025444UL), (324339737UL), (1908900347UL), (4111078399UL), (3241719305UL), (2788212779UL), (1890540205UL), (3750258343UL), (4190211142UL), (1420776905UL), (3780537969UL), (3716648585UL), (1690550UL), (3354905256UL), (2519610308UL), (515777663UL), (3758156132UL), (2658162202UL), (1154211550UL), (1915690212UL), (1933919046UL), (844149171UL), (189880016UL), (1359089498UL), (2249086205UL), (3417955173UL), (1031812215UL), (998719835UL), (1265685672UL), (1970052076UL), (3585976752UL), (3174204115UL), (2973042959UL), (1360991400UL), (1994321680UL), (2327168468UL), (714016907UL), (2283905032UL), (2217962701UL), (182726833UL), (590204372UL), (2151450260UL), (110719262UL), (3697978033UL), (1084030545UL), (3397906968UL), (767772303UL), (4133333579UL), (1069092002UL), (2364406907UL), (1578647245UL), (42955292UL), (3629845331UL), (1464127305UL), (1616628807UL), (2243114101UL), (3222189776UL), (3256744141UL), (2437350057UL), (39991274UL), (2024323584UL), (3142424684UL), (1024703328UL), (443099203UL), (643536212UL), (1919517328UL), (918511196UL), (2755167056UL), (276421624UL), (2492081750UL), (262729512UL), (4246877536UL), (2817867653UL), (1816283755UL), (4246096489UL), (842575914UL), (1425765936UL), (2276077438UL), (2640849794UL), (3697925816UL), (3465779075UL), (1491702526UL), (130551477UL), (2897029415UL), (2747033756UL), (3611830629UL), (1844578694UL), (804565809UL), (437451803UL), (677924906UL), (123809117UL), (3419189841UL), (2446610749UL), (3488484529UL), (470218446UL), (1092571016UL), (3272535988UL), (1502147484UL), (611300083UL), (3809285994UL), (3975678726UL), (2853681168UL), (872826112UL), (2859302390UL), (2761919483UL), (993285307UL), (1434560128UL), (3901654538UL), (2078946336UL), (1418537059UL), (1202525920UL), (2530097881UL), (704759480UL), (2484428922UL), (1833969372UL), (661495122UL), (503878844UL), (3287413716UL), (2950835531UL), (1402379354UL), (351314168UL), (4131886119UL), (2033316109UL), (2873973176UL), (1321203603UL), (3316118265UL), (237900321UL), (1316780684UL), (793441242UL), (3281524559UL), (296088733UL), (1730738847UL), (314311643UL), (1388727135UL), (1705533557UL), (3557800292UL), (1553835665UL), (1660074989UL), (291276309UL), (421164833UL), (1318404599UL), (964731488UL), (3156334112UL), (2076623594UL), (850664906UL), (2293210629UL), (1105350579UL), (335452425UL), (3847487204UL), (645388200UL), (824349799UL), (2789953706UL), (954487767UL), (2755872609UL), (4249786064UL), (3811424903UL), (3937839949UL), (3408594583UL), (1417544262UL), (3159462529UL), (1654848550UL), (624060530UL), (324339737UL), (1908900347UL), (4111078399UL), (3241719305UL), (2294919498UL), (1890540205UL), (3750258343UL), (4190211142UL), (1420776905UL), (2279133729UL), (3716648585UL), (1690550UL), (3354905256UL), (2519610308UL), (3563975602UL), (3758156132UL), (2658162202UL), (1154211550UL), (1915690212UL), (3505586122UL), (844149171UL), (189880016UL), (1359089498UL), (2249086205UL), (2389487504UL), (1031812215UL), (998719835UL), (1265685672UL), (1970052076UL), (2798611919UL), (3174204115UL), (2973042959UL), (1360991400UL), (1994321680UL), (1684134678UL), (714016907UL), (2283905032UL), (2217962701UL), (182726833UL), (1734988742UL), (2151450260UL), (110719262UL), (3697978033UL), (1084030545UL), (159906818UL), (767772303UL), (4133333579UL), (1069092002UL), (2364406907UL), (1290801202UL), (42955292UL), (3629845331UL), (1464127305UL), (1616628807UL), (987794861UL), (3222189776UL), (3256744141UL), (2437350057UL), (39991274UL), (3644076751UL), (3142424684UL), (1024703328UL), (443099203UL), (643536212UL), (1487589384UL), (918511196UL), (2755167056UL), (276421624UL), (2492081750UL), (137688638UL), (4246877536UL), (2817867653UL), (1816283755UL), (4246096489UL), (1518475380UL), (1425765936UL), (2276077438UL), (2640849794UL), (3697925816UL), (4226506771UL), (1491702526UL), (130551477UL), (2897029415UL), (2747033756UL), (2033599579UL), (1844578694UL), (804565809UL), (437451803UL), (677924906UL), (2749065512UL), (3419189841UL), (2446610749UL), (3488484529UL), (470218446UL), (290444026UL), (3272535988UL), (1502147484UL), (611300083UL), (3809285994UL), (2546040767UL), (2853681168UL), (872826112UL), (2859302390UL), (2761919483UL), (4097961150UL), (1434560128UL), (3901654538UL), (2078946336UL), (1418537059UL), (2725734455UL), (2530097881UL), (704759480UL), (2484428922UL), (1833969372UL), (3999408333UL), (503878844UL), (3287413716UL), (2950835531UL), (1402379354UL), (3861442503UL), (4131886119UL), (2033316109UL), (2873973176UL), (1321203603UL), (1267331405UL), (237900321UL), (1316780684UL), (793441242UL), (3281524559UL), (1273427916UL), (1730738847UL), (314311643UL), (1388727135UL), (1705533557UL), (1474310231UL), (1553835665UL), (1660074989UL), (291276309UL), (421164833UL), (3884815658UL), (3088049345UL), (3307042227UL), (3228948601UL), (1717605083UL), (1864502063UL), (3799516572UL), (2372822470UL), (2691586476UL), (1172840854UL), (1577099080UL), (870101866UL), (2139291021UL), (406996656UL), (255568268UL), (897760202UL), (674745664UL), (885214361UL), (3753233375UL), (3015215223UL), (1711461259UL), (3241363282UL), (2125360928UL), (2493601640UL), (2350228245UL), (3434627328UL), (2095642963UL), (3360932494UL), (3287396242UL), (4070512427UL), (3415702664UL), (1958354224UL), (3280206940UL), (3929504236UL), (3390499817UL), (4144225735UL), (3621750606UL), (3205006592UL), (3495743785UL), (269239326UL), (2181299371UL), (2898796651UL), (2613623219UL), (3988711298UL), (2162437858UL), (949553433UL), (3289670000UL), (3559525307UL), (3366925567UL), (2112148665UL), (955626393UL), (1790865381UL), (699223558UL), (3889584301UL), (1020750250UL), (4105283899UL), (2295851818UL), (4045668915UL), (2224770025UL), (766386910UL), (4265157386UL), (89139307UL), (2099710177UL), (1012450874UL), (1875492446UL), (1927399417UL), (767450812UL), (654474783UL), (4265293038UL), (4041215389UL), (4102336947UL), (4263617328UL), (2135826340UL), (2317231535UL), (3773895729UL), (403151111UL), (1400693138UL), (4255050194UL), (755369466UL), (2325764302UL), (2617301159UL), (4165707294UL), (1206304709UL), (2415645397UL), (4276004841UL), (1457022279UL), (662660652UL), (795140282UL), (828519889UL), (805830562UL), (1179976369UL), (2212548232UL), (755708248UL), (1034682071UL), (899950902UL), (1906046264UL), (1861009040UL), (310711525UL), (920739741UL), (2322414272UL), (3179236470UL), (81822135UL), (4111390320UL), (1800166783UL), (112253014UL), (688771939UL), (1050990794UL), (3124647483UL), (287052171UL), (1363630156UL), (3447798279UL), (1405733552UL), (3075862538UL), (1682808202UL), (1595154222UL), (1173705692UL), (680713285UL), (2748212230UL), (568610527UL), (3434965538UL), (1114942930UL), (2835858745UL), (2575992250UL), (3243355150UL), (2127580225UL), (1855934450UL), (3915941751UL), (2228679809UL), (1514780124UL), (1506688039UL), (1033083295UL), (793807083UL), (1120681149UL), (4105670165UL), (3999570340UL), (2083020131UL), (1213356023UL), (3684882757UL), (3375797774UL), (3577986103UL), (2092046164UL), (2593847443UL), (1826450612UL), (367828409UL), (3198272513UL), (1941316667UL), (943707510UL), (907134807UL), (2020457947UL), (1462193665UL), (2964617539UL), (4216491663UL), (2625270800UL), (2395371467UL), (3691003028UL), (3659016793UL), (2381847054UL), (3513105567UL), (3013019506UL), (2731245927UL)}, {(1680024716UL), (2112340059UL), (3387475367UL), (2080916186UL), (1431532386UL), (3907378472UL), (2636491350UL), (2176128529UL), (2236616671UL), (3736851460UL), (2604001339UL), (3893075234UL), (3495918635UL), (4116370522UL), (1384310379UL), (3660102574UL), (2030233939UL), (2759207091UL), (49347923UL), (97526506UL), (2566932710UL), (1566181275UL), (3127827248UL), (578401670UL), (1499229308UL), (2581732444UL), (279715551UL), (809690877UL), (1438444015UL), (878935323UL), (1495277039UL), (3417305339UL), (2858903785UL), (3074075088UL), (603749086UL), (2370669734UL), (391683868UL), (3933465331UL), (2884128106UL), (1478317876UL), (1864988335UL), (2925823809UL), (4133578805UL), (218104493UL), (368652174UL), (1998600344UL), (1109346044UL), (1716435313UL), (415435111UL), (91393686UL), (2536620737UL), (1440068573UL), (481874870UL), (142128108UL), (988825519UL), (2077118779UL), (2858045339UL), (4068162251UL), (115593872UL), (1364244587UL), (3550167006UL), (3728768059UL), (1772423685UL), (2504624145UL), (248732306UL), (1412607307UL), (4081166331UL), (154438218UL), (1652901877UL), (3932533490UL), (3142799969UL), (3154073676UL), (3112018078UL), (2757873595UL), (2364830126UL), (2855791484UL), (793851407UL), (507785167UL), (263713916UL), (4060700051UL), (3291978358UL), (1584226715UL), (2546417990UL), (450747961UL), (2951067700UL), (2706009093UL), (1788578194UL), (4030171132UL), (2610979903UL), (573420740UL), (4269115622UL), (2180305819UL), (2646894726UL), (716649335UL), (3875715683UL), (853428184UL), (2436760738UL), (4190071217UL), (2754423535UL), (540698101UL), (4082489821UL), (741976046UL), (267559495UL), (1591532642UL), (2500610323UL), (3203248679UL), (147312102UL), (2772368222UL), (1412987047UL), (2295185573UL), (1932341300UL), (898396308UL), (1837129999UL), (3113914292UL), (2613354524UL), (3141601915UL), (276087167UL), (1887389351UL), (757801450UL), (3752353732UL), (2745818074UL), (1442953464UL), (3802648347UL), (223728071UL), (2169947402UL), (1338125300UL), (3642174036UL), (2794462634UL), (2326349851UL), (862746036UL), (3577092599UL), (627103363UL), (552173564UL), (4142604459UL), (2310329406UL), (583522272UL), (189323282UL), (1217612313UL), (73550248UL), (2434692829UL), (2757269706UL), (2392210091UL), (3032922600UL), (3573904125UL), (2897178037UL), (2632631469UL), (3085332665UL), (3775619904UL), (2563291734UL), (1351375865UL), (4043427793UL), (1803743084UL), (3112116579UL), (522940594UL), (2690374983UL), (2613871529UL), (3810037031UL), (1765642390UL), (534554747UL), (1930852049UL), (2264349344UL), (1680024716UL), (2112340059UL), (3387475367UL), (2080916186UL), (75966494UL), (3907378472UL), (2636491350UL), (2176128529UL), (2236616671UL), (2372987046UL), (2604001339UL), (3893075234UL), (3495918635UL), (4116370522UL), (534929913UL), (3660102574UL), (2030233939UL), (2759207091UL), (49347923UL), (987575186UL), (2566932710UL), (1566181275UL), (3127827248UL), (578401670UL), (3731513754UL), (2581732444UL), (279715551UL), (809690877UL), (1438444015UL), (2185866850UL), (1495277039UL), (3417305339UL), (2858903785UL), (3074075088UL), (4198538376UL), (2370669734UL), (391683868UL), (3933465331UL), (2884128106UL), (1400216510UL), (1864988335UL), (2925823809UL), (4133578805UL), (218104493UL), (2798390374UL), (1998600344UL), (1109346044UL), (1716435313UL), (415435111UL), (1892535124UL), (2536620737UL), (1440068573UL), (481874870UL), (142128108UL), (329082740UL), (2077118779UL), (2858045339UL), (4068162251UL), (115593872UL), (2644000449UL), (3550167006UL), (3728768059UL), (1772423685UL), (2504624145UL), (2140118619UL), (1412607307UL), (4081166331UL), (154438218UL), (1652901877UL), (3804911318UL), (3142799969UL), (3154073676UL), (3112018078UL), (2757873595UL), (50297646UL), (2855791484UL), (793851407UL), (507785167UL), (263713916UL), (3324588195UL), (3291978358UL), (1584226715UL), (2546417990UL), (450747961UL), (3455625012UL), (2706009093UL), (1788578194UL), (4030171132UL), (2610979903UL), (3835380965UL), (4269115622UL), (2180305819UL), (2646894726UL), (716649335UL), (2607142354UL), (853428184UL), (2436760738UL), (4190071217UL), (2754423535UL), (456808691UL), (4082489821UL), (741976046UL), (267559495UL), (1591532642UL), (2722205042UL), (3203248679UL), (147312102UL), (2772368222UL), (1412987047UL), (1950543946UL), (1932341300UL), (898396308UL), (1837129999UL), (3113914292UL), (428616392UL), (3141601915UL), (276087167UL), (1887389351UL), (757801450UL), (963534966UL), (2745818074UL), (1442953464UL), (3802648347UL), (223728071UL), (229039300UL), (1338125300UL), (3642174036UL), (2794462634UL), (2326349851UL), (206115203UL), (3577092599UL), (627103363UL), (552173564UL), (4142604459UL), (1492461846UL), (583522272UL), (189323282UL), (1217612313UL), (73550248UL), (3552211807UL), (2757269706UL), (2392210091UL), (3032922600UL), (3573904125UL), (810640644UL), (2632631469UL), (3085332665UL), (3775619904UL), (2563291734UL), (922608790UL), (4043427793UL), (1803743084UL), (3112116579UL), (522940594UL), (1785093944UL), (2613871529UL), (3810037031UL), (1765642390UL), (534554747UL), (3528050076UL), (2264349344UL), (1680024716UL), (2112340059UL), (3387475367UL), (3295682653UL), (75966494UL), (3907378472UL), (2636491350UL), (2176128529UL), (3574915532UL), (2372987046UL), (2604001339UL), (3893075234UL), (3495918635UL), (1280296085UL), (534929913UL), (3660102574UL), (2030233939UL), (2759207091UL), (299776535UL), (987575186UL), (2566932710UL), (1566181275UL), (3127827248UL), (3874691533UL), (3731513754UL), (2581732444UL), (279715551UL), (809690877UL), (3100791084UL), (2185866850UL), (1495277039UL), (3417305339UL), (2858903785UL), (1310351481UL), (4198538376UL), (2370669734UL), (391683868UL), (3933465331UL), (2749085130UL), (1400216510UL), (1864988335UL), (2925823809UL), (4133578805UL), (3352814594UL), (2798390374UL), (1998600344UL), (1109346044UL), (1716435313UL), (1571752941UL), (1892535124UL), (2536620737UL), (1440068573UL), (481874870UL), (2485033697UL), (329082740UL), (2077118779UL), (2858045339UL), (4068162251UL), (3837440666UL), (2644000449UL), (3550167006UL), (3728768059UL), (1772423685UL), (1176559812UL), (2140118619UL), (1412607307UL), (4081166331UL), (154438218UL), (2902622972UL), (3804911318UL), (3142799969UL), (3154073676UL), (3112018078UL), (2403391233UL), (50297646UL), (2855791484UL), (793851407UL), (507785167UL), (2351826747UL), (3324588195UL), (3291978358UL), (1584226715UL), (2546417990UL), (746876926UL), (3455625012UL), (2706009093UL), (1788578194UL), (4030171132UL), (3779307353UL), (3835380965UL), (4269115622UL), (2180305819UL), (2646894726UL), (2602235234UL), (2607142354UL), (853428184UL), (2436760738UL), (4190071217UL), (2066757692UL), (456808691UL), (4082489821UL), (741976046UL), (267559495UL), (3001080633UL), (2722205042UL), (3203248679UL), (147312102UL), (2772368222UL), (89950260UL), (1950543946UL), (1932341300UL), (898396308UL), (1837129999UL), (947911286UL), (428616392UL), (3141601915UL), (276087167UL), (1887389351UL), (2583987247UL), (963534966UL), (2745818074UL), (1442953464UL), (3802648347UL), (4229124441UL), (229039300UL), (1338125300UL), (3642174036UL), (2794462634UL), (2472155633UL), (206115203UL), (3577092599UL), (627103363UL), (552173564UL), (2586882739UL), (1492461846UL), (583522272UL), (189323282UL), (1217612313UL), (3501549884UL), (3552211807UL), (2757269706UL), (2392210091UL), (3032922600UL), (740675778UL), (810640644UL), (2632631469UL), (3085332665UL), (3775619904UL), (3643289881UL), (922608790UL), (4043427793UL), (1803743084UL), (3112116579UL), (2213337398UL), (1785093944UL), (2613871529UL), (3810037031UL), (1765642390UL), (762472016UL), (3528050076UL), (2264349344UL), (1680024716UL), (2112340059UL), (1372272974UL), (3295682653UL), (75966494UL), (3907378472UL), (2636491350UL), (3117471955UL), (3574915532UL), (2372987046UL), (2604001339UL), (3893075234UL), (915576383UL), (1280296085UL), (534929913UL), (3660102574UL), (2030233939UL), (346368350UL), (299776535UL), (987575186UL), (2566932710UL), (1566181275UL), (3535223896UL), (3874691533UL), (3731513754UL), (2581732444UL), (279715551UL), (2456894951UL), (3100791084UL), (2185866850UL), (1495277039UL), (3417305339UL), (1618871086UL), (1310351481UL), (4198538376UL), (2370669734UL), (391683868UL), (2009676005UL), (2749085130UL), (1400216510UL), (1864988335UL), (2925823809UL), (58955107UL), (3352814594UL), (2798390374UL), (1998600344UL), (1109346044UL), (3273979614UL), (1571752941UL), (1892535124UL), (2536620737UL), (1440068573UL), (1174168447UL), (2485033697UL), (329082740UL), (2077118779UL), (2858045339UL), (4062921629UL), (3837440666UL), (2644000449UL), (3550167006UL), (3728768059UL), (2642133401UL), (1176559812UL), (2140118619UL), (1412607307UL), (4081166331UL), (3124905304UL), (2902622972UL), (3804911318UL), (3142799969UL), (3154073676UL), (1449454613UL), (2403391233UL), (50297646UL), (2855791484UL), (793851407UL), (3514201526UL), (2351826747UL), (3324588195UL), (3291978358UL), (1584226715UL), (3636681672UL), (746876926UL), (3455625012UL), (2706009093UL), (1788578194UL), (3451519459UL), (3779307353UL), (3835380965UL), (4269115622UL), (2180305819UL), (3987989524UL), (2602235234UL), (2607142354UL), (853428184UL), (2436760738UL), (2151617107UL), (2066757692UL), (456808691UL), (4082489821UL), (741976046UL), (3590081269UL), (3001080633UL), (2722205042UL), (3203248679UL), (147312102UL), (3432947806UL), (89950260UL), (1950543946UL), (1932341300UL), (898396308UL), (3828432864UL), (947911286UL), (428616392UL), (3141601915UL), (276087167UL), (2517666433UL), (2583987247UL), (963534966UL), (2745818074UL), (1442953464UL), (2223986807UL), (4229124441UL), (229039300UL), (1338125300UL), (3642174036UL), (1053796945UL), (2472155633UL), (206115203UL), (3577092599UL), (627103363UL), (1113276084UL), (2586882739UL), (1492461846UL), (583522272UL), (189323282UL), (1490604990UL), (3501549884UL), (3552211807UL), (2757269706UL), (2392210091UL), (3545407532UL), (740675778UL), (810640644UL), (2632631469UL), (3085332665UL), (755862267UL), (3643289881UL), (922608790UL), (4043427793UL), (1803743084UL), (1954166630UL), (2213337398UL), (1785093944UL), (2613871529UL), (3810037031UL), (3042935707UL), (3162182177UL), (2791346436UL), (1901925289UL), (863100941UL), (3367519168UL), (1972623238UL), (3664303070UL), (604922059UL), (3026817982UL), (1436412310UL), (4096180631UL), (1597561857UL), (4206212303UL), (4127914332UL), (3228677359UL), (3985733659UL), (3597290113UL), (4251197894UL), (3451370603UL), (609679338UL), (3360835257UL), (1372239885UL), (638572328UL), (3806422284UL), (3974147336UL), (1804280837UL), (4209089291UL), (2021797469UL), (3557188838UL), (409727186UL), (2114649178UL), (687702120UL), (2542445992UL), (1235991799UL), (460479179UL), (2008348175UL), (887884478UL), (3942327811UL), (2999928223UL), (4171339789UL), (2286339235UL), (1293442231UL), (1575942850UL), (76122475UL), (1440527701UL), (2006558403UL), (1544148172UL), (895899367UL), (681826913UL), (4094701935UL), (3995413790UL), (1027509154UL), (2264990896UL), (1938238113UL), (213430250UL), (222469320UL), (609726517UL), (3581538106UL), (492802663UL), (120480843UL), (1720004062UL), (1132674507UL), (911082758UL), (2909148131UL), (566658805UL), (3964114445UL), (3483602509UL), (1793438750UL), (165562604UL), (3641830063UL), (2394205521UL), (3404874822UL), (1672998096UL), (916151953UL), (1141264477UL), (3171661340UL), (3803396219UL), (3018337382UL), (1863902683UL), (2474641928UL), (3250365071UL), (3897886220UL), (1219701051UL), (51332576UL), (1358614881UL), (1707407492UL), (3670647816UL), (923357625UL), (343687395UL), (3991339686UL), (3913575403UL), (1267727936UL), (4001357856UL), (3820224848UL), (2942896724UL), (3505936742UL), (1403285299UL), (1992762049UL), (567748449UL), (2202721585UL), (2781324216UL), (1724850068UL), (2408314541UL), (3073975813UL), (3992810029UL), (2475242354UL), (540562053UL), (2185198943UL), (3759352041UL), (3373885614UL), (1132999410UL), (1097554565UL), (4089342358UL), (3239542922UL), (2451748646UL), (407290679UL), (3188103200UL), (1708016248UL), (26848241UL), (2796711130UL), (3090711568UL), (4068389322UL), (3420916085UL), (3137567033UL), (2877819818UL), (22133454UL), (4629160UL), (3703695249UL), (1920151708UL), (1175452162UL), (130015299UL), (3331834713UL), (1099225384UL), (689254331UL), (1851083761UL), (2654970209UL), (3259297936UL), (3742819314UL), (3524284766UL), (2291819083UL), (3494031861UL), (16242889UL), (3545082774UL), (1997878108UL), (777447699UL), (4244916543UL), (3508640253UL), (3782278393UL), (2107258964UL), (2139074576UL), (1383217899UL), (2337934322UL), (3181899620UL), (1285955765UL), (2989610020UL), (3326862146UL), (1168587380UL), (801203532UL), (3020809957UL)}, {(3810471203UL), (1017064446UL), (1595207573UL), (441087832UL), (3326746890UL), (3294064431UL), (167972517UL), (3625210015UL), (1011845006UL), (2980240819UL), (1778354660UL), (3041730987UL), (1598611350UL), (2015169745UL), (2321724978UL), (3390812967UL), (2432904511UL), (113261909UL), (3957193232UL), (3806115908UL), (2965828929UL), (2035392295UL), (3500116619UL), (2881232416UL), (1672212265UL), (1607201428UL), (425148945UL), (1262591961UL), (2221781268UL), (4215047456UL), (2148245850UL), (2787488981UL), (1077262192UL), (2085467561UL), (3053954888UL), (3584435116UL), (3013084787UL), (287099941UL), (1290407232UL), (4078552287UL), (2658945475UL), (4251530898UL), (2403086478UL), (2884923598UL), (3545110453UL), (4105390090UL), (343200643UL), (3189888821UL), (4086304363UL), (3466483195UL), (259435633UL), (2846377387UL), (497258846UL), (272775541UL), (985737911UL), (2957688879UL), (2180784344UL), (3434619542UL), (3643384838UL), (2228652440UL), (3107480718UL), (2208729807UL), (596436263UL), (3255120711UL), (3248886970UL), (519242965UL), (602979109UL), (1619614UL), (1391563565UL), (56262588UL), (1584463910UL), (1849038201UL), (728022295UL), (848624947UL), (1813827408UL), (428214945UL), (1246345586UL), (4213351865UL), (168985863UL), (456608054UL), (4277869380UL), (3886828599UL), (2264054549UL), (3110967170UL), (3138175314UL), (2649164828UL), (3369378320UL), (3648350039UL), (3524848759UL), (1468470706UL), (3558859222UL), (2669673235UL), (831851874UL), (4285651092UL), (4224147373UL), (1088456706UL), (231954609UL), (3118005852UL), (225508069UL), (883105389UL), (856371341UL), (2001356578UL), (639336670UL), (2363501707UL), (3622399552UL), (4024065226UL), (1093546838UL), (4263608561UL), (1852072422UL), (425195042UL), (2441102396UL), (296426333UL), (384641750UL), (3559334435UL), (1757327033UL), (1016016207UL), (3595686646UL), (24777793UL), (623926105UL), (2169195923UL), (1779396793UL), (646997837UL), (1459728476UL), (2644865980UL), (1994581089UL), (3956278544UL), (919592580UL), (2153558858UL), (2029633394UL), (3837501009UL), (4016560170UL), (484838096UL), (3652199054UL), (1971790561UL), (605295089UL), (637470291UL), (278970544UL), (3574824693UL), (295866521UL), (1755035156UL), (2542341803UL), (1588716357UL), (1502596918UL), (4124554133UL), (3547049843UL), (1768033045UL), (1531734630UL), (101448323UL), (3233017580UL), (1793222944UL), (3187853500UL), (186000900UL), (803444571UL), (2820254958UL), (2009384608UL), (2384668855UL), (2222812920UL), (633608665UL), (2028480056UL), (1258028235UL), (545095949UL), (3810471203UL), (1017064446UL), (1595207573UL), (441087832UL), (899068662UL), (3294064431UL), (167972517UL), (3625210015UL), (1011845006UL), (3951305793UL), (1778354660UL), (3041730987UL), (1598611350UL), (2015169745UL), (1885149424UL), (3390812967UL), (2432904511UL), (113261909UL), (3957193232UL), (3953443155UL), (2965828929UL), (2035392295UL), (3500116619UL), (2881232416UL), (329153573UL), (1607201428UL), (425148945UL), (1262591961UL), (2221781268UL), (78028761UL), (2148245850UL), (2787488981UL), (1077262192UL), (2085467561UL), (647235899UL), (3584435116UL), (3013084787UL), (287099941UL), (1290407232UL), (1467385694UL), (2658945475UL), (4251530898UL), (2403086478UL), (2884923598UL), (3489351040UL), (4105390090UL), (343200643UL), (3189888821UL), (4086304363UL), (3521512280UL), (259435633UL), (2846377387UL), (497258846UL), (272775541UL), (1367093111UL), (2957688879UL), (2180784344UL), (3434619542UL), (3643384838UL), (411877686UL), (3107480718UL), (2208729807UL), (596436263UL), (3255120711UL), (584605030UL), (519242965UL), (602979109UL), (1619614UL), (1391563565UL), (3902518209UL), (1584463910UL), (1849038201UL), (728022295UL), (848624947UL), (1932969318UL), (428214945UL), (1246345586UL), (4213351865UL), (168985863UL), (2770345237UL), (4277869380UL), (3886828599UL), (2264054549UL), (3110967170UL), (2953581033UL), (2649164828UL), (3369378320UL), (3648350039UL), (3524848759UL), (2380353977UL), (3558859222UL), (2669673235UL), (831851874UL), (4285651092UL), (1214052447UL), (1088456706UL), (231954609UL), (3118005852UL), (225508069UL), (1766983646UL), (856371341UL), (2001356578UL), (639336670UL), (2363501707UL), (1782816591UL), (4024065226UL), (1093546838UL), (4263608561UL), (1852072422UL), (1149716600UL), (2441102396UL), (296426333UL), (384641750UL), (3559334435UL), (2391309970UL), (1016016207UL), (3595686646UL), (24777793UL), (623926105UL), (362098678UL), (1779396793UL), (646997837UL), (1459728476UL), (2644865980UL), (3238673748UL), (3956278544UL), (919592580UL), (2153558858UL), (2029633394UL), (115778559UL), (4016560170UL), (484838096UL), (3652199054UL), (1971790561UL), (737357475UL), (637470291UL), (278970544UL), (3574824693UL), (295866521UL), (3989745853UL), (2542341803UL), (1588716357UL), (1502596918UL), (4124554133UL), (3016849744UL), (1768033045UL), (1531734630UL), (101448323UL), (3233017580UL), (4157527581UL), (3187853500UL), (186000900UL), (803444571UL), (2820254958UL), (1980528062UL), (2384668855UL), (2222812920UL), (633608665UL), (2028480056UL), (3166710281UL), (545095949UL), (3810471203UL), (1017064446UL), (1595207573UL), (693962828UL), (899068662UL), (3294064431UL), (167972517UL), (3625210015UL), (1486040398UL), (3951305793UL), (1778354660UL), (3041730987UL), (1598611350UL), (2859363132UL), (1885149424UL), (3390812967UL), (2432904511UL), (113261909UL), (664880478UL), (3953443155UL), (2965828929UL), (2035392295UL), (3500116619UL), (558081801UL), (329153573UL), (1607201428UL), (425148945UL), (1262591961UL), (3716247699UL), (78028761UL), (2148245850UL), (2787488981UL), (1077262192UL), (4206362947UL), (647235899UL), (3584435116UL), (3013084787UL), (287099941UL), (2536781098UL), (1467385694UL), (2658945475UL), (4251530898UL), (2403086478UL), (3075072413UL), (3489351040UL), (4105390090UL), (343200643UL), (3189888821UL), (2540485172UL), (3521512280UL), (259435633UL), (2846377387UL), (497258846UL), (2442427327UL), (1367093111UL), (2957688879UL), (2180784344UL), (3434619542UL), (1593967423UL), (411877686UL), (3107480718UL), (2208729807UL), (596436263UL), (1048686529UL), (584605030UL), (519242965UL), (602979109UL), (1619614UL), (2072745381UL), (3902518209UL), (1584463910UL), (1849038201UL), (728022295UL), (846033949UL), (1932969318UL), (428214945UL), (1246345586UL), (4213351865UL), (1066373275UL), (2770345237UL), (4277869380UL), (3886828599UL), (2264054549UL), (1877859690UL), (2953581033UL), (2649164828UL), (3369378320UL), (3648350039UL), (2537763389UL), (2380353977UL), (3558859222UL), (2669673235UL), (831851874UL), (522748140UL), (1214052447UL), (1088456706UL), (231954609UL), (3118005852UL), (1381269315UL), (1766983646UL), (856371341UL), (2001356578UL), (639336670UL), (667275675UL), (1782816591UL), (4024065226UL), (1093546838UL), (4263608561UL), (2057337961UL), (1149716600UL), (2441102396UL), (296426333UL), (384641750UL), (340523210UL), (2391309970UL), (1016016207UL), (3595686646UL), (24777793UL), (3094832341UL), (362098678UL), (1779396793UL), (646997837UL), (1459728476UL), (1169681568UL), (3238673748UL), (3956278544UL), (919592580UL), (2153558858UL), (388335108UL), (115778559UL), (4016560170UL), (484838096UL), (3652199054UL), (1764858181UL), (737357475UL), (637470291UL), (278970544UL), (3574824693UL), (3671458900UL), (3989745853UL), (2542341803UL), (1588716357UL), (1502596918UL), (2102871406UL), (3016849744UL), (1768033045UL), (1531734630UL), (101448323UL), (3964942332UL), (4157527581UL), (3187853500UL), (186000900UL), (803444571UL), (3425652083UL), (1980528062UL), (2384668855UL), (2222812920UL), (633608665UL), (3035373876UL), (3166710281UL), (545095949UL), (3810471203UL), (1017064446UL), (669282349UL), (693962828UL), (899068662UL), (3294064431UL), (167972517UL), (2007256988UL), (1486040398UL), (3951305793UL), (1778354660UL), (3041730987UL), (2827768941UL), (2859363132UL), (1885149424UL), (3390812967UL), (2432904511UL), (3700915653UL), (664880478UL), (3953443155UL), (2965828929UL), (2035392295UL), (1461208330UL), (558081801UL), (329153573UL), (1607201428UL), (425148945UL), (1700881129UL), (3716247699UL), (78028761UL), (2148245850UL), (2787488981UL), (2706775080UL), (4206362947UL), (647235899UL), (3584435116UL), (3013084787UL), (2958545221UL), (2536781098UL), (1467385694UL), (2658945475UL), (4251530898UL), (2241012567UL), (3075072413UL), (3489351040UL), (4105390090UL), (343200643UL), (490164649UL), (2540485172UL), (3521512280UL), (259435633UL), (2846377387UL), (4073611831UL), (2442427327UL), (1367093111UL), (2957688879UL), (2180784344UL), (1835510773UL), (1593967423UL), (411877686UL), (3107480718UL), (2208729807UL), (3306732468UL), (1048686529UL), (584605030UL), (519242965UL), (602979109UL), (2978864605UL), (2072745381UL), (3902518209UL), (1584463910UL), (1849038201UL), (3284115169UL), (846033949UL), (1932969318UL), (428214945UL), (1246345586UL), (194166002UL), (1066373275UL), (2770345237UL), (4277869380UL), (3886828599UL), (1874087886UL), (1877859690UL), (2953581033UL), (2649164828UL), (3369378320UL), (4145454028UL), (2537763389UL), (2380353977UL), (3558859222UL), (2669673235UL), (739345884UL), (522748140UL), (1214052447UL), (1088456706UL), (231954609UL), (3605603781UL), (1381269315UL), (1766983646UL), (856371341UL), (2001356578UL), (2049940324UL), (667275675UL), (1782816591UL), (4024065226UL), (1093546838UL), (152524382UL), (2057337961UL), (1149716600UL), (2441102396UL), (296426333UL), (3195130788UL), (340523210UL), (2391309970UL), (1016016207UL), (3595686646UL), (180492441UL), (3094832341UL), (362098678UL), (1779396793UL), (646997837UL), (2458167607UL), (1169681568UL), (3238673748UL), (3956278544UL), (919592580UL), (3421005218UL), (388335108UL), (115778559UL), (4016560170UL), (484838096UL), (2649676374UL), (1764858181UL), (737357475UL), (637470291UL), (278970544UL), (2236401278UL), (3671458900UL), (3989745853UL), (2542341803UL), (1588716357UL), (1241570134UL), (2102871406UL), (3016849744UL), (1768033045UL), (1531734630UL), (1765654724UL), (3964942332UL), (4157527581UL), (3187853500UL), (186000900UL), (2189716659UL), (3425652083UL), (1980528062UL), (2384668855UL), (2222812920UL), (3955466207UL), (2426547616UL), (3846752458UL), (3015538636UL), (2342593365UL), (3613176865UL), (3484860981UL), (4278370194UL), (1979143878UL), (1159739458UL), (3714038404UL), (396530346UL), (3276617756UL), (3293940597UL), (4050183149UL), (1418571985UL), (402563753UL), (2702853013UL), (2289900621UL), (2267058511UL), (3482161995UL), (3375026019UL), (1988640267UL), (3674438074UL), (4124612310UL), (1057883705UL), (434730475UL), (3210959778UL), (4102029739UL), (2140938750UL), (3176753074UL), (2356971512UL), (3969685288UL), (1556275580UL), (2648433428UL), (3959375381UL), (478841344UL), (1496991528UL), (3309714981UL), (569990368UL), (3660587501UL), (2550379574UL), (1177519842UL), (2652707373UL), (543943404UL), (1912551128UL), (2278132032UL), (1484596780UL), (3570913985UL), (2982401320UL), (1413776035UL), (3177275459UL), (3036211597UL), (1091740466UL), (3448424311UL), (1445187645UL), (3205024875UL), (3135795254UL), (823738729UL), (3742134467UL), (4066657438UL), (1226311678UL), (2403605393UL), (537573634UL), (3457409768UL), (1940233423UL), (1761431281UL), (1129427309UL), (2443661283UL), (3200814257UL), (4094866249UL), (2666869754UL), (604785127UL), (2213464116UL), (3002782918UL), (468024929UL), (2490681314UL), (3666681384UL), (1583346053UL), (3049668798UL), (3592153237UL), (2573082448UL), (3082970021UL), (1461796708UL), (832526980UL), (3728763274UL), (355291229UL), (4029588456UL), (832358279UL), (2125298737UL), (3681181038UL), (3245535160UL), (1333342738UL), (1868897492UL), (446790068UL), (1278093154UL), (2090118615UL), (4158925515UL), (4062165914UL), (822726809UL), (1154960183UL), (286518382UL), (1170424276UL), (2554691236UL), (3674133415UL), (2765714969UL), (2330865375UL), (1908307334UL), (3537287082UL), (410252600UL), (3977128218UL), (424210327UL), (2919071615UL), (2715518134UL), (64568844UL), (480972649UL), (2488797168UL), (1302817038UL), (2213995265UL), (4229997295UL), (2200797852UL), (109368057UL), (3033807022UL), (1907400078UL), (645977948UL), (1410909090UL), (3700787906UL), (3375062371UL), (629087832UL), (1344281719UL), (4249981139UL), (3457543297UL), (1218556849UL), (864222854UL), (1458445945UL), (914545469UL), (3451164212UL), (1088025757UL), (1129933985UL), (953788883UL), (2406172924UL), (170364546UL), (3505490646UL), (1027553899UL), (2864067776UL), (436854871UL), (1342782209UL), (761167471UL), (2660173631UL), (4159507498UL), (4172028400UL), (2442254644UL), (2110123720UL), (2315991253UL), (873066601UL), (1725470559UL), (3831299052UL), (678672031UL), (1585431329UL), (3495750550UL)}, {(1998393432UL), (2665389278UL), (3989307699UL), (3267631636UL), (3861682977UL), (3243522970UL), (1243992413UL), (2200497260UL), (3821883021UL), (4187123083UL), (3451270040UL), (3044132745UL), (2101287249UL), (2340839784UL), (227040990UL), (1724350416UL), (3228881240UL), (3123386528UL), (4279362126UL), (3098224464UL), (2635534069UL), (3622906431UL), (206207480UL), (1894245533UL), (2152374527UL), (1011223653UL), (7271757UL), (2972858087UL), (207942127UL), (3355362797UL), (2593296740UL), (174093751UL), (3713822176UL), (4212355586UL), (3335605224UL), (1171716408UL), (2867257989UL), (1522213957UL), (2016192462UL), (4229688395UL), (2174928148UL), (1468226225UL), (3938290338UL), (493240317UL), (3229423344UL), (2585475729UL), (3112454413UL), (1881171707UL), (2555908056UL), (1997546352UL), (380428329UL), (3341885423UL), (3307510279UL), (3519476676UL), (3613100811UL), (2555826262UL), (109341943UL), (2382715395UL), (3883409616UL), (1593551879UL), (2163678014UL), (3379783137UL), (2810374300UL), (1516064864UL), (561144874UL), (316017838UL), (1899237567UL), (70857401UL), (3435185465UL), (4234661323UL), (2580352177UL), (32879620UL), (4171670150UL), (1986234067UL), (3589478191UL), (2073132526UL), (2603712175UL), (377997975UL), (2474419397UL), (3110698341UL), (812664089UL), (1778922726UL), (1686111212UL), (972784138UL), (3936486236UL), (2711468739UL), (423435866UL), (1661961159UL), (802312780UL), (1868728136UL), (1760295704UL), (3357409828UL), (215039860UL), (683184627UL), (4019111064UL), (3609261689UL), (2167554309UL), (1831085281UL), (3389357802UL), (4193421575UL), (628277197UL), (2900207619UL), (993609502UL), (3429627083UL), (2636466084UL), (3652352199UL), (1780133580UL), (1670387713UL), (4086070210UL), (4004540729UL), (783029246UL), (2165667566UL), (1739001057UL), (377639972UL), (1102689625UL), (1945278055UL), (3941185940UL), (3685368326UL), (1881761572UL), (2201338934UL), (801752UL), (2729497735UL), (492844690UL), (2998826141UL), (3844964457UL), (3679088359UL), (2196391660UL), (4222269404UL), (357321611UL), (3727170055UL), (1819614072UL), (2348798457UL), (4294366646UL), (1952884323UL), (3574345216UL), (2040734807UL), (232392443UL), (4183498179UL), (2614866055UL), (112120292UL), (3624018350UL), (3340709877UL), (3097507723UL), (1268833488UL), (3570501956UL), (3338260086UL), (293812421UL), (3683058169UL), (1147960351UL), (283731890UL), (2171233479UL), (1830154455UL), (4036602681UL), (1996981699UL), (132803834UL), (40256165UL), (2158110401UL), (3575159090UL), (3196553513UL), (3559872992UL), (3402884675UL), (1998393432UL), (2665389278UL), (3989307699UL), (3267631636UL), (3617519767UL), (3243522970UL), (1243992413UL), (2200497260UL), (3821883021UL), (3715729085UL), (3451270040UL), (3044132745UL), (2101287249UL), (2340839784UL), (3173635549UL), (1724350416UL), (3228881240UL), (3123386528UL), (4279362126UL), (2287520039UL), (2635534069UL), (3622906431UL), (206207480UL), (1894245533UL), (96723416UL), (1011223653UL), (7271757UL), (2972858087UL), (207942127UL), (1668335352UL), (2593296740UL), (174093751UL), (3713822176UL), (4212355586UL), (49226793UL), (1171716408UL), (2867257989UL), (1522213957UL), (2016192462UL), (118712412UL), (2174928148UL), (1468226225UL), (3938290338UL), (493240317UL), (3788174304UL), (2585475729UL), (3112454413UL), (1881171707UL), (2555908056UL), (3351139844UL), (380428329UL), (3341885423UL), (3307510279UL), (3519476676UL), (1368994724UL), (2555826262UL), (109341943UL), (2382715395UL), (3883409616UL), (1561509458UL), (2163678014UL), (3379783137UL), (2810374300UL), (1516064864UL), (2313252274UL), (316017838UL), (1899237567UL), (70857401UL), (3435185465UL), (2585770746UL), (2580352177UL), (32879620UL), (4171670150UL), (1986234067UL), (3317983509UL), (2073132526UL), (2603712175UL), (377997975UL), (2474419397UL), (908728599UL), (812664089UL), (1778922726UL), (1686111212UL), (972784138UL), (1992540005UL), (2711468739UL), (423435866UL), (1661961159UL), (802312780UL), (907108769UL), (1760295704UL), (3357409828UL), (215039860UL), (683184627UL), (2806826652UL), (3609261689UL), (2167554309UL), (1831085281UL), (3389357802UL), (2755692689UL), (628277197UL), (2900207619UL), (993609502UL), (3429627083UL), (3605915742UL), (3652352199UL), (1780133580UL), (1670387713UL), (4086070210UL), (3717326627UL), (783029246UL), (2165667566UL), (1739001057UL), (377639972UL), (2355216626UL), (1945278055UL), (3941185940UL), (3685368326UL), (1881761572UL), (4024097818UL), (801752UL), (2729497735UL), (492844690UL), (2998826141UL), (2719601647UL), (3679088359UL), (2196391660UL), (4222269404UL), (357321611UL), (1319821972UL), (1819614072UL), (2348798457UL), (4294366646UL), (1952884323UL), (3573866689UL), (2040734807UL), (232392443UL), (4183498179UL), (2614866055UL), (440744432UL), (3624018350UL), (3340709877UL), (3097507723UL), (1268833488UL), (224895395UL), (3338260086UL), (293812421UL), (3683058169UL), (1147960351UL), (3433425235UL), (2171233479UL), (1830154455UL), (4036602681UL), (1996981699UL), (2875889721UL), (40256165UL), (2158110401UL), (3575159090UL), (3196553513UL), (1094082574UL), (3402884675UL), (1998393432UL), (2665389278UL), (3989307699UL), (4068940467UL), (3617519767UL), (3243522970UL), (1243992413UL), (2200497260UL), (441678457UL), (3715729085UL), (3451270040UL), (3044132745UL), (2101287249UL), (2181502237UL), (3173635549UL), (1724350416UL), (3228881240UL), (3123386528UL), (1968352124UL), (2287520039UL), (2635534069UL), (3622906431UL), (206207480UL), (2065093599UL), (96723416UL), (1011223653UL), (7271757UL), (2972858087UL), (1094044749UL), (1668335352UL), (2593296740UL), (174093751UL), (3713822176UL), (2887397643UL), (49226793UL), (1171716408UL), (2867257989UL), (1522213957UL), (984348433UL), (118712412UL), (2174928148UL), (1468226225UL), (3938290338UL), (2279430036UL), (3788174304UL), (2585475729UL), (3112454413UL), (1881171707UL), (4247636500UL), (3351139844UL), (380428329UL), (3341885423UL), (3307510279UL), (2887754196UL), (1368994724UL), (2555826262UL), (109341943UL), (2382715395UL), (2836761616UL), (1561509458UL), (2163678014UL), (3379783137UL), (2810374300UL), (1635278016UL), (2313252274UL), (316017838UL), (1899237567UL), (70857401UL), (3481535811UL), (2585770746UL), (2580352177UL), (32879620UL), (4171670150UL), (2248003250UL), (3317983509UL), (2073132526UL), (2603712175UL), (377997975UL), (3286162818UL), (908728599UL), (812664089UL), (1778922726UL), (1686111212UL), (4024815755UL), (1992540005UL), (2711468739UL), (423435866UL), (1661961159UL), (2257259057UL), (907108769UL), (1760295704UL), (3357409828UL), (215039860UL), (3917391198UL), (2806826652UL), (3609261689UL), (2167554309UL), (1831085281UL), (4238043113UL), (2755692689UL), (628277197UL), (2900207619UL), (993609502UL), (2036092353UL), (3605915742UL), (3652352199UL), (1780133580UL), (1670387713UL), (118446953UL), (3717326627UL), (783029246UL), (2165667566UL), (1739001057UL), (203160626UL), (2355216626UL), (1945278055UL), (3941185940UL), (3685368326UL), (546361979UL), (4024097818UL), (801752UL), (2729497735UL), (492844690UL), (1023017124UL), (2719601647UL), (3679088359UL), (2196391660UL), (4222269404UL), (621859651UL), (1319821972UL), (1819614072UL), (2348798457UL), (4294366646UL), (1114888560UL), (3573866689UL), (2040734807UL), (232392443UL), (4183498179UL), (3959504609UL), (440744432UL), (3624018350UL), (3340709877UL), (3097507723UL), (3613295037UL), (224895395UL), (3338260086UL), (293812421UL), (3683058169UL), (1655305863UL), (3433425235UL), (2171233479UL), (1830154455UL), (4036602681UL), (3731384097UL), (2875889721UL), (40256165UL), (2158110401UL), (3575159090UL), (1847744924UL), (1094082574UL), (3402884675UL), (1998393432UL), (2665389278UL), (3781866777UL), (4068940467UL), (3617519767UL), (3243522970UL), (1243992413UL), (2723708256UL), (441678457UL), (3715729085UL), (3451270040UL), (3044132745UL), (4013832842UL), (2181502237UL), (3173635549UL), (1724350416UL), (3228881240UL), (2092292494UL), (1968352124UL), (2287520039UL), (2635534069UL), (3622906431UL), (3186333458UL), (2065093599UL), (96723416UL), (1011223653UL), (7271757UL), (649658033UL), (1094044749UL), (1668335352UL), (2593296740UL), (174093751UL), (4159420309UL), (2887397643UL), (49226793UL), (1171716408UL), (2867257989UL), (2590077953UL), (984348433UL), (118712412UL), (2174928148UL), (1468226225UL), (1065322711UL), (2279430036UL), (3788174304UL), (2585475729UL), (3112454413UL), (3932517386UL), (4247636500UL), (3351139844UL), (380428329UL), (3341885423UL), (1285273904UL), (2887754196UL), (1368994724UL), (2555826262UL), (109341943UL), (2318470582UL), (2836761616UL), (1561509458UL), (2163678014UL), (3379783137UL), (674658583UL), (1635278016UL), (2313252274UL), (316017838UL), (1899237567UL), (2192372173UL), (3481535811UL), (2585770746UL), (2580352177UL), (32879620UL), (300323274UL), (2248003250UL), (3317983509UL), (2073132526UL), (2603712175UL), (3086543917UL), (3286162818UL), (908728599UL), (812664089UL), (1778922726UL), (2263290659UL), (4024815755UL), (1992540005UL), (2711468739UL), (423435866UL), (819027349UL), (2257259057UL), (907108769UL), (1760295704UL), (3357409828UL), (1142221093UL), (3917391198UL), (2806826652UL), (3609261689UL), (2167554309UL), (4108155875UL), (4238043113UL), (2755692689UL), (628277197UL), (2900207619UL), (3041719497UL), (2036092353UL), (3605915742UL), (3652352199UL), (1780133580UL), (2397410862UL), (118446953UL), (3717326627UL), (783029246UL), (2165667566UL), (2721690354UL), (203160626UL), (2355216626UL), (1945278055UL), (3941185940UL), (2768842108UL), (546361979UL), (4024097818UL), (801752UL), (2729497735UL), (4045063232UL), (1023017124UL), (2719601647UL), (3679088359UL), (2196391660UL), (2666107451UL), (621859651UL), (1319821972UL), (1819614072UL), (2348798457UL), (3555102623UL), (1114888560UL), (3573866689UL), (2040734807UL), (232392443UL), (3359040541UL), (3959504609UL), (440744432UL), (3624018350UL), (3340709877UL), (1477919696UL), (3613295037UL), (224895395UL), (3338260086UL), (293812421UL), (4210187101UL), (1655305863UL), (3433425235UL), (2171233479UL), (1830154455UL), (4150241150UL), (3731384097UL), (2875889721UL), (40256165UL), (2158110401UL), (3350246687UL), (455561037UL), (2250400255UL), (3192153445UL), (3258870230UL), (1500391873UL), (4142878334UL), (1155955691UL), (1483275844UL), (4189436981UL), (323745948UL), (1976017426UL), (2804626790UL), (2717553615UL), (2315409034UL), (954508235UL), (3845175920UL), (3999878682UL), (1247696432UL), (1743319509UL), (2998248398UL), (3694350012UL), (4072006361UL), (191306987UL), (2816321878UL), (1324077734UL), (1083060006UL), (3406855480UL), (1619622379UL), (2160350UL), (3302238190UL), (3368021261UL), (3685228564UL), (3863934685UL), (771728612UL), (854205233UL), (2304696695UL), (421449207UL), (1265752117UL), (3852292419UL), (305345788UL), (1540622105UL), (1904883477UL), (833469256UL), (134406680UL), (3012455058UL), (4035477953UL), (2925192459UL), (1559200592UL), (3851612860UL), (718484562UL), (1377960276UL), (1586892849UL), (1361298269UL), (3417917896UL), (1281324499UL), (1012538763UL), (1350578667UL), (3946475598UL), (2982283954UL), (3548792804UL), (284542749UL), (1194648577UL), (3087899716UL), (3966595444UL), (2088330116UL), (3641652062UL), (327128507UL), (593906557UL), (1092448919UL), (2459189516UL), (4053392241UL), (3356198248UL), (2352376508UL), (470648997UL), (1017041256UL), (3234172340UL), (3928191489UL), (3266226858UL), (4219289150UL), (1229098319UL), (4275351308UL), (2720777751UL), (3566728718UL), (638322822UL), (2369792461UL), (2869492261UL), (3120083828UL), (1890399556UL), (3309991008UL), (3785452464UL), (4128660314UL), (3726791982UL), (167177896UL), (461294981UL), (3988638998UL), (2937794823UL), (3981029822UL), (1111681402UL), (2015965721UL), (7261806UL), (2669786265UL), (1083582734UL), (3270228881UL), (3892235938UL), (2695872715UL), (4246051290UL), (3214293333UL), (343604199UL), (3215604888UL), (661024127UL), (2931754053UL), (3787840039UL), (2053363765UL), (363432336UL), (112334132UL), (2871797223UL), (138911320UL), (3981126938UL), (2027332192UL), (1804730644UL), (590150270UL), (641538574UL), (6802174UL), (3551446076UL), (3908480472UL), (1004531022UL), (2097228524UL), (1919074232UL), (154482247UL), (121437972UL), (1215661323UL), (1178068273UL), (1097220699UL), (2823681422UL), (262636065UL), (2943371149UL), (1768780720UL), (3866040605UL), (1855991583UL), (3988248086UL), (629223947UL), (3380612330UL), (3552916762UL), (197596340UL), (573801686UL), (2049230598UL), (2910471867UL), (2686314264UL), (1726228846UL), (3516983332UL), (726840185UL), (1241204222UL), (2237574317UL), (70568042UL), (1932610099UL), (2221862221UL), (1510378092UL), (4050391637UL), (4077539568UL)}, {(3872117793UL), (803220151UL), (70843412UL), (1661103032UL), (1976811457UL), (2186373604UL), (564259972UL), (1475436923UL), (2260980893UL), (4245534505UL), (1075107552UL), (3692990573UL), (370098873UL), (4045905424UL), (2420395420UL), (2332395402UL), (207483321UL), (622317750UL), (3004242500UL), (833623111UL), (3151161301UL), (1629139881UL), (352228793UL), (2439953368UL), (3183333619UL), (2703537080UL), (3218957129UL), (3164695888UL), (1741641842UL), (963394141UL), (4241612717UL), (1034476784UL), (2035880432UL), (3977821313UL), (1543311495UL), (3010014356UL), (1638490901UL), (2364265378UL), (3420329129UL), (333361555UL), (1133565821UL), (1450937015UL), (616059115UL), (3216393887UL), (3041978455UL), (3990855695UL), (1238628750UL), (512746184UL), (3256670217UL), (1616316512UL), (2791405051UL), (93474487UL), (2865892488UL), (1901471398UL), (2930857966UL), (2178431077UL), (2325598341UL), (3189256113UL), (1302432091UL), (808592927UL), (2945846737UL), (3487931071UL), (2018175258UL), (752981057UL), (1097082589UL), (1307115286UL), (175147508UL), (3611190164UL), (850238914UL), (3318706185UL), (199743319UL), (328621708UL), (3183670050UL), (3609998315UL), (4075306371UL), (3554549067UL), (2119566187UL), (1498503842UL), (1261870696UL), (2216745780UL), (950288337UL), (1117344941UL), (2150569143UL), (2899286760UL), (1594966374UL), (888858617UL), (35840654UL), (2829539211UL), (2511395669UL), (3607190544UL), (3278412778UL), (2249895907UL), (1320858068UL), (3576889788UL), (266766189UL), (1522426851UL), (1903494122UL), (1928370573UL), (2628132591UL), (3322025904UL), (220280169UL), (433606853UL), (1428961479UL), (986074592UL), (2128892987UL), (467697583UL), (1616913929UL), (325674890UL), (444442578UL), (649166208UL), (1689709565UL), (1493452467UL), (2222122038UL), (121114616UL), (2134348225UL), (3512035688UL), (1283058921UL), (4230441398UL), (3701238559UL), (337534132UL), (1418548715UL), (1190006478UL), (500654385UL), (1766924757UL), (1944680746UL), (940574010UL), (922744002UL), (186142284UL), (3131162902UL), (1693891092UL), (3031823448UL), (2143051534UL), (1429025284UL), (1487843160UL), (3606456133UL), (2079235652UL), (2447285474UL), (2669283767UL), (3232117829UL), (2490054343UL), (3225501736UL), (2911340385UL), (382319031UL), (1516937595UL), (622543191UL), (1388990570UL), (1749179860UL), (1924483707UL), (2593474505UL), (472539197UL), (122872799UL), (2586347240UL), (880588515UL), (4046335279UL), (1712182607UL), (4270737941UL), (1336703451UL), (3390078162UL), (382216945UL), (3733326081UL), (460422073UL), (3872117793UL), (803220151UL), (70843412UL), (1661103032UL), (250339760UL), (2186373604UL), (564259972UL), (1475436923UL), (2260980893UL), (657986735UL), (1075107552UL), (3692990573UL), (370098873UL), (4045905424UL), (3201950123UL), (2332395402UL), (207483321UL), (622317750UL), (3004242500UL), (3732213278UL), (3151161301UL), (1629139881UL), (352228793UL), (2439953368UL), (3572618926UL), (2703537080UL), (3218957129UL), (3164695888UL), (1741641842UL), (685933373UL), (4241612717UL), (1034476784UL), (2035880432UL), (3977821313UL), (3855995181UL), (3010014356UL), (1638490901UL), (2364265378UL), (3420329129UL), (2355603679UL), (1133565821UL), (1450937015UL), (616059115UL), (3216393887UL), (1733804102UL), (3990855695UL), (1238628750UL), (512746184UL), (3256670217UL), (2651059231UL), (2791405051UL), (93474487UL), (2865892488UL), (1901471398UL), (2113461797UL), (2178431077UL), (2325598341UL), (3189256113UL), (1302432091UL), (2986990416UL), (2945846737UL), (3487931071UL), (2018175258UL), (752981057UL), (2428033310UL), (1307115286UL), (175147508UL), (3611190164UL), (850238914UL), (1033628405UL), (199743319UL), (328621708UL), (3183670050UL), (3609998315UL), (4024297327UL), (3554549067UL), (2119566187UL), (1498503842UL), (1261870696UL), (290361143UL), (950288337UL), (1117344941UL), (2150569143UL), (2899286760UL), (168826051UL), (888858617UL), (35840654UL), (2829539211UL), (2511395669UL), (2890882060UL), (3278412778UL), (2249895907UL), (1320858068UL), (3576889788UL), (1794920145UL), (1522426851UL), (1903494122UL), (1928370573UL), (2628132591UL), (1251697758UL), (220280169UL), (433606853UL), (1428961479UL), (986074592UL), (2707115661UL), (467697583UL), (1616913929UL), (325674890UL), (444442578UL), (122781510UL), (1689709565UL), (1493452467UL), (2222122038UL), (121114616UL), (3425723636UL), (3512035688UL), (1283058921UL), (4230441398UL), (3701238559UL), (1646155473UL), (1418548715UL), (1190006478UL), (500654385UL), (1766924757UL), (3920475367UL), (940574010UL), (922744002UL), (186142284UL), (3131162902UL), (54639113UL), (3031823448UL), (2143051534UL), (1429025284UL), (1487843160UL), (4152687885UL), (2079235652UL), (2447285474UL), (2669283767UL), (3232117829UL), (1601035152UL), (3225501736UL), (2911340385UL), (382319031UL), (1516937595UL), (3508441679UL), (1388990570UL), (1749179860UL), (1924483707UL), (2593474505UL), (2835403456UL), (122872799UL), (2586347240UL), (880588515UL), (4046335279UL), (2958058367UL), (4270737941UL), (1336703451UL), (3390078162UL), (382216945UL), (450517882UL), (460422073UL), (3872117793UL), (803220151UL), (70843412UL), (2066343874UL), (250339760UL), (2186373604UL), (564259972UL), (1475436923UL), (1683787449UL), (657986735UL), (1075107552UL), (3692990573UL), (370098873UL), (2615082840UL), (3201950123UL), (2332395402UL), (207483321UL), (622317750UL), (2655424371UL), (3732213278UL), (3151161301UL), (1629139881UL), (352228793UL), (3236724760UL), (3572618926UL), (2703537080UL), (3218957129UL), (3164695888UL), (9775065UL), (685933373UL), (4241612717UL), (1034476784UL), (2035880432UL), (1621920075UL), (3855995181UL), (3010014356UL), (1638490901UL), (2364265378UL), (1509475888UL), (2355603679UL), (1133565821UL), (1450937015UL), (616059115UL), (3666188236UL), (1733804102UL), (3990855695UL), (1238628750UL), (512746184UL), (3900473826UL), (2651059231UL), (2791405051UL), (93474487UL), (2865892488UL), (222759186UL), (2113461797UL), (2178431077UL), (2325598341UL), (3189256113UL), (2505499508UL), (2986990416UL), (2945846737UL), (3487931071UL), (2018175258UL), (2766733928UL), (2428033310UL), (1307115286UL), (175147508UL), (3611190164UL), (1909211603UL), (1033628405UL), (199743319UL), (328621708UL), (3183670050UL), (1680331218UL), (4024297327UL), (3554549067UL), (2119566187UL), (1498503842UL), (3516256046UL), (290361143UL), (950288337UL), (1117344941UL), (2150569143UL), (3182619063UL), (168826051UL), (888858617UL), (35840654UL), (2829539211UL), (645798943UL), (2890882060UL), (3278412778UL), (2249895907UL), (1320858068UL), (1436708568UL), (1794920145UL), (1522426851UL), (1903494122UL), (1928370573UL), (3693049252UL), (1251697758UL), (220280169UL), (433606853UL), (1428961479UL), (3724415861UL), (2707115661UL), (467697583UL), (1616913929UL), (325674890UL), (1448052253UL), (122781510UL), (1689709565UL), (1493452467UL), (2222122038UL), (2177448198UL), (3425723636UL), (3512035688UL), (1283058921UL), (4230441398UL), (3050940272UL), (1646155473UL), (1418548715UL), (1190006478UL), (500654385UL), (1106232UL), (3920475367UL), (940574010UL), (922744002UL), (186142284UL), (4144806511UL), (54639113UL), (3031823448UL), (2143051534UL), (1429025284UL), (2067453848UL), (4152687885UL), (2079235652UL), (2447285474UL), (2669283767UL), (428527087UL), (1601035152UL), (3225501736UL), (2911340385UL), (382319031UL), (2565464472UL), (3508441679UL), (1388990570UL), (1749179860UL), (1924483707UL), (1737735237UL), (2835403456UL), (122872799UL), (2586347240UL), (880588515UL), (597822462UL), (2958058367UL), (4270737941UL), (1336703451UL), (3390078162UL), (2532634475UL), (450517882UL), (460422073UL), (3872117793UL), (803220151UL), (801648827UL), (2066343874UL), (250339760UL), (2186373604UL), (564259972UL), (3417948976UL), (1683787449UL), (657986735UL), (1075107552UL), (3692990573UL), (2235306692UL), (2615082840UL), (3201950123UL), (2332395402UL), (207483321UL), (699310933UL), (2655424371UL), (3732213278UL), (3151161301UL), (1629139881UL), (1152704006UL), (3236724760UL), (3572618926UL), (2703537080UL), (3218957129UL), (2726926336UL), (9775065UL), (685933373UL), (4241612717UL), (1034476784UL), (2398119652UL), (1621920075UL), (3855995181UL), (3010014356UL), (1638490901UL), (252854480UL), (1509475888UL), (2355603679UL), (1133565821UL), (1450937015UL), (2655911639UL), (3666188236UL), (1733804102UL), (3990855695UL), (1238628750UL), (1115900497UL), (3900473826UL), (2651059231UL), (2791405051UL), (93474487UL), (1862985957UL), (222759186UL), (2113461797UL), (2178431077UL), (2325598341UL), (4179075132UL), (2505499508UL), (2986990416UL), (2945846737UL), (3487931071UL), (564667776UL), (2766733928UL), (2428033310UL), (1307115286UL), (175147508UL), (1759077815UL), (1909211603UL), (1033628405UL), (199743319UL), (328621708UL), (2552816198UL), (1680331218UL), (4024297327UL), (3554549067UL), (2119566187UL), (2267805778UL), (3516256046UL), (290361143UL), (950288337UL), (1117344941UL), (2897506172UL), (3182619063UL), (168826051UL), (888858617UL), (35840654UL), (2035476068UL), (645798943UL), (2890882060UL), (3278412778UL), (2249895907UL), (3278449102UL), (1436708568UL), (1794920145UL), (1522426851UL), (1903494122UL), (1500763736UL), (3693049252UL), (1251697758UL), (220280169UL), (433606853UL), (3914497854UL), (3724415861UL), (2707115661UL), (467697583UL), (1616913929UL), (918435305UL), (1448052253UL), (122781510UL), (1689709565UL), (1493452467UL), (609575172UL), (2177448198UL), (3425723636UL), (3512035688UL), (1283058921UL), (3661181550UL), (3050940272UL), (1646155473UL), (1418548715UL), (1190006478UL), (1047301661UL), (1106232UL), (3920475367UL), (940574010UL), (922744002UL), (2510633517UL), (4144806511UL), (54639113UL), (3031823448UL), (2143051534UL), (3242814908UL), (2067453848UL), (4152687885UL), (2079235652UL), (2447285474UL), (736638210UL), (428527087UL), (1601035152UL), (3225501736UL), (2911340385UL), (1849570436UL), (2565464472UL), (3508441679UL), (1388990570UL), (1749179860UL), (84517579UL), (1737735237UL), (2835403456UL), (122872799UL), (2586347240UL), (4002124614UL), (597822462UL), (2958058367UL), (4270737941UL), (1336703451UL), (3078170472UL), (1186434751UL), (700631413UL), (1497890797UL), (1195347450UL), (2560167391UL), (1116697259UL), (1254138573UL), (747913260UL), (240954704UL), (3107512667UL), (360584144UL), (3422778960UL), (3516528389UL), (3301260366UL), (1254513537UL), (122269053UL), (1579582456UL), (873334104UL), (3918835024UL), (1731872444UL), (1974410416UL), (1811172641UL), (4172523062UL), (4092675777UL), (4124987343UL), (1936078756UL), (1757348689UL), (2694415512UL), (128641660UL), (1744777659UL), (3173116729UL), (983733754UL), (1430789547UL), (701906842UL), (3367232568UL), (3266433501UL), (3572590347UL), (1453272962UL), (2106553114UL), (993786201UL), (2149441250UL), (1295181065UL), (2962229026UL), (3709052556UL), (3255608941UL), (3677730029UL), (483873127UL), (102227292UL), (2626265293UL), (2018984578UL), (2266388762UL), (1191709548UL), (2152725916UL), (583672623UL), (2230473473UL), (1995194269UL), (1740347812UL), (2558095372UL), (3070195183UL), (3023333227UL), (2497183195UL), (1908755188UL), (773027539UL), (3646876518UL), (2272586839UL), (493318726UL), (2107067517UL), (2000805278UL), (2530829636UL), (3183628745UL), (677565332UL), (1497629423UL), (82094920UL), (2214054433UL), (2635367545UL), (470855467UL), (2184853389UL), (2942188934UL), (188335670UL), (3656661644UL), (1883526235UL), (3990873975UL), (1490784356UL), (4047548172UL), (3149642641UL), (3289988179UL), (2590918909UL), (2893039564UL), (2350687346UL), (4252624874UL), (15372456UL), (1614496594UL), (2364847678UL), (2604511825UL), (422365460UL), (4195174772UL), (3266964836UL), (2008671995UL), (54038434UL), (781948549UL), (1276017666UL), (2756376612UL), (2436825273UL), (1711863836UL), (3541493950UL), (3821378841UL), (1007557618UL), (345375815UL), (2081905201UL), (2227278118UL), (1185927141UL), (1082173792UL), (3567361925UL), (1940465859UL), (541632942UL), (1830210248UL), (3757851982UL), (775883450UL), (1666577465UL), (1004944607UL), (878440834UL), (2146344131UL), (4195798476UL), (370164841UL), (3649112729UL), (37066142UL), (2311278904UL), (1935745497UL), (2304799402UL), (4107299626UL), (1348526232UL), (2473609635UL), (3284032699UL), (2374292786UL), (1762329186UL), (857978496UL), (1039346432UL), (2621413355UL), (29961014UL), (3582263091UL), (4268542513UL), (3890612190UL), (3096173646UL), (2026544230UL), (3856142618UL), (2347115934UL), (319800326UL), (3255916105UL), (2430273059UL), (823505311UL), (874255188UL), (1401925393UL), (4203707857UL), (4259159566UL), (2606881118UL), (1978288664UL), (1447576038UL), (3860341401UL), (412510348UL)}, {(4052471963UL), (683640040UL), (3043876021UL), (3466644483UL), (4222418025UL), (3035140128UL), (1466027937UL), (18198088UL), (3410320851UL), (3040963721UL), (488404231UL), (3157371815UL), (769336092UL), (3240417718UL), (808582581UL), (2075839263UL), (835026995UL), (3123726486UL), (3284240985UL), (1898453053UL), (3606056482UL), (512836002UL), (2715428547UL), (4182302879UL), (1644882480UL), (3160187826UL), (390292489UL), (980889545UL), (2776206633UL), (2482799995UL), (617042280UL), (3501667414UL), (689451808UL), (497018701UL), (238525753UL), (3890163301UL), (896679896UL), (1544533015UL), (3412477225UL), (3116575138UL), (4250402651UL), (3990990746UL), (819056741UL), (1459334146UL), (158377590UL), (3444755752UL), (8230450UL), (1378706455UL), (684191332UL), (3217423797UL), (2842520097UL), (1631477948UL), (2591254230UL), (959644473UL), (1020694107UL), (1748401915UL), (3452514983UL), (3892766171UL), (1227786994UL), (2086180800UL), (2394613217UL), (2091953150UL), (870094953UL), (2306851481UL), (571550601UL), (488878212UL), (873197214UL), (2630100528UL), (2067476907UL), (2162307009UL), (2026119728UL), (115875280UL), (2905867426UL), (248774881UL), (3110900450UL), (2236032812UL), (1888510348UL), (708001855UL), (996960491UL), (3514196956UL), (1407967546UL), (1826568876UL), (3659618284UL), (2614104317UL), (2230066308UL), (1055135881UL), (2537437343UL), (1858044413UL), (2608594891UL), (2750681169UL), (3241939420UL), (3966440877UL), (2375002886UL), (2417753441UL), (1405878685UL), (1081133199UL), (1496940727UL), (382467042UL), (2745477587UL), (1209424459UL), (811187075UL), (1385604734UL), (2623887355UL), (3443875720UL), (394141555UL), (4142998949UL), (4195414618UL), (1489846841UL), (2253433808UL), (1171450286UL), (84131191UL), (4387588UL), (2641405140UL), (3525405389UL), (3273000909UL), (423660319UL), (2366546732UL), (3698878607UL), (2161119729UL), (4263629085UL), (3029102089UL), (2692507376UL), (3266869596UL), (1658012061UL), (1960169440UL), (1002311379UL), (3724446882UL), (2004188516UL), (999513506UL), (2200093802UL), (4141037460UL), (351865836UL), (412875013UL), (1535823315UL), (3880657632UL), (3109944987UL), (3207577548UL), (3462087941UL), (584875517UL), (2635241084UL), (3834145971UL), (1693380373UL), (3524443732UL), (934775214UL), (1960588847UL), (2226778032UL), (1044609478UL), (12199016UL), (1120582000UL), (226430296UL), (665553142UL), (2570993348UL), (1685535237UL), (3325420136UL), (3925248326UL), (2855346376UL), (1205558328UL), (808835317UL), (3295908896UL), (4170076136UL), (2438272365UL), (4052471963UL), (683640040UL), (3043876021UL), (3466644483UL), (1385549869UL), (3035140128UL), (1466027937UL), (18198088UL), (3410320851UL), (2171386836UL), (488404231UL), (3157371815UL), (769336092UL), (3240417718UL), (2921774554UL), (2075839263UL), (835026995UL), (3123726486UL), (3284240985UL), (72352110UL), (3606056482UL), (512836002UL), (2715428547UL), (4182302879UL), (3869483469UL), (3160187826UL), (390292489UL), (980889545UL), (2776206633UL), (1385691983UL), (617042280UL), (3501667414UL), (689451808UL), (497018701UL), (2600411809UL), (3890163301UL), (896679896UL), (1544533015UL), (3412477225UL), (356556378UL), (4250402651UL), (3990990746UL), (819056741UL), (1459334146UL), (199003993UL), (3444755752UL), (8230450UL), (1378706455UL), (684191332UL), (1750733272UL), (2842520097UL), (1631477948UL), (2591254230UL), (959644473UL), (2113375576UL), (1748401915UL), (3452514983UL), (3892766171UL), (1227786994UL), (275473920UL), (2394613217UL), (2091953150UL), (870094953UL), (2306851481UL), (897057645UL), (488878212UL), (873197214UL), (2630100528UL), (2067476907UL), (944114068UL), (2026119728UL), (115875280UL), (2905867426UL), (248774881UL), (989201307UL), (2236032812UL), (1888510348UL), (708001855UL), (996960491UL), (2121706374UL), (1407967546UL), (1826568876UL), (3659618284UL), (2614104317UL), (2931815032UL), (1055135881UL), (2537437343UL), (1858044413UL), (2608594891UL), (1423973935UL), (3241939420UL), (3966440877UL), (2375002886UL), (2417753441UL), (2514473440UL), (1081133199UL), (1496940727UL), (382467042UL), (2745477587UL), (81977310UL), (811187075UL), (1385604734UL), (2623887355UL), (3443875720UL), (2100629879UL), (4142998949UL), (4195414618UL), (1489846841UL), (2253433808UL), (337182869UL), (84131191UL), (4387588UL), (2641405140UL), (3525405389UL), (661876463UL), (423660319UL), (2366546732UL), (3698878607UL), (2161119729UL), (309510684UL), (3029102089UL), (2692507376UL), (3266869596UL), (1658012061UL), (11119541UL), (1002311379UL), (3724446882UL), (2004188516UL), (999513506UL), (3486722046UL), (4141037460UL), (351865836UL), (412875013UL), (1535823315UL), (2818130700UL), (3109944987UL), (3207577548UL), (3462087941UL), (584875517UL), (322875622UL), (3834145971UL), (1693380373UL), (3524443732UL), (934775214UL), (3879414752UL), (2226778032UL), (1044609478UL), (12199016UL), (1120582000UL), (4207259464UL), (665553142UL), (2570993348UL), (1685535237UL), (3325420136UL), (553869152UL), (2855346376UL), (1205558328UL), (808835317UL), (3295908896UL), (470585896UL), (2438272365UL), (4052471963UL), (683640040UL), (3043876021UL), (1588419572UL), (1385549869UL), (3035140128UL), (1466027937UL), (18198088UL), (363815288UL), (2171386836UL), (488404231UL), (3157371815UL), (769336092UL), (2464768302UL), (2921774554UL), (2075839263UL), (835026995UL), (3123726486UL), (4229246330UL), (72352110UL), (3606056482UL), (512836002UL), (2715428547UL), (319830805UL), (3869483469UL), (3160187826UL), (390292489UL), (980889545UL), (2966401462UL), (1385691983UL), (617042280UL), (3501667414UL), (689451808UL), (4047377762UL), (2600411809UL), (3890163301UL), (896679896UL), (1544533015UL), (764316452UL), (356556378UL), (4250402651UL), (3990990746UL), (819056741UL), (965331966UL), (199003993UL), (3444755752UL), (8230450UL), (1378706455UL), (51902971UL), (1750733272UL), (2842520097UL), (1631477948UL), (2591254230UL), (426039404UL), (2113375576UL), (1748401915UL), (3452514983UL), (3892766171UL), (2833368447UL), (275473920UL), (2394613217UL), (2091953150UL), (870094953UL), (3524323828UL), (897057645UL), (488878212UL), (873197214UL), (2630100528UL), (3939852929UL), (944114068UL), (2026119728UL), (115875280UL), (2905867426UL), (3192643919UL), (989201307UL), (2236032812UL), (1888510348UL), (708001855UL), (2166012172UL), (2121706374UL), (1407967546UL), (1826568876UL), (3659618284UL), (135277096UL), (2931815032UL), (1055135881UL), (2537437343UL), (1858044413UL), (2588429924UL), (1423973935UL), (3241939420UL), (3966440877UL), (2375002886UL), (2477142003UL), (2514473440UL), (1081133199UL), (1496940727UL), (382467042UL), (1760129281UL), (81977310UL), (811187075UL), (1385604734UL), (2623887355UL), (4070531513UL), (2100629879UL), (4142998949UL), (4195414618UL), (1489846841UL), (2688068550UL), (337182869UL), (84131191UL), (4387588UL), (2641405140UL), (1837403234UL), (661876463UL), (423660319UL), (2366546732UL), (3698878607UL), (2916121190UL), (309510684UL), (3029102089UL), (2692507376UL), (3266869596UL), (303422295UL), (11119541UL), (1002311379UL), (3724446882UL), (2004188516UL), (2652711421UL), (3486722046UL), (4141037460UL), (351865836UL), (412875013UL), (113149471UL), (2818130700UL), (3109944987UL), (3207577548UL), (3462087941UL), (1443140792UL), (322875622UL), (3834145971UL), (1693380373UL), (3524443732UL), (901891935UL), (3879414752UL), (2226778032UL), (1044609478UL), (12199016UL), (2213168758UL), (4207259464UL), (665553142UL), (2570993348UL), (1685535237UL), (1114492412UL), (553869152UL), (2855346376UL), (1205558328UL), (808835317UL), (3266626294UL), (470585896UL), (2438272365UL), (4052471963UL), (683640040UL), (3581539398UL), (1588419572UL), (1385549869UL), (3035140128UL), (1466027937UL), (4075470388UL), (363815288UL), (2171386836UL), (488404231UL), (3157371815UL), (2759472233UL), (2464768302UL), (2921774554UL), (2075839263UL), (835026995UL), (1030654310UL), (4229246330UL), (72352110UL), (3606056482UL), (512836002UL), (961858496UL), (319830805UL), (3869483469UL), (3160187826UL), (390292489UL), (2366221117UL), (2966401462UL), (1385691983UL), (617042280UL), (3501667414UL), (295865937UL), (4047377762UL), (2600411809UL), (3890163301UL), (896679896UL), (21714884UL), (764316452UL), (356556378UL), (4250402651UL), (3990990746UL), (1012967081UL), (965331966UL), (199003993UL), (3444755752UL), (8230450UL), (1255302023UL), (51902971UL), (1750733272UL), (2842520097UL), (1631477948UL), (2321320272UL), (426039404UL), (2113375576UL), (1748401915UL), (3452514983UL), (2847013518UL), (2833368447UL), (275473920UL), (2394613217UL), (2091953150UL), (1250695522UL), (3524323828UL), (897057645UL), (488878212UL), (873197214UL), (1452317325UL), (3939852929UL), (944114068UL), (2026119728UL), (115875280UL), (4061820350UL), (3192643919UL), (989201307UL), (2236032812UL), (1888510348UL), (3986446165UL), (2166012172UL), (2121706374UL), (1407967546UL), (1826568876UL), (2910745432UL), (135277096UL), (2931815032UL), (1055135881UL), (2537437343UL), (2976455307UL), (2588429924UL), (1423973935UL), (3241939420UL), (3966440877UL), (2418897705UL), (2477142003UL), (2514473440UL), (1081133199UL), (1496940727UL), (1321648771UL), (1760129281UL), (81977310UL), (811187075UL), (1385604734UL), (17644628UL), (4070531513UL), (2100629879UL), (4142998949UL), (4195414618UL), (2697310527UL), (2688068550UL), (337182869UL), (84131191UL), (4387588UL), (1724191700UL), (1837403234UL), (661876463UL), (423660319UL), (2366546732UL), (693430992UL), (2916121190UL), (309510684UL), (3029102089UL), (2692507376UL), (3917396098UL), (303422295UL), (11119541UL), (1002311379UL), (3724446882UL), (841468294UL), (2652711421UL), (3486722046UL), (4141037460UL), (351865836UL), (1733384185UL), (113149471UL), (2818130700UL), (3109944987UL), (3207577548UL), (2326233100UL), (1443140792UL), (322875622UL), (3834145971UL), (1693380373UL), (1580706359UL), (901891935UL), (3879414752UL), (2226778032UL), (1044609478UL), (3805470822UL), (2213168758UL), (4207259464UL), (665553142UL), (2570993348UL), (3406548636UL), (1114492412UL), (553869152UL), (2855346376UL), (1205558328UL), (4287831475UL), (1329654114UL), (2347235746UL), (2477803138UL), (2962371859UL), (3610024283UL), (4197266903UL), (1162294689UL), (1746713323UL), (2815058477UL), (2152552186UL), (4214791071UL), (2382522482UL), (3713914466UL), (3974765132UL), (348354997UL), (1670276150UL), (2173074887UL), (381736894UL), (3866219357UL), (1919366695UL), (3635118824UL), (2298653261UL), (3534332682UL), (1627699897UL), (4168636618UL), (3787938690UL), (2144231271UL), (2067679462UL), (217001062UL), (2308928337UL), (1620415125UL), (3526559172UL), (749451561UL), (2456947371UL), (3543607786UL), (1893824735UL), (962598819UL), (2332807164UL), (1691114891UL), (2543992233UL), (2914780639UL), (1610287145UL), (1700599697UL), (3185174208UL), (552323208UL), (2367242224UL), (3797136972UL), (3415066418UL), (2468049249UL), (1677937401UL), (40445671UL), (2886682530UL), (2585715434UL), (194932329UL), (2994003812UL), (3099556382UL), (680852222UL), (135838738UL), (1371063256UL), (995454898UL), (3754526418UL), (803635682UL), (634588682UL), (3869250783UL), (2442285521UL), (1455637058UL), (570621479UL), (2512681851UL), (1220136924UL), (750260121UL), (2909903038UL), (1582019728UL), (955115170UL), (1608265445UL), (2157390890UL), (2303678604UL), (1568394164UL), (831914289UL), (1971271392UL), (1294799854UL), (1489945167UL), (442427880UL), (1305083700UL), (1211218668UL), (2380073713UL), (2798736785UL), (2193524273UL), (3227386915UL), (1636588977UL), (3612937642UL), (435113647UL), (1591761830UL), (536210039UL), (2475747073UL), (4223795480UL), (1786737271UL), (1444661534UL), (3249410301UL), (3333695212UL), (4169107188UL), (3280638635UL), (702659930UL), (1444127970UL), (225340755UL), (2255629368UL), (746584456UL), (3965677674UL), (2671132955UL), (2080717656UL), (2145343886UL), (3712441197UL), (368422910UL), (1297685674UL), (4076123901UL), (26214470UL), (2948764826UL), (40503299UL), (1198194334UL), (2100063637UL), (1966331612UL), (2189582064UL), (2064696934UL), (1797550642UL), (3469793941UL), (2868963812UL), (851437659UL), (240918534UL), (365060070UL), (3530600064UL), (39695324UL), (1753898837UL), (1286976449UL), (3131971360UL), (2406485219UL), (3365373704UL), (3224113403UL), (1651742834UL), (587601940UL), (1574206085UL), (3739575036UL), (1413669616UL), (38172232UL), (293127854UL), (4126190109UL), (1891744061UL), (787878666UL), (456643669UL), (4228710325UL), (2025132037UL), (1492133135UL), (3122840937UL), (969442079UL), (3272420439UL), (3836126369UL), (1877655562UL), (2766212758UL), (3867984746UL), (3348077578UL), (1841216706UL)}, {(1676507466UL), (1017841240UL), (2992644565UL), (476936158UL), (2468072723UL), (3113105154UL), (1154120402UL), (460889625UL), (1942263502UL), (1761593999UL), (3020908939UL), (3078194866UL), (310971889UL), (1644896012UL), (3756044556UL), (3549937583UL), (3710822994UL), (3554313733UL), (2174654326UL), (4251063242UL), (2340485150UL), (950951909UL), (4288936895UL), (3744348848UL), (706644559UL), (1085927825UL), (1595992020UL), (3288724966UL), (1367247946UL), (2950094970UL), (3925419886UL), (2628739022UL), (2528254629UL), (3582224789UL), (3907345559UL), (3373329273UL), (4255542251UL), (1185418446UL), (4018656113UL), (2854344020UL), (1381160022UL), (3642438773UL), (4284399225UL), (935780030UL), (4142412144UL), (1263328494UL), (1154237693UL), (2684443667UL), (3067549398UL), (4253090033UL), (1251034970UL), (1874233020UL), (3222830495UL), (3866931656UL), (286048055UL), (3146635362UL), (1436483376UL), (2821876495UL), (3927829532UL), (2648886905UL), (2142862852UL), (1368937545UL), (2647327844UL), (1072219385UL), (2621337706UL), (3543274652UL), (911792564UL), (1204178178UL), (4127214323UL), (2821691380UL), (3101998294UL), (730811902UL), (1989156224UL), (2872353003UL), (278290276UL), (1390223786UL), (2657819643UL), (552729795UL), (1736270535UL), (2759207116UL), (1897013739UL), (3657020278UL), (1387364861UL), (1966588302UL), (1049203087UL), (486446521UL), (3675999281UL), (714737345UL), (686837530UL), (85509025UL), (3609089773UL), (2117061768UL), (3935682560UL), (3859508784UL), (4105287041UL), (1808988481UL), (83680601UL), (1464326680UL), (1657693523UL), (3318062731UL), (1391154023UL), (234460119UL), (3551348221UL), (2245244809UL), (3635923821UL), (2814385745UL), (3497626257UL), (916790795UL), (245338628UL), (2514528380UL), (3711787525UL), (2239286063UL), (1054058916UL), (3963706010UL), (3176203796UL), (2230543409UL), (2173597546UL), (3786733892UL), (1396036965UL), (1038764273UL), (2032556038UL), (3216540537UL), (3298170974UL), (1008892557UL), (141155464UL), (1863766055UL), (3931110690UL), (191299053UL), (2019139711UL), (2409528317UL), (739418419UL), (1377144055UL), (2876702705UL), (3911939673UL), (1197696462UL), (2814009721UL), (600813233UL), (1535885024UL), (1486280357UL), (3084650548UL), (2324695947UL), (2293284974UL), (2036339249UL), (3465600153UL), (1624446108UL), (327866771UL), (3356772175UL), (1826625240UL), (1947102360UL), (3661848193UL), (1421374867UL), (3228945021UL), (1358646008UL), (1067180174UL), (2190741258UL), (643362354UL), (109899594UL), (2064362635UL), (3249674888UL), (2165543887UL), (4180291913UL), (1676507466UL), (1017841240UL), (2992644565UL), (476936158UL), (3608467942UL), (3113105154UL), (1154120402UL), (460889625UL), (1942263502UL), (1862994005UL), (3020908939UL), (3078194866UL), (310971889UL), (1644896012UL), (693774191UL), (3549937583UL), (3710822994UL), (3554313733UL), (2174654326UL), (37658897UL), (2340485150UL), (950951909UL), (4288936895UL), (3744348848UL), (2258231402UL), (1085927825UL), (1595992020UL), (3288724966UL), (1367247946UL), (3850509554UL), (3925419886UL), (2628739022UL), (2528254629UL), (3582224789UL), (3124287811UL), (3373329273UL), (4255542251UL), (1185418446UL), (4018656113UL), (1989726178UL), (1381160022UL), (3642438773UL), (4284399225UL), (935780030UL), (3622052196UL), (1263328494UL), (1154237693UL), (2684443667UL), (3067549398UL), (2786224913UL), (1251034970UL), (1874233020UL), (3222830495UL), (3866931656UL), (1529490307UL), (3146635362UL), (1436483376UL), (2821876495UL), (3927829532UL), (979247444UL), (2142862852UL), (1368937545UL), (2647327844UL), (1072219385UL), (294065371UL), (3543274652UL), (911792564UL), (1204178178UL), (4127214323UL), (103582737UL), (3101998294UL), (730811902UL), (1989156224UL), (2872353003UL), (1885087777UL), (1390223786UL), (2657819643UL), (552729795UL), (1736270535UL), (3325206451UL), (1897013739UL), (3657020278UL), (1387364861UL), (1966588302UL), (2117065739UL), (486446521UL), (3675999281UL), (714737345UL), (686837530UL), (3946214694UL), (3609089773UL), (2117061768UL), (3935682560UL), (3859508784UL), (2916136885UL), (1808988481UL), (83680601UL), (1464326680UL), (1657693523UL), (3438751781UL), (1391154023UL), (234460119UL), (3551348221UL), (2245244809UL), (3948410079UL), (2814385745UL), (3497626257UL), (916790795UL), (245338628UL), (1767303496UL), (3711787525UL), (2239286063UL), (1054058916UL), (3963706010UL), (4140631909UL), (2230543409UL), (2173597546UL), (3786733892UL), (1396036965UL), (1116033475UL), (2032556038UL), (3216540537UL), (3298170974UL), (1008892557UL), (667272562UL), (1863766055UL), (3931110690UL), (191299053UL), (2019139711UL), (272901326UL), (739418419UL), (1377144055UL), (2876702705UL), (3911939673UL), (3839312742UL), (2814009721UL), (600813233UL), (1535885024UL), (1486280357UL), (4256065219UL), (2324695947UL), (2293284974UL), (2036339249UL), (3465600153UL), (1215859603UL), (327866771UL), (3356772175UL), (1826625240UL), (1947102360UL), (4240407984UL), (1421374867UL), (3228945021UL), (1358646008UL), (1067180174UL), (4100357988UL), (643362354UL), (109899594UL), (2064362635UL), (3249674888UL), (2898852084UL), (4180291913UL), (1676507466UL), (1017841240UL), (2992644565UL), (1569683812UL), (3608467942UL), (3113105154UL), (1154120402UL), (460889625UL), (966040649UL), (1862994005UL), (3020908939UL), (3078194866UL), (310971889UL), (786634113UL), (693774191UL), (3549937583UL), (3710822994UL), (3554313733UL), (1578429713UL), (37658897UL), (2340485150UL), (950951909UL), (4288936895UL), (2528123823UL), (2258231402UL), (1085927825UL), (1595992020UL), (3288724966UL), (3544041088UL), (3850509554UL), (3925419886UL), (2628739022UL), (2528254629UL), (2562145937UL), (3124287811UL), (3373329273UL), (4255542251UL), (1185418446UL), (3693565710UL), (1989726178UL), (1381160022UL), (3642438773UL), (4284399225UL), (3271478204UL), (3622052196UL), (1263328494UL), (1154237693UL), (2684443667UL), (3615401444UL), (2786224913UL), (1251034970UL), (1874233020UL), (3222830495UL), (2572413057UL), (1529490307UL), (3146635362UL), (1436483376UL), (2821876495UL), (3993894153UL), (979247444UL), (2142862852UL), (1368937545UL), (2647327844UL), (1353904396UL), (294065371UL), (3543274652UL), (911792564UL), (1204178178UL), (3165709748UL), (103582737UL), (3101998294UL), (730811902UL), (1989156224UL), (893293786UL), (1885087777UL), (1390223786UL), (2657819643UL), (552729795UL), (3388458110UL), (3325206451UL), (1897013739UL), (3657020278UL), (1387364861UL), (3025318046UL), (2117065739UL), (486446521UL), (3675999281UL), (714737345UL), (2085926890UL), (3946214694UL), (3609089773UL), (2117061768UL), (3935682560UL), (868009118UL), (2916136885UL), (1808988481UL), (83680601UL), (1464326680UL), (797410789UL), (3438751781UL), (1391154023UL), (234460119UL), (3551348221UL), (4068940987UL), (3948410079UL), (2814385745UL), (3497626257UL), (916790795UL), (3722456098UL), (1767303496UL), (3711787525UL), (2239286063UL), (1054058916UL), (2030352819UL), (4140631909UL), (2230543409UL), (2173597546UL), (3786733892UL), (3211336683UL), (1116033475UL), (2032556038UL), (3216540537UL), (3298170974UL), (2589589144UL), (667272562UL), (1863766055UL), (3931110690UL), (191299053UL), (1139480458UL), (272901326UL), (739418419UL), (1377144055UL), (2876702705UL), (1954361769UL), (3839312742UL), (2814009721UL), (600813233UL), (1535885024UL), (3587775605UL), (4256065219UL), (2324695947UL), (2293284974UL), (2036339249UL), (1534849280UL), (1215859603UL), (327866771UL), (3356772175UL), (1826625240UL), (720372669UL), (4240407984UL), (1421374867UL), (3228945021UL), (1358646008UL), (3409069246UL), (4100357988UL), (643362354UL), (109899594UL), (2064362635UL), (4243434294UL), (2898852084UL), (4180291913UL), (1676507466UL), (1017841240UL), (3243922356UL), (1569683812UL), (3608467942UL), (3113105154UL), (1154120402UL), (1479311403UL), (966040649UL), (1862994005UL), (3020908939UL), (3078194866UL), (1556392996UL), (786634113UL), (693774191UL), (3549937583UL), (3710822994UL), (920664071UL), (1578429713UL), (37658897UL), (2340485150UL), (950951909UL), (740197415UL), (2528123823UL), (2258231402UL), (1085927825UL), (1595992020UL), (2580760267UL), (3544041088UL), (3850509554UL), (3925419886UL), (2628739022UL), (3867556156UL), (2562145937UL), (3124287811UL), (3373329273UL), (4255542251UL), (3185271749UL), (3693565710UL), (1989726178UL), (1381160022UL), (3642438773UL), (3042165367UL), (3271478204UL), (3622052196UL), (1263328494UL), (1154237693UL), (1016814036UL), (3615401444UL), (2786224913UL), (1251034970UL), (1874233020UL), (2956086971UL), (2572413057UL), (1529490307UL), (3146635362UL), (1436483376UL), (1513970396UL), (3993894153UL), (979247444UL), (2142862852UL), (1368937545UL), (3275665128UL), (1353904396UL), (294065371UL), (3543274652UL), (911792564UL), (2209636872UL), (3165709748UL), (103582737UL), (3101998294UL), (730811902UL), (965151434UL), (893293786UL), (1885087777UL), (1390223786UL), (2657819643UL), (3278634059UL), (3388458110UL), (3325206451UL), (1897013739UL), (3657020278UL), (4293473749UL), (3025318046UL), (2117065739UL), (486446521UL), (3675999281UL), (620561205UL), (2085926890UL), (3946214694UL), (3609089773UL), (2117061768UL), (163384588UL), (868009118UL), (2916136885UL), (1808988481UL), (83680601UL), (10243015UL), (797410789UL), (3438751781UL), (1391154023UL), (234460119UL), (1278218413UL), (4068940987UL), (3948410079UL), (2814385745UL), (3497626257UL), (1233272798UL), (3722456098UL), (1767303496UL), (3711787525UL), (2239286063UL), (3968895688UL), (2030352819UL), (4140631909UL), (2230543409UL), (2173597546UL), (2866251044UL), (3211336683UL), (1116033475UL), (2032556038UL), (3216540537UL), (4233849723UL), (2589589144UL), (667272562UL), (1863766055UL), (3931110690UL), (2468422423UL), (1139480458UL), (272901326UL), (739418419UL), (1377144055UL), (4240143411UL), (1954361769UL), (3839312742UL), (2814009721UL), (600813233UL), (3976840004UL), (3587775605UL), (4256065219UL), (2324695947UL), (2293284974UL), (437604123UL), (1534849280UL), (1215859603UL), (327866771UL), (3356772175UL), (2757237699UL), (720372669UL), (4240407984UL), (1421374867UL), (3228945021UL), (3284801305UL), (3409069246UL), (4100357988UL), (643362354UL), (109899594UL), (1301585321UL), (2528806870UL), (1838904064UL), (448772403UL), (1097849740UL), (1899994097UL), (618309123UL), (1911948510UL), (2309256224UL), (1861398151UL), (905306403UL), (1067595802UL), (36868624UL), (3780886191UL), (835126206UL), (3190251977UL), (2672497726UL), (2085944002UL), (2912993968UL), (2493776706UL), (667136329UL), (1474890786UL), (2383346554UL), (943528949UL), (3376706013UL), (2495573574UL), (144956345UL), (793159960UL), (1591274917UL), (477107637UL), (1383815442UL), (67384899UL), (2355242218UL), (1687409818UL), (3801093871UL), (2108217811UL), (3455908733UL), (4172160797UL), (3935534685UL), (631067839UL), (1187677548UL), (2280856137UL), (3020767646UL), (2063176246UL), (3736904984UL), (2952933848UL), (2975164686UL), (4144473303UL), (34670977UL), (1250976509UL), (3484166554UL), (1532744745UL), (225700994UL), (1878713627UL), (2122358980UL), (1456610194UL), (2917522161UL), (2818947075UL), (102678939UL), (53743858UL), (2095250656UL), (4023979225UL), (3094092874UL), (4128760696UL), (3411610028UL), (3020200609UL), (2225866341UL), (586320946UL), (63813522UL), (1238216159UL), (2825692263UL), (2169937231UL), (3298517640UL), (1542128261UL), (2205544184UL), (1258655704UL), (2629012083UL), (4113650203UL), (3198617867UL), (2742310794UL), (3372657381UL), (3115904410UL), (1948638822UL), (1123521744UL), (1080429281UL), (4086706732UL), (4142693211UL), (817377147UL), (2570194641UL), (26001503UL), (2861456160UL), (4185725555UL), (2573003804UL), (1618628779UL), (2588489212UL), (3996192609UL), (1555844274UL), (1003123505UL), (1326350123UL), (1130583849UL), (3017128756UL), (74119042UL), (4041266437UL), (1938014170UL), (3528465794UL), (4203969698UL), (1913054398UL), (3617979809UL), (2218810167UL), (2453899816UL), (1997423206UL), (477446533UL), (303090065UL), (757937082UL), (1523238256UL), (3140505311UL), (1422588701UL), (3642014639UL), (1740624195UL), (1276017154UL), (3072526193UL), (3675105122UL), (1335122682UL), (4080595263UL), (2308519420UL), (3299182769UL), (1461978532UL), (3098694217UL), (2982399822UL), (3088698511UL), (586759229UL), (3548750902UL), (1449857891UL), (2866451663UL), (2525162286UL), (57294602UL), (4107991297UL), (1214672265UL), (2940391280UL), (4285346034UL), (3338216759UL), (737207923UL), (4264163846UL), (59219141UL), (2300024654UL), (1876616814UL), (1976543605UL), (783571061UL), (1724699622UL), (1967524469UL), (1650309916UL), (3322257631UL), (3975521122UL), (273342162UL), (1156754241UL), (185315896UL), (3368133921UL), (66314655UL), (4153777915UL), (3519901897UL)}, {(3672467167UL), (68684525UL), (1738833632UL), (3081329135UL), (2583806115UL), (2291130512UL), (503032614UL), (3658059597UL), (571493931UL), (685537959UL), (3498787788UL), (422428426UL), (3879256913UL), (1173158320UL), (4000800121UL), (298972869UL), (1718342816UL), (2541691685UL), (2490502642UL), (2321452806UL), (4223212804UL), (1812334632UL), (3717655725UL), (4238191852UL), (3001307165UL), (2621896355UL), (2572404999UL), (3590094954UL), (760765206UL), (2293618001UL), (1392353032UL), (1733137169UL), (2674005018UL), (4067961151UL), (1505710487UL), (451078217UL), (2591688848UL), (12635611UL), (507045428UL), (694822241UL), (1789383090UL), (1140183890UL), (1720695967UL), (1994318191UL), (3340349873UL), (2793804971UL), (1054433135UL), (2345087879UL), (3179939285UL), (1651968615UL), (1793223686UL), (1055357758UL), (914271617UL), (483007580UL), (2127727816UL), (2754998083UL), (3179053982UL), (598442002UL), (1950227301UL), (213053613UL), (3566888111UL), (2832258993UL), (4260365359UL), (443662829UL), (1706542890UL), (3852730296UL), (3643260763UL), (2163607277UL), (1812905006UL), (171529637UL), (215187467UL), (2369406909UL), (1929000706UL), (2572441025UL), (2133955541UL), (810692262UL), (1337974799UL), (4030350704UL), (2159178715UL), (3769451556UL), (1026825278UL), (593628480UL), (1817383139UL), (878832429UL), (2253876350UL), (203612980UL), (2102950440UL), (3407143936UL), (1912362251UL), (1595387637UL), (2827580539UL), (305467658UL), (3292706746UL), (44135525UL), (4001933553UL), (3697343089UL), (760470915UL), (587414402UL), (1419378814UL), (2852774010UL), (3891626781UL), (2757016765UL), (1090707384UL), (3997074427UL), (1047182100UL), (2855539022UL), (36229159UL), (1591415533UL), (3471572739UL), (1237952140UL), (2614469314UL), (213338525UL), (886212578UL), (2620301943UL), (713590207UL), (2430496777UL), (1198164420UL), (2644841698UL), (3654164701UL), (36283572UL), (1461695896UL), (1770331341UL), (1641501876UL), (3470919184UL), (3181021559UL), (3053795110UL), (3533531372UL), (3134337355UL), (668308383UL), (388340999UL), (3221275220UL), (1589659138UL), (294382235UL), (1447443579UL), (690177534UL), (1799726917UL), (2838977761UL), (4172949119UL), (2360858031UL), (159385920UL), (2248389027UL), (1790015671UL), (3925738275UL), (1049918544UL), (4107349511UL), (1619955951UL), (4188275966UL), (1672572975UL), (2672697497UL), (1863413666UL), (747724021UL), (4037561738UL), (1605940213UL), (445253292UL), (3362434828UL), (610898209UL), (1473244091UL), (735444769UL), (1540599852UL), (2449351720UL), (1032410949UL), (3672467167UL), (68684525UL), (1738833632UL), (3081329135UL), (519684794UL), (2291130512UL), (503032614UL), (3658059597UL), (571493931UL), (2400186105UL), (3498787788UL), (422428426UL), (3879256913UL), (1173158320UL), (4120704752UL), (298972869UL), (1718342816UL), (2541691685UL), (2490502642UL), (1686027891UL), (4223212804UL), (1812334632UL), (3717655725UL), (4238191852UL), (642431972UL), (2621896355UL), (2572404999UL), (3590094954UL), (760765206UL), (2949609717UL), (1392353032UL), (1733137169UL), (2674005018UL), (4067961151UL), (1526077846UL), (451078217UL), (2591688848UL), (12635611UL), (507045428UL), (2417951415UL), (1789383090UL), (1140183890UL), (1720695967UL), (1994318191UL), (3465605863UL), (2793804971UL), (1054433135UL), (2345087879UL), (3179939285UL), (3079297626UL), (1793223686UL), (1055357758UL), (914271617UL), (483007580UL), (306802527UL), (2754998083UL), (3179053982UL), (598442002UL), (1950227301UL), (2473418737UL), (3566888111UL), (2832258993UL), (4260365359UL), (443662829UL), (2097776414UL), (3852730296UL), (3643260763UL), (2163607277UL), (1812905006UL), (3957721904UL), (215187467UL), (2369406909UL), (1929000706UL), (2572441025UL), (3779486126UL), (810692262UL), (1337974799UL), (4030350704UL), (2159178715UL), (1127012865UL), (1026825278UL), (593628480UL), (1817383139UL), (878832429UL), (361018423UL), (203612980UL), (2102950440UL), (3407143936UL), (1912362251UL), (1475218277UL), (2827580539UL), (305467658UL), (3292706746UL), (44135525UL), (1900092336UL), (3697343089UL), (760470915UL), (587414402UL), (1419378814UL), (343303227UL), (3891626781UL), (2757016765UL), (1090707384UL), (3997074427UL), (745490961UL), (2855539022UL), (36229159UL), (1591415533UL), (3471572739UL), (3920625546UL), (2614469314UL), (213338525UL), (886212578UL), (2620301943UL), (827771411UL), (2430496777UL), (1198164420UL), (2644841698UL), (3654164701UL), (2747674190UL), (1461695896UL), (1770331341UL), (1641501876UL), (3470919184UL), (919857376UL), (3053795110UL), (3533531372UL), (3134337355UL), (668308383UL), (201138876UL), (3221275220UL), (1589659138UL), (294382235UL), (1447443579UL), (4211579707UL), (1799726917UL), (2838977761UL), (4172949119UL), (2360858031UL), (416103844UL), (2248389027UL), (1790015671UL), (3925738275UL), (1049918544UL), (3481887924UL), (1619955951UL), (4188275966UL), (1672572975UL), (2672697497UL), (564854400UL), (747724021UL), (4037561738UL), (1605940213UL), (445253292UL), (604900912UL), (610898209UL), (1473244091UL), (735444769UL), (1540599852UL), (3036173307UL), (1032410949UL), (3672467167UL), (68684525UL), (1738833632UL), (973022696UL), (519684794UL), (2291130512UL), (503032614UL), (3658059597UL), (1500301452UL), (2400186105UL), (3498787788UL), (422428426UL), (3879256913UL), (3923611748UL), (4120704752UL), (298972869UL), (1718342816UL), (2541691685UL), (2323881484UL), (1686027891UL), (4223212804UL), (1812334632UL), (3717655725UL), (2109094458UL), (642431972UL), (2621896355UL), (2572404999UL), (3590094954UL), (1837882537UL), (2949609717UL), (1392353032UL), (1733137169UL), (2674005018UL), (3252348987UL), (1526077846UL), (451078217UL), (2591688848UL), (12635611UL), (3971261781UL), (2417951415UL), (1789383090UL), (1140183890UL), (1720695967UL), (2906966040UL), (3465605863UL), (2793804971UL), (1054433135UL), (2345087879UL), (915518921UL), (3079297626UL), (1793223686UL), (1055357758UL), (914271617UL), (791633499UL), (306802527UL), (2754998083UL), (3179053982UL), (598442002UL), (324402573UL), (2473418737UL), (3566888111UL), (2832258993UL), (4260365359UL), (2168046398UL), (2097776414UL), (3852730296UL), (3643260763UL), (2163607277UL), (2595175979UL), (3957721904UL), (215187467UL), (2369406909UL), (1929000706UL), (657446369UL), (3779486126UL), (810692262UL), (1337974799UL), (4030350704UL), (1865557469UL), (1127012865UL), (1026825278UL), (593628480UL), (1817383139UL), (3414354529UL), (361018423UL), (203612980UL), (2102950440UL), (3407143936UL), (1739372987UL), (1475218277UL), (2827580539UL), (305467658UL), (3292706746UL), (825045562UL), (1900092336UL), (3697343089UL), (760470915UL), (587414402UL), (2000637694UL), (343303227UL), (3891626781UL), (2757016765UL), (1090707384UL), (4015377800UL), (745490961UL), (2855539022UL), (36229159UL), (1591415533UL), (2208656873UL), (3920625546UL), (2614469314UL), (213338525UL), (886212578UL), (2729976209UL), (827771411UL), (2430496777UL), (1198164420UL), (2644841698UL), (1922667440UL), (2747674190UL), (1461695896UL), (1770331341UL), (1641501876UL), (357535311UL), (919857376UL), (3053795110UL), (3533531372UL), (3134337355UL), (1004072597UL), (201138876UL), (3221275220UL), (1589659138UL), (294382235UL), (1148950143UL), (4211579707UL), (1799726917UL), (2838977761UL), (4172949119UL), (892664404UL), (416103844UL), (2248389027UL), (1790015671UL), (3925738275UL), (2612357890UL), (3481887924UL), (1619955951UL), (4188275966UL), (1672572975UL), (2005534713UL), (564854400UL), (747724021UL), (4037561738UL), (1605940213UL), (2620990454UL), (604900912UL), (610898209UL), (1473244091UL), (735444769UL), (3571225334UL), (3036173307UL), (1032410949UL), (3672467167UL), (68684525UL), (3327351604UL), (973022696UL), (519684794UL), (2291130512UL), (503032614UL), (3814902238UL), (1500301452UL), (2400186105UL), (3498787788UL), (422428426UL), (1756753750UL), (3923611748UL), (4120704752UL), (298972869UL), (1718342816UL), (652903081UL), (2323881484UL), (1686027891UL), (4223212804UL), (1812334632UL), (1599640566UL), (2109094458UL), (642431972UL), (2621896355UL), (2572404999UL), (1668409355UL), (1837882537UL), (2949609717UL), (1392353032UL), (1733137169UL), (3691709793UL), (3252348987UL), (1526077846UL), (451078217UL), (2591688848UL), (3353622601UL), (3971261781UL), (2417951415UL), (1789383090UL), (1140183890UL), (4113853791UL), (2906966040UL), (3465605863UL), (2793804971UL), (1054433135UL), (2195882948UL), (915518921UL), (3079297626UL), (1793223686UL), (1055357758UL), (898713552UL), (791633499UL), (306802527UL), (2754998083UL), (3179053982UL), (2469350088UL), (324402573UL), (2473418737UL), (3566888111UL), (2832258993UL), (1377718274UL), (2168046398UL), (2097776414UL), (3852730296UL), (3643260763UL), (3492388484UL), (2595175979UL), (3957721904UL), (215187467UL), (2369406909UL), (4243449339UL), (657446369UL), (3779486126UL), (810692262UL), (1337974799UL), (3960230785UL), (1865557469UL), (1127012865UL), (1026825278UL), (593628480UL), (732793312UL), (3414354529UL), (361018423UL), (203612980UL), (2102950440UL), (2401792405UL), (1739372987UL), (1475218277UL), (2827580539UL), (305467658UL), (2454275289UL), (825045562UL), (1900092336UL), (3697343089UL), (760470915UL), (2146882409UL), (2000637694UL), (343303227UL), (3891626781UL), (2757016765UL), (3997473261UL), (4015377800UL), (745490961UL), (2855539022UL), (36229159UL), (2375394427UL), (2208656873UL), (3920625546UL), (2614469314UL), (213338525UL), (2055366274UL), (2729976209UL), (827771411UL), (2430496777UL), (1198164420UL), (1789631187UL), (1922667440UL), (2747674190UL), (1461695896UL), (1770331341UL), (4284442852UL), (357535311UL), (919857376UL), (3053795110UL), (3533531372UL), (2124270060UL), (1004072597UL), (201138876UL), (3221275220UL), (1589659138UL), (1418386120UL), (1148950143UL), (4211579707UL), (1799726917UL), (2838977761UL), (3540708069UL), (892664404UL), (416103844UL), (2248389027UL), (1790015671UL), (3936883UL), (2612357890UL), (3481887924UL), (1619955951UL), (4188275966UL), (2963623483UL), (2005534713UL), (564854400UL), (747724021UL), (4037561738UL), (3431155922UL), (2620990454UL), (604900912UL), (610898209UL), (1473244091UL), (3880001339UL), (2879060316UL), (3300897679UL), (3960972039UL), (3201086624UL), (3814462934UL), (3426650044UL), (1930881632UL), (1981178788UL), (2956279691UL), (4272406256UL), (372705521UL), (1359389771UL), (1590302979UL), (3940206208UL), (3817999127UL), (2527835456UL), (2739078164UL), (716997849UL), (3235607043UL), (2550297745UL), (3688700200UL), (354502605UL), (2285793656UL), (2339138034UL), (3912354142UL), (2262255668UL), (469322622UL), (1319943359UL), (1916101235UL), (200441823UL), (509436982UL), (2160284593UL), (1687919695UL), (4153615582UL), (495735041UL), (3694469424UL), (2086893117UL), (4223008799UL), (105344742UL), (1698033424UL), (1149223145UL), (4183918790UL), (4176151950UL), (415739351UL), (817762972UL), (3768072560UL), (1931430949UL), (2698979439UL), (3481477932UL), (1994322914UL), (4078299950UL), (1268233995UL), (3254069145UL), (91029129UL), (498234704UL), (1636613942UL), (3710087092UL), (3876816560UL), (3510446387UL), (3870169008UL), (1370156410UL), (2442498047UL), (2324396523UL), (1258730334UL), (621954739UL), (1053015373UL), (491820717UL), (3386515432UL), (2203703266UL), (120167176UL), (2383669740UL), (1038666440UL), (2927342870UL), (3583197824UL), (1236241846UL), (2474675929UL), (679052891UL), (2451259584UL), (2177706146UL), (606842882UL), (3546980104UL), (2289281509UL), (353873434UL), (2041926837UL), (1238346748UL), (2729109726UL), (2843938395UL), (2938124210UL), (2554443866UL), (1494477920UL), (693378319UL), (2020963566UL), (2000385949UL), (3744098787UL), (650307220UL), (2631327075UL), (1529128757UL), (595871428UL), (3206666562UL), (458062987UL), (875238192UL), (3729317374UL), (1368843921UL), (3478430230UL), (3234384578UL), (3232435428UL), (321359326UL), (994274524UL), (361184397UL), (4285497594UL), (915263578UL), (1486882838UL), (9988613UL), (829077170UL), (677216046UL), (4141828204UL), (165804609UL), (1086678519UL), (2933434608UL), (1351662802UL), (2640085040UL), (2611502932UL), (2033698714UL), (2008873254UL), (3995557835UL), (1020873906UL), (67873555UL), (2230337823UL), (1263800417UL), (1148712155UL), (3985159589UL), (2979503513UL), (2854714997UL), (1539343345UL), (2751484352UL), (1569100732UL), (2020758949UL), (2126757134UL), (3426641899UL), (2808587825UL), (1953320148UL), (1096398464UL), (1502907172UL), (3751230087UL), (765557661UL), (765290990UL), (3056075500UL), (2040620632UL), (422573751UL), (3613558930UL), (1741145769UL), (273531216UL), (837238736UL), (494297893UL), (2903251124UL), (1636782182UL), (4256592784UL), (3652746656UL), (4258393217UL)}, {(2657510202UL), (270297201UL), (2970166904UL), (3151626326UL), (973127447UL), (1523852613UL), (598650578UL), (10289043UL), (1138773500UL), (1379558769UL), (2202575480UL), (1622690708UL), (181345079UL), (228706650UL), (2807760507UL), (3061024281UL), (2310359315UL), (3094465578UL), (4062753882UL), (2744510393UL), (3844622451UL), (1759718963UL), (2393602744UL), (977540509UL), (870449791UL), (1484134272UL), (2838962253UL), (3079492430UL), (2617141201UL), (3744868057UL), (994295425UL), (1302594555UL), (277777192UL), (1793039043UL), (1620482692UL), (2518563014UL), (1163760339UL), (2709515777UL), (4220588138UL), (531143270UL), (2528377633UL), (931694828UL), (1472659070UL), (900489303UL), (3538137811UL), (3849822545UL), (1304182427UL), (2423451948UL), (587259647UL), (296795227UL), (3843393378UL), (100570026UL), (1824916038UL), (3155192628UL), (1205830295UL), (2205840913UL), (2598785234UL), (2138099222UL), (1585588098UL), (1304106911UL), (2443465671UL), (3007665864UL), (3350433156UL), (3623458138UL), (629407548UL), (3209244941UL), (2102270358UL), (952701496UL), (2715374730UL), (2142960491UL), (2566649458UL), (2386659994UL), (4201648072UL), (367516884UL), (211986877UL), (3970312395UL), (4153651951UL), (3794120671UL), (614826776UL), (769672874UL), (2218713182UL), (236114529UL), (1614697510UL), (2420862368UL), (3471485219UL), (3080341429UL), (2394724619UL), (3585194114UL), (1394678495UL), (2137969611UL), (3955498999UL), (2765569351UL), (3084915757UL), (765232390UL), (1406483345UL), (2796499268UL), (2491128017UL), (1052428931UL), (1713430644UL), (3921576513UL), (3753414774UL), (973530327UL), (2545412294UL), (1841110931UL), (1174406073UL), (1104865218UL), (1586606252UL), (2612244473UL), (1407875673UL), (1823397519UL), (2613642581UL), (3163449384UL), (3129975397UL), (2059184961UL), (818092118UL), (3182607992UL), (1658516909UL), (2467681581UL), (1065789733UL), (799857247UL), (2492902195UL), (168866110UL), (2251316716UL), (1607684829UL), (2347941418UL), (2382781983UL), (3298500129UL), (3609200925UL), (3060374324UL), (2602420483UL), (2357812057UL), (3739699403UL), (3260652552UL), (205015857UL), (1936033273UL), (3955997259UL), (821264237UL), (1882720491UL), (159294165UL), (3197657094UL), (528058988UL), (2768830342UL), (805087358UL), (896645931UL), (1360375456UL), (3417488932UL), (3863200799UL), (4033907887UL), (983658874UL), (1828706965UL), (875027318UL), (1310362653UL), (3711487613UL), (4148261033UL), (3145162047UL), (485182003UL), (2633647498UL), (1369395018UL), (4163384029UL), (1827719274UL), (270658892UL), (2657510202UL), (270297201UL), (2970166904UL), (3151626326UL), (499420828UL), (1523852613UL), (598650578UL), (10289043UL), (1138773500UL), (640170086UL), (2202575480UL), (1622690708UL), (181345079UL), (228706650UL), (3957853780UL), (3061024281UL), (2310359315UL), (3094465578UL), (4062753882UL), (2049506087UL), (3844622451UL), (1759718963UL), (2393602744UL), (977540509UL), (2346891936UL), (1484134272UL), (2838962253UL), (3079492430UL), (2617141201UL), (2112540708UL), (994295425UL), (1302594555UL), (277777192UL), (1793039043UL), (981072592UL), (2518563014UL), (1163760339UL), (2709515777UL), (4220588138UL), (1992965594UL), (2528377633UL), (931694828UL), (1472659070UL), (900489303UL), (32461040UL), (3849822545UL), (1304182427UL), (2423451948UL), (587259647UL), (3728056788UL), (3843393378UL), (100570026UL), (1824916038UL), (3155192628UL), (1194916233UL), (2205840913UL), (2598785234UL), (2138099222UL), (1585588098UL), (2944318376UL), (2443465671UL), (3007665864UL), (3350433156UL), (3623458138UL), (1413669939UL), (3209244941UL), (2102270358UL), (952701496UL), (2715374730UL), (826676012UL), (2566649458UL), (2386659994UL), (4201648072UL), (367516884UL), (4272143576UL), (3970312395UL), (4153651951UL), (3794120671UL), (614826776UL), (4106382849UL), (2218713182UL), (236114529UL), (1614697510UL), (2420862368UL), (138091237UL), (3080341429UL), (2394724619UL), (3585194114UL), (1394678495UL), (2113895281UL), (3955498999UL), (2765569351UL), (3084915757UL), (765232390UL), (2247301699UL), (2796499268UL), (2491128017UL), (1052428931UL), (1713430644UL), (1076867271UL), (3753414774UL), (973530327UL), (2545412294UL), (1841110931UL), (3427639042UL), (1104865218UL), (1586606252UL), (2612244473UL), (1407875673UL), (2159805028UL), (2613642581UL), (3163449384UL), (3129975397UL), (2059184961UL), (1251595655UL), (3182607992UL), (1658516909UL), (2467681581UL), (1065789733UL), (524065102UL), (2492902195UL), (168866110UL), (2251316716UL), (1607684829UL), (877205873UL), (2382781983UL), (3298500129UL), (3609200925UL), (3060374324UL), (1983477493UL), (2357812057UL), (3739699403UL), (3260652552UL), (205015857UL), (3578808491UL), (3955997259UL), (821264237UL), (1882720491UL), (159294165UL), (3639531297UL), (528058988UL), (2768830342UL), (805087358UL), (896645931UL), (2309781073UL), (3417488932UL), (3863200799UL), (4033907887UL), (983658874UL), (3756437847UL), (875027318UL), (1310362653UL), (3711487613UL), (4148261033UL), (3264363953UL), (485182003UL), (2633647498UL), (1369395018UL), (4163384029UL), (184614728UL), (270658892UL), (2657510202UL), (270297201UL), (2970166904UL), (884907665UL), (499420828UL), (1523852613UL), (598650578UL), (10289043UL), (2023902217UL), (640170086UL), (2202575480UL), (1622690708UL), (181345079UL), (1358722197UL), (3957853780UL), (3061024281UL), (2310359315UL), (3094465578UL), (4156960892UL), (2049506087UL), (3844622451UL), (1759718963UL), (2393602744UL), (1018272187UL), (2346891936UL), (1484134272UL), (2838962253UL), (3079492430UL), (663361761UL), (2112540708UL), (994295425UL), (1302594555UL), (277777192UL), (4201292427UL), (981072592UL), (2518563014UL), (1163760339UL), (2709515777UL), (3301905324UL), (1992965594UL), (2528377633UL), (931694828UL), (1472659070UL), (3170286187UL), (32461040UL), (3849822545UL), (1304182427UL), (2423451948UL), (166213287UL), (3728056788UL), (3843393378UL), (100570026UL), (1824916038UL), (1534589402UL), (1194916233UL), (2205840913UL), (2598785234UL), (2138099222UL), (767439709UL), (2944318376UL), (2443465671UL), (3007665864UL), (3350433156UL), (257274072UL), (1413669939UL), (3209244941UL), (2102270358UL), (952701496UL), (893224047UL), (826676012UL), (2566649458UL), (2386659994UL), (4201648072UL), (1336000731UL), (4272143576UL), (3970312395UL), (4153651951UL), (3794120671UL), (2381517352UL), (4106382849UL), (2218713182UL), (236114529UL), (1614697510UL), (2427291612UL), (138091237UL), (3080341429UL), (2394724619UL), (3585194114UL), (1339840651UL), (2113895281UL), (3955498999UL), (2765569351UL), (3084915757UL), (1920073265UL), (2247301699UL), (2796499268UL), (2491128017UL), (1052428931UL), (1720704700UL), (1076867271UL), (3753414774UL), (973530327UL), (2545412294UL), (655938239UL), (3427639042UL), (1104865218UL), (1586606252UL), (2612244473UL), (748629647UL), (2159805028UL), (2613642581UL), (3163449384UL), (3129975397UL), (1868740512UL), (1251595655UL), (3182607992UL), (1658516909UL), (2467681581UL), (3092135795UL), (524065102UL), (2492902195UL), (168866110UL), (2251316716UL), (229376275UL), (877205873UL), (2382781983UL), (3298500129UL), (3609200925UL), (1270454086UL), (1983477493UL), (2357812057UL), (3739699403UL), (3260652552UL), (3976376418UL), (3578808491UL), (3955997259UL), (821264237UL), (1882720491UL), (2211365699UL), (3639531297UL), (528058988UL), (2768830342UL), (805087358UL), (1351870678UL), (2309781073UL), (3417488932UL), (3863200799UL), (4033907887UL), (2317721807UL), (3756437847UL), (875027318UL), (1310362653UL), (3711487613UL), (1929459086UL), (3264363953UL), (485182003UL), (2633647498UL), (1369395018UL), (2141675718UL), (184614728UL), (270658892UL), (2657510202UL), (270297201UL), (3337954073UL), (884907665UL), (499420828UL), (1523852613UL), (598650578UL), (3874207188UL), (2023902217UL), (640170086UL), (2202575480UL), (1622690708UL), (2020255059UL), (1358722197UL), (3957853780UL), (3061024281UL), (2310359315UL), (753738868UL), (4156960892UL), (2049506087UL), (3844622451UL), (1759718963UL), (1672276116UL), (1018272187UL), (2346891936UL), (1484134272UL), (2838962253UL), (1680679979UL), (663361761UL), (2112540708UL), (994295425UL), (1302594555UL), (1941500850UL), (4201292427UL), (981072592UL), (2518563014UL), (1163760339UL), (184357645UL), (3301905324UL), (1992965594UL), (2528377633UL), (931694828UL), (3462653134UL), (3170286187UL), (32461040UL), (3849822545UL), (1304182427UL), (396808784UL), (166213287UL), (3728056788UL), (3843393378UL), (100570026UL), (876691173UL), (1534589402UL), (1194916233UL), (2205840913UL), (2598785234UL), (4286653520UL), (767439709UL), (2944318376UL), (2443465671UL), (3007665864UL), (2793587144UL), (257274072UL), (1413669939UL), (3209244941UL), (2102270358UL), (2792966616UL), (893224047UL), (826676012UL), (2566649458UL), (2386659994UL), (798757973UL), (1336000731UL), (4272143576UL), (3970312395UL), (4153651951UL), (2930383268UL), (2381517352UL), (4106382849UL), (2218713182UL), (236114529UL), (1936008889UL), (2427291612UL), (138091237UL), (3080341429UL), (2394724619UL), (4157586029UL), (1339840651UL), (2113895281UL), (3955498999UL), (2765569351UL), (2243544114UL), (1920073265UL), (2247301699UL), (2796499268UL), (2491128017UL), (3372810009UL), (1720704700UL), (1076867271UL), (3753414774UL), (973530327UL), (484392041UL), (655938239UL), (3427639042UL), (1104865218UL), (1586606252UL), (1373046326UL), (748629647UL), (2159805028UL), (2613642581UL), (3163449384UL), (1558595520UL), (1868740512UL), (1251595655UL), (3182607992UL), (1658516909UL), (3503432306UL), (3092135795UL), (524065102UL), (2492902195UL), (168866110UL), (4106973392UL), (229376275UL), (877205873UL), (2382781983UL), (3298500129UL), (2366096961UL), (1270454086UL), (1983477493UL), (2357812057UL), (3739699403UL), (4223323197UL), (3976376418UL), (3578808491UL), (3955997259UL), (821264237UL), (1581729952UL), (2211365699UL), (3639531297UL), (528058988UL), (2768830342UL), (3946263978UL), (1351870678UL), (2309781073UL), (3417488932UL), (3863200799UL), (3948072426UL), (2317721807UL), (3756437847UL), (875027318UL), (1310362653UL), (3439391360UL), (1929459086UL), (3264363953UL), (485182003UL), (2633647498UL), (3576868480UL), (2527748673UL), (3116247125UL), (4020801612UL), (2594734840UL), (3308177137UL), (665011257UL), (40118275UL), (3584569179UL), (3399729283UL), (3867174947UL), (658488234UL), (1099195903UL), (2274511402UL), (1872529118UL), (2518961094UL), (2633598693UL), (4160728307UL), (449442630UL), (164837956UL), (1010805767UL), (605336924UL), (1178031445UL), (3949359502UL), (2585151633UL), (611885521UL), (293204651UL), (3389557188UL), (1172294301UL), (2503819061UL), (659842653UL), (504992348UL), (3762165683UL), (1799777932UL), (4161843209UL), (1924622448UL), (1006263939UL), (115233249UL), (2775142171UL), (3228632586UL), (885407023UL), (2514866293UL), (3615088636UL), (2488824172UL), (2631364137UL), (1454226414UL), (3888177876UL), (70646265UL), (2291458600UL), (2370783730UL), (1566625834UL), (3652033806UL), (4136806683UL), (2819973124UL), (3207365429UL), (989185345UL), (3343822313UL), (2580472874UL), (4077285847UL), (4032963783UL), (2883518039UL), (2253593637UL), (904631114UL), (2654790756UL), (2967911632UL), (2131672564UL), (1594073414UL), (2370718497UL), (3769371275UL), (1547951748UL), (2473303924UL), (651625138UL), (2159175883UL), (4062995539UL), (696224922UL), (3388626509UL), (100118553UL), (770731124UL), (2149458689UL), (3223175313UL), (3524052514UL), (2651241522UL), (78236806UL), (3212708723UL), (1045780878UL), (2257575290UL), (3709360831UL), (966829465UL), (61269250UL), (405063245UL), (331731998UL), (2472078870UL), (1138237364UL), (1135091387UL), (3245001409UL), (3817992705UL), (1738939574UL), (1397617581UL), (2896546651UL), (4207083421UL), (3802162100UL), (391930524UL), (1326819828UL), (85308067UL), (3235336831UL), (686989692UL), (1947564282UL), (842881662UL), (2887279866UL), (3850666935UL), (2001895525UL), (2673649961UL), (2106555006UL), (1762053005UL), (2334552700UL), (26094213UL), (1184502058UL), (2048598709UL), (4039640450UL), (1439363714UL), (1022688817UL), (1053169108UL), (170896272UL), (444231850UL), (1500204748UL), (1077470703UL), (1630597179UL), (1382588806UL), (138805391UL), (1636536505UL), (3118018426UL), (3461152216UL), (2486547351UL), (2045361316UL), (2976067436UL), (468876399UL), (1407419455UL), (3226137264UL), (414206328UL), (1011039713UL), (3537947031UL), (2359787831UL), (258556532UL), (3615987029UL), (3372097337UL), (3586352388UL), (1056198830UL), (1852291192UL), (3888893481UL), (746156045UL), (4203877603UL), (297851145UL), (2615507398UL), (1141098641UL), (1881412583UL), (3014341741UL), (2125186797UL), (229307235UL), (3476606674UL), (3553854689UL)}, {(3768542219UL), (2777948797UL), (3328832678UL), (3488502819UL), (2708053041UL), (2217907094UL), (2133505056UL), (2218961277UL), (2148551748UL), (1420045625UL), (1709182366UL), (1816409641UL), (3791695288UL), (4207813971UL), (22588497UL), (2211317602UL), (616238454UL), (2394270012UL), (3212896041UL), (213408768UL), (2199328374UL), (3188624050UL), (811443809UL), (2818548979UL), (3150758902UL), (2022548260UL), (2462701924UL), (3793704672UL), (2358080321UL), (483288372UL), (450033142UL), (772942770UL), (2224873625UL), (241543410UL), (312552314UL), (1268067149UL), (915918620UL), (3906238422UL), (132545832UL), (3486041298UL), (2414090506UL), (3798383292UL), (2257004699UL), (130309284UL), (1158673651UL), (152325583UL), (3499865580UL), (4094273597UL), (1029041593UL), (93538481UL), (3963199522UL), (4215066819UL), (2851084137UL), (950351173UL), (2758084052UL), (3408506640UL), (2468905351UL), (3982226741UL), (3591899344UL), (2972879639UL), (3321078070UL), (252381865UL), (409397320UL), (741653003UL), (1936712854UL), (1198684021UL), (922916691UL), (10413506UL), (3546896248UL), (1704703870UL), (1479762464UL), (104399432UL), (4144557684UL), (68239720UL), (2666028745UL), (362625839UL), (2591539911UL), (2837165752UL), (2180226515UL), (4076543943UL), (2956460273UL), (312410753UL), (2566731139UL), (2532653524UL), (2399030172UL), (207904356UL), (354574195UL), (485696336UL), (3816686234UL), (3016971115UL), (4272692603UL), (2352732136UL), (33493163UL), (780255811UL), (4092242980UL), (4121521600UL), (2119254314UL), (42767673UL), (1081488778UL), (2757446871UL), (2267513620UL), (3472164720UL), (2750308207UL), (1707164045UL), (3125591821UL), (3236687597UL), (299194858UL), (537384087UL), (1695155491UL), (2078250102UL), (1705861659UL), (2416322096UL), (1692335914UL), (1178915980UL), (3405431297UL), (4059323309UL), (2014660182UL), (3847682866UL), (4037583683UL), (2629253995UL), (867809161UL), (2167953720UL), (2290558548UL), (417635396UL), (53496289UL), (1890906570UL), (2842247580UL), (807266805UL), (1226139132UL), (2067929784UL), (1697038549UL), (3312131466UL), (1234311530UL), (3199840935UL), (4185078776UL), (1807030355UL), (215385887UL), (845421530UL), (1350380353UL), (4209181096UL), (2576197887UL), (1275262872UL), (2806513944UL), (2718623701UL), (2779287384UL), (71403197UL), (219220133UL), (2181111477UL), (2000396844UL), (3595837555UL), (1232425455UL), (2630647391UL), (3280867676UL), (2622740782UL), (1578938469UL), (3624564545UL), (992324522UL), (3056113148UL), (3473635768UL), (3664935418UL), (1786902552UL), (3768542219UL), (2777948797UL), (3328832678UL), (3488502819UL), (2530862473UL), (2217907094UL), (2133505056UL), (2218961277UL), (2148551748UL), (4050672856UL), (1709182366UL), (1816409641UL), (3791695288UL), (4207813971UL), (4175126713UL), (2211317602UL), (616238454UL), (2394270012UL), (3212896041UL), (732700649UL), (2199328374UL), (3188624050UL), (811443809UL), (2818548979UL), (972036137UL), (2022548260UL), (2462701924UL), (3793704672UL), (2358080321UL), (1200725173UL), (450033142UL), (772942770UL), (2224873625UL), (241543410UL), (1907109304UL), (1268067149UL), (915918620UL), (3906238422UL), (132545832UL), (301668366UL), (2414090506UL), (3798383292UL), (2257004699UL), (130309284UL), (1228520287UL), (152325583UL), (3499865580UL), (4094273597UL), (1029041593UL), (3267460249UL), (3963199522UL), (4215066819UL), (2851084137UL), (950351173UL), (47361585UL), (3408506640UL), (2468905351UL), (3982226741UL), (3591899344UL), (1878226915UL), (3321078070UL), (252381865UL), (409397320UL), (741653003UL), (1716437506UL), (1198684021UL), (922916691UL), (10413506UL), (3546896248UL), (1591998796UL), (1479762464UL), (104399432UL), (4144557684UL), (68239720UL), (3810955599UL), (362625839UL), (2591539911UL), (2837165752UL), (2180226515UL), (3908378015UL), (2956460273UL), (312410753UL), (2566731139UL), (2532653524UL), (687490649UL), (207904356UL), (354574195UL), (485696336UL), (3816686234UL), (378445403UL), (4272692603UL), (2352732136UL), (33493163UL), (780255811UL), (1303281526UL), (4121521600UL), (2119254314UL), (42767673UL), (1081488778UL), (1734311274UL), (2267513620UL), (3472164720UL), (2750308207UL), (1707164045UL), (4212588163UL), (3236687597UL), (299194858UL), (537384087UL), (1695155491UL), (2250704950UL), (1705861659UL), (2416322096UL), (1692335914UL), (1178915980UL), (677982197UL), (4059323309UL), (2014660182UL), (3847682866UL), (4037583683UL), (1765435945UL), (867809161UL), (2167953720UL), (2290558548UL), (417635396UL), (2125103002UL), (1890906570UL), (2842247580UL), (807266805UL), (1226139132UL), (2056644398UL), (1697038549UL), (3312131466UL), (1234311530UL), (3199840935UL), (3063718636UL), (1807030355UL), (215385887UL), (845421530UL), (1350380353UL), (3610667273UL), (2576197887UL), (1275262872UL), (2806513944UL), (2718623701UL), (2492912955UL), (71403197UL), (219220133UL), (2181111477UL), (2000396844UL), (3465351710UL), (1232425455UL), (2630647391UL), (3280867676UL), (2622740782UL), (1331873639UL), (3624564545UL), (992324522UL), (3056113148UL), (3473635768UL), (782257020UL), (1786902552UL), (3768542219UL), (2777948797UL), (3328832678UL), (856888454UL), (2530862473UL), (2217907094UL), (2133505056UL), (2218961277UL), (3752437534UL), (4050672856UL), (1709182366UL), (1816409641UL), (3791695288UL), (1581813910UL), (4175126713UL), (2211317602UL), (616238454UL), (2394270012UL), (1796414157UL), (732700649UL), (2199328374UL), (3188624050UL), (811443809UL), (4225173324UL), (972036137UL), (2022548260UL), (2462701924UL), (3793704672UL), (1410793611UL), (1200725173UL), (450033142UL), (772942770UL), (2224873625UL), (3889840648UL), (1907109304UL), (1268067149UL), (915918620UL), (3906238422UL), (1249098244UL), (301668366UL), (2414090506UL), (3798383292UL), (2257004699UL), (1620796656UL), (1228520287UL), (152325583UL), (3499865580UL), (4094273597UL), (82853050UL), (3267460249UL), (3963199522UL), (4215066819UL), (2851084137UL), (1212493334UL), (47361585UL), (3408506640UL), (2468905351UL), (3982226741UL), (3195419905UL), (1878226915UL), (3321078070UL), (252381865UL), (409397320UL), (1584154733UL), (1716437506UL), (1198684021UL), (922916691UL), (10413506UL), (1734068880UL), (1591998796UL), (1479762464UL), (104399432UL), (4144557684UL), (1973878859UL), (3810955599UL), (362625839UL), (2591539911UL), (2837165752UL), (1727282404UL), (3908378015UL), (2956460273UL), (312410753UL), (2566731139UL), (3656295687UL), (687490649UL), (207904356UL), (354574195UL), (485696336UL), (355953909UL), (378445403UL), (4272692603UL), (2352732136UL), (33493163UL), (3784169684UL), (1303281526UL), (4121521600UL), (2119254314UL), (42767673UL), (2331527847UL), (1734311274UL), (2267513620UL), (3472164720UL), (2750308207UL), (820692528UL), (4212588163UL), (3236687597UL), (299194858UL), (537384087UL), (781151234UL), (2250704950UL), (1705861659UL), (2416322096UL), (1692335914UL), (4288008793UL), (677982197UL), (4059323309UL), (2014660182UL), (3847682866UL), (3328850880UL), (1765435945UL), (867809161UL), (2167953720UL), (2290558548UL), (542850707UL), (2125103002UL), (1890906570UL), (2842247580UL), (807266805UL), (3803006390UL), (2056644398UL), (1697038549UL), (3312131466UL), (1234311530UL), (809106036UL), (3063718636UL), (1807030355UL), (215385887UL), (845421530UL), (654189622UL), (3610667273UL), (2576197887UL), (1275262872UL), (2806513944UL), (1517875462UL), (2492912955UL), (71403197UL), (219220133UL), (2181111477UL), (3826277490UL), (3465351710UL), (1232425455UL), (2630647391UL), (3280867676UL), (3343597872UL), (1331873639UL), (3624564545UL), (992324522UL), (3056113148UL), (3725661598UL), (782257020UL), (1786902552UL), (3768542219UL), (2777948797UL), (3392298403UL), (856888454UL), (2530862473UL), (2217907094UL), (2133505056UL), (4160889036UL), (3752437534UL), (4050672856UL), (1709182366UL), (1816409641UL), (1282922706UL), (1581813910UL), (4175126713UL), (2211317602UL), (616238454UL), (3806252779UL), (1796414157UL), (732700649UL), (2199328374UL), (3188624050UL), (983474330UL), (4225173324UL), (972036137UL), (2022548260UL), (2462701924UL), (880446667UL), (1410793611UL), (1200725173UL), (450033142UL), (772942770UL), (3179870546UL), (3889840648UL), (1907109304UL), (1268067149UL), (915918620UL), (4261932110UL), (1249098244UL), (301668366UL), (2414090506UL), (3798383292UL), (471794009UL), (1620796656UL), (1228520287UL), (152325583UL), (3499865580UL), (1275109063UL), (82853050UL), (3267460249UL), (3963199522UL), (4215066819UL), (4209882674UL), (1212493334UL), (47361585UL), (3408506640UL), (2468905351UL), (1324785625UL), (3195419905UL), (1878226915UL), (3321078070UL), (252381865UL), (4259927884UL), (1584154733UL), (1716437506UL), (1198684021UL), (922916691UL), (1800164165UL), (1734068880UL), (1591998796UL), (1479762464UL), (104399432UL), (2774114308UL), (1973878859UL), (3810955599UL), (362625839UL), (2591539911UL), (2126614872UL), (1727282404UL), (3908378015UL), (2956460273UL), (312410753UL), (4098052715UL), (3656295687UL), (687490649UL), (207904356UL), (354574195UL), (937379582UL), (355953909UL), (378445403UL), (4272692603UL), (2352732136UL), (2694800574UL), (3784169684UL), (1303281526UL), (4121521600UL), (2119254314UL), (1741415022UL), (2331527847UL), (1734311274UL), (2267513620UL), (3472164720UL), (480821513UL), (820692528UL), (4212588163UL), (3236687597UL), (299194858UL), (1128762168UL), (781151234UL), (2250704950UL), (1705861659UL), (2416322096UL), (160918735UL), (4288008793UL), (677982197UL), (4059323309UL), (2014660182UL), (3354205317UL), (3328850880UL), (1765435945UL), (867809161UL), (2167953720UL), (3363861382UL), (542850707UL), (2125103002UL), (1890906570UL), (2842247580UL), (2459935488UL), (3803006390UL), (2056644398UL), (1697038549UL), (3312131466UL), (2378675900UL), (809106036UL), (3063718636UL), (1807030355UL), (215385887UL), (3528413525UL), (654189622UL), (3610667273UL), (2576197887UL), (1275262872UL), (993221887UL), (1517875462UL), (2492912955UL), (71403197UL), (219220133UL), (1805256638UL), (3826277490UL), (3465351710UL), (1232425455UL), (2630647391UL), (3718538519UL), (3343597872UL), (1331873639UL), (3624564545UL), (992324522UL), (3490576382UL), (2532191937UL), (1108692984UL), (802110050UL), (3984561242UL), (1973015939UL), (1351080551UL), (2382044123UL), (2393286227UL), (860228704UL), (179528099UL), (3569709850UL), (233527199UL), (3657599850UL), (3269634908UL), (3278075383UL), (4037814788UL), (952837871UL), (2050210570UL), (2376157484UL), (2566048929UL), (4200278597UL), (123440514UL), (573557299UL), (1585379806UL), (4012659271UL), (4000306490UL), (2508478465UL), (970078629UL), (4064973573UL), (645149301UL), (109544347UL), (647594029UL), (2097163688UL), (1515080116UL), (2142799649UL), (2519702653UL), (3122920796UL), (1952249156UL), (3932382760UL), (2155292687UL), (2517875978UL), (249059416UL), (4282787227UL), (2595461065UL), (1004349415UL), (2151451255UL), (2510715277UL), (3004500356UL), (3410567758UL), (344538405UL), (1946747709UL), (470298928UL), (1033671146UL), (4207801290UL), (1411375630UL), (3419808553UL), (3218285984UL), (3584735265UL), (811222695UL), (3898833227UL), (3535298390UL), (3764741581UL), (3927026520UL), (2850086968UL), (2818485449UL), (1963038474UL), (1871366998UL), (1900570117UL), (997663534UL), (746627295UL), (1827737271UL), (3814054979UL), (728285698UL), (1696496343UL), (1696888597UL), (1010837663UL), (1756050352UL), (785994134UL), (1436861536UL), (1949153732UL), (2360018842UL), (1703393654UL), (2248338006UL), (3884572674UL), (789998735UL), (1155994673UL), (2022469457UL), (223162974UL), (309571006UL), (725482797UL), (3909032036UL), (2531190541UL), (373676789UL), (1061107200UL), (4231921550UL), (558635876UL), (2773807977UL), (1860218585UL), (1150041015UL), (2252812038UL), (2413330952UL), (191909567UL), (3518171813UL), (3513416318UL), (2679253717UL), (3850755687UL), (1564154710UL), (324714884UL), (1600953447UL), (4095583159UL), (1796641692UL), (2518000547UL), (3621187982UL), (501166402UL), (2112782420UL), (1704276185UL), (2249859782UL), (3754293422UL), (1942321901UL), (1851019104UL), (240158224UL), (3181132144UL), (2281632719UL), (808029657UL), (1721710011UL), (2287207169UL), (3044484177UL), (2363339534UL), (805273402UL), (3696016147UL), (3549191229UL), (3353631259UL), (2946802391UL), (383414270UL), (300735554UL), (471515206UL), (1907815837UL), (1576327662UL), (3825043525UL), (2817119733UL), (1973847200UL), (1398317206UL), (2221853087UL), (501440864UL), (642467132UL), (494410179UL), (1191241925UL), (3549838846UL), (3621239619UL), (2640266286UL), (4140123024UL), (315957218UL), (3696758268UL), (2502777875UL), (2150738616UL), (1570099119UL), (2598276767UL), (3585886712UL), (230047417UL)}, {(220882755UL), (630187688UL), (2600079656UL), (3103815531UL), (4259457395UL), (306940008UL), (760977254UL), (558299017UL), (73879495UL), (2342545344UL), (572800511UL), (3922797738UL), (3754011306UL), (698257357UL), (1274843132UL), (1455757442UL), (1014649591UL), (3205662508UL), (2997738251UL), (613949432UL), (2267018388UL), (2925762681UL), (3702061213UL), (299380602UL), (1711070497UL), (4140032336UL), (4134705925UL), (2836703879UL), (3776863395UL), (507121465UL), (3480792188UL), (1862887216UL), (247780795UL), (2528677869UL), (2881446422UL), (271754977UL), (833498724UL), (1489102731UL), (3636156177UL), (1839744487UL), (2011839858UL), (2353400914UL), (510437606UL), (561141583UL), (2979592314UL), (3844268262UL), (3011027242UL), (3113817193UL), (3491178377UL), (1448376742UL), (2478683391UL), (2597550150UL), (699310968UL), (1979488062UL), (277591964UL), (1312002175UL), (168047351UL), (1826859926UL), (2030631355UL), (3097860388UL), (1950614326UL), (4070838751UL), (4454933UL), (1890661188UL), (3929835227UL), (1008498572UL), (3301557438UL), (3906313590UL), (1240635175UL), (280935563UL), (113509402UL), (226900299UL), (1246395851UL), (1220916742UL), (2651515540UL), (2058590162UL), (1983114332UL), (2040467861UL), (780818345UL), (544262576UL), (2826997265UL), (349354812UL), (2360120613UL), (1181324247UL), (2380347783UL), (3938729706UL), (1610628643UL), (2008635822UL), (2937909233UL), (1583978206UL), (3589167073UL), (1942470196UL), (402177406UL), (2636510744UL), (3709747478UL), (2428569572UL), (4071828137UL), (2880315633UL), (1433558231UL), (1137076031UL), (3833202201UL), (2378168250UL), (1412413704UL), (3349323744UL), (1740721660UL), (3155643175UL), (2580327273UL), (3020661883UL), (1658910832UL), (2065649368UL), (3277572880UL), (3795585437UL), (1266185861UL), (2925935368UL), (4147230645UL), (203577834UL), (2230529041UL), (2864778434UL), (270386174UL), (2867122465UL), (2676624544UL), (2035972330UL), (500973884UL), (2983028740UL), (117131866UL), (1456450936UL), (429171245UL), (3921563262UL), (342800398UL), (255116920UL), (1219580025UL), (1549741331UL), (3832317567UL), (3750096895UL), (4036554472UL), (4099775516UL), (1451717480UL), (149159438UL), (3593827664UL), (1406572509UL), (27774796UL), (1138983585UL), (1577536190UL), (978350835UL), (2704344602UL), (95204061UL), (1507155668UL), (304760810UL), (1981315657UL), (3139306913UL), (3908131532UL), (3767856445UL), (3851422551UL), (2018732047UL), (2474676116UL), (2745551516UL), (1585868430UL), (1125303733UL), (3147584753UL), (2368921260UL), (1524991519UL), (220882755UL), (630187688UL), (2600079656UL), (3103815531UL), (2671841243UL), (306940008UL), (760977254UL), (558299017UL), (73879495UL), (1196617651UL), (572800511UL), (3922797738UL), (3754011306UL), (698257357UL), (1982654891UL), (1455757442UL), (1014649591UL), (3205662508UL), (2997738251UL), (3769735713UL), (2267018388UL), (2925762681UL), (3702061213UL), (299380602UL), (2224634157UL), (4140032336UL), (4134705925UL), (2836703879UL), (3776863395UL), (1027030708UL), (3480792188UL), (1862887216UL), (247780795UL), (2528677869UL), (300214141UL), (271754977UL), (833498724UL), (1489102731UL), (3636156177UL), (1683033001UL), (2011839858UL), (2353400914UL), (510437606UL), (561141583UL), (2832813585UL), (3844268262UL), (3011027242UL), (3113817193UL), (3491178377UL), (316500941UL), (2478683391UL), (2597550150UL), (699310968UL), (1979488062UL), (4092049617UL), (1312002175UL), (168047351UL), (1826859926UL), (2030631355UL), (2797906491UL), (1950614326UL), (4070838751UL), (4454933UL), (1890661188UL), (2602196847UL), (1008498572UL), (3301557438UL), (3906313590UL), (1240635175UL), (946440664UL), (113509402UL), (226900299UL), (1246395851UL), (1220916742UL), (1314772486UL), (2058590162UL), (1983114332UL), (2040467861UL), (780818345UL), (3064382079UL), (2826997265UL), (349354812UL), (2360120613UL), (1181324247UL), (3434653713UL), (3938729706UL), (1610628643UL), (2008635822UL), (2937909233UL), (2815835447UL), (3589167073UL), (1942470196UL), (402177406UL), (2636510744UL), (865459039UL), (2428569572UL), (4071828137UL), (2880315633UL), (1433558231UL), (1582478959UL), (3833202201UL), (2378168250UL), (1412413704UL), (3349323744UL), (3686787615UL), (3155643175UL), (2580327273UL), (3020661883UL), (1658910832UL), (3152644489UL), (3277572880UL), (3795585437UL), (1266185861UL), (2925935368UL), (3101079227UL), (203577834UL), (2230529041UL), (2864778434UL), (270386174UL), (3024925346UL), (2676624544UL), (2035972330UL), (500973884UL), (2983028740UL), (974511421UL), (1456450936UL), (429171245UL), (3921563262UL), (342800398UL), (1540218139UL), (1219580025UL), (1549741331UL), (3832317567UL), (3750096895UL), (2195381148UL), (4099775516UL), (1451717480UL), (149159438UL), (3593827664UL), (3715984838UL), (27774796UL), (1138983585UL), (1577536190UL), (978350835UL), (2060213898UL), (95204061UL), (1507155668UL), (304760810UL), (1981315657UL), (774471092UL), (3908131532UL), (3767856445UL), (3851422551UL), (2018732047UL), (1649125731UL), (2745551516UL), (1585868430UL), (1125303733UL), (3147584753UL), (1661721342UL), (1524991519UL), (220882755UL), (630187688UL), (2600079656UL), (3647143842UL), (2671841243UL), (306940008UL), (760977254UL), (558299017UL), (3406011854UL), (1196617651UL), (572800511UL), (3922797738UL), (3754011306UL), (2314291278UL), (1982654891UL), (1455757442UL), (1014649591UL), (3205662508UL), (3471741326UL), (3769735713UL), (2267018388UL), (2925762681UL), (3702061213UL), (1593850639UL), (2224634157UL), (4140032336UL), (4134705925UL), (2836703879UL), (3918266498UL), (1027030708UL), (3480792188UL), (1862887216UL), (247780795UL), (3383776045UL), (300214141UL), (271754977UL), (833498724UL), (1489102731UL), (2477093804UL), (1683033001UL), (2011839858UL), (2353400914UL), (510437606UL), (2361664959UL), (2832813585UL), (3844268262UL), (3011027242UL), (3113817193UL), (1468705704UL), (316500941UL), (2478683391UL), (2597550150UL), (699310968UL), (1593029686UL), (4092049617UL), (1312002175UL), (168047351UL), (1826859926UL), (3922295193UL), (2797906491UL), (1950614326UL), (4070838751UL), (4454933UL), (485374579UL), (2602196847UL), (1008498572UL), (3301557438UL), (3906313590UL), (2102043683UL), (946440664UL), (113509402UL), (226900299UL), (1246395851UL), (2635764090UL), (1314772486UL), (2058590162UL), (1983114332UL), (2040467861UL), (354791UL), (3064382079UL), (2826997265UL), (349354812UL), (2360120613UL), (2126504772UL), (3434653713UL), (3938729706UL), (1610628643UL), (2008635822UL), (2400061949UL), (2815835447UL), (3589167073UL), (1942470196UL), (402177406UL), (806469309UL), (865459039UL), (2428569572UL), (4071828137UL), (2880315633UL), (2512200928UL), (1582478959UL), (3833202201UL), (2378168250UL), (1412413704UL), (2767451252UL), (3686787615UL), (3155643175UL), (2580327273UL), (3020661883UL), (1040874588UL), (3152644489UL), (3277572880UL), (3795585437UL), (1266185861UL), (238446394UL), (3101079227UL), (203577834UL), (2230529041UL), (2864778434UL), (653319712UL), (3024925346UL), (2676624544UL), (2035972330UL), (500973884UL), (3839534784UL), (974511421UL), (1456450936UL), (429171245UL), (3921563262UL), (602320448UL), (1540218139UL), (1219580025UL), (1549741331UL), (3832317567UL), (1068872823UL), (2195381148UL), (4099775516UL), (1451717480UL), (149159438UL), (1699607068UL), (3715984838UL), (27774796UL), (1138983585UL), (1577536190UL), (837921790UL), (2060213898UL), (95204061UL), (1507155668UL), (304760810UL), (1446133066UL), (774471092UL), (3908131532UL), (3767856445UL), (3851422551UL), (2672625648UL), (1649125731UL), (2745551516UL), (1585868430UL), (1125303733UL), (2181520384UL), (1661721342UL), (1524991519UL), (220882755UL), (630187688UL), (1599074811UL), (3647143842UL), (2671841243UL), (306940008UL), (760977254UL), (3020017536UL), (3406011854UL), (1196617651UL), (572800511UL), (3922797738UL), (810584907UL), (2314291278UL), (1982654891UL), (1455757442UL), (1014649591UL), (1775783567UL), (3471741326UL), (3769735713UL), (2267018388UL), (2925762681UL), (319055602UL), (1593850639UL), (2224634157UL), (4140032336UL), (4134705925UL), (2794599326UL), (3918266498UL), (1027030708UL), (3480792188UL), (1862887216UL), (659607854UL), (3383776045UL), (300214141UL), (271754977UL), (833498724UL), (4054679386UL), (2477093804UL), (1683033001UL), (2011839858UL), (2353400914UL), (283191425UL), (2361664959UL), (2832813585UL), (3844268262UL), (3011027242UL), (137688840UL), (1468705704UL), (316500941UL), (2478683391UL), (2597550150UL), (1468220070UL), (1593029686UL), (4092049617UL), (1312002175UL), (168047351UL), (1602414610UL), (3922295193UL), (2797906491UL), (1950614326UL), (4070838751UL), (3858763082UL), (485374579UL), (2602196847UL), (1008498572UL), (3301557438UL), (2719858709UL), (2102043683UL), (946440664UL), (113509402UL), (226900299UL), (798285817UL), (2635764090UL), (1314772486UL), (2058590162UL), (1983114332UL), (2526463430UL), (354791UL), (3064382079UL), (2826997265UL), (349354812UL), (249430921UL), (2126504772UL), (3434653713UL), (3938729706UL), (1610628643UL), (967431506UL), (2400061949UL), (2815835447UL), (3589167073UL), (1942470196UL), (669129162UL), (806469309UL), (865459039UL), (2428569572UL), (4071828137UL), (3447449944UL), (2512200928UL), (1582478959UL), (3833202201UL), (2378168250UL), (1945768856UL), (2767451252UL), (3686787615UL), (3155643175UL), (2580327273UL), (2905624117UL), (1040874588UL), (3152644489UL), (3277572880UL), (3795585437UL), (3869959934UL), (238446394UL), (3101079227UL), (203577834UL), (2230529041UL), (1087760616UL), (653319712UL), (3024925346UL), (2676624544UL), (2035972330UL), (741014356UL), (3839534784UL), (974511421UL), (1456450936UL), (429171245UL), (598362053UL), (602320448UL), (1540218139UL), (1219580025UL), (1549741331UL), (401740328UL), (1068872823UL), (2195381148UL), (4099775516UL), (1451717480UL), (412110161UL), (1699607068UL), (3715984838UL), (27774796UL), (1138983585UL), (1531670562UL), (837921790UL), (2060213898UL), (95204061UL), (1507155668UL), (90279751UL), (1446133066UL), (774471092UL), (3908131532UL), (3767856445UL), (1136546910UL), (2672625648UL), (1649125731UL), (2745551516UL), (1585868430UL), (857721974UL), (1470900829UL), (64550776UL), (3252081369UL), (1649342279UL), (378546910UL), (3444980597UL), (3134750739UL), (1010105258UL), (1395608241UL), (1003208120UL), (3960524028UL), (3200241620UL), (3079969898UL), (1508044775UL), (4153769914UL), (2838198142UL), (773928818UL), (25836261UL), (3812652461UL), (3870603819UL), (931071963UL), (2565579710UL), (2930918109UL), (1091097445UL), (2223628368UL), (2934719684UL), (430797922UL), (2102409587UL), (720592077UL), (1675280068UL), (2578226918UL), (1316600845UL), (3427946098UL), (682896800UL), (1861125007UL), (251332674UL), (1502078012UL), (3020904394UL), (1458399451UL), (3088315263UL), (1635399147UL), (3605560130UL), (1755669804UL), (3754169290UL), (962708070UL), (3896576937UL), (3764679740UL), (2707457262UL), (3082551065UL), (1558451132UL), (1046028905UL), (3206335691UL), (731828142UL), (1765772975UL), (1195727587UL), (2664218451UL), (4234957963UL), (4073757168UL), (3230123616UL), (683981262UL), (607599877UL), (3659273671UL), (3230354324UL), (3393069074UL), (3250708814UL), (2229361194UL), (3923623619UL), (4093221649UL), (2441971643UL), (1787414237UL), (3603907850UL), (2254399656UL), (3508336126UL), (3578571587UL), (2383062806UL), (1012097006UL), (4250629546UL), (2086981615UL), (4190388250UL), (1399942361UL), (400707931UL), (3159618664UL), (2129750192UL), (911779896UL), (2736829998UL), (1909644954UL), (2168355517UL), (1583901478UL), (3468891177UL), (509297602UL), (769296769UL), (1865028750UL), (43276967UL), (3375387845UL), (2647467777UL), (1544731454UL), (3479333955UL), (4279441447UL), (485490313UL), (3523606596UL), (2880752852UL), (1946443431UL), (3760803481UL), (3115278477UL), (3693898557UL), (2387822435UL), (334412170UL), (2054111717UL), (269013084UL), (170401553UL), (3456013554UL), (3395842846UL), (508189059UL), (3398715186UL), (3862791669UL), (2741070272UL), (65318715UL), (1933435210UL), (4086198650UL), (3033193928UL), (1242412691UL), (3397363281UL), (3187419149UL), (1019508117UL), (562380742UL), (961415837UL), (2990412400UL), (3597720222UL), (2754100415UL), (1793508822UL), (966564784UL), (1875616532UL), (394646945UL), (1386107842UL), (2750810827UL), (2931007937UL), (3356489930UL), (2358364634UL), (3703772713UL), (3188884403UL), (2793590498UL), (3285138686UL), (515002680UL), (521510516UL), (887213583UL), (1873460781UL), (1583027667UL), (613895001UL), (557578628UL), (1892686243UL), (1974572772UL), (595831726UL), (229299738UL), (3847982294UL), (448248098UL), (1493822844UL), (3326405260UL), (2752463855UL), (128616819UL)}, {(2014765631UL), (3938779303UL), (1811986049UL), (2101875601UL), (887194972UL), (3966228860UL), (3450775746UL), (4026039255UL), (4082308025UL), (432404123UL), (3181099213UL), (1228097256UL), (2368258457UL), (2953933351UL), (2582232464UL), (1657799516UL), (3525421629UL), (3927364159UL), (978138132UL), (3603597064UL), (342571522UL), (2100072168UL), (676229632UL), (2062864895UL), (3713317279UL), (4255773013UL), (1179492389UL), (3501226604UL), (1641801113UL), (2066614519UL), (3303232023UL), (1717768923UL), (2333501450UL), (4246883128UL), (1655087824UL), (1547897374UL), (754215285UL), (2832638094UL), (1365153701UL), (3309513970UL), (765738141UL), (1177808869UL), (324127419UL), (1171195868UL), (3494966448UL), (1714410667UL), (3645762436UL), (603810292UL), (489970006UL), (3126166124UL), (1616642501UL), (2646836239UL), (734727001UL), (118064420UL), (1164195304UL), (3692353914UL), (2267623847UL), (405457397UL), (2510437259UL), (3245015882UL), (2110859730UL), (967046702UL), (265790493UL), (3007163818UL), (3178475505UL), (1784447992UL), (3662964942UL), (1509963062UL), (1867864652UL), (1377871790UL), (4185567242UL), (657897796UL), (1762205546UL), (3895944199UL), (693988565UL), (2359023506UL), (1667660316UL), (478341078UL), (1898651054UL), (2352226314UL), (202416031UL), (855532642UL), (2290137962UL), (1573485803UL), (3675269487UL), (2346740592UL), (3111005795UL), (1741227661UL), (1222572879UL), (2176146608UL), (1595608675UL), (197451178UL), (1729118168UL), (876472937UL), (3201705210UL), (2315408645UL), (699968623UL), (2185639066UL), (3960900430UL), (539499973UL), (4226318752UL), (266371152UL), (2714506838UL), (945022093UL), (1378798863UL), (1925020181UL), (574417318UL), (1341455098UL), (3664225722UL), (3020780778UL), (3256613994UL), (2081255019UL), (3082744844UL), (3572803922UL), (1726854692UL), (1167777002UL), (557257486UL), (3577067012UL), (3806913480UL), (1578577194UL), (2631896730UL), (3937479909UL), (826138924UL), (670145071UL), (832017019UL), (715875283UL), (2008704579UL), (804955545UL), (4184114494UL), (867004874UL), (3586861289UL), (1190193155UL), (3288754776UL), (2271906590UL), (2007547109UL), (2206084232UL), (1621944575UL), (973990634UL), (3981493346UL), (1972746975UL), (1040348653UL), (2895228417UL), (691038334UL), (775610724UL), (3837025597UL), (714850057UL), (2912426839UL), (774555258UL), (3553866253UL), (2096154755UL), (1645117543UL), (3401470072UL), (2056183169UL), (2029528044UL), (3145728013UL), (1090530001UL), (49523828UL), (2228313334UL), (4013648604UL), (4289025873UL), (2749397923UL), (2014765631UL), (3938779303UL), (1811986049UL), (2101875601UL), (1575247143UL), (3966228860UL), (3450775746UL), (4026039255UL), (4082308025UL), (532118065UL), (3181099213UL), (1228097256UL), (2368258457UL), (2953933351UL), (896129082UL), (1657799516UL), (3525421629UL), (3927364159UL), (978138132UL), (3403930517UL), (342571522UL), (2100072168UL), (676229632UL), (2062864895UL), (38934050UL), (4255773013UL), (1179492389UL), (3501226604UL), (1641801113UL), (4195983797UL), (3303232023UL), (1717768923UL), (2333501450UL), (4246883128UL), (2854551758UL), (1547897374UL), (754215285UL), (2832638094UL), (1365153701UL), (1406220165UL), (765738141UL), (1177808869UL), (324127419UL), (1171195868UL), (625985592UL), (1714410667UL), (3645762436UL), (603810292UL), (489970006UL), (344948229UL), (1616642501UL), (2646836239UL), (734727001UL), (118064420UL), (3360380275UL), (3692353914UL), (2267623847UL), (405457397UL), (2510437259UL), (3697919521UL), (2110859730UL), (967046702UL), (265790493UL), (3007163818UL), (1395299303UL), (1784447992UL), (3662964942UL), (1509963062UL), (1867864652UL), (849544728UL), (4185567242UL), (657897796UL), (1762205546UL), (3895944199UL), (1219998053UL), (2359023506UL), (1667660316UL), (478341078UL), (1898651054UL), (943166064UL), (202416031UL), (855532642UL), (2290137962UL), (1573485803UL), (4238971908UL), (2346740592UL), (3111005795UL), (1741227661UL), (1222572879UL), (2670048596UL), (1595608675UL), (197451178UL), (1729118168UL), (876472937UL), (94688481UL), (2315408645UL), (699968623UL), (2185639066UL), (3960900430UL), (1224638706UL), (4226318752UL), (266371152UL), (2714506838UL), (945022093UL), (2683523818UL), (1925020181UL), (574417318UL), (1341455098UL), (3664225722UL), (1168593559UL), (3256613994UL), (2081255019UL), (3082744844UL), (3572803922UL), (2816021735UL), (1167777002UL), (557257486UL), (3577067012UL), (3806913480UL), (740433434UL), (2631896730UL), (3937479909UL), (826138924UL), (670145071UL), (4127240538UL), (715875283UL), (2008704579UL), (804955545UL), (4184114494UL), (1692532062UL), (3586861289UL), (1190193155UL), (3288754776UL), (2271906590UL), (922306057UL), (2206084232UL), (1621944575UL), (973990634UL), (3981493346UL), (3555073644UL), (1040348653UL), (2895228417UL), (691038334UL), (775610724UL), (1798939042UL), (714850057UL), (2912426839UL), (774555258UL), (3553866253UL), (4209859609UL), (1645117543UL), (3401470072UL), (2056183169UL), (2029528044UL), (2169159734UL), (1090530001UL), (49523828UL), (2228313334UL), (4013648604UL), (1499948031UL), (2749397923UL), (2014765631UL), (3938779303UL), (1811986049UL), (2169095159UL), (1575247143UL), (3966228860UL), (3450775746UL), (4026039255UL), (1220311069UL), (532118065UL), (3181099213UL), (1228097256UL), (2368258457UL), (649921441UL), (896129082UL), (1657799516UL), (3525421629UL), (3927364159UL), (2546335470UL), (3403930517UL), (342571522UL), (2100072168UL), (676229632UL), (3090148374UL), (38934050UL), (4255773013UL), (1179492389UL), (3501226604UL), (2613176152UL), (4195983797UL), (3303232023UL), (1717768923UL), (2333501450UL), (3923041739UL), (2854551758UL), (1547897374UL), (754215285UL), (2832638094UL), (731392091UL), (1406220165UL), (765738141UL), (1177808869UL), (324127419UL), (12876722UL), (625985592UL), (1714410667UL), (3645762436UL), (603810292UL), (2789313462UL), (344948229UL), (1616642501UL), (2646836239UL), (734727001UL), (3369486664UL), (3360380275UL), (3692353914UL), (2267623847UL), (405457397UL), (4284067044UL), (3697919521UL), (2110859730UL), (967046702UL), (265790493UL), (2779045063UL), (1395299303UL), (1784447992UL), (3662964942UL), (1509963062UL), (3233239196UL), (849544728UL), (4185567242UL), (657897796UL), (1762205546UL), (2086953994UL), (1219998053UL), (2359023506UL), (1667660316UL), (478341078UL), (4137166515UL), (943166064UL), (202416031UL), (855532642UL), (2290137962UL), (1053737970UL), (4238971908UL), (2346740592UL), (3111005795UL), (1741227661UL), (3570501235UL), (2670048596UL), (1595608675UL), (197451178UL), (1729118168UL), (4162077327UL), (94688481UL), (2315408645UL), (699968623UL), (2185639066UL), (2842562270UL), (1224638706UL), (4226318752UL), (266371152UL), (2714506838UL), (755620309UL), (2683523818UL), (1925020181UL), (574417318UL), (1341455098UL), (3323621213UL), (1168593559UL), (3256613994UL), (2081255019UL), (3082744844UL), (3845230416UL), (2816021735UL), (1167777002UL), (557257486UL), (3577067012UL), (66225918UL), (740433434UL), (2631896730UL), (3937479909UL), (826138924UL), (522548622UL), (4127240538UL), (715875283UL), (2008704579UL), (804955545UL), (22190845UL), (1692532062UL), (3586861289UL), (1190193155UL), (3288754776UL), (610751818UL), (922306057UL), (2206084232UL), (1621944575UL), (973990634UL), (1771882567UL), (3555073644UL), (1040348653UL), (2895228417UL), (691038334UL), (149995790UL), (1798939042UL), (714850057UL), (2912426839UL), (774555258UL), (2020442761UL), (4209859609UL), (1645117543UL), (3401470072UL), (2056183169UL), (460813741UL), (2169159734UL), (1090530001UL), (49523828UL), (2228313334UL), (504317288UL), (1499948031UL), (2749397923UL), (2014765631UL), (3938779303UL), (1175469033UL), (2169095159UL), (1575247143UL), (3966228860UL), (3450775746UL), (1032079910UL), (1220311069UL), (532118065UL), (3181099213UL), (1228097256UL), (3353583885UL), (649921441UL), (896129082UL), (1657799516UL), (3525421629UL), (2830418357UL), (2546335470UL), (3403930517UL), (342571522UL), (2100072168UL), (1099053459UL), (3090148374UL), (38934050UL), (4255773013UL), (1179492389UL), (1634035942UL), (2613176152UL), (4195983797UL), (3303232023UL), (1717768923UL), (4175785502UL), (3923041739UL), (2854551758UL), (1547897374UL), (754215285UL), (3674851127UL), (731392091UL), (1406220165UL), (765738141UL), (1177808869UL), (776475327UL), (12876722UL), (625985592UL), (1714410667UL), (3645762436UL), (759189800UL), (2789313462UL), (344948229UL), (1616642501UL), (2646836239UL), (1228911282UL), (3369486664UL), (3360380275UL), (3692353914UL), (2267623847UL), (3058856811UL), (4284067044UL), (3697919521UL), (2110859730UL), (967046702UL), (3601311392UL), (2779045063UL), (1395299303UL), (1784447992UL), (3662964942UL), (284169442UL), (3233239196UL), (849544728UL), (4185567242UL), (657897796UL), (905886381UL), (2086953994UL), (1219998053UL), (2359023506UL), (1667660316UL), (2784311626UL), (4137166515UL), (943166064UL), (202416031UL), (855532642UL), (895862877UL), (1053737970UL), (4238971908UL), (2346740592UL), (3111005795UL), (1509264114UL), (3570501235UL), (2670048596UL), (1595608675UL), (197451178UL), (3653040124UL), (4162077327UL), (94688481UL), (2315408645UL), (699968623UL), (1071988392UL), (2842562270UL), (1224638706UL), (4226318752UL), (266371152UL), (4214356293UL), (755620309UL), (2683523818UL), (1925020181UL), (574417318UL), (119162126UL), (3323621213UL), (1168593559UL), (3256613994UL), (2081255019UL), (1317924999UL), (3845230416UL), (2816021735UL), (1167777002UL), (557257486UL), (638058809UL), (66225918UL), (740433434UL), (2631896730UL), (3937479909UL), (411228024UL), (522548622UL), (4127240538UL), (715875283UL), (2008704579UL), (2246049355UL), (22190845UL), (1692532062UL), (3586861289UL), (1190193155UL), (4078828073UL), (610751818UL), (922306057UL), (2206084232UL), (1621944575UL), (907181435UL), (1771882567UL), (3555073644UL), (1040348653UL), (2895228417UL), (940846326UL), (149995790UL), (1798939042UL), (714850057UL), (2912426839UL), (3345560812UL), (2020442761UL), (4209859609UL), (1645117543UL), (3401470072UL), (2036328600UL), (460813741UL), (2169159734UL), (1090530001UL), (49523828UL), (510136795UL), (2233313725UL), (1046048857UL), (700202384UL), (926275751UL), (4104982908UL), (3910999868UL), (1125213128UL), (492681420UL), (3891914731UL), (956545470UL), (115696875UL), (2957144177UL), (77090391UL), (467732901UL), (2599813105UL), (3888976883UL), (2098926023UL), (2844817051UL), (2069408123UL), (2239429902UL), (3793992219UL), (3020240490UL), (1721698056UL), (3012473888UL), (1537226153UL), (725991171UL), (61376035UL), (381912667UL), (3904514327UL), (40015731UL), (4263210119UL), (2876064791UL), (2732785471UL), (2934318283UL), (3134934287UL), (3161129365UL), (3789733734UL), (2954419388UL), (2742205850UL), (3488450208UL), (3252908703UL), (410643191UL), (3246033194UL), (2846558783UL), (828879673UL), (2428687670UL), (389617242UL), (63987225UL), (439842832UL), (2635895570UL), (3468152776UL), (4086700701UL), (3370617315UL), (2400127386UL), (4266992260UL), (3026019128UL), (4225721108UL), (1328114488UL), (2808680961UL), (3574018824UL), (4060262451UL), (2329039960UL), (1165344648UL), (3635963149UL), (2414703792UL), (2269100254UL), (832995451UL), (2143875746UL), (1031309981UL), (2129333746UL), (2606784227UL), (805236091UL), (666141116UL), (2749351381UL), (53998350UL), (2270447972UL), (2092784991UL), (877961283UL), (3019419608UL), (2438459472UL), (2273921167UL), (332279281UL), (3759993687UL), (2465113760UL), (3732237006UL), (322823266UL), (491053374UL), (686619591UL), (4192648122UL), (4118497267UL), (1948902148UL), (988375775UL), (2098328675UL), (3107501958UL), (2979856583UL), (2274193457UL), (6179961UL), (188209161UL), (1491245003UL), (3005972885UL), (1658799053UL), (3420802262UL), (2128792168UL), (3272743598UL), (4163716849UL), (817350318UL), (3372322557UL), (1525295885UL), (490587460UL), (3634834949UL), (2584809384UL), (3638373352UL), (2603765126UL), (3223396315UL), (4021061386UL), (2143780551UL), (248332433UL), (3654752967UL), (27201989UL), (3994156272UL), (5505477UL), (4260955724UL), (1175998822UL), (2665646240UL), (866875674UL), (3569324422UL), (202962714UL), (896177244UL), (3146417201UL), (1168925859UL), (2228636445UL), (105395449UL), (2567482935UL), (1301265751UL), (3739617610UL), (2486939910UL), (1891847857UL), (2647840744UL), (1141826566UL), (3360553996UL), (4267671927UL), (2546157872UL), (1143297884UL), (2049385137UL), (4288036836UL), (3347190546UL), (3480408604UL), (2756408254UL), (2396048567UL), (1151717877UL), (2211243289UL), (4221659024UL), (21773193UL), (1665317870UL), (3116384869UL), (3231689469UL), (3689471824UL), (1520574310UL), (463615415UL)}, {(2647200400UL), (1592194261UL), (1289872755UL), (2079982087UL), (3431487085UL), (1101851783UL), (3373292799UL), (2148994262UL), (2785319928UL), (3206527339UL), (2731839331UL), (1280366172UL), (1146205735UL), (2930495205UL), (2876978398UL), (3885758458UL), (2062812458UL), (2448488486UL), (192141900UL), (3861696664UL), (2677929258UL), (3606729729UL), (2920965773UL), (1156521508UL), (3168665640UL), (298794036UL), (957896625UL), (2606719899UL), (3699219026UL), (3120096333UL), (2531109351UL), (1920936462UL), (2848868175UL), (1406404729UL), (2956672675UL), (1376226240UL), (3667482110UL), (2551426756UL), (3433640449UL), (2603906744UL), (4217864690UL), (47671552UL), (2993859190UL), (1269153270UL), (3463588775UL), (1655126430UL), (3453916724UL), (2157890969UL), (252769449UL), (1583335064UL), (2560819344UL), (52639671UL), (39618615UL), (313192112UL), (2625914283UL), (2964928555UL), (4226359627UL), (4141969666UL), (183405146UL), (1455378225UL), (2994063945UL), (3146629795UL), (2992956289UL), (368634554UL), (4110058153UL), (1156556441UL), (3690317172UL), (906928962UL), (3773042217UL), (948650679UL), (4134172918UL), (2922802573UL), (1417921660UL), (291400676UL), (3120733115UL), (3225369425UL), (3200455006UL), (2207799613UL), (1766261260UL), (914727455UL), (1927023103UL), (572959294UL), (3447057855UL), (4042691162UL), (840021910UL), (4187195325UL), (3627831667UL), (1671506539UL), (242673485UL), (3330397756UL), (776552069UL), (684550924UL), (261597601UL), (1857936262UL), (1022869402UL), (4209077103UL), (14248159UL), (2366156245UL), (1910356465UL), (2020463550UL), (873419743UL), (4290775093UL), (3670978210UL), (1726974037UL), (784115717UL), (3574834402UL), (357805142UL), (3820795621UL), (1854247318UL), (1161642656UL), (3977404318UL), (2054677775UL), (1737374322UL), (2852015019UL), (4277252452UL), (1392810771UL), (3742661504UL), (1900815804UL), (1965911170UL), (3540183220UL), (2106191537UL), (3606954134UL), (2108636204UL), (2981827052UL), (2506861567UL), (184003599UL), (3319252632UL), (1370913077UL), (940955681UL), (2244100002UL), (3683661822UL), (3215832318UL), (3463899341UL), (134577035UL), (3404365179UL), (2262494389UL), (88039196UL), (114405083UL), (1071449574UL), (4008494055UL), (765981248UL), (758357266UL), (2564125377UL), (901977407UL), (955156196UL), (3900980822UL), (134031448UL), (2566915950UL), (3445833537UL), (3138903399UL), (2113076217UL), (713587277UL), (3396078039UL), (3987657193UL), (3004104774UL), (800324742UL), (652529813UL), (3999083342UL), (486108562UL), (2103591900UL), (104743736UL), (2647200400UL), (1592194261UL), (1289872755UL), (2079982087UL), (552781204UL), (1101851783UL), (3373292799UL), (2148994262UL), (2785319928UL), (1222851809UL), (2731839331UL), (1280366172UL), (1146205735UL), (2930495205UL), (942360591UL), (3885758458UL), (2062812458UL), (2448488486UL), (192141900UL), (1909229999UL), (2677929258UL), (3606729729UL), (2920965773UL), (1156521508UL), (2995805883UL), (298794036UL), (957896625UL), (2606719899UL), (3699219026UL), (2447513005UL), (2531109351UL), (1920936462UL), (2848868175UL), (1406404729UL), (2751142611UL), (1376226240UL), (3667482110UL), (2551426756UL), (3433640449UL), (3724189478UL), (4217864690UL), (47671552UL), (2993859190UL), (1269153270UL), (2144136371UL), (1655126430UL), (3453916724UL), (2157890969UL), (252769449UL), (2959496542UL), (2560819344UL), (52639671UL), (39618615UL), (313192112UL), (2367743540UL), (2964928555UL), (4226359627UL), (4141969666UL), (183405146UL), (2006751422UL), (2994063945UL), (3146629795UL), (2992956289UL), (368634554UL), (1529794973UL), (1156556441UL), (3690317172UL), (906928962UL), (3773042217UL), (2005599428UL), (4134172918UL), (2922802573UL), (1417921660UL), (291400676UL), (2664982078UL), (3225369425UL), (3200455006UL), (2207799613UL), (1766261260UL), (2623711877UL), (1927023103UL), (572959294UL), (3447057855UL), (4042691162UL), (3510199782UL), (4187195325UL), (3627831667UL), (1671506539UL), (242673485UL), (1978730938UL), (776552069UL), (684550924UL), (261597601UL), (1857936262UL), (3273582958UL), (4209077103UL), (14248159UL), (2366156245UL), (1910356465UL), (457933823UL), (873419743UL), (4290775093UL), (3670978210UL), (1726974037UL), (1414288023UL), (3574834402UL), (357805142UL), (3820795621UL), (1854247318UL), (2679386897UL), (3977404318UL), (2054677775UL), (1737374322UL), (2852015019UL), (2411291453UL), (1392810771UL), (3742661504UL), (1900815804UL), (1965911170UL), (3719529323UL), (2106191537UL), (3606954134UL), (2108636204UL), (2981827052UL), (3702357099UL), (184003599UL), (3319252632UL), (1370913077UL), (940955681UL), (4262675711UL), (3683661822UL), (3215832318UL), (3463899341UL), (134577035UL), (3494669542UL), (2262494389UL), (88039196UL), (114405083UL), (1071449574UL), (1060831201UL), (765981248UL), (758357266UL), (2564125377UL), (901977407UL), (3003279383UL), (3900980822UL), (134031448UL), (2566915950UL), (3445833537UL), (2846863035UL), (2113076217UL), (713587277UL), (3396078039UL), (3987657193UL), (2067196130UL), (800324742UL), (652529813UL), (3999083342UL), (486108562UL), (2321935002UL), (104743736UL), (2647200400UL), (1592194261UL), (1289872755UL), (466892855UL), (552781204UL), (1101851783UL), (3373292799UL), (2148994262UL), (3078568050UL), (1222851809UL), (2731839331UL), (1280366172UL), (1146205735UL), (1710937426UL), (942360591UL), (3885758458UL), (2062812458UL), (2448488486UL), (3418446265UL), (1909229999UL), (2677929258UL), (3606729729UL), (2920965773UL), (1103324742UL), (2995805883UL), (298794036UL), (957896625UL), (2606719899UL), (675602173UL), (2447513005UL), (2531109351UL), (1920936462UL), (2848868175UL), (1509959171UL), (2751142611UL), (1376226240UL), (3667482110UL), (2551426756UL), (2447143807UL), (3724189478UL), (4217864690UL), (47671552UL), (2993859190UL), (2821422976UL), (2144136371UL), (1655126430UL), (3453916724UL), (2157890969UL), (3665277070UL), (2959496542UL), (2560819344UL), (52639671UL), (39618615UL), (2817859210UL), (2367743540UL), (2964928555UL), (4226359627UL), (4141969666UL), (2856219617UL), (2006751422UL), (2994063945UL), (3146629795UL), (2992956289UL), (3176479073UL), (1529794973UL), (1156556441UL), (3690317172UL), (906928962UL), (97899274UL), (2005599428UL), (4134172918UL), (2922802573UL), (1417921660UL), (1492426675UL), (2664982078UL), (3225369425UL), (3200455006UL), (2207799613UL), (2275640124UL), (2623711877UL), (1927023103UL), (572959294UL), (3447057855UL), (1036984002UL), (3510199782UL), (4187195325UL), (3627831667UL), (1671506539UL), (1827895694UL), (1978730938UL), (776552069UL), (684550924UL), (261597601UL), (3493571621UL), (3273582958UL), (4209077103UL), (14248159UL), (2366156245UL), (211745521UL), (457933823UL), (873419743UL), (4290775093UL), (3670978210UL), (1909994881UL), (1414288023UL), (3574834402UL), (357805142UL), (3820795621UL), (1911700755UL), (2679386897UL), (3977404318UL), (2054677775UL), (1737374322UL), (213019511UL), (2411291453UL), (1392810771UL), (3742661504UL), (1900815804UL), (237536256UL), (3719529323UL), (2106191537UL), (3606954134UL), (2108636204UL), (665423205UL), (3702357099UL), (184003599UL), (3319252632UL), (1370913077UL), (3583034472UL), (4262675711UL), (3683661822UL), (3215832318UL), (3463899341UL), (4027471772UL), (3494669542UL), (2262494389UL), (88039196UL), (114405083UL), (3580272354UL), (1060831201UL), (765981248UL), (758357266UL), (2564125377UL), (2592170747UL), (3003279383UL), (3900980822UL), (134031448UL), (2566915950UL), (1722483656UL), (2846863035UL), (2113076217UL), (713587277UL), (3396078039UL), (244197359UL), (2067196130UL), (800324742UL), (652529813UL), (3999083342UL), (2310369213UL), (2321935002UL), (104743736UL), (2647200400UL), (1592194261UL), (1610483859UL), (466892855UL), (552781204UL), (1101851783UL), (3373292799UL), (2617595614UL), (3078568050UL), (1222851809UL), (2731839331UL), (1280366172UL), (808483717UL), (1710937426UL), (942360591UL), (3885758458UL), (2062812458UL), (3260452154UL), (3418446265UL), (1909229999UL), (2677929258UL), (3606729729UL), (341113837UL), (1103324742UL), (2995805883UL), (298794036UL), (957896625UL), (2309730124UL), (675602173UL), (2447513005UL), (2531109351UL), (1920936462UL), (2268824429UL), (1509959171UL), (2751142611UL), (1376226240UL), (3667482110UL), (2745634237UL), (2447143807UL), (3724189478UL), (4217864690UL), (47671552UL), (2787057737UL), (2821422976UL), (2144136371UL), (1655126430UL), (3453916724UL), (339095616UL), (3665277070UL), (2959496542UL), (2560819344UL), (52639671UL), (3200765881UL), (2817859210UL), (2367743540UL), (2964928555UL), (4226359627UL), (3206913703UL), (2856219617UL), (2006751422UL), (2994063945UL), (3146629795UL), (1042016834UL), (3176479073UL), (1529794973UL), (1156556441UL), (3690317172UL), (171871257UL), (97899274UL), (2005599428UL), (4134172918UL), (2922802573UL), (1501051393UL), (1492426675UL), (2664982078UL), (3225369425UL), (3200455006UL), (1356823782UL), (2275640124UL), (2623711877UL), (1927023103UL), (572959294UL), (319456586UL), (1036984002UL), (3510199782UL), (4187195325UL), (3627831667UL), (3026392291UL), (1827895694UL), (1978730938UL), (776552069UL), (684550924UL), (2862336749UL), (3493571621UL), (3273582958UL), (4209077103UL), (14248159UL), (1597498830UL), (211745521UL), (457933823UL), (873419743UL), (4290775093UL), (2990300609UL), (1909994881UL), (1414288023UL), (3574834402UL), (357805142UL), (1957211849UL), (1911700755UL), (2679386897UL), (3977404318UL), (2054677775UL), (1006075205UL), (213019511UL), (2411291453UL), (1392810771UL), (3742661504UL), (1443139437UL), (237536256UL), (3719529323UL), (2106191537UL), (3606954134UL), (2671394121UL), (665423205UL), (3702357099UL), (184003599UL), (3319252632UL), (1632983188UL), (3583034472UL), (4262675711UL), (3683661822UL), (3215832318UL), (4080585934UL), (4027471772UL), (3494669542UL), (2262494389UL), (88039196UL), (677218369UL), (3580272354UL), (1060831201UL), (765981248UL), (758357266UL), (1277026792UL), (2592170747UL), (3003279383UL), (3900980822UL), (134031448UL), (4189207981UL), (1722483656UL), (2846863035UL), (2113076217UL), (713587277UL), (2098603934UL), (244197359UL), (2067196130UL), (800324742UL), (652529813UL), (1307843279UL), (3205610699UL), (1606722715UL), (2749781905UL), (3500078806UL), (320007706UL), (4092615096UL), (608085660UL), (1869480444UL), (459160631UL), (3657609957UL), (1944540526UL), (2184854884UL), (3497113751UL), (2817682182UL), (3367276652UL), (2069300794UL), (1466691974UL), (3078806052UL), (3998756116UL), (2068892089UL), (1789981386UL), (4196184114UL), (4004623319UL), (3029515569UL), (3206332209UL), (3424306963UL), (1805804276UL), (899469644UL), (1149853995UL), (903917909UL), (1185042552UL), (447265042UL), (3579272434UL), (116409560UL), (2211704275UL), (1237721838UL), (3636618157UL), (3191931082UL), (2430339315UL), (3551966793UL), (1533877057UL), (1700891210UL), (3317627852UL), (828148584UL), (1733460943UL), (3866870689UL), (3970886915UL), (1624935507UL), (3236099078UL), (4209593953UL), (1951283095UL), (1579020365UL), (1165668813UL), (1423097998UL), (1294879824UL), (3406063424UL), (3313007028UL), (2090501113UL), (842064167UL), (729587893UL), (2949702260UL), (2099637920UL), (260436310UL), (1056109549UL), (657874983UL), (2734575906UL), (4088958435UL), (3265216971UL), (1081848592UL), (2593212854UL), (4028921684UL), (2868974814UL), (2299228627UL), (49944924UL), (955114665UL), (2844328062UL), (885136505UL), (4262681333UL), (977883895UL), (998890598UL), (2026602293UL), (87852872UL), (2197997810UL), (910583259UL), (3151223623UL), (3960726944UL), (1778982325UL), (3322631234UL), (2940402694UL), (1619768059UL), (1592832128UL), (1434542537UL), (2107314297UL), (1170789408UL), (3357335254UL), (3317662644UL), (1409884338UL), (73741139UL), (1093507243UL), (329113525UL), (4199840577UL), (442295615UL), (3348669654UL), (435948047UL), (1154137005UL), (3151357655UL), (2101029905UL), (2430218233UL), (2474305449UL), (2316834456UL), (1736616135UL), (1575712778UL), (370866908UL), (4256943043UL), (2805503887UL), (1099763491UL), (2473785999UL), (3215573143UL), (472701386UL), (3070116154UL), (3969279119UL), (3331310102UL), (3932945670UL), (1502564397UL), (1294139579UL), (3073834823UL), (3115143551UL), (3602082994UL), (3707103500UL), (2570195094UL), (1268510174UL), (3561337287UL), (112422529UL), (1483304061UL), (3712148969UL), (3729628891UL), (2741131557UL), (4035019342UL), (2395091348UL), (208448216UL), (607199897UL), (4049058939UL), (3463267226UL), (3821711834UL), (1697628853UL), (691151709UL), (3014869414UL), (11610545UL), (3895793639UL), (3019679196UL), (1246664817UL), (753245113UL), (2236232962UL), (4172861179UL), (4030183420UL), (2367787106UL), (2209331085UL), (4170801007UL), (3609895913UL)}, {(930278208UL), (223382535UL), (720499309UL), (2613473585UL), (4173439516UL), (2132019243UL), (468054579UL), (1141433627UL), (1328639101UL), (3222455434UL), (4023859457UL), (892124224UL), (2940688706UL), (2894552260UL), (1595432126UL), (2558709596UL), (2057191226UL), (1116728192UL), (3767370344UL), (1457278707UL), (3171850455UL), (3733161247UL), (149922078UL), (3860652874UL), (743952057UL), (1024625539UL), (3982786483UL), (2077838781UL), (3713742913UL), (2790452624UL), (3014482913UL), (2928857967UL), (476371337UL), (611803300UL), (3000092437UL), (57069608UL), (1554852195UL), (1406780525UL), (2288998898UL), (460131340UL), (3945168588UL), (18495216UL), (547882902UL), (1624966119UL), (2229423551UL), (1492565146UL), (706052879UL), (2733955743UL), (1450476708UL), (2565285196UL), (2491601298UL), (850297175UL), (331472128UL), (3275065709UL), (3154247398UL), (1364512871UL), (1193063601UL), (579449294UL), (4097747196UL), (3572372000UL), (2712499116UL), (1172861307UL), (3964137156UL), (1300564854UL), (1057993198UL), (2785733262UL), (3548277076UL), (2572944411UL), (3299232577UL), (2031854568UL), (2468534978UL), (602097973UL), (2068619195UL), (2639336890UL), (1694467033UL), (1581263823UL), (809076686UL), (2892861850UL), (4042078087UL), (3178152001UL), (706023882UL), (3236709493UL), (3603158102UL), (2575690800UL), (2831218686UL), (2492604085UL), (207296828UL), (1561595438UL), (2961967115UL), (3304283504UL), (835276604UL), (3005485731UL), (58946395UL), (3979071161UL), (1560535337UL), (2679058432UL), (1061627241UL), (1142692919UL), (1476802977UL), (1306619165UL), (1297953898UL), (4282928317UL), (3630719944UL), (2305895643UL), (2656730970UL), (916308118UL), (4160016206UL), (3541795573UL), (4222235077UL), (1289754532UL), (1963633184UL), (3595798857UL), (2273299603UL), (1687478595UL), (2249344966UL), (2267127964UL), (2201115693UL), (917609614UL), (3731921025UL), (1634893875UL), (3039440017UL), (1122674005UL), (2906728840UL), (921166852UL), (3525309936UL), (633872502UL), (821930665UL), (3861074060UL), (3309559821UL), (304858441UL), (1530517912UL), (1140212033UL), (3168869568UL), (3223449972UL), (1343718360UL), (2831361172UL), (1723616626UL), (3675867172UL), (2586694335UL), (2374941766UL), (387033391UL), (1528180036UL), (1561421035UL), (2735360720UL), (3952587140UL), (13543969UL), (3987997725UL), (4273177532UL), (2200558169UL), (461920718UL), (459441276UL), (4225054447UL), (2248193798UL), (1103878063UL), (3027778665UL), (1844457031UL), (1364117386UL), (1575430424UL), (2276483962UL), (2665252582UL), (1572038262UL), (930278208UL), (223382535UL), (720499309UL), (2613473585UL), (4025056228UL), (2132019243UL), (468054579UL), (1141433627UL), (1328639101UL), (304940359UL), (4023859457UL), (892124224UL), (2940688706UL), (2894552260UL), (2006939659UL), (2558709596UL), (2057191226UL), (1116728192UL), (3767370344UL), (3026555841UL), (3171850455UL), (3733161247UL), (149922078UL), (3860652874UL), (2068299929UL), (1024625539UL), (3982786483UL), (2077838781UL), (3713742913UL), (2512419366UL), (3014482913UL), (2928857967UL), (476371337UL), (611803300UL), (259065762UL), (57069608UL), (1554852195UL), (1406780525UL), (2288998898UL), (2261401631UL), (3945168588UL), (18495216UL), (547882902UL), (1624966119UL), (3049748661UL), (1492565146UL), (706052879UL), (2733955743UL), (1450476708UL), (910808481UL), (2491601298UL), (850297175UL), (331472128UL), (3275065709UL), (3877736250UL), (1364512871UL), (1193063601UL), (579449294UL), (4097747196UL), (3029512053UL), (2712499116UL), (1172861307UL), (3964137156UL), (1300564854UL), (2398462790UL), (2785733262UL), (3548277076UL), (2572944411UL), (3299232577UL), (3497485227UL), (2468534978UL), (602097973UL), (2068619195UL), (2639336890UL), (4271191874UL), (1581263823UL), (809076686UL), (2892861850UL), (4042078087UL), (3046259144UL), (706023882UL), (3236709493UL), (3603158102UL), (2575690800UL), (591682100UL), (2492604085UL), (207296828UL), (1561595438UL), (2961967115UL), (3885379584UL), (835276604UL), (3005485731UL), (58946395UL), (3979071161UL), (2784795951UL), (2679058432UL), (1061627241UL), (1142692919UL), (1476802977UL), (2864266022UL), (1297953898UL), (4282928317UL), (3630719944UL), (2305895643UL), (3374260620UL), (916308118UL), (4160016206UL), (3541795573UL), (4222235077UL), (3025355241UL), (1963633184UL), (3595798857UL), (2273299603UL), (1687478595UL), (4115795122UL), (2267127964UL), (2201115693UL), (917609614UL), (3731921025UL), (2905712346UL), (3039440017UL), (1122674005UL), (2906728840UL), (921166852UL), (2881663141UL), (633872502UL), (821930665UL), (3861074060UL), (3309559821UL), (2816533968UL), (1530517912UL), (1140212033UL), (3168869568UL), (3223449972UL), (1894667948UL), (2831361172UL), (1723616626UL), (3675867172UL), (2586694335UL), (3974041178UL), (387033391UL), (1528180036UL), (1561421035UL), (2735360720UL), (2014321457UL), (13543969UL), (3987997725UL), (4273177532UL), (2200558169UL), (2259553303UL), (459441276UL), (4225054447UL), (2248193798UL), (1103878063UL), (3889361594UL), (1844457031UL), (1364117386UL), (1575430424UL), (2276483962UL), (3302182736UL), (1572038262UL), (930278208UL), (223382535UL), (720499309UL), (4173186621UL), (4025056228UL), (2132019243UL), (468054579UL), (1141433627UL), (2396654717UL), (304940359UL), (4023859457UL), (892124224UL), (2940688706UL), (2903529759UL), (2006939659UL), (2558709596UL), (2057191226UL), (1116728192UL), (715931354UL), (3026555841UL), (3171850455UL), (3733161247UL), (149922078UL), (3342675578UL), (2068299929UL), (1024625539UL), (3982786483UL), (2077838781UL), (1157097180UL), (2512419366UL), (3014482913UL), (2928857967UL), (476371337UL), (2192872017UL), (259065762UL), (57069608UL), (1554852195UL), (1406780525UL), (4165039782UL), (2261401631UL), (3945168588UL), (18495216UL), (547882902UL), (2453072030UL), (3049748661UL), (1492565146UL), (706052879UL), (2733955743UL), (2233423433UL), (910808481UL), (2491601298UL), (850297175UL), (331472128UL), (1154483111UL), (3877736250UL), (1364512871UL), (1193063601UL), (579449294UL), (690173400UL), (3029512053UL), (2712499116UL), (1172861307UL), (3964137156UL), (2683130322UL), (2398462790UL), (2785733262UL), (3548277076UL), (2572944411UL), (4075824857UL), (3497485227UL), (2468534978UL), (602097973UL), (2068619195UL), (2711665545UL), (4271191874UL), (1581263823UL), (809076686UL), (2892861850UL), (3558962856UL), (3046259144UL), (706023882UL), (3236709493UL), (3603158102UL), (274706518UL), (591682100UL), (2492604085UL), (207296828UL), (1561595438UL), (1532885415UL), (3885379584UL), (835276604UL), (3005485731UL), (58946395UL), (4143205928UL), (2784795951UL), (2679058432UL), (1061627241UL), (1142692919UL), (2539503297UL), (2864266022UL), (1297953898UL), (4282928317UL), (3630719944UL), (3333189589UL), (3374260620UL), (916308118UL), (4160016206UL), (3541795573UL), (1771535488UL), (3025355241UL), (1963633184UL), (3595798857UL), (2273299603UL), (1735171204UL), (4115795122UL), (2267127964UL), (2201115693UL), (917609614UL), (4220503034UL), (2905712346UL), (3039440017UL), (1122674005UL), (2906728840UL), (868453017UL), (2881663141UL), (633872502UL), (821930665UL), (3861074060UL), (1928586970UL), (2816533968UL), (1530517912UL), (1140212033UL), (3168869568UL), (1082127627UL), (1894667948UL), (2831361172UL), (1723616626UL), (3675867172UL), (496773835UL), (3974041178UL), (387033391UL), (1528180036UL), (1561421035UL), (2763161987UL), (2014321457UL), (13543969UL), (3987997725UL), (4273177532UL), (2110570579UL), (2259553303UL), (459441276UL), (4225054447UL), (2248193798UL), (53021618UL), (3889361594UL), (1844457031UL), (1364117386UL), (1575430424UL), (1105247032UL), (3302182736UL), (1572038262UL), (930278208UL), (223382535UL), (2159964170UL), (4173186621UL), (4025056228UL), (2132019243UL), (468054579UL), (1397544344UL), (2396654717UL), (304940359UL), (4023859457UL), (892124224UL), (2800429255UL), (2903529759UL), (2006939659UL), (2558709596UL), (2057191226UL), (296054924UL), (715931354UL), (3026555841UL), (3171850455UL), (3733161247UL), (863280930UL), (3342675578UL), (2068299929UL), (1024625539UL), (3982786483UL), (949122664UL), (1157097180UL), (2512419366UL), (3014482913UL), (2928857967UL), (2585465463UL), (2192872017UL), (259065762UL), (57069608UL), (1554852195UL), (3650462338UL), (4165039782UL), (2261401631UL), (3945168588UL), (18495216UL), (524715648UL), (2453072030UL), (3049748661UL), (1492565146UL), (706052879UL), (123143857UL), (2233423433UL), (910808481UL), (2491601298UL), (850297175UL), (3272095697UL), (1154483111UL), (3877736250UL), (1364512871UL), (1193063601UL), (2394240337UL), (690173400UL), (3029512053UL), (2712499116UL), (1172861307UL), (598335483UL), (2683130322UL), (2398462790UL), (2785733262UL), (3548277076UL), (678275336UL), (4075824857UL), (3497485227UL), (2468534978UL), (602097973UL), (1861912463UL), (2711665545UL), (4271191874UL), (1581263823UL), (809076686UL), (3324887617UL), (3558962856UL), (3046259144UL), (706023882UL), (3236709493UL), (1776103512UL), (274706518UL), (591682100UL), (2492604085UL), (207296828UL), (1739697610UL), (1532885415UL), (3885379584UL), (835276604UL), (3005485731UL), (2931144546UL), (4143205928UL), (2784795951UL), (2679058432UL), (1061627241UL), (1487949699UL), (2539503297UL), (2864266022UL), (1297953898UL), (4282928317UL), (4101955339UL), (3333189589UL), (3374260620UL), (916308118UL), (4160016206UL), (376029432UL), (1771535488UL), (3025355241UL), (1963633184UL), (3595798857UL), (2826786027UL), (1735171204UL), (4115795122UL), (2267127964UL), (2201115693UL), (2572535497UL), (4220503034UL), (2905712346UL), (3039440017UL), (1122674005UL), (2482828099UL), (868453017UL), (2881663141UL), (633872502UL), (821930665UL), (2579406681UL), (1928586970UL), (2816533968UL), (1530517912UL), (1140212033UL), (2547368381UL), (1082127627UL), (1894667948UL), (2831361172UL), (1723616626UL), (1903980411UL), (496773835UL), (3974041178UL), (387033391UL), (1528180036UL), (2681142643UL), (2763161987UL), (2014321457UL), (13543969UL), (3987997725UL), (2583502227UL), (2110570579UL), (2259553303UL), (459441276UL), (4225054447UL), (177868402UL), (53021618UL), (3889361594UL), (1844457031UL), (1364117386UL), (2369166739UL), (240269378UL), (689700242UL), (297384154UL), (1052178701UL), (2154172820UL), (614713903UL), (3000863907UL), (3916962502UL), (94341217UL), (2609111975UL), (1621831476UL), (4260159710UL), (694869580UL), (1708268072UL), (2751452128UL), (3843916827UL), (3400387883UL), (2394104046UL), (2348934617UL), (3263438569UL), (3818556032UL), (1695621950UL), (410888855UL), (347231182UL), (612084657UL), (1858306225UL), (3024940417UL), (2482215564UL), (2728249904UL), (2825132299UL), (329106327UL), (3333110741UL), (2742025573UL), (2947035922UL), (3758718780UL), (2191527983UL), (864130510UL), (2586839659UL), (662702978UL), (817620197UL), (2888275812UL), (3372817000UL), (2982240654UL), (2211025418UL), (2043458594UL), (498221898UL), (1559803796UL), (209509183UL), (3004637012UL), (2204871924UL), (2445352606UL), (4026842262UL), (3211433366UL), (3533095828UL), (4172447076UL), (865408944UL), (2797639687UL), (3201749441UL), (1286664278UL), (1158271235UL), (2641361834UL), (4261559289UL), (3643706696UL), (2017210420UL), (2067296744UL), (3548126272UL), (3846378526UL), (3885857009UL), (3013926193UL), (368948443UL), (3839554625UL), (2032663713UL), (4185819024UL), (4279332940UL), (137321733UL), (3515190288UL), (4281845500UL), (2738024944UL), (3350239126UL), (1456676856UL), (1246688651UL), (2478709188UL), (12570320UL), (989306366UL), (2347610707UL), (2849134988UL), (2351681449UL), (4063448910UL), (1193872626UL), (3645565330UL), (1863134777UL), (1345198234UL), (2504863006UL), (3815974850UL), (3075495578UL), (2400383333UL), (2727346254UL), (985812393UL), (1432182882UL), (3668977714UL), (231840487UL), (647229148UL), (274547428UL), (2856186783UL), (1273158535UL), (900081267UL), (1566366419UL), (562584841UL), (2247144789UL), (3522587233UL), (1686032132UL), (586483076UL), (1207387616UL), (3040778905UL), (2532774045UL), (3681992451UL), (1034866888UL), (4029685195UL), (3307070989UL), (2412903766UL), (3156200186UL), (2625083166UL), (4148004113UL), (1756566287UL), (2319065855UL), (2924909429UL), (3050022486UL), (2464491722UL), (1137782196UL), (2749457821UL), (790410752UL), (3511746957UL), (2277733721UL), (2871407058UL), (3858561909UL), (2176119631UL), (952943025UL), (2987154266UL), (120799539UL), (2862346597UL), (3689389598UL), (3329995989UL), (715438735UL), (1035277216UL), (3079684809UL), (677298106UL), (2364292665UL), (4110165256UL), (4096954153UL), (356732100UL), (2361282903UL), (4050817284UL), (2010946835UL), (1824397679UL), (4087204231UL), (4178036725UL), (4197370951UL), (503070461UL), (1879838906UL)}, {(4117851084UL), (2941903397UL), (1156439261UL), (1922510465UL), (2925632294UL), (2272105738UL), (641404242UL), (3414739418UL), (2602896978UL), (672876430UL), (1998875331UL), (1325970749UL), (1633717408UL), (3567722815UL), (2088144733UL), (95705225UL), (580635702UL), (3543633503UL), (1469889369UL), (239816045UL), (2254984383UL), (1632695776UL), (2033839470UL), (4117902893UL), (509938588UL), (1291002316UL), (3600816069UL), (2962644092UL), (4269959520UL), (3161890066UL), (1908855486UL), (1177948589UL), (473118979UL), (3205649854UL), (2027137481UL), (227656706UL), (1485922673UL), (3380103860UL), (2080286336UL), (2588604114UL), (1727893393UL), (3602757903UL), (3126385963UL), (2101893784UL), (3058515017UL), (833779022UL), (719369683UL), (3768029740UL), (1123855192UL), (2580550821UL), (3694463505UL), (1137588651UL), (1724433728UL), (3847324234UL), (2368689516UL), (1226895255UL), (1126753016UL), (2557024841UL), (3187601018UL), (3790080711UL), (2423256074UL), (2463913828UL), (1753321774UL), (1621519784UL), (3456900204UL), (3550875802UL), (3783120790UL), (2740104077UL), (2010858632UL), (1569277627UL), (1492853575UL), (2182681191UL), (3866043645UL), (2566155095UL), (770150438UL), (2482504045UL), (3916834400UL), (222960658UL), (342285296UL), (3354506276UL), (1371039946UL), (3717269950UL), (3632913684UL), (2557531969UL), (3934379214UL), (1732115898UL), (1598596195UL), (1180866173UL), (3526785234UL), (2740387380UL), (3540138766UL), (338607286UL), (3262593182UL), (2413619772UL), (2248013920UL), (3557851982UL), (2470276596UL), (1549877186UL), (447909575UL), (4010548064UL), (282941857UL), (3418249797UL), (3300699992UL), (1957423733UL), (2615274674UL), (370155667UL), (1109991145UL), (933065597UL), (3947818943UL), (3221736239UL), (402503017UL), (4016454981UL), (3640556350UL), (243947268UL), (1175418215UL), (2752078014UL), (371928981UL), (3354635500UL), (3471578165UL), (2735623932UL), (445067764UL), (2732367763UL), (3225606514UL), (1214718589UL), (2197756425UL), (2134958042UL), (680726116UL), (3098695319UL), (2103463364UL), (4058022972UL), (2428195541UL), (2433504485UL), (4042288512UL), (2383438250UL), (3821638336UL), (2375226348UL), (806148488UL), (197247918UL), (768984129UL), (412771011UL), (4020619856UL), (3030619444UL), (3242554868UL), (282156707UL), (3718880754UL), (2938924979UL), (4189583150UL), (1604586306UL), (1245779881UL), (4006389745UL), (2437150739UL), (1749517801UL), (2903749036UL), (1247308303UL), (2580023735UL), (2457849017UL), (342934950UL), (216040419UL), (3176519601UL), (4151509434UL), (2404801649UL), (4117851084UL), (2941903397UL), (1156439261UL), (1922510465UL), (14864453UL), (2272105738UL), (641404242UL), (3414739418UL), (2602896978UL), (2179417586UL), (1998875331UL), (1325970749UL), (1633717408UL), (3567722815UL), (428880410UL), (95705225UL), (580635702UL), (3543633503UL), (1469889369UL), (3132946201UL), (2254984383UL), (1632695776UL), (2033839470UL), (4117902893UL), (3029657560UL), (1291002316UL), (3600816069UL), (2962644092UL), (4269959520UL), (397442545UL), (1908855486UL), (1177948589UL), (473118979UL), (3205649854UL), (990384909UL), (227656706UL), (1485922673UL), (3380103860UL), (2080286336UL), (3295033100UL), (1727893393UL), (3602757903UL), (3126385963UL), (2101893784UL), (1132286601UL), (833779022UL), (719369683UL), (3768029740UL), (1123855192UL), (283414013UL), (3694463505UL), (1137588651UL), (1724433728UL), (3847324234UL), (1735742473UL), (1226895255UL), (1126753016UL), (2557024841UL), (3187601018UL), (2090644528UL), (2423256074UL), (2463913828UL), (1753321774UL), (1621519784UL), (1037552449UL), (3550875802UL), (3783120790UL), (2740104077UL), (2010858632UL), (3730461081UL), (1492853575UL), (2182681191UL), (3866043645UL), (2566155095UL), (2782805925UL), (2482504045UL), (3916834400UL), (222960658UL), (342285296UL), (2406892654UL), (1371039946UL), (3717269950UL), (3632913684UL), (2557531969UL), (4071148456UL), (1732115898UL), (1598596195UL), (1180866173UL), (3526785234UL), (1110366522UL), (3540138766UL), (338607286UL), (3262593182UL), (2413619772UL), (995824548UL), (3557851982UL), (2470276596UL), (1549877186UL), (447909575UL), (2962194596UL), (282941857UL), (3418249797UL), (3300699992UL), (1957423733UL), (1859612288UL), (370155667UL), (1109991145UL), (933065597UL), (3947818943UL), (3005912276UL), (402503017UL), (4016454981UL), (3640556350UL), (243947268UL), (2884057401UL), (2752078014UL), (371928981UL), (3354635500UL), (3471578165UL), (908942821UL), (445067764UL), (2732367763UL), (3225606514UL), (1214718589UL), (4104754911UL), (2134958042UL), (680726116UL), (3098695319UL), (2103463364UL), (2946640978UL), (2428195541UL), (2433504485UL), (4042288512UL), (2383438250UL), (1252490765UL), (2375226348UL), (806148488UL), (197247918UL), (768984129UL), (2578888115UL), (4020619856UL), (3030619444UL), (3242554868UL), (282156707UL), (3433259466UL), (2938924979UL), (4189583150UL), (1604586306UL), (1245779881UL), (616758943UL), (2437150739UL), (1749517801UL), (2903749036UL), (1247308303UL), (2722580830UL), (2457849017UL), (342934950UL), (216040419UL), (3176519601UL), (545097903UL), (2404801649UL), (4117851084UL), (2941903397UL), (1156439261UL), (1253296096UL), (14864453UL), (2272105738UL), (641404242UL), (3414739418UL), (2989955985UL), (2179417586UL), (1998875331UL), (1325970749UL), (1633717408UL), (1896726594UL), (428880410UL), (95705225UL), (580635702UL), (3543633503UL), (3294258049UL), (3132946201UL), (2254984383UL), (1632695776UL), (2033839470UL), (829668922UL), (3029657560UL), (1291002316UL), (3600816069UL), (2962644092UL), (715635401UL), (397442545UL), (1908855486UL), (1177948589UL), (473118979UL), (443010703UL), (990384909UL), (227656706UL), (1485922673UL), (3380103860UL), (727464961UL), (3295033100UL), (1727893393UL), (3602757903UL), (3126385963UL), (3020775130UL), (1132286601UL), (833779022UL), (719369683UL), (3768029740UL), (2215591597UL), (283414013UL), (3694463505UL), (1137588651UL), (1724433728UL), (2124955521UL), (1735742473UL), (1226895255UL), (1126753016UL), (2557024841UL), (1719121879UL), (2090644528UL), (2423256074UL), (2463913828UL), (1753321774UL), (1283364713UL), (1037552449UL), (3550875802UL), (3783120790UL), (2740104077UL), (3326764615UL), (3730461081UL), (1492853575UL), (2182681191UL), (3866043645UL), (1353658829UL), (2782805925UL), (2482504045UL), (3916834400UL), (222960658UL), (2681616579UL), (2406892654UL), (1371039946UL), (3717269950UL), (3632913684UL), (2373372484UL), (4071148456UL), (1732115898UL), (1598596195UL), (1180866173UL), (3787873944UL), (1110366522UL), (3540138766UL), (338607286UL), (3262593182UL), (1714619779UL), (995824548UL), (3557851982UL), (2470276596UL), (1549877186UL), (2342751414UL), (2962194596UL), (282941857UL), (3418249797UL), (3300699992UL), (2080590834UL), (1859612288UL), (370155667UL), (1109991145UL), (933065597UL), (4126279826UL), (3005912276UL), (402503017UL), (4016454981UL), (3640556350UL), (618040940UL), (2884057401UL), (2752078014UL), (371928981UL), (3354635500UL), (2952377979UL), (908942821UL), (445067764UL), (2732367763UL), (3225606514UL), (935181950UL), (4104754911UL), (2134958042UL), (680726116UL), (3098695319UL), (652514936UL), (2946640978UL), (2428195541UL), (2433504485UL), (4042288512UL), (1834165243UL), (1252490765UL), (2375226348UL), (806148488UL), (197247918UL), (1459523569UL), (2578888115UL), (4020619856UL), (3030619444UL), (3242554868UL), (2222750155UL), (3433259466UL), (2938924979UL), (4189583150UL), (1604586306UL), (400149547UL), (616758943UL), (2437150739UL), (1749517801UL), (2903749036UL), (571531698UL), (2722580830UL), (2457849017UL), (342934950UL), (216040419UL), (3302138698UL), (545097903UL), (2404801649UL), (4117851084UL), (2941903397UL), (2926001994UL), (1253296096UL), (14864453UL), (2272105738UL), (641404242UL), (2446601571UL), (2989955985UL), (2179417586UL), (1998875331UL), (1325970749UL), (2470418771UL), (1896726594UL), (428880410UL), (95705225UL), (580635702UL), (95529058UL), (3294258049UL), (3132946201UL), (2254984383UL), (1632695776UL), (3381575123UL), (829668922UL), (3029657560UL), (1291002316UL), (3600816069UL), (332821128UL), (715635401UL), (397442545UL), (1908855486UL), (1177948589UL), (3324147260UL), (443010703UL), (990384909UL), (227656706UL), (1485922673UL), (3468390490UL), (727464961UL), (3295033100UL), (1727893393UL), (3602757903UL), (3849734062UL), (3020775130UL), (1132286601UL), (833779022UL), (719369683UL), (3336941985UL), (2215591597UL), (283414013UL), (3694463505UL), (1137588651UL), (1245145305UL), (2124955521UL), (1735742473UL), (1226895255UL), (1126753016UL), (1536376839UL), (1719121879UL), (2090644528UL), (2423256074UL), (2463913828UL), (4035794571UL), (1283364713UL), (1037552449UL), (3550875802UL), (3783120790UL), (4233012781UL), (3326764615UL), (3730461081UL), (1492853575UL), (2182681191UL), (654850701UL), (1353658829UL), (2782805925UL), (2482504045UL), (3916834400UL), (1556782509UL), (2681616579UL), (2406892654UL), (1371039946UL), (3717269950UL), (1227526114UL), (2373372484UL), (4071148456UL), (1732115898UL), (1598596195UL), (1777009717UL), (3787873944UL), (1110366522UL), (3540138766UL), (338607286UL), (1161080599UL), (1714619779UL), (995824548UL), (3557851982UL), (2470276596UL), (3162659171UL), (2342751414UL), (2962194596UL), (282941857UL), (3418249797UL), (1032034511UL), (2080590834UL), (1859612288UL), (370155667UL), (1109991145UL), (2568097099UL), (4126279826UL), (3005912276UL), (402503017UL), (4016454981UL), (3196575353UL), (618040940UL), (2884057401UL), (2752078014UL), (371928981UL), (4223799564UL), (2952377979UL), (908942821UL), (445067764UL), (2732367763UL), (174723563UL), (935181950UL), (4104754911UL), (2134958042UL), (680726116UL), (649687363UL), (652514936UL), (2946640978UL), (2428195541UL), (2433504485UL), (3735735592UL), (1834165243UL), (1252490765UL), (2375226348UL), (806148488UL), (3720638976UL), (1459523569UL), (2578888115UL), (4020619856UL), (3030619444UL), (283333114UL), (2222750155UL), (3433259466UL), (2938924979UL), (4189583150UL), (870522428UL), (400149547UL), (616758943UL), (2437150739UL), (1749517801UL), (999295363UL), (571531698UL), (2722580830UL), (2457849017UL), (342934950UL), (3151292467UL), (2839665217UL), (2452261456UL), (208520727UL), (2269948412UL), (344787478UL), (3987474076UL), (3770524881UL), (2718719281UL), (2537804795UL), (850790212UL), (639946566UL), (2073602691UL), (2316769983UL), (3577216077UL), (3538374748UL), (61447995UL), (3718817085UL), (1476398788UL), (3239144530UL), (3595014456UL), (454482110UL), (286330934UL), (2119173159UL), (1693518756UL), (1464218560UL), (1201825197UL), (1112746405UL), (2988579776UL), (1626663767UL), (2236015969UL), (4018896468UL), (1885926862UL), (671386673UL), (1583086162UL), (1114723892UL), (2936863300UL), (2620955107UL), (2628074015UL), (426673611UL), (3370181092UL), (3462245129UL), (3590185736UL), (2630441788UL), (171626554UL), (3647663038UL), (880996914UL), (1155913149UL), (2653278555UL), (508978149UL), (2031872445UL), (3041145171UL), (1339819022UL), (127509725UL), (1336955078UL), (727702092UL), (693349672UL), (999665905UL), (2287631318UL), (961427722UL), (3355851447UL), (821851136UL), (2370998072UL), (4027450519UL), (2054803464UL), (144596514UL), (3295312213UL), (2579322479UL), (2982266864UL), (4275468400UL), (179988815UL), (2123828208UL), (1486957870UL), (2484928010UL), (288096701UL), (1211834301UL), (1819157080UL), (3569000238UL), (4164201803UL), (3042117433UL), (2741571248UL), (3688451311UL), (29376415UL), (437788821UL), (994675658UL), (1014591996UL), (296335443UL), (363551454UL), (2628890394UL), (332401256UL), (2288239762UL), (3766239385UL), (317162173UL), (3721125104UL), (2296650899UL), (56428392UL), (3900411067UL), (2303724992UL), (3735005983UL), (1377320198UL), (612032498UL), (1171213235UL), (2494454628UL), (1894368149UL), (4124860986UL), (1694123597UL), (2306091209UL), (2075278956UL), (3898366152UL), (937522278UL), (32800830UL), (324902076UL), (2365753207UL), (2251160429UL), (1692543836UL), (2920424644UL), (119047416UL), (1821685115UL), (1486296407UL), (3055580738UL), (3711421730UL), (1522703457UL), (1422399573UL), (2515073038UL), (3788816887UL), (3490575947UL), (2395299159UL), (4248373284UL), (3383561277UL), (3128107243UL), (2344292809UL), (1806504793UL), (3087395022UL), (4113720664UL), (2749262038UL), (395148869UL), (1331347439UL), (2682558741UL), (1253966763UL), (4204248490UL), (2083995727UL), (2717069903UL), (4144872894UL), (1857751053UL), (2166276701UL), (1419950839UL), (1145170701UL), (3225260742UL), (211743500UL), (2746391743UL), (3333387219UL), (4115426799UL), (3801457092UL), (3327614811UL), (1460971336UL), (2256342146UL), (3186427137UL), (2684216499UL), (1035644397UL), (2948948308UL)}, {(216975964UL), (4145824263UL), (2147471723UL), (4154469597UL), (161744273UL), (1299764439UL), (3468614543UL), (4190517158UL), (4124232403UL), (754999274UL), (208153182UL), (1442063188UL), (2940825403UL), (729331312UL), (2124186505UL), (1136411459UL), (1083787490UL), (442264548UL), (442338468UL), (464589685UL), (3509461223UL), (4241734851UL), (370778328UL), (4003105058UL), (3163637982UL), (3747133182UL), (1433548371UL), (1876378240UL), (536564977UL), (1171222160UL), (3268902719UL), (2725776746UL), (1547771137UL), (2818791461UL), (4129042013UL), (2677094853UL), (1594765197UL), (1556725424UL), (569252594UL), (2640731848UL), (2947042710UL), (2633188904UL), (1640957370UL), (1806863786UL), (2803403654UL), (2632220187UL), (2740076538UL), (383549855UL), (3211856699UL), (3933793958UL), (1988232112UL), (404006876UL), (1369488120UL), (1963339964UL), (609604643UL), (2488118016UL), (3936354252UL), (1980115609UL), (189069630UL), (860670414UL), (85775513UL), (2447581620UL), (886385122UL), (3047212472UL), (2470718978UL), (4044569663UL), (430717074UL), (1598133481UL), (1905362808UL), (2981511487UL), (1842297666UL), (2992320857UL), (1682119455UL), (1753461544UL), (700013801UL), (3025873251UL), (3413358770UL), (1673092091UL), (113651375UL), (2618875026UL), (1479752146UL), (81598739UL), (1530418117UL), (962911586UL), (778994423UL), (3944331100UL), (4116504755UL), (480712357UL), (1078821437UL), (1091665476UL), (3696871260UL), (2074607518UL), (3226459752UL), (3767432525UL), (768289441UL), (3142741843UL), (2969151790UL), (1814889320UL), (2122849610UL), (451935137UL), (2784993892UL), (1836517944UL), (1565951586UL), (1663606442UL), (1578543925UL), (33407321UL), (1445768530UL), (2156093253UL), (3164165477UL), (3093293932UL), (298945371UL), (2558835427UL), (1386275152UL), (2649603495UL), (893605644UL), (1147537351UL), (1889670166UL), (3203610476UL), (2598985714UL), (966335150UL), (3384227644UL), (2584671737UL), (552770393UL), (2430097209UL), (3085150053UL), (3633667948UL), (1319147485UL), (1999467843UL), (3676133150UL), (2314789604UL), (1443760911UL), (1552954684UL), (2411684219UL), (3708965016UL), (2607719926UL), (484007519UL), (491681421UL), (2498192461UL), (6342020UL), (4226570819UL), (2329860147UL), (1097040622UL), (1270325434UL), (2572535504UL), (918592905UL), (193599782UL), (4223250613UL), (1640082589UL), (1817957216UL), (2937344769UL), (3768793871UL), (2982566292UL), (1607453458UL), (4096207317UL), (696907828UL), (2431936270UL), (627206620UL), (3267100287UL), (1161821973UL), (2322099303UL), (1700245615UL), (216975964UL), (4145824263UL), (2147471723UL), (4154469597UL), (2836499116UL), (1299764439UL), (3468614543UL), (4190517158UL), (4124232403UL), (2176257299UL), (208153182UL), (1442063188UL), (2940825403UL), (729331312UL), (2954254860UL), (1136411459UL), (1083787490UL), (442264548UL), (442338468UL), (3098695824UL), (3509461223UL), (4241734851UL), (370778328UL), (4003105058UL), (2963948505UL), (3747133182UL), (1433548371UL), (1876378240UL), (536564977UL), (1565224991UL), (3268902719UL), (2725776746UL), (1547771137UL), (2818791461UL), (2118790546UL), (2677094853UL), (1594765197UL), (1556725424UL), (569252594UL), (610771792UL), (2947042710UL), (2633188904UL), (1640957370UL), (1806863786UL), (2121022793UL), (2632220187UL), (2740076538UL), (383549855UL), (3211856699UL), (14274926UL), (1988232112UL), (404006876UL), (1369488120UL), (1963339964UL), (1661081792UL), (2488118016UL), (3936354252UL), (1980115609UL), (189069630UL), (595192504UL), (85775513UL), (2447581620UL), (886385122UL), (3047212472UL), (1596069326UL), (4044569663UL), (430717074UL), (1598133481UL), (1905362808UL), (2670961612UL), (1842297666UL), (2992320857UL), (1682119455UL), (1753461544UL), (1121764918UL), (3025873251UL), (3413358770UL), (1673092091UL), (113651375UL), (1721474883UL), (1479752146UL), (81598739UL), (1530418117UL), (962911586UL), (3478535046UL), (3944331100UL), (4116504755UL), (480712357UL), (1078821437UL), (1456786415UL), (3696871260UL), (2074607518UL), (3226459752UL), (3767432525UL), (2947648865UL), (3142741843UL), (2969151790UL), (1814889320UL), (2122849610UL), (3367879697UL), (2784993892UL), (1836517944UL), (1565951586UL), (1663606442UL), (2621366329UL), (33407321UL), (1445768530UL), (2156093253UL), (3164165477UL), (619266142UL), (298945371UL), (2558835427UL), (1386275152UL), (2649603495UL), (97967685UL), (1147537351UL), (1889670166UL), (3203610476UL), (2598985714UL), (504495866UL), (3384227644UL), (2584671737UL), (552770393UL), (2430097209UL), (2168477293UL), (3633667948UL), (1319147485UL), (1999467843UL), (3676133150UL), (2755203144UL), (1443760911UL), (1552954684UL), (2411684219UL), (3708965016UL), (2301846628UL), (484007519UL), (491681421UL), (2498192461UL), (6342020UL), (318325395UL), (2329860147UL), (1097040622UL), (1270325434UL), (2572535504UL), (3458698828UL), (193599782UL), (4223250613UL), (1640082589UL), (1817957216UL), (1861636211UL), (3768793871UL), (2982566292UL), (1607453458UL), (4096207317UL), (1871072589UL), (2431936270UL), (627206620UL), (3267100287UL), (1161821973UL), (3904037207UL), (1700245615UL), (216975964UL), (4145824263UL), (2147471723UL), (2789343849UL), (2836499116UL), (1299764439UL), (3468614543UL), (4190517158UL), (639361502UL), (2176257299UL), (208153182UL), (1442063188UL), (2940825403UL), (2962998954UL), (2954254860UL), (1136411459UL), (1083787490UL), (442264548UL), (1812626669UL), (3098695824UL), (3509461223UL), (4241734851UL), (370778328UL), (1673951193UL), (2963948505UL), (3747133182UL), (1433548371UL), (1876378240UL), (3651623536UL), (1565224991UL), (3268902719UL), (2725776746UL), (1547771137UL), (1938402968UL), (2118790546UL), (2677094853UL), (1594765197UL), (1556725424UL), (3267956202UL), (610771792UL), (2947042710UL), (2633188904UL), (1640957370UL), (1448040688UL), (2121022793UL), (2632220187UL), (2740076538UL), (383549855UL), (300148175UL), (14274926UL), (1988232112UL), (404006876UL), (1369488120UL), (3313508750UL), (1661081792UL), (2488118016UL), (3936354252UL), (1980115609UL), (2631341293UL), (595192504UL), (85775513UL), (2447581620UL), (886385122UL), (2465820467UL), (1596069326UL), (4044569663UL), (430717074UL), (1598133481UL), (4191772516UL), (2670961612UL), (1842297666UL), (2992320857UL), (1682119455UL), (997741285UL), (1121764918UL), (3025873251UL), (3413358770UL), (1673092091UL), (1493832846UL), (1721474883UL), (1479752146UL), (81598739UL), (1530418117UL), (2762019274UL), (3478535046UL), (3944331100UL), (4116504755UL), (480712357UL), (448437372UL), (1456786415UL), (3696871260UL), (2074607518UL), (3226459752UL), (2507199309UL), (2947648865UL), (3142741843UL), (2969151790UL), (1814889320UL), (2268952501UL), (3367879697UL), (2784993892UL), (1836517944UL), (1565951586UL), (377207573UL), (2621366329UL), (33407321UL), (1445768530UL), (2156093253UL), (1325490318UL), (619266142UL), (298945371UL), (2558835427UL), (1386275152UL), (2662699426UL), (97967685UL), (1147537351UL), (1889670166UL), (3203610476UL), (1999783658UL), (504495866UL), (3384227644UL), (2584671737UL), (552770393UL), (1562106652UL), (2168477293UL), (3633667948UL), (1319147485UL), (1999467843UL), (2037219988UL), (2755203144UL), (1443760911UL), (1552954684UL), (2411684219UL), (1579607443UL), (2301846628UL), (484007519UL), (491681421UL), (2498192461UL), (745333677UL), (318325395UL), (2329860147UL), (1097040622UL), (1270325434UL), (208017379UL), (3458698828UL), (193599782UL), (4223250613UL), (1640082589UL), (4049245262UL), (1861636211UL), (3768793871UL), (2982566292UL), (1607453458UL), (2058912455UL), (1871072589UL), (2431936270UL), (627206620UL), (3267100287UL), (1186015034UL), (3904037207UL), (1700245615UL), (216975964UL), (4145824263UL), (2422827462UL), (2789343849UL), (2836499116UL), (1299764439UL), (3468614543UL), (2084839633UL), (639361502UL), (2176257299UL), (208153182UL), (1442063188UL), (4065931048UL), (2962998954UL), (2954254860UL), (1136411459UL), (1083787490UL), (465529524UL), (1812626669UL), (3098695824UL), (3509461223UL), (4241734851UL), (3818602366UL), (1673951193UL), (2963948505UL), (3747133182UL), (1433548371UL), (2475307467UL), (3651623536UL), (1565224991UL), (3268902719UL), (2725776746UL), (2374226870UL), (1938402968UL), (2118790546UL), (2677094853UL), (1594765197UL), (348828658UL), (3267956202UL), (610771792UL), (2947042710UL), (2633188904UL), (1713124265UL), (1448040688UL), (2121022793UL), (2632220187UL), (2740076538UL), (1400362266UL), (300148175UL), (14274926UL), (1988232112UL), (404006876UL), (3662575932UL), (3313508750UL), (1661081792UL), (2488118016UL), (3936354252UL), (3100635752UL), (2631341293UL), (595192504UL), (85775513UL), (2447581620UL), (2417839883UL), (2465820467UL), (1596069326UL), (4044569663UL), (430717074UL), (1093503127UL), (4191772516UL), (2670961612UL), (1842297666UL), (2992320857UL), (3292586028UL), (997741285UL), (1121764918UL), (3025873251UL), (3413358770UL), (222522839UL), (1493832846UL), (1721474883UL), (1479752146UL), (81598739UL), (3132900738UL), (2762019274UL), (3478535046UL), (3944331100UL), (4116504755UL), (3429405501UL), (448437372UL), (1456786415UL), (3696871260UL), (2074607518UL), (1492852861UL), (2507199309UL), (2947648865UL), (3142741843UL), (2969151790UL), (2186889362UL), (2268952501UL), (3367879697UL), (2784993892UL), (1836517944UL), (3169157745UL), (377207573UL), (2621366329UL), (33407321UL), (1445768530UL), (4266168148UL), (1325490318UL), (619266142UL), (298945371UL), (2558835427UL), (1447045944UL), (2662699426UL), (97967685UL), (1147537351UL), (1889670166UL), (3354555370UL), (1999783658UL), (504495866UL), (3384227644UL), (2584671737UL), (2489662408UL), (1562106652UL), (2168477293UL), (3633667948UL), (1319147485UL), (3353555249UL), (2037219988UL), (2755203144UL), (1443760911UL), (1552954684UL), (4137514176UL), (1579607443UL), (2301846628UL), (484007519UL), (491681421UL), (164627749UL), (745333677UL), (318325395UL), (2329860147UL), (1097040622UL), (3587444362UL), (208017379UL), (3458698828UL), (193599782UL), (4223250613UL), (1102471426UL), (4049245262UL), (1861636211UL), (3768793871UL), (2982566292UL), (1941698603UL), (2058912455UL), (1871072589UL), (2431936270UL), (627206620UL), (2511999766UL), (1406946444UL), (1571284360UL), (1416792763UL), (1774410400UL), (1655066897UL), (740531687UL), (2852637013UL), (1574342442UL), (3931672444UL), (2887289502UL), (3588598337UL), (1607795590UL), (1893126336UL), (4113959952UL), (250670029UL), (89330705UL), (2198706475UL), (133060312UL), (4033807246UL), (2161604768UL), (3871950931UL), (1820516188UL), (828316231UL), (3126087794UL), (3740050736UL), (543577819UL), (1589693651UL), (4210480257UL), (3844498352UL), (96010254UL), (2888517657UL), (2931088981UL), (2307454606UL), (2411141663UL), (4193964276UL), (918899600UL), (888509951UL), (3023902229UL), (1371276096UL), (2107726407UL), (3863079906UL), (3849297291UL), (1512401618UL), (3098628219UL), (487705749UL), (492891601UL), (345791371UL), (3230138831UL), (1022138839UL), (974682588UL), (3677932604UL), (2054641860UL), (3303576494UL), (1416653965UL), (1119635666UL), (1907978487UL), (4269977208UL), (2047880336UL), (205698774UL), (2401894999UL), (3253173123UL), (2603439113UL), (1295808319UL), (2965198050UL), (1718424301UL), (1605627562UL), (2860017421UL), (1619060227UL), (1130717786UL), (2992070906UL), (2964091191UL), (3192265220UL), (3860528275UL), (45139953UL), (3914023193UL), (1253834497UL), (3885013544UL), (3793695046UL), (3632364934UL), (4127361980UL), (3323804519UL), (4117285262UL), (4171102020UL), (1863837906UL), (2848174924UL), (1731389076UL), (2514130112UL), (3539384422UL), (2950752200UL), (1138137434UL), (4147328087UL), (3345958235UL), (2305097760UL), (974161669UL), (1739611700UL), (2522036172UL), (1196649816UL), (2395301283UL), (911135539UL), (1029496076UL), (1786766951UL), (1802412425UL), (3485017668UL), (2837835718UL), (1951207514UL), (1447650206UL), (2289702688UL), (2517625074UL), (2408021138UL), (2022522416UL), (719777136UL), (417238676UL), (1865171065UL), (801820378UL), (2836941189UL), (1148226009UL), (1713866138UL), (64608707UL), (1458585813UL), (3581572089UL), (2251042907UL), (1818903516UL), (3278072806UL), (2838874249UL), (2665607605UL), (3360214955UL), (2185961451UL), (410342713UL), (364484774UL), (2887998484UL), (2100888426UL), (1394314931UL), (1362560504UL), (3487221127UL), (3140021092UL), (3168968161UL), (1613267484UL), (290430673UL), (2588210538UL), (2493788232UL), (2641638765UL), (2971195072UL), (2749469779UL), (692014176UL), (3268150742UL), (387451740UL), (461249727UL), (3579417331UL), (3738405845UL), (385445455UL), (1464799053UL), (2786433795UL), (3370371952UL), (675344511UL), (4049011269UL), (2196568686UL), (4166285481UL), (2547135972UL), (119952106UL)}, {(2307933966UL), (145940188UL), (4247815717UL), (2995341855UL), (3245382498UL), (1213200792UL), (232910392UL), (2718014238UL), (918321585UL), (3583102265UL), (3176078796UL), (937696513UL), (266558688UL), (1520650260UL), (3655025189UL), (1653323191UL), (538426778UL), (491545855UL), (4064663509UL), (2788350755UL), (3941259490UL), (3471552693UL), (1851151228UL), (3279627338UL), (845228710UL), (29883500UL), (1503432309UL), (593880175UL), (2488716480UL), (828058076UL), (3287933183UL), (3510981973UL), (3970051135UL), (3803049980UL), (898259836UL), (2890959433UL), (234437380UL), (201835406UL), (1523016285UL), (2419577439UL), (2943482079UL), (4219300984UL), (1490698759UL), (533411805UL), (1644926459UL), (4097374623UL), (265292490UL), (2694560848UL), (285667083UL), (1563945375UL), (3128365011UL), (95277844UL), (2938824634UL), (2717708621UL), (3374928056UL), (3672802273UL), (3445399260UL), (2422205637UL), (1106030557UL), (1269805720UL), (1781057614UL), (3491203689UL), (2454028630UL), (2158698380UL), (2578431870UL), (3540412661UL), (2206372988UL), (3138025266UL), (474100503UL), (3310048546UL), (126856999UL), (3144057206UL), (917199551UL), (3549528813UL), (343855771UL), (391118877UL), (1900257963UL), (1616289477UL), (3663959751UL), (1887891784UL), (697303016UL), (1346369879UL), (3634838543UL), (909311683UL), (3534738830UL), (2676838865UL), (3020679234UL), (1248902118UL), (1517698896UL), (414632197UL), (199589058UL), (2922557451UL), (3915079510UL), (1309075563UL), (3836275459UL), (2549095941UL), (1643088840UL), (1153547003UL), (2254144060UL), (3585420425UL), (915059870UL), (2410951596UL), (1876156254UL), (2384812180UL), (3893647829UL), (4119002503UL), (1535078752UL), (3888310943UL), (1483731374UL), (3915992153UL), (3662664617UL), (1065246672UL), (2307959656UL), (1845927873UL), (2075990232UL), (1346396900UL), (4218283385UL), (3427468026UL), (1518645158UL), (3092538772UL), (3383570452UL), (1317710387UL), (3390054918UL), (4222595168UL), (2468387909UL), (3864538174UL), (2442851586UL), (1858344050UL), (1537617445UL), (1090881039UL), (2055021834UL), (4011332463UL), (2797336692UL), (280272261UL), (3350338577UL), (1682666744UL), (1256176165UL), (2017003515UL), (3666229067UL), (4288064377UL), (3407437449UL), (2957152445UL), (3557139753UL), (4106922773UL), (2612653316UL), (3491950269UL), (1107293753UL), (2926461368UL), (1433860998UL), (1975669351UL), (1680462513UL), (4283282673UL), (168788571UL), (57021447UL), (3888396304UL), (2218068386UL), (2170981202UL), (1587568797UL), (2097820654UL), (1308061343UL), (4096726326UL), (2307933966UL), (145940188UL), (4247815717UL), (2995341855UL), (2894586378UL), (1213200792UL), (232910392UL), (2718014238UL), (918321585UL), (520434726UL), (3176078796UL), (937696513UL), (266558688UL), (1520650260UL), (645408471UL), (1653323191UL), (538426778UL), (491545855UL), (4064663509UL), (2605358672UL), (3941259490UL), (3471552693UL), (1851151228UL), (3279627338UL), (1290188176UL), (29883500UL), (1503432309UL), (593880175UL), (2488716480UL), (1172244224UL), (3287933183UL), (3510981973UL), (3970051135UL), (3803049980UL), (3836242189UL), (2890959433UL), (234437380UL), (201835406UL), (1523016285UL), (1720566850UL), (2943482079UL), (4219300984UL), (1490698759UL), (533411805UL), (982587365UL), (4097374623UL), (265292490UL), (2694560848UL), (285667083UL), (3905392425UL), (3128365011UL), (95277844UL), (2938824634UL), (2717708621UL), (262111126UL), (3672802273UL), (3445399260UL), (2422205637UL), (1106030557UL), (233401560UL), (1781057614UL), (3491203689UL), (2454028630UL), (2158698380UL), (3314008662UL), (3540412661UL), (2206372988UL), (3138025266UL), (474100503UL), (1150191741UL), (126856999UL), (3144057206UL), (917199551UL), (3549528813UL), (84516590UL), (391118877UL), (1900257963UL), (1616289477UL), (3663959751UL), (2831036790UL), (697303016UL), (1346369879UL), (3634838543UL), (909311683UL), (2206291004UL), (2676838865UL), (3020679234UL), (1248902118UL), (1517698896UL), (882506847UL), (199589058UL), (2922557451UL), (3915079510UL), (1309075563UL), (3675129276UL), (2549095941UL), (1643088840UL), (1153547003UL), (2254144060UL), (1702669516UL), (915059870UL), (2410951596UL), (1876156254UL), (2384812180UL), (393602062UL), (4119002503UL), (1535078752UL), (3888310943UL), (1483731374UL), (1135074988UL), (3662664617UL), (1065246672UL), (2307959656UL), (1845927873UL), (883002610UL), (1346396900UL), (4218283385UL), (3427468026UL), (1518645158UL), (1478839081UL), (3383570452UL), (1317710387UL), (3390054918UL), (4222595168UL), (3009846855UL), (3864538174UL), (2442851586UL), (1858344050UL), (1537617445UL), (2419526192UL), (2055021834UL), (4011332463UL), (2797336692UL), (280272261UL), (2937342669UL), (1682666744UL), (1256176165UL), (2017003515UL), (3666229067UL), (3563024742UL), (3407437449UL), (2957152445UL), (3557139753UL), (4106922773UL), (610182860UL), (3491950269UL), (1107293753UL), (2926461368UL), (1433860998UL), (2493047579UL), (1680462513UL), (4283282673UL), (168788571UL), (57021447UL), (2151356582UL), (2218068386UL), (2170981202UL), (1587568797UL), (2097820654UL), (2738927570UL), (4096726326UL), (2307933966UL), (145940188UL), (4247815717UL), (1887236689UL), (2894586378UL), (1213200792UL), (232910392UL), (2718014238UL), (2028538736UL), (520434726UL), (3176078796UL), (937696513UL), (266558688UL), (305624632UL), (645408471UL), (1653323191UL), (538426778UL), (491545855UL), (4188864445UL), (2605358672UL), (3941259490UL), (3471552693UL), (1851151228UL), (1720039364UL), (1290188176UL), (29883500UL), (1503432309UL), (593880175UL), (2595662526UL), (1172244224UL), (3287933183UL), (3510981973UL), (3970051135UL), (2763703998UL), (3836242189UL), (2890959433UL), (234437380UL), (201835406UL), (2652280530UL), (1720566850UL), (2943482079UL), (4219300984UL), (1490698759UL), (1968049758UL), (982587365UL), (4097374623UL), (265292490UL), (2694560848UL), (1165326939UL), (3905392425UL), (3128365011UL), (95277844UL), (2938824634UL), (2521869983UL), (262111126UL), (3672802273UL), (3445399260UL), (2422205637UL), (395183943UL), (233401560UL), (1781057614UL), (3491203689UL), (2454028630UL), (249721174UL), (3314008662UL), (3540412661UL), (2206372988UL), (3138025266UL), (1644439373UL), (1150191741UL), (126856999UL), (3144057206UL), (917199551UL), (1997133400UL), (84516590UL), (391118877UL), (1900257963UL), (1616289477UL), (3843764922UL), (2831036790UL), (697303016UL), (1346369879UL), (3634838543UL), (1901125181UL), (2206291004UL), (2676838865UL), (3020679234UL), (1248902118UL), (344347894UL), (882506847UL), (199589058UL), (2922557451UL), (3915079510UL), (2919277604UL), (3675129276UL), (2549095941UL), (1643088840UL), (1153547003UL), (3305575634UL), (1702669516UL), (915059870UL), (2410951596UL), (1876156254UL), (1416053196UL), (393602062UL), (4119002503UL), (1535078752UL), (3888310943UL), (3993632377UL), (1135074988UL), (3662664617UL), (1065246672UL), (2307959656UL), (1044670394UL), (883002610UL), (1346396900UL), (4218283385UL), (3427468026UL), (1792832168UL), (1478839081UL), (3383570452UL), (1317710387UL), (3390054918UL), (1596709924UL), (3009846855UL), (3864538174UL), (2442851586UL), (1858344050UL), (2428482265UL), (2419526192UL), (2055021834UL), (4011332463UL), (2797336692UL), (424213503UL), (2937342669UL), (1682666744UL), (1256176165UL), (2017003515UL), (717473071UL), (3563024742UL), (3407437449UL), (2957152445UL), (3557139753UL), (3319575432UL), (610182860UL), (3491950269UL), (1107293753UL), (2926461368UL), (3052637648UL), (2493047579UL), (1680462513UL), (4283282673UL), (168788571UL), (1401253163UL), (2151356582UL), (2218068386UL), (2170981202UL), (1587568797UL), (3994937670UL), (2738927570UL), (4096726326UL), (2307933966UL), (145940188UL), (3928146647UL), (1887236689UL), (2894586378UL), (1213200792UL), (232910392UL), (833120806UL), (2028538736UL), (520434726UL), (3176078796UL), (937696513UL), (3704968451UL), (305624632UL), (645408471UL), (1653323191UL), (538426778UL), (939335571UL), (4188864445UL), (2605358672UL), (3941259490UL), (3471552693UL), (2168499975UL), (1720039364UL), (1290188176UL), (29883500UL), (1503432309UL), (524387655UL), (2595662526UL), (1172244224UL), (3287933183UL), (3510981973UL), (2444664749UL), (2763703998UL), (3836242189UL), (2890959433UL), (234437380UL), (3272987579UL), (2652280530UL), (1720566850UL), (2943482079UL), (4219300984UL), (1045589319UL), (1968049758UL), (982587365UL), (4097374623UL), (265292490UL), (1077412791UL), (1165326939UL), (3905392425UL), (3128365011UL), (95277844UL), (2896038035UL), (2521869983UL), (262111126UL), (3672802273UL), (3445399260UL), (4273256145UL), (395183943UL), (233401560UL), (1781057614UL), (3491203689UL), (8343453UL), (249721174UL), (3314008662UL), (3540412661UL), (2206372988UL), (3738630867UL), (1644439373UL), (1150191741UL), (126856999UL), (3144057206UL), (65169501UL), (1997133400UL), (84516590UL), (391118877UL), (1900257963UL), (2914085557UL), (3843764922UL), (2831036790UL), (697303016UL), (1346369879UL), (2007568079UL), (1901125181UL), (2206291004UL), (2676838865UL), (3020679234UL), (2097032931UL), (344347894UL), (882506847UL), (199589058UL), (2922557451UL), (3740400148UL), (2919277604UL), (3675129276UL), (2549095941UL), (1643088840UL), (199560818UL), (3305575634UL), (1702669516UL), (915059870UL), (2410951596UL), (117939268UL), (1416053196UL), (393602062UL), (4119002503UL), (1535078752UL), (4281599711UL), (3993632377UL), (1135074988UL), (3662664617UL), (1065246672UL), (2854253374UL), (1044670394UL), (883002610UL), (1346396900UL), (4218283385UL), (803910659UL), (1792832168UL), (1478839081UL), (3383570452UL), (1317710387UL), (1311168874UL), (1596709924UL), (3009846855UL), (3864538174UL), (2442851586UL), (1967982878UL), (2428482265UL), (2419526192UL), (2055021834UL), (4011332463UL), (2725198749UL), (424213503UL), (2937342669UL), (1682666744UL), (1256176165UL), (713350501UL), (717473071UL), (3563024742UL), (3407437449UL), (2957152445UL), (2363682828UL), (3319575432UL), (610182860UL), (3491950269UL), (1107293753UL), (3429638328UL), (3052637648UL), (2493047579UL), (1680462513UL), (4283282673UL), (2672311163UL), (1401253163UL), (2151356582UL), (2218068386UL), (2170981202UL), (431601500UL), (4193143261UL), (2985267149UL), (1556712183UL), (4135181832UL), (285960576UL), (81711096UL), (57066962UL), (2646151573UL), (3692824605UL), (485132216UL), (2799654118UL), (903527523UL), (1210637484UL), (3195346614UL), (599540837UL), (1410108963UL), (3723542120UL), (1350764011UL), (1717225239UL), (239736775UL), (3946934722UL), (420024332UL), (589304817UL), (1331122625UL), (4294403247UL), (2009397371UL), (844641869UL), (166387728UL), (4093361096UL), (2342369656UL), (3958170613UL), (1660376297UL), (1259528150UL), (4240809115UL), (2875563845UL), (2613790323UL), (2869665108UL), (1414690635UL), (944649070UL), (3539368342UL), (199532147UL), (2707660205UL), (2258475730UL), (771169023UL), (158544851UL), (588872178UL), (2002019277UL), (4225148852UL), (641266809UL), (2133909450UL), (330112418UL), (1815776319UL), (1949213618UL), (3868452239UL), (2702722715UL), (2491030937UL), (468812562UL), (3226259052UL), (199165016UL), (436679774UL), (881956108UL), (1098105661UL), (68909298UL), (248572829UL), (339224422UL), (553849953UL), (3054752668UL), (701934162UL), (1898925107UL), (749060575UL), (987950022UL), (4040401060UL), (684345838UL), (3449205676UL), (2583450513UL), (433795092UL), (3559011048UL), (293161429UL), (3947766299UL), (3491895171UL), (1651265910UL), (1216468759UL), (1625512737UL), (412235874UL), (893680794UL), (2582820523UL), (1514322840UL), (2348781204UL), (2720801933UL), (3364999370UL), (2822073391UL), (2627166519UL), (3805500773UL), (177760590UL), (2210728920UL), (3136345252UL), (3226658259UL), (3982978003UL), (86264452UL), (536816704UL), (3489051867UL), (2161950016UL), (1375640747UL), (4116957650UL), (3676292350UL), (3001078542UL), (1379688752UL), (3059678152UL), (3740664918UL), (475697670UL), (539253230UL), (1256048653UL), (3819847913UL), (141216227UL), (3888391528UL), (3567424851UL), (4131097532UL), (2142453586UL), (3606575354UL), (3689715433UL), (2318212425UL), (3026095399UL), (2451038695UL), (4052322172UL), (1861782452UL), (3032216562UL), (4078403318UL), (2636775961UL), (2188864067UL), (3276459319UL), (2230349722UL), (3939784264UL), (831216291UL), (2483460713UL), (2571551493UL), (484276565UL), (3173595164UL), (4177831244UL), (4132249231UL), (2116763555UL), (1420812998UL), (2121017321UL), (2855491215UL), (1630144518UL), (2489688364UL), (411521312UL), (3713786536UL), (4177871972UL), (690465497UL), (855092147UL), (4271606539UL), (1265108699UL), (3757106624UL), (3151574897UL), (670335437UL), (3099376310UL), (3946436509UL), (1795346235UL), (4013409945UL)}, {(650684252UL), (2220445579UL), (537394374UL), (571322423UL), (2781663439UL), (899394682UL), (364129622UL), (328438826UL), (1219862153UL), (830435885UL), (3278649457UL), (3072225531UL), (2838645991UL), (3150905380UL), (1251952499UL), (1751415553UL), (2034088483UL), (1437197870UL), (1907624878UL), (1786974150UL), (4207811086UL), (768131803UL), (2713210999UL), (4004509777UL), (3510764535UL), (2740991637UL), (3000313526UL), (1355959320UL), (938244439UL), (4093313692UL), (2476002145UL), (835527260UL), (2084758949UL), (4223775017UL), (91645393UL), (2251723899UL), (3159477758UL), (2008655575UL), (912220875UL), (1525327655UL), (2067948386UL), (2006141522UL), (450235614UL), (3945671083UL), (2852189452UL), (3804118704UL), (3302604345UL), (1712745267UL), (349281154UL), (19331179UL), (3423301791UL), (416995358UL), (2049170698UL), (684574142UL), (3271042138UL), (3438668017UL), (1645378852UL), (1995123150UL), (1835887948UL), (2347182898UL), (3828432892UL), (3710259931UL), (713144773UL), (3246285450UL), (2196135622UL), (1611287338UL), (2845388948UL), (3690657633UL), (2403178686UL), (2946296994UL), (2180908599UL), (3072014497UL), (3436535724UL), (2948908116UL), (3080353236UL), (1669938872UL), (3572731079UL), (1100892983UL), (308060688UL), (3092946261UL), (2725115972UL), (887278263UL), (991869336UL), (3597899723UL), (3454505181UL), (1108269267UL), (851855066UL), (1940998002UL), (3539084542UL), (3102161424UL), (965450940UL), (1942363226UL), (1430246588UL), (1368971075UL), (4251556311UL), (642683738UL), (3035789355UL), (1829444044UL), (4234626091UL), (671403403UL), (2809844786UL), (2251172733UL), (970188857UL), (3910072565UL), (1131847479UL), (3397535176UL), (3290884849UL), (861868157UL), (2811422184UL), (3280310458UL), (3502085520UL), (1499698865UL), (2446269873UL), (236680785UL), (1896103604UL), (1179896471UL), (83960622UL), (3303129336UL), (1191373247UL), (177898275UL), (3077388457UL), (1022975703UL), (2535144448UL), (8680269UL), (3602435630UL), (1810825915UL), (2293529378UL), (2307085218UL), (483894148UL), (2872435038UL), (2043868156UL), (3038491874UL), (3786518530UL), (3606440668UL), (3336713377UL), (120183042UL), (86901386UL), (2233164457UL), (2881782972UL), (3135264768UL), (2294460421UL), (2996668315UL), (658184098UL), (3558825846UL), (2386173040UL), (1950463910UL), (551627788UL), (2464303444UL), (893474565UL), (3277869222UL), (2852725906UL), (1191310725UL), (2398932683UL), (4164956002UL), (1689291769UL), (2619288187UL), (3429362702UL), (3205668166UL), (1668126623UL), (955771270UL), (2106753333UL), (650684252UL), (2220445579UL), (537394374UL), (571322423UL), (2369694095UL), (899394682UL), (364129622UL), (328438826UL), (1219862153UL), (4195985755UL), (3278649457UL), (3072225531UL), (2838645991UL), (3150905380UL), (2389919UL), (1751415553UL), (2034088483UL), (1437197870UL), (1907624878UL), (1516966376UL), (4207811086UL), (768131803UL), (2713210999UL), (4004509777UL), (1955929377UL), (2740991637UL), (3000313526UL), (1355959320UL), (938244439UL), (4263287583UL), (2476002145UL), (835527260UL), (2084758949UL), (4223775017UL), (110659216UL), (2251723899UL), (3159477758UL), (2008655575UL), (912220875UL), (2378803214UL), (2067948386UL), (2006141522UL), (450235614UL), (3945671083UL), (4112321452UL), (3804118704UL), (3302604345UL), (1712745267UL), (349281154UL), (3834044005UL), (3423301791UL), (416995358UL), (2049170698UL), (684574142UL), (3651360887UL), (3438668017UL), (1645378852UL), (1995123150UL), (1835887948UL), (1022257616UL), (3828432892UL), (3710259931UL), (713144773UL), (3246285450UL), (2485142597UL), (1611287338UL), (2845388948UL), (3690657633UL), (2403178686UL), (2201888000UL), (2180908599UL), (3072014497UL), (3436535724UL), (2948908116UL), (1647734358UL), (1669938872UL), (3572731079UL), (1100892983UL), (308060688UL), (592016509UL), (2725115972UL), (887278263UL), (991869336UL), (3597899723UL), (819708104UL), (1108269267UL), (851855066UL), (1940998002UL), (3539084542UL), (3156419045UL), (965450940UL), (1942363226UL), (1430246588UL), (1368971075UL), (224112021UL), (642683738UL), (3035789355UL), (1829444044UL), (4234626091UL), (314715303UL), (2809844786UL), (2251172733UL), (970188857UL), (3910072565UL), (155628632UL), (3397535176UL), (3290884849UL), (861868157UL), (2811422184UL), (1847583676UL), (3502085520UL), (1499698865UL), (2446269873UL), (236680785UL), (3698448762UL), (1179896471UL), (83960622UL), (3303129336UL), (1191373247UL), (1567908030UL), (3077388457UL), (1022975703UL), (2535144448UL), (8680269UL), (3979982957UL), (1810825915UL), (2293529378UL), (2307085218UL), (483894148UL), (4003402870UL), (2043868156UL), (3038491874UL), (3786518530UL), (3606440668UL), (3062185402UL), (120183042UL), (86901386UL), (2233164457UL), (2881782972UL), (3345668738UL), (2294460421UL), (2996668315UL), (658184098UL), (3558825846UL), (2121278529UL), (1950463910UL), (551627788UL), (2464303444UL), (893474565UL), (183176481UL), (2852725906UL), (1191310725UL), (2398932683UL), (4164956002UL), (788617081UL), (2619288187UL), (3429362702UL), (3205668166UL), (1668126623UL), (29124108UL), (2106753333UL), (650684252UL), (2220445579UL), (537394374UL), (725338795UL), (2369694095UL), (899394682UL), (364129622UL), (328438826UL), (1727397396UL), (4195985755UL), (3278649457UL), (3072225531UL), (2838645991UL), (583924693UL), (2389919UL), (1751415553UL), (2034088483UL), (1437197870UL), (1017611325UL), (1516966376UL), (4207811086UL), (768131803UL), (2713210999UL), (761144580UL), (1955929377UL), (2740991637UL), (3000313526UL), (1355959320UL), (840696976UL), (4263287583UL), (2476002145UL), (835527260UL), (2084758949UL), (3729075247UL), (110659216UL), (2251723899UL), (3159477758UL), (2008655575UL), (4127907945UL), (2378803214UL), (2067948386UL), (2006141522UL), (450235614UL), (3240776806UL), (4112321452UL), (3804118704UL), (3302604345UL), (1712745267UL), (1079549936UL), (3834044005UL), (3423301791UL), (416995358UL), (2049170698UL), (3913510119UL), (3651360887UL), (3438668017UL), (1645378852UL), (1995123150UL), (841590980UL), (1022257616UL), (3828432892UL), (3710259931UL), (713144773UL), (1272133892UL), (2485142597UL), (1611287338UL), (2845388948UL), (3690657633UL), (3083851146UL), (2201888000UL), (2180908599UL), (3072014497UL), (3436535724UL), (4162521870UL), (1647734358UL), (1669938872UL), (3572731079UL), (1100892983UL), (986584939UL), (592016509UL), (2725115972UL), (887278263UL), (991869336UL), (2711883653UL), (819708104UL), (1108269267UL), (851855066UL), (1940998002UL), (4050477073UL), (3156419045UL), (965450940UL), (1942363226UL), (1430246588UL), (4285490865UL), (224112021UL), (642683738UL), (3035789355UL), (1829444044UL), (4197159994UL), (314715303UL), (2809844786UL), (2251172733UL), (970188857UL), (3018833494UL), (155628632UL), (3397535176UL), (3290884849UL), (861868157UL), (2883971818UL), (1847583676UL), (3502085520UL), (1499698865UL), (2446269873UL), (2621709156UL), (3698448762UL), (1179896471UL), (83960622UL), (3303129336UL), (2192966710UL), (1567908030UL), (3077388457UL), (1022975703UL), (2535144448UL), (95661399UL), (3979982957UL), (1810825915UL), (2293529378UL), (2307085218UL), (485952375UL), (4003402870UL), (2043868156UL), (3038491874UL), (3786518530UL), (575288835UL), (3062185402UL), (120183042UL), (86901386UL), (2233164457UL), (2864966512UL), (3345668738UL), (2294460421UL), (2996668315UL), (658184098UL), (2892259673UL), (2121278529UL), (1950463910UL), (551627788UL), (2464303444UL), (2699734841UL), (183176481UL), (2852725906UL), (1191310725UL), (2398932683UL), (3505505465UL), (788617081UL), (2619288187UL), (3429362702UL), (3205668166UL), (2157859363UL), (29124108UL), (2106753333UL), (650684252UL), (2220445579UL), (978263237UL), (725338795UL), (2369694095UL), (899394682UL), (364129622UL), (3795063930UL), (1727397396UL), (4195985755UL), (3278649457UL), (3072225531UL), (1996768476UL), (583924693UL), (2389919UL), (1751415553UL), (2034088483UL), (1069211024UL), (1017611325UL), (1516966376UL), (4207811086UL), (768131803UL), (1365857736UL), (761144580UL), (1955929377UL), (2740991637UL), (3000313526UL), (1057560595UL), (840696976UL), (4263287583UL), (2476002145UL), (835527260UL), (76517292UL), (3729075247UL), (110659216UL), (2251723899UL), (3159477758UL), (3272987770UL), (4127907945UL), (2378803214UL), (2067948386UL), (2006141522UL), (1223694226UL), (3240776806UL), (4112321452UL), (3804118704UL), (3302604345UL), (2218568154UL), (1079549936UL), (3834044005UL), (3423301791UL), (416995358UL), (3661322119UL), (3913510119UL), (3651360887UL), (3438668017UL), (1645378852UL), (3606917602UL), (841590980UL), (1022257616UL), (3828432892UL), (3710259931UL), (1270853142UL), (1272133892UL), (2485142597UL), (1611287338UL), (2845388948UL), (131877212UL), (3083851146UL), (2201888000UL), (2180908599UL), (3072014497UL), (2459348479UL), (4162521870UL), (1647734358UL), (1669938872UL), (3572731079UL), (4285199726UL), (986584939UL), (592016509UL), (2725115972UL), (887278263UL), (3824306591UL), (2711883653UL), (819708104UL), (1108269267UL), (851855066UL), (190839383UL), (4050477073UL), (3156419045UL), (965450940UL), (1942363226UL), (1750931697UL), (4285490865UL), (224112021UL), (642683738UL), (3035789355UL), (1544088048UL), (4197159994UL), (314715303UL), (2809844786UL), (2251172733UL), (3155072709UL), (3018833494UL), (155628632UL), (3397535176UL), (3290884849UL), (4153861738UL), (2883971818UL), (1847583676UL), (3502085520UL), (1499698865UL), (1780983485UL), (2621709156UL), (3698448762UL), (1179896471UL), (83960622UL), (3849402190UL), (2192966710UL), (1567908030UL), (3077388457UL), (1022975703UL), (1639944917UL), (95661399UL), (3979982957UL), (1810825915UL), (2293529378UL), (3477014442UL), (485952375UL), (4003402870UL), (2043868156UL), (3038491874UL), (1482314580UL), (575288835UL), (3062185402UL), (120183042UL), (86901386UL), (3129494022UL), (2864966512UL), (3345668738UL), (2294460421UL), (2996668315UL), (1986664970UL), (2892259673UL), (2121278529UL), (1950463910UL), (551627788UL), (3105369079UL), (2699734841UL), (183176481UL), (2852725906UL), (1191310725UL), (3154591925UL), (3505505465UL), (788617081UL), (2619288187UL), (3429362702UL), (4204415531UL), (1321048315UL), (4247243973UL), (3085535935UL), (114618345UL), (2126710176UL), (1857709117UL), (3744103666UL), (304437872UL), (2388303947UL), (1802971382UL), (2099900439UL), (2543837819UL), (593111133UL), (3788847386UL), (1479546758UL), (4095492150UL), (240996968UL), (3423191009UL), (2666077260UL), (884572403UL), (2988847666UL), (928827215UL), (2549465610UL), (2773670136UL), (708214104UL), (2594951780UL), (1076989709UL), (2850313793UL), (1401578686UL), (4100639899UL), (2353261688UL), (1323066237UL), (31664438UL), (951240198UL), (3676836716UL), (3633113483UL), (3262159382UL), (981784748UL), (1172850762UL), (3106238289UL), (3118297408UL), (4207023277UL), (3362324732UL), (844983306UL), (3790928628UL), (4156848237UL), (2638267501UL), (1494090858UL), (3955182404UL), (1193294064UL), (4035152789UL), (2971914580UL), (2865046609UL), (3782329083UL), (120288587UL), (3300482994UL), (4268540970UL), (4183426205UL), (3572724103UL), (3287140971UL), (3038086532UL), (3210919007UL), (2171998100UL), (3958495101UL), (1589679371UL), (2880366694UL), (827575211UL), (1343189406UL), (364332706UL), (866065087UL), (33080625UL), (4284492640UL), (2277479989UL), (4110331130UL), (430538110UL), (3549886335UL), (3734345920UL), (3780943339UL), (638033279UL), (2684714509UL), (945721631UL), (49994267UL), (2394351381UL), (1996532760UL), (3201422203UL), (3509459657UL), (4118609520UL), (632454166UL), (696027759UL), (901486290UL), (1230453723UL), (4225865813UL), (4072619256UL), (3111686961UL), (1487480830UL), (4112016561UL), (1577020285UL), (2765241900UL), (2496609620UL), (1731271292UL), (6970479UL), (2936359283UL), (1541124937UL), (3705956773UL), (2349695021UL), (2247551804UL), (3759489710UL), (1321217706UL), (379586757UL), (2008242014UL), (1138475935UL), (3044902216UL), (1917596533UL), (2905651936UL), (3320601534UL), (1468557693UL), (4101437636UL), (374575138UL), (730079080UL), (995340259UL), (1430552870UL), (3860649629UL), (541396702UL), (3413070856UL), (3052797396UL), (3591116740UL), (2811484252UL), (2464310183UL), (1597327051UL), (3288232619UL), (1564716093UL), (2838386049UL), (264313861UL), (881377066UL), (4165178494UL), (1069189853UL), (1045737884UL), (2072266205UL), (2700673629UL), (2338724235UL), (837702541UL), (2603464957UL), (1548182143UL), (3565539962UL), (38172869UL), (1949065935UL), (3628598166UL), (2788698071UL), (3531182193UL), (1367529788UL), (3902468811UL), (1215323634UL), (1117475027UL), (3901912129UL), (2678279671UL), (597953858UL), (4082485755UL), (3696533122UL), (1078703353UL)}, {(590004384UL), (3025338414UL), (1764374188UL), (20686172UL), (932343559UL), (1798441768UL), (1013577341UL), (4275903797UL), (853441141UL), (1065980978UL), (3665193407UL), (1555165047UL), (2962781443UL), (1822487181UL), (3329200135UL), (1527094489UL), (3805115799UL), (2252376033UL), (2137546519UL), (3632426270UL), (2439842864UL), (2525211849UL), (602876448UL), (1488163727UL), (3169015136UL), (832084039UL), (81097112UL), (994974428UL), (1945411347UL), (1020609213UL), (2863240894UL), (1639194881UL), (3078842449UL), (1885382385UL), (2595105518UL), (3857547190UL), (3654577058UL), (3853111480UL), (2237941224UL), (625422255UL), (3292783340UL), (750206381UL), (1002246874UL), (900879607UL), (820635221UL), (3318328110UL), (3980484559UL), (3924790669UL), (4260574943UL), (3658381114UL), (3673068643UL), (1319175627UL), (3620071157UL), (3914274380UL), (3310864044UL), (1529070914UL), (1760958838UL), (818806045UL), (3056976418UL), (2337737150UL), (2061530784UL), (1036243443UL), (2058675708UL), (1932546035UL), (1604709219UL), (1317296740UL), (2505350414UL), (624826181UL), (2710208816UL), (2208469912UL), (1930700024UL), (3769953790UL), (2092911082UL), (520309780UL), (3787727278UL), (684095804UL), (3697683979UL), (111440289UL), (4043494885UL), (1571375993UL), (1828801775UL), (3589061974UL), (3016563679UL), (2026002784UL), (3810490061UL), (2634997537UL), (2715287551UL), (1973545003UL), (3407971274UL), (3239387641UL), (2479429785UL), (324785401UL), (2622755198UL), (1525605325UL), (3280412074UL), (2453630352UL), (726090704UL), (4170024046UL), (248003549UL), (3319518538UL), (1331224401UL), (1203416669UL), (3497395173UL), (2465693133UL), (15303334UL), (267163358UL), (627307819UL), (294350450UL), (3691559013UL), (2491765952UL), (839609873UL), (1598505629UL), (3905396753UL), (583168080UL), (281403302UL), (1658629464UL), (1498139453UL), (2860737994UL), (148007837UL), (1439496901UL), (3226624586UL), (1708925351UL), (195473107UL), (1150552649UL), (2856922985UL), (1853471286UL), (1286593394UL), (2025932254UL), (1300583198UL), (3169702837UL), (1255226060UL), (3482666699UL), (1515557266UL), (1964035766UL), (1604627993UL), (641427670UL), (450188959UL), (1095230428UL), (293179001UL), (1293554079UL), (3022335608UL), (610535626UL), (1329467104UL), (3717935497UL), (1252385485UL), (441595535UL), (2937045243UL), (2846877561UL), (668719121UL), (3604154741UL), (1150714166UL), (1689640190UL), (2219487087UL), (2445975095UL), (3492083575UL), (377195836UL), (2727989292UL), (2460040634UL), (2910322481UL), (399050881UL), (3601292788UL), (590004384UL), (3025338414UL), (1764374188UL), (20686172UL), (3576058865UL), (1798441768UL), (1013577341UL), (4275903797UL), (853441141UL), (3862104007UL), (3665193407UL), (1555165047UL), (2962781443UL), (1822487181UL), (1058917817UL), (1527094489UL), (3805115799UL), (2252376033UL), (2137546519UL), (780594798UL), (2439842864UL), (2525211849UL), (602876448UL), (1488163727UL), (642430472UL), (832084039UL), (81097112UL), (994974428UL), (1945411347UL), (2231598766UL), (2863240894UL), (1639194881UL), (3078842449UL), (1885382385UL), (2387524763UL), (3857547190UL), (3654577058UL), (3853111480UL), (2237941224UL), (991026264UL), (3292783340UL), (750206381UL), (1002246874UL), (900879607UL), (1178067772UL), (3318328110UL), (3980484559UL), (3924790669UL), (4260574943UL), (1964983082UL), (3673068643UL), (1319175627UL), (3620071157UL), (3914274380UL), (992141498UL), (1529070914UL), (1760958838UL), (818806045UL), (3056976418UL), (3295305429UL), (2061530784UL), (1036243443UL), (2058675708UL), (1932546035UL), (3724542133UL), (1317296740UL), (2505350414UL), (624826181UL), (2710208816UL), (3359715256UL), (1930700024UL), (3769953790UL), (2092911082UL), (520309780UL), (1979908015UL), (684095804UL), (3697683979UL), (111440289UL), (4043494885UL), (3256907235UL), (1828801775UL), (3589061974UL), (3016563679UL), (2026002784UL), (1967781780UL), (2634997537UL), (2715287551UL), (1973545003UL), (3407971274UL), (391604110UL), (2479429785UL), (324785401UL), (2622755198UL), (1525605325UL), (462777294UL), (2453630352UL), (726090704UL), (4170024046UL), (248003549UL), (3125444318UL), (1331224401UL), (1203416669UL), (3497395173UL), (2465693133UL), (1610778556UL), (267163358UL), (627307819UL), (294350450UL), (3691559013UL), (3302305047UL), (839609873UL), (1598505629UL), (3905396753UL), (583168080UL), (1502262581UL), (1658629464UL), (1498139453UL), (2860737994UL), (148007837UL), (2973368511UL), (3226624586UL), (1708925351UL), (195473107UL), (1150552649UL), (522423348UL), (1853471286UL), (1286593394UL), (2025932254UL), (1300583198UL), (555770116UL), (1255226060UL), (3482666699UL), (1515557266UL), (1964035766UL), (877073175UL), (641427670UL), (450188959UL), (1095230428UL), (293179001UL), (4216364784UL), (3022335608UL), (610535626UL), (1329467104UL), (3717935497UL), (1665384485UL), (441595535UL), (2937045243UL), (2846877561UL), (668719121UL), (978801343UL), (1150714166UL), (1689640190UL), (2219487087UL), (2445975095UL), (3819595050UL), (377195836UL), (2727989292UL), (2460040634UL), (2910322481UL), (1200428010UL), (3601292788UL), (590004384UL), (3025338414UL), (1764374188UL), (3586255253UL), (3576058865UL), (1798441768UL), (1013577341UL), (4275903797UL), (1511067357UL), (3862104007UL), (3665193407UL), (1555165047UL), (2962781443UL), (2749766525UL), (1058917817UL), (1527094489UL), (3805115799UL), (2252376033UL), (817362043UL), (780594798UL), (2439842864UL), (2525211849UL), (602876448UL), (2309049006UL), (642430472UL), (832084039UL), (81097112UL), (994974428UL), (3148197354UL), (2231598766UL), (2863240894UL), (1639194881UL), (3078842449UL), (311769962UL), (2387524763UL), (3857547190UL), (3654577058UL), (3853111480UL), (1888597091UL), (991026264UL), (3292783340UL), (750206381UL), (1002246874UL), (2904195378UL), (1178067772UL), (3318328110UL), (3980484559UL), (3924790669UL), (4265386540UL), (1964983082UL), (3673068643UL), (1319175627UL), (3620071157UL), (1635921454UL), (992141498UL), (1529070914UL), (1760958838UL), (818806045UL), (3002614702UL), (3295305429UL), (2061530784UL), (1036243443UL), (2058675708UL), (2534375036UL), (3724542133UL), (1317296740UL), (2505350414UL), (624826181UL), (3042995618UL), (3359715256UL), (1930700024UL), (3769953790UL), (2092911082UL), (1870611696UL), (1979908015UL), (684095804UL), (3697683979UL), (111440289UL), (1111193348UL), (3256907235UL), (1828801775UL), (3589061974UL), (3016563679UL), (2203918092UL), (1967781780UL), (2634997537UL), (2715287551UL), (1973545003UL), (17967467UL), (391604110UL), (2479429785UL), (324785401UL), (2622755198UL), (3993572289UL), (462777294UL), (2453630352UL), (726090704UL), (4170024046UL), (813760479UL), (3125444318UL), (1331224401UL), (1203416669UL), (3497395173UL), (2528908686UL), (1610778556UL), (267163358UL), (627307819UL), (294350450UL), (4252461657UL), (3302305047UL), (839609873UL), (1598505629UL), (3905396753UL), (3407593947UL), (1502262581UL), (1658629464UL), (1498139453UL), (2860737994UL), (1137070983UL), (2973368511UL), (3226624586UL), (1708925351UL), (195473107UL), (1973834367UL), (522423348UL), (1853471286UL), (1286593394UL), (2025932254UL), (1636839834UL), (555770116UL), (1255226060UL), (3482666699UL), (1515557266UL), (4244619305UL), (877073175UL), (641427670UL), (450188959UL), (1095230428UL), (710341587UL), (4216364784UL), (3022335608UL), (610535626UL), (1329467104UL), (262034293UL), (1665384485UL), (441595535UL), (2937045243UL), (2846877561UL), (1059914271UL), (978801343UL), (1150714166UL), (1689640190UL), (2219487087UL), (258315233UL), (3819595050UL), (377195836UL), (2727989292UL), (2460040634UL), (1828274968UL), (1200428010UL), (3601292788UL), (590004384UL), (3025338414UL), (3487643146UL), (3586255253UL), (3576058865UL), (1798441768UL), (1013577341UL), (3609472816UL), (1511067357UL), (3862104007UL), (3665193407UL), (1555165047UL), (4188135767UL), (2749766525UL), (1058917817UL), (1527094489UL), (3805115799UL), (1547526585UL), (817362043UL), (780594798UL), (2439842864UL), (2525211849UL), (3949139098UL), (2309049006UL), (642430472UL), (832084039UL), (81097112UL), (2619711743UL), (3148197354UL), (2231598766UL), (2863240894UL), (1639194881UL), (3018692935UL), (311769962UL), (2387524763UL), (3857547190UL), (3654577058UL), (2418052942UL), (1888597091UL), (991026264UL), (3292783340UL), (750206381UL), (2501986418UL), (2904195378UL), (1178067772UL), (3318328110UL), (3980484559UL), (655757623UL), (4265386540UL), (1964983082UL), (3673068643UL), (1319175627UL), (1539823819UL), (1635921454UL), (992141498UL), (1529070914UL), (1760958838UL), (1840073710UL), (3002614702UL), (3295305429UL), (2061530784UL), (1036243443UL), (2212957003UL), (2534375036UL), (3724542133UL), (1317296740UL), (2505350414UL), (2754670042UL), (3042995618UL), (3359715256UL), (1930700024UL), (3769953790UL), (3307920786UL), (1870611696UL), (1979908015UL), (684095804UL), (3697683979UL), (326641529UL), (1111193348UL), (3256907235UL), (1828801775UL), (3589061974UL), (1408835557UL), (2203918092UL), (1967781780UL), (2634997537UL), (2715287551UL), (1958610929UL), (17967467UL), (391604110UL), (2479429785UL), (324785401UL), (3833051255UL), (3993572289UL), (462777294UL), (2453630352UL), (726090704UL), (1236380896UL), (813760479UL), (3125444318UL), (1331224401UL), (1203416669UL), (728276857UL), (2528908686UL), (1610778556UL), (267163358UL), (627307819UL), (4276734917UL), (4252461657UL), (3302305047UL), (839609873UL), (1598505629UL), (3827653659UL), (3407593947UL), (1502262581UL), (1658629464UL), (1498139453UL), (3636064463UL), (1137070983UL), (2973368511UL), (3226624586UL), (1708925351UL), (2288771247UL), (1973834367UL), (522423348UL), (1853471286UL), (1286593394UL), (798364204UL), (1636839834UL), (555770116UL), (1255226060UL), (3482666699UL), (2385578475UL), (4244619305UL), (877073175UL), (641427670UL), (450188959UL), (3502743047UL), (710341587UL), (4216364784UL), (3022335608UL), (610535626UL), (2388448039UL), (262034293UL), (1665384485UL), (441595535UL), (2937045243UL), (3028160550UL), (1059914271UL), (978801343UL), (1150714166UL), (1689640190UL), (169488023UL), (258315233UL), (3819595050UL), (377195836UL), (2727989292UL), (837094660UL), (3531987448UL), (1901453576UL), (3312447598UL), (1036467641UL), (2243300650UL), (3148869460UL), (1886274644UL), (4076707689UL), (257110870UL), (3118463831UL), (1165161057UL), (1118846497UL), (3446934363UL), (1514176098UL), (1362957326UL), (2629874126UL), (791374320UL), (1015673947UL), (4252955786UL), (2409207780UL), (3831311130UL), (1654475922UL), (3682733431UL), (780405105UL), (4059616372UL), (503333525UL), (1471514828UL), (2526848791UL), (607539645UL), (730408454UL), (1574159005UL), (1777808061UL), (1296178310UL), (1078855633UL), (878462103UL), (269337411UL), (750735378UL), (2599590920UL), (4206153248UL), (939121991UL), (3061289971UL), (2543431563UL), (1684736054UL), (2319658494UL), (77300347UL), (3222569207UL), (3882064339UL), (2201120493UL), (289098227UL), (3934209124UL), (2407620042UL), (2713079957UL), (2812644841UL), (115993752UL), (2545688211UL), (774350907UL), (939749505UL), (2242588062UL), (960853876UL), (296665594UL), (1367312411UL), (3370351589UL), (711706404UL), (3331136631UL), (1370376958UL), (2322438166UL), (577115138UL), (1472236592UL), (4029835216UL), (1122502809UL), (3490426739UL), (1930206806UL), (2074277138UL), (1360950220UL), (3797708387UL), (2007430804UL), (2257239461UL), (3889012648UL), (710165871UL), (763101711UL), (728019024UL), (652403220UL), (2517020147UL), (1801290767UL), (1478810019UL), (1057288808UL), (2879821959UL), (3916870020UL), (1480362189UL), (919816752UL), (375872647UL), (3236906236UL), (1504223782UL), (128306943UL), (1355826533UL), (2656243649UL), (390454690UL), (3848250363UL), (377480950UL), (358651174UL), (1337795904UL), (1925462532UL), (2421843219UL), (173144626UL), (886649902UL), (402617827UL), (932830871UL), (742712936UL), (4033430386UL), (1409945926UL), (3617206544UL), (2383446356UL), (3452204096UL), (615486157UL), (720696019UL), (1730134434UL), (3918468503UL), (1629431965UL), (2174079220UL), (325852294UL), (234479771UL), (1490297289UL), (3579002992UL), (3538738636UL), (139386548UL), (3067789050UL), (2078261059UL), (3552654276UL), (1774602596UL), (2105142163UL), (2768099869UL), (2265044995UL), (3680536732UL), (3601322356UL), (2848878442UL), (1166743022UL), (3508176959UL), (2186695985UL), (550278868UL), (3324775634UL), (384537301UL), (1019044102UL), (3354263542UL), (1942540686UL), (922714337UL), (3097711558UL), (3074228403UL), (3565076630UL), (3459053081UL), (4128383906UL), (1114387332UL), (2101424539UL), (1192649508UL), (58778130UL), (1651798895UL), (1752063480UL), (1728826905UL), (2225187635UL), (2463770127UL)}, {(1978406995UL), (576106282UL), (2238958298UL), (2073551095UL), (624788087UL), (4231569260UL), (1853272808UL), (238274694UL), (2389334758UL), (410188028UL), (2293786099UL), (4243662908UL), (2317700970UL), (4050493361UL), (2348206908UL), (485250660UL), (1212732903UL), (169414736UL), (292623762UL), (1602229231UL), (2466348869UL), (3063669700UL), (1872890881UL), (1887188929UL), (3447638989UL), (162521682UL), (1470651713UL), (4036975255UL), (3423782623UL), (4043724693UL), (1686690883UL), (2610958712UL), (35940353UL), (78593759UL), (1565950713UL), (1304303952UL), (2004267248UL), (1417268036UL), (3328228522UL), (789915977UL), (2567452041UL), (3564175714UL), (1838409932UL), (1455795236UL), (22377452UL), (455201131UL), (3340286965UL), (184599544UL), (4102076073UL), (4007870762UL), (1470247063UL), (1579231003UL), (3544385556UL), (3408973464UL), (3759098465UL), (3243598964UL), (532452279UL), (1172265732UL), (3520978258UL), (2880513876UL), (41188252UL), (1663974668UL), (3444236420UL), (338981290UL), (2140558860UL), (3310465688UL), (552673362UL), (3277110106UL), (948036400UL), (1346056406UL), (3257468427UL), (4008294878UL), (3788890535UL), (2414511414UL), (3539325895UL), (3025695322UL), (3727849930UL), (3922840362UL), (535899902UL), (665898223UL), (1456499692UL), (354208792UL), (247894771UL), (2093316680UL), (2945209002UL), (1029298544UL), (976007759UL), (394966955UL), (1843302845UL), (3689202777UL), (1999949614UL), (1070472810UL), (4233404701UL), (667526747UL), (2313963966UL), (3519400667UL), (1548274317UL), (3272402139UL), (2570038689UL), (892260481UL), (3547254358UL), (1540409404UL), (3687395534UL), (3751445920UL), (546406228UL), (2167638865UL), (4234783150UL), (806401261UL), (1351195286UL), (1085913868UL), (3109267901UL), (1882610112UL), (1568734773UL), (239430641UL), (3971361190UL), (383932711UL), (149541490UL), (196701535UL), (108079452UL), (888590964UL), (1708559652UL), (3196290573UL), (2115587458UL), (3198525248UL), (3580113911UL), (3098818120UL), (4271558926UL), (3208851696UL), (3354604918UL), (3536923694UL), (1087345822UL), (2292802521UL), (3500230819UL), (411564772UL), (2408049547UL), (1215342690UL), (1707182109UL), (774540619UL), (1613606757UL), (836141085UL), (1061962136UL), (348765795UL), (2852610966UL), (3526215991UL), (2708801073UL), (3467537935UL), (472234793UL), (3944263763UL), (1782219410UL), (502724699UL), (3525703395UL), (1756411033UL), (1358811278UL), (3938603279UL), (3701976555UL), (3259537961UL), (628617330UL), (1553932236UL), (1974037630UL), (2090519666UL), (2185028543UL), (1978406995UL), (576106282UL), (2238958298UL), (2073551095UL), (638634424UL), (4231569260UL), (1853272808UL), (238274694UL), (2389334758UL), (3808551433UL), (2293786099UL), (4243662908UL), (2317700970UL), (4050493361UL), (957981276UL), (485250660UL), (1212732903UL), (169414736UL), (292623762UL), (1956197178UL), (2466348869UL), (3063669700UL), (1872890881UL), (1887188929UL), (1162224455UL), (162521682UL), (1470651713UL), (4036975255UL), (3423782623UL), (3243414978UL), (1686690883UL), (2610958712UL), (35940353UL), (78593759UL), (1648686849UL), (1304303952UL), (2004267248UL), (1417268036UL), (3328228522UL), (3740797237UL), (2567452041UL), (3564175714UL), (1838409932UL), (1455795236UL), (1045087636UL), (455201131UL), (3340286965UL), (184599544UL), (4102076073UL), (2685677331UL), (1470247063UL), (1579231003UL), (3544385556UL), (3408973464UL), (3832799869UL), (3243598964UL), (532452279UL), (1172265732UL), (3520978258UL), (531684354UL), (41188252UL), (1663974668UL), (3444236420UL), (338981290UL), (1286622338UL), (3310465688UL), (552673362UL), (3277110106UL), (948036400UL), (2987864230UL), (3257468427UL), (4008294878UL), (3788890535UL), (2414511414UL), (2613137548UL), (3025695322UL), (3727849930UL), (3922840362UL), (535899902UL), (3288883992UL), (1456499692UL), (354208792UL), (247894771UL), (2093316680UL), (3775770224UL), (1029298544UL), (976007759UL), (394966955UL), (1843302845UL), (1484214934UL), (1999949614UL), (1070472810UL), (4233404701UL), (667526747UL), (3708951530UL), (3519400667UL), (1548274317UL), (3272402139UL), (2570038689UL), (3457725296UL), (3547254358UL), (1540409404UL), (3687395534UL), (3751445920UL), (181641144UL), (2167638865UL), (4234783150UL), (806401261UL), (1351195286UL), (3457819598UL), (3109267901UL), (1882610112UL), (1568734773UL), (239430641UL), (4037392309UL), (383932711UL), (149541490UL), (196701535UL), (108079452UL), (1724276622UL), (1708559652UL), (3196290573UL), (2115587458UL), (3198525248UL), (3784683125UL), (3098818120UL), (4271558926UL), (3208851696UL), (3354604918UL), (149872004UL), (1087345822UL), (2292802521UL), (3500230819UL), (411564772UL), (4068437023UL), (1215342690UL), (1707182109UL), (774540619UL), (1613606757UL), (1062624488UL), (1061962136UL), (348765795UL), (2852610966UL), (3526215991UL), (1518538195UL), (3467537935UL), (472234793UL), (3944263763UL), (1782219410UL), (1835413488UL), (3525703395UL), (1756411033UL), (1358811278UL), (3938603279UL), (1054245423UL), (3259537961UL), (628617330UL), (1553932236UL), (1974037630UL), (2030751433UL), (2185028543UL), (1978406995UL), (576106282UL), (2238958298UL), (3877268821UL), (638634424UL), (4231569260UL), (1853272808UL), (238274694UL), (2482404724UL), (3808551433UL), (2293786099UL), (4243662908UL), (2317700970UL), (1955227186UL), (957981276UL), (485250660UL), (1212732903UL), (169414736UL), (1333246101UL), (1956197178UL), (2466348869UL), (3063669700UL), (1872890881UL), (3662049503UL), (1162224455UL), (162521682UL), (1470651713UL), (4036975255UL), (3593925064UL), (3243414978UL), (1686690883UL), (2610958712UL), (35940353UL), (2530174792UL), (1648686849UL), (1304303952UL), (2004267248UL), (1417268036UL), (1299827381UL), (3740797237UL), (2567452041UL), (3564175714UL), (1838409932UL), (4221368409UL), (1045087636UL), (455201131UL), (3340286965UL), (184599544UL), (486448047UL), (2685677331UL), (1470247063UL), (1579231003UL), (3544385556UL), (1404931688UL), (3832799869UL), (3243598964UL), (532452279UL), (1172265732UL), (3373048034UL), (531684354UL), (41188252UL), (1663974668UL), (3444236420UL), (1375188728UL), (1286622338UL), (3310465688UL), (552673362UL), (3277110106UL), (655980467UL), (2987864230UL), (3257468427UL), (4008294878UL), (3788890535UL), (763995173UL), (2613137548UL), (3025695322UL), (3727849930UL), (3922840362UL), (1850434657UL), (3288883992UL), (1456499692UL), (354208792UL), (247894771UL), (3440471938UL), (3775770224UL), (1029298544UL), (976007759UL), (394966955UL), (3298245949UL), (1484214934UL), (1999949614UL), (1070472810UL), (4233404701UL), (3788558253UL), (3708951530UL), (3519400667UL), (1548274317UL), (3272402139UL), (3117201719UL), (3457725296UL), (3547254358UL), (1540409404UL), (3687395534UL), (3871454027UL), (181641144UL), (2167638865UL), (4234783150UL), (806401261UL), (1627904858UL), (3457819598UL), (3109267901UL), (1882610112UL), (1568734773UL), (3178105921UL), (4037392309UL), (383932711UL), (149541490UL), (196701535UL), (424324376UL), (1724276622UL), (1708559652UL), (3196290573UL), (2115587458UL), (2946026327UL), (3784683125UL), (3098818120UL), (4271558926UL), (3208851696UL), (2551504859UL), (149872004UL), (1087345822UL), (2292802521UL), (3500230819UL), (3055410013UL), (4068437023UL), (1215342690UL), (1707182109UL), (774540619UL), (2466902579UL), (1062624488UL), (1061962136UL), (348765795UL), (2852610966UL), (355211123UL), (1518538195UL), (3467537935UL), (472234793UL), (3944263763UL), (3159176627UL), (1835413488UL), (3525703395UL), (1756411033UL), (1358811278UL), (2153206130UL), (1054245423UL), (3259537961UL), (628617330UL), (1553932236UL), (1741202495UL), (2030751433UL), (2185028543UL), (1978406995UL), (576106282UL), (2832311581UL), (3877268821UL), (638634424UL), (4231569260UL), (1853272808UL), (3103974717UL), (2482404724UL), (3808551433UL), (2293786099UL), (4243662908UL), (2607780401UL), (1955227186UL), (957981276UL), (485250660UL), (1212732903UL), (3214649174UL), (1333246101UL), (1956197178UL), (2466348869UL), (3063669700UL), (2428387069UL), (3662049503UL), (1162224455UL), (162521682UL), (1470651713UL), (3563435961UL), (3593925064UL), (3243414978UL), (1686690883UL), (2610958712UL), (1021669488UL), (2530174792UL), (1648686849UL), (1304303952UL), (2004267248UL), (1150095671UL), (1299827381UL), (3740797237UL), (2567452041UL), (3564175714UL), (1992360540UL), (4221368409UL), (1045087636UL), (455201131UL), (3340286965UL), (3795860292UL), (486448047UL), (2685677331UL), (1470247063UL), (1579231003UL), (3012017918UL), (1404931688UL), (3832799869UL), (3243598964UL), (532452279UL), (2740401823UL), (3373048034UL), (531684354UL), (41188252UL), (1663974668UL), (1239982773UL), (1375188728UL), (1286622338UL), (3310465688UL), (552673362UL), (2159084435UL), (655980467UL), (2987864230UL), (3257468427UL), (4008294878UL), (1526518186UL), (763995173UL), (2613137548UL), (3025695322UL), (3727849930UL), (4161669345UL), (1850434657UL), (3288883992UL), (1456499692UL), (354208792UL), (1648970767UL), (3440471938UL), (3775770224UL), (1029298544UL), (976007759UL), (292829454UL), (3298245949UL), (1484214934UL), (1999949614UL), (1070472810UL), (949984087UL), (3788558253UL), (3708951530UL), (3519400667UL), (1548274317UL), (3691975282UL), (3117201719UL), (3457725296UL), (3547254358UL), (1540409404UL), (3414085332UL), (3871454027UL), (181641144UL), (2167638865UL), (4234783150UL), (487427004UL), (1627904858UL), (3457819598UL), (3109267901UL), (1882610112UL), (2942538550UL), (3178105921UL), (4037392309UL), (383932711UL), (149541490UL), (528605550UL), (424324376UL), (1724276622UL), (1708559652UL), (3196290573UL), (2042399752UL), (2946026327UL), (3784683125UL), (3098818120UL), (4271558926UL), (2493686919UL), (2551504859UL), (149872004UL), (1087345822UL), (2292802521UL), (3257357826UL), (3055410013UL), (4068437023UL), (1215342690UL), (1707182109UL), (1101368233UL), (2466902579UL), (1062624488UL), (1061962136UL), (348765795UL), (377675640UL), (355211123UL), (1518538195UL), (3467537935UL), (472234793UL), (1918362523UL), (3159176627UL), (1835413488UL), (3525703395UL), (1756411033UL), (490591069UL), (2153206130UL), (1054245423UL), (3259537961UL), (628617330UL), (2464143505UL), (3547421156UL), (4181103091UL), (1646291356UL), (2711273600UL), (2961799099UL), (1443009342UL), (2191618308UL), (1193143275UL), (1858488142UL), (3741304147UL), (1479629752UL), (214641634UL), (1601114903UL), (3032545707UL), (5784133UL), (1466424840UL), (2251379876UL), (4054080092UL), (2965144328UL), (644228426UL), (1397556958UL), (422190032UL), (3059134799UL), (3779253493UL), (1314537880UL), (867798895UL), (3819721559UL), (3588436937UL), (670021879UL), (1070365654UL), (3339455790UL), (2963659516UL), (1662488399UL), (2336157317UL), (3427798652UL), (2782719134UL), (1317842084UL), (1576308528UL), (1129452059UL), (3400565954UL), (84977051UL), (3689257381UL), (3289717503UL), (3535165628UL), (3982356490UL), (173255911UL), (1929987033UL), (4221790572UL), (3473317939UL), (749060417UL), (2711561754UL), (316719217UL), (2359410057UL), (2014271053UL), (1432982162UL), (2107582322UL), (1899811989UL), (1394115707UL), (1134266213UL), (2334994542UL), (2475488907UL), (3238562415UL), (2410379210UL), (4147209396UL), (2446286513UL), (2194020199UL), (3068194593UL), (797186100UL), (1299000541UL), (1870322719UL), (2944499140UL), (1045779179UL), (2735528787UL), (3057750264UL), (2607876894UL), (1595833743UL), (3327636115UL), (3520489322UL), (3864068029UL), (3153522810UL), (2609437702UL), (1360208295UL), (2062444770UL), (3927110355UL), (1524755299UL), (1708215998UL), (3587488663UL), (2813888113UL), (686192293UL), (1078633032UL), (3066910876UL), (793688350UL), (3613674912UL), (387713910UL), (2660476731UL), (3032509241UL), (2353038709UL), (2212424333UL), (2110412913UL), (3631228061UL), (2765134272UL), (4025821789UL), (3324834269UL), (187577732UL), (1568270802UL), (2098502315UL), (2472645526UL), (2986813860UL), (1621191378UL), (3891512282UL), (1561648319UL), (2690491944UL), (3075246584UL), (3202791012UL), (315381589UL), (3645907425UL), (3532420114UL), (802256935UL), (1270128258UL), (2695868207UL), (4075358890UL), (3888212208UL), (510396943UL), (3683116722UL), (3943939501UL), (146061942UL), (733291914UL), (1402325031UL), (672641124UL), (2817168601UL), (2622398925UL), (3641379870UL), (2969146913UL), (4232866548UL), (1694492034UL), (3065141682UL), (234404736UL), (1921499010UL), (2300706258UL), (1304904939UL), (207802178UL), (2674605425UL), (2688377241UL), (2674991105UL), (2585496531UL), (2358858923UL), (2578793432UL), (3275116043UL), (228073476UL), (2936443283UL), (3713102344UL), (1629243323UL), (209348683UL), (3730808488UL), (275442226UL), (223820143UL), (2365614109UL), (3017206322UL), (1906208795UL)}, {(1545504510UL), (1985586093UL), (2005504076UL), (2487099791UL), (2348737867UL), (2254755902UL), (3789154730UL), (3268946922UL), (99552511UL), (1369361877UL), (1888041043UL), (3105269579UL), (4044127396UL), (2380045264UL), (2970234287UL), (293292961UL), (1811276320UL), (1083136897UL), (3016497500UL), (950611584UL), (2165628367UL), (4140133899UL), (2402926185UL), (990501164UL), (2185997143UL), (1769871204UL), (721625457UL), (567446962UL), (1695515231UL), (1848699963UL), (4163520111UL), (2316975723UL), (4268269680UL), (1021066723UL), (517434635UL), (3827063239UL), (3483118065UL), (760366769UL), (3072996795UL), (3548263896UL), (2131401627UL), (4167855065UL), (410255606UL), (1992500865UL), (1322267629UL), (1599293552UL), (2389387938UL), (3721625360UL), (216375429UL), (2002236178UL), (1834631738UL), (1585275126UL), (3879559071UL), (2517667239UL), (1397456303UL), (4095227658UL), (589002062UL), (137665950UL), (3933018338UL), (1519132173UL), (3566494128UL), (3914066872UL), (3233332246UL), (855336825UL), (1882502420UL), (1081015168UL), (4148374722UL), (1683880703UL), (1161266344UL), (99374978UL), (733926790UL), (3520260556UL), (3643143173UL), (927318029UL), (398003191UL), (3472026294UL), (3518018860UL), (2319507998UL), (2650129369UL), (3781620600UL), (1294634949UL), (3977318486UL), (3068540117UL), (3732334866UL), (740308004UL), (1988900647UL), (2936479173UL), (2348744493UL), (1357856242UL), (3842428732UL), (3746094733UL), (214260739UL), (3493892012UL), (2358001919UL), (1775614809UL), (952871363UL), (1216985499UL), (2706067772UL), (1008517818UL), (4189424856UL), (1260334069UL), (2420035836UL), (311831945UL), (3409272605UL), (4266242510UL), (3590716427UL), (537257045UL), (3153762469UL), (1620749663UL), (3338743851UL), (3644831936UL), (3243426619UL), (783551642UL), (1305153827UL), (2026979662UL), (3164955857UL), (4082645339UL), (1633544228UL), (3389303153UL), (440623817UL), (204979344UL), (1674764841UL), (633231391UL), (4180702701UL), (1953210184UL), (2534954734UL), (4252100558UL), (2993632630UL), (4050264705UL), (678445398UL), (1502035091UL), (302442688UL), (493504779UL), (2321459487UL), (1141171231UL), (1507727159UL), (672678623UL), (4046722895UL), (65675127UL), (2936731189UL), (441159654UL), (832039862UL), (2252252769UL), (3090962795UL), (2839688755UL), (645344032UL), (2921087914UL), (2264738834UL), (2341060101UL), (778789539UL), (737962654UL), (2859693559UL), (2784310535UL), (493247978UL), (185832691UL), (3321631011UL), (641506549UL), (2652806878UL), (480335604UL), (2908694258UL), (984807024UL), (1545504510UL), (1985586093UL), (2005504076UL), (2487099791UL), (127488455UL), (2254755902UL), (3789154730UL), (3268946922UL), (99552511UL), (2160330513UL), (1888041043UL), (3105269579UL), (4044127396UL), (2380045264UL), (3185912634UL), (293292961UL), (1811276320UL), (1083136897UL), (3016497500UL), (116883339UL), (2165628367UL), (4140133899UL), (2402926185UL), (990501164UL), (4099344218UL), (1769871204UL), (721625457UL), (567446962UL), (1695515231UL), (1218419978UL), (4163520111UL), (2316975723UL), (4268269680UL), (1021066723UL), (237254804UL), (3827063239UL), (3483118065UL), (760366769UL), (3072996795UL), (1020639813UL), (2131401627UL), (4167855065UL), (410255606UL), (1992500865UL), (1887858126UL), (1599293552UL), (2389387938UL), (3721625360UL), (216375429UL), (2096265248UL), (1834631738UL), (1585275126UL), (3879559071UL), (2517667239UL), (3267338158UL), (4095227658UL), (589002062UL), (137665950UL), (3933018338UL), (3823062902UL), (3566494128UL), (3914066872UL), (3233332246UL), (855336825UL), (3240858503UL), (1081015168UL), (4148374722UL), (1683880703UL), (1161266344UL), (4034899335UL), (733926790UL), (3520260556UL), (3643143173UL), (927318029UL), (2130442867UL), (3472026294UL), (3518018860UL), (2319507998UL), (2650129369UL), (253769320UL), (1294634949UL), (3977318486UL), (3068540117UL), (3732334866UL), (3100107703UL), (1988900647UL), (2936479173UL), (2348744493UL), (1357856242UL), (477065277UL), (3746094733UL), (214260739UL), (3493892012UL), (2358001919UL), (52055911UL), (952871363UL), (1216985499UL), (2706067772UL), (1008517818UL), (2820619262UL), (1260334069UL), (2420035836UL), (311831945UL), (3409272605UL), (2066128794UL), (3590716427UL), (537257045UL), (3153762469UL), (1620749663UL), (2261931254UL), (3644831936UL), (3243426619UL), (783551642UL), (1305153827UL), (3937339872UL), (3164955857UL), (4082645339UL), (1633544228UL), (3389303153UL), (3304461891UL), (204979344UL), (1674764841UL), (633231391UL), (4180702701UL), (2649553051UL), (2534954734UL), (4252100558UL), (2993632630UL), (4050264705UL), (3777379050UL), (1502035091UL), (302442688UL), (493504779UL), (2321459487UL), (1795212504UL), (1507727159UL), (672678623UL), (4046722895UL), (65675127UL), (2810951967UL), (441159654UL), (832039862UL), (2252252769UL), (3090962795UL), (3317253399UL), (645344032UL), (2921087914UL), (2264738834UL), (2341060101UL), (1431934790UL), (737962654UL), (2859693559UL), (2784310535UL), (493247978UL), (555655767UL), (3321631011UL), (641506549UL), (2652806878UL), (480335604UL), (1837415425UL), (984807024UL), (1545504510UL), (1985586093UL), (2005504076UL), (2274320195UL), (127488455UL), (2254755902UL), (3789154730UL), (3268946922UL), (3812459919UL), (2160330513UL), (1888041043UL), (3105269579UL), (4044127396UL), (2341347785UL), (3185912634UL), (293292961UL), (1811276320UL), (1083136897UL), (825098089UL), (116883339UL), (2165628367UL), (4140133899UL), (2402926185UL), (4124720284UL), (4099344218UL), (1769871204UL), (721625457UL), (567446962UL), (3598160577UL), (1218419978UL), (4163520111UL), (2316975723UL), (4268269680UL), (923374392UL), (237254804UL), (3827063239UL), (3483118065UL), (760366769UL), (2263405553UL), (1020639813UL), (2131401627UL), (4167855065UL), (410255606UL), (3382265961UL), (1887858126UL), (1599293552UL), (2389387938UL), (3721625360UL), (3440586186UL), (2096265248UL), (1834631738UL), (1585275126UL), (3879559071UL), (711626863UL), (3267338158UL), (4095227658UL), (589002062UL), (137665950UL), (1190761134UL), (3823062902UL), (3566494128UL), (3914066872UL), (3233332246UL), (3844456625UL), (3240858503UL), (1081015168UL), (4148374722UL), (1683880703UL), (589447946UL), (4034899335UL), (733926790UL), (3520260556UL), (3643143173UL), (3202263729UL), (2130442867UL), (3472026294UL), (3518018860UL), (2319507998UL), (3458685425UL), (253769320UL), (1294634949UL), (3977318486UL), (3068540117UL), (702365700UL), (3100107703UL), (1988900647UL), (2936479173UL), (2348744493UL), (969926974UL), (477065277UL), (3746094733UL), (214260739UL), (3493892012UL), (2890740482UL), (52055911UL), (952871363UL), (1216985499UL), (2706067772UL), (1079370138UL), (2820619262UL), (1260334069UL), (2420035836UL), (311831945UL), (701108525UL), (2066128794UL), (3590716427UL), (537257045UL), (3153762469UL), (2900214585UL), (2261931254UL), (3644831936UL), (3243426619UL), (783551642UL), (3143067452UL), (3937339872UL), (3164955857UL), (4082645339UL), (1633544228UL), (1680728882UL), (3304461891UL), (204979344UL), (1674764841UL), (633231391UL), (689425572UL), (2649553051UL), (2534954734UL), (4252100558UL), (2993632630UL), (865432399UL), (3777379050UL), (1502035091UL), (302442688UL), (493504779UL), (1282312650UL), (1795212504UL), (1507727159UL), (672678623UL), (4046722895UL), (976003271UL), (2810951967UL), (441159654UL), (832039862UL), (2252252769UL), (726554843UL), (3317253399UL), (645344032UL), (2921087914UL), (2264738834UL), (1325395107UL), (1431934790UL), (737962654UL), (2859693559UL), (2784310535UL), (3876486226UL), (555655767UL), (3321631011UL), (641506549UL), (2652806878UL), (3848380198UL), (1837415425UL), (984807024UL), (1545504510UL), (1985586093UL), (3711682090UL), (2274320195UL), (127488455UL), (2254755902UL), (3789154730UL), (1595223697UL), (3812459919UL), (2160330513UL), (1888041043UL), (3105269579UL), (2773455385UL), (2341347785UL), (3185912634UL), (293292961UL), (1811276320UL), (3280464626UL), (825098089UL), (116883339UL), (2165628367UL), (4140133899UL), (3092114881UL), (4124720284UL), (4099344218UL), (1769871204UL), (721625457UL), (1514083147UL), (3598160577UL), (1218419978UL), (4163520111UL), (2316975723UL), (200993429UL), (923374392UL), (237254804UL), (3827063239UL), (3483118065UL), (677187089UL), (2263405553UL), (1020639813UL), (2131401627UL), (4167855065UL), (1892382552UL), (3382265961UL), (1887858126UL), (1599293552UL), (2389387938UL), (4153928364UL), (3440586186UL), (2096265248UL), (1834631738UL), (1585275126UL), (3348317504UL), (711626863UL), (3267338158UL), (4095227658UL), (589002062UL), (3125839176UL), (1190761134UL), (3823062902UL), (3566494128UL), (3914066872UL), (1320578396UL), (3844456625UL), (3240858503UL), (1081015168UL), (4148374722UL), (258762412UL), (589447946UL), (4034899335UL), (733926790UL), (3520260556UL), (4290301810UL), (3202263729UL), (2130442867UL), (3472026294UL), (3518018860UL), (2904238635UL), (3458685425UL), (253769320UL), (1294634949UL), (3977318486UL), (2517006218UL), (702365700UL), (3100107703UL), (1988900647UL), (2936479173UL), (3227096174UL), (969926974UL), (477065277UL), (3746094733UL), (214260739UL), (3868449115UL), (2890740482UL), (52055911UL), (952871363UL), (1216985499UL), (2857823043UL), (1079370138UL), (2820619262UL), (1260334069UL), (2420035836UL), (1843837226UL), (701108525UL), (2066128794UL), (3590716427UL), (537257045UL), (1202524172UL), (2900214585UL), (2261931254UL), (3644831936UL), (3243426619UL), (2113758468UL), (3143067452UL), (3937339872UL), (3164955857UL), (4082645339UL), (3987431298UL), (1680728882UL), (3304461891UL), (204979344UL), (1674764841UL), (2684386058UL), (689425572UL), (2649553051UL), (2534954734UL), (4252100558UL), (3511996574UL), (865432399UL), (3777379050UL), (1502035091UL), (302442688UL), (970989610UL), (1282312650UL), (1795212504UL), (1507727159UL), (672678623UL), (3080995547UL), (976003271UL), (2810951967UL), (441159654UL), (832039862UL), (2670291295UL), (726554843UL), (3317253399UL), (645344032UL), (2921087914UL), (3039207936UL), (1325395107UL), (1431934790UL), (737962654UL), (2859693559UL), (2452474228UL), (3876486226UL), (555655767UL), (3321631011UL), (641506549UL), (712394572UL), (931322445UL), (3691485988UL), (77755644UL), (3585967569UL), (1546642657UL), (1074481665UL), (1211742891UL), (2405208503UL), (1015438825UL), (3187019083UL), (2194891243UL), (1305917012UL), (3737279586UL), (2633137983UL), (1924729261UL), (72781059UL), (1412697099UL), (3828782214UL), (1637665425UL), (4170514983UL), (2248277352UL), (3793164712UL), (2365683667UL), (1287488796UL), (3240061130UL), (2411573225UL), (3237771995UL), (901649504UL), (4107276625UL), (1613775409UL), (741888560UL), (332459303UL), (850991886UL), (3249391248UL), (3550484151UL), (3689717953UL), (233288631UL), (2496730550UL), (3221264250UL), (3172144573UL), (1429937065UL), (1776357872UL), (1084763904UL), (1993209913UL), (4142869218UL), (3130780078UL), (18180577UL), (2819625557UL), (1978393449UL), (372704074UL), (3919523286UL), (1777756963UL), (188652529UL), (411213996UL), (62282979UL), (3775037518UL), (2534579861UL), (2966280971UL), (3863833471UL), (3228893189UL), (3123894696UL), (362579125UL), (1232030882UL), (575379775UL), (1019196436UL), (1914161190UL), (3649246842UL), (2192095564UL), (2368224476UL), (138396720UL), (1299868479UL), (507152626UL), (2129033575UL), (3801624222UL), (623352301UL), (1551535796UL), (3848329776UL), (2727905150UL), (1109499603UL), (3222756581UL), (3914846131UL), (3207366497UL), (3216028717UL), (3712661572UL), (1970542UL), (1320230637UL), (2583706801UL), (1341029904UL), (1903168049UL), (1244252579UL), (1885511879UL), (2426625042UL), (3082846847UL), (3858784104UL), (2263210027UL), (130350645UL), (956540733UL), (776729371UL), (2266749094UL), (2220603773UL), (2556170531UL), (263980324UL), (802194348UL), (697108594UL), (3634984969UL), (4251738712UL), (1831444758UL), (1209156358UL), (3089957258UL), (4195548426UL), (3641578987UL), (990686800UL), (2391278490UL), (2233755358UL), (1739784005UL), (2458544650UL), (340925249UL), (2442887806UL), (3503407512UL), (3058778909UL), (3619026333UL), (2289286518UL), (1296212011UL), (3879317178UL), (1210295163UL), (3113210467UL), (1578990986UL), (641384071UL), (2437977832UL), (1689385197UL), (1323268226UL), (861337916UL), (3532905860UL), (3735971843UL), (2294673483UL), (1032787575UL), (1868992735UL), (4260308791UL), (2091311463UL), (2354047234UL), (1005300697UL), (29821726UL), (2790044161UL), (3154591207UL), (1370229266UL), (3464848205UL), (3855301526UL), (544374401UL), (101012897UL), (4214903025UL), (1310520049UL), (14884434UL), (1438288148UL), (2118574986UL), (2360002070UL), (512167778UL), (4186534704UL), (3633828199UL), (493600836UL)}, {(2932801042UL), (4101748508UL), (3363559072UL), (1213475638UL), (2400369070UL), (1726749444UL), (3175844814UL), (2600020277UL), (3779799804UL), (1886667522UL), (1228105891UL), (589138388UL), (3960459504UL), (450669757UL), (3773736740UL), (2107201112UL), (1437834675UL), (3618095315UL), (3662453347UL), (968349971UL), (1891706458UL), (2333451375UL), (4242907074UL), (3265111057UL), (3648168902UL), (4137035018UL), (105573058UL), (2075999861UL), (1053920954UL), (3768713177UL), (1836088599UL), (2015103258UL), (2649187541UL), (2717894301UL), (534937136UL), (3492326400UL), (2406499346UL), (617315838UL), (1384748442UL), (519804615UL), (524657043UL), (832148261UL), (156272480UL), (394759604UL), (2428809631UL), (3401589884UL), (2588359262UL), (3826333418UL), (2427993050UL), (3254067543UL), (2570694144UL), (2876613091UL), (2883884893UL), (613070434UL), (1599903665UL), (3476967713UL), (1729385632UL), (207879231UL), (1256308247UL), (2538975486UL), (2550001448UL), (1820975095UL), (915640692UL), (1633749116UL), (1294669585UL), (3257901643UL), (3193347552UL), (3369630539UL), (285165240UL), (2337727802UL), (1854640523UL), (1034379307UL), (1206304638UL), (889104297UL), (3084078942UL), (3485609519UL), (3903898589UL), (4274630316UL), (3290195566UL), (2071163950UL), (775170461UL), (551343738UL), (164916146UL), (1678786363UL), (123960948UL), (2721608023UL), (3463122611UL), (1525791510UL), (1531697627UL), (1457848578UL), (665433501UL), (1784274031UL), (3436850186UL), (3976095421UL), (383031580UL), (2146948399UL), (3137780800UL), (410458873UL), (381977170UL), (4264728702UL), (1515223147UL), (3358033956UL), (139804933UL), (438534588UL), (901342240UL), (1536972976UL), (184570377UL), (681864510UL), (844333847UL), (2515362910UL), (917461167UL), (2538721219UL), (4268394152UL), (680292330UL), (3420438710UL), (3784725677UL), (1983802086UL), (4165891809UL), (2369490764UL), (3808530114UL), (3391499460UL), (2509287180UL), (970129219UL), (2492785859UL), (3611863290UL), (1303524794UL), (2991964551UL), (1828774928UL), (3950385781UL), (3251583775UL), (14901408UL), (1890180396UL), (1306701779UL), (3161784071UL), (637842485UL), (2830070006UL), (3867491336UL), (1594948357UL), (2579795132UL), (479188700UL), (806498245UL), (3905876458UL), (3499065005UL), (3168076042UL), (769094339UL), (3769363696UL), (1241457026UL), (1073618847UL), (251335726UL), (2574341631UL), (2534047421UL), (3151952274UL), (534046859UL), (3264754113UL), (1325368288UL), (2131927230UL), (3229420672UL), (336348290UL), (3768781638UL), (2593952436UL), (849969290UL), (2932801042UL), (4101748508UL), (3363559072UL), (1213475638UL), (1710895496UL), (1726749444UL), (3175844814UL), (2600020277UL), (3779799804UL), (4044580435UL), (1228105891UL), (589138388UL), (3960459504UL), (450669757UL), (4253882965UL), (2107201112UL), (1437834675UL), (3618095315UL), (3662453347UL), (3625360228UL), (1891706458UL), (2333451375UL), (4242907074UL), (3265111057UL), (3638586625UL), (4137035018UL), (105573058UL), (2075999861UL), (1053920954UL), (3014895241UL), (1836088599UL), (2015103258UL), (2649187541UL), (2717894301UL), (701652515UL), (3492326400UL), (2406499346UL), (617315838UL), (1384748442UL), (1142040801UL), (524657043UL), (832148261UL), (156272480UL), (394759604UL), (944890908UL), (3401589884UL), (2588359262UL), (3826333418UL), (2427993050UL), (337891051UL), (2570694144UL), (2876613091UL), (2883884893UL), (613070434UL), (659063916UL), (3476967713UL), (1729385632UL), (207879231UL), (1256308247UL), (311608860UL), (2550001448UL), (1820975095UL), (915640692UL), (1633749116UL), (1772334285UL), (3257901643UL), (3193347552UL), (3369630539UL), (285165240UL), (2627441892UL), (1854640523UL), (1034379307UL), (1206304638UL), (889104297UL), (2289660031UL), (3485609519UL), (3903898589UL), (4274630316UL), (3290195566UL), (3572160580UL), (775170461UL), (551343738UL), (164916146UL), (1678786363UL), (3109616684UL), (2721608023UL), (3463122611UL), (1525791510UL), (1531697627UL), (3660976089UL), (665433501UL), (1784274031UL), (3436850186UL), (3976095421UL), (1696775162UL), (2146948399UL), (3137780800UL), (410458873UL), (381977170UL), (1669455215UL), (1515223147UL), (3358033956UL), (139804933UL), (438534588UL), (1738237971UL), (1536972976UL), (184570377UL), (681864510UL), (844333847UL), (770765754UL), (917461167UL), (2538721219UL), (4268394152UL), (680292330UL), (1993152157UL), (3784725677UL), (1983802086UL), (4165891809UL), (2369490764UL), (3411542022UL), (3391499460UL), (2509287180UL), (970129219UL), (2492785859UL), (1869391890UL), (1303524794UL), (2991964551UL), (1828774928UL), (3950385781UL), (4139486157UL), (14901408UL), (1890180396UL), (1306701779UL), (3161784071UL), (174545194UL), (2830070006UL), (3867491336UL), (1594948357UL), (2579795132UL), (4132973523UL), (806498245UL), (3905876458UL), (3499065005UL), (3168076042UL), (538076966UL), (3769363696UL), (1241457026UL), (1073618847UL), (251335726UL), (2085586137UL), (2534047421UL), (3151952274UL), (534046859UL), (3264754113UL), (643987981UL), (2131927230UL), (3229420672UL), (336348290UL), (3768781638UL), (3468816701UL), (849969290UL), (2932801042UL), (4101748508UL), (3363559072UL), (2524943673UL), (1710895496UL), (1726749444UL), (3175844814UL), (2600020277UL), (3677241699UL), (4044580435UL), (1228105891UL), (589138388UL), (3960459504UL), (3903077887UL), (4253882965UL), (2107201112UL), (1437834675UL), (3618095315UL), (2362822379UL), (3625360228UL), (1891706458UL), (2333451375UL), (4242907074UL), (2289503940UL), (3638586625UL), (4137035018UL), (105573058UL), (2075999861UL), (1299938293UL), (3014895241UL), (1836088599UL), (2015103258UL), (2649187541UL), (3727003343UL), (701652515UL), (3492326400UL), (2406499346UL), (617315838UL), (1627975589UL), (1142040801UL), (524657043UL), (832148261UL), (156272480UL), (3658645823UL), (944890908UL), (3401589884UL), (2588359262UL), (3826333418UL), (3645806126UL), (337891051UL), (2570694144UL), (2876613091UL), (2883884893UL), (2866570997UL), (659063916UL), (3476967713UL), (1729385632UL), (207879231UL), (298556768UL), (311608860UL), (2550001448UL), (1820975095UL), (915640692UL), (1014996737UL), (1772334285UL), (3257901643UL), (3193347552UL), (3369630539UL), (96395889UL), (2627441892UL), (1854640523UL), (1034379307UL), (1206304638UL), (2546521293UL), (2289660031UL), (3485609519UL), (3903898589UL), (4274630316UL), (2360048518UL), (3572160580UL), (775170461UL), (551343738UL), (164916146UL), (2068601014UL), (3109616684UL), (2721608023UL), (3463122611UL), (1525791510UL), (1228011534UL), (3660976089UL), (665433501UL), (1784274031UL), (3436850186UL), (1620580129UL), (1696775162UL), (2146948399UL), (3137780800UL), (410458873UL), (2753059283UL), (1669455215UL), (1515223147UL), (3358033956UL), (139804933UL), (2786429190UL), (1738237971UL), (1536972976UL), (184570377UL), (681864510UL), (358796749UL), (770765754UL), (917461167UL), (2538721219UL), (4268394152UL), (2355846025UL), (1993152157UL), (3784725677UL), (1983802086UL), (4165891809UL), (360259050UL), (3411542022UL), (3391499460UL), (2509287180UL), (970129219UL), (4055494275UL), (1869391890UL), (1303524794UL), (2991964551UL), (1828774928UL), (3508750618UL), (4139486157UL), (14901408UL), (1890180396UL), (1306701779UL), (3684762156UL), (174545194UL), (2830070006UL), (3867491336UL), (1594948357UL), (702781070UL), (4132973523UL), (806498245UL), (3905876458UL), (3499065005UL), (1372989388UL), (538076966UL), (3769363696UL), (1241457026UL), (1073618847UL), (3579114424UL), (2085586137UL), (2534047421UL), (3151952274UL), (534046859UL), (1882037168UL), (643987981UL), (2131927230UL), (3229420672UL), (336348290UL), (555833786UL), (3468816701UL), (849969290UL), (2932801042UL), (4101748508UL), (1095934625UL), (2524943673UL), (1710895496UL), (1726749444UL), (3175844814UL), (2287140069UL), (3677241699UL), (4044580435UL), (1228105891UL), (589138388UL), (1596938176UL), (3903077887UL), (4253882965UL), (2107201112UL), (1437834675UL), (2605388022UL), (2362822379UL), (3625360228UL), (1891706458UL), (2333451375UL), (174003035UL), (2289503940UL), (3638586625UL), (4137035018UL), (105573058UL), (697023108UL), (1299938293UL), (3014895241UL), (1836088599UL), (2015103258UL), (4128339205UL), (3727003343UL), (701652515UL), (3492326400UL), (2406499346UL), (426422678UL), (1627975589UL), (1142040801UL), (524657043UL), (832148261UL), (2461054373UL), (3658645823UL), (944890908UL), (3401589884UL), (2588359262UL), (3184255074UL), (3645806126UL), (337891051UL), (2570694144UL), (2876613091UL), (187151044UL), (2866570997UL), (659063916UL), (3476967713UL), (1729385632UL), (2811989057UL), (298556768UL), (311608860UL), (2550001448UL), (1820975095UL), (1806779934UL), (1014996737UL), (1772334285UL), (3257901643UL), (3193347552UL), (2145947779UL), (96395889UL), (2627441892UL), (1854640523UL), (1034379307UL), (2748996070UL), (2546521293UL), (2289660031UL), (3485609519UL), (3903898589UL), (452746826UL), (2360048518UL), (3572160580UL), (775170461UL), (551343738UL), (669098691UL), (2068601014UL), (3109616684UL), (2721608023UL), (3463122611UL), (22889155UL), (1228011534UL), (3660976089UL), (665433501UL), (1784274031UL), (227705324UL), (1620580129UL), (1696775162UL), (2146948399UL), (3137780800UL), (4267814323UL), (2753059283UL), (1669455215UL), (1515223147UL), (3358033956UL), (2806778033UL), (2786429190UL), (1738237971UL), (1536972976UL), (184570377UL), (3310279262UL), (358796749UL), (770765754UL), (917461167UL), (2538721219UL), (2247224091UL), (2355846025UL), (1993152157UL), (3784725677UL), (1983802086UL), (2399541755UL), (360259050UL), (3411542022UL), (3391499460UL), (2509287180UL), (2335541531UL), (4055494275UL), (1869391890UL), (1303524794UL), (2991964551UL), (392724462UL), (3508750618UL), (4139486157UL), (14901408UL), (1890180396UL), (2513331299UL), (3684762156UL), (174545194UL), (2830070006UL), (3867491336UL), (1887131931UL), (702781070UL), (4132973523UL), (806498245UL), (3905876458UL), (2263606492UL), (1372989388UL), (538076966UL), (3769363696UL), (1241457026UL), (170472774UL), (3579114424UL), (2085586137UL), (2534047421UL), (3151952274UL), (1488165272UL), (1882037168UL), (643987981UL), (2131927230UL), (3229420672UL), (1158405862UL), (1469009373UL), (4117356830UL), (4063868500UL), (2006417445UL), (2976934394UL), (2683607933UL), (3174943272UL), (2099974138UL), (2250858961UL), (205251124UL), (84783688UL), (1551294676UL), (224349432UL), (1893741756UL), (3680361724UL), (561624088UL), (251553631UL), (1654870642UL), (2195380145UL), (866503297UL), (1814519294UL), (905566144UL), (727763043UL), (1910034093UL), (1876316198UL), (3031876716UL), (2783769690UL), (2649650479UL), (2024342098UL), (2170858649UL), (2186613759UL), (2688207487UL), (881594599UL), (1010953695UL), (2768977700UL), (3341020856UL), (2446339960UL), (2648757147UL), (1317083878UL), (3301541769UL), (3574285525UL), (3331294407UL), (712581268UL), (3612116700UL), (3510601489UL), (2569879282UL), (3772968052UL), (332485239UL), (280920979UL), (716834274UL), (1863623285UL), (654670865UL), (1706917935UL), (1598315563UL), (2486805657UL), (2295746319UL), (635609792UL), (55141757UL), (4089183045UL), (145257162UL), (1921789879UL), (2833550514UL), (3798992859UL), (1532875864UL), (3668053062UL), (2749191097UL), (3412220447UL), (3383752088UL), (3191842833UL), (4167387125UL), (2438940746UL), (1453011669UL), (2747298308UL), (1057877757UL), (399006034UL), (132680506UL), (31671249UL), (1070386969UL), (2415113777UL), (3720335676UL), (3416473189UL), (1476808053UL), (785398955UL), (3335661823UL), (315496929UL), (1421907623UL), (1802371914UL), (3049258946UL), (1773374729UL), (382902076UL), (3262814446UL), (1774244917UL), (4064677234UL), (2281551331UL), (3019541390UL), (2445483046UL), (3059154103UL), (2147309319UL), (566587847UL), (216051987UL), (521013398UL), (2721884570UL), (3325443529UL), (1921922591UL), (1643064709UL), (1155714395UL), (1737031844UL), (2117338012UL), (1876262536UL), (3589621009UL), (3800806613UL), (1102108318UL), (1376914700UL), (539544394UL), (799741508UL), (1192097712UL), (2894663754UL), (567276527UL), (106814343UL), (3985577014UL), (422246623UL), (126568764UL), (4008211389UL), (4037889581UL), (2185357423UL), (2239644921UL), (2116447019UL), (1249715620UL), (2095747493UL), (4063243162UL), (3059330950UL), (1045571624UL), (1150656233UL), (3024439196UL), (3981904623UL), (1743764595UL), (4220253496UL), (3322182853UL), (2132911849UL), (2074342674UL), (198749193UL), (574306951UL), (3563262292UL), (3832626833UL), (2349475213UL), (182567249UL), (1530390173UL), (2066055611UL), (2609802571UL), (1392638962UL), (1495846580UL), (2356952332UL), (4029921749UL), (1731839848UL), (527880959UL), (1204112231UL), (938004695UL), (294300378UL), (1855457892UL)}, {(1438083560UL), (1727969469UL), (703174449UL), (1296281193UL), (1386452240UL), (3304170302UL), (3048300096UL), (277697908UL), (2675939661UL), (3382564518UL), (1639425457UL), (2210719281UL), (3173605115UL), (1685375802UL), (1317820682UL), (1960916541UL), (4230888182UL), (1924357010UL), (3322827982UL), (1663716994UL), (976583570UL), (4146230815UL), (525755678UL), (3608894680UL), (1715438458UL), (1519478303UL), (2845291872UL), (1115405802UL), (2468673244UL), (2289739992UL), (46988928UL), (2559411080UL), (2466723374UL), (2995303634UL), (3871022237UL), (1794652692UL), (2424766096UL), (2849910020UL), (978542234UL), (1667051478UL), (3393290740UL), (1508376445UL), (4090541488UL), (1314139749UL), (1271060027UL), (3272019878UL), (4032394060UL), (757805987UL), (619143288UL), (1165760536UL), (225099797UL), (871754591UL), (2065691940UL), (2016593817UL), (1705071529UL), (2559080067UL), (2048856253UL), (3217759224UL), (2691334730UL), (1576829868UL), (3356759591UL), (1570481357UL), (1097065360UL), (852561431UL), (3559721965UL), (1403648739UL), (1772347635UL), (1196457607UL), (462142253UL), (761176322UL), (2209893444UL), (217724244UL), (3356132814UL), (2838131962UL), (3571552868UL), (1197135963UL), (3239010986UL), (2612283238UL), (2606429155UL), (2194090162UL), (4256137634UL), (935551404UL), (3057660021UL), (866672836UL), (1119670384UL), (1757615349UL), (649402076UL), (2814108193UL), (3312658713UL), (2627947214UL), (2982267121UL), (486762785UL), (2746076238UL), (2134737126UL), (4106010468UL), (3151832629UL), (2419694200UL), (2803791741UL), (2100250718UL), (3171079849UL), (1874606681UL), (1884940331UL), (926257211UL), (1940082331UL), (1024435222UL), (609478334UL), (2501896844UL), (518643063UL), (4285619138UL), (1054300997UL), (4024681853UL), (2287236199UL), (2891891855UL), (1519666047UL), (1919500932UL), (3880316442UL), (1994336737UL), (1025147784UL), (3433493260UL), (1647319600UL), (3298872174UL), (3744513628UL), (2918990402UL), (2649193481UL), (234630674UL), (1963357481UL), (1118148435UL), (2658522312UL), (2563194501UL), (2238556876UL), (1210050812UL), (748709882UL), (3894824022UL), (2575692519UL), (436044710UL), (3465014792UL), (3686094502UL), (2963529475UL), (3251316066UL), (2834750227UL), (789471563UL), (853201732UL), (4119014483UL), (1312738151UL), (2018934495UL), (542908921UL), (732294449UL), (2519981401UL), (1663929229UL), (4041419972UL), (3038382188UL), (3182489020UL), (353453260UL), (4074472601UL), (1187952022UL), (2118553383UL), (1068338764UL), (3699144039UL), (3129056770UL), (1419222328UL), (2666827910UL), (1438083560UL), (1727969469UL), (703174449UL), (1296281193UL), (2134413940UL), (3304170302UL), (3048300096UL), (277697908UL), (2675939661UL), (3817858752UL), (1639425457UL), (2210719281UL), (3173605115UL), (1685375802UL), (2587083472UL), (1960916541UL), (4230888182UL), (1924357010UL), (3322827982UL), (2582901426UL), (976583570UL), (4146230815UL), (525755678UL), (3608894680UL), (524232549UL), (1519478303UL), (2845291872UL), (1115405802UL), (2468673244UL), (591800699UL), (46988928UL), (2559411080UL), (2466723374UL), (2995303634UL), (2307625850UL), (1794652692UL), (2424766096UL), (2849910020UL), (978542234UL), (1284927074UL), (3393290740UL), (1508376445UL), (4090541488UL), (1314139749UL), (3508281898UL), (3272019878UL), (4032394060UL), (757805987UL), (619143288UL), (1846615167UL), (225099797UL), (871754591UL), (2065691940UL), (2016593817UL), (1193455869UL), (2559080067UL), (2048856253UL), (3217759224UL), (2691334730UL), (2665708717UL), (3356759591UL), (1570481357UL), (1097065360UL), (852561431UL), (1652864273UL), (1403648739UL), (1772347635UL), (1196457607UL), (462142253UL), (1222855287UL), (2209893444UL), (217724244UL), (3356132814UL), (2838131962UL), (3060983219UL), (1197135963UL), (3239010986UL), (2612283238UL), (2606429155UL), (4171729370UL), (4256137634UL), (935551404UL), (3057660021UL), (866672836UL), (75618353UL), (1757615349UL), (649402076UL), (2814108193UL), (3312658713UL), (3975515213UL), (2982267121UL), (486762785UL), (2746076238UL), (2134737126UL), (3251020123UL), (3151832629UL), (2419694200UL), (2803791741UL), (2100250718UL), (624531676UL), (1874606681UL), (1884940331UL), (926257211UL), (1940082331UL), (3678479182UL), (609478334UL), (2501896844UL), (518643063UL), (4285619138UL), (1725899979UL), (4024681853UL), (2287236199UL), (2891891855UL), (1519666047UL), (702508101UL), (3880316442UL), (1994336737UL), (1025147784UL), (3433493260UL), (4212959134UL), (3298872174UL), (3744513628UL), (2918990402UL), (2649193481UL), (1782150764UL), (1963357481UL), (1118148435UL), (2658522312UL), (2563194501UL), (3330122355UL), (1210050812UL), (748709882UL), (3894824022UL), (2575692519UL), (637240921UL), (3465014792UL), (3686094502UL), (2963529475UL), (3251316066UL), (1510158901UL), (789471563UL), (853201732UL), (4119014483UL), (1312738151UL), (3018953017UL), (542908921UL), (732294449UL), (2519981401UL), (1663929229UL), (2696317636UL), (3038382188UL), (3182489020UL), (353453260UL), (4074472601UL), (4249950407UL), (2118553383UL), (1068338764UL), (3699144039UL), (3129056770UL), (2334590922UL), (2666827910UL), (1438083560UL), (1727969469UL), (703174449UL), (1679528518UL), (2134413940UL), (3304170302UL), (3048300096UL), (277697908UL), (3417107827UL), (3817858752UL), (1639425457UL), (2210719281UL), (3173605115UL), (1858788112UL), (2587083472UL), (1960916541UL), (4230888182UL), (1924357010UL), (3692988029UL), (2582901426UL), (976583570UL), (4146230815UL), (525755678UL), (1122319464UL), (524232549UL), (1519478303UL), (2845291872UL), (1115405802UL), (205855120UL), (591800699UL), (46988928UL), (2559411080UL), (2466723374UL), (3358512221UL), (2307625850UL), (1794652692UL), (2424766096UL), (2849910020UL), (2865273283UL), (1284927074UL), (3393290740UL), (1508376445UL), (4090541488UL), (2453941323UL), (3508281898UL), (3272019878UL), (4032394060UL), (757805987UL), (3191753865UL), (1846615167UL), (225099797UL), (871754591UL), (2065691940UL), (1301630578UL), (1193455869UL), (2559080067UL), (2048856253UL), (3217759224UL), (3858428004UL), (2665708717UL), (3356759591UL), (1570481357UL), (1097065360UL), (3550687085UL), (1652864273UL), (1403648739UL), (1772347635UL), (1196457607UL), (2158802672UL), (1222855287UL), (2209893444UL), (217724244UL), (3356132814UL), (1954043011UL), (3060983219UL), (1197135963UL), (3239010986UL), (2612283238UL), (2156334822UL), (4171729370UL), (4256137634UL), (935551404UL), (3057660021UL), (3331206175UL), (75618353UL), (1757615349UL), (649402076UL), (2814108193UL), (1313890357UL), (3975515213UL), (2982267121UL), (486762785UL), (2746076238UL), (2023213803UL), (3251020123UL), (3151832629UL), (2419694200UL), (2803791741UL), (392313450UL), (624531676UL), (1874606681UL), (1884940331UL), (926257211UL), (3369012310UL), (3678479182UL), (609478334UL), (2501896844UL), (518643063UL), (3638013610UL), (1725899979UL), (4024681853UL), (2287236199UL), (2891891855UL), (429282096UL), (702508101UL), (3880316442UL), (1994336737UL), (1025147784UL), (1217486411UL), (4212959134UL), (3298872174UL), (3744513628UL), (2918990402UL), (1279832521UL), (1782150764UL), (1963357481UL), (1118148435UL), (2658522312UL), (2379123622UL), (3330122355UL), (1210050812UL), (748709882UL), (3894824022UL), (3987054169UL), (637240921UL), (3465014792UL), (3686094502UL), (2963529475UL), (2167876400UL), (1510158901UL), (789471563UL), (853201732UL), (4119014483UL), (1746447311UL), (3018953017UL), (542908921UL), (732294449UL), (2519981401UL), (1908715414UL), (2696317636UL), (3038382188UL), (3182489020UL), (353453260UL), (2132930364UL), (4249950407UL), (2118553383UL), (1068338764UL), (3699144039UL), (433893434UL), (2334590922UL), (2666827910UL), (1438083560UL), (1727969469UL), (1154725669UL), (1679528518UL), (2134413940UL), (3304170302UL), (3048300096UL), (31944135UL), (3417107827UL), (3817858752UL), (1639425457UL), (2210719281UL), (4203237786UL), (1858788112UL), (2587083472UL), (1960916541UL), (4230888182UL), (2712081548UL), (3692988029UL), (2582901426UL), (976583570UL), (4146230815UL), (3948659885UL), (1122319464UL), (524232549UL), (1519478303UL), (2845291872UL), (2881616509UL), (205855120UL), (591800699UL), (46988928UL), (2559411080UL), (3645011109UL), (3358512221UL), (2307625850UL), (1794652692UL), (2424766096UL), (3667888476UL), (2865273283UL), (1284927074UL), (3393290740UL), (1508376445UL), (1605429636UL), (2453941323UL), (3508281898UL), (3272019878UL), (4032394060UL), (3904681057UL), (3191753865UL), (1846615167UL), (225099797UL), (871754591UL), (696516502UL), (1301630578UL), (1193455869UL), (2559080067UL), (2048856253UL), (2589248412UL), (3858428004UL), (2665708717UL), (3356759591UL), (1570481357UL), (1884333722UL), (3550687085UL), (1652864273UL), (1403648739UL), (1772347635UL), (3418430008UL), (2158802672UL), (1222855287UL), (2209893444UL), (217724244UL), (4164333189UL), (1954043011UL), (3060983219UL), (1197135963UL), (3239010986UL), (2300947859UL), (2156334822UL), (4171729370UL), (4256137634UL), (935551404UL), (1258856668UL), (3331206175UL), (75618353UL), (1757615349UL), (649402076UL), (772455867UL), (1313890357UL), (3975515213UL), (2982267121UL), (486762785UL), (3671941628UL), (2023213803UL), (3251020123UL), (3151832629UL), (2419694200UL), (4264015999UL), (392313450UL), (624531676UL), (1874606681UL), (1884940331UL), (2460787316UL), (3369012310UL), (3678479182UL), (609478334UL), (2501896844UL), (2131090271UL), (3638013610UL), (1725899979UL), (4024681853UL), (2287236199UL), (455349830UL), (429282096UL), (702508101UL), (3880316442UL), (1994336737UL), (1727894434UL), (1217486411UL), (4212959134UL), (3298872174UL), (3744513628UL), (1120563681UL), (1279832521UL), (1782150764UL), (1963357481UL), (1118148435UL), (3362151087UL), (2379123622UL), (3330122355UL), (1210050812UL), (748709882UL), (2506587900UL), (3987054169UL), (637240921UL), (3465014792UL), (3686094502UL), (1265652315UL), (2167876400UL), (1510158901UL), (789471563UL), (853201732UL), (3472479264UL), (1746447311UL), (3018953017UL), (542908921UL), (732294449UL), (659090240UL), (1908715414UL), (2696317636UL), (3038382188UL), (3182489020UL), (174113867UL), (2132930364UL), (4249950407UL), (2118553383UL), (1068338764UL), (4115132848UL), (1714842877UL), (1153237667UL), (1015943026UL), (2014412384UL), (2478393613UL), (1340079052UL), (167685322UL), (1848482402UL), (3252973254UL), (638064461UL), (1599254200UL), (2525050247UL), (2813349060UL), (2415037971UL), (3274852801UL), (3415369586UL), (3216396500UL), (3147792606UL), (438338168UL), (2326605175UL), (2846648724UL), (3871841623UL), (287840506UL), (3218295001UL), (2562000356UL), (574276928UL), (418096348UL), (1798854554UL), (1913561074UL), (2025706546UL), (41907788UL), (3535708035UL), (1240819558UL), (208810147UL), (4062740265UL), (451865782UL), (2652508890UL), (3579720859UL), (1243967909UL), (2191937647UL), (2473947838UL), (1847359263UL), (2496539569UL), (4061942257UL), (1372849161UL), (2016697844UL), (1827460131UL), (1135062647UL), (1255573479UL), (3506657283UL), (3699699807UL), (3087913374UL), (1196140869UL), (4095306490UL), (830793530UL), (1289366065UL), (3268392251UL), (4119035690UL), (1631012325UL), (3410799501UL), (1470209122UL), (3057922764UL), (2895379380UL), (2654121201UL), (1984999545UL), (2258412956UL), (4267137150UL), (3396740662UL), (2480013857UL), (3845856317UL), (3669454152UL), (2438423716UL), (3191341994UL), (1571280634UL), (1423782557UL), (3279999352UL), (1886288620UL), (205278284UL), (793062897UL), (112852083UL), (69164746UL), (2218046933UL), (4206182754UL), (3021072495UL), (2157753215UL), (2875773583UL), (1453706073UL), (168681204UL), (3905840714UL), (4098714445UL), (3410804508UL), (1737239929UL), (1613207828UL), (2987997090UL), (1869303136UL), (3348561687UL), (3391148819UL), (1680062950UL), (4150476788UL), (2340622122UL), (11331065UL), (2250669421UL), (3003852975UL), (2145739501UL), (1627177260UL), (994260425UL), (1479134620UL), (2315299915UL), (1268765340UL), (285960682UL), (3801150032UL), (3948820512UL), (1677682247UL), (1735541155UL), (1914753931UL), (1965156079UL), (1875233710UL), (681418791UL), (2077804400UL), (1963479724UL), (2447942398UL), (269798686UL), (2740088859UL), (1974178779UL), (3373487761UL), (2879779843UL), (157827737UL), (3855390825UL), (2779173093UL), (2359181541UL), (3508102362UL), (4001266348UL), (3949912729UL), (3232414439UL), (472195874UL), (57835121UL), (1854343116UL), (3020785997UL), (2024437594UL), (2182964208UL), (3379376555UL), (1213864603UL), (307833006UL), (1029130725UL), (545051507UL), (4001695571UL), (2258480284UL), (896286117UL), (355474524UL), (2514583184UL), (2997458384UL), (3278715462UL), (1675341954UL), (3603020014UL), (2318410671UL), (2152785892UL), (4285597912UL), (35655711UL), (2087100216UL)}, {(1671155UL), (472949658UL), (148656515UL), (1640075411UL), (930771231UL), (1601854390UL), (471598090UL), (2013359012UL), (3708325970UL), (1688441844UL), (736452516UL), (100585026UL), (1154373750UL), (4029833741UL), (3409420465UL), (192349301UL), (3804215437UL), (909027311UL), (2896874106UL), (3567276364UL), (1319305666UL), (3858990362UL), (3155018279UL), (3756192170UL), (3567813642UL), (228734829UL), (577956164UL), (2078807284UL), (1005987081UL), (1464380935UL), (112604551UL), (3865074232UL), (3776350052UL), (1112767766UL), (2947509331UL), (910887552UL), (4127297396UL), (851240323UL), (3136588838UL), (1639013085UL), (1154068086UL), (639126620UL), (2501600773UL), (3174842042UL), (3456593672UL), (80596481UL), (126970446UL), (2184239961UL), (1448001095UL), (689252599UL), (1087028487UL), (2905348107UL), (2502009404UL), (2156595397UL), (2149975474UL), (2201723284UL), (3908202640UL), (754508313UL), (2321393187UL), (787043244UL), (2575809693UL), (4172462501UL), (2322897687UL), (1899992264UL), (1854136781UL), (3575249683UL), (2939319477UL), (901605762UL), (676398674UL), (2849283587UL), (2992300101UL), (1513271778UL), (2797164148UL), (1914019034UL), (1889341710UL), (2739211008UL), (1954453463UL), (3279391005UL), (2899313529UL), (1412533980UL), (1291505093UL), (2884603001UL), (564097935UL), (3552741248UL), (2809901827UL), (1263126330UL), (860214490UL), (2168366043UL), (2681035029UL), (3226888214UL), (2902522885UL), (554804421UL), (1571065517UL), (3322453053UL), (4144256215UL), (126415290UL), (980853251UL), (1531963815UL), (3237470129UL), (1465444883UL), (2031491001UL), (2205009469UL), (1046577915UL), (828927962UL), (2170245718UL), (1090142292UL), (1667375106UL), (2522840205UL), (4047872402UL), (3862734726UL), (91588630UL), (3122782857UL), (929883614UL), (694999008UL), (1472139068UL), (1246663706UL), (3500613893UL), (4200173807UL), (186199942UL), (3890621040UL), (229752655UL), (1011692880UL), (2791828564UL), (2677625011UL), (791005643UL), (1754509337UL), (2321492983UL), (3512328605UL), (1294405891UL), (2845189858UL), (434175992UL), (3155484007UL), (2306406482UL), (3197931140UL), (22971924UL), (1521633702UL), (2366802562UL), (399245037UL), (2833224222UL), (2507478835UL), (3231711673UL), (3784114896UL), (1927919696UL), (783802899UL), (3408133710UL), (2278711709UL), (3001078924UL), (1223320630UL), (3246830042UL), (943189685UL), (4062534962UL), (1039971013UL), (2342241593UL), (3551623946UL), (322017346UL), (3585779636UL), (81127429UL), (3549929990UL), (2886997195UL), (1746081951UL), (4169018554UL), (1671155UL), (472949658UL), (148656515UL), (1640075411UL), (3772042754UL), (1601854390UL), (471598090UL), (2013359012UL), (3708325970UL), (321630853UL), (736452516UL), (100585026UL), (1154373750UL), (4029833741UL), (1926754199UL), (192349301UL), (3804215437UL), (909027311UL), (2896874106UL), (1138131968UL), (1319305666UL), (3858990362UL), (3155018279UL), (3756192170UL), (2489094664UL), (228734829UL), (577956164UL), (2078807284UL), (1005987081UL), (2678967510UL), (112604551UL), (3865074232UL), (3776350052UL), (1112767766UL), (626049886UL), (910887552UL), (4127297396UL), (851240323UL), (3136588838UL), (2142891352UL), (1154068086UL), (639126620UL), (2501600773UL), (3174842042UL), (3342870442UL), (80596481UL), (126970446UL), (2184239961UL), (1448001095UL), (3399719246UL), (1087028487UL), (2905348107UL), (2502009404UL), (2156595397UL), (14860817UL), (2201723284UL), (3908202640UL), (754508313UL), (2321393187UL), (90540547UL), (2575809693UL), (4172462501UL), (2322897687UL), (1899992264UL), (56239065UL), (3575249683UL), (2939319477UL), (901605762UL), (676398674UL), (412461711UL), (2992300101UL), (1513271778UL), (2797164148UL), (1914019034UL), (3660190396UL), (2739211008UL), (1954453463UL), (3279391005UL), (2899313529UL), (4193503742UL), (1291505093UL), (2884603001UL), (564097935UL), (3552741248UL), (2124229268UL), (1263126330UL), (860214490UL), (2168366043UL), (2681035029UL), (4086980935UL), (2902522885UL), (554804421UL), (1571065517UL), (3322453053UL), (1821678887UL), (126415290UL), (980853251UL), (1531963815UL), (3237470129UL), (2099629264UL), (2031491001UL), (2205009469UL), (1046577915UL), (828927962UL), (3447807375UL), (1090142292UL), (1667375106UL), (2522840205UL), (4047872402UL), (2255362927UL), (91588630UL), (3122782857UL), (929883614UL), (694999008UL), (4135967848UL), (1246663706UL), (3500613893UL), (4200173807UL), (186199942UL), (4182379872UL), (229752655UL), (1011692880UL), (2791828564UL), (2677625011UL), (397062412UL), (1754509337UL), (2321492983UL), (3512328605UL), (1294405891UL), (1028843071UL), (434175992UL), (3155484007UL), (2306406482UL), (3197931140UL), (3217107401UL), (1521633702UL), (2366802562UL), (399245037UL), (2833224222UL), (76017436UL), (3231711673UL), (3784114896UL), (1927919696UL), (783802899UL), (2157090897UL), (2278711709UL), (3001078924UL), (1223320630UL), (3246830042UL), (1197195551UL), (4062534962UL), (1039971013UL), (2342241593UL), (3551623946UL), (63853850UL), (3585779636UL), (81127429UL), (3549929990UL), (2886997195UL), (1335910186UL), (4169018554UL), (1671155UL), (472949658UL), (148656515UL), (3600963048UL), (3772042754UL), (1601854390UL), (471598090UL), (2013359012UL), (1181513377UL), (321630853UL), (736452516UL), (100585026UL), (1154373750UL), (2323956092UL), (1926754199UL), (192349301UL), (3804215437UL), (909027311UL), (2993842723UL), (1138131968UL), (1319305666UL), (3858990362UL), (3155018279UL), (2288945270UL), (2489094664UL), (228734829UL), (577956164UL), (2078807284UL), (1924581773UL), (2678967510UL), (112604551UL), (3865074232UL), (3776350052UL), (2127459222UL), (626049886UL), (910887552UL), (4127297396UL), (851240323UL), (547797457UL), (2142891352UL), (1154068086UL), (639126620UL), (2501600773UL), (2391654498UL), (3342870442UL), (80596481UL), (126970446UL), (2184239961UL), (824575673UL), (3399719246UL), (1087028487UL), (2905348107UL), (2502009404UL), (740197255UL), (14860817UL), (2201723284UL), (3908202640UL), (754508313UL), (4133980283UL), (90540547UL), (2575809693UL), (4172462501UL), (2322897687UL), (831222037UL), (56239065UL), (3575249683UL), (2939319477UL), (901605762UL), (1998632674UL), (412461711UL), (2992300101UL), (1513271778UL), (2797164148UL), (969149327UL), (3660190396UL), (2739211008UL), (1954453463UL), (3279391005UL), (1267183547UL), (4193503742UL), (1291505093UL), (2884603001UL), (564097935UL), (3378471970UL), (2124229268UL), (1263126330UL), (860214490UL), (2168366043UL), (867190357UL), (4086980935UL), (2902522885UL), (554804421UL), (1571065517UL), (497580674UL), (1821678887UL), (126415290UL), (980853251UL), (1531963815UL), (2259090956UL), (2099629264UL), (2031491001UL), (2205009469UL), (1046577915UL), (30458798UL), (3447807375UL), (1090142292UL), (1667375106UL), (2522840205UL), (748518306UL), (2255362927UL), (91588630UL), (3122782857UL), (929883614UL), (1016302700UL), (4135967848UL), (1246663706UL), (3500613893UL), (4200173807UL), (4149573092UL), (4182379872UL), (229752655UL), (1011692880UL), (2791828564UL), (2890696349UL), (397062412UL), (1754509337UL), (2321492983UL), (3512328605UL), (3005148093UL), (1028843071UL), (434175992UL), (3155484007UL), (2306406482UL), (1417194283UL), (3217107401UL), (1521633702UL), (2366802562UL), (399245037UL), (665389310UL), (76017436UL), (3231711673UL), (3784114896UL), (1927919696UL), (37004463UL), (2157090897UL), (2278711709UL), (3001078924UL), (1223320630UL), (1281902891UL), (1197195551UL), (4062534962UL), (1039971013UL), (2342241593UL), (836721481UL), (63853850UL), (3585779636UL), (81127429UL), (3549929990UL), (2541553478UL), (1335910186UL), (4169018554UL), (1671155UL), (472949658UL), (2086411677UL), (3600963048UL), (3772042754UL), (1601854390UL), (471598090UL), (3297781744UL), (1181513377UL), (321630853UL), (736452516UL), (100585026UL), (2296508711UL), (2323956092UL), (1926754199UL), (192349301UL), (3804215437UL), (314399580UL), (2993842723UL), (1138131968UL), (1319305666UL), (3858990362UL), (584746730UL), (2288945270UL), (2489094664UL), (228734829UL), (577956164UL), (3868048239UL), (1924581773UL), (2678967510UL), (112604551UL), (3865074232UL), (2091950990UL), (2127459222UL), (626049886UL), (910887552UL), (4127297396UL), (2494071916UL), (547797457UL), (2142891352UL), (1154068086UL), (639126620UL), (1159991153UL), (2391654498UL), (3342870442UL), (80596481UL), (126970446UL), (2276453681UL), (824575673UL), (3399719246UL), (1087028487UL), (2905348107UL), (874278393UL), (740197255UL), (14860817UL), (2201723284UL), (3908202640UL), (1189317351UL), (4133980283UL), (90540547UL), (2575809693UL), (4172462501UL), (746169572UL), (831222037UL), (56239065UL), (3575249683UL), (2939319477UL), (4148988439UL), (1998632674UL), (412461711UL), (2992300101UL), (1513271778UL), (1078781767UL), (969149327UL), (3660190396UL), (2739211008UL), (1954453463UL), (369522045UL), (1267183547UL), (4193503742UL), (1291505093UL), (2884603001UL), (2820350438UL), (3378471970UL), (2124229268UL), (1263126330UL), (860214490UL), (793306335UL), (867190357UL), (4086980935UL), (2902522885UL), (554804421UL), (1472297125UL), (497580674UL), (1821678887UL), (126415290UL), (980853251UL), (1628231485UL), (2259090956UL), (2099629264UL), (2031491001UL), (2205009469UL), (2562996945UL), (30458798UL), (3447807375UL), (1090142292UL), (1667375106UL), (3513508401UL), (748518306UL), (2255362927UL), (91588630UL), (3122782857UL), (435869165UL), (1016302700UL), (4135967848UL), (1246663706UL), (3500613893UL), (4156110437UL), (4149573092UL), (4182379872UL), (229752655UL), (1011692880UL), (1150278253UL), (2890696349UL), (397062412UL), (1754509337UL), (2321492983UL), (1126835971UL), (3005148093UL), (1028843071UL), (434175992UL), (3155484007UL), (4169948411UL), (1417194283UL), (3217107401UL), (1521633702UL), (2366802562UL), (1629830655UL), (665389310UL), (76017436UL), (3231711673UL), (3784114896UL), (2523153991UL), (37004463UL), (2157090897UL), (2278711709UL), (3001078924UL), (3770048208UL), (1281902891UL), (1197195551UL), (4062534962UL), (1039971013UL), (2710590100UL), (836721481UL), (63853850UL), (3585779636UL), (81127429UL), (3850118466UL), (1883009417UL), (1027645619UL), (2766570701UL), (529436174UL), (4182542040UL), (2027954186UL), (1551970336UL), (2476537298UL), (1601343216UL), (3847258834UL), (14764974UL), (2173280370UL), (4148127270UL), (2818930089UL), (4238274314UL), (1291010651UL), (276452076UL), (192067464UL), (4086351393UL), (37573517UL), (48008720UL), (1641547972UL), (3144774960UL), (2159884108UL), (4260412239UL), (4072883650UL), (801704944UL), (2475958420UL), (2719220408UL), (555871884UL), (3338968445UL), (1704817873UL), (1960791083UL), (3785650808UL), (948722806UL), (3591229899UL), (1776225011UL), (4086658524UL), (2675451845UL), (308053697UL), (3514232055UL), (2575301108UL), (1970226110UL), (3926325352UL), (770275431UL), (1432667716UL), (671201644UL), (1008866625UL), (1151827040UL), (11061406UL), (3492749345UL), (2398090284UL), (2479688660UL), (2275263177UL), (2452696627UL), (3239880878UL), (3206200433UL), (1520851097UL), (1517432473UL), (1468198490UL), (1756343506UL), (2477348626UL), (3684701600UL), (3173720911UL), (1034531154UL), (4092116810UL), (3546516359UL), (2085136160UL), (643024588UL), (1462240654UL), (1877398196UL), (3615581878UL), (1419408410UL), (3581360976UL), (1731324772UL), (1377343320UL), (3848152825UL), (2213533588UL), (2484549569UL), (2043594863UL), (224490427UL), (1298974897UL), (4279011954UL), (3970331393UL), (3795364604UL), (285230552UL), (2893090686UL), (2399312639UL), (2638905215UL), (3481427245UL), (3477537504UL), (2609821731UL), (867675919UL), (3395750357UL), (1969593211UL), (2390932014UL), (3164333009UL), (3032345429UL), (3054196992UL), (1655295657UL), (193598641UL), (1267960637UL), (1599091894UL), (3377410805UL), (1529073346UL), (1949183620UL), (1575927573UL), (1493246650UL), (2285478895UL), (797817618UL), (1736047766UL), (1537439339UL), (1422940895UL), (2210817855UL), (2888194544UL), (800138109UL), (1689425315UL), (87966703UL), (3800446188UL), (137301285UL), (3334431104UL), (1776710491UL), (4010349050UL), (2577018472UL), (3083459223UL), (672158271UL), (3379478560UL), (2445459713UL), (918903140UL), (2577376693UL), (273150303UL), (2300393435UL), (3529750006UL), (3941920515UL), (2590879584UL), (2005940914UL), (2533952036UL), (2918638361UL), (1907638097UL), (959011520UL), (1477207871UL), (2141548481UL), (2065858781UL), (3145892196UL), (3679867589UL), (1295127682UL), (1325838381UL), (3482593404UL), (1212565985UL), (3404887017UL), (709111097UL), (1714185234UL), (561489165UL), (3545430079UL), (359778601UL), (3034684349UL), (2235482356UL), (2263913966UL), (1397371482UL)}, {(170295791UL), (2753410803UL), (2200994594UL), (14686027UL), (3460333923UL), (1523230564UL), (393272614UL), (1632665034UL), (2139771608UL), (2436912103UL), (375335282UL), (667585308UL), (3651645415UL), (1403132103UL), (4146144245UL), (786890392UL), (1349234364UL), (1278024517UL), (84921263UL), (3758850381UL), (4213552796UL), (2355655048UL), (1636349912UL), (172797504UL), (2490691729UL), (1233059003UL), (2593048824UL), (942056581UL), (953415060UL), (4250104075UL), (787552244UL), (1995239637UL), (2482815609UL), (767530774UL), (773778243UL), (841396894UL), (2718419035UL), (3363828032UL), (737774143UL), (4128182656UL), (2335090807UL), (1421795969UL), (2322011430UL), (2808330380UL), (2207840656UL), (1646731611UL), (492284258UL), (2339383764UL), (3439685708UL), (2316859204UL), (4055048437UL), (1700143892UL), (2980557654UL), (1353917552UL), (548777318UL), (1077538998UL), (2650679367UL), (2853583947UL), (2721899692UL), (4253535213UL), (3375043688UL), (3489699354UL), (2401362855UL), (3391605246UL), (914273272UL), (3060460082UL), (1409014396UL), (3313834796UL), (461914731UL), (82334736UL), (3200344474UL), (2743316601UL), (842885927UL), (613943741UL), (96056919UL), (3116963503UL), (305659983UL), (132158360UL), (239064402UL), (849530381UL), (543215927UL), (4250983939UL), (2719881954UL), (1950301886UL), (2760008207UL), (853237881UL), (3875675156UL), (1753566841UL), (1446648300UL), (1663885236UL), (2155720472UL), (1902508987UL), (4246118829UL), (383661834UL), (2420221467UL), (156828838UL), (2919782856UL), (499968148UL), (2538550321UL), (65231340UL), (1589837081UL), (3654438263UL), (467304037UL), (1000159563UL), (622643461UL), (1410713407UL), (491953742UL), (1003597552UL), (1972701846UL), (1534343952UL), (1934888620UL), (4214562113UL), (4154375443UL), (3612899079UL), (2132948514UL), (2599819225UL), (2676649952UL), (3147375990UL), (533258319UL), (3323553423UL), (4203909276UL), (668602384UL), (3979162921UL), (2360530772UL), (162121513UL), (8968884UL), (3647746035UL), (2830313226UL), (1736955603UL), (78142012UL), (1643270604UL), (1571637938UL), (4065571991UL), (2071640825UL), (2715113082UL), (3826814783UL), (1067370024UL), (1810581550UL), (2354204343UL), (3798962263UL), (1664654967UL), (3740539785UL), (3746164996UL), (4280983219UL), (3313400832UL), (3305556349UL), (4226011346UL), (839676594UL), (1785445494UL), (1248107478UL), (904240268UL), (3484988721UL), (2290931247UL), (2109493967UL), (3895901626UL), (1494555863UL), (3251796061UL), (40877237UL), (2914051470UL), (2810210896UL), (1428826975UL), (170295791UL), (2753410803UL), (2200994594UL), (14686027UL), (3263438011UL), (1523230564UL), (393272614UL), (1632665034UL), (2139771608UL), (1847095655UL), (375335282UL), (667585308UL), (3651645415UL), (1403132103UL), (1888152231UL), (786890392UL), (1349234364UL), (1278024517UL), (84921263UL), (317409190UL), (4213552796UL), (2355655048UL), (1636349912UL), (172797504UL), (891435579UL), (1233059003UL), (2593048824UL), (942056581UL), (953415060UL), (1606837225UL), (787552244UL), (1995239637UL), (2482815609UL), (767530774UL), (723338833UL), (841396894UL), (2718419035UL), (3363828032UL), (737774143UL), (1043554448UL), (2335090807UL), (1421795969UL), (2322011430UL), (2808330380UL), (2754923978UL), (1646731611UL), (492284258UL), (2339383764UL), (3439685708UL), (3985616488UL), (4055048437UL), (1700143892UL), (2980557654UL), (1353917552UL), (588678041UL), (1077538998UL), (2650679367UL), (2853583947UL), (2721899692UL), (992549416UL), (3375043688UL), (3489699354UL), (2401362855UL), (3391605246UL), (2111206241UL), (3060460082UL), (1409014396UL), (3313834796UL), (461914731UL), (749987143UL), (3200344474UL), (2743316601UL), (842885927UL), (613943741UL), (1572013294UL), (3116963503UL), (305659983UL), (132158360UL), (239064402UL), (2802105766UL), (543215927UL), (4250983939UL), (2719881954UL), (1950301886UL), (1025784309UL), (853237881UL), (3875675156UL), (1753566841UL), (1446648300UL), (2265992307UL), (2155720472UL), (1902508987UL), (4246118829UL), (383661834UL), (1291267638UL), (156828838UL), (2919782856UL), (499968148UL), (2538550321UL), (2108151330UL), (1589837081UL), (3654438263UL), (467304037UL), (1000159563UL), (611554173UL), (1410713407UL), (491953742UL), (1003597552UL), (1972701846UL), (1548061756UL), (1934888620UL), (4214562113UL), (4154375443UL), (3612899079UL), (3599839935UL), (2599819225UL), (2676649952UL), (3147375990UL), (533258319UL), (4213499273UL), (4203909276UL), (668602384UL), (3979162921UL), (2360530772UL), (197252548UL), (8968884UL), (3647746035UL), (2830313226UL), (1736955603UL), (791687787UL), (1643270604UL), (1571637938UL), (4065571991UL), (2071640825UL), (2026290282UL), (3826814783UL), (1067370024UL), (1810581550UL), (2354204343UL), (2679791787UL), (1664654967UL), (3740539785UL), (3746164996UL), (4280983219UL), (1690075221UL), (3305556349UL), (4226011346UL), (839676594UL), (1785445494UL), (935893161UL), (904240268UL), (3484988721UL), (2290931247UL), (2109493967UL), (1497667362UL), (1494555863UL), (3251796061UL), (40877237UL), (2914051470UL), (1936503212UL), (1428826975UL), (170295791UL), (2753410803UL), (2200994594UL), (3416506072UL), (3263438011UL), (1523230564UL), (393272614UL), (1632665034UL), (3223475136UL), (1847095655UL), (375335282UL), (667585308UL), (3651645415UL), (1628711405UL), (1888152231UL), (786890392UL), (1349234364UL), (1278024517UL), (3955811679UL), (317409190UL), (4213552796UL), (2355655048UL), (1636349912UL), (2875036620UL), (891435579UL), (1233059003UL), (2593048824UL), (942056581UL), (2852399035UL), (1606837225UL), (787552244UL), (1995239637UL), (2482815609UL), (3849697041UL), (723338833UL), (841396894UL), (2718419035UL), (3363828032UL), (2914796626UL), (1043554448UL), (2335090807UL), (1421795969UL), (2322011430UL), (1088985845UL), (2754923978UL), (1646731611UL), (492284258UL), (2339383764UL), (2345741058UL), (3985616488UL), (4055048437UL), (1700143892UL), (2980557654UL), (3047950756UL), (588678041UL), (1077538998UL), (2650679367UL), (2853583947UL), (1902113580UL), (992549416UL), (3375043688UL), (3489699354UL), (2401362855UL), (2822431025UL), (2111206241UL), (3060460082UL), (1409014396UL), (3313834796UL), (3661696135UL), (749987143UL), (3200344474UL), (2743316601UL), (842885927UL), (3902266797UL), (1572013294UL), (3116963503UL), (305659983UL), (132158360UL), (2399116869UL), (2802105766UL), (543215927UL), (4250983939UL), (2719881954UL), (1909593430UL), (1025784309UL), (853237881UL), (3875675156UL), (1753566841UL), (315928539UL), (2265992307UL), (2155720472UL), (1902508987UL), (4246118829UL), (4054781820UL), (1291267638UL), (156828838UL), (2919782856UL), (499968148UL), (2746436642UL), (2108151330UL), (1589837081UL), (3654438263UL), (467304037UL), (2376244866UL), (611554173UL), (1410713407UL), (491953742UL), (1003597552UL), (961109680UL), (1548061756UL), (1934888620UL), (4214562113UL), (4154375443UL), (3318608531UL), (3599839935UL), (2599819225UL), (2676649952UL), (3147375990UL), (3197943734UL), (4213499273UL), (4203909276UL), (668602384UL), (3979162921UL), (4241359084UL), (197252548UL), (8968884UL), (3647746035UL), (2830313226UL), (2057817762UL), (791687787UL), (1643270604UL), (1571637938UL), (4065571991UL), (961587641UL), (2026290282UL), (3826814783UL), (1067370024UL), (1810581550UL), (1525669339UL), (2679791787UL), (1664654967UL), (3740539785UL), (3746164996UL), (3971185743UL), (1690075221UL), (3305556349UL), (4226011346UL), (839676594UL), (4017546432UL), (935893161UL), (904240268UL), (3484988721UL), (2290931247UL), (2887434676UL), (1497667362UL), (1494555863UL), (3251796061UL), (40877237UL), (675451622UL), (1936503212UL), (1428826975UL), (170295791UL), (2753410803UL), (13691728UL), (3416506072UL), (3263438011UL), (1523230564UL), (393272614UL), (2875584734UL), (3223475136UL), (1847095655UL), (375335282UL), (667585308UL), (192306502UL), (1628711405UL), (1888152231UL), (786890392UL), (1349234364UL), (511851370UL), (3955811679UL), (317409190UL), (4213552796UL), (2355655048UL), (131052067UL), (2875036620UL), (891435579UL), (1233059003UL), (2593048824UL), (2915307792UL), (2852399035UL), (1606837225UL), (787552244UL), (1995239637UL), (886016481UL), (3849697041UL), (723338833UL), (841396894UL), (2718419035UL), (1765948302UL), (2914796626UL), (1043554448UL), (2335090807UL), (1421795969UL), (4270899906UL), (1088985845UL), (2754923978UL), (1646731611UL), (492284258UL), (1723935335UL), (2345741058UL), (3985616488UL), (4055048437UL), (1700143892UL), (2254566160UL), (3047950756UL), (588678041UL), (1077538998UL), (2650679367UL), (1004539894UL), (1902113580UL), (992549416UL), (3375043688UL), (3489699354UL), (2030140735UL), (2822431025UL), (2111206241UL), (3060460082UL), (1409014396UL), (3053214877UL), (3661696135UL), (749987143UL), (3200344474UL), (2743316601UL), (398855857UL), (3902266797UL), (1572013294UL), (3116963503UL), (305659983UL), (1626072332UL), (2399116869UL), (2802105766UL), (543215927UL), (4250983939UL), (1149058742UL), (1909593430UL), (1025784309UL), (853237881UL), (3875675156UL), (2709854504UL), (315928539UL), (2265992307UL), (2155720472UL), (1902508987UL), (4065691077UL), (4054781820UL), (1291267638UL), (156828838UL), (2919782856UL), (1004764391UL), (2746436642UL), (2108151330UL), (1589837081UL), (3654438263UL), (2380382984UL), (2376244866UL), (611554173UL), (1410713407UL), (491953742UL), (3149407591UL), (961109680UL), (1548061756UL), (1934888620UL), (4214562113UL), (1555853416UL), (3318608531UL), (3599839935UL), (2599819225UL), (2676649952UL), (1902647993UL), (3197943734UL), (4213499273UL), (4203909276UL), (668602384UL), (2188341510UL), (4241359084UL), (197252548UL), (8968884UL), (3647746035UL), (629654524UL), (2057817762UL), (791687787UL), (1643270604UL), (1571637938UL), (3066487639UL), (961587641UL), (2026290282UL), (3826814783UL), (1067370024UL), (2223613942UL), (1525669339UL), (2679791787UL), (1664654967UL), (3740539785UL), (3902060288UL), (3971185743UL), (1690075221UL), (3305556349UL), (4226011346UL), (3135081672UL), (4017546432UL), (935893161UL), (904240268UL), (3484988721UL), (2448752416UL), (2887434676UL), (1497667362UL), (1494555863UL), (3251796061UL), (1037186927UL), (1608759110UL), (3873834254UL), (59242551UL), (487334743UL), (2580513180UL), (3704829028UL), (3859157573UL), (3452402004UL), (783668920UL), (2394905786UL), (3179497902UL), (2576105629UL), (1552362163UL), (2138613992UL), (224944469UL), (3876873579UL), (3402518289UL), (1709606949UL), (4255868112UL), (1249055439UL), (3395879908UL), (2957760102UL), (346905231UL), (590629983UL), (1171021480UL), (4051081465UL), (3913643946UL), (3115845768UL), (1021908139UL), (2556028362UL), (3828177651UL), (2870156105UL), (899722025UL), (661756192UL), (3775551864UL), (1288569751UL), (3751947667UL), (3064664685UL), (2559273148UL), (2660772417UL), (2448044253UL), (3054357327UL), (3434913868UL), (1444728572UL), (3010819186UL), (3010362527UL), (1709131033UL), (3425689752UL), (2849921358UL), (3518017065UL), (3845809665UL), (3245724553UL), (1008739837UL), (3274032925UL), (2567688974UL), (1981389077UL), (1108638127UL), (470206543UL), (1097339633UL), (1714430226UL), (2321268672UL), (1149373331UL), (294569671UL), (4264586290UL), (4270574127UL), (2522456947UL), (230975563UL), (131504269UL), (541738544UL), (1380704847UL), (2946408074UL), (282744860UL), (246858261UL), (2037373985UL), (1769191691UL), (2174871838UL), (2097427065UL), (492251656UL), (1252290304UL), (3616248100UL), (3213248383UL), (1847973756UL), (647347869UL), (3015847616UL), (299045987UL), (866593289UL), (2009367463UL), (2448831631UL), (337965200UL), (1210654808UL), (1694878225UL), (853507918UL), (3373825966UL), (4262812941UL), (4279525028UL), (338822858UL), (1038097567UL), (3996799911UL), (755960212UL), (149304151UL), (1599868486UL), (4021605447UL), (3040297322UL), (3891899828UL), (1711866076UL), (900840696UL), (3675688669UL), (3070862438UL), (2611308185UL), (2359948129UL), (1158552196UL), (2094484627UL), (3077606843UL), (2119537593UL), (427023787UL), (3632076073UL), (2670551310UL), (3396099733UL), (1066081183UL), (1817788918UL), (324769315UL), (656687887UL), (202117575UL), (3106428593UL), (3730407212UL), (1661316263UL), (1215084998UL), (2025391552UL), (664352483UL), (1914686594UL), (9439399UL), (2548190484UL), (3127972014UL), (4008228378UL), (2645735658UL), (2191361716UL), (2211450148UL), (1863406291UL), (1179298131UL), (241880428UL), (2330159770UL), (3490494273UL), (1337382890UL), (747522461UL), (1060348557UL), (3618051469UL), (991193538UL), (1604905367UL), (2595102954UL), (1460144089UL), (3990194961UL), (44265425UL), (896268152UL), (9333748UL), (2850675977UL), (941433385UL), (2483544989UL), (3443750079UL), (2488690792UL)}, {(824297644UL), (239464654UL), (4133652405UL), (1611614045UL), (102133367UL), (1780659362UL), (114934718UL), (3793050817UL), (3286619856UL), (1323742990UL), (3487325492UL), (468742651UL), (271433491UL), (3474195023UL), (479173886UL), (3282693508UL), (978269731UL), (1826990521UL), (3664994445UL), (1943608646UL), (2356793330UL), (2228748670UL), (4238523810UL), (2467714013UL), (1732683390UL), (2345218001UL), (3371637369UL), (1073602848UL), (844797255UL), (3881048480UL), (509186599UL), (1399427071UL), (3815270778UL), (1505666412UL), (2616384981UL), (2990167853UL), (3716581225UL), (3063486812UL), (1568307898UL), (3262882991UL), (1455926070UL), (3011806226UL), (3803364927UL), (849372289UL), (2382885729UL), (3071102985UL), (3838244574UL), (3219174218UL), (847830757UL), (1414310383UL), (3679389549UL), (1558413907UL), (2211822428UL), (339810803UL), (1051648907UL), (76928699UL), (3174194320UL), (3920525151UL), (2010088097UL), (4111092791UL), (3537133983UL), (1701410561UL), (3036563175UL), (4010986440UL), (1749862952UL), (159833659UL), (3406940095UL), (1041601178UL), (4005001553UL), (1663515026UL), (1728511107UL), (1496728329UL), (2359970426UL), (530862749UL), (3797637507UL), (2550923758UL), (1450321218UL), (21682904UL), (936804838UL), (3832989199UL), (3063256293UL), (3991708711UL), (986539283UL), (3775232150UL), (2867283706UL), (747477232UL), (946349345UL), (1010022077UL), (188204104UL), (2526787171UL), (2816843760UL), (1776005940UL), (2819738500UL), (1155856699UL), (2191793692UL), (3802193350UL), (1163036922UL), (645032560UL), (3122679267UL), (3311719932UL), (3757073707UL), (2464258247UL), (1360425558UL), (387981241UL), (1714916540UL), (411019237UL), (2248466094UL), (2878213113UL), (2742600760UL), (2763650927UL), (2526526309UL), (1093836264UL), (3819986000UL), (3754388150UL), (1731831799UL), (1441137152UL), (1625850961UL), (1182084155UL), (1596226376UL), (2389499892UL), (3923360808UL), (2439159233UL), (1623373213UL), (2513747479UL), (3651587995UL), (1040867254UL), (4208484711UL), (3489019765UL), (2141904813UL), (3666280633UL), (970464748UL), (2970978888UL), (1376163015UL), (1218588624UL), (2721249823UL), (707915046UL), (4262557484UL), (3237019195UL), (744279211UL), (364567144UL), (1997174860UL), (3215512870UL), (2758022574UL), (2677818352UL), (4198422061UL), (3016017869UL), (2243997977UL), (1029293722UL), (1820056287UL), (1090825999UL), (4135403724UL), (299239527UL), (874620372UL), (2995368704UL), (3219627293UL), (2431393692UL), (3470601754UL), (1809177571UL), (37446335UL), (1619184385UL), (675901368UL), (824297644UL), (239464654UL), (4133652405UL), (1611614045UL), (1918718045UL), (1780659362UL), (114934718UL), (3793050817UL), (3286619856UL), (3566342809UL), (3487325492UL), (468742651UL), (271433491UL), (3474195023UL), (77797025UL), (3282693508UL), (978269731UL), (1826990521UL), (3664994445UL), (1455182612UL), (2356793330UL), (2228748670UL), (4238523810UL), (2467714013UL), (1081984526UL), (2345218001UL), (3371637369UL), (1073602848UL), (844797255UL), (4125413817UL), (509186599UL), (1399427071UL), (3815270778UL), (1505666412UL), (891823593UL), (2990167853UL), (3716581225UL), (3063486812UL), (1568307898UL), (1753181930UL), (1455926070UL), (3011806226UL), (3803364927UL), (849372289UL), (4211525266UL), (3071102985UL), (3838244574UL), (3219174218UL), (847830757UL), (774013898UL), (3679389549UL), (1558413907UL), (2211822428UL), (339810803UL), (2282783575UL), (76928699UL), (3174194320UL), (3920525151UL), (2010088097UL), (3894905215UL), (3537133983UL), (1701410561UL), (3036563175UL), (4010986440UL), (676262036UL), (159833659UL), (3406940095UL), (1041601178UL), (4005001553UL), (3470687799UL), (1728511107UL), (1496728329UL), (2359970426UL), (530862749UL), (3081565689UL), (2550923758UL), (1450321218UL), (21682904UL), (936804838UL), (951873872UL), (3063256293UL), (3991708711UL), (986539283UL), (3775232150UL), (487381835UL), (747477232UL), (946349345UL), (1010022077UL), (188204104UL), (2898848241UL), (2816843760UL), (1776005940UL), (2819738500UL), (1155856699UL), (2432683643UL), (3802193350UL), (1163036922UL), (645032560UL), (3122679267UL), (22749078UL), (3757073707UL), (2464258247UL), (1360425558UL), (387981241UL), (3652130062UL), (411019237UL), (2248466094UL), (2878213113UL), (2742600760UL), (811608089UL), (2526526309UL), (1093836264UL), (3819986000UL), (3754388150UL), (415809552UL), (1441137152UL), (1625850961UL), (1182084155UL), (1596226376UL), (202609936UL), (3923360808UL), (2439159233UL), (1623373213UL), (2513747479UL), (4149563237UL), (1040867254UL), (4208484711UL), (3489019765UL), (2141904813UL), (718806958UL), (970464748UL), (2970978888UL), (1376163015UL), (1218588624UL), (2307367700UL), (707915046UL), (4262557484UL), (3237019195UL), (744279211UL), (1876395939UL), (1997174860UL), (3215512870UL), (2758022574UL), (2677818352UL), (2276158677UL), (3016017869UL), (2243997977UL), (1029293722UL), (1820056287UL), (3605618012UL), (4135403724UL), (299239527UL), (874620372UL), (2995368704UL), (872126519UL), (2431393692UL), (3470601754UL), (1809177571UL), (37446335UL), (2365355125UL), (675901368UL), (824297644UL), (239464654UL), (4133652405UL), (8139161UL), (1918718045UL), (1780659362UL), (114934718UL), (3793050817UL), (2424418256UL), (3566342809UL), (3487325492UL), (468742651UL), (271433491UL), (542129690UL), (77797025UL), (3282693508UL), (978269731UL), (1826990521UL), (2963435579UL), (1455182612UL), (2356793330UL), (2228748670UL), (4238523810UL), (2373300657UL), (1081984526UL), (2345218001UL), (3371637369UL), (1073602848UL), (2948610237UL), (4125413817UL), (509186599UL), (1399427071UL), (3815270778UL), (2870251133UL), (891823593UL), (2990167853UL), (3716581225UL), (3063486812UL), (2347504584UL), (1753181930UL), (1455926070UL), (3011806226UL), (3803364927UL), (3956554065UL), (4211525266UL), (3071102985UL), (3838244574UL), (3219174218UL), (2018597841UL), (774013898UL), (3679389549UL), (1558413907UL), (2211822428UL), (56072605UL), (2282783575UL), (76928699UL), (3174194320UL), (3920525151UL), (268031035UL), (3894905215UL), (3537133983UL), (1701410561UL), (3036563175UL), (366935627UL), (676262036UL), (159833659UL), (3406940095UL), (1041601178UL), (4125224603UL), (3470687799UL), (1728511107UL), (1496728329UL), (2359970426UL), (3570997128UL), (3081565689UL), (2550923758UL), (1450321218UL), (21682904UL), (604517910UL), (951873872UL), (3063256293UL), (3991708711UL), (986539283UL), (2414780630UL), (487381835UL), (747477232UL), (946349345UL), (1010022077UL), (3820353604UL), (2898848241UL), (2816843760UL), (1776005940UL), (2819738500UL), (1192624235UL), (2432683643UL), (3802193350UL), (1163036922UL), (645032560UL), (4050277201UL), (22749078UL), (3757073707UL), (2464258247UL), (1360425558UL), (1933406988UL), (3652130062UL), (411019237UL), (2248466094UL), (2878213113UL), (37869698UL), (811608089UL), (2526526309UL), (1093836264UL), (3819986000UL), (3999750910UL), (415809552UL), (1441137152UL), (1625850961UL), (1182084155UL), (1186617400UL), (202609936UL), (3923360808UL), (2439159233UL), (1623373213UL), (4226729056UL), (4149563237UL), (1040867254UL), (4208484711UL), (3489019765UL), (3728140516UL), (718806958UL), (970464748UL), (2970978888UL), (1376163015UL), (1307011711UL), (2307367700UL), (707915046UL), (4262557484UL), (3237019195UL), (4014387080UL), (1876395939UL), (1997174860UL), (3215512870UL), (2758022574UL), (1696763772UL), (2276158677UL), (3016017869UL), (2243997977UL), (1029293722UL), (1444214949UL), (3605618012UL), (4135403724UL), (299239527UL), (874620372UL), (1524158085UL), (872126519UL), (2431393692UL), (3470601754UL), (1809177571UL), (163166369UL), (2365355125UL), (675901368UL), (824297644UL), (239464654UL), (1626558353UL), (8139161UL), (1918718045UL), (1780659362UL), (114934718UL), (1885224714UL), (2424418256UL), (3566342809UL), (3487325492UL), (468742651UL), (1101039917UL), (542129690UL), (77797025UL), (3282693508UL), (978269731UL), (3659653445UL), (2963435579UL), (1455182612UL), (2356793330UL), (2228748670UL), (539062188UL), (2373300657UL), (1081984526UL), (2345218001UL), (3371637369UL), (2825652803UL), (2948610237UL), (4125413817UL), (509186599UL), (1399427071UL), (3197034620UL), (2870251133UL), (891823593UL), (2990167853UL), (3716581225UL), (3773712182UL), (2347504584UL), (1753181930UL), (1455926070UL), (3011806226UL), (3260276773UL), (3956554065UL), (4211525266UL), (3071102985UL), (3838244574UL), (201639236UL), (2018597841UL), (774013898UL), (3679389549UL), (1558413907UL), (2830702673UL), (56072605UL), (2282783575UL), (76928699UL), (3174194320UL), (1677734845UL), (268031035UL), (3894905215UL), (3537133983UL), (1701410561UL), (4240866153UL), (366935627UL), (676262036UL), (159833659UL), (3406940095UL), (4245889153UL), (4125224603UL), (3470687799UL), (1728511107UL), (1496728329UL), (3650277906UL), (3570997128UL), (3081565689UL), (2550923758UL), (1450321218UL), (3392011930UL), (604517910UL), (951873872UL), (3063256293UL), (3991708711UL), (2876003834UL), (2414780630UL), (487381835UL), (747477232UL), (946349345UL), (982266944UL), (3820353604UL), (2898848241UL), (2816843760UL), (1776005940UL), (3677715064UL), (1192624235UL), (2432683643UL), (3802193350UL), (1163036922UL), (1226669337UL), (4050277201UL), (22749078UL), (3757073707UL), (2464258247UL), (4197532785UL), (1933406988UL), (3652130062UL), (411019237UL), (2248466094UL), (3209426720UL), (37869698UL), (811608089UL), (2526526309UL), (1093836264UL), (535856568UL), (3999750910UL), (415809552UL), (1441137152UL), (1625850961UL), (2181491119UL), (1186617400UL), (202609936UL), (3923360808UL), (2439159233UL), (1823827533UL), (4226729056UL), (4149563237UL), (1040867254UL), (4208484711UL), (1101917521UL), (3728140516UL), (718806958UL), (970464748UL), (2970978888UL), (1574663259UL), (1307011711UL), (2307367700UL), (707915046UL), (4262557484UL), (2164217930UL), (4014387080UL), (1876395939UL), (1997174860UL), (3215512870UL), (1335157953UL), (1696763772UL), (2276158677UL), (3016017869UL), (2243997977UL), (324788481UL), (1444214949UL), (3605618012UL), (4135403724UL), (299239527UL), (4190629945UL), (1524158085UL), (872126519UL), (2431393692UL), (3470601754UL), (3701018280UL), (671547257UL), (4029965023UL), (1026428282UL), (1584875796UL), (3537698406UL), (3731126476UL), (2419795330UL), (993551117UL), (2126319514UL), (3557113304UL), (1014047757UL), (1407120210UL), (1977537539UL), (1338958570UL), (3249585389UL), (3661503659UL), (4240815680UL), (1866933898UL), (3205442033UL), (4247144816UL), (1422846419UL), (3847421981UL), (1383632066UL), (3589322376UL), (1816906043UL), (1310944471UL), (3646822098UL), (799529013UL), (3350558751UL), (2552899295UL), (4281235599UL), (4069668296UL), (4123814877UL), (3289565353UL), (1512974699UL), (111908081UL), (2535556715UL), (333570815UL), (3638041929UL), (1942569446UL), (20945397UL), (3784826827UL), (200406456UL), (2640512138UL), (38390336UL), (436784052UL), (3062106345UL), (1675333627UL), (709613078UL), (3479720979UL), (2726065658UL), (4072312748UL), (797389139UL), (3492082903UL), (3792395750UL), (983473383UL), (2984788349UL), (2030282907UL), (2246686378UL), (2451087141UL), (1799640566UL), (2182694041UL), (3226819076UL), (3573153299UL), (3658670545UL), (1197013516UL), (777601408UL), (4271704548UL), (1192713934UL), (1628497069UL), (681025927UL), (4078910773UL), (619496169UL), (1534725146UL), (1881987408UL), (2283881479UL), (1090218673UL), (4169123978UL), (2352195985UL), (2640116078UL), (3869558100UL), (2859177954UL), (3329803656UL), (4048903941UL), (1636589748UL), (2095007175UL), (4169840880UL), (2953611537UL), (2413740464UL), (3029624235UL), (778662441UL), (422412779UL), (412103280UL), (1701569571UL), (564088645UL), (469973310UL), (254302146UL), (3963642101UL), (555781470UL), (2983576224UL), (1757897888UL), (1420763962UL), (2176323176UL), (916790568UL), (3057610889UL), (196828641UL), (1435167402UL), (325046353UL), (1337309066UL), (2691769282UL), (3572566918UL), (2910149226UL), (3659418019UL), (2511762503UL), (3869838339UL), (1413312151UL), (1939339596UL), (801124461UL), (760477862UL), (2416958233UL), (3439465675UL), (3561763524UL), (1760392811UL), (1582406751UL), (1203071257UL), (755811399UL), (2675585013UL), (1150664766UL), (3515765747UL), (3419135844UL), (2076543342UL), (1191918544UL), (3644819073UL), (2195875022UL), (2909071148UL), (3385707813UL), (1151273265UL), (1467337419UL), (3570589492UL), (3742049917UL), (1609858615UL), (2964509119UL), (3747960348UL), (2825858640UL), (101501715UL), (1234710482UL), (750428334UL), (2870070395UL), (416615350UL), (4054039387UL), (3807926874UL), (3035407103UL), (1644560291UL), (2490941295UL), (963796562UL), (3233132139UL), (2590859502UL), (2845243609UL), (964355909UL)}, {(2882980002UL), (2211288683UL), (872766101UL), (3713771728UL), (1429983118UL), (2069599564UL), (827699420UL), (1288565883UL), (2985727214UL), (3873174741UL), (2138389854UL), (3915615927UL), (2759028650UL), (3120611541UL), (385953581UL), (189931252UL), (2044235060UL), (4214733958UL), (1899137741UL), (1973215178UL), (494148492UL), (1550568689UL), (3646957712UL), (3764784141UL), (1114556979UL), (1411407684UL), (1194906295UL), (1718808623UL), (1809627046UL), (1413570172UL), (180837718UL), (2588730975UL), (1481586714UL), (2836300053UL), (1967135375UL), (4010897189UL), (3392273121UL), (3466021198UL), (1182364160UL), (1364130321UL), (1795412556UL), (330320182UL), (1165093128UL), (2125767818UL), (904192995UL), (51833064UL), (232302906UL), (1834422179UL), (476731510UL), (3484170517UL), (2373156680UL), (2610500049UL), (1688364249UL), (463611489UL), (3759685710UL), (62038708UL), (2357334250UL), (1230002441UL), (520303451UL), (3009758047UL), (1882263827UL), (2524779298UL), (1736323157UL), (3883037541UL), (1103650182UL), (1137565179UL), (3112310886UL), (3524287283UL), (3064002681UL), (4106308847UL), (3180534967UL), (2463036338UL), (1859639515UL), (1319061987UL), (354419222UL), (4108171950UL), (601260554UL), (705389180UL), (4081137445UL), (3461353436UL), (399768111UL), (3963945521UL), (2094962544UL), (630762046UL), (369047181UL), (3495709267UL), (3525452874UL), (314919391UL), (2152657907UL), (881476500UL), (3565507827UL), (2594931381UL), (579458905UL), (1767988684UL), (2678728511UL), (3416503939UL), (4150612567UL), (1015748208UL), (2059142720UL), (2725183490UL), (2998421769UL), (1644667445UL), (4221112143UL), (456578131UL), (3881530201UL), (190710543UL), (1721255927UL), (2274887963UL), (187713135UL), (2209254952UL), (2185750138UL), (2992229399UL), (482133467UL), (2758198810UL), (15147949UL), (536333711UL), (2296185346UL), (1103433779UL), (1573407789UL), (1357843567UL), (2927153963UL), (4157295398UL), (533935893UL), (3567030810UL), (1900900411UL), (509578395UL), (3810017456UL), (2134110040UL), (3347323570UL), (3497032747UL), (201278263UL), (3933249682UL), (3849960474UL), (2509123202UL), (3445521167UL), (1355284593UL), (2444811561UL), (2751112324UL), (1116246614UL), (511213077UL), (3412599909UL), (1712118363UL), (54054007UL), (442729047UL), (3077267414UL), (1532701769UL), (181534938UL), (1278069867UL), (3847149992UL), (2305860479UL), (4146252420UL), (2047690303UL), (361856758UL), (452490341UL), (636885000UL), (1733216839UL), (3788548638UL), (1094285639UL), (1349356222UL), (2760444511UL), (976767752UL), (2882980002UL), (2211288683UL), (872766101UL), (3713771728UL), (895830110UL), (2069599564UL), (827699420UL), (1288565883UL), (2985727214UL), (3377496544UL), (2138389854UL), (3915615927UL), (2759028650UL), (3120611541UL), (3254971483UL), (189931252UL), (2044235060UL), (4214733958UL), (1899137741UL), (2095055586UL), (494148492UL), (1550568689UL), (3646957712UL), (3764784141UL), (2869825005UL), (1411407684UL), (1194906295UL), (1718808623UL), (1809627046UL), (907760376UL), (180837718UL), (2588730975UL), (1481586714UL), (2836300053UL), (639229964UL), (4010897189UL), (3392273121UL), (3466021198UL), (1182364160UL), (3006792787UL), (1795412556UL), (330320182UL), (1165093128UL), (2125767818UL), (253264555UL), (51833064UL), (232302906UL), (1834422179UL), (476731510UL), (4284481518UL), (2373156680UL), (2610500049UL), (1688364249UL), (463611489UL), (4133115610UL), (62038708UL), (2357334250UL), (1230002441UL), (520303451UL), (1497001150UL), (1882263827UL), (2524779298UL), (1736323157UL), (3883037541UL), (3541909847UL), (1137565179UL), (3112310886UL), (3524287283UL), (3064002681UL), (3193060438UL), (3180534967UL), (2463036338UL), (1859639515UL), (1319061987UL), (111871878UL), (4108171950UL), (601260554UL), (705389180UL), (4081137445UL), (742999102UL), (399768111UL), (3963945521UL), (2094962544UL), (630762046UL), (3219207950UL), (3495709267UL), (3525452874UL), (314919391UL), (2152657907UL), (720863934UL), (3565507827UL), (2594931381UL), (579458905UL), (1767988684UL), (3958525287UL), (3416503939UL), (4150612567UL), (1015748208UL), (2059142720UL), (4227838648UL), (2998421769UL), (1644667445UL), (4221112143UL), (456578131UL), (302729329UL), (190710543UL), (1721255927UL), (2274887963UL), (187713135UL), (1293706587UL), (2185750138UL), (2992229399UL), (482133467UL), (2758198810UL), (2514965671UL), (536333711UL), (2296185346UL), (1103433779UL), (1573407789UL), (2237639577UL), (2927153963UL), (4157295398UL), (533935893UL), (3567030810UL), (3793156627UL), (509578395UL), (3810017456UL), (2134110040UL), (3347323570UL), (1358364UL), (201278263UL), (3933249682UL), (3849960474UL), (2509123202UL), (628476542UL), (1355284593UL), (2444811561UL), (2751112324UL), (1116246614UL), (3421170828UL), (3412599909UL), (1712118363UL), (54054007UL), (442729047UL), (325825294UL), (1532701769UL), (181534938UL), (1278069867UL), (3847149992UL), (2785457372UL), (4146252420UL), (2047690303UL), (361856758UL), (452490341UL), (1099532083UL), (1733216839UL), (3788548638UL), (1094285639UL), (1349356222UL), (3047068265UL), (976767752UL), (2882980002UL), (2211288683UL), (872766101UL), (366378371UL), (895830110UL), (2069599564UL), (827699420UL), (1288565883UL), (962962884UL), (3377496544UL), (2138389854UL), (3915615927UL), (2759028650UL), (3742489931UL), (3254971483UL), (189931252UL), (2044235060UL), (4214733958UL), (3073407497UL), (2095055586UL), (494148492UL), (1550568689UL), (3646957712UL), (758370067UL), (2869825005UL), (1411407684UL), (1194906295UL), (1718808623UL), (636166267UL), (907760376UL), (180837718UL), (2588730975UL), (1481586714UL), (705382583UL), (639229964UL), (4010897189UL), (3392273121UL), (3466021198UL), (3815622040UL), (3006792787UL), (1795412556UL), (330320182UL), (1165093128UL), (2956382339UL), (253264555UL), (51833064UL), (232302906UL), (1834422179UL), (3665645898UL), (4284481518UL), (2373156680UL), (2610500049UL), (1688364249UL), (2565987890UL), (4133115610UL), (62038708UL), (2357334250UL), (1230002441UL), (2397198293UL), (1497001150UL), (1882263827UL), (2524779298UL), (1736323157UL), (817630445UL), (3541909847UL), (1137565179UL), (3112310886UL), (3524287283UL), (1356492703UL), (3193060438UL), (3180534967UL), (2463036338UL), (1859639515UL), (3963974342UL), (111871878UL), (4108171950UL), (601260554UL), (705389180UL), (1776439965UL), (742999102UL), (399768111UL), (3963945521UL), (2094962544UL), (2007137733UL), (3219207950UL), (3495709267UL), (3525452874UL), (314919391UL), (3877039785UL), (720863934UL), (3565507827UL), (2594931381UL), (579458905UL), (2919403199UL), (3958525287UL), (3416503939UL), (4150612567UL), (1015748208UL), (960765392UL), (4227838648UL), (2998421769UL), (1644667445UL), (4221112143UL), (2402062799UL), (302729329UL), (190710543UL), (1721255927UL), (2274887963UL), (3958481548UL), (1293706587UL), (2185750138UL), (2992229399UL), (482133467UL), (3838280UL), (2514965671UL), (536333711UL), (2296185346UL), (1103433779UL), (3675282065UL), (2237639577UL), (2927153963UL), (4157295398UL), (533935893UL), (4172021805UL), (3793156627UL), (509578395UL), (3810017456UL), (2134110040UL), (3608998517UL), (1358364UL), (201278263UL), (3933249682UL), (3849960474UL), (2445690023UL), (628476542UL), (1355284593UL), (2444811561UL), (2751112324UL), (507378026UL), (3421170828UL), (3412599909UL), (1712118363UL), (54054007UL), (770634305UL), (325825294UL), (1532701769UL), (181534938UL), (1278069867UL), (4055596097UL), (2785457372UL), (4146252420UL), (2047690303UL), (361856758UL), (3439427065UL), (1099532083UL), (1733216839UL), (3788548638UL), (1094285639UL), (1633234274UL), (3047068265UL), (976767752UL), (2882980002UL), (2211288683UL), (3763615153UL), (366378371UL), (895830110UL), (2069599564UL), (827699420UL), (2457443913UL), (962962884UL), (3377496544UL), (2138389854UL), (3915615927UL), (3290989016UL), (3742489931UL), (3254971483UL), (189931252UL), (2044235060UL), (4275822963UL), (3073407497UL), (2095055586UL), (494148492UL), (1550568689UL), (1043420085UL), (758370067UL), (2869825005UL), (1411407684UL), (1194906295UL), (676378812UL), (636166267UL), (907760376UL), (180837718UL), (2588730975UL), (2971715054UL), (705382583UL), (639229964UL), (4010897189UL), (3392273121UL), (795184546UL), (3815622040UL), (3006792787UL), (1795412556UL), (330320182UL), (1990804460UL), (2956382339UL), (253264555UL), (51833064UL), (232302906UL), (836875615UL), (3665645898UL), (4284481518UL), (2373156680UL), (2610500049UL), (98106795UL), (2565987890UL), (4133115610UL), (62038708UL), (2357334250UL), (2761212145UL), (2397198293UL), (1497001150UL), (1882263827UL), (2524779298UL), (2381031747UL), (817630445UL), (3541909847UL), (1137565179UL), (3112310886UL), (2501374726UL), (1356492703UL), (3193060438UL), (3180534967UL), (2463036338UL), (3671733096UL), (3963974342UL), (111871878UL), (4108171950UL), (601260554UL), (1017043724UL), (1776439965UL), (742999102UL), (399768111UL), (3963945521UL), (2177838102UL), (2007137733UL), (3219207950UL), (3495709267UL), (3525452874UL), (3254054416UL), (3877039785UL), (720863934UL), (3565507827UL), (2594931381UL), (1994293489UL), (2919403199UL), (3958525287UL), (3416503939UL), (4150612567UL), (1976960210UL), (960765392UL), (4227838648UL), (2998421769UL), (1644667445UL), (2896792687UL), (2402062799UL), (302729329UL), (190710543UL), (1721255927UL), (2914584080UL), (3958481548UL), (1293706587UL), (2185750138UL), (2992229399UL), (810756083UL), (3838280UL), (2514965671UL), (536333711UL), (2296185346UL), (1776509588UL), (3675282065UL), (2237639577UL), (2927153963UL), (4157295398UL), (2048779551UL), (4172021805UL), (3793156627UL), (509578395UL), (3810017456UL), (3042185034UL), (3608998517UL), (1358364UL), (201278263UL), (3933249682UL), (3551449718UL), (2445690023UL), (628476542UL), (1355284593UL), (2444811561UL), (3480611728UL), (507378026UL), (3421170828UL), (3412599909UL), (1712118363UL), (1268921331UL), (770634305UL), (325825294UL), (1532701769UL), (181534938UL), (2645357587UL), (4055596097UL), (2785457372UL), (4146252420UL), (2047690303UL), (1994855609UL), (3439427065UL), (1099532083UL), (1733216839UL), (3788548638UL), (3516588243UL), (4058132193UL), (3940172101UL), (4043964688UL), (3377150021UL), (1381463736UL), (3320280180UL), (931260821UL), (2754727582UL), (1286176949UL), (1661126244UL), (2301263887UL), (2255977851UL), (1122646603UL), (1767549201UL), (162324152UL), (425506096UL), (3777762686UL), (13687528UL), (710105607UL), (1092739920UL), (2930179533UL), (568855389UL), (2476208631UL), (964360978UL), (2011445117UL), (3887128674UL), (2799005525UL), (2479086439UL), (814368438UL), (2018629666UL), (909662384UL), (231589584UL), (1422241284UL), (4035938208UL), (3570985552UL), (660700421UL), (603857869UL), (567385627UL), (3232044670UL), (291307502UL), (947817625UL), (3466590280UL), (3080261993UL), (947835229UL), (2925888682UL), (1817591844UL), (2652420575UL), (4150903445UL), (4055627313UL), (1715025966UL), (505331227UL), (1863531052UL), (2928506098UL), (947547681UL), (1117344443UL), (781457023UL), (607542746UL), (241559360UL), (3797150797UL), (105381589UL), (361541961UL), (3393121650UL), (3840152184UL), (2873171161UL), (3030026082UL), (1115171192UL), (1718221281UL), (96787532UL), (2556617898UL), (1237726058UL), (2876298621UL), (1052881200UL), (461661595UL), (2632346030UL), (1775614319UL), (2454951319UL), (3691637824UL), (4018448825UL), (1610472965UL), (3076493165UL), (1364200430UL), (2011206580UL), (1066672050UL), (706141458UL), (2064189273UL), (346938484UL), (2964350202UL), (3731612957UL), (2506635528UL), (2007045393UL), (3312126930UL), (2602035453UL), (988876930UL), (2960173442UL), (559685520UL), (2719943441UL), (891699839UL), (1151651090UL), (1223301894UL), (3666960271UL), (1330825927UL), (1681770552UL), (38877327UL), (3803211467UL), (4000053051UL), (3552560459UL), (3510286057UL), (2606732870UL), (721190747UL), (1933504723UL), (3110735238UL), (2333178561UL), (1577381363UL), (595257962UL), (4120745072UL), (960219089UL), (2591080970UL), (3354222743UL), (47827627UL), (3759509914UL), (304815919UL), (2643673615UL), (1381570381UL), (2103367217UL), (2440936991UL), (2376721005UL), (1483630814UL), (3137202706UL), (3075255640UL), (1743649605UL), (3649754571UL), (2550788713UL), (4281983459UL), (904183710UL), (4243944530UL), (2742129811UL), (3363501626UL), (3670239155UL), (4233018118UL), (2615012385UL), (1420298161UL), (1251344091UL), (2172588631UL), (1243035186UL), (1724496237UL), (762022558UL), (8747231UL), (334416849UL), (1219880856UL), (187900356UL), (2527057367UL), (1730455958UL), (3240238410UL), (906024910UL), (2351575735UL), (4207748622UL), (936139767UL), (1984289988UL), (285939331UL)}, {(4246897171UL), (2217508286UL), (4117450683UL), (4110626546UL), (3753823387UL), (3977667932UL), (623718443UL), (2276396692UL), (3772091798UL), (2272323453UL), (710314822UL), (3733316262UL), (1497955597UL), (700242668UL), (3582720207UL), (1247731879UL), (336477088UL), (532374143UL), (1123157198UL), (123828173UL), (272472192UL), (2142741093UL), (2557920990UL), (4209595119UL), (2807266578UL), (1516814248UL), (4250883502UL), (1967663703UL), (215335417UL), (1252724071UL), (4267389372UL), (94668579UL), (1980152960UL), (968677393UL), (1237744359UL), (63833646UL), (2488747616UL), (700459471UL), (744977323UL), (40829823UL), (955400639UL), (37187948UL), (53133706UL), (2014551043UL), (1664982537UL), (3342787122UL), (1549278321UL), (1245110464UL), (3424539081UL), (2180485253UL), (2757636973UL), (3590044052UL), (2712703548UL), (1366894959UL), (1777449151UL), (1538653374UL), (168718075UL), (2435805251UL), (588815465UL), (3166271130UL), (3164200096UL), (417809976UL), (623036767UL), (340121872UL), (1792214783UL), (56330125UL), (3268029211UL), (1117100306UL), (345899179UL), (1547071836UL), (3657965225UL), (4109701299UL), (664937685UL), (2627187961UL), (149301108UL), (1764003230UL), (3177910586UL), (3081492846UL), (2295419724UL), (2553420882UL), (1506534805UL), (971284719UL), (3224921758UL), (3336906843UL), (1507395478UL), (1224379418UL), (4117299702UL), (1973783225UL), (3609783242UL), (4186900040UL), (3715175536UL), (3904547465UL), (459692505UL), (3546328518UL), (3071448159UL), (1300375875UL), (1805392236UL), (3072717072UL), (99113127UL), (4281059076UL), (1658649136UL), (1974081931UL), (3940966682UL), (2092428023UL), (4014384840UL), (1546542514UL), (1130620125UL), (4117533767UL), (3372991735UL), (3537429957UL), (2704347564UL), (2300583688UL), (915286167UL), (1553874575UL), (3466388216UL), (701000054UL), (349103195UL), (1554395274UL), (3140941933UL), (2874072684UL), (2630572105UL), (2794301280UL), (321399291UL), (1158058020UL), (3570908149UL), (122802750UL), (3012686842UL), (2588402967UL), (3420589812UL), (581016671UL), (193235885UL), (1558092297UL), (1233353728UL), (1080743465UL), (3292663441UL), (2188057155UL), (2715412992UL), (4274317234UL), (1657504087UL), (2554269340UL), (1079741964UL), (922252155UL), (569761460UL), (3215661310UL), (2450710288UL), (2491078689UL), (632504591UL), (2169581755UL), (2552457727UL), (2554414735UL), (3347573916UL), (681756629UL), (801451286UL), (3504956478UL), (1308297539UL), (3602650700UL), (3530372129UL), (4117441036UL), (1827438812UL), (2852602217UL), (570161747UL), (4246897171UL), (2217508286UL), (4117450683UL), (4110626546UL), (756072139UL), (3977667932UL), (623718443UL), (2276396692UL), (3772091798UL), (3829898369UL), (710314822UL), (3733316262UL), (1497955597UL), (700242668UL), (757539371UL), (1247731879UL), (336477088UL), (532374143UL), (1123157198UL), (2374238409UL), (272472192UL), (2142741093UL), (2557920990UL), (4209595119UL), (1632439709UL), (1516814248UL), (4250883502UL), (1967663703UL), (215335417UL), (1267642920UL), (4267389372UL), (94668579UL), (1980152960UL), (968677393UL), (2252616933UL), (63833646UL), (2488747616UL), (700459471UL), (744977323UL), (2711054317UL), (955400639UL), (37187948UL), (53133706UL), (2014551043UL), (1664498234UL), (3342787122UL), (1549278321UL), (1245110464UL), (3424539081UL), (496150741UL), (2757636973UL), (3590044052UL), (2712703548UL), (1366894959UL), (2066534443UL), (1538653374UL), (168718075UL), (2435805251UL), (588815465UL), (318307195UL), (3164200096UL), (417809976UL), (623036767UL), (340121872UL), (3426055217UL), (56330125UL), (3268029211UL), (1117100306UL), (345899179UL), (979486044UL), (3657965225UL), (4109701299UL), (664937685UL), (2627187961UL), (2747102301UL), (1764003230UL), (3177910586UL), (3081492846UL), (2295419724UL), (1088606857UL), (1506534805UL), (971284719UL), (3224921758UL), (3336906843UL), (984983218UL), (1224379418UL), (4117299702UL), (1973783225UL), (3609783242UL), (1044785427UL), (3715175536UL), (3904547465UL), (459692505UL), (3546328518UL), (2096978494UL), (1300375875UL), (1805392236UL), (3072717072UL), (99113127UL), (972796497UL), (1658649136UL), (1974081931UL), (3940966682UL), (2092428023UL), (2914458983UL), (1546542514UL), (1130620125UL), (4117533767UL), (3372991735UL), (947968718UL), (2704347564UL), (2300583688UL), (915286167UL), (1553874575UL), (2124709798UL), (701000054UL), (349103195UL), (1554395274UL), (3140941933UL), (2569019225UL), (2630572105UL), (2794301280UL), (321399291UL), (1158058020UL), (4051601694UL), (122802750UL), (3012686842UL), (2588402967UL), (3420589812UL), (1738150581UL), (193235885UL), (1558092297UL), (1233353728UL), (1080743465UL), (1527068788UL), (2188057155UL), (2715412992UL), (4274317234UL), (1657504087UL), (1543089352UL), (1079741964UL), (922252155UL), (569761460UL), (3215661310UL), (2869922986UL), (2491078689UL), (632504591UL), (2169581755UL), (2552457727UL), (2807462748UL), (3347573916UL), (681756629UL), (801451286UL), (3504956478UL), (3400676931UL), (3602650700UL), (3530372129UL), (4117441036UL), (1827438812UL), (4056234054UL), (570161747UL), (4246897171UL), (2217508286UL), (4117450683UL), (3321376103UL), (756072139UL), (3977667932UL), (623718443UL), (2276396692UL), (1340008665UL), (3829898369UL), (710314822UL), (3733316262UL), (1497955597UL), (2098292377UL), (757539371UL), (1247731879UL), (336477088UL), (532374143UL), (2210327641UL), (2374238409UL), (272472192UL), (2142741093UL), (2557920990UL), (3502520226UL), (1632439709UL), (1516814248UL), (4250883502UL), (1967663703UL), (499168780UL), (1267642920UL), (4267389372UL), (94668579UL), (1980152960UL), (2695928666UL), (2252616933UL), (63833646UL), (2488747616UL), (700459471UL), (4181471443UL), (2711054317UL), (955400639UL), (37187948UL), (53133706UL), (441944403UL), (1664498234UL), (3342787122UL), (1549278321UL), (1245110464UL), (2271611585UL), (496150741UL), (2757636973UL), (3590044052UL), (2712703548UL), (3009817799UL), (2066534443UL), (1538653374UL), (168718075UL), (2435805251UL), (734763537UL), (318307195UL), (3164200096UL), (417809976UL), (623036767UL), (4002728646UL), (3426055217UL), (56330125UL), (3268029211UL), (1117100306UL), (1435987728UL), (979486044UL), (3657965225UL), (4109701299UL), (664937685UL), (815527474UL), (2747102301UL), (1764003230UL), (3177910586UL), (3081492846UL), (63383766UL), (1088606857UL), (1506534805UL), (971284719UL), (3224921758UL), (2331024939UL), (984983218UL), (1224379418UL), (4117299702UL), (1973783225UL), (3998070267UL), (1044785427UL), (3715175536UL), (3904547465UL), (459692505UL), (2582830990UL), (2096978494UL), (1300375875UL), (1805392236UL), (3072717072UL), (321154403UL), (972796497UL), (1658649136UL), (1974081931UL), (3940966682UL), (3789726976UL), (2914458983UL), (1546542514UL), (1130620125UL), (4117533767UL), (3440681546UL), (947968718UL), (2704347564UL), (2300583688UL), (915286167UL), (474021937UL), (2124709798UL), (701000054UL), (349103195UL), (1554395274UL), (702752814UL), (2569019225UL), (2630572105UL), (2794301280UL), (321399291UL), (2406346046UL), (4051601694UL), (122802750UL), (3012686842UL), (2588402967UL), (1782259321UL), (1738150581UL), (193235885UL), (1558092297UL), (1233353728UL), (3935919190UL), (1527068788UL), (2188057155UL), (2715412992UL), (4274317234UL), (1722541048UL), (1543089352UL), (1079741964UL), (922252155UL), (569761460UL), (3384000986UL), (2869922986UL), (2491078689UL), (632504591UL), (2169581755UL), (3451609034UL), (2807462748UL), (3347573916UL), (681756629UL), (801451286UL), (2643408064UL), (3400676931UL), (3602650700UL), (3530372129UL), (4117441036UL), (3635077251UL), (4056234054UL), (570161747UL), (4246897171UL), (2217508286UL), (2364796923UL), (3321376103UL), (756072139UL), (3977667932UL), (623718443UL), (3792539489UL), (1340008665UL), (3829898369UL), (710314822UL), (3733316262UL), (876419217UL), (2098292377UL), (757539371UL), (1247731879UL), (336477088UL), (3307300788UL), (2210327641UL), (2374238409UL), (272472192UL), (2142741093UL), (4142392723UL), (3502520226UL), (1632439709UL), (1516814248UL), (4250883502UL), (3551852862UL), (499168780UL), (1267642920UL), (4267389372UL), (94668579UL), (1177286958UL), (2695928666UL), (2252616933UL), (63833646UL), (2488747616UL), (3571573975UL), (4181471443UL), (2711054317UL), (955400639UL), (37187948UL), (1485050393UL), (441944403UL), (1664498234UL), (3342787122UL), (1549278321UL), (518707274UL), (2271611585UL), (496150741UL), (2757636973UL), (3590044052UL), (305206687UL), (3009817799UL), (2066534443UL), (1538653374UL), (168718075UL), (1914032206UL), (734763537UL), (318307195UL), (3164200096UL), (417809976UL), (2062496275UL), (4002728646UL), (3426055217UL), (56330125UL), (3268029211UL), (1878869053UL), (1435987728UL), (979486044UL), (3657965225UL), (4109701299UL), (1558853775UL), (815527474UL), (2747102301UL), (1764003230UL), (3177910586UL), (681877401UL), (63383766UL), (1088606857UL), (1506534805UL), (971284719UL), (2546285777UL), (2331024939UL), (984983218UL), (1224379418UL), (4117299702UL), (539292757UL), (3998070267UL), (1044785427UL), (3715175536UL), (3904547465UL), (3854154565UL), (2582830990UL), (2096978494UL), (1300375875UL), (1805392236UL), (2586804198UL), (321154403UL), (972796497UL), (1658649136UL), (1974081931UL), (1718873863UL), (3789726976UL), (2914458983UL), (1546542514UL), (1130620125UL), (477866180UL), (3440681546UL), (947968718UL), (2704347564UL), (2300583688UL), (56071603UL), (474021937UL), (2124709798UL), (701000054UL), (349103195UL), (2431577249UL), (702752814UL), (2569019225UL), (2630572105UL), (2794301280UL), (211758134UL), (2406346046UL), (4051601694UL), (122802750UL), (3012686842UL), (2470642374UL), (1782259321UL), (1738150581UL), (193235885UL), (1558092297UL), (852353933UL), (3935919190UL), (1527068788UL), (2188057155UL), (2715412992UL), (543290606UL), (1722541048UL), (1543089352UL), (1079741964UL), (922252155UL), (1146820965UL), (3384000986UL), (2869922986UL), (2491078689UL), (632504591UL), (2936494996UL), (3451609034UL), (2807462748UL), (3347573916UL), (681756629UL), (3428474076UL), (2643408064UL), (3400676931UL), (3602650700UL), (3530372129UL), (3558016488UL), (304167301UL), (3073812276UL), (1253385329UL), (801639697UL), (1346336854UL), (3880416830UL), (1110804934UL), (2500585706UL), (1294233475UL), (1964132477UL), (1625651370UL), (2732590160UL), (310054807UL), (3350133555UL), (800839525UL), (3435579932UL), (2120216654UL), (407780291UL), (1228117799UL), (513334510UL), (1423091447UL), (3698882838UL), (2556406643UL), (1536483608UL), (998695315UL), (1619514015UL), (4197375975UL), (892985909UL), (993665758UL), (4160405430UL), (2379977763UL), (1423742790UL), (4286808034UL), (479280944UL), (3611297256UL), (3481820363UL), (1261889958UL), (455298115UL), (3955764756UL), (2406161837UL), (185873336UL), (3382956716UL), (3556168427UL), (3988426650UL), (2917586591UL), (1248672474UL), (2925146191UL), (1416331075UL), (290755159UL), (2845168299UL), (3301422441UL), (3771816588UL), (491352430UL), (2461746382UL), (1591975949UL), (604909111UL), (3595669760UL), (4079314041UL), (258321046UL), (1352583874UL), (999018951UL), (3150079914UL), (113122510UL), (743303046UL), (3205496412UL), (4267738054UL), (2567402806UL), (2181107494UL), (3266354249UL), (1941487496UL), (2742084900UL), (3758785335UL), (732694221UL), (2052988791UL), (1759288229UL), (1094292464UL), (1582835026UL), (2817864273UL), (666443657UL), (419482443UL), (2877435004UL), (2944696351UL), (2523539432UL), (301119182UL), (998264713UL), (2314419254UL), (3610447393UL), (1139414242UL), (1486351830UL), (3207929489UL), (384633091UL), (4056367270UL), (2348418835UL), (3773781885UL), (1963929818UL), (804929680UL), (1511023454UL), (3915948102UL), (1371942526UL), (2586212526UL), (130122933UL), (2030859646UL), (3730011315UL), (118408868UL), (632704878UL), (3559959612UL), (2926361713UL), (1401386286UL), (599210027UL), (2315051975UL), (157809758UL), (1148939942UL), (3060024350UL), (1464284678UL), (3209480975UL), (3961060416UL), (3481639206UL), (4113344379UL), (3475766200UL), (130581501UL), (1844026536UL), (2661594012UL), (3145812007UL), (3233175620UL), (2549419093UL), (2612966733UL), (1348260920UL), (740167863UL), (226231218UL), (2631972701UL), (2148020402UL), (3399479414UL), (1074946996UL), (30872114UL), (1342415612UL), (1071408471UL), (1141719547UL), (332346805UL), (1473336719UL), (4207932404UL), (3668838170UL), (3154502882UL), (3892070442UL), (2812790310UL), (13931822UL), (1150258251UL), (2369539473UL), (640926011UL), (2991135002UL), (2410382633UL), (548200125UL), (3977740663UL), (1245837867UL), (2378569399UL), (1561469990UL), (2437445882UL), (214387770UL), (3329587833UL), (281635893UL)}, {(1720103319UL), (2201367526UL), (1415072072UL), (2446588589UL), (2195586017UL), (3817930623UL), (653121934UL), (2766514657UL), (765921436UL), (630082485UL), (2990883045UL), (3304472999UL), (471385134UL), (4097977544UL), (3749829028UL), (3587534772UL), (1064359851UL), (800061060UL), (2844220510UL), (389838005UL), (3681318140UL), (1515923235UL), (1885079324UL), (713031018UL), (1962734763UL), (2288160004UL), (1983331336UL), (1247350521UL), (4208372034UL), (1444837930UL), (3549494305UL), (4169715512UL), (701313302UL), (1118275019UL), (3118975645UL), (4153969630UL), (3516491181UL), (3601057044UL), (2509222288UL), (223064937UL), (899123842UL), (2574531231UL), (1386928111UL), (3790651401UL), (1300768348UL), (2038833061UL), (3736517792UL), (3850203561UL), (1679542285UL), (3391273474UL), (3862995487UL), (3118056386UL), (47128429UL), (2977525950UL), (3236389548UL), (1937040839UL), (4223233198UL), (2105119262UL), (721111284UL), (331726226UL), (68419013UL), (2575393464UL), (3648293304UL), (1448878851UL), (4186783614UL), (3696899986UL), (1270877069UL), (3351263117UL), (3918639273UL), (1472902162UL), (2767482392UL), (3549853842UL), (2353191576UL), (3353325530UL), (3072485271UL), (2689121900UL), (2335686695UL), (246689858UL), (2946177636UL), (1677728066UL), (1455723263UL), (3447540996UL), (2143976172UL), (1779511280UL), (3667361203UL), (1575502035UL), (849872082UL), (3527265600UL), (1443266215UL), (1320668722UL), (458373857UL), (3862342513UL), (699597603UL), (685707268UL), (948502001UL), (2501058653UL), (2254562046UL), (2210683894UL), (29088679UL), (1456231200UL), (2764392560UL), (4138068372UL), (3094591474UL), (1093749152UL), (1668875176UL), (3133003149UL), (4128702884UL), (652852832UL), (2211671337UL), (2231125160UL), (131729558UL), (3845605816UL), (3769660625UL), (1696592453UL), (728353643UL), (2751201502UL), (3496971733UL), (3349166522UL), (1005919830UL), (3411089601UL), (3754493523UL), (1994945529UL), (1604309774UL), (2083609686UL), (833983349UL), (2600153513UL), (1677348112UL), (207321473UL), (1051990507UL), (2135039620UL), (4239461390UL), (1574144998UL), (1070761856UL), (1990807569UL), (112704720UL), (2506523299UL), (2827487353UL), (4130754901UL), (1943274185UL), (3913701053UL), (1014850621UL), (3662772872UL), (4115124063UL), (1760146762UL), (3254829227UL), (800302547UL), (3602066837UL), (975658158UL), (2880018391UL), (714134831UL), (2696483406UL), (2351365577UL), (2811011071UL), (3505407160UL), (54109504UL), (424967367UL), (3759525737UL), (1726627246UL), (1110539071UL), (2339755764UL), (3356877114UL), (1720103319UL), (2201367526UL), (1415072072UL), (2446588589UL), (2499136377UL), (3817930623UL), (653121934UL), (2766514657UL), (765921436UL), (3794433488UL), (2990883045UL), (3304472999UL), (471385134UL), (4097977544UL), (3618516788UL), (3587534772UL), (1064359851UL), (800061060UL), (2844220510UL), (2319780070UL), (3681318140UL), (1515923235UL), (1885079324UL), (713031018UL), (11705290UL), (2288160004UL), (1983331336UL), (1247350521UL), (4208372034UL), (2508892029UL), (3549494305UL), (4169715512UL), (701313302UL), (1118275019UL), (1430522809UL), (4153969630UL), (3516491181UL), (3601057044UL), (2509222288UL), (1917025539UL), (899123842UL), (2574531231UL), (1386928111UL), (3790651401UL), (1219040401UL), (2038833061UL), (3736517792UL), (3850203561UL), (1679542285UL), (671522957UL), (3862995487UL), (3118056386UL), (47128429UL), (2977525950UL), (2762831063UL), (1937040839UL), (4223233198UL), (2105119262UL), (721111284UL), (1386688457UL), (68419013UL), (2575393464UL), (3648293304UL), (1448878851UL), (466405406UL), (3696899986UL), (1270877069UL), (3351263117UL), (3918639273UL), (94103836UL), (2767482392UL), (3549853842UL), (2353191576UL), (3353325530UL), (349361794UL), (2689121900UL), (2335686695UL), (246689858UL), (2946177636UL), (3232050945UL), (1455723263UL), (3447540996UL), (2143976172UL), (1779511280UL), (542837628UL), (1575502035UL), (849872082UL), (3527265600UL), (1443266215UL), (1867394883UL), (458373857UL), (3862342513UL), (699597603UL), (685707268UL), (4210562190UL), (2501058653UL), (2254562046UL), (2210683894UL), (29088679UL), (3647972960UL), (2764392560UL), (4138068372UL), (3094591474UL), (1093749152UL), (312511475UL), (3133003149UL), (4128702884UL), (652852832UL), (2211671337UL), (145492343UL), (131729558UL), (3845605816UL), (3769660625UL), (1696592453UL), (4223421915UL), (2751201502UL), (3496971733UL), (3349166522UL), (1005919830UL), (1656802049UL), (3754493523UL), (1994945529UL), (1604309774UL), (2083609686UL), (3032348100UL), (2600153513UL), (1677348112UL), (207321473UL), (1051990507UL), (3349078950UL), (4239461390UL), (1574144998UL), (1070761856UL), (1990807569UL), (2970449178UL), (2506523299UL), (2827487353UL), (4130754901UL), (1943274185UL), (445467699UL), (1014850621UL), (3662772872UL), (4115124063UL), (1760146762UL), (3738518624UL), (800302547UL), (3602066837UL), (975658158UL), (2880018391UL), (1553758240UL), (2696483406UL), (2351365577UL), (2811011071UL), (3505407160UL), (1259180427UL), (424967367UL), (3759525737UL), (1726627246UL), (1110539071UL), (2863575420UL), (3356877114UL), (1720103319UL), (2201367526UL), (1415072072UL), (1463388387UL), (2499136377UL), (3817930623UL), (653121934UL), (2766514657UL), (526940162UL), (3794433488UL), (2990883045UL), (3304472999UL), (471385134UL), (594057325UL), (3618516788UL), (3587534772UL), (1064359851UL), (800061060UL), (1001523010UL), (2319780070UL), (3681318140UL), (1515923235UL), (1885079324UL), (255576756UL), (11705290UL), (2288160004UL), (1983331336UL), (1247350521UL), (1108575113UL), (2508892029UL), (3549494305UL), (4169715512UL), (701313302UL), (524281295UL), (1430522809UL), (4153969630UL), (3516491181UL), (3601057044UL), (1816283752UL), (1917025539UL), (899123842UL), (2574531231UL), (1386928111UL), (1530966640UL), (1219040401UL), (2038833061UL), (3736517792UL), (3850203561UL), (1855689726UL), (671522957UL), (3862995487UL), (3118056386UL), (47128429UL), (1718476461UL), (2762831063UL), (1937040839UL), (4223233198UL), (2105119262UL), (176166283UL), (1386688457UL), (68419013UL), (2575393464UL), (3648293304UL), (4069820559UL), (466405406UL), (3696899986UL), (1270877069UL), (3351263117UL), (1645545933UL), (94103836UL), (2767482392UL), (3549853842UL), (2353191576UL), (4163887784UL), (349361794UL), (2689121900UL), (2335686695UL), (246689858UL), (1246040634UL), (3232050945UL), (1455723263UL), (3447540996UL), (2143976172UL), (2111249329UL), (542837628UL), (1575502035UL), (849872082UL), (3527265600UL), (1836050084UL), (1867394883UL), (458373857UL), (3862342513UL), (699597603UL), (3139537113UL), (4210562190UL), (2501058653UL), (2254562046UL), (2210683894UL), (3997617191UL), (3647972960UL), (2764392560UL), (4138068372UL), (3094591474UL), (2664795910UL), (312511475UL), (3133003149UL), (4128702884UL), (652852832UL), (1658020144UL), (145492343UL), (131729558UL), (3845605816UL), (3769660625UL), (2822578949UL), (4223421915UL), (2751201502UL), (3496971733UL), (3349166522UL), (1582873482UL), (1656802049UL), (3754493523UL), (1994945529UL), (1604309774UL), (1113569720UL), (3032348100UL), (2600153513UL), (1677348112UL), (207321473UL), (3169983987UL), (3349078950UL), (4239461390UL), (1574144998UL), (1070761856UL), (1308776367UL), (2970449178UL), (2506523299UL), (2827487353UL), (4130754901UL), (1403493846UL), (445467699UL), (1014850621UL), (3662772872UL), (4115124063UL), (340210579UL), (3738518624UL), (800302547UL), (3602066837UL), (975658158UL), (3367770843UL), (1553758240UL), (2696483406UL), (2351365577UL), (2811011071UL), (4162875353UL), (1259180427UL), (424967367UL), (3759525737UL), (1726627246UL), (1341806135UL), (2863575420UL), (3356877114UL), (1720103319UL), (2201367526UL), (2232383995UL), (1463388387UL), (2499136377UL), (3817930623UL), (653121934UL), (1756183481UL), (526940162UL), (3794433488UL), (2990883045UL), (3304472999UL), (2185125572UL), (594057325UL), (3618516788UL), (3587534772UL), (1064359851UL), (2933544964UL), (1001523010UL), (2319780070UL), (3681318140UL), (1515923235UL), (4147783641UL), (255576756UL), (11705290UL), (2288160004UL), (1983331336UL), (956739400UL), (1108575113UL), (2508892029UL), (3549494305UL), (4169715512UL), (142273913UL), (524281295UL), (1430522809UL), (4153969630UL), (3516491181UL), (986032639UL), (1816283752UL), (1917025539UL), (899123842UL), (2574531231UL), (1508271110UL), (1530966640UL), (1219040401UL), (2038833061UL), (3736517792UL), (458417668UL), (1855689726UL), (671522957UL), (3862995487UL), (3118056386UL), (284266432UL), (1718476461UL), (2762831063UL), (1937040839UL), (4223233198UL), (1605514069UL), (176166283UL), (1386688457UL), (68419013UL), (2575393464UL), (3650747541UL), (4069820559UL), (466405406UL), (3696899986UL), (1270877069UL), (678590674UL), (1645545933UL), (94103836UL), (2767482392UL), (3549853842UL), (398179945UL), (4163887784UL), (349361794UL), (2689121900UL), (2335686695UL), (3853658293UL), (1246040634UL), (3232050945UL), (1455723263UL), (3447540996UL), (2657693810UL), (2111249329UL), (542837628UL), (1575502035UL), (849872082UL), (2061659800UL), (1836050084UL), (1867394883UL), (458373857UL), (3862342513UL), (730568629UL), (3139537113UL), (4210562190UL), (2501058653UL), (2254562046UL), (449510786UL), (3997617191UL), (3647972960UL), (2764392560UL), (4138068372UL), (1939679536UL), (2664795910UL), (312511475UL), (3133003149UL), (4128702884UL), (4057510355UL), (1658020144UL), (145492343UL), (131729558UL), (3845605816UL), (3235632110UL), (2822578949UL), (4223421915UL), (2751201502UL), (3496971733UL), (4258920219UL), (1582873482UL), (1656802049UL), (3754493523UL), (1994945529UL), (1073499993UL), (1113569720UL), (3032348100UL), (2600153513UL), (1677348112UL), (3152835240UL), (3169983987UL), (3349078950UL), (4239461390UL), (1574144998UL), (2548972357UL), (1308776367UL), (2970449178UL), (2506523299UL), (2827487353UL), (2908066033UL), (1403493846UL), (445467699UL), (1014850621UL), (3662772872UL), (1685925089UL), (340210579UL), (3738518624UL), (800302547UL), (3602066837UL), (2264692610UL), (3367770843UL), (1553758240UL), (2696483406UL), (2351365577UL), (1686022564UL), (4162875353UL), (1259180427UL), (424967367UL), (3759525737UL), (70326173UL), (3028074555UL), (2568586198UL), (2513473964UL), (2923109510UL), (2265392251UL), (3760490867UL), (147487099UL), (386755149UL), (2152759137UL), (2716532213UL), (1153507474UL), (627929575UL), (847454712UL), (2426916452UL), (3861548980UL), (209825268UL), (1090299778UL), (1876886461UL), (976019203UL), (4290216337UL), (2278290065UL), (3302814528UL), (1567440061UL), (1874857224UL), (3794588915UL), (3218569451UL), (2335365199UL), (1959651923UL), (3366000689UL), (2374428382UL), (2126784887UL), (4123272655UL), (274837369UL), (1413111935UL), (1754627204UL), (1863684635UL), (4170025739UL), (2150019850UL), (4250751856UL), (3601214212UL), (2024081043UL), (334808859UL), (3921757513UL), (3870643644UL), (2864810945UL), (1004431888UL), (4283279830UL), (873365350UL), (2479791433UL), (3393478881UL), (3373502257UL), (1882140107UL), (2546676519UL), (1208428915UL), (268043238UL), (2292710623UL), (770651064UL), (2330160036UL), (2476488258UL), (2496037992UL), (118721504UL), (2289499985UL), (987994743UL), (3610346256UL), (3371795927UL), (2681434550UL), (2213200417UL), (3729194378UL), (1657623395UL), (402983380UL), (3618058500UL), (3487743585UL), (965523531UL), (819256729UL), (2544660729UL), (3273986506UL), (60894411UL), (1779152929UL), (3598159279UL), (3429317853UL), (2246402362UL), (3761392367UL), (3921798306UL), (947928110UL), (2394097908UL), (4004330264UL), (1180759989UL), (1624349051UL), (1750929499UL), (3889184770UL), (2052097704UL), (4092981046UL), (2913733578UL), (4241980897UL), (1127407450UL), (950788009UL), (2105033320UL), (473205730UL), (981905310UL), (2888856914UL), (798112239UL), (3377889612UL), (2273659507UL), (1157471194UL), (4269212574UL), (3575306012UL), (116024754UL), (1432668659UL), (1079598649UL), (3882002482UL), (3838480186UL), (823643071UL), (1244220618UL), (1227720039UL), (1343395654UL), (4277277976UL), (2612321540UL), (3013674017UL), (3658064522UL), (2573775167UL), (142767236UL), (2545708383UL), (1740478937UL), (809036862UL), (1492188594UL), (1294286248UL), (1093543858UL), (2944418375UL), (2981996479UL), (4067464923UL), (3071157685UL), (1938984450UL), (81707323UL), (337713546UL), (1849381296UL), (3447450393UL), (3551106302UL), (3394545269UL), (3167744716UL), (1815294624UL), (3244728913UL), (2462138247UL), (2286711732UL), (3023116169UL), (707366723UL), (1314169762UL), (1511231537UL), (2227622993UL), (2876600706UL), (4271030726UL), (2020521540UL), (2966596767UL), (3964589247UL), (1291306737UL), (883851756UL), (1355819080UL), (2834319249UL), (3825063450UL), (4205423325UL)}, {(525214560UL), (1972466543UL), (1542775297UL), (3030388145UL), (2623763324UL), (1445252054UL), (2315649878UL), (2940376435UL), (1322155857UL), (2007925719UL), (899111545UL), (3946601974UL), (720416639UL), (566341007UL), (3830971140UL), (2379218430UL), (946001131UL), (324551023UL), (3792134824UL), (2419222364UL), (2507004728UL), (4050415702UL), (2934667964UL), (3435655480UL), (3738151878UL), (340092998UL), (429296098UL), (3804978739UL), (1547120540UL), (976306993UL), (1134820236UL), (288696971UL), (292350374UL), (423348923UL), (4250561112UL), (1380146522UL), (646098313UL), (3081299572UL), (3633231429UL), (2348008746UL), (3250735726UL), (3495239618UL), (1083361876UL), (2660545988UL), (97607299UL), (741626628UL), (2451882102UL), (607936604UL), (1566190301UL), (3752644837UL), (1626575269UL), (2569947980UL), (120166892UL), (1936167922UL), (2964570009UL), (2601765059UL), (2550590348UL), (1491574373UL), (1916644920UL), (2955888714UL), (3900360190UL), (396836243UL), (2417234534UL), (4219822777UL), (3017031315UL), (3848370775UL), (4113753945UL), (1038708316UL), (1227041843UL), (1287656330UL), (594136009UL), (1679465955UL), (1127853612UL), (445673212UL), (2491164616UL), (4234959779UL), (3670094401UL), (2810998507UL), (2091885715UL), (4213376041UL), (3724691332UL), (1428205363UL), (2351471476UL), (1863345709UL), (3172242044UL), (1435176883UL), (925973933UL), (3166951436UL), (2056462416UL), (489417029UL), (4029854347UL), (3002516723UL), (1597712463UL), (1200457469UL), (3909654542UL), (1352519428UL), (13398705UL), (3919269221UL), (371331154UL), (332347636UL), (3726033518UL), (2407091731UL), (2926199215UL), (3054175446UL), (3208807730UL), (584793525UL), (2706493003UL), (561190823UL), (2412132195UL), (2488492462UL), (3149885896UL), (3512276852UL), (2843032269UL), (2485506176UL), (4025325347UL), (4152622551UL), (4022346903UL), (331746013UL), (197533993UL), (3658414685UL), (2670729696UL), (3290854172UL), (2251426444UL), (3569225076UL), (2466203243UL), (658184940UL), (518096293UL), (52156682UL), (2398958685UL), (745491615UL), (3723004242UL), (2847276077UL), (1857504125UL), (633035220UL), (4057593658UL), (2783467746UL), (3122875931UL), (446601186UL), (2786851490UL), (261950076UL), (2843506874UL), (745391893UL), (1404094021UL), (2234513997UL), (315083019UL), (645865358UL), (2862243948UL), (1204315994UL), (3701151065UL), (663411328UL), (1924727700UL), (1905843757UL), (1483930049UL), (449616818UL), (3793968150UL), (1840668755UL), (1671024110UL), (4079375869UL), (4171670660UL), (2585904968UL), (3886777251UL), (525214560UL), (1972466543UL), (1542775297UL), (3030388145UL), (2530126952UL), (1445252054UL), (2315649878UL), (2940376435UL), (1322155857UL), (1599103627UL), (899111545UL), (3946601974UL), (720416639UL), (566341007UL), (4070101360UL), (2379218430UL), (946001131UL), (324551023UL), (3792134824UL), (2445126690UL), (2507004728UL), (4050415702UL), (2934667964UL), (3435655480UL), (2968121571UL), (340092998UL), (429296098UL), (3804978739UL), (1547120540UL), (3901803457UL), (1134820236UL), (288696971UL), (292350374UL), (423348923UL), (1589814289UL), (1380146522UL), (646098313UL), (3081299572UL), (3633231429UL), (670777956UL), (3250735726UL), (3495239618UL), (1083361876UL), (2660545988UL), (4050232394UL), (741626628UL), (2451882102UL), (607936604UL), (1566190301UL), (1132827700UL), (1626575269UL), (2569947980UL), (120166892UL), (1936167922UL), (1280520333UL), (2601765059UL), (2550590348UL), (1491574373UL), (1916644920UL), (1073889810UL), (3900360190UL), (396836243UL), (2417234534UL), (4219822777UL), (1754651820UL), (3848370775UL), (4113753945UL), (1038708316UL), (1227041843UL), (464826842UL), (594136009UL), (1679465955UL), (1127853612UL), (445673212UL), (4198686893UL), (4234959779UL), (3670094401UL), (2810998507UL), (2091885715UL), (416103731UL), (3724691332UL), (1428205363UL), (2351471476UL), (1863345709UL), (2637470915UL), (1435176883UL), (925973933UL), (3166951436UL), (2056462416UL), (2546319147UL), (4029854347UL), (3002516723UL), (1597712463UL), (1200457469UL), (681365672UL), (1352519428UL), (13398705UL), (3919269221UL), (371331154UL), (742849231UL), (3726033518UL), (2407091731UL), (2926199215UL), (3054175446UL), (1323833820UL), (584793525UL), (2706493003UL), (561190823UL), (2412132195UL), (3747238187UL), (3149885896UL), (3512276852UL), (2843032269UL), (2485506176UL), (3817319503UL), (4152622551UL), (4022346903UL), (331746013UL), (197533993UL), (99009902UL), (2670729696UL), (3290854172UL), (2251426444UL), (3569225076UL), (4199909720UL), (658184940UL), (518096293UL), (52156682UL), (2398958685UL), (1648201186UL), (3723004242UL), (2847276077UL), (1857504125UL), (633035220UL), (1394668680UL), (2783467746UL), (3122875931UL), (446601186UL), (2786851490UL), (2590549096UL), (2843506874UL), (745391893UL), (1404094021UL), (2234513997UL), (347299411UL), (645865358UL), (2862243948UL), (1204315994UL), (3701151065UL), (4028305509UL), (1924727700UL), (1905843757UL), (1483930049UL), (449616818UL), (2251238906UL), (1840668755UL), (1671024110UL), (4079375869UL), (4171670660UL), (4080554282UL), (3886777251UL), (525214560UL), (1972466543UL), (1542775297UL), (3280177496UL), (2530126952UL), (1445252054UL), (2315649878UL), (2940376435UL), (2094983509UL), (1599103627UL), (899111545UL), (3946601974UL), (720416639UL), (1446566513UL), (4070101360UL), (2379218430UL), (946001131UL), (324551023UL), (2945613775UL), (2445126690UL), (2507004728UL), (4050415702UL), (2934667964UL), (2815036731UL), (2968121571UL), (340092998UL), (429296098UL), (3804978739UL), (3298867574UL), (3901803457UL), (1134820236UL), (288696971UL), (292350374UL), (3280367987UL), (1589814289UL), (1380146522UL), (646098313UL), (3081299572UL), (2536311658UL), (670777956UL), (3250735726UL), (3495239618UL), (1083361876UL), (3726225049UL), (4050232394UL), (741626628UL), (2451882102UL), (607936604UL), (3460165725UL), (1132827700UL), (1626575269UL), (2569947980UL), (120166892UL), (2961109404UL), (1280520333UL), (2601765059UL), (2550590348UL), (1491574373UL), (755823086UL), (1073889810UL), (3900360190UL), (396836243UL), (2417234534UL), (3036027780UL), (1754651820UL), (3848370775UL), (4113753945UL), (1038708316UL), (3784147349UL), (464826842UL), (594136009UL), (1679465955UL), (1127853612UL), (2128970592UL), (4198686893UL), (4234959779UL), (3670094401UL), (2810998507UL), (421961324UL), (416103731UL), (3724691332UL), (1428205363UL), (2351471476UL), (3407618159UL), (2637470915UL), (1435176883UL), (925973933UL), (3166951436UL), (1274860184UL), (2546319147UL), (4029854347UL), (3002516723UL), (1597712463UL), (671480036UL), (681365672UL), (1352519428UL), (13398705UL), (3919269221UL), (1150967289UL), (742849231UL), (3726033518UL), (2407091731UL), (2926199215UL), (3106945136UL), (1323833820UL), (584793525UL), (2706493003UL), (561190823UL), (2013357219UL), (3747238187UL), (3149885896UL), (3512276852UL), (2843032269UL), (3595347994UL), (3817319503UL), (4152622551UL), (4022346903UL), (331746013UL), (367216863UL), (99009902UL), (2670729696UL), (3290854172UL), (2251426444UL), (3130148315UL), (4199909720UL), (658184940UL), (518096293UL), (52156682UL), (3004378899UL), (1648201186UL), (3723004242UL), (2847276077UL), (1857504125UL), (253542783UL), (1394668680UL), (2783467746UL), (3122875931UL), (446601186UL), (1228837642UL), (2590549096UL), (2843506874UL), (745391893UL), (1404094021UL), (1324404436UL), (347299411UL), (645865358UL), (2862243948UL), (1204315994UL), (1455458347UL), (4028305509UL), (1924727700UL), (1905843757UL), (1483930049UL), (330348422UL), (2251238906UL), (1840668755UL), (1671024110UL), (4079375869UL), (606568968UL), (4080554282UL), (3886777251UL), (525214560UL), (1972466543UL), (1703103913UL), (3280177496UL), (2530126952UL), (1445252054UL), (2315649878UL), (3946153427UL), (2094983509UL), (1599103627UL), (899111545UL), (3946601974UL), (2053673584UL), (1446566513UL), (4070101360UL), (2379218430UL), (946001131UL), (4184236551UL), (2945613775UL), (2445126690UL), (2507004728UL), (4050415702UL), (3890831500UL), (2815036731UL), (2968121571UL), (340092998UL), (429296098UL), (228493148UL), (3298867574UL), (3901803457UL), (1134820236UL), (288696971UL), (2321943990UL), (3280367987UL), (1589814289UL), (1380146522UL), (646098313UL), (1765624343UL), (2536311658UL), (670777956UL), (3250735726UL), (3495239618UL), (1772431608UL), (3726225049UL), (4050232394UL), (741626628UL), (2451882102UL), (3386124330UL), (3460165725UL), (1132827700UL), (1626575269UL), (2569947980UL), (860947846UL), (2961109404UL), (1280520333UL), (2601765059UL), (2550590348UL), (2298495740UL), (755823086UL), (1073889810UL), (3900360190UL), (396836243UL), (2702634902UL), (3036027780UL), (1754651820UL), (3848370775UL), (4113753945UL), (3836550212UL), (3784147349UL), (464826842UL), (594136009UL), (1679465955UL), (1500399122UL), (2128970592UL), (4198686893UL), (4234959779UL), (3670094401UL), (1632934875UL), (421961324UL), (416103731UL), (3724691332UL), (1428205363UL), (2330377177UL), (3407618159UL), (2637470915UL), (1435176883UL), (925973933UL), (2558479866UL), (1274860184UL), (2546319147UL), (4029854347UL), (3002516723UL), (1331271216UL), (671480036UL), (681365672UL), (1352519428UL), (13398705UL), (1532459856UL), (1150967289UL), (742849231UL), (3726033518UL), (2407091731UL), (1766120506UL), (3106945136UL), (1323833820UL), (584793525UL), (2706493003UL), (3817434387UL), (2013357219UL), (3747238187UL), (3149885896UL), (3512276852UL), (203757UL), (3595347994UL), (3817319503UL), (4152622551UL), (4022346903UL), (3438004885UL), (367216863UL), (99009902UL), (2670729696UL), (3290854172UL), (1092092654UL), (3130148315UL), (4199909720UL), (658184940UL), (518096293UL), (982576981UL), (3004378899UL), (1648201186UL), (3723004242UL), (2847276077UL), (33113683UL), (253542783UL), (1394668680UL), (2783467746UL), (3122875931UL), (3109404671UL), (1228837642UL), (2590549096UL), (2843506874UL), (745391893UL), (809710525UL), (1324404436UL), (347299411UL), (645865358UL), (2862243948UL), (3652256751UL), (1455458347UL), (4028305509UL), (1924727700UL), (1905843757UL), (2035132481UL), (330348422UL), (2251238906UL), (1840668755UL), (1671024110UL), (3593348393UL), (4151905045UL), (3398483770UL), (611142788UL), (1798029112UL), (2747225670UL), (2894981396UL), (2117120651UL), (3087941624UL), (416876364UL), (700011792UL), (63929447UL), (822005210UL), (3483417647UL), (3513365134UL), (3071572873UL), (1925919001UL), (2778688996UL), (3079943255UL), (1252316311UL), (91270196UL), (3469862149UL), (156659741UL), (1342755036UL), (3821302858UL), (1790046971UL), (289329863UL), (1357914395UL), (4143182690UL), (2590503919UL), (3242437796UL), (1341085928UL), (2685277054UL), (727602392UL), (2581493226UL), (3216496864UL), (2171373196UL), (3767765187UL), (1895767358UL), (1029452326UL), (851913526UL), (1746266839UL), (3370323171UL), (648118190UL), (3244211645UL), (2623946928UL), (3859087079UL), (384443034UL), (2026989771UL), (802104797UL), (2201121552UL), (725742304UL), (1673563239UL), (4045658814UL), (2682764476UL), (3032306650UL), (2725871420UL), (3467522540UL), (534803010UL), (1135606913UL), (871336950UL), (937160030UL), (3384357161UL), (641566845UL), (2267407903UL), (331847343UL), (787968740UL), (2673012251UL), (2066357778UL), (2740382722UL), (1638377946UL), (2260504282UL), (3513172717UL), (238548903UL), (2203496688UL), (630532448UL), (3702112076UL), (2635952931UL), (3344713216UL), (139406056UL), (2369004628UL), (3547213209UL), (2944858950UL), (1231203228UL), (616949630UL), (2619739101UL), (89360251UL), (2364353701UL), (1025345607UL), (4177965685UL), (62274372UL), (3059207586UL), (3303376016UL), (2919795870UL), (3676526103UL), (2689781822UL), (1062293263UL), (2684605838UL), (863975243UL), (723728777UL), (1057919510UL), (1708017843UL), (4264127977UL), (3013938022UL), (3958746896UL), (328415103UL), (1117948849UL), (751056929UL), (2442147201UL), (1781170563UL), (765377308UL), (961452970UL), (4247303973UL), (2233034754UL), (86997820UL), (3495561473UL), (3075957349UL), (3152032365UL), (1220657606UL), (708134514UL), (26714613UL), (3749542051UL), (1640668224UL), (2252760600UL), (1635050662UL), (947216628UL), (3612773344UL), (4089189500UL), (3647048119UL), (979491227UL), (4149824933UL), (3160885292UL), (2808843788UL), (998859510UL), (3903167193UL), (1728999561UL), (3673946130UL), (279338980UL), (2507635299UL), (1614929524UL), (302060483UL), (2874453052UL), (3798613814UL), (2013436766UL), (3514754020UL), (2923162106UL), (2658720327UL), (3498579091UL), (3292220096UL), (3796129102UL), (1907288796UL), (2820663603UL), (4276052248UL), (247755133UL), (2088596201UL), (3154955976UL), (3309397641UL), (3606171919UL), (1356791029UL), (1030266022UL)}, {(3868946146UL), (1938156793UL), (1877502872UL), (1408917625UL), (1549117911UL), (2465501566UL), (4218547770UL), (2942249332UL), (2731789075UL), (2366036899UL), (1312641799UL), (2243363271UL), (2238839307UL), (384814263UL), (1552361757UL), (3521369641UL), (431721717UL), (3089625732UL), (1023760034UL), (53847139UL), (2240881978UL), (3178046414UL), (145135653UL), (1580878781UL), (3500228040UL), (3360910006UL), (3285542950UL), (3330062556UL), (2870158227UL), (1481496810UL), (4222704363UL), (2973046526UL), (435155769UL), (3234730070UL), (3306545960UL), (2539776908UL), (3991420334UL), (125389349UL), (2397544348UL), (2504790975UL), (886432257UL), (1804136430UL), (1506551086UL), (219847214UL), (890282686UL), (1489840806UL), (2536942497UL), (87527661UL), (1822718904UL), (3984956867UL), (2334419518UL), (4065487054UL), (992104547UL), (1566792845UL), (1068226712UL), (2622731799UL), (921431708UL), (2833392639UL), (640267449UL), (324907409UL), (3911698049UL), (2108189994UL), (1623761598UL), (52771719UL), (467926435UL), (2811768106UL), (3760723083UL), (906402727UL), (3438479463UL), (2064004404UL), (988123982UL), (563076447UL), (2979641383UL), (1366086397UL), (2078608605UL), (3868491514UL), (1077957067UL), (615363273UL), (1388831706UL), (1586480552UL), (4216838311UL), (3587550780UL), (2057048927UL), (2814838921UL), (2454041809UL), (180612020UL), (930406098UL), (4286819113UL), (2756562967UL), (3404265234UL), (3844482428UL), (467484533UL), (4122644954UL), (3517116598UL), (1887163240UL), (4217569180UL), (4191149652UL), (2756931330UL), (3702787956UL), (152166773UL), (146763911UL), (536678737UL), (481385008UL), (3681433244UL), (1194909733UL), (3713568496UL), (3927837202UL), (846842608UL), (687314083UL), (1144793694UL), (1062075916UL), (3017627145UL), (1296695243UL), (981862419UL), (2363304726UL), (3242788356UL), (3359957762UL), (4249190787UL), (1697910336UL), (3286799886UL), (1063822293UL), (3246091430UL), (743808559UL), (2137668568UL), (2812072749UL), (2303791182UL), (3161789548UL), (2911126624UL), (4087873192UL), (1813622227UL), (1272618849UL), (1882292328UL), (3861455677UL), (2921641470UL), (3079812494UL), (2814569163UL), (1975646942UL), (2826176621UL), (1896904368UL), (831552834UL), (2935863403UL), (449217054UL), (3688067832UL), (1048877596UL), (1613227043UL), (553867520UL), (3682575786UL), (3058863948UL), (4200858129UL), (4131625UL), (2434123776UL), (2235627905UL), (2905358693UL), (3429312266UL), (3363231514UL), (1182242507UL), (2792234422UL), (1843330053UL), (4192875151UL), (1088813348UL), (357805687UL), (3868946146UL), (1938156793UL), (1877502872UL), (1408917625UL), (30638250UL), (2465501566UL), (4218547770UL), (2942249332UL), (2731789075UL), (448998968UL), (1312641799UL), (2243363271UL), (2238839307UL), (384814263UL), (2229663001UL), (3521369641UL), (431721717UL), (3089625732UL), (1023760034UL), (790771414UL), (2240881978UL), (3178046414UL), (145135653UL), (1580878781UL), (847577516UL), (3360910006UL), (3285542950UL), (3330062556UL), (2870158227UL), (112738978UL), (4222704363UL), (2973046526UL), (435155769UL), (3234730070UL), (1135073835UL), (2539776908UL), (3991420334UL), (125389349UL), (2397544348UL), (1243128255UL), (886432257UL), (1804136430UL), (1506551086UL), (219847214UL), (875051553UL), (1489840806UL), (2536942497UL), (87527661UL), (1822718904UL), (1883615145UL), (2334419518UL), (4065487054UL), (992104547UL), (1566792845UL), (1037132511UL), (2622731799UL), (921431708UL), (2833392639UL), (640267449UL), (504304037UL), (3911698049UL), (2108189994UL), (1623761598UL), (52771719UL), (3969520254UL), (2811768106UL), (3760723083UL), (906402727UL), (3438479463UL), (3707538496UL), (988123982UL), (563076447UL), (2979641383UL), (1366086397UL), (3577913613UL), (3868491514UL), (1077957067UL), (615363273UL), (1388831706UL), (903353909UL), (4216838311UL), (3587550780UL), (2057048927UL), (2814838921UL), (3532304828UL), (180612020UL), (930406098UL), (4286819113UL), (2756562967UL), (1950528802UL), (3844482428UL), (467484533UL), (4122644954UL), (3517116598UL), (139409766UL), (4217569180UL), (4191149652UL), (2756931330UL), (3702787956UL), (504815033UL), (146763911UL), (536678737UL), (481385008UL), (3681433244UL), (2166865052UL), (3713568496UL), (3927837202UL), (846842608UL), (687314083UL), (135403542UL), (1062075916UL), (3017627145UL), (1296695243UL), (981862419UL), (2405232584UL), (3242788356UL), (3359957762UL), (4249190787UL), (1697910336UL), (3517294012UL), (1063822293UL), (3246091430UL), (743808559UL), (2137668568UL), (2962825355UL), (2303791182UL), (3161789548UL), (2911126624UL), (4087873192UL), (2344237973UL), (1272618849UL), (1882292328UL), (3861455677UL), (2921641470UL), (1062672856UL), (2814569163UL), (1975646942UL), (2826176621UL), (1896904368UL), (3172875195UL), (2935863403UL), (449217054UL), (3688067832UL), (1048877596UL), (983648949UL), (553867520UL), (3682575786UL), (3058863948UL), (4200858129UL), (2552994282UL), (2434123776UL), (2235627905UL), (2905358693UL), (3429312266UL), (461707508UL), (1182242507UL), (2792234422UL), (1843330053UL), (4192875151UL), (2557078297UL), (357805687UL), (3868946146UL), (1938156793UL), (1877502872UL), (1178921294UL), (30638250UL), (2465501566UL), (4218547770UL), (2942249332UL), (2597087237UL), (448998968UL), (1312641799UL), (2243363271UL), (2238839307UL), (3465588695UL), (2229663001UL), (3521369641UL), (431721717UL), (3089625732UL), (2420359327UL), (790771414UL), (2240881978UL), (3178046414UL), (145135653UL), (3411014139UL), (847577516UL), (3360910006UL), (3285542950UL), (3330062556UL), (4257518865UL), (112738978UL), (4222704363UL), (2973046526UL), (435155769UL), (1154160505UL), (1135073835UL), (2539776908UL), (3991420334UL), (125389349UL), (1396475349UL), (1243128255UL), (886432257UL), (1804136430UL), (1506551086UL), (3727497731UL), (875051553UL), (1489840806UL), (2536942497UL), (87527661UL), (2521823325UL), (1883615145UL), (2334419518UL), (4065487054UL), (992104547UL), (3431387970UL), (1037132511UL), (2622731799UL), (921431708UL), (2833392639UL), (780276883UL), (504304037UL), (3911698049UL), (2108189994UL), (1623761598UL), (1832564202UL), (3969520254UL), (2811768106UL), (3760723083UL), (906402727UL), (2319993554UL), (3707538496UL), (988123982UL), (563076447UL), (2979641383UL), (3703509163UL), (3577913613UL), (3868491514UL), (1077957067UL), (615363273UL), (3925135746UL), (903353909UL), (4216838311UL), (3587550780UL), (2057048927UL), (2129250845UL), (3532304828UL), (180612020UL), (930406098UL), (4286819113UL), (571849466UL), (1950528802UL), (3844482428UL), (467484533UL), (4122644954UL), (3696836546UL), (139409766UL), (4217569180UL), (4191149652UL), (2756931330UL), (84389584UL), (504815033UL), (146763911UL), (536678737UL), (481385008UL), (281139563UL), (2166865052UL), (3713568496UL), (3927837202UL), (846842608UL), (2123715146UL), (135403542UL), (1062075916UL), (3017627145UL), (1296695243UL), (4206227732UL), (2405232584UL), (3242788356UL), (3359957762UL), (4249190787UL), (2766470555UL), (3517294012UL), (1063822293UL), (3246091430UL), (743808559UL), (2821229002UL), (2962825355UL), (2303791182UL), (3161789548UL), (2911126624UL), (503886017UL), (2344237973UL), (1272618849UL), (1882292328UL), (3861455677UL), (4158985014UL), (1062672856UL), (2814569163UL), (1975646942UL), (2826176621UL), (4118784229UL), (3172875195UL), (2935863403UL), (449217054UL), (3688067832UL), (3556237148UL), (983648949UL), (553867520UL), (3682575786UL), (3058863948UL), (3200838331UL), (2552994282UL), (2434123776UL), (2235627905UL), (2905358693UL), (4178312045UL), (461707508UL), (1182242507UL), (2792234422UL), (1843330053UL), (3597816691UL), (2557078297UL), (357805687UL), (3868946146UL), (1938156793UL), (2168462050UL), (1178921294UL), (30638250UL), (2465501566UL), (4218547770UL), (4101101381UL), (2597087237UL), (448998968UL), (1312641799UL), (2243363271UL), (313553894UL), (3465588695UL), (2229663001UL), (3521369641UL), (431721717UL), (737541534UL), (2420359327UL), (790771414UL), (2240881978UL), (3178046414UL), (326569272UL), (3411014139UL), (847577516UL), (3360910006UL), (3285542950UL), (3098408987UL), (4257518865UL), (112738978UL), (4222704363UL), (2973046526UL), (3668411828UL), (1154160505UL), (1135073835UL), (2539776908UL), (3991420334UL), (2902976896UL), (1396475349UL), (1243128255UL), (886432257UL), (1804136430UL), (2162242501UL), (3727497731UL), (875051553UL), (1489840806UL), (2536942497UL), (2238214198UL), (2521823325UL), (1883615145UL), (2334419518UL), (4065487054UL), (1081167745UL), (3431387970UL), (1037132511UL), (2622731799UL), (921431708UL), (2612105434UL), (780276883UL), (504304037UL), (3911698049UL), (2108189994UL), (2518535877UL), (1832564202UL), (3969520254UL), (2811768106UL), (3760723083UL), (2894544992UL), (2319993554UL), (3707538496UL), (988123982UL), (563076447UL), (719340658UL), (3703509163UL), (3577913613UL), (3868491514UL), (1077957067UL), (2371417985UL), (3925135746UL), (903353909UL), (4216838311UL), (3587550780UL), (3146473377UL), (2129250845UL), (3532304828UL), (180612020UL), (930406098UL), (1054512059UL), (571849466UL), (1950528802UL), (3844482428UL), (467484533UL), (1437844285UL), (3696836546UL), (139409766UL), (4217569180UL), (4191149652UL), (1161452915UL), (84389584UL), (504815033UL), (146763911UL), (536678737UL), (3965987378UL), (281139563UL), (2166865052UL), (3713568496UL), (3927837202UL), (2566873330UL), (2123715146UL), (135403542UL), (1062075916UL), (3017627145UL), (3204726297UL), (4206227732UL), (2405232584UL), (3242788356UL), (3359957762UL), (2338319494UL), (2766470555UL), (3517294012UL), (1063822293UL), (3246091430UL), (1531757306UL), (2821229002UL), (2962825355UL), (2303791182UL), (3161789548UL), (2778326467UL), (503886017UL), (2344237973UL), (1272618849UL), (1882292328UL), (1725075819UL), (4158985014UL), (1062672856UL), (2814569163UL), (1975646942UL), (3822868823UL), (4118784229UL), (3172875195UL), (2935863403UL), (449217054UL), (2465297154UL), (3556237148UL), (983648949UL), (553867520UL), (3682575786UL), (4023654874UL), (3200838331UL), (2552994282UL), (2434123776UL), (2235627905UL), (3063253867UL), (4178312045UL), (461707508UL), (1182242507UL), (2792234422UL), (3673318927UL), (1249828417UL), (2772427670UL), (1052324962UL), (3106530204UL), (2843183862UL), (630633945UL), (4140139503UL), (1659674037UL), (1096812757UL), (1376150732UL), (2328468653UL), (1410746620UL), (4025107990UL), (3335632421UL), (2754906610UL), (1615859006UL), (285467698UL), (4013475548UL), (1287384555UL), (1191111485UL), (1999165134UL), (2396354947UL), (1628158236UL), (3586708909UL), (228664781UL), (2501369720UL), (2516229872UL), (2977432606UL), (1745869751UL), (750661412UL), (1142144084UL), (2705268946UL), (1728488244UL), (589587862UL), (3604281130UL), (3217245915UL), (2061424631UL), (1918958878UL), (1162850007UL), (438550637UL), (1774088146UL), (3237803593UL), (827476363UL), (404982536UL), (2344744845UL), (3416436851UL), (369597250UL), (287618335UL), (1349740180UL), (3489688427UL), (417859991UL), (3229729092UL), (3214122057UL), (3955335849UL), (3014669381UL), (2178319957UL), (1259991234UL), (2689513541UL), (2628816894UL), (3734652479UL), (4202568782UL), (3149274749UL), (497295490UL), (3427602420UL), (3229774907UL), (59257138UL), (856364156UL), (429586733UL), (1800559699UL), (1300239050UL), (1311125646UL), (257421988UL), (3749074142UL), (1648939149UL), (1914174865UL), (105489877UL), (3599116888UL), (2695725484UL), (1543985792UL), (3210070699UL), (1867126432UL), (3088920410UL), (953084407UL), (2185095866UL), (1427606476UL), (1572442276UL), (3322674991UL), (3578824788UL), (1156246244UL), (2938200612UL), (3409545464UL), (215820858UL), (2279282461UL), (3861049095UL), (1589517366UL), (208707366UL), (2741570297UL), (440313302UL), (864288468UL), (1564945290UL), (1050929272UL), (3037450392UL), (1101323242UL), (1200278943UL), (3005564105UL), (3847988630UL), (3251750599UL), (2608433412UL), (3106720723UL), (1522694503UL), (3857782840UL), (4282681349UL), (2229263718UL), (4106780914UL), (125648941UL), (1933617693UL), (2971178569UL), (3537872030UL), (448962137UL), (652123777UL), (2393871920UL), (3938047691UL), (244410098UL), (3110791961UL), (3122318189UL), (877378106UL), (3683644255UL), (4279094311UL), (3638987055UL), (667681197UL), (1679868535UL), (1938378101UL), (1331340184UL), (734163051UL), (3409564713UL), (955108672UL), (3969637663UL), (156515523UL), (1871394552UL), (590275639UL), (3237133664UL), (898438533UL), (2291347006UL), (644781653UL), (3575493549UL), (1206698159UL), (2484805619UL), (2931447110UL), (2411269190UL), (3866437145UL), (161562563UL), (3077166456UL), (792874130UL), (3193406610UL), (2500233218UL), (596837225UL), (3667458052UL), (3239960816UL), (2271901243UL)}, {(3975736867UL), (2402230281UL), (4092718962UL), (3100052505UL), (3277909563UL), (2827154828UL), (1067483357UL), (3495429909UL), (426635932UL), (2702495453UL), (725679489UL), (3705541400UL), (1308182381UL), (27549785UL), (3000675918UL), (2982141597UL), (1090931027UL), (755020243UL), (3986354189UL), (2529541113UL), (452574019UL), (2384876926UL), (2147764179UL), (1360907484UL), (2072364695UL), (3034185952UL), (2765119653UL), (3279755577UL), (3828140333UL), (582568392UL), (4228353628UL), (701214306UL), (2460043371UL), (3943376509UL), (2443090800UL), (2481277520UL), (859309333UL), (2928621220UL), (1933644685UL), (3803162893UL), (3310629548UL), (2361261213UL), (790233558UL), (2517540072UL), (2823327610UL), (2952921690UL), (3295251862UL), (1089451775UL), (2637751681UL), (1648031370UL), (1343061717UL), (2355026672UL), (67684812UL), (4019593497UL), (2636283634UL), (1051433451UL), (51111285UL), (15338687UL), (3779021741UL), (3987886044UL), (70037785UL), (2009147353UL), (4236701871UL), (928261128UL), (2185183571UL), (2793993680UL), (2975111058UL), (3730415022UL), (3316612678UL), (823585671UL), (4153354125UL), (509071385UL), (2056228251UL), (4034784810UL), (96820040UL), (169863045UL), (932848332UL), (2282651407UL), (747279843UL), (1387211022UL), (2410099142UL), (3394315084UL), (3191572807UL), (4073182500UL), (3768455462UL), (3712420663UL), (3000991259UL), (249137656UL), (2477445202UL), (3952155443UL), (392730170UL), (4208559971UL), (24751401UL), (661761054UL), (1574175475UL), (2715927647UL), (985309803UL), (2570053358UL), (619269634UL), (3890591314UL), (1129119636UL), (3133886450UL), (328788870UL), (3449809720UL), (1380118080UL), (2719792059UL), (691527418UL), (3487733607UL), (3819095050UL), (3367871088UL), (709089170UL), (1057897966UL), (1938975941UL), (4082466714UL), (251564920UL), (3083496965UL), (1040123365UL), (295024253UL), (2788334176UL), (3430095934UL), (3641758945UL), (2029993123UL), (3231254260UL), (150555625UL), (2270671577UL), (2032382533UL), (2088497043UL), (1392075576UL), (644811077UL), (2122632989UL), (3224165725UL), (1571908345UL), (2558692460UL), (1493305706UL), (4064652450UL), (448105905UL), (699188129UL), (2017324335UL), (4286307548UL), (2415725473UL), (3976741021UL), (3526784185UL), (2882973520UL), (3420335125UL), (2034028744UL), (1425242390UL), (982315917UL), (2614735561UL), (2439972944UL), (2518992720UL), (3792239985UL), (3260669732UL), (2586472751UL), (3432756715UL), (1318634102UL), (3722487277UL), (3037304631UL), (433233786UL), (3750002877UL), (2504731459UL), (1111327015UL), (3975736867UL), (2402230281UL), (4092718962UL), (3100052505UL), (3521430425UL), (2827154828UL), (1067483357UL), (3495429909UL), (426635932UL), (2034644068UL), (725679489UL), (3705541400UL), (1308182381UL), (27549785UL), (3001720496UL), (2982141597UL), (1090931027UL), (755020243UL), (3986354189UL), (307638580UL), (452574019UL), (2384876926UL), (2147764179UL), (1360907484UL), (1701580099UL), (3034185952UL), (2765119653UL), (3279755577UL), (3828140333UL), (2659043235UL), (4228353628UL), (701214306UL), (2460043371UL), (3943376509UL), (2084857792UL), (2481277520UL), (859309333UL), (2928621220UL), (1933644685UL), (4152646669UL), (3310629548UL), (2361261213UL), (790233558UL), (2517540072UL), (481283060UL), (2952921690UL), (3295251862UL), (1089451775UL), (2637751681UL), (2915212660UL), (1343061717UL), (2355026672UL), (67684812UL), (4019593497UL), (3290479436UL), (1051433451UL), (51111285UL), (15338687UL), (3779021741UL), (1430944862UL), (70037785UL), (2009147353UL), (4236701871UL), (928261128UL), (2063919641UL), (2793993680UL), (2975111058UL), (3730415022UL), (3316612678UL), (2373806232UL), (4153354125UL), (509071385UL), (2056228251UL), (4034784810UL), (1912268707UL), (169863045UL), (932848332UL), (2282651407UL), (747279843UL), (3712980941UL), (2410099142UL), (3394315084UL), (3191572807UL), (4073182500UL), (4262344652UL), (3712420663UL), (3000991259UL), (249137656UL), (2477445202UL), (3374467273UL), (392730170UL), (4208559971UL), (24751401UL), (661761054UL), (1670592959UL), (2715927647UL), (985309803UL), (2570053358UL), (619269634UL), (830547082UL), (1129119636UL), (3133886450UL), (328788870UL), (3449809720UL), (202644333UL), (2719792059UL), (691527418UL), (3487733607UL), (3819095050UL), (1400269159UL), (709089170UL), (1057897966UL), (1938975941UL), (4082466714UL), (3393893128UL), (3083496965UL), (1040123365UL), (295024253UL), (2788334176UL), (1219456UL), (3641758945UL), (2029993123UL), (3231254260UL), (150555625UL), (3713963210UL), (2032382533UL), (2088497043UL), (1392075576UL), (644811077UL), (3733090890UL), (3224165725UL), (1571908345UL), (2558692460UL), (1493305706UL), (1678929187UL), (448105905UL), (699188129UL), (2017324335UL), (4286307548UL), (3368868963UL), (3976741021UL), (3526784185UL), (2882973520UL), (3420335125UL), (3233347584UL), (1425242390UL), (982315917UL), (2614735561UL), (2439972944UL), (4172908214UL), (3792239985UL), (3260669732UL), (2586472751UL), (3432756715UL), (1926157640UL), (3722487277UL), (3037304631UL), (433233786UL), (3750002877UL), (625648993UL), (1111327015UL), (3975736867UL), (2402230281UL), (4092718962UL), (1349560774UL), (3521430425UL), (2827154828UL), (1067483357UL), (3495429909UL), (2808148912UL), (2034644068UL), (725679489UL), (3705541400UL), (1308182381UL), (212242504UL), (3001720496UL), (2982141597UL), (1090931027UL), (755020243UL), (2510536004UL), (307638580UL), (452574019UL), (2384876926UL), (2147764179UL), (3227931749UL), (1701580099UL), (3034185952UL), (2765119653UL), (3279755577UL), (1054678914UL), (2659043235UL), (4228353628UL), (701214306UL), (2460043371UL), (381309305UL), (2084857792UL), (2481277520UL), (859309333UL), (2928621220UL), (891630344UL), (4152646669UL), (3310629548UL), (2361261213UL), (790233558UL), (1490030690UL), (481283060UL), (2952921690UL), (3295251862UL), (1089451775UL), (2025962691UL), (2915212660UL), (1343061717UL), (2355026672UL), (67684812UL), (2217081575UL), (3290479436UL), (1051433451UL), (51111285UL), (15338687UL), (3455020635UL), (1430944862UL), (70037785UL), (2009147353UL), (4236701871UL), (1155691935UL), (2063919641UL), (2793993680UL), (2975111058UL), (3730415022UL), (403147571UL), (2373806232UL), (4153354125UL), (509071385UL), (2056228251UL), (444685935UL), (1912268707UL), (169863045UL), (932848332UL), (2282651407UL), (2077207745UL), (3712980941UL), (2410099142UL), (3394315084UL), (3191572807UL), (640536184UL), (4262344652UL), (3712420663UL), (3000991259UL), (249137656UL), (368243227UL), (3374467273UL), (392730170UL), (4208559971UL), (24751401UL), (495648080UL), (1670592959UL), (2715927647UL), (985309803UL), (2570053358UL), (2181488546UL), (830547082UL), (1129119636UL), (3133886450UL), (328788870UL), (2497762979UL), (202644333UL), (2719792059UL), (691527418UL), (3487733607UL), (1976943620UL), (1400269159UL), (709089170UL), (1057897966UL), (1938975941UL), (2071351862UL), (3393893128UL), (3083496965UL), (1040123365UL), (295024253UL), (1440317859UL), (1219456UL), (3641758945UL), (2029993123UL), (3231254260UL), (952956380UL), (3713963210UL), (2032382533UL), (2088497043UL), (1392075576UL), (4180475645UL), (3733090890UL), (3224165725UL), (1571908345UL), (2558692460UL), (3482549931UL), (1678929187UL), (448105905UL), (699188129UL), (2017324335UL), (2431113987UL), (3368868963UL), (3976741021UL), (3526784185UL), (2882973520UL), (1900625235UL), (3233347584UL), (1425242390UL), (982315917UL), (2614735561UL), (1128074864UL), (4172908214UL), (3792239985UL), (3260669732UL), (2586472751UL), (4095880420UL), (1926157640UL), (3722487277UL), (3037304631UL), (433233786UL), (2927295412UL), (625648993UL), (1111327015UL), (3975736867UL), (2402230281UL), (259216032UL), (1349560774UL), (3521430425UL), (2827154828UL), (1067483357UL), (989690947UL), (2808148912UL), (2034644068UL), (725679489UL), (3705541400UL), (588787520UL), (212242504UL), (3001720496UL), (2982141597UL), (1090931027UL), (1235811382UL), (2510536004UL), (307638580UL), (452574019UL), (2384876926UL), (3536994565UL), (3227931749UL), (1701580099UL), (3034185952UL), (2765119653UL), (463890041UL), (1054678914UL), (2659043235UL), (4228353628UL), (701214306UL), (3085494195UL), (381309305UL), (2084857792UL), (2481277520UL), (859309333UL), (3760199179UL), (891630344UL), (4152646669UL), (3310629548UL), (2361261213UL), (2550680915UL), (1490030690UL), (481283060UL), (2952921690UL), (3295251862UL), (4195487760UL), (2025962691UL), (2915212660UL), (1343061717UL), (2355026672UL), (339445869UL), (2217081575UL), (3290479436UL), (1051433451UL), (51111285UL), (1113202216UL), (3455020635UL), (1430944862UL), (70037785UL), (2009147353UL), (3982848623UL), (1155691935UL), (2063919641UL), (2793993680UL), (2975111058UL), (1725337613UL), (403147571UL), (2373806232UL), (4153354125UL), (509071385UL), (1474832043UL), (444685935UL), (1912268707UL), (169863045UL), (932848332UL), (1500855137UL), (2077207745UL), (3712980941UL), (2410099142UL), (3394315084UL), (2800379966UL), (640536184UL), (4262344652UL), (3712420663UL), (3000991259UL), (1028021485UL), (368243227UL), (3374467273UL), (392730170UL), (4208559971UL), (108468246UL), (495648080UL), (1670592959UL), (2715927647UL), (985309803UL), (61959589UL), (2181488546UL), (830547082UL), (1129119636UL), (3133886450UL), (3912020361UL), (2497762979UL), (202644333UL), (2719792059UL), (691527418UL), (1984193076UL), (1976943620UL), (1400269159UL), (709089170UL), (1057897966UL), (2381612490UL), (2071351862UL), (3393893128UL), (3083496965UL), (1040123365UL), (391784014UL), (1440317859UL), (1219456UL), (3641758945UL), (2029993123UL), (2260373342UL), (952956380UL), (3713963210UL), (2032382533UL), (2088497043UL), (135943164UL), (4180475645UL), (3733090890UL), (3224165725UL), (1571908345UL), (2660287325UL), (3482549931UL), (1678929187UL), (448105905UL), (699188129UL), (4104693318UL), (2431113987UL), (3368868963UL), (3976741021UL), (3526784185UL), (113762138UL), (1900625235UL), (3233347584UL), (1425242390UL), (982315917UL), (599246177UL), (1128074864UL), (4172908214UL), (3792239985UL), (3260669732UL), (2309689974UL), (4095880420UL), (1926157640UL), (3722487277UL), (3037304631UL), (3765223460UL), (866296319UL), (1169380319UL), (2919436659UL), (3370646420UL), (1866719277UL), (3226685069UL), (4252262342UL), (1835269960UL), (1170376930UL), (1357078768UL), (269175192UL), (3826888026UL), (3430363541UL), (1920758494UL), (51532769UL), (2919489927UL), (1568325914UL), (3184357856UL), (43519013UL), (2108988015UL), (1398495041UL), (2844640139UL), (2317092036UL), (1774750014UL), (2690907136UL), (1834465421UL), (1106469655UL), (2149810726UL), (4265420439UL), (2048218411UL), (1399986034UL), (1361619115UL), (2504769226UL), (913700780UL), (2382994726UL), (4292849877UL), (1381838410UL), (250258264UL), (1828569640UL), (1732718872UL), (1869949326UL), (835188347UL), (4180489913UL), (3049522050UL), (535168392UL), (3972173823UL), (2763844722UL), (3401884753UL), (3750694101UL), (851518496UL), (1015521371UL), (1511969218UL), (1597622074UL), (3810841601UL), (3326003776UL), (3141062630UL), (552856274UL), (4059179808UL), (175647012UL), (3893497501UL), (1805118717UL), (1064213711UL), (2310866839UL), (1397146463UL), (1798096676UL), (279868399UL), (1926726615UL), (2773068510UL), (347721208UL), (4099183723UL), (509136218UL), (2833615756UL), (3960499694UL), (4236258712UL), (1765641675UL), (535748563UL), (354515646UL), (3307314159UL), (3160079941UL), (3252681800UL), (2568363625UL), (3818514182UL), (3738662353UL), (899056999UL), (2531772068UL), (647726503UL), (2895823632UL), (393777910UL), (1759531813UL), (2363148604UL), (2931477989UL), (3381169914UL), (3877595131UL), (2375539210UL), (557544627UL), (273611522UL), (2717517554UL), (1935966767UL), (1738732887UL), (29153600UL), (20993454UL), (3758163226UL), (1692844400UL), (2176938194UL), (378940221UL), (2888599759UL), (1173120554UL), (2732575460UL), (3912766812UL), (522606644UL), (1925230852UL), (3887440328UL), (2111843275UL), (3549473366UL), (922916775UL), (2889744544UL), (2970467682UL), (3039277863UL), (990580154UL), (55435595UL), (1665634070UL), (3043418336UL), (2792050230UL), (2762503138UL), (1402344059UL), (2099263558UL), (3945248675UL), (3925566467UL), (2413979948UL), (463637252UL), (3768636616UL), (3374572388UL), (2217956879UL), (791988933UL), (382210765UL), (1715859444UL), (3462446413UL), (971427992UL), (3255404695UL), (2001750035UL), (2214129237UL), (320812374UL), (3688098101UL), (920365480UL), (2819401059UL), (2932570681UL), (3749857130UL), (523943786UL), (1271514748UL), (4078439472UL), (3501181265UL), (2475869985UL), (1797996951UL), (2300820710UL), (3994893924UL), (1739992082UL), (2475950326UL), (3780826558UL), (1018851411UL)}}; 
#line 1803 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\curand_precalc.h"
static unsigned precalc_xorwow_offset_matrix[32][800]; 
#line 2671
static unsigned precalc_xorwow_offset_matrix_host[32][800] = {{(0UL), (0UL), (0UL), (0UL), (3UL), (0UL), (0UL), (0UL), (0UL), (6UL), (0UL), (0UL), (0UL), (0UL), (15UL), (0UL), (0UL), (0UL), (0UL), (30UL), (0UL), (0UL), (0UL), (0UL), (60UL), (0UL), (0UL), (0UL), (0UL), (120UL), (0UL), (0UL), (0UL), (0UL), (240UL), (0UL), (0UL), (0UL), (0UL), (480UL), (0UL), (0UL), (0UL), (0UL), (960UL), (0UL), (0UL), (0UL), (0UL), (1920UL), (0UL), (0UL), (0UL), (0UL), (3840UL), (0UL), (0UL), (0UL), (0UL), (7680UL), (0UL), (0UL), (0UL), (0UL), (15360UL), (0UL), (0UL), (0UL), (0UL), (30720UL), (0UL), (0UL), (0UL), (0UL), (61440UL), (0UL), (0UL), (0UL), (0UL), (122880UL), (0UL), (0UL), (0UL), (0UL), (245760UL), (0UL), (0UL), (0UL), (0UL), (491520UL), (0UL), (0UL), (0UL), (0UL), (983040UL), (0UL), (0UL), (0UL), (0UL), (1966080UL), (0UL), (0UL), (0UL), (0UL), (3932160UL), (0UL), (0UL), (0UL), (0UL), (7864320UL), (0UL), (0UL), (0UL), (0UL), (15728640UL), (0UL), (0UL), (0UL), (0UL), (31457280UL), (0UL), (0UL), (0UL), (0UL), (62914560UL), (0UL), (0UL), (0UL), (0UL), (125829120UL), (0UL), (0UL), (0UL), (0UL), (251658240UL), (0UL), (0UL), (0UL), (0UL), (503316480UL), (0UL), (0UL), (0UL), (0UL), (1006632960UL), (0UL), (0UL), (0UL), (0UL), (2013265920UL), (0UL), (0UL), (0UL), (0UL), (4026531840UL), (0UL), (0UL), (0UL), (0UL), (3758096384UL), (1UL), (0UL), (0UL), (0UL), (0UL), (2UL), (0UL), (0UL), (0UL), (0UL), (4UL), (0UL), (0UL), (0UL), (0UL), (8UL), (0UL), (0UL), (0UL), (0UL), (16UL), (0UL), (0UL), (0UL), (0UL), (32UL), (0UL), (0UL), (0UL), (0UL), (64UL), (0UL), (0UL), (0UL), (0UL), (128UL), (0UL), (0UL), (0UL), (0UL), (256UL), (0UL), (0UL), (0UL), (0UL), (512UL), (0UL), (0UL), (0UL), (0UL), (1024UL), (0UL), (0UL), (0UL), (0UL), (2048UL), (0UL), (0UL), (0UL), (0UL), (4096UL), (0UL), (0UL), (0UL), (0UL), (8192UL), (0UL), (0UL), (0UL), (0UL), (16384UL), (0UL), (0UL), (0UL), (0UL), (32768UL), (0UL), (0UL), (0UL), (0UL), (65536UL), (0UL), (0UL), (0UL), (0UL), (131072UL), (0UL), (0UL), (0UL), (0UL), (262144UL), (0UL), (0UL), (0UL), (0UL), (524288UL), (0UL), (0UL), (0UL), (0UL), (1048576UL), (0UL), (0UL), (0UL), (0UL), (2097152UL), (0UL), (0UL), (0UL), (0UL), (4194304UL), (0UL), (0UL), (0UL), (0UL), (8388608UL), (0UL), (0UL), (0UL), (0UL), (16777216UL), (0UL), (0UL), (0UL), (0UL), (33554432UL), (0UL), (0UL), (0UL), (0UL), (67108864UL), (0UL), (0UL), (0UL), (0UL), (134217728UL), (0UL), (0UL), (0UL), (0UL), (268435456UL), (0UL), (0UL), (0UL), (0UL), (536870912UL), (0UL), (0UL), (0UL), (0UL), (1073741824UL), (0UL), (0UL), (0UL), (0UL), (2147483648UL), (0UL), (0UL), (0UL), (0UL), (0UL), (1UL), (0UL), (0UL), (0UL), (0UL), (2UL), (0UL), (0UL), (0UL), (0UL), (4UL), (0UL), (0UL), (0UL), (0UL), (8UL), (0UL), (0UL), (0UL), (0UL), (16UL), (0UL), (0UL), (0UL), (0UL), (32UL), (0UL), (0UL), (0UL), (0UL), (64UL), (0UL), (0UL), (0UL), (0UL), (128UL), (0UL), (0UL), (0UL), (0UL), (256UL), (0UL), (0UL), (0UL), (0UL), (512UL), (0UL), (0UL), (0UL), (0UL), (1024UL), (0UL), (0UL), (0UL), (0UL), (2048UL), (0UL), (0UL), (0UL), (0UL), (4096UL), (0UL), (0UL), (0UL), (0UL), (8192UL), (0UL), (0UL), (0UL), (0UL), (16384UL), (0UL), (0UL), (0UL), (0UL), (32768UL), (0UL), (0UL), (0UL), (0UL), (65536UL), (0UL), (0UL), (0UL), (0UL), (131072UL), (0UL), (0UL), (0UL), (0UL), (262144UL), (0UL), (0UL), (0UL), (0UL), (524288UL), (0UL), (0UL), (0UL), (0UL), (1048576UL), (0UL), (0UL), (0UL), (0UL), (2097152UL), (0UL), (0UL), (0UL), (0UL), (4194304UL), (0UL), (0UL), (0UL), (0UL), (8388608UL), (0UL), (0UL), (0UL), (0UL), (16777216UL), (0UL), (0UL), (0UL), (0UL), (33554432UL), (0UL), (0UL), (0UL), (0UL), (67108864UL), (0UL), (0UL), (0UL), (0UL), (134217728UL), (0UL), (0UL), (0UL), (0UL), (268435456UL), (0UL), (0UL), (0UL), (0UL), (536870912UL), (0UL), (0UL), (0UL), (0UL), (1073741824UL), (0UL), (0UL), (0UL), (0UL), (2147483648UL), (0UL), (0UL), (0UL), (0UL), (0UL), (1UL), (0UL), (0UL), (0UL), (0UL), (2UL), (0UL), (0UL), (0UL), (0UL), (4UL), (0UL), (0UL), (0UL), (0UL), (8UL), (0UL), (0UL), (0UL), (0UL), (16UL), (0UL), (0UL), (0UL), (0UL), (32UL), (0UL), (0UL), (0UL), (0UL), (64UL), (0UL), (0UL), (0UL), (0UL), (128UL), (0UL), (0UL), (0UL), (0UL), (256UL), (0UL), (0UL), (0UL), (0UL), (512UL), (0UL), (0UL), (0UL), (0UL), (1024UL), (0UL), (0UL), (0UL), (0UL), (2048UL), (0UL), (0UL), (0UL), (0UL), (4096UL), (0UL), (0UL), (0UL), (0UL), (8192UL), (0UL), (0UL), (0UL), (0UL), (16384UL), (0UL), (0UL), (0UL), (0UL), (32768UL), (0UL), (0UL), (0UL), (0UL), (65536UL), (0UL), (0UL), (0UL), (0UL), (131072UL), (0UL), (0UL), (0UL), (0UL), (262144UL), (0UL), (0UL), (0UL), (0UL), (524288UL), (0UL), (0UL), (0UL), (0UL), (1048576UL), (0UL), (0UL), (0UL), (0UL), (2097152UL), (0UL), (0UL), (0UL), (0UL), (4194304UL), (0UL), (0UL), (0UL), (0UL), (8388608UL), (0UL), (0UL), (0UL), (0UL), (16777216UL), (0UL), (0UL), (0UL), (0UL), (33554432UL), (0UL), (0UL), (0UL), (0UL), (67108864UL), (0UL), (0UL), (0UL), (0UL), (134217728UL), (0UL), (0UL), (0UL), (0UL), (268435456UL), (0UL), (0UL), (0UL), (0UL), (536870912UL), (0UL), (0UL), (0UL), (0UL), (1073741824UL), (0UL), (0UL), (0UL), (0UL), (2147483648UL), (0UL), (0UL), (0UL), (0UL), (0UL), (1UL), (17UL), (0UL), (0UL), (0UL), (2UL), (34UL), (0UL), (0UL), (0UL), (4UL), (68UL), (0UL), (0UL), (0UL), (8UL), (136UL), (0UL), (0UL), (0UL), (16UL), (272UL), (0UL), (0UL), (0UL), (32UL), (544UL), (0UL), (0UL), (0UL), (64UL), (1088UL), (0UL), (0UL), (0UL), (128UL), (2176UL), (0UL), (0UL), (0UL), (256UL), (4352UL), (0UL), (0UL), (0UL), (512UL), (8704UL), (0UL), (0UL), (0UL), (1024UL), (17408UL), (0UL), (0UL), (0UL), (2048UL), (34816UL), (0UL), (0UL), (0UL), (4096UL), (69632UL), (0UL), (0UL), (0UL), (8192UL), (139264UL), (0UL), (0UL), (0UL), (16384UL), (278528UL), (0UL), (0UL), (0UL), (32768UL), (557056UL), (0UL), (0UL), (0UL), (65536UL), (1114112UL), (0UL), (0UL), (0UL), (131072UL), (2228224UL), (0UL), (0UL), (0UL), (262144UL), (4456448UL), (0UL), (0UL), (0UL), (524288UL), (8912896UL), (0UL), (0UL), (0UL), (1048576UL), (17825792UL), (0UL), (0UL), (0UL), (2097152UL), (35651584UL), (0UL), (0UL), (0UL), (4194304UL), (71303168UL), (0UL), (0UL), (0UL), (8388608UL), (142606336UL), (0UL), (0UL), (0UL), (16777216UL), (285212672UL), (0UL), (0UL), (0UL), (33554432UL), (570425344UL), (0UL), (0UL), (0UL), (67108864UL), (1140850688UL), (0UL), (0UL), (0UL), (134217728UL), (2281701376UL), (0UL), (0UL), (0UL), (268435456UL), (268435456UL), (0UL), (0UL), (0UL), (536870912UL), (536870912UL), (0UL), (0UL), (0UL), (1073741824UL), (1073741824UL), (0UL), (0UL), (0UL), (2147483648UL), (2147483648UL)}, {(0UL), (3UL), (51UL), (771UL), (13107UL), (0UL), (6UL), (102UL), (1542UL), (26214UL), (0UL), (15UL), (255UL), (3855UL), (65535UL), (0UL), (30UL), (510UL), (7710UL), (131070UL), (0UL), (60UL), (1020UL), (15420UL), (262140UL), (0UL), (120UL), (2040UL), (30840UL), (524280UL), (0UL), (240UL), (4080UL), (61680UL), (1048560UL), (0UL), (480UL), (8160UL), (123360UL), (2097120UL), (0UL), (960UL), (16320UL), (246720UL), (4194240UL), (0UL), (1920UL), (32640UL), (493440UL), (8388480UL), (0UL), (3840UL), (65280UL), (986880UL), (16776960UL), (0UL), (7680UL), (130560UL), (1973760UL), (33553920UL), (0UL), (15360UL), (261120UL), (3947520UL), (67107840UL), (0UL), (30720UL), (522240UL), (7895040UL), (134215680UL), (0UL), (61440UL), (1044480UL), (15790080UL), (268431360UL), (0UL), (122880UL), (2088960UL), (31580160UL), (536862720UL), (0UL), (245760UL), (4177920UL), (63160320UL), (1073725440UL), (0UL), (491520UL), (8355840UL), (126320640UL), (2147450880UL), (0UL), (983040UL), (16711680UL), (252641280UL), (4294901760UL), (0UL), (1966080UL), (33423360UL), (505282560UL), (4294836224UL), (0UL), (3932160UL), (66846720UL), (1010565120UL), (4294705152UL), (0UL), (7864320UL), (133693440UL), (2021130240UL), (4294443008UL), (0UL), (15728640UL), (267386880UL), (4042260480UL), (4293918720UL), (0UL), (31457280UL), (534773760UL), (3789553664UL), (4292870144UL), (0UL), (62914560UL), (1069547520UL), (3284140032UL), (4290772992UL), (0UL), (125829120UL), (2139095040UL), (2273312768UL), (4286578688UL), (0UL), (251658240UL), (4278190080UL), (251658240UL), (4278190080UL), (0UL), (503316480UL), (4261412864UL), (503316480UL), (4261412864UL), (0UL), (1006632960UL), (4227858432UL), (1006632960UL), (4227858432UL), (0UL), (2013265920UL), (4160749568UL), (2013265920UL), (4160749568UL), (0UL), (4026531840UL), (4026531840UL), (4026531840UL), (4026531840UL), (0UL), (3758096384UL), (3758096384UL), (3758096384UL), (3758096384UL), (0UL), (0UL), (3UL), (51UL), (771UL), (0UL), (0UL), (6UL), (102UL), (1542UL), (0UL), (0UL), (15UL), (255UL), (3855UL), (0UL), (0UL), (30UL), (510UL), (7710UL), (0UL), (0UL), (60UL), (1020UL), (15420UL), (0UL), (0UL), (120UL), (2040UL), (30840UL), (0UL), (0UL), (240UL), (4080UL), (61680UL), (0UL), (0UL), (480UL), (8160UL), (123360UL), (0UL), (0UL), (960UL), (16320UL), (246720UL), (0UL), (0UL), (1920UL), (32640UL), (493440UL), (0UL), (0UL), (3840UL), (65280UL), (986880UL), (0UL), (0UL), (7680UL), (130560UL), (1973760UL), (0UL), (0UL), (15360UL), (261120UL), (3947520UL), (0UL), (0UL), (30720UL), (522240UL), (7895040UL), (0UL), (0UL), (61440UL), (1044480UL), (15790080UL), (0UL), (0UL), (122880UL), (2088960UL), (31580160UL), (0UL), (0UL), (245760UL), (4177920UL), (63160320UL), (0UL), (0UL), (491520UL), (8355840UL), (126320640UL), (0UL), (0UL), (983040UL), (16711680UL), (252641280UL), (0UL), (0UL), (1966080UL), (33423360UL), (505282560UL), (0UL), (0UL), (3932160UL), (66846720UL), (1010565120UL), (0UL), (0UL), (7864320UL), (133693440UL), (2021130240UL), (0UL), (0UL), (15728640UL), (267386880UL), (4042260480UL), (0UL), (0UL), (31457280UL), (534773760UL), (3789553664UL), (0UL), (0UL), (62914560UL), (1069547520UL), (3284140032UL), (0UL), (0UL), (125829120UL), (2139095040UL), (2273312768UL), (0UL), (0UL), (251658240UL), (4278190080UL), (251658240UL), (0UL), (0UL), (503316480UL), (4261412864UL), (503316480UL), (0UL), (0UL), (1006632960UL), (4227858432UL), (1006632960UL), (0UL), (0UL), (2013265920UL), (4160749568UL), (2013265920UL), (0UL), (0UL), (4026531840UL), (4026531840UL), (4026531840UL), (0UL), (0UL), (3758096384UL), (3758096384UL), (3758096384UL), (0UL), (0UL), (0UL), (3UL), (51UL), (0UL), (0UL), (0UL), (6UL), (102UL), (0UL), (0UL), (0UL), (15UL), (255UL), (0UL), (0UL), (0UL), (30UL), (510UL), (0UL), (0UL), (0UL), (60UL), (1020UL), (0UL), (0UL), (0UL), (120UL), (2040UL), (0UL), (0UL), (0UL), (240UL), (4080UL), (0UL), (0UL), (0UL), (480UL), (8160UL), (0UL), (0UL), (0UL), (960UL), (16320UL), (0UL), (0UL), (0UL), (1920UL), (32640UL), (0UL), (0UL), (0UL), (3840UL), (65280UL), (0UL), (0UL), (0UL), (7680UL), (130560UL), (0UL), (0UL), (0UL), (15360UL), (261120UL), (0UL), (0UL), (0UL), (30720UL), (522240UL), (0UL), (0UL), (0UL), (61440UL), (1044480UL), (0UL), (0UL), (0UL), (122880UL), (2088960UL), (0UL), (0UL), (0UL), (245760UL), (4177920UL), (0UL), (0UL), (0UL), (491520UL), (8355840UL), (0UL), (0UL), (0UL), (983040UL), (16711680UL), (0UL), (0UL), (0UL), (1966080UL), (33423360UL), (0UL), (0UL), (0UL), (3932160UL), (66846720UL), (0UL), (0UL), (0UL), (7864320UL), (133693440UL), (0UL), (0UL), (0UL), (15728640UL), (267386880UL), (0UL), (0UL), (0UL), (31457280UL), (534773760UL), (0UL), (0UL), (0UL), (62914560UL), (1069547520UL), (0UL), (0UL), (0UL), (125829120UL), (2139095040UL), (0UL), (0UL), (0UL), (251658240UL), (4278190080UL), (0UL), (0UL), (0UL), (503316480UL), (4261412864UL), (0UL), (0UL), (0UL), (1006632960UL), (4227858432UL), (0UL), (0UL), (0UL), (2013265920UL), (4160749568UL), (0UL), (0UL), (0UL), (4026531840UL), (4026531840UL), (0UL), (0UL), (0UL), (3758096384UL), (3758096384UL), (0UL), (0UL), (0UL), (0UL), (3UL), (0UL), (0UL), (0UL), (0UL), (6UL), (0UL), (0UL), (0UL), (0UL), (15UL), (0UL), (0UL), (0UL), (0UL), (30UL), (0UL), (0UL), (0UL), (0UL), (60UL), (0UL), (0UL), (0UL), (0UL), (120UL), (0UL), (0UL), (0UL), (0UL), (240UL), (0UL), (0UL), (0UL), (0UL), (480UL), (0UL), (0UL), (0UL), (0UL), (960UL), (0UL), (0UL), (0UL), (0UL), (1920UL), (0UL), (0UL), (0UL), (0UL), (3840UL), (0UL), (0UL), (0UL), (0UL), (7680UL), (0UL), (0UL), (0UL), (0UL), (15360UL), (0UL), (0UL), (0UL), (0UL), (30720UL), (0UL), (0UL), (0UL), (0UL), (61440UL), (0UL), (0UL), (0UL), (0UL), (122880UL), (0UL), (0UL), (0UL), (0UL), (245760UL), (0UL), (0UL), (0UL), (0UL), (491520UL), (0UL), (0UL), (0UL), (0UL), (983040UL), (0UL), (0UL), (0UL), (0UL), (1966080UL), (0UL), (0UL), (0UL), (0UL), (3932160UL), (0UL), (0UL), (0UL), (0UL), (7864320UL), (0UL), (0UL), (0UL), (0UL), (15728640UL), (0UL), (0UL), (0UL), (0UL), (31457280UL), (0UL), (0UL), (0UL), (0UL), (62914560UL), (0UL), (0UL), (0UL), (0UL), (125829120UL), (0UL), (0UL), (0UL), (0UL), (251658240UL), (0UL), (0UL), (0UL), (0UL), (503316480UL), (0UL), (0UL), (0UL), (0UL), (1006632960UL), (0UL), (0UL), (0UL), (0UL), (2013265920UL), (0UL), (0UL), (0UL), (0UL), (4026531840UL), (0UL), (0UL), (0UL), (0UL), (3758096384UL), (1UL), (17UL), (257UL), (4369UL), (65537UL), (2UL), (34UL), (514UL), (8738UL), (131074UL), (4UL), (68UL), (1028UL), (17476UL), (262148UL), (8UL), (136UL), (2056UL), (34952UL), (524296UL), (16UL), (272UL), (4112UL), (69904UL), (1048592UL), (32UL), (544UL), (8224UL), (139808UL), (2097184UL), (64UL), (1088UL), (16448UL), (279616UL), (4194368UL), (128UL), (2176UL), (32896UL), (559232UL), (8388736UL), (256UL), (4352UL), (65792UL), (1118464UL), (16777472UL), (512UL), (8704UL), (131584UL), (2236928UL), (33554944UL), (1024UL), (17408UL), (263168UL), (4473856UL), (67109888UL), (2048UL), (34816UL), (526336UL), (8947712UL), (134219776UL), (4096UL), (69632UL), (1052672UL), (17895424UL), (268439552UL), (8192UL), (139264UL), (2105344UL), (35790848UL), (536879104UL), (16384UL), (278528UL), (4210688UL), (71581696UL), (1073758208UL), (32768UL), (557056UL), (8421376UL), (143163392UL), (2147516416UL), (65536UL), (1114112UL), (16842752UL), (286326784UL), (65536UL), (131072UL), (2228224UL), (33685504UL), (572653568UL), (131072UL), (262144UL), (4456448UL), (67371008UL), (1145307136UL), (262144UL), (524288UL), (8912896UL), (134742016UL), (2290614272UL), (524288UL), (1048576UL), (17825792UL), (269484032UL), (286261248UL), (1048576UL), (2097152UL), (35651584UL), (538968064UL), (572522496UL), (2097152UL), (4194304UL), (71303168UL), (1077936128UL), (1145044992UL), (4194304UL), (8388608UL), (142606336UL), (2155872256UL), (2290089984UL), (8388608UL), (16777216UL), (285212672UL), (16777216UL), (285212672UL), (16777216UL), (33554432UL), (570425344UL), (33554432UL), (570425344UL), (33554432UL), (67108864UL), (1140850688UL), (67108864UL), (1140850688UL), (67108864UL), (134217728UL), (2281701376UL), (134217728UL), (2281701376UL), (134217728UL), (268435456UL), (268435456UL), (268435456UL), (268435456UL), (268435456UL), (536870912UL), (536870912UL), (536870912UL), (536870912UL), (536870912UL), (1073741824UL), (1073741824UL), (1073741824UL), (1073741824UL), (1073741824UL), (2147483648UL), (2147483648UL), (2147483648UL), (2147483648UL), (2147483648UL)}, {(85009117UL), (335741939UL), (1412632518UL), (386859243UL), (1741437244UL), (152139416UL), (403047142UL), (2556825231UL), (505087203UL), (4287193174UL), (335609039UL), (336528191UL), (1425998811UL), (456920088UL), (2832198590UL), (724748988UL), (3625845630UL), (1509824181UL), (3330088197UL), (2710488401UL), (1431742057UL), (1077674236UL), (1140592489UL), (2096905276UL), (3007294393UL), (2863484114UL), (1081606648UL), (1207443154UL), (972585080UL), (2793363314UL), (1432000919UL), (1089470704UL), (1341132452UL), (3019109363UL), (2362285522UL), (1790260014UL), (2178941408UL), (2682264904UL), (1743251430UL), (429603751UL), (359294556UL), (62915520UL), (1069562512UL), (3486502860UL), (859207501UL), (3939814584UL), (125831040UL), (2139125024UL), (2678038424UL), (1718415002UL), (363436400UL), (251662080UL), (4278250048UL), (1061109552UL), (3436830004UL), (3948098272UL), (503324160UL), (4261532800UL), (2122219104UL), (2310257256UL), (380003776UL), (1006648320UL), (4228098304UL), (4244438208UL), (3278337232UL), (3981233024UL), (2013296640UL), (4161229312UL), (4193909120UL), (2530142624UL), (446273280UL), (4026593280UL), (4027491328UL), (871625472UL), (4254978880UL), (4113772032UL), (3758219264UL), (3760015360UL), (2011686400UL), (3946555008UL), (711351296UL), (3221471232UL), (3225063424UL), (4291808256UL), (108481792UL), (2496444416UL), (2147975168UL), (2155159552UL), (4020213760UL), (485399040UL), (3919147008UL), (983040UL), (15351808UL), (255799296UL), (3923588096UL), (322101248UL), (1966080UL), (299139072UL), (511598592UL), (3283773440UL), (3865427968UL), (3932160UL), (4087939072UL), (1023197184UL), (1467273216UL), (214663168UL), (7864320UL), (4149346304UL), (2046394368UL), (3202981888UL), (3650551808UL), (3236954112UL), (1050935296UL), (871563264UL), (2916302848UL), (1932394496UL), (2447376384UL), (1833435136UL), (2011561984UL), (2342944768UL), (643563520UL), (868220928UL), (177209344UL), (4291559424UL), (122486784UL), (2360868864UL), (2004877312UL), (85983232UL), (4019716096UL), (3734634496UL), (3647995904UL), (1056964608UL), (3661627392UL), (254803968UL), (2905866240UL), (1658847232UL), (2113929216UL), (3028287488UL), (3730833408UL), (2322071552UL), (3586129920UL), (4227858432UL), (1761607680UL), (2092957696UL), (80740352UL), (2071986176UL), (4160749568UL), (3523215360UL), (964689920UL), (429916160UL), (3875536896UL), (4026531840UL), (2751463424UL), (1929379840UL), (4081057792UL), (503316480UL), (3758096384UL), (2281701376UL), (4127195136UL), (3397386240UL), (1316635UL), (85009117UL), (335741939UL), (1412632518UL), (386859243UL), (1580547UL), (152139416UL), (403047142UL), (2556825231UL), (505087203UL), (1317672UL), (335609039UL), (336528191UL), (1425998811UL), (456920088UL), (1574501UL), (724748988UL), (3625845630UL), (1509824181UL), (3330088197UL), (15612UL), (1431742057UL), (1077674236UL), (1140592489UL), (2096905276UL), (31224UL), (2863484114UL), (1081606648UL), (1207443154UL), (972585080UL), (62451UL), (1432000919UL), (1089470704UL), (1341132452UL), (3019109363UL), (124902UL), (1790260014UL), (2178941408UL), (2682264904UL), (1743251430UL), (249804UL), (359294556UL), (62915520UL), (1069562512UL), (3486502860UL), (499608UL), (3939814584UL), (125831040UL), (2139125024UL), (2678038424UL), (999216UL), (363436400UL), (251662080UL), (4278250048UL), (1061109552UL), (3223223904UL), (3948098272UL), (503324160UL), (4261532800UL), (2122219104UL), (1077738688UL), (380003776UL), (1006648320UL), (4228098304UL), (4244438208UL), (1081735552UL), (3981233024UL), (2013296640UL), (4161229312UL), (4193909120UL), (1089729280UL), (446273280UL), (4026593280UL), (4027491328UL), (871625472UL), (2179458560UL), (4113772032UL), (3758219264UL), (3760015360UL), (2011686400UL), (63949824UL), (711351296UL), (3221471232UL), (3225063424UL), (4291808256UL), (127899648UL), (2496444416UL), (2147975168UL), (2155159552UL), (4020213760UL), (255799296UL), (3919147008UL), (983040UL), (15351808UL), (255799296UL), (3732824064UL), (322101248UL), (1966080UL), (299139072UL), (511598592UL), (2096939008UL), (3865427968UL), (3932160UL), (4087939072UL), (1023197184UL), (972652544UL), (214663168UL), (7864320UL), (4149346304UL), (2046394368UL), (3019046912UL), (3650551808UL), (3236954112UL), (1050935296UL), (871563264UL), (1743126528UL), (1932394496UL), (2447376384UL), (1833435136UL), (2011561984UL), (3486253056UL), (643563520UL), (868220928UL), (177209344UL), (4291559424UL), (2677538816UL), (2360868864UL), (2004877312UL), (85983232UL), (4019716096UL), (1060110336UL), (3647995904UL), (1056964608UL), (3661627392UL), (254803968UL), (3193962496UL), (1658847232UL), (2113929216UL), (3028287488UL), (3730833408UL), (3166699520UL), (3586129920UL), (4227858432UL), (1761607680UL), (2092957696UL), (3112173568UL), (2071986176UL), (4160749568UL), (3523215360UL), (964689920UL), (1929379840UL), (3875536896UL), (4026531840UL), (2751463424UL), (1929379840UL), (4127195136UL), (503316480UL), (3758096384UL), (2281701376UL), (4127195136UL), (332854UL), (1316635UL), (85009117UL), (335741939UL), (1412632518UL), (596079UL), (1580547UL), (152139416UL), (403047142UL), (2556825231UL), (1316075UL), (1317672UL), (335609039UL), (336528191UL), (1425998811UL), (2824661UL), (1574501UL), (724748988UL), (3625845630UL), (1509824181UL), (5571497UL), (15612UL), (1431742057UL), (1077674236UL), (1140592489UL), (11142994UL), (31224UL), (2863484114UL), (1081606648UL), (1207443154UL), (22285988UL), (62451UL), (1432000919UL), (1089470704UL), (1341132452UL), (44571976UL), (124902UL), (1790260014UL), (2178941408UL), (2682264904UL), (89143952UL), (249804UL), (359294556UL), (62915520UL), (1069562512UL), (178287904UL), (499608UL), (3939814584UL), (125831040UL), (2139125024UL), (356575808UL), (999216UL), (363436400UL), (251662080UL), (4278250048UL), (713151616UL), (3223223904UL), (3948098272UL), (503324160UL), (4261532800UL), (1426303232UL), (1077738688UL), (380003776UL), (1006648320UL), (4228098304UL), (2852606464UL), (1081735552UL), (3981233024UL), (2013296640UL), (4161229312UL), (1410245632UL), (1089729280UL), (446273280UL), (4026593280UL), (4027491328UL), (1746749440UL), (2179458560UL), (4113772032UL), (3758219264UL), (3760015360UL), (272273408UL), (63949824UL), (711351296UL), (3221471232UL), (3225063424UL), (3765772288UL), (127899648UL), (2496444416UL), (2147975168UL), (2155159552UL), (15351808UL), (255799296UL), (3919147008UL), (983040UL), (15351808UL), (3251929088UL), (3732824064UL), (322101248UL), (1966080UL), (299139072UL), (1135149056UL), (2096939008UL), (3865427968UL), (3932160UL), (4087939072UL), (1196556288UL), (972652544UL), (214663168UL), (7864320UL), (4149346304UL), (1319370752UL), (3019046912UL), (3650551808UL), (3236954112UL), (1050935296UL), (2638741504UL), (1743126528UL), (1932394496UL), (2447376384UL), (1833435136UL), (982515712UL), (3486253056UL), (643563520UL), (868220928UL), (177209344UL), (1965031424UL), (2677538816UL), (2360868864UL), (2004877312UL), (85983232UL), (3930062848UL), (1060110336UL), (3647995904UL), (1056964608UL), (3661627392UL), (3565158400UL), (3193962496UL), (1658847232UL), (2113929216UL), (3028287488UL), (2835349504UL), (3166699520UL), (3586129920UL), (4227858432UL), (1761607680UL), (1375731712UL), (3112173568UL), (2071986176UL), (4160749568UL), (3523215360UL), (2751463424UL), (1929379840UL), (3875536896UL), (4026531840UL), (2751463424UL), (2281701376UL), (4127195136UL), (503316480UL), (3758096384UL), (2281701376UL), (5123UL), (332854UL), (1316635UL), (85009117UL), (335741939UL), (6150UL), (596079UL), (1580547UL), (152139416UL), (403047142UL), (5135UL), (1316075UL), (1317672UL), (335609039UL), (336528191UL), (6174UL), (2824661UL), (1574501UL), (724748988UL), (3625845630UL), (60UL), (5571497UL), (15612UL), (1431742057UL), (1077674236UL), (120UL), (11142994UL), (31224UL), (2863484114UL), (1081606648UL), (240UL), (22285988UL), (62451UL), (1432000919UL), (1089470704UL), (480UL), (44571976UL), (124902UL), (1790260014UL), (2178941408UL), (960UL), (89143952UL), (249804UL), (359294556UL), (62915520UL), (1920UL), (178287904UL), (499608UL), (3939814584UL), (125831040UL), (3840UL), (356575808UL), (999216UL), (363436400UL), (251662080UL), (7680UL), (713151616UL), (3223223904UL), (3948098272UL), (503324160UL), (15360UL), (1426303232UL), (1077738688UL), (380003776UL), (1006648320UL), (30720UL), (2852606464UL), (1081735552UL), (3981233024UL), (2013296640UL), (61440UL), (1410245632UL), (1089729280UL), (446273280UL), (4026593280UL), (122880UL), (1746749440UL), (2179458560UL), (4113772032UL), (3758219264UL), (245760UL), (272273408UL), (63949824UL), (711351296UL), (3221471232UL), (491520UL), (3765772288UL), (127899648UL), (2496444416UL), (2147975168UL), (983040UL), (15351808UL), (255799296UL), (3919147008UL), (983040UL), (3223191552UL), (3251929088UL), (3732824064UL), (322101248UL), (1966080UL), (1077673984UL), (1135149056UL), (2096939008UL), (3865427968UL), (3932160UL), (1081606144UL), (1196556288UL), (972652544UL), (214663168UL), (7864320UL), (1089470464UL), (1319370752UL), (3019046912UL), (3650551808UL), (3236954112UL), (2178940928UL), (2638741504UL), (1743126528UL), (1932394496UL), (2447376384UL), (62914560UL), (982515712UL), (3486253056UL), (643563520UL), (868220928UL), (125829120UL), (1965031424UL), (2677538816UL), (2360868864UL), (2004877312UL), (251658240UL), (3930062848UL), (1060110336UL), (3647995904UL), (1056964608UL), (503316480UL), (3565158400UL), (3193962496UL), (1658847232UL), (2113929216UL), (1006632960UL), (2835349504UL), (3166699520UL), (3586129920UL), (4227858432UL), (2013265920UL), (1375731712UL), (3112173568UL), (2071986176UL), (4160749568UL), (4026531840UL), (2751463424UL), (1929379840UL), (3875536896UL), (4026531840UL), (3758096384UL), (2281701376UL), (4127195136UL), (503316480UL), (3758096384UL), (201392209UL), (3423671362UL), (218366296UL), (3713336838UL), (206572594UL), (402785186UL), (2552372100UL), (436928947UL), (3130605370UL), (463476848UL), (262468UL), (4461835UL), (68158800UL), (1158700908UL), (20971524UL), (524680UL), (8919318UL), (136513955UL), (2316537326UL), (25165852UL), (3222274064UL), (3239051564UL), (3494187077UL), (3558090985UL), (3221225500UL), (2149580832UL), (2183135832UL), (2693406858UL), (2821214674UL), (2147483704UL), (4194368UL), (71304368UL), (1091846420UL), (1347462055UL), (64UL), (8388736UL), (142608736UL), (2183692840UL), (2694924110UL), (3221225600UL), (16777472UL), (285217472UL), (72418384UL), (1094880924UL), (1342177536UL), (33554944UL), (570434944UL), (144836768UL), (2189761848UL), (2684355072UL), (67109888UL), (1140869888UL), (289673536UL), (84556400UL), (1073742848UL), (134219776UL), (2281739776UL), (579347072UL), (169112800UL), (2147485696UL), (268439552UL), (268512256UL), (1158694144UL), (69790144UL), (4096UL), (536879104UL), (537024512UL), (2317388288UL), (3360805760UL), (8192UL), (1073758208UL), (1074049024UL), (339809280UL), (1352902400UL), (16384UL), (2147516416UL), (2148098048UL), (3900844032UL), (1632062976UL), (32768UL), (65536UL), (1228800UL), (17059840UL), (311335936UL), (65536UL), (131072UL), (2457600UL), (34119680UL), (622671872UL), (131072UL), (262144UL), (4915200UL), (68239360UL), (1245343744UL), (262144UL), (524288UL), (9830400UL), (136478720UL), (2490687488UL), (524288UL), (1048576UL), (288096256UL), (272957440UL), (954843136UL), (3222274048UL), (2097152UL), (3797417984UL), (545914880UL), (2983428096UL), (2149580800UL), (4194304UL), (78643200UL), (1091829760UL), (2745630720UL), (4194304UL), (3229614080UL), (3378511872UL), (1109917696UL), (2270035968UL), (8388608UL), (1358954496UL), (1119879168UL), (1414529024UL), (513540096UL), (16777216UL), (2717908992UL), (2239758336UL), (2829058048UL), (1027080192UL), (33554432UL), (1140850688UL), (184549376UL), (1363148800UL), (2054160384UL), (3288334336UL), (2281701376UL), (369098752UL), (2726297600UL), (4108320768UL), (2281701376UL), (268435456UL), (738197504UL), (2231369728UL), (968884224UL), (3959422976UL), (536870912UL), (1476395008UL), (167772160UL), (3011510272UL), (3355443200UL), (1073741824UL), (2952790016UL), (335544320UL), (1728053248UL), (2147483648UL), (2147483648UL), (1610612736UL), (3892314112UL), (503316480UL), (0UL)}, {(1939838472UL), (1412147404UL), (166205219UL), (1757484276UL), (2905930693UL), (2345662040UL), (2845657161UL), (253454719UL), (2661974169UL), (303781080UL), (4075331504UL), (31014156UL), (244538930UL), (3752264221UL), (992575155UL), (219309525UL), (246620060UL), (215640989UL), (4125020723UL), (2016731730UL), (3236558869UL), (297169276UL), (3293566751UL), (1867504216UL), (210423272UL), (2531663658UL), (499723753UL), (1730625896UL), (189236880UL), (3388575408UL), (2433358422UL), (1368961148UL), (3134096848UL), (2827836415UL), (3888822753UL), (4172043647UL), (3379360748UL), (2651760955UL), (1345081091UL), (627692776UL), (189423917UL), (1927379456UL), (4004336944UL), (2995932065UL), (1882016234UL), (2551113616UL), (1576396048UL), (1299792730UL), (2151240795UL), (2154814108UL), (4292139924UL), (3555849728UL), (943986992UL), (3169912733UL), (2631635779UL), (3478094562UL), (1285558544UL), (3716074330UL), (2780749859UL), (3911106510UL), (4175656994UL), (1731832828UL), (1275401375UL), (937322456UL), (3802094750UL), (1145506936UL), (1008905193UL), (1718801768UL), (645739137UL), (1356219146UL), (827886816UL), (1722154800UL), (2242776733UL), (754630810UL), (772070504UL), (249481170UL), (2608123425UL), (2087201889UL), (3200968096UL), (3292110026UL), (841433255UL), (477543427UL), (1878882709UL), (705347364UL), (4003860146UL), (3194913138UL), (2616490007UL), (357561212UL), (2446098297UL), (2955680594UL), (2512991743UL), (637464579UL), (1209132455UL), (1341312804UL), (612108672UL), (2455017713UL), (1749147666UL), (4020226825UL), (2873924220UL), (499405095UL), (1837614076UL), (1227604028UL), (714577577UL), (165950208UL), (442290261UL), (489077752UL), (216760440UL), (42151250UL), (426862080UL), (2810242474UL), (4112075489UL), (3514761468UL), (4101921371UL), (982512636UL), (500792667UL), (4286077681UL), (198050301UL), (1858712743UL), (2913642493UL), (3547545255UL), (3981929169UL), (2944140287UL), (2286578015UL), (3422343167UL), (1239123295UL), (2026367394UL), (3269986302UL), (3028402878UL), (2709637886UL), (1096011710UL), (294584132UL), (3086749695UL), (3324400975UL), (1164394495UL), (4290155855UL), (543687304UL), (4008517630UL), (836370334UL), (1876426750UL), (2362048414UL), (3578325264UL), (3221487612UL), (2671154748UL), (3395518460UL), (2018383420UL), (2131029536UL), (2165829624UL), (697661816UL), (1336049656UL), (3309365624UL), (4259639360UL), (3423548400UL), (2416417776UL), (1633698800UL), (1630071792UL), (41950336UL), (3423478496UL), (2885608160UL), (3943744224UL), (677380832UL), (4179285363UL), (1939838472UL), (1412147404UL), (166205219UL), (1757484276UL), (3838244595UL), (2345662040UL), (2845657161UL), (253454719UL), (2661974169UL), (138737288UL), (4075331504UL), (31014156UL), (244538930UL), (3752264221UL), (1503392345UL), (219309525UL), (246620060UL), (215640989UL), (4125020723UL), (1759481152UL), (3236558869UL), (297169276UL), (3293566751UL), (1867504216UL), (3898070400UL), (2531663658UL), (499723753UL), (1730625896UL), (189236880UL), (2610231010UL), (2433358422UL), (1368961148UL), (3134096848UL), (2827836415UL), (3903474593UL), (4172043647UL), (3379360748UL), (2651760955UL), (1345081091UL), (1267864331UL), (189423917UL), (1927379456UL), (4004336944UL), (2995932065UL), (3452816347UL), (2551113616UL), (1576396048UL), (1299792730UL), (2151240795UL), (1222520631UL), (4292139924UL), (3555849728UL), (943986992UL), (3169912733UL), (3260130211UL), (3478094562UL), (1285558544UL), (3716074330UL), (2780749859UL), (3039362306UL), (4175656994UL), (1731832828UL), (1275401375UL), (937322456UL), (3236754932UL), (1145506936UL), (1008905193UL), (1718801768UL), (645739137UL), (1358079399UL), (827886816UL), (1722154800UL), (2242776733UL), (754630810UL), (1748663943UL), (249481170UL), (2608123425UL), (2087201889UL), (3200968096UL), (698076610UL), (841433255UL), (477543427UL), (1878882709UL), (705347364UL), (3692794996UL), (3194913138UL), (2616490007UL), (357561212UL), (2446098297UL), (2771068186UL), (2512991743UL), (637464579UL), (1209132455UL), (1341312804UL), (27937268UL), (2455017713UL), (1749147666UL), (4020226825UL), (2873924220UL), (1673040956UL), (1837614076UL), (1227604028UL), (714577577UL), (165950208UL), (528340088UL), (489077752UL), (216760440UL), (42151250UL), (426862080UL), (1646215396UL), (4112075489UL), (3514761468UL), (4101921371UL), (982512636UL), (2095821304UL), (4286077681UL), (198050301UL), (1858712743UL), (2913642493UL), (277300160UL), (3981929169UL), (2944140287UL), (2286578015UL), (3422343167UL), (1178044288UL), (2026367394UL), (3269986302UL), (3028402878UL), (2709637886UL), (2234191616UL), (294584132UL), (3086749695UL), (3324400975UL), (1164394495UL), (136978944UL), (543687304UL), (4008517630UL), (836370334UL), (1876426750UL), (3275253760UL), (3578325264UL), (3221487612UL), (2671154748UL), (3395518460UL), (3942394880UL), (2131029536UL), (2165829624UL), (697661816UL), (1336049656UL), (3265045504UL), (4259639360UL), (3423548400UL), (2416417776UL), (1633698800UL), (3943712768UL), (41950336UL), (3423478496UL), (2885608160UL), (3943744224UL), (2293593009UL), (4179285363UL), (1939838472UL), (1412147404UL), (166205219UL), (715714152UL), (3838244595UL), (2345662040UL), (2845657161UL), (253454719UL), (3758048260UL), (138737288UL), (4075331504UL), (31014156UL), (244538930UL), (370671650UL), (1503392345UL), (219309525UL), (246620060UL), (215640989UL), (2219162331UL), (1759481152UL), (3236558869UL), (297169276UL), (3293566751UL), (135243402UL), (3898070400UL), (2531663658UL), (499723753UL), (1730625896UL), (3142293713UL), (2610231010UL), (2433358422UL), (1368961148UL), (3134096848UL), (486949791UL), (3903474593UL), (4172043647UL), (3379360748UL), (2651760955UL), (3172880550UL), (1267864331UL), (189423917UL), (1927379456UL), (4004336944UL), (191463910UL), (3452816347UL), (2551113616UL), (1576396048UL), (1299792730UL), (4411574UL), (1222520631UL), (4292139924UL), (3555849728UL), (943986992UL), (3073348038UL), (3260130211UL), (3478094562UL), (1285558544UL), (3716074330UL), (3098363790UL), (3039362306UL), (4175656994UL), (1731832828UL), (1275401375UL), (468159532UL), (3236754932UL), (1145506936UL), (1008905193UL), (1718801768UL), (1092964081UL), (1358079399UL), (827886816UL), (1722154800UL), (2242776733UL), (53128947UL), (1748663943UL), (249481170UL), (2608123425UL), (2087201889UL), (1960144614UL), (698076610UL), (841433255UL), (477543427UL), (1878882709UL), (1505419004UL), (3692794996UL), (3194913138UL), (2616490007UL), (357561212UL), (2823143358UL), (2771068186UL), (2512991743UL), (637464579UL), (1209132455UL), (1991737212UL), (27937268UL), (2455017713UL), (1749147666UL), (4020226825UL), (2907896812UL), (1673040956UL), (1837614076UL), (1227604028UL), (714577577UL), (3633969112UL), (528340088UL), (489077752UL), (216760440UL), (42151250UL), (2886728356UL), (1646215396UL), (4112075489UL), (3514761468UL), (4101921371UL), (3507686008UL), (2095821304UL), (4286077681UL), (198050301UL), (1858712743UL), (1463806912UL), (277300160UL), (3981929169UL), (2944140287UL), (2286578015UL), (4137888640UL), (1178044288UL), (2026367394UL), (3269986302UL), (3028402878UL), (1276820224UL), (2234191616UL), (294584132UL), (3086749695UL), (3324400975UL), (4274031104UL), (136978944UL), (543687304UL), (4008517630UL), (836370334UL), (2978609152UL), (3275253760UL), (3578325264UL), (3221487612UL), (2671154748UL), (2296777728UL), (3942394880UL), (2131029536UL), (2165829624UL), (697661816UL), (1086645248UL), (3265045504UL), (4259639360UL), (3423548400UL), (2416417776UL), (2295121920UL), (3943712768UL), (41950336UL), (3423478496UL), (2885608160UL), (3290486993UL), (2293593009UL), (4179285363UL), (1939838472UL), (1412147404UL), (3718742914UL), (715714152UL), (3838244595UL), (2345662040UL), (2845657161UL), (3251034248UL), (3758048260UL), (138737288UL), (4075331504UL), (31014156UL), (2257801369UL), (370671650UL), (1503392345UL), (219309525UL), (246620060UL), (1375177854UL), (2219162331UL), (1759481152UL), (3236558869UL), (297169276UL), (2981812236UL), (135243402UL), (3898070400UL), (2531663658UL), (499723753UL), (1103465850UL), (3142293713UL), (2610231010UL), (2433358422UL), (1368961148UL), (2570001060UL), (486949791UL), (3903474593UL), (4172043647UL), (3379360748UL), (1922171925UL), (3172880550UL), (1267864331UL), (189423917UL), (1927379456UL), (1359812359UL), (191463910UL), (3452816347UL), (2551113616UL), (1576396048UL), (2518549525UL), (4411574UL), (1222520631UL), (4292139924UL), (3555849728UL), (949028615UL), (3073348038UL), (3260130211UL), (3478094562UL), (1285558544UL), (4113039486UL), (3098363790UL), (3039362306UL), (4175656994UL), (1731832828UL), (1827471372UL), (468159532UL), (3236754932UL), (1145506936UL), (1008905193UL), (1626341859UL), (1092964081UL), (1358079399UL), (827886816UL), (1722154800UL), (1069547583UL), (53128947UL), (1748663943UL), (249481170UL), (2608123425UL), (3162506114UL), (1960144614UL), (698076610UL), (841433255UL), (477543427UL), (3641706484UL), (1505419004UL), (3692794996UL), (3194913138UL), (2616490007UL), (3623882586UL), (2823143358UL), (2771068186UL), (2512991743UL), (637464579UL), (16785012UL), (1991737212UL), (27937268UL), (2455017713UL), (1749147666UL), (2348825660UL), (2907896812UL), (1673040956UL), (1837614076UL), (1227604028UL), (2579527800UL), (3633969112UL), (528340088UL), (489077752UL), (216760440UL), (3628134628UL), (2886728356UL), (1646215396UL), (4112075489UL), (3514761468UL), (1602085368UL), (3507686008UL), (2095821304UL), (4286077681UL), (198050301UL), (2501362624UL), (1463806912UL), (277300160UL), (3981929169UL), (2944140287UL), (4112467840UL), (4137888640UL), (1178044288UL), (2026367394UL), (3269986302UL), (3356184320UL), (1276820224UL), (2234191616UL), (294584132UL), (3086749695UL), (366387712UL), (4274031104UL), (136978944UL), (543687304UL), (4008517630UL), (1006135296UL), (2978609152UL), (3275253760UL), (3578325264UL), (3221487612UL), (3104844800UL), (2296777728UL), (3942394880UL), (2131029536UL), (2165829624UL), (1874371584UL), (1086645248UL), (3265045504UL), (4259639360UL), (3423548400UL), (2975352832UL), (2295121920UL), (3943712768UL), (41950336UL), (3423478496UL), (989898496UL), (3410688577UL), (2331788830UL), (3546482013UL), (813828841UL), (1865093068UL), (3265457506UL), (3795669738UL), (2119696024UL), (4285651426UL), (3333834629UL), (3451487261UL), (2090324595UL), (1816963648UL), (932961512UL), (2470761029UL), (3401764108UL), (3421619354UL), (4199624502UL), (589386372UL), (879396240UL), (3372470254UL), (2693109296UL), (2424215996UL), (38442268UL), (1882087724UL), (171397600UL), (2024561281UL), (183095586UL), (3282207272UL), (3402177296UL), (1859195498UL), (413109947UL), (2839537944UL), (1632143648UL), (3742715856UL), (388696500UL), (1748703733UL), (3563198567UL), (3826785440UL), (2896086528UL), (3989037829UL), (1478787788UL), (1390277813UL), (2123320736UL), (3416516800UL), (2056564203UL), (2584895011UL), (1605192736UL), (2475623616UL), (3856499712UL), (3439657984UL), (708088129UL), (1501395566UL), (1302184960UL), (1360092352UL), (1645630430UL), (1425230387UL), (3369488824UL), (2979863936UL), (869212432UL), (150548847UL), (1097557362UL), (655939640UL), (316553344UL), (3761918508UL), (3958338094UL), (141744600UL), (1412214640UL), (1859689984UL), (3200680981UL), (3883058679UL), (999801880UL), (3946079738UL), (1876072704UL), (194381849UL), (2177533995UL), (1584707624UL), (3053768410UL), (2593051904UL), (3458076673UL), (4047442835UL), (3545972808UL), (3441793178UL), (194975744UL), (1731731470UL), (4168755162UL), (2628944732UL), (2125675784UL), (3119906816UL), (960774145UL), (2646626078UL), (2152793157UL), (3049156634UL), (672464896UL), (3046932493UL), (3700727536UL), (2152335477UL), (575986696UL), (671940608UL), (2208366608UL), (1454456125UL), (937760016UL), (4103979069UL), (2737668096UL), (1179779104UL), (1030912634UL), (1041902112UL), (2032909434UL), (2274230272UL), (2089025605UL), (3050632421UL), (2428784965UL), (140658149UL), (4254138368UL), (1745354889UL), (711584249UL), (2746523017UL), (2551006457UL), (1100808192UL), (1494221073UL), (3422999489UL), (2696954129UL), (976716737UL), (2653421568UL), (3806331426UL), (3690047362UL), (1481392674UL), (3817015170UL), (2353004544UL), (286262340UL), (2300534532UL), (4206449732UL), (15339268UL), (2894069760UL), (488376456UL), (1489927688UL), (1196583048UL), (652746248UL), (2214592512UL), (69904UL), (1006205200UL), (2322628880UL), (1229515024UL), (2617245696UL), (3423527456UL), (1964953120UL), (4260938272UL), (386199072UL), (1744830464UL), (1342444608UL), (1069330496UL), (2138592320UL), (3185897536UL), (1073741824UL), (1342493824UL), (3780942976UL), (1771066496UL), (2189433984UL), (2147483648UL)}, {(1804684571UL), (2106089606UL), (1533056158UL), (2870216110UL), (3618155659UL), (3789871366UL), (4246691682UL), (3667072763UL), (1212241769UL), (3152390668UL), (2973497449UL), (2958641966UL), (2088805328UL), (717518631UL), (2401090860UL), (3606967204UL), (952637656UL), (59827581UL), (1291486682UL), (1499453515UL), (2053994857UL), (563998083UL), (4094000396UL), (1163546899UL), (1003843565UL), (654565639UL), (1070907026UL), (4217851863UL), (426034251UL), (1721352737UL), (278404469UL), (3899800390UL), (1063362170UL), (1162348262UL), (3153545093UL), (3249996223UL), (186674553UL), (2616406148UL), (3137968354UL), (1282784965UL), (1495068058UL), (3033760361UL), (2278144523UL), (3192245769UL), (719586342UL), (2602548287UL), (3386583150UL), (355354345UL), (3252815848UL), (2178056037UL), (2283016801UL), (3005955037UL), (3340254490UL), (802791670UL), (251122316UL), (3705188626UL), (1252262272UL), (3989036796UL), (3527490452UL), (2047131255UL), (1447170583UL), (3373930285UL), (2895037457UL), (209341805UL), (1820357643UL), (3712392731UL), (685796521UL), (1322920440UL), (814388470UL), (1357857147UL), (434430265UL), (2650681935UL), (1371566728UL), (58783716UL), (2273435933UL), (3498513198UL), (792571900UL), (1447808772UL), (3513385860UL), (99175889UL), (1105434360UL), (1484146625UL), (3327194068UL), (242672513UL), (3552105593UL), (1425844616UL), (2871928454UL), (1124633561UL), (607610433UL), (2130018608UL), (1610235673UL), (2844230432UL), (2748082340UL), (994392866UL), (450823250UL), (2912535126UL), (2574390988UL), (3974009252UL), (78696582UL), (649682891UL), (3980917176UL), (3221419689UL), (960695436UL), (729221508UL), (358358845UL), (3392407691UL), (472711005UL), (295914899UL), (3005191796UL), (3078521977UL), (3370011868UL), (509135340UL), (1965939519UL), (2086465877UL), (2457949822UL), (1324152522UL), (762289386UL), (3618693997UL), (233730715UL), (2873984650UL), (31168606UL), (3367142977UL), (2851851305UL), (3251660053UL), (4209768406UL), (3298190175UL), (901235185UL), (1564391510UL), (2352686527UL), (1008150482UL), (578573310UL), (3462447127UL), (2482873876UL), (1790221257UL), (2255375608UL), (2335345651UL), (1381450613UL), (2866805101UL), (1495073163UL), (519905259UL), (3184556473UL), (1076378339UL), (2692926127UL), (970097715UL), (4013407916UL), (4014350363UL), (2476927059UL), (1989070516UL), (2640060069UL), (1987784589UL), (1880989003UL), (3861138803UL), (451743296UL), (1987067871UL), (1975657871UL), (3397816882UL), (2309900530UL), (4108425851UL), (4063867233UL), (3319482186UL), (2621772886UL), (1804684571UL), (2106089606UL), (1533056158UL), (2870216110UL), (611557097UL), (3789871366UL), (4246691682UL), (3667072763UL), (1212241769UL), (3389551988UL), (2973497449UL), (2958641966UL), (2088805328UL), (717518631UL), (2460955430UL), (3606967204UL), (952637656UL), (59827581UL), (1291486682UL), (3531087304UL), (2053994857UL), (563998083UL), (4094000396UL), (1163546899UL), (1242934125UL), (654565639UL), (1070907026UL), (4217851863UL), (426034251UL), (3034416129UL), (278404469UL), (3899800390UL), (1063362170UL), (1162348262UL), (4258714417UL), (3249996223UL), (186674553UL), (2616406148UL), (3137968354UL), (639885806UL), (1495068058UL), (3033760361UL), (2278144523UL), (3192245769UL), (4159910300UL), (2602548287UL), (3386583150UL), (355354345UL), (3252815848UL), (1555885880UL), (2283016801UL), (3005955037UL), (3340254490UL), (802791670UL), (2948774612UL), (3705188626UL), (1252262272UL), (3989036796UL), (3527490452UL), (2107826711UL), (1447170583UL), (3373930285UL), (2895037457UL), (209341805UL), (3763367196UL), (3712392731UL), (685796521UL), (1322920440UL), (814388470UL), (1986168339UL), (434430265UL), (2650681935UL), (1371566728UL), (58783716UL), (1423189187UL), (3498513198UL), (792571900UL), (1447808772UL), (3513385860UL), (315969823UL), (1105434360UL), (1484146625UL), (3327194068UL), (242672513UL), (3336228275UL), (1425844616UL), (2871928454UL), (1124633561UL), (607610433UL), (1762052458UL), (1610235673UL), (2844230432UL), (2748082340UL), (994392866UL), (3771702243UL), (2912535126UL), (2574390988UL), (3974009252UL), (78696582UL), (1626628844UL), (3980917176UL), (3221419689UL), (960695436UL), (729221508UL), (382092233UL), (3392407691UL), (472711005UL), (295914899UL), (3005191796UL), (514297204UL), (3370011868UL), (509135340UL), (1965939519UL), (2086465877UL), (3975975091UL), (1324152522UL), (762289386UL), (3618693997UL), (233730715UL), (455322516UL), (31168606UL), (3367142977UL), (2851851305UL), (3251660053UL), (3952189603UL), (3298190175UL), (901235185UL), (1564391510UL), (2352686527UL), (826181452UL), (578573310UL), (3462447127UL), (2482873876UL), (1790221257UL), (1529242773UL), (2335345651UL), (1381450613UL), (2866805101UL), (1495073163UL), (877718651UL), (3184556473UL), (1076378339UL), (2692926127UL), (970097715UL), (299344245UL), (4014350363UL), (2476927059UL), (1989070516UL), (2640060069UL), (3844531327UL), (1880989003UL), (3861138803UL), (451743296UL), (1987067871UL), (3272848161UL), (3397816882UL), (2309900530UL), (4108425851UL), (4063867233UL), (834288064UL), (2621772886UL), (1804684571UL), (2106089606UL), (1533056158UL), (304865970UL), (611557097UL), (3789871366UL), (4246691682UL), (3667072763UL), (2728206193UL), (3389551988UL), (2973497449UL), (2958641966UL), (2088805328UL), (3895037582UL), (2460955430UL), (3606967204UL), (952637656UL), (59827581UL), (2349212526UL), (3531087304UL), (2053994857UL), (563998083UL), (4094000396UL), (4028900485UL), (1242934125UL), (654565639UL), (1070907026UL), (4217851863UL), (1663452176UL), (3034416129UL), (278404469UL), (3899800390UL), (1063362170UL), (2721441405UL), (4258714417UL), (3249996223UL), (186674553UL), (2616406148UL), (4228837490UL), (639885806UL), (1495068058UL), (3033760361UL), (2278144523UL), (2820661772UL), (4159910300UL), (2602548287UL), (3386583150UL), (355354345UL), (1815256314UL), (1555885880UL), (2283016801UL), (3005955037UL), (3340254490UL), (2166514144UL), (2948774612UL), (3705188626UL), (1252262272UL), (3989036796UL), (751187322UL), (2107826711UL), (1447170583UL), (3373930285UL), (2895037457UL), (2809311944UL), (3763367196UL), (3712392731UL), (685796521UL), (1322920440UL), (936300677UL), (1986168339UL), (434430265UL), (2650681935UL), (1371566728UL), (1308015359UL), (1423189187UL), (3498513198UL), (792571900UL), (1447808772UL), (3065349526UL), (315969823UL), (1105434360UL), (1484146625UL), (3327194068UL), (1038676789UL), (3336228275UL), (1425844616UL), (2871928454UL), (1124633561UL), (2956422231UL), (1762052458UL), (1610235673UL), (2844230432UL), (2748082340UL), (3603862093UL), (3771702243UL), (2912535126UL), (2574390988UL), (3974009252UL), (1691332448UL), (1626628844UL), (3980917176UL), (3221419689UL), (960695436UL), (3120142427UL), (382092233UL), (3392407691UL), (472711005UL), (295914899UL), (4101686983UL), (514297204UL), (3370011868UL), (509135340UL), (1965939519UL), (3015736706UL), (3975975091UL), (1324152522UL), (762289386UL), (3618693997UL), (2395097989UL), (455322516UL), (31168606UL), (3367142977UL), (2851851305UL), (30511955UL), (3952189603UL), (3298190175UL), (901235185UL), (1564391510UL), (2606298633UL), (826181452UL), (578573310UL), (3462447127UL), (2482873876UL), (4159642946UL), (1529242773UL), (2335345651UL), (1381450613UL), (2866805101UL), (1782913669UL), (877718651UL), (3184556473UL), (1076378339UL), (2692926127UL), (1730328819UL), (299344245UL), (4014350363UL), (2476927059UL), (1989070516UL), (1425685614UL), (3844531327UL), (1880989003UL), (3861138803UL), (451743296UL), (889237383UL), (3272848161UL), (3397816882UL), (2309900530UL), (4108425851UL), (1155723231UL), (834288064UL), (2621772886UL), (1804684571UL), (2106089606UL), (2387009004UL), (304865970UL), (611557097UL), (3789871366UL), (4246691682UL), (1405709661UL), (2728206193UL), (3389551988UL), (2973497449UL), (2958641966UL), (3183906006UL), (3895037582UL), (2460955430UL), (3606967204UL), (952637656UL), (1345432763UL), (2349212526UL), (3531087304UL), (2053994857UL), (563998083UL), (3749011414UL), (4028900485UL), (1242934125UL), (654565639UL), (1070907026UL), (1072342672UL), (1663452176UL), (3034416129UL), (278404469UL), (3899800390UL), (3566652188UL), (2721441405UL), (4258714417UL), (3249996223UL), (186674553UL), (4001263143UL), (4228837490UL), (639885806UL), (1495068058UL), (3033760361UL), (4278332644UL), (2820661772UL), (4159910300UL), (2602548287UL), (3386583150UL), (838831089UL), (1815256314UL), (1555885880UL), (2283016801UL), (3005955037UL), (3377397178UL), (2166514144UL), (2948774612UL), (3705188626UL), (1252262272UL), (2414422575UL), (751187322UL), (2107826711UL), (1447170583UL), (3373930285UL), (1253755033UL), (2809311944UL), (3763367196UL), (3712392731UL), (685796521UL), (3238624475UL), (936300677UL), (1986168339UL), (434430265UL), (2650681935UL), (1642290570UL), (1308015359UL), (1423189187UL), (3498513198UL), (792571900UL), (173318140UL), (3065349526UL), (315969823UL), (1105434360UL), (1484146625UL), (4103797777UL), (1038676789UL), (3336228275UL), (1425844616UL), (2871928454UL), (1797745765UL), (2956422231UL), (1762052458UL), (1610235673UL), (2844230432UL), (2180656608UL), (3603862093UL), (3771702243UL), (2912535126UL), (2574390988UL), (1183098390UL), (1691332448UL), (1626628844UL), (3980917176UL), (3221419689UL), (2645203959UL), (3120142427UL), (382092233UL), (3392407691UL), (472711005UL), (1659659070UL), (4101686983UL), (514297204UL), (3370011868UL), (509135340UL), (483888155UL), (3015736706UL), (3975975091UL), (1324152522UL), (762289386UL), (1259948064UL), (2395097989UL), (455322516UL), (31168606UL), (3367142977UL), (339990414UL), (30511955UL), (3952189603UL), (3298190175UL), (901235185UL), (3097920065UL), (2606298633UL), (826181452UL), (578573310UL), (3462447127UL), (1548039839UL), (4159642946UL), (1529242773UL), (2335345651UL), (1381450613UL), (2173079994UL), (1782913669UL), (877718651UL), (3184556473UL), (1076378339UL), (1570275057UL), (1730328819UL), (299344245UL), (4014350363UL), (2476927059UL), (1845882881UL), (1425685614UL), (3844531327UL), (1880989003UL), (3861138803UL), (1322409081UL), (889237383UL), (3272848161UL), (3397816882UL), (2309900530UL), (3505447982UL), (3430136873UL), (1319796589UL), (4202423979UL), (3184732284UL), (2910356648UL), (2534615223UL), (3854465731UL), (768821792UL), (2205052576UL), (1348983754UL), (1300250188UL), (2919181738UL), (2520178732UL), (3967243685UL), (2646012002UL), (1784678658UL), (741302051UL), (3464753547UL), (194213376UL), (1482799064UL), (3009673860UL), (680824208UL), (741966796UL), (2381283369UL), (3022877171UL), (1619439814UL), (3961433610UL), (1331297670UL), (1100110820UL), (1311672539UL), (1122110615UL), (4056004850UL), (3413790176UL), (3148768822UL), (1242592694UL), (2925975727UL), (1879285134UL), (334328879UL), (1318235222UL), (3140739559UL), (401691770UL), (3604288404UL), (3686496908UL), (770670945UL), (199139043UL), (2092710473UL), (3914528993UL), (700991333UL), (2375775811UL), (858137308UL), (3490050165UL), (2389078291UL), (1615607459UL), (3027969809UL), (820012549UL), (2085659484UL), (2654485136UL), (2630408646UL), (196481396UL), (1119673274UL), (1026209692UL), (726501622UL), (2940737143UL), (3559571163UL), (2288027726UL), (1039212708UL), (929664536UL), (1061981465UL), (186058675UL), (3537656152UL), (844176796UL), (2996217992UL), (1545798611UL), (3031020656UL), (2248030435UL), (1665857580UL), (2905758082UL), (1269201312UL), (3031275084UL), (4034872841UL), (983632400UL), (4188503190UL), (757119675UL), (2105920865UL), (4281032819UL), (2917801076UL), (3900010013UL), (3910997169UL), (1729751422UL), (562313247UL), (3070846353UL), (2564238664UL), (4050540186UL), (4258833501UL), (2270666053UL), (2207128401UL), (2990540001UL), (797768898UL), (2288390225UL), (3230323685UL), (1974727440UL), (3327301426UL), (289857826UL), (3565889868UL), (2791014422UL), (2021097820UL), (3350378271UL), (3673707591UL), (2610067927UL), (4255789547UL), (2682856590UL), (12563128UL), (1397542366UL), (237149400UL), (2233707508UL), (3875573245UL), (2097374144UL), (175320773UL), (4103445984UL), (4089284323UL), (3610168130UL), (3084915964UL), (680145366UL), (2571684685UL), (1132894909UL), (104640024UL), (193765521UL), (2338202907UL), (895271448UL), (11499099UL), (1798066417UL), (1297412626UL), (2511347162UL), (3140535007UL), (2129963538UL), (700683199UL), (2609700278UL), (2953463279UL), (2290844145UL), (1871316353UL), (3993801787UL), (2219413182UL), (2954453701UL), (231283580UL), (1375331115UL), (207723994UL), (1799562537UL), (2056553564UL), (2513609799UL), (3542459627UL), (3173012714UL), (3923404932UL), (217877755UL), (2095124912UL), (192024370UL), (1168134987UL), (1889598668UL), (3014873069UL), (2033573343UL)}, {(3465348660UL), (3623545008UL), (3505902593UL), (838034830UL), (1338018789UL), (2595329276UL), (3367746385UL), (3197935201UL), (1439351946UL), (3585085571UL), (4165798087UL), (3634792639UL), (2359485974UL), (2772582925UL), (1110186203UL), (3771562484UL), (1508694157UL), (1564641206UL), (2801985736UL), (2446107936UL), (3849126897UL), (1842973671UL), (944408104UL), (2624631280UL), (2729080685UL), (3737368614UL), (858809173UL), (2289802345UL), (2428186575UL), (3114742765UL), (716011303UL), (3443810690UL), (814132610UL), (517432787UL), (614445393UL), (2930433345UL), (291178098UL), (2117644502UL), (2749446703UL), (311745701UL), (365684723UL), (1705418876UL), (2213749318UL), (4011417220UL), (1842575651UL), (988348831UL), (94258998UL), (2771150272UL), (498058526UL), (1344827813UL), (2961955291UL), (262703473UL), (1404034822UL), (1566595865UL), (2522381203UL), (1706522206UL), (1203054806UL), (1273801539UL), (2070583465UL), (3913449936UL), (3231505231UL), (619636751UL), (3746997351UL), (4103027837UL), (1205468203UL), (3355878253UL), (3433356888UL), (107785753UL), (2779092609UL), (1869691566UL), (2555219983UL), (903319808UL), (3273374169UL), (2538926990UL), (979533870UL), (1356500860UL), (1661983738UL), (1380761625UL), (2919458459UL), (1041142798UL), (1430817627UL), (517007606UL), (1421570516UL), (2371447300UL), (2985632691UL), (3684889351UL), (3873926653UL), (788770697UL), (1854750277UL), (209332297UL), (1137299679UL), (848527832UL), (3850486924UL), (4179307312UL), (2764470693UL), (1353191605UL), (4166891919UL), (2074703841UL), (3373997532UL), (2013528640UL), (701389744UL), (841917592UL), (2065742268UL), (2721848192UL), (2566956680UL), (3122896007UL), (1090761479UL), (921859028UL), (4086736376UL), (1837462309UL), (2579826431UL), (2436217134UL), (839037727UL), (1072086642UL), (614518622UL), (3764758228UL), (1501128342UL), (3669108708UL), (1601407381UL), (2899014005UL), (3268308948UL), (3337564231UL), (1986911578UL), (3379194930UL), (1950365753UL), (2098537451UL), (51515980UL), (1176526086UL), (3213391582UL), (1059745735UL), (2273586703UL), (376085505UL), (1493749800UL), (3970342143UL), (1620925244UL), (2165301314UL), (2332030190UL), (1864098798UL), (276747442UL), (2776569227UL), (2992780663UL), (3027279789UL), (1074555384UL), (3481518659UL), (2499703783UL), (661805703UL), (3782305562UL), (9186074UL), (2357407210UL), (2355922343UL), (2024733363UL), (485434612UL), (862379913UL), (1029706268UL), (1512726310UL), (3834948354UL), (1435892840UL), (3297980694UL), (2831553800UL), (2111416471UL), (711321697UL), (3465348660UL), (3623545008UL), (3505902593UL), (838034830UL), (1553436793UL), (2595329276UL), (3367746385UL), (3197935201UL), (1439351946UL), (3198044157UL), (4165798087UL), (3634792639UL), (2359485974UL), (2772582925UL), (836042976UL), (3771562484UL), (1508694157UL), (1564641206UL), (2801985736UL), (1190371491UL), (3849126897UL), (1842973671UL), (944408104UL), (2624631280UL), (410746791UL), (3737368614UL), (858809173UL), (2289802345UL), (2428186575UL), (1542325976UL), (716011303UL), (3443810690UL), (814132610UL), (517432787UL), (1649301063UL), (2930433345UL), (291178098UL), (2117644502UL), (2749446703UL), (3955511579UL), (365684723UL), (1705418876UL), (2213749318UL), (4011417220UL), (2753632862UL), (988348831UL), (94258998UL), (2771150272UL), (498058526UL), (3314106168UL), (2961955291UL), (262703473UL), (1404034822UL), (1566595865UL), (3590367097UL), (1706522206UL), (1203054806UL), (1273801539UL), (2070583465UL), (2340683261UL), (3231505231UL), (619636751UL), (3746997351UL), (4103027837UL), (2785398766UL), (3355878253UL), (3433356888UL), (107785753UL), (2779092609UL), (1608451840UL), (2555219983UL), (903319808UL), (3273374169UL), (2538926990UL), (645164419UL), (1356500860UL), (1661983738UL), (1380761625UL), (2919458459UL), (2260224548UL), (1430817627UL), (517007606UL), (1421570516UL), (2371447300UL), (1636004496UL), (3684889351UL), (3873926653UL), (788770697UL), (1854750277UL), (1345251011UL), (1137299679UL), (848527832UL), (3850486924UL), (4179307312UL), (3576574608UL), (1353191605UL), (4166891919UL), (2074703841UL), (3373997532UL), (183447754UL), (701389744UL), (841917592UL), (2065742268UL), (2721848192UL), (2109289891UL), (3122896007UL), (1090761479UL), (921859028UL), (4086736376UL), (2212730874UL), (2579826431UL), (2436217134UL), (839037727UL), (1072086642UL), (55934784UL), (3764758228UL), (1501128342UL), (3669108708UL), (1601407381UL), (516550987UL), (3268308948UL), (3337564231UL), (1986911578UL), (3379194930UL), (3973484473UL), (2098537451UL), (51515980UL), (1176526086UL), (3213391582UL), (4251661633UL), (2273586703UL), (376085505UL), (1493749800UL), (3970342143UL), (3190791788UL), (2165301314UL), (2332030190UL), (1864098798UL), (276747442UL), (2991976613UL), (2992780663UL), (3027279789UL), (1074555384UL), (3481518659UL), (1399789494UL), (661805703UL), (3782305562UL), (9186074UL), (2357407210UL), (1942736967UL), (2024733363UL), (485434612UL), (862379913UL), (1029706268UL), (4122704494UL), (3834948354UL), (1435892840UL), (3297980694UL), (2831553800UL), (1210092654UL), (711321697UL), (3465348660UL), (3623545008UL), (3505902593UL), (3443231198UL), (1553436793UL), (2595329276UL), (3367746385UL), (3197935201UL), (1304974987UL), (3198044157UL), (4165798087UL), (3634792639UL), (2359485974UL), (3518323362UL), (836042976UL), (3771562484UL), (1508694157UL), (1564641206UL), (3577633375UL), (1190371491UL), (3849126897UL), (1842973671UL), (944408104UL), (1854555112UL), (410746791UL), (3737368614UL), (858809173UL), (2289802345UL), (3622671731UL), (1542325976UL), (716011303UL), (3443810690UL), (814132610UL), (296197011UL), (1649301063UL), (2930433345UL), (291178098UL), (2117644502UL), (1056271538UL), (3955511579UL), (365684723UL), (1705418876UL), (2213749318UL), (1258535671UL), (2753632862UL), (988348831UL), (94258998UL), (2771150272UL), (3669902097UL), (3314106168UL), (2961955291UL), (262703473UL), (1404034822UL), (1654433938UL), (3590367097UL), (1706522206UL), (1203054806UL), (1273801539UL), (2448138887UL), (2340683261UL), (3231505231UL), (619636751UL), (3746997351UL), (1454088394UL), (2785398766UL), (3355878253UL), (3433356888UL), (107785753UL), (689323470UL), (1608451840UL), (2555219983UL), (903319808UL), (3273374169UL), (1603842392UL), (645164419UL), (1356500860UL), (1661983738UL), (1380761625UL), (2814639423UL), (2260224548UL), (1430817627UL), (517007606UL), (1421570516UL), (1938805701UL), (1636004496UL), (3684889351UL), (3873926653UL), (788770697UL), (4238900666UL), (1345251011UL), (1137299679UL), (848527832UL), (3850486924UL), (108793827UL), (3576574608UL), (1353191605UL), (4166891919UL), (2074703841UL), (3780897861UL), (183447754UL), (701389744UL), (841917592UL), (2065742268UL), (3036602746UL), (2109289891UL), (3122896007UL), (1090761479UL), (921859028UL), (3499985398UL), (2212730874UL), (2579826431UL), (2436217134UL), (839037727UL), (3520354700UL), (55934784UL), (3764758228UL), (1501128342UL), (3669108708UL), (1601010847UL), (516550987UL), (3268308948UL), (3337564231UL), (1986911578UL), (2704241781UL), (3973484473UL), (2098537451UL), (51515980UL), (1176526086UL), (3602010532UL), (4251661633UL), (2273586703UL), (376085505UL), (1493749800UL), (2922957328UL), (3190791788UL), (2165301314UL), (2332030190UL), (1864098798UL), (1649666443UL), (2991976613UL), (2992780663UL), (3027279789UL), (1074555384UL), (2848531519UL), (1399789494UL), (661805703UL), (3782305562UL), (9186074UL), (320781315UL), (1942736967UL), (2024733363UL), (485434612UL), (862379913UL), (3598892066UL), (4122704494UL), (3834948354UL), (1435892840UL), (3297980694UL), (545184652UL), (1210092654UL), (711321697UL), (3465348660UL), (3623545008UL), (1173753045UL), (3443231198UL), (1553436793UL), (2595329276UL), (3367746385UL), (2444634476UL), (1304974987UL), (3198044157UL), (4165798087UL), (3634792639UL), (1837035806UL), (3518323362UL), (836042976UL), (3771562484UL), (1508694157UL), (2899021294UL), (3577633375UL), (1190371491UL), (3849126897UL), (1842973671UL), (1614215215UL), (1854555112UL), (410746791UL), (3737368614UL), (858809173UL), (525745365UL), (3622671731UL), (1542325976UL), (716011303UL), (3443810690UL), (566299749UL), (296197011UL), (1649301063UL), (2930433345UL), (291178098UL), (1987532525UL), (1056271538UL), (3955511579UL), (365684723UL), (1705418876UL), (2321222760UL), (1258535671UL), (2753632862UL), (988348831UL), (94258998UL), (2986060366UL), (3669902097UL), (3314106168UL), (2961955291UL), (262703473UL), (604452796UL), (1654433938UL), (3590367097UL), (1706522206UL), (1203054806UL), (1894894069UL), (2448138887UL), (2340683261UL), (3231505231UL), (619636751UL), (6680729UL), (1454088394UL), (2785398766UL), (3355878253UL), (3433356888UL), (2025591660UL), (689323470UL), (1608451840UL), (2555219983UL), (903319808UL), (3430384385UL), (1603842392UL), (645164419UL), (1356500860UL), (1661983738UL), (2108736152UL), (2814639423UL), (2260224548UL), (1430817627UL), (517007606UL), (2973658959UL), (1938805701UL), (1636004496UL), (3684889351UL), (3873926653UL), (2283691941UL), (4238900666UL), (1345251011UL), (1137299679UL), (848527832UL), (45551112UL), (108793827UL), (3576574608UL), (1353191605UL), (4166891919UL), (3776615962UL), (3780897861UL), (183447754UL), (701389744UL), (841917592UL), (3830639316UL), (3036602746UL), (2109289891UL), (3122896007UL), (1090761479UL), (1931255897UL), (3499985398UL), (2212730874UL), (2579826431UL), (2436217134UL), (3272166055UL), (3520354700UL), (55934784UL), (3764758228UL), (1501128342UL), (1567864246UL), (1601010847UL), (516550987UL), (3268308948UL), (3337564231UL), (3918802424UL), (2704241781UL), (3973484473UL), (2098537451UL), (51515980UL), (3551394489UL), (3602010532UL), (4251661633UL), (2273586703UL), (376085505UL), (885459498UL), (2922957328UL), (3190791788UL), (2165301314UL), (2332030190UL), (3197056515UL), (1649666443UL), (2991976613UL), (2992780663UL), (3027279789UL), (2385348906UL), (2848531519UL), (1399789494UL), (661805703UL), (3782305562UL), (2163075465UL), (320781315UL), (1942736967UL), (2024733363UL), (485434612UL), (2680597981UL), (3598892066UL), (4122704494UL), (3834948354UL), (1435892840UL), (2499644163UL), (2704575422UL), (2579557838UL), (673530532UL), (493730767UL), (1124557747UL), (1908629439UL), (2821949504UL), (1743112513UL), (2849457841UL), (2344409314UL), (3479159262UL), (4260973770UL), (2991970754UL), (3812641863UL), (2229319917UL), (2466968521UL), (1766353737UL), (3216591612UL), (2113272648UL), (364370737UL), (1893001758UL), (2608875275UL), (4224057183UL), (3546705413UL), (1999778009UL), (348872225UL), (2470564216UL), (1417878284UL), (2709790112UL), (3579129936UL), (2137971615UL), (4046639861UL), (2841156930UL), (391544737UL), (2056567354UL), (737657378UL), (3877904725UL), (578930752UL), (1759172471UL), (3383278785UL), (1047197514UL), (649468151UL), (3452867243UL), (1792089520UL), (63936215UL), (3909143729UL), (3753489875UL), (734314122UL), (2490530916UL), (3043874586UL), (1504812057UL), (59001199UL), (2493748676UL), (2552438622UL), (1889694845UL), (3715397860UL), (2817245010UL), (3841049206UL), (816106718UL), (2176130406UL), (640254735UL), (12376903UL), (3000264936UL), (3304116079UL), (1620334094UL), (2109391765UL), (1348210951UL), (2237645681UL), (1207768272UL), (1562894669UL), (2156631655UL), (1387193235UL), (3154858817UL), (633510901UL), (2312190757UL), (402878244UL), (2501565021UL), (2984409334UL), (4167491216UL), (3614267292UL), (3078552271UL), (971722322UL), (3065543880UL), (2307584190UL), (491480322UL), (2068673112UL), (1929780632UL), (178549964UL), (983979983UL), (2769314886UL), (4214442042UL), (2977609682UL), (25450683UL), (3075212658UL), (1571149568UL), (3531670561UL), (42782504UL), (425601306UL), (428715214UL), (497250251UL), (693520802UL), (166426814UL), (1786382125UL), (2712003995UL), (3610802197UL), (2076490757UL), (404822980UL), (3953184772UL), (1655231947UL), (3594351577UL), (3068232274UL), (3771730346UL), (4110519574UL), (3534704897UL), (2375277865UL), (3597780202UL), (3472676002UL), (1350276449UL), (3218248239UL), (3589255283UL), (3253132633UL), (1769885529UL), (3792812294UL), (120332643UL), (1219374788UL), (3608889019UL), (2386099811UL), (858495304UL), (1284785543UL), (331370962UL), (2259419662UL), (2519864134UL), (3194739432UL), (2669074511UL), (2565559140UL), (3378072004UL), (2647801475UL), (265068954UL), (1464416963UL), (1232787612UL), (4160089759UL), (2510685972UL), (670300081UL), (2509357766UL), (1981891975UL), (4161588397UL), (1371924626UL), (44760868UL), (634955171UL), (1187096933UL), (3324788972UL), (3576888559UL), (2801347752UL), (3730298395UL), (1702170762UL), (4206083415UL), (741409141UL), (3649731355UL), (1025429529UL)}, {(91444490UL), (628576944UL), (4069219862UL), (2253058925UL), (492354082UL), (1191182242UL), (1565180119UL), (2257613723UL), (456055162UL), (605712223UL), (953365104UL), (3104638527UL), (1133984729UL), (2662828416UL), (2134948274UL), (1921384447UL), (843719355UL), (588432962UL), (1734575434UL), (2924140067UL), (483396548UL), (3848838894UL), (3155476556UL), (1760928304UL), (4168059840UL), (3279827269UL), (2644461735UL), (4168565656UL), (3951563569UL), (1276805504UL), (1708974143UL), (1878547888UL), (3465220024UL), (3062086782UL), (2801401651UL), (1510428126UL), (716404149UL), (1646021208UL), (3534932385UL), (1186585561UL), (651997355UL), (282914223UL), (352224857UL), (3764407517UL), (1059868753UL), (1971798134UL), (978904005UL), (976413661UL), (4039544152UL), (498989693UL), (2565125471UL), (2782642813UL), (3537961025UL), (1194967362UL), (169217024UL), (3491609UL), (1319592872UL), (1630206561UL), (2497130840UL), (1685008996UL), (2828944016UL), (3301346775UL), (2893072371UL), (2606559798UL), (4026138031UL), (2664450619UL), (691091062UL), (1079640113UL), (1417637732UL), (4081852209UL), (2197910648UL), (2310382370UL), (1000957047UL), (959936499UL), (2844551811UL), (2272766890UL), (31122394UL), (2742925483UL), (1121884686UL), (57929089UL), (2468361281UL), (2982007782UL), (2371576893UL), (177782593UL), (3603584577UL), (672057044UL), (2108452841UL), (1671338057UL), (3386908223UL), (1243029765UL), (805157552UL), (1271858417UL), (1621249501UL), (1804851492UL), (1321010403UL), (751773221UL), (1517221627UL), (822709871UL), (104533154UL), (3578182264UL), (640541709UL), (421086624UL), (4233576392UL), (3729339369UL), (197460644UL), (773140636UL), (2158026018UL), (1756785611UL), (4011575991UL), (3569445500UL), (736117181UL), (2456162322UL), (1168189787UL), (3651312675UL), (1070291988UL), (268231205UL), (541474497UL), (3316168972UL), (3546990856UL), (830417208UL), (725960194UL), (2044207227UL), (3188997938UL), (2383298579UL), (3350316374UL), (3575011225UL), (1553111865UL), (1285013027UL), (749371711UL), (766611716UL), (598195098UL), (2139882719UL), (2062405428UL), (3634702446UL), (3015263295UL), (223311969UL), (2622859522UL), (3888492701UL), (2955257225UL), (582625650UL), (3563756446UL), (2886083960UL), (1907546514UL), (454650902UL), (3287277541UL), (625828138UL), (2991888140UL), (1935326370UL), (4031152256UL), (702881509UL), (1427632724UL), (1345475301UL), (2577560804UL), (2858595147UL), (2533191188UL), (185662179UL), (536505093UL), (3747894147UL), (111551030UL), (370373207UL), (2293908590UL), (91444490UL), (628576944UL), (4069219862UL), (2253058925UL), (1671484924UL), (1191182242UL), (1565180119UL), (2257613723UL), (456055162UL), (3411094744UL), (953365104UL), (3104638527UL), (1133984729UL), (2662828416UL), (2000630022UL), (1921384447UL), (843719355UL), (588432962UL), (1734575434UL), (3293926122UL), (483396548UL), (3848838894UL), (3155476556UL), (1760928304UL), (146876953UL), (3279827269UL), (2644461735UL), (4168565656UL), (3951563569UL), (3976156700UL), (1708974143UL), (1878547888UL), (3465220024UL), (3062086782UL), (1999154400UL), (1510428126UL), (716404149UL), (1646021208UL), (3534932385UL), (2479551429UL), (651997355UL), (282914223UL), (352224857UL), (3764407517UL), (1275979651UL), (1971798134UL), (978904005UL), (976413661UL), (4039544152UL), (300654823UL), (2565125471UL), (2782642813UL), (3537961025UL), (1194967362UL), (3123973648UL), (3491609UL), (1319592872UL), (1630206561UL), (2497130840UL), (1437913158UL), (2828944016UL), (3301346775UL), (2893072371UL), (2606559798UL), (2153172585UL), (2664450619UL), (691091062UL), (1079640113UL), (1417637732UL), (17137237UL), (2197910648UL), (2310382370UL), (1000957047UL), (959936499UL), (802137134UL), (2272766890UL), (31122394UL), (2742925483UL), (1121884686UL), (3909775167UL), (2468361281UL), (2982007782UL), (2371576893UL), (177782593UL), (3319492525UL), (672057044UL), (2108452841UL), (1671338057UL), (3386908223UL), (1878151473UL), (805157552UL), (1271858417UL), (1621249501UL), (1804851492UL), (3215921223UL), (751773221UL), (1517221627UL), (822709871UL), (104533154UL), (361845001UL), (640541709UL), (421086624UL), (4233576392UL), (3729339369UL), (2655936801UL), (773140636UL), (2158026018UL), (1756785611UL), (4011575991UL), (587202971UL), (736117181UL), (2456162322UL), (1168189787UL), (3651312675UL), (2517883370UL), (268231205UL), (541474497UL), (3316168972UL), (3546990856UL), (2037251305UL), (725960194UL), (2044207227UL), (3188997938UL), (2383298579UL), (2665008587UL), (3575011225UL), (1553111865UL), (1285013027UL), (749371711UL), (2163964019UL), (598195098UL), (2139882719UL), (2062405428UL), (3634702446UL), (2788202059UL), (223311969UL), (2622859522UL), (3888492701UL), (2955257225UL), (740986174UL), (3563756446UL), (2886083960UL), (1907546514UL), (454650902UL), (2426323587UL), (625828138UL), (2991888140UL), (1935326370UL), (4031152256UL), (1831149435UL), (1427632724UL), (1345475301UL), (2577560804UL), (2858595147UL), (3977153945UL), (185662179UL), (536505093UL), (3747894147UL), (111551030UL), (4131587422UL), (2293908590UL), (91444490UL), (628576944UL), (4069219862UL), (2408189350UL), (1671484924UL), (1191182242UL), (1565180119UL), (2257613723UL), (1338069254UL), (3411094744UL), (953365104UL), (3104638527UL), (1133984729UL), (631497759UL), (2000630022UL), (1921384447UL), (843719355UL), (588432962UL), (3280318959UL), (3293926122UL), (483396548UL), (3848838894UL), (3155476556UL), (1777918163UL), (146876953UL), (3279827269UL), (2644461735UL), (4168565656UL), (2786264663UL), (3976156700UL), (1708974143UL), (1878547888UL), (3465220024UL), (2793923820UL), (1999154400UL), (1510428126UL), (716404149UL), (1646021208UL), (3102243824UL), (2479551429UL), (651997355UL), (282914223UL), (352224857UL), (3767702588UL), (1275979651UL), (1971798134UL), (978904005UL), (976413661UL), (1951622548UL), (300654823UL), (2565125471UL), (2782642813UL), (3537961025UL), (2186817324UL), (3123973648UL), (3491609UL), (1319592872UL), (1630206561UL), (1075424534UL), (1437913158UL), (2828944016UL), (3301346775UL), (2893072371UL), (207992406UL), (2153172585UL), (2664450619UL), (691091062UL), (1079640113UL), (3114255216UL), (17137237UL), (2197910648UL), (2310382370UL), (1000957047UL), (2548008553UL), (802137134UL), (2272766890UL), (31122394UL), (2742925483UL), (4069482373UL), (3909775167UL), (2468361281UL), (2982007782UL), (2371576893UL), (2807823912UL), (3319492525UL), (672057044UL), (2108452841UL), (1671338057UL), (12831353UL), (1878151473UL), (805157552UL), (1271858417UL), (1621249501UL), (461887094UL), (3215921223UL), (751773221UL), (1517221627UL), (822709871UL), (1317394918UL), (361845001UL), (640541709UL), (421086624UL), (4233576392UL), (3385587450UL), (2655936801UL), (773140636UL), (2158026018UL), (1756785611UL), (1475601973UL), (587202971UL), (736117181UL), (2456162322UL), (1168189787UL), (911455077UL), (2517883370UL), (268231205UL), (541474497UL), (3316168972UL), (1500275507UL), (2037251305UL), (725960194UL), (2044207227UL), (3188997938UL), (2036633808UL), (2665008587UL), (3575011225UL), (1553111865UL), (1285013027UL), (87868216UL), (2163964019UL), (598195098UL), (2139882719UL), (2062405428UL), (517907301UL), (2788202059UL), (223311969UL), (2622859522UL), (3888492701UL), (3926046234UL), (740986174UL), (3563756446UL), (2886083960UL), (1907546514UL), (1911066215UL), (2426323587UL), (625828138UL), (2991888140UL), (1935326370UL), (2031853435UL), (1831149435UL), (1427632724UL), (1345475301UL), (2577560804UL), (3509674153UL), (3977153945UL), (185662179UL), (536505093UL), (3747894147UL), (1711714600UL), (4131587422UL), (2293908590UL), (91444490UL), (628576944UL), (3370678255UL), (2408189350UL), (1671484924UL), (1191182242UL), (1565180119UL), (3786239592UL), (1338069254UL), (3411094744UL), (953365104UL), (3104638527UL), (3659647225UL), (631497759UL), (2000630022UL), (1921384447UL), (843719355UL), (3364831282UL), (3280318959UL), (3293926122UL), (483396548UL), (3848838894UL), (3131266478UL), (1777918163UL), (146876953UL), (3279827269UL), (2644461735UL), (4156372383UL), (2786264663UL), (3976156700UL), (1708974143UL), (1878547888UL), (2168041590UL), (2793923820UL), (1999154400UL), (1510428126UL), (716404149UL), (3392113666UL), (3102243824UL), (2479551429UL), (651997355UL), (282914223UL), (2085613514UL), (3767702588UL), (1275979651UL), (1971798134UL), (978904005UL), (503506384UL), (1951622548UL), (300654823UL), (2565125471UL), (2782642813UL), (1458431750UL), (2186817324UL), (3123973648UL), (3491609UL), (1319592872UL), (452433679UL), (1075424534UL), (1437913158UL), (2828944016UL), (3301346775UL), (2333281307UL), (207992406UL), (2153172585UL), (2664450619UL), (691091062UL), (3553502652UL), (3114255216UL), (17137237UL), (2197910648UL), (2310382370UL), (3153689868UL), (2548008553UL), (802137134UL), (2272766890UL), (31122394UL), (468580641UL), (4069482373UL), (3909775167UL), (2468361281UL), (2982007782UL), (1445286890UL), (2807823912UL), (3319492525UL), (672057044UL), (2108452841UL), (1755577669UL), (12831353UL), (1878151473UL), (805157552UL), (1271858417UL), (2623540912UL), (461887094UL), (3215921223UL), (751773221UL), (1517221627UL), (3922191946UL), (1317394918UL), (361845001UL), (640541709UL), (421086624UL), (2173849516UL), (3385587450UL), (2655936801UL), (773140636UL), (2158026018UL), (1085377158UL), (1475601973UL), (587202971UL), (736117181UL), (2456162322UL), (2158960374UL), (911455077UL), (2517883370UL), (268231205UL), (541474497UL), (943191315UL), (1500275507UL), (2037251305UL), (725960194UL), (2044207227UL), (2481150802UL), (2036633808UL), (2665008587UL), (3575011225UL), (1553111865UL), (2301231777UL), (87868216UL), (2163964019UL), (598195098UL), (2139882719UL), (2007840238UL), (517907301UL), (2788202059UL), (223311969UL), (2622859522UL), (151920263UL), (3926046234UL), (740986174UL), (3563756446UL), (2886083960UL), (1338937928UL), (1911066215UL), (2426323587UL), (625828138UL), (2991888140UL), (2652286195UL), (2031853435UL), (1831149435UL), (1427632724UL), (1345475301UL), (289801789UL), (3509674153UL), (3977153945UL), (185662179UL), (536505093UL), (2727322952UL), (3980498348UL), (2529622213UL), (1903052964UL), (3564714651UL), (2281240568UL), (533384122UL), (277613480UL), (1815540358UL), (282763841UL), (3669112623UL), (2572859425UL), (195220178UL), (1210883545UL), (2359703600UL), (1187537824UL), (675732974UL), (325036095UL), (708091465UL), (2556854604UL), (701006284UL), (2378459191UL), (1863513103UL), (2690918197UL), (4237307694UL), (1356483501UL), (2160905652UL), (521809106UL), (974368613UL), (3136010957UL), (2722488678UL), (3711515637UL), (2296341459UL), (4233729945UL), (1196247571UL), (3031398071UL), (515543502UL), (1314129776UL), (3235373306UL), (1303165859UL), (1820568009UL), (559099351UL), (186876368UL), (1076102111UL), (1218809551UL), (1790301111UL), (4130210229UL), (768125358UL), (1132864749UL), (4262563773UL), (2294411020UL), (4092943985UL), (2558108246UL), (3737664949UL), (2219923393UL), (724326159UL), (4134105682UL), (4188752746UL), (3615233671UL), (1526018731UL), (2281637916UL), (2459490295UL), (3637342666UL), (777862587UL), (39962002UL), (3772005832UL), (997473319UL), (574843584UL), (3356551974UL), (1265234427UL), (1698059437UL), (534747571UL), (1465532164UL), (3263029035UL), (534512444UL), (2343092827UL), (2375685652UL), (2497926141UL), (2377933621UL), (2212335180UL), (261114084UL), (172755755UL), (2737085495UL), (2225257145UL), (148605658UL), (1353911796UL), (357753009UL), (1778732943UL), (497635558UL), (4136467976UL), (2837964962UL), (4045039047UL), (2485296762UL), (1587587183UL), (4042904168UL), (3184240963UL), (2393293696UL), (915444966UL), (2299938515UL), (3351580749UL), (506575598UL), (1541916825UL), (3465300401UL), (525927458UL), (681152801UL), (331660975UL), (3624685846UL), (2994172100UL), (3274369082UL), (3638287602UL), (815689760UL), (1710961092UL), (2775607076UL), (2175058103UL), (3252688367UL), (2936890483UL), (2746319120UL), (2736754UL), (1646031035UL), (2448701214UL), (2886833213UL), (3689830606UL), (3292798106UL), (300773646UL), (3125160783UL), (1247453205UL), (2746275624UL), (4011063775UL), (904135764UL), (876847374UL), (366267234UL), (2541269205UL), (131376648UL), (1805948133UL), (3383589530UL), (2350119829UL), (2513170439UL), (4096158499UL), (4229211520UL), (2992048272UL), (1338522080UL), (1187391335UL), (2898563453UL), (2163088451UL), (1417971677UL), (2047421551UL), (902282791UL), (1143943232UL), (3568431811UL), (4059861993UL), (193362198UL), (2509297125UL), (3968551582UL), (2175686117UL), (3568936881UL), (1853177468UL), (2134063169UL), (2919389416UL), (1124914545UL), (1209806738UL)}, {(1199972651UL), (1035834631UL), (3177798370UL), (860834162UL), (3741677748UL), (3780327829UL), (1693730265UL), (1643429511UL), (559568669UL), (2758650294UL), (647308222UL), (3901603996UL), (1778653821UL), (3618523672UL), (2154201067UL), (4261179460UL), (3285764480UL), (3334002738UL), (3215795953UL), (91368462UL), (1883994950UL), (1506873376UL), (1527780962UL), (4046354597UL), (4081676034UL), (2389066602UL), (1574939945UL), (427845396UL), (2714836263UL), (1259019491UL), (2493238133UL), (2584034689UL), (3151382431UL), (2171033919UL), (176883719UL), (2031844862UL), (1272380790UL), (1298975901UL), (4087222847UL), (1524000054UL), (311436877UL), (3627785554UL), (1889491722UL), (2938069193UL), (2771940687UL), (2756955968UL), (4289348777UL), (263514583UL), (887207028UL), (3522902525UL), (2273246349UL), (835377715UL), (2897243319UL), (204645450UL), (1775911983UL), (639470242UL), (2856296318UL), (3032942383UL), (2845501282UL), (1979082575UL), (202834023UL), (1876303820UL), (1434703409UL), (4240524132UL), (848853780UL), (4188621628UL), (928095314UL), (876412914UL), (3446576392UL), (3235688990UL), (4021419931UL), (2483628986UL), (3155781890UL), (399997246UL), (1642535200UL), (3872575068UL), (1577956550UL), (3606228634UL), (609914462UL), (653194726UL), (4048067248UL), (2500767965UL), (1125167825UL), (3707628088UL), (1819135158UL), (1875618971UL), (3865851141UL), (328215079UL), (1695889194UL), (2040280471UL), (3384684457UL), (2540504961UL), (293050253UL), (525570078UL), (2655676443UL), (1392199429UL), (3370444585UL), (1937915855UL), (2229636250UL), (247937142UL), (2534538765UL), (365841057UL), (2449431033UL), (2456532429UL), (101910696UL), (1247069485UL), (1523958293UL), (2473285670UL), (473709728UL), (3026667113UL), (2071968844UL), (324025193UL), (423064436UL), (3870800061UL), (3977393138UL), (3632553233UL), (352757977UL), (1584833348UL), (3173248650UL), (1159857686UL), (1501841977UL), (1751860798UL), (617281070UL), (1958012761UL), (4031667102UL), (3232142321UL), (3087428595UL), (2380824676UL), (1194087757UL), (1542961747UL), (4163350364UL), (1721646249UL), (1672791861UL), (2900511710UL), (24973500UL), (1705444176UL), (713642505UL), (3017719513UL), (2090715200UL), (3521434070UL), (37117223UL), (1948295454UL), (3055840561UL), (3476120789UL), (3994249388UL), (527899063UL), (4285770666UL), (1075524023UL), (2594223535UL), (392943522UL), (171012646UL), (3515750082UL), (3414659054UL), (3501852926UL), (1493283737UL), (2662104279UL), (2033464928UL), (90134967UL), (363058647UL), (3289266998UL), (2470752727UL), (1199972651UL), (1035834631UL), (3177798370UL), (860834162UL), (1791097822UL), (3780327829UL), (1693730265UL), (1643429511UL), (559568669UL), (3503319486UL), (647308222UL), (3901603996UL), (1778653821UL), (3618523672UL), (4294594427UL), (4261179460UL), (3285764480UL), (3334002738UL), (3215795953UL), (212518363UL), (1883994950UL), (1506873376UL), (1527780962UL), (4046354597UL), (2398655600UL), (2389066602UL), (1574939945UL), (427845396UL), (2714836263UL), (2744363872UL), (2493238133UL), (2584034689UL), (3151382431UL), (2171033919UL), (2787053497UL), (2031844862UL), (1272380790UL), (1298975901UL), (4087222847UL), (2342953154UL), (311436877UL), (3627785554UL), (1889491722UL), (2938069193UL), (2026656505UL), (2756955968UL), (4289348777UL), (263514583UL), (887207028UL), (2097276163UL), (2273246349UL), (835377715UL), (2897243319UL), (204645450UL), (4233399907UL), (639470242UL), (2856296318UL), (3032942383UL), (2845501282UL), (28260330UL), (202834023UL), (1876303820UL), (1434703409UL), (4240524132UL), (2455670466UL), (4188621628UL), (928095314UL), (876412914UL), (3446576392UL), (117581687UL), (4021419931UL), (2483628986UL), (3155781890UL), (399997246UL), (4254101087UL), (3872575068UL), (1577956550UL), (3606228634UL), (609914462UL), (4003279048UL), (4048067248UL), (2500767965UL), (1125167825UL), (3707628088UL), (922020515UL), (1875618971UL), (3865851141UL), (328215079UL), (1695889194UL), (625773097UL), (3384684457UL), (2540504961UL), (293050253UL), (525570078UL), (2592805114UL), (1392199429UL), (3370444585UL), (1937915855UL), (2229636250UL), (3190958614UL), (2534538765UL), (365841057UL), (2449431033UL), (2456532429UL), (3778669305UL), (1247069485UL), (1523958293UL), (2473285670UL), (473709728UL), (720895889UL), (2071968844UL), (324025193UL), (423064436UL), (3870800061UL), (3535536111UL), (3632553233UL), (352757977UL), (1584833348UL), (3173248650UL), (2649344603UL), (1501841977UL), (1751860798UL), (617281070UL), (1958012761UL), (778965559UL), (3232142321UL), (3087428595UL), (2380824676UL), (1194087757UL), (3880222002UL), (4163350364UL), (1721646249UL), (1672791861UL), (2900511710UL), (702936770UL), (1705444176UL), (713642505UL), (3017719513UL), (2090715200UL), (1477858694UL), (37117223UL), (1948295454UL), (3055840561UL), (3476120789UL), (464173532UL), (527899063UL), (4285770666UL), (1075524023UL), (2594223535UL), (2872629966UL), (171012646UL), (3515750082UL), (3414659054UL), (3501852926UL), (1631555059UL), (2662104279UL), (2033464928UL), (90134967UL), (363058647UL), (4112991722UL), (2470752727UL), (1199972651UL), (1035834631UL), (3177798370UL), (4152098951UL), (1791097822UL), (3780327829UL), (1693730265UL), (1643429511UL), (153020604UL), (3503319486UL), (647308222UL), (3901603996UL), (1778653821UL), (221887019UL), (4294594427UL), (4261179460UL), (3285764480UL), (3334002738UL), (3340918862UL), (212518363UL), (1883994950UL), (1506873376UL), (1527780962UL), (430180116UL), (2398655600UL), (2389066602UL), (1574939945UL), (427845396UL), (1683639957UL), (2744363872UL), (2493238133UL), (2584034689UL), (3151382431UL), (752704472UL), (2787053497UL), (2031844862UL), (1272380790UL), (1298975901UL), (1528220628UL), (2342953154UL), (311436877UL), (3627785554UL), (1889491722UL), (2576495467UL), (2026656505UL), (2756955968UL), (4289348777UL), (263514583UL), (3778019638UL), (2097276163UL), (2273246349UL), (835377715UL), (2897243319UL), (1060067446UL), (4233399907UL), (639470242UL), (2856296318UL), (3032942383UL), (2351047932UL), (28260330UL), (202834023UL), (1876303820UL), (1434703409UL), (3094305336UL), (2455670466UL), (4188621628UL), (928095314UL), (876412914UL), (3785385583UL), (117581687UL), (4021419931UL), (2483628986UL), (3155781890UL), (1867816730UL), (4254101087UL), (3872575068UL), (1577956550UL), (3606228634UL), (3081878598UL), (4003279048UL), (4048067248UL), (2500767965UL), (1125167825UL), (928465955UL), (922020515UL), (1875618971UL), (3865851141UL), (328215079UL), (173810260UL), (625773097UL), (3384684457UL), (2540504961UL), (293050253UL), (2645143254UL), (2592805114UL), (1392199429UL), (3370444585UL), (1937915855UL), (162781360UL), (3190958614UL), (2534538765UL), (365841057UL), (2449431033UL), (3105377832UL), (3778669305UL), (1247069485UL), (1523958293UL), (2473285670UL), (800971948UL), (720895889UL), (2071968844UL), (324025193UL), (423064436UL), (52577992UL), (3535536111UL), (3632553233UL), (352757977UL), (1584833348UL), (3305908059UL), (2649344603UL), (1501841977UL), (1751860798UL), (617281070UL), (264880505UL), (778965559UL), (3232142321UL), (3087428595UL), (2380824676UL), (1127761012UL), (3880222002UL), (4163350364UL), (1721646249UL), (1672791861UL), (2368512339UL), (702936770UL), (1705444176UL), (713642505UL), (3017719513UL), (197200752UL), (1477858694UL), (37117223UL), (1948295454UL), (3055840561UL), (1588372042UL), (464173532UL), (527899063UL), (4285770666UL), (1075524023UL), (2124039914UL), (2872629966UL), (171012646UL), (3515750082UL), (3414659054UL), (818571456UL), (1631555059UL), (2662104279UL), (2033464928UL), (90134967UL), (952712086UL), (4112991722UL), (2470752727UL), (1199972651UL), (1035834631UL), (888975816UL), (4152098951UL), (1791097822UL), (3780327829UL), (1693730265UL), (3406785510UL), (153020604UL), (3503319486UL), (647308222UL), (3901603996UL), (3753248472UL), (221887019UL), (4294594427UL), (4261179460UL), (3285764480UL), (1861431346UL), (3340918862UL), (212518363UL), (1883994950UL), (1506873376UL), (2695939612UL), (430180116UL), (2398655600UL), (2389066602UL), (1574939945UL), (2852159074UL), (1683639957UL), (2744363872UL), (2493238133UL), (2584034689UL), (1952065633UL), (752704472UL), (2787053497UL), (2031844862UL), (1272380790UL), (3530505866UL), (1528220628UL), (2342953154UL), (311436877UL), (3627785554UL), (3410473245UL), (2576495467UL), (2026656505UL), (2756955968UL), (4289348777UL), (2856163034UL), (3778019638UL), (2097276163UL), (2273246349UL), (835377715UL), (3127280755UL), (1060067446UL), (4233399907UL), (639470242UL), (2856296318UL), (2615775011UL), (2351047932UL), (28260330UL), (202834023UL), (1876303820UL), (619308202UL), (3094305336UL), (2455670466UL), (4188621628UL), (928095314UL), (3764894047UL), (3785385583UL), (117581687UL), (4021419931UL), (2483628986UL), (3759839215UL), (1867816730UL), (4254101087UL), (3872575068UL), (1577956550UL), (1687107439UL), (3081878598UL), (4003279048UL), (4048067248UL), (2500767965UL), (2804044146UL), (928465955UL), (922020515UL), (1875618971UL), (3865851141UL), (2359176389UL), (173810260UL), (625773097UL), (3384684457UL), (2540504961UL), (3665420733UL), (2645143254UL), (2592805114UL), (1392199429UL), (3370444585UL), (1604709429UL), (162781360UL), (3190958614UL), (2534538765UL), (365841057UL), (3843585067UL), (3105377832UL), (3778669305UL), (1247069485UL), (1523958293UL), (293374051UL), (800971948UL), (720895889UL), (2071968844UL), (324025193UL), (3342361801UL), (52577992UL), (3535536111UL), (3632553233UL), (352757977UL), (1386594581UL), (3305908059UL), (2649344603UL), (1501841977UL), (1751860798UL), (3160423601UL), (264880505UL), (778965559UL), (3232142321UL), (3087428595UL), (3814775120UL), (1127761012UL), (3880222002UL), (4163350364UL), (1721646249UL), (3640773034UL), (2368512339UL), (702936770UL), (1705444176UL), (713642505UL), (1717761787UL), (197200752UL), (1477858694UL), (37117223UL), (1948295454UL), (896215772UL), (1588372042UL), (464173532UL), (527899063UL), (4285770666UL), (3441409029UL), (2124039914UL), (2872629966UL), (171012646UL), (3515750082UL), (2216687886UL), (818571456UL), (1631555059UL), (2662104279UL), (2033464928UL), (369438400UL), (329003658UL), (1503365029UL), (4215790910UL), (3264377550UL), (733526983UL), (2935318632UL), (1792331479UL), (608347530UL), (392723097UL), (1330445854UL), (3473004271UL), (1267636682UL), (2150566972UL), (2664910943UL), (2591861637UL), (409769584UL), (2943326880UL), (3746302819UL), (3162268832UL), (1028663260UL), (3206607045UL), (832105292UL), (2119405275UL), (538318455UL), (2981192295UL), (861775416UL), (609718403UL), (3531204230UL), (1904759571UL), (1262633751UL), (2375133081UL), (460454984UL), (946700253UL), (3763898311UL), (1571175213UL), (3124410107UL), (2413420216UL), (2664177543UL), (3241803820UL), (3968067371UL), (1234860999UL), (1130471500UL), (772727786UL), (247203117UL), (576455235UL), (246297007UL), (2027348597UL), (764933887UL), (3812479771UL), (1825807084UL), (4072281412UL), (2156865781UL), (1286484847UL), (1966749063UL), (2479269303UL), (423506843UL), (3070938758UL), (653091413UL), (2267423132UL), (2004263526UL), (1374490719UL), (3871990628UL), (841138314UL), (1260317857UL), (3887432433UL), (4025147569UL), (764233331UL), (1794763428UL), (3005903468UL), (877926770UL), (2466593927UL), (2971729561UL), (3203070565UL), (4198500026UL), (815665759UL), (2434508139UL), (1840456368UL), (2279000427UL), (17077200UL), (3178380570UL), (990304199UL), (3578008580UL), (1965763660UL), (1640352477UL), (750159594UL), (2047409402UL), (3576308245UL), (544920564UL), (1730124869UL), (1194761386UL), (3280315505UL), (147334027UL), (2870674244UL), (2076860776UL), (1100947675UL), (2482772161UL), (401966468UL), (1610650855UL), (193868446UL), (3808157106UL), (1509130117UL), (1324484736UL), (3852893217UL), (1059179497UL), (4053543778UL), (2557844172UL), (3282312002UL), (682550058UL), (4281899173UL), (137171998UL), (3239159214UL), (2258610918UL), (426724741UL), (3502660993UL), (135977383UL), (429929363UL), (3984458137UL), (964026748UL), (2182019070UL), (3836562946UL), (515026869UL), (359030455UL), (1301694917UL), (2300414803UL), (2364654981UL), (3804876710UL), (171119249UL), (2646785698UL), (4283509387UL), (3628087763UL), (1748227044UL), (3037141234UL), (3000413256UL), (23007314UL), (3598880509UL), (4160517314UL), (112205578UL), (1677675411UL), (734881643UL), (2830770338UL), (3470317145UL), (3306806569UL), (2635040943UL), (2671367560UL), (3528996498UL), (3878886478UL), (3114253828UL), (2721384408UL), (3175226991UL), (1393767271UL), (2651623266UL), (3767978376UL), (1269699398UL), (1100964192UL), (4169085845UL), (2086718107UL), (1286251099UL), (764751784UL), (3006878591UL)}, {(2565473087UL), (1149521056UL), (3529037691UL), (630435548UL), (73598765UL), (1467331930UL), (3988027050UL), (2771962200UL), (91261543UL), (980989218UL), (2227515435UL), (236831608UL), (2872772569UL), (2330469327UL), (1654035853UL), (2883791516UL), (4170143763UL), (126418114UL), (127789935UL), (2114249438UL), (2933346767UL), (639483386UL), (1532399845UL), (2182422151UL), (741069317UL), (2376371063UL), (3398508789UL), (3828295651UL), (3963199356UL), (4156483769UL), (4206759111UL), (1266176088UL), (3210273687UL), (432131993UL), (667709537UL), (874477513UL), (2304714957UL), (629309008UL), (116453438UL), (3051811727UL), (3490241985UL), (3355968243UL), (2304043871UL), (2724990029UL), (1095724699UL), (2408437363UL), (1433161037UL), (3245468546UL), (2494529842UL), (4204170637UL), (1966342448UL), (3092333073UL), (1861880941UL), (3990012367UL), (3710334908UL), (2526395471UL), (1884691351UL), (2145882162UL), (2561288457UL), (2253122309UL), (1154858044UL), (1643256991UL), (3172857504UL), (1096492713UL), (2848827103UL), (799826424UL), (3094672168UL), (3535834360UL), (4213256737UL), (1131757994UL), (520495112UL), (575315345UL), (3823364867UL), (2424349582UL), (3604795017UL), (310789314UL), (4207205257UL), (553462404UL), (2918228443UL), (2568360580UL), (3863565851UL), (874197736UL), (3329267685UL), (1186352580UL), (3928193054UL), (1780200631UL), (4088289456UL), (3323217870UL), (2758854947UL), (3111637417UL), (990374143UL), (2080149357UL), (4047813631UL), (2019887940UL), (578660736UL), (2145680301UL), (2328411541UL), (1572704242UL), (405739686UL), (1869350271UL), (2046317220UL), (4021497634UL), (1385163990UL), (1935250885UL), (1132987169UL), (581690993UL), (3172043012UL), (628071512UL), (2851125739UL), (2735324847UL), (2847267504UL), (3408334906UL), (3352976111UL), (706277272UL), (2971786942UL), (2811957324UL), (3578703606UL), (1126685543UL), (2671169997UL), (31952251UL), (2802110464UL), (2391618856UL), (3031260674UL), (1165714541UL), (2411388800UL), (2825634835UL), (101928462UL), (477629709UL), (4257022506UL), (3281706767UL), (2576087732UL), (736533968UL), (2543083137UL), (3430523686UL), (3272172013UL), (3056925798UL), (341993500UL), (406782950UL), (1770032304UL), (125786076UL), (1321359723UL), (2901696227UL), (1890958265UL), (3610842776UL), (1772227311UL), (1564088598UL), (914173231UL), (3734092059UL), (1652333721UL), (2386645282UL), (329706426UL), (1022239203UL), (1832393502UL), (4064995802UL), (3497852986UL), (1046436763UL), (366391010UL), (2237068647UL), (2887356463UL), (304718827UL), (3969799795UL), (2565473087UL), (1149521056UL), (3529037691UL), (630435548UL), (3758124054UL), (1467331930UL), (3988027050UL), (2771962200UL), (91261543UL), (836545831UL), (2227515435UL), (236831608UL), (2872772569UL), (2330469327UL), (3439193753UL), (2883791516UL), (4170143763UL), (126418114UL), (127789935UL), (1648940583UL), (2933346767UL), (639483386UL), (1532399845UL), (2182422151UL), (2470139222UL), (2376371063UL), (3398508789UL), (3828295651UL), (3963199356UL), (2997263135UL), (4206759111UL), (1266176088UL), (3210273687UL), (432131993UL), (2416600665UL), (874477513UL), (2304714957UL), (629309008UL), (116453438UL), (2586542760UL), (3490241985UL), (3355968243UL), (2304043871UL), (2724990029UL), (452934545UL), (2408437363UL), (1433161037UL), (3245468546UL), (2494529842UL), (2244403710UL), (1966342448UL), (3092333073UL), (1861880941UL), (3990012367UL), (2774994234UL), (2526395471UL), (1884691351UL), (2145882162UL), (2561288457UL), (2303702146UL), (1154858044UL), (1643256991UL), (3172857504UL), (1096492713UL), (130979316UL), (799826424UL), (3094672168UL), (3535834360UL), (4213256737UL), (935499492UL), (520495112UL), (575315345UL), (3823364867UL), (2424349582UL), (2272973265UL), (310789314UL), (4207205257UL), (553462404UL), (2918228443UL), (2613016888UL), (3863565851UL), (874197736UL), (3329267685UL), (1186352580UL), (4106984978UL), (1780200631UL), (4088289456UL), (3323217870UL), (2758854947UL), (1559861146UL), (990374143UL), (2080149357UL), (4047813631UL), (2019887940UL), (1133329900UL), (2145680301UL), (2328411541UL), (1572704242UL), (405739686UL), (63633520UL), (2046317220UL), (4021497634UL), (1385163990UL), (1935250885UL), (1762959503UL), (581690993UL), (3172043012UL), (628071512UL), (2851125739UL), (3726073981UL), (2847267504UL), (3408334906UL), (3352976111UL), (706277272UL), (3817450114UL), (2811957324UL), (3578703606UL), (1126685543UL), (2671169997UL), (2749086326UL), (2802110464UL), (2391618856UL), (3031260674UL), (1165714541UL), (2210258428UL), (2825634835UL), (101928462UL), (477629709UL), (4257022506UL), (2679409844UL), (2576087732UL), (736533968UL), (2543083137UL), (3430523686UL), (1122549807UL), (3056925798UL), (341993500UL), (406782950UL), (1770032304UL), (2617760292UL), (1321359723UL), (2901696227UL), (1890958265UL), (3610842776UL), (2666109620UL), (1564088598UL), (914173231UL), (3734092059UL), (1652333721UL), (3456779008UL), (329706426UL), (1022239203UL), (1832393502UL), (4064995802UL), (4006865520UL), (1046436763UL), (366391010UL), (2237068647UL), (2887356463UL), (1479646555UL), (3969799795UL), (2565473087UL), (1149521056UL), (3529037691UL), (2379195579UL), (3758124054UL), (1467331930UL), (3988027050UL), (2771962200UL), (1796797949UL), (836545831UL), (2227515435UL), (236831608UL), (2872772569UL), (544017308UL), (3439193753UL), (2883791516UL), (4170143763UL), (126418114UL), (3811390247UL), (1648940583UL), (2933346767UL), (639483386UL), (1532399845UL), (4165970043UL), (2470139222UL), (2376371063UL), (3398508789UL), (3828295651UL), (4066952157UL), (2997263135UL), (4206759111UL), (1266176088UL), (3210273687UL), (560560354UL), (2416600665UL), (874477513UL), (2304714957UL), (629309008UL), (2010844440UL), (2586542760UL), (3490241985UL), (3355968243UL), (2304043871UL), (855615381UL), (452934545UL), (2408437363UL), (1433161037UL), (3245468546UL), (3813880871UL), (2244403710UL), (1966342448UL), (3092333073UL), (1861880941UL), (3334256651UL), (2774994234UL), (2526395471UL), (1884691351UL), (2145882162UL), (3500193798UL), (2303702146UL), (1154858044UL), (1643256991UL), (3172857504UL), (3480843206UL), (130979316UL), (799826424UL), (3094672168UL), (3535834360UL), (915442396UL), (935499492UL), (520495112UL), (575315345UL), (3823364867UL), (2876158574UL), (2272973265UL), (310789314UL), (4207205257UL), (553462404UL), (2184663001UL), (2613016888UL), (3863565851UL), (874197736UL), (3329267685UL), (3447734684UL), (4106984978UL), (1780200631UL), (4088289456UL), (3323217870UL), (2748493470UL), (1559861146UL), (990374143UL), (2080149357UL), (4047813631UL), (2728282767UL), (1133329900UL), (2145680301UL), (2328411541UL), (1572704242UL), (3396987326UL), (63633520UL), (2046317220UL), (4021497634UL), (1385163990UL), (1582181054UL), (1762959503UL), (581690993UL), (3172043012UL), (628071512UL), (2790170929UL), (3726073981UL), (2847267504UL), (3408334906UL), (3352976111UL), (1211075015UL), (3817450114UL), (2811957324UL), (3578703606UL), (1126685543UL), (1946225412UL), (2749086326UL), (2802110464UL), (2391618856UL), (3031260674UL), (453222948UL), (2210258428UL), (2825634835UL), (101928462UL), (477629709UL), (410621659UL), (2679409844UL), (2576087732UL), (736533968UL), (2543083137UL), (1101977922UL), (1122549807UL), (3056925798UL), (341993500UL), (406782950UL), (3057489804UL), (2617760292UL), (1321359723UL), (2901696227UL), (1890958265UL), (4035843698UL), (2666109620UL), (1564088598UL), (914173231UL), (3734092059UL), (908525903UL), (3456779008UL), (329706426UL), (1022239203UL), (1832393502UL), (4024857205UL), (4006865520UL), (1046436763UL), (366391010UL), (2237068647UL), (1564059380UL), (1479646555UL), (3969799795UL), (2565473087UL), (1149521056UL), (2808155917UL), (2379195579UL), (3758124054UL), (1467331930UL), (3988027050UL), (810008243UL), (1796797949UL), (836545831UL), (2227515435UL), (236831608UL), (608273331UL), (544017308UL), (3439193753UL), (2883791516UL), (4170143763UL), (3309288977UL), (3811390247UL), (1648940583UL), (2933346767UL), (639483386UL), (1685761277UL), (4165970043UL), (2470139222UL), (2376371063UL), (3398508789UL), (4275493636UL), (4066952157UL), (2997263135UL), (4206759111UL), (1266176088UL), (333592630UL), (560560354UL), (2416600665UL), (874477513UL), (2304714957UL), (1438974661UL), (2010844440UL), (2586542760UL), (3490241985UL), (3355968243UL), (2556368068UL), (855615381UL), (452934545UL), (2408437363UL), (1433161037UL), (4061232080UL), (3813880871UL), (2244403710UL), (1966342448UL), (3092333073UL), (3412770364UL), (3334256651UL), (2774994234UL), (2526395471UL), (1884691351UL), (1414627588UL), (3500193798UL), (2303702146UL), (1154858044UL), (1643256991UL), (2245958719UL), (3480843206UL), (130979316UL), (799826424UL), (3094672168UL), (2214560871UL), (915442396UL), (935499492UL), (520495112UL), (575315345UL), (3894763683UL), (2876158574UL), (2272973265UL), (310789314UL), (4207205257UL), (3203740771UL), (2184663001UL), (2613016888UL), (3863565851UL), (874197736UL), (3371653768UL), (3447734684UL), (4106984978UL), (1780200631UL), (4088289456UL), (378312754UL), (2748493470UL), (1559861146UL), (990374143UL), (2080149357UL), (554816113UL), (2728282767UL), (1133329900UL), (2145680301UL), (2328411541UL), (4249979994UL), (3396987326UL), (63633520UL), (2046317220UL), (4021497634UL), (4185731269UL), (1582181054UL), (1762959503UL), (581690993UL), (3172043012UL), (3142596028UL), (2790170929UL), (3726073981UL), (2847267504UL), (3408334906UL), (2556911142UL), (1211075015UL), (3817450114UL), (2811957324UL), (3578703606UL), (1480672978UL), (1946225412UL), (2749086326UL), (2802110464UL), (2391618856UL), (3986823297UL), (453222948UL), (2210258428UL), (2825634835UL), (101928462UL), (26373721UL), (410621659UL), (2679409844UL), (2576087732UL), (736533968UL), (888001208UL), (1101977922UL), (1122549807UL), (3056925798UL), (341993500UL), (3243663736UL), (3057489804UL), (2617760292UL), (1321359723UL), (2901696227UL), (1652018736UL), (4035843698UL), (2666109620UL), (1564088598UL), (914173231UL), (1857869366UL), (908525903UL), (3456779008UL), (329706426UL), (1022239203UL), (2622178179UL), (4024857205UL), (4006865520UL), (1046436763UL), (366391010UL), (3722250905UL), (2880126367UL), (4102186560UL), (1642831571UL), (2222486636UL), (2572764729UL), (2046028516UL), (3507603612UL), (1703451134UL), (89818497UL), (1961701523UL), (3704300476UL), (3563143931UL), (1609575644UL), (1599081111UL), (1047838539UL), (2779312926UL), (2065354728UL), (956677756UL), (2073145924UL), (726634994UL), (119064196UL), (2046275296UL), (2105141632UL), (1023267361UL), (1204528080UL), (623740611UL), (1419328884UL), (933734693UL), (2030900835UL), (2556538268UL), (1672647866UL), (3125658368UL), (2221217376UL), (1097330641UL), (3214790630UL), (4276041578UL), (2397216525UL), (3916900004UL), (330223096UL), (3915966823UL), (2646760259UL), (1724289351UL), (4015221358UL), (2338587000UL), (110922222UL), (2314933196UL), (4026908935UL), (3272487985UL), (2685115305UL), (84271650UL), (731354215UL), (2358136447UL), (1069348214UL), (2676811333UL), (1386266810UL), (1364512901UL), (4154449904UL), (3469122709UL), (54276972UL), (560967905UL), (2363475740UL), (331250049UL), (3024074455UL), (186605617UL), (389582566UL), (1258386782UL), (703909543UL), (3968367083UL), (1553533794UL), (3699576213UL), (1145761343UL), (921983735UL), (3573813763UL), (1280477631UL), (3365842435UL), (1618458494UL), (2621328991UL), (1534006198UL), (2307669227UL), (4192335609UL), (1338050203UL), (785284052UL), (4227164890UL), (2874735332UL), (3655821191UL), (2911684671UL), (3266454200UL), (2679968625UL), (1191162601UL), (456550349UL), (1143881236UL), (3560103440UL), (2253437876UL), (3683014001UL), (1087142366UL), (1462192975UL), (1076595768UL), (3227872159UL), (1842092988UL), (148227073UL), (3812110998UL), (1317300278UL), (3068446245UL), (3376284001UL), (3164402992UL), (2730404635UL), (2848239579UL), (3008959791UL), (2901849226UL), (1234485739UL), (869158554UL), (245101118UL), (1724974650UL), (3851803199UL), (922411232UL), (3046280696UL), (3284392523UL), (3528264590UL), (2802364078UL), (381450957UL), (1741009694UL), (4222244451UL), (102929888UL), (1668474417UL), (3881791214UL), (1429483134UL), (1938365051UL), (1023690708UL), (3333855520UL), (3238705869UL), (2602245525UL), (3059586169UL), (720438965UL), (2120786297UL), (453980990UL), (1048501876UL), (4060576583UL), (3537810796UL), (3892882814UL), (691572481UL), (3899584121UL), (1582529013UL), (3260326865UL), (2358704826UL), (1607030801UL), (1035900449UL), (3442507859UL), (1406737127UL), (249758705UL), (1535363329UL), (893329207UL), (51912312UL), (3440532856UL), (3736385218UL), (295452658UL), (2379709553UL), (1647382020UL), (2363679860UL), (2998779887UL)}, {(4209102573UL), (2387104994UL), (1221484586UL), (1726143957UL), (3263877318UL), (3362559187UL), (282442925UL), (2418524976UL), (3196072648UL), (3174695999UL), (2072047145UL), (2985823503UL), (2132951745UL), (2298545297UL), (2495977670UL), (1397656146UL), (2086257884UL), (3834366725UL), (3862532368UL), (3583329522UL), (1543996818UL), (2192688115UL), (3081427696UL), (2656520743UL), (8772004UL), (2476324234UL), (3600148050UL), (1168683794UL), (3219143568UL), (108768238UL), (1339513738UL), (447593731UL), (2742877256UL), (2488536667UL), (4189834432UL), (808657962UL), (2422880287UL), (390864786UL), (3381554683UL), (760628048UL), (353395922UL), (3577556262UL), (2482413928UL), (507756643UL), (839344953UL), (3505184848UL), (3945044582UL), (2414915836UL), (2313624497UL), (1832728088UL), (2036999647UL), (1369090013UL), (3264575895UL), (1096327239UL), (3483440128UL), (3999302048UL), (2761563885UL), (2882627112UL), (3126073009UL), (1749658776UL), (3152482044UL), (3040022505UL), (3249451214UL), (2933713956UL), (2861715096UL), (1314806730UL), (932941454UL), (4276317539UL), (343449784UL), (1913556027UL), (1493892363UL), (2539517630UL), (2046391233UL), (3046108187UL), (28742917UL), (4009448584UL), (530945117UL), (3165875131UL), (1018448712UL), (110256395UL), (3550192264UL), (1279873435UL), (2276349621UL), (517650895UL), (1957973772UL), (619869608UL), (4260458157UL), (2281748739UL), (2489253174UL), (2220997989UL), (3787481606UL), (508630251UL), (3761850170UL), (3992979014UL), (2298047038UL), (3506428315UL), (1279341556UL), (3293496518UL), (1313470495UL), (1021100687UL), (3113171268UL), (798494760UL), (2981622008UL), (4152623583UL), (576409629UL), (2312811213UL), (992326282UL), (261645450UL), (1818084365UL), (3357150904UL), (144093UL), (1937589359UL), (2016990596UL), (4273422066UL), (588267732UL), (3592151118UL), (3846596932UL), (1198111464UL), (944363907UL), (1288613766UL), (1707163456UL), (4020906747UL), (1161127694UL), (2303844076UL), (2632591611UL), (3877442490UL), (2453788473UL), (1725876694UL), (1193989740UL), (2650581453UL), (1937459187UL), (361099994UL), (3566745727UL), (3658112707UL), (3612317412UL), (2684702277UL), (2880928862UL), (2044313931UL), (1866044828UL), (3528429465UL), (130421713UL), (2658878825UL), (1566180833UL), (1572228417UL), (531947625UL), (3774861000UL), (1894712110UL), (1319199233UL), (865634052UL), (2602102379UL), (3389730171UL), (3878969250UL), (107983959UL), (1601930856UL), (2511728925UL), (2146946013UL), (497511195UL), (720616881UL), (699892123UL), (2404505137UL), (2656498433UL), (4209102573UL), (2387104994UL), (1221484586UL), (1726143957UL), (1267363185UL), (3362559187UL), (282442925UL), (2418524976UL), (3196072648UL), (2942944206UL), (2072047145UL), (2985823503UL), (2132951745UL), (2298545297UL), (4079341490UL), (1397656146UL), (2086257884UL), (3834366725UL), (3862532368UL), (3991197972UL), (1543996818UL), (2192688115UL), (3081427696UL), (2656520743UL), (825853576UL), (2476324234UL), (3600148050UL), (1168683794UL), (3219143568UL), (528751585UL), (1339513738UL), (447593731UL), (2742877256UL), (2488536667UL), (4025362081UL), (808657962UL), (2422880287UL), (390864786UL), (3381554683UL), (2682225618UL), (353395922UL), (3577556262UL), (2482413928UL), (507756643UL), (3979211244UL), (3505184848UL), (3945044582UL), (2414915836UL), (2313624497UL), (1841224078UL), (2036999647UL), (1369090013UL), (3264575895UL), (1096327239UL), (607843308UL), (3999302048UL), (2761563885UL), (2882627112UL), (3126073009UL), (1241524975UL), (3152482044UL), (3040022505UL), (3249451214UL), (2933713956UL), (420486142UL), (1314806730UL), (932941454UL), (4276317539UL), (343449784UL), (2231505736UL), (1493892363UL), (2539517630UL), (2046391233UL), (3046108187UL), (2351652097UL), (4009448584UL), (530945117UL), (3165875131UL), (1018448712UL), (1683392491UL), (3550192264UL), (1279873435UL), (2276349621UL), (517650895UL), (4036312766UL), (619869608UL), (4260458157UL), (2281748739UL), (2489253174UL), (1686790154UL), (3787481606UL), (508630251UL), (3761850170UL), (3992979014UL), (1745325013UL), (3506428315UL), (1279341556UL), (3293496518UL), (1313470495UL), (3066312306UL), (3113171268UL), (798494760UL), (2981622008UL), (4152623583UL), (3871822467UL), (2312811213UL), (992326282UL), (261645450UL), (1818084365UL), (3681154045UL), (144093UL), (1937589359UL), (2016990596UL), (4273422066UL), (2361898985UL), (3592151118UL), (3846596932UL), (1198111464UL), (944363907UL), (2866279694UL), (1707163456UL), (4020906747UL), (1161127694UL), (2303844076UL), (3044280908UL), (3877442490UL), (2453788473UL), (1725876694UL), (1193989740UL), (2049617934UL), (1937459187UL), (361099994UL), (3566745727UL), (3658112707UL), (934740227UL), (2684702277UL), (2880928862UL), (2044313931UL), (1866044828UL), (1814569183UL), (130421713UL), (2658878825UL), (1566180833UL), (1572228417UL), (1784679035UL), (3774861000UL), (1894712110UL), (1319199233UL), (865634052UL), (283642947UL), (3389730171UL), (3878969250UL), (107983959UL), (1601930856UL), (3698217362UL), (2146946013UL), (497511195UL), (720616881UL), (699892123UL), (2117385156UL), (2656498433UL), (4209102573UL), (2387104994UL), (1221484586UL), (3495886368UL), (1267363185UL), (3362559187UL), (282442925UL), (2418524976UL), (3489510655UL), (2942944206UL), (2072047145UL), (2985823503UL), (2132951745UL), (885541635UL), (4079341490UL), (1397656146UL), (2086257884UL), (3834366725UL), (1049969755UL), (3991197972UL), (1543996818UL), (2192688115UL), (3081427696UL), (2141948440UL), (825853576UL), (2476324234UL), (3600148050UL), (1168683794UL), (5160254UL), (528751585UL), (1339513738UL), (447593731UL), (2742877256UL), (3033397497UL), (4025362081UL), (808657962UL), (2422880287UL), (390864786UL), (3191593886UL), (2682225618UL), (353395922UL), (3577556262UL), (2482413928UL), (1185107868UL), (3979211244UL), (3505184848UL), (3945044582UL), (2414915836UL), (3030493909UL), (1841224078UL), (2036999647UL), (1369090013UL), (3264575895UL), (3054343366UL), (607843308UL), (3999302048UL), (2761563885UL), (2882627112UL), (3912854189UL), (1241524975UL), (3152482044UL), (3040022505UL), (3249451214UL), (55140065UL), (420486142UL), (1314806730UL), (932941454UL), (4276317539UL), (1055315026UL), (2231505736UL), (1493892363UL), (2539517630UL), (2046391233UL), (4174985470UL), (2351652097UL), (4009448584UL), (530945117UL), (3165875131UL), (2168411768UL), (1683392491UL), (3550192264UL), (1279873435UL), (2276349621UL), (1875092822UL), (4036312766UL), (619869608UL), (4260458157UL), (2281748739UL), (98823023UL), (1686790154UL), (3787481606UL), (508630251UL), (3761850170UL), (2636025017UL), (1745325013UL), (3506428315UL), (1279341556UL), (3293496518UL), (978338993UL), (3066312306UL), (3113171268UL), (798494760UL), (2981622008UL), (2712384846UL), (3871822467UL), (2312811213UL), (992326282UL), (261645450UL), (66982935UL), (3681154045UL), (144093UL), (1937589359UL), (2016990596UL), (3390191329UL), (2361898985UL), (3592151118UL), (3846596932UL), (1198111464UL), (1857959320UL), (2866279694UL), (1707163456UL), (4020906747UL), (1161127694UL), (913091437UL), (3044280908UL), (3877442490UL), (2453788473UL), (1725876694UL), (4254455215UL), (2049617934UL), (1937459187UL), (361099994UL), (3566745727UL), (2914687409UL), (934740227UL), (2684702277UL), (2880928862UL), (2044313931UL), (1515195925UL), (1814569183UL), (130421713UL), (2658878825UL), (1566180833UL), (2753417020UL), (1784679035UL), (3774861000UL), (1894712110UL), (1319199233UL), (287161774UL), (283642947UL), (3389730171UL), (3878969250UL), (107983959UL), (3057929912UL), (3698217362UL), (2146946013UL), (497511195UL), (720616881UL), (3570251850UL), (2117385156UL), (2656498433UL), (4209102573UL), (2387104994UL), (2940868252UL), (3495886368UL), (1267363185UL), (3362559187UL), (282442925UL), (2510419746UL), (3489510655UL), (2942944206UL), (2072047145UL), (2985823503UL), (978430777UL), (885541635UL), (4079341490UL), (1397656146UL), (2086257884UL), (134380865UL), (1049969755UL), (3991197972UL), (1543996818UL), (2192688115UL), (1205081471UL), (2141948440UL), (825853576UL), (2476324234UL), (3600148050UL), (228461601UL), (5160254UL), (528751585UL), (1339513738UL), (447593731UL), (2852356745UL), (3033397497UL), (4025362081UL), (808657962UL), (2422880287UL), (3287655095UL), (3191593886UL), (2682225618UL), (353395922UL), (3577556262UL), (2542841784UL), (1185107868UL), (3979211244UL), (3505184848UL), (3945044582UL), (2905156498UL), (3030493909UL), (1841224078UL), (2036999647UL), (1369090013UL), (4246605417UL), (3054343366UL), (607843308UL), (3999302048UL), (2761563885UL), (3611911899UL), (3912854189UL), (1241524975UL), (3152482044UL), (3040022505UL), (3215633820UL), (55140065UL), (420486142UL), (1314806730UL), (932941454UL), (2708752494UL), (1055315026UL), (2231505736UL), (1493892363UL), (2539517630UL), (962728637UL), (4174985470UL), (2351652097UL), (4009448584UL), (530945117UL), (3370859357UL), (2168411768UL), (1683392491UL), (3550192264UL), (1279873435UL), (3028448904UL), (1875092822UL), (4036312766UL), (619869608UL), (4260458157UL), (199178828UL), (98823023UL), (1686790154UL), (3787481606UL), (508630251UL), (4205010983UL), (2636025017UL), (1745325013UL), (3506428315UL), (1279341556UL), (683127445UL), (978338993UL), (3066312306UL), (3113171268UL), (798494760UL), (2823693013UL), (2712384846UL), (3871822467UL), (2312811213UL), (992326282UL), (3701928286UL), (66982935UL), (3681154045UL), (144093UL), (1937589359UL), (1117717039UL), (3390191329UL), (2361898985UL), (3592151118UL), (3846596932UL), (1072660054UL), (1857959320UL), (2866279694UL), (1707163456UL), (4020906747UL), (2503116219UL), (913091437UL), (3044280908UL), (3877442490UL), (2453788473UL), (1815274499UL), (4254455215UL), (2049617934UL), (1937459187UL), (361099994UL), (3771108073UL), (2914687409UL), (934740227UL), (2684702277UL), (2880928862UL), (3591322975UL), (1515195925UL), (1814569183UL), (130421713UL), (2658878825UL), (354587729UL), (2753417020UL), (1784679035UL), (3774861000UL), (1894712110UL), (1799044969UL), (287161774UL), (283642947UL), (3389730171UL), (3878969250UL), (1229815186UL), (3057929912UL), (3698217362UL), (2146946013UL), (497511195UL), (3121882901UL), (426537369UL), (3852284416UL), (4050544256UL), (3148944089UL), (878474231UL), (1369575859UL), (2206199765UL), (870626886UL), (494668165UL), (613011290UL), (3246772867UL), (1040178461UL), (2396959353UL), (2105449571UL), (456758967UL), (4134137960UL), (3525051481UL), (3633445497UL), (2895048060UL), (2008411846UL), (2194012253UL), (2326112129UL), (2956901044UL), (2297039362UL), (3400824024UL), (42139718UL), (4212208866UL), (3874761488UL), (2361955811UL), (1890446075UL), (864533345UL), (474524842UL), (2283847731UL), (283971243UL), (3607219686UL), (280870706UL), (4188549522UL), (659660119UL), (2460943922UL), (4252134362UL), (922033031UL), (3615474721UL), (1691563300UL), (3002653770UL), (2414043617UL), (2251931324UL), (752654714UL), (4188343161UL), (305594960UL), (1320443323UL), (797027061UL), (2347530104UL), (3608843538UL), (2717312892UL), (1841295453UL), (1574467161UL), (823626340UL), (2244853583UL), (2648217758UL), (141742826UL), (1605436472UL), (745763543UL), (3275460028UL), (3166960370UL), (2655678693UL), (3964037210UL), (945054703UL), (998173049UL), (1014527437UL), (3424443612UL), (281835352UL), (826817508UL), (260462513UL), (2849967970UL), (3447294061UL), (3670173947UL), (2430650055UL), (4134905457UL), (3798172627UL), (2156572681UL), (2600148034UL), (2773013892UL), (3290397106UL), (1740507705UL), (3450254627UL), (3613087060UL), (440045928UL), (1230555006UL), (980805434UL), (2107958250UL), (526555374UL), (3150741277UL), (4283672024UL), (193019043UL), (786035243UL), (3002832578UL), (3938336183UL), (4209865002UL), (1005950967UL), (3533346582UL), (3196886974UL), (83962845UL), (1882902787UL), (3595687446UL), (2927597311UL), (2728550762UL), (2750900392UL), (1474254316UL), (1509832112UL), (1763262792UL), (2706181276UL), (538294991UL), (353565565UL), (18133995UL), (1719731406UL), (3311085516UL), (2018821960UL), (300367686UL), (2628312935UL), (1151449661UL), (2178805970UL), (3288321196UL), (535051857UL), (1623270973UL), (2761151808UL), (2701048972UL), (317681607UL), (2281427601UL), (719748170UL), (351452298UL), (2191958596UL), (4000232015UL), (335837771UL), (4158081521UL), (3779404077UL), (1998444133UL), (3849605095UL), (1532231791UL), (2930266419UL), (4203951289UL), (748423654UL), (1993082867UL), (451159852UL), (488781053UL), (2438982775UL), (2222815270UL), (543209242UL), (1241562465UL), (2868868009UL), (4201052877UL), (2438841764UL), (2151708682UL), (2426958921UL), (1520654642UL), (1990098337UL), (1070792755UL), (2308394635UL), (1442389785UL), (705615044UL)}, {(973368008UL), (1221885324UL), (2086331970UL), (2323744198UL), (280145759UL), (1795442656UL), (2984366093UL), (3532172763UL), (323888669UL), (851950179UL), (4198638255UL), (899943985UL), (4087912561UL), (2935341503UL), (1443752852UL), (3991058999UL), (3547259355UL), (35779889UL), (1076308344UL), (4075444807UL), (186174448UL), (3542284780UL), (660388677UL), (2777400132UL), (1092226205UL), (2418702276UL), (1307933032UL), (1940510003UL), (1932005362UL), (4016036211UL), (387339882UL), (2969593895UL), (3453134349UL), (1382709098UL), (1795814140UL), (1588159469UL), (1216733801UL), (2227378121UL), (2063027627UL), (582454582UL), (3364657275UL), (3466973302UL), (484564303UL), (1489261596UL), (2270291560UL), (2008178784UL), (2284268924UL), (2229317366UL), (644797709UL), (1213921542UL), (99331403UL), (3027640949UL), (1137722852UL), (2991506109UL), (1432805987UL), (931795812UL), (1075567424UL), (28963219UL), (1462245461UL), (3781444706UL), (521233400UL), (1891915904UL), (3774338085UL), (1635359313UL), (2356111795UL), (4121073768UL), (1045110727UL), (2822507066UL), (1087914587UL), (3744509525UL), (911370656UL), (181884066UL), (1944539735UL), (290356444UL), (3598887471UL), (4236934380UL), (3224468239UL), (457546246UL), (4119337570UL), (37700432UL), (655783844UL), (1423101410UL), (1693002969UL), (3287768267UL), (928748421UL), (4074128009UL), (3081088543UL), (2882833790UL), (3180154875UL), (1094657682UL), (2388253717UL), (4173455215UL), (794709427UL), (3363292346UL), (67786868UL), (3786597763UL), (380587236UL), (2345941620UL), (560232318UL), (2137123833UL), (619747082UL), (1050293267UL), (2537845069UL), (1407302835UL), (433399526UL), (1083185007UL), (1893842085UL), (3711748584UL), (4225838280UL), (3863317129UL), (2043467942UL), (2799650657UL), (3590486611UL), (1231938950UL), (215905995UL), (155811669UL), (806806587UL), (2732631168UL), (1621659281UL), (632403616UL), (401165422UL), (2661074778UL), (4156963191UL), (3691812937UL), (3767271627UL), (2834948318UL), (2877210497UL), (2420260153UL), (733172233UL), (1771708940UL), (3102718549UL), (2468707423UL), (1857088312UL), (3176535032UL), (1908570295UL), (3966666208UL), (605079895UL), (2982506620UL), (3721694730UL), (1640691570UL), (3764975545UL), (3257514114UL), (1826578604UL), (1358557411UL), (4049610348UL), (615820785UL), (3355718142UL), (1734641780UL), (2958744617UL), (274522187UL), (3198436002UL), (4077346785UL), (2890101344UL), (4012464346UL), (1288365365UL), (96583076UL), (2656389382UL), (1858181040UL), (2717010340UL), (2032153178UL), (349324012UL), (973368008UL), (1221885324UL), (2086331970UL), (2323744198UL), (253685576UL), (1795442656UL), (2984366093UL), (3532172763UL), (323888669UL), (248935329UL), (4198638255UL), (899943985UL), (4087912561UL), (2935341503UL), (3213394756UL), (3991058999UL), (3547259355UL), (35779889UL), (1076308344UL), (1987715385UL), (186174448UL), (3542284780UL), (660388677UL), (2777400132UL), (2071022105UL), (2418702276UL), (1307933032UL), (1940510003UL), (1932005362UL), (144370664UL), (387339882UL), (2969593895UL), (3453134349UL), (1382709098UL), (2394736611UL), (1588159469UL), (1216733801UL), (2227378121UL), (2063027627UL), (4064263898UL), (3364657275UL), (3466973302UL), (484564303UL), (1489261596UL), (3405101812UL), (2008178784UL), (2284268924UL), (2229317366UL), (644797709UL), (2560273821UL), (99331403UL), (3027640949UL), (1137722852UL), (2991506109UL), (1446442417UL), (931795812UL), (1075567424UL), (28963219UL), (1462245461UL), (1201513613UL), (521233400UL), (1891915904UL), (3774338085UL), (1635359313UL), (2815447944UL), (4121073768UL), (1045110727UL), (2822507066UL), (1087914587UL), (2485035329UL), (911370656UL), (181884066UL), (1944539735UL), (290356444UL), (2078819341UL), (4236934380UL), (3224468239UL), (457546246UL), (4119337570UL), (2666895496UL), (655783844UL), (1423101410UL), (1693002969UL), (3287768267UL), (3595439673UL), (4074128009UL), (3081088543UL), (2882833790UL), (3180154875UL), (872453917UL), (2388253717UL), (4173455215UL), (794709427UL), (3363292346UL), (4188764388UL), (3786597763UL), (380587236UL), (2345941620UL), (560232318UL), (625538006UL), (619747082UL), (1050293267UL), (2537845069UL), (1407302835UL), (2128289331UL), (1083185007UL), (1893842085UL), (3711748584UL), (4225838280UL), (2486133065UL), (2043467942UL), (2799650657UL), (3590486611UL), (1231938950UL), (928582681UL), (155811669UL), (806806587UL), (2732631168UL), (1621659281UL), (1163969880UL), (401165422UL), (2661074778UL), (4156963191UL), (3691812937UL), (2322579561UL), (2834948318UL), (2877210497UL), (2420260153UL), (733172233UL), (170239236UL), (3102718549UL), (2468707423UL), (1857088312UL), (3176535032UL), (3868693408UL), (3966666208UL), (605079895UL), (2982506620UL), (3721694730UL), (2066859537UL), (3764975545UL), (3257514114UL), (1826578604UL), (1358557411UL), (2964604045UL), (615820785UL), (3355718142UL), (1734641780UL), (2958744617UL), (4091225681UL), (3198436002UL), (4077346785UL), (2890101344UL), (4012464346UL), (2612861218UL), (96583076UL), (2656389382UL), (1858181040UL), (2717010340UL), (3639170895UL), (349324012UL), (973368008UL), (1221885324UL), (2086331970UL), (2258432445UL), (253685576UL), (1795442656UL), (2984366093UL), (3532172763UL), (3831166882UL), (248935329UL), (4198638255UL), (899943985UL), (4087912561UL), (715173523UL), (3213394756UL), (3991058999UL), (3547259355UL), (35779889UL), (2393072396UL), (1987715385UL), (186174448UL), (3542284780UL), (660388677UL), (3731857267UL), (2071022105UL), (2418702276UL), (1307933032UL), (1940510003UL), (4262274779UL), (144370664UL), (387339882UL), (2969593895UL), (3453134349UL), (1923698215UL), (2394736611UL), (1588159469UL), (1216733801UL), (2227378121UL), (2907069566UL), (4064263898UL), (3364657275UL), (3466973302UL), (484564303UL), (2234542580UL), (3405101812UL), (2008178784UL), (2284268924UL), (2229317366UL), (1349323372UL), (2560273821UL), (99331403UL), (3027640949UL), (1137722852UL), (4200786664UL), (1446442417UL), (931795812UL), (1075567424UL), (28963219UL), (1659632304UL), (1201513613UL), (521233400UL), (1891915904UL), (3774338085UL), (763590809UL), (2815447944UL), (4121073768UL), (1045110727UL), (2822507066UL), (4131040734UL), (2485035329UL), (911370656UL), (181884066UL), (1944539735UL), (4104473807UL), (2078819341UL), (4236934380UL), (3224468239UL), (457546246UL), (1241850776UL), (2666895496UL), (655783844UL), (1423101410UL), (1693002969UL), (2025898966UL), (3595439673UL), (4074128009UL), (3081088543UL), (2882833790UL), (218474476UL), (872453917UL), (2388253717UL), (4173455215UL), (794709427UL), (250328312UL), (4188764388UL), (3786597763UL), (380587236UL), (2345941620UL), (1937652040UL), (625538006UL), (619747082UL), (1050293267UL), (2537845069UL), (1140055765UL), (2128289331UL), (1083185007UL), (1893842085UL), (3711748584UL), (2298055548UL), (2486133065UL), (2043467942UL), (2799650657UL), (3590486611UL), (1235949580UL), (928582681UL), (155811669UL), (806806587UL), (2732631168UL), (4046198728UL), (1163969880UL), (401165422UL), (2661074778UL), (4156963191UL), (2003518762UL), (2322579561UL), (2834948318UL), (2877210497UL), (2420260153UL), (326741418UL), (170239236UL), (3102718549UL), (2468707423UL), (1857088312UL), (3936056808UL), (3868693408UL), (3966666208UL), (605079895UL), (2982506620UL), (2354705582UL), (2066859537UL), (3764975545UL), (3257514114UL), (1826578604UL), (3017501686UL), (2964604045UL), (615820785UL), (3355718142UL), (1734641780UL), (1681548103UL), (4091225681UL), (3198436002UL), (4077346785UL), (2890101344UL), (416470693UL), (2612861218UL), (96583076UL), (2656389382UL), (1858181040UL), (3104217288UL), (3639170895UL), (349324012UL), (973368008UL), (1221885324UL), (601524567UL), (2258432445UL), (253685576UL), (1795442656UL), (2984366093UL), (1875491903UL), (3831166882UL), (248935329UL), (4198638255UL), (899943985UL), (2182697927UL), (715173523UL), (3213394756UL), (3991058999UL), (3547259355UL), (1472237612UL), (2393072396UL), (1987715385UL), (186174448UL), (3542284780UL), (2160848139UL), (3731857267UL), (2071022105UL), (2418702276UL), (1307933032UL), (3815354311UL), (4262274779UL), (144370664UL), (387339882UL), (2969593895UL), (4240850623UL), (1923698215UL), (2394736611UL), (1588159469UL), (1216733801UL), (322523795UL), (2907069566UL), (4064263898UL), (3364657275UL), (3466973302UL), (2920715858UL), (2234542580UL), (3405101812UL), (2008178784UL), (2284268924UL), (1936025139UL), (1349323372UL), (2560273821UL), (99331403UL), (3027640949UL), (859541953UL), (4200786664UL), (1446442417UL), (931795812UL), (1075567424UL), (1876635772UL), (1659632304UL), (1201513613UL), (521233400UL), (1891915904UL), (3949233865UL), (763590809UL), (2815447944UL), (4121073768UL), (1045110727UL), (2522258582UL), (4131040734UL), (2485035329UL), (911370656UL), (181884066UL), (2467886009UL), (4104473807UL), (2078819341UL), (4236934380UL), (3224468239UL), (603014155UL), (1241850776UL), (2666895496UL), (655783844UL), (1423101410UL), (673119756UL), (2025898966UL), (3595439673UL), (4074128009UL), (3081088543UL), (4100445818UL), (218474476UL), (872453917UL), (2388253717UL), (4173455215UL), (2395519424UL), (250328312UL), (4188764388UL), (3786597763UL), (380587236UL), (4292608797UL), (1937652040UL), (625538006UL), (619747082UL), (1050293267UL), (2989616803UL), (1140055765UL), (2128289331UL), (1083185007UL), (1893842085UL), (3313934002UL), (2298055548UL), (2486133065UL), (2043467942UL), (2799650657UL), (1804808801UL), (1235949580UL), (928582681UL), (155811669UL), (806806587UL), (2864892828UL), (4046198728UL), (1163969880UL), (401165422UL), (2661074778UL), (2946769376UL), (2003518762UL), (2322579561UL), (2834948318UL), (2877210497UL), (2647485275UL), (326741418UL), (170239236UL), (3102718549UL), (2468707423UL), (2520336801UL), (3936056808UL), (3868693408UL), (3966666208UL), (605079895UL), (2949706551UL), (2354705582UL), (2066859537UL), (3764975545UL), (3257514114UL), (495003693UL), (3017501686UL), (2964604045UL), (615820785UL), (3355718142UL), (3799230297UL), (1681548103UL), (4091225681UL), (3198436002UL), (4077346785UL), (258363842UL), (416470693UL), (2612861218UL), (96583076UL), (2656389382UL), (2198085634UL), (1607235362UL), (694172175UL), (4194347563UL), (2665732891UL), (3419430286UL), (597070176UL), (2749480905UL), (3937535348UL), (3639873850UL), (2050067843UL), (4045290683UL), (2964298196UL), (3631595287UL), (1409808193UL), (121765438UL), (2129412744UL), (2497437101UL), (2664102876UL), (1773441464UL), (1708052456UL), (2923764322UL), (3350385352UL), (1592204280UL), (1118221370UL), (3416016313UL), (116121364UL), (1179473397UL), (1497519022UL), (902569114UL), (3840281863UL), (2783662797UL), (1712084322UL), (1982884601UL), (3625797892UL), (4222938993UL), (3231134134UL), (3046745397UL), (446484563UL), (1133869192UL), (2622178726UL), (3881085862UL), (4012894217UL), (391734322UL), (2089696890UL), (1304197030UL), (2663978386UL), (1685998658UL), (4238620912UL), (448351665UL), (2724524045UL), (1038754164UL), (413586547UL), (3107681687UL), (1454664365UL), (3353731192UL), (128440996UL), (565817989UL), (127978294UL), (1043863326UL), (1747369107UL), (2772246481UL), (172569313UL), (2740699699UL), (3417082503UL), (2103702630UL), (2139566116UL), (1378864710UL), (2444170529UL), (3234220221UL), (3974870858UL), (1965162347UL), (956763257UL), (3932467825UL), (1077337271UL), (4084837149UL), (3699147465UL), (1882164226UL), (236113740UL), (3116302858UL), (2730529598UL), (3449804672UL), (4002370655UL), (2011573068UL), (1551746089UL), (3917496971UL), (2852603UL), (1682999535UL), (2764817908UL), (2489487254UL), (261936311UL), (3122421452UL), (1199382345UL), (2617247590UL), (1909026938UL), (3156073069UL), (1492533764UL), (97847107UL), (1260892586UL), (187242945UL), (1286471861UL), (1763024967UL), (127723419UL), (210606273UL), (228546401UL), (3249879676UL), (482069954UL), (383075106UL), (3263105259UL), (2242748676UL), (1105681409UL), (4033144425UL), (4017983282UL), (1670425353UL), (4040882785UL), (1780687273UL), (1405678015UL), (3076115981UL), (2713472488UL), (286336494UL), (3664225263UL), (502759060UL), (777620620UL), (635590826UL), (132236203UL), (1866406173UL), (1235046453UL), (2859554298UL), (121814656UL), (944976320UL), (1946494170UL), (2548097575UL), (415384946UL), (3934685646UL), (1507032178UL), (1383654007UL), (2906269630UL), (566005756UL), (3118733139UL), (2969075870UL), (1834096359UL), (3263358416UL), (1322979710UL), (904583023UL), (3582075094UL), (2298898632UL), (2491891941UL), (660351763UL), (2548592542UL), (3009200751UL), (2116595110UL), (2623212287UL), (4167133624UL), (196759529UL), (3038645579UL), (1769704552UL), (1713233322UL), (2127497999UL), (3849458221UL), (3769872265UL)}, {(51082211UL), (3347503176UL), (3221768777UL), (2986163981UL), (3937460013UL), (1716372908UL), (4132024211UL), (3035957293UL), (1791036224UL), (4214815056UL), (1645540011UL), (2629793790UL), (3185505897UL), (1855718954UL), (495459467UL), (1728339314UL), (2318396341UL), (3396602050UL), (3273624616UL), (2625973148UL), (1762905939UL), (1706358553UL), (1088424264UL), (2764318930UL), (1026127380UL), (1128004134UL), (2724553694UL), (41981087UL), (2304966004UL), (1342745986UL), (3425554050UL), (3537673465UL), (752263676UL), (280905885UL), (929399589UL), (4090689526UL), (2141254732UL), (1469491656UL), (2593100469UL), (1096008340UL), (3316809312UL), (1698245188UL), (1656427920UL), (3081873338UL), (1750515301UL), (3850483440UL), (4081834419UL), (1225164947UL), (1244139942UL), (1972663124UL), (116832506UL), (3097397897UL), (961156503UL), (1899056660UL), (1659173175UL), (1890464921UL), (1891872926UL), (191259956UL), (1735304734UL), (4246751855UL), (4285601625UL), (1495519933UL), (3398829761UL), (997567482UL), (2277782972UL), (1286922996UL), (3120709698UL), (15569196UL), (191501283UL), (3916619528UL), (1552075789UL), (4259725643UL), (2837166910UL), (2231584792UL), (1912204495UL), (2597304083UL), (4147585653UL), (1021482843UL), (2003417305UL), (186794491UL), (3608172979UL), (1991038123UL), (97515853UL), (34341352UL), (4163491231UL), (1046079304UL), (4105813389UL), (3589099183UL), (3970004064UL), (3899560802UL), (4148331147UL), (2267137817UL), (85024486UL), (3019925981UL), (3069231953UL), (1563669137UL), (314080592UL), (2943111861UL), (2838243982UL), (726216848UL), (2621853102UL), (2355885175UL), (3359668856UL), (1111296541UL), (2330283124UL), (3626558972UL), (4290084148UL), (1632078UL), (1047440803UL), (1350377197UL), (2490578842UL), (2366345698UL), (1628128899UL), (860259543UL), (1937956234UL), (2833820527UL), (329818923UL), (648489148UL), (1791961202UL), (1652322723UL), (1513419073UL), (149629345UL), (2468961221UL), (3711837973UL), (2377333831UL), (1434755773UL), (3808719305UL), (2513270108UL), (2701064683UL), (3097011724UL), (303393137UL), (1346302239UL), (1852307302UL), (850106025UL), (2473124483UL), (2853497268UL), (3786573704UL), (2604101162UL), (1446573486UL), (506925220UL), (3138967488UL), (2973528682UL), (2752811123UL), (2890321579UL), (1037196362UL), (1335670403UL), (1560253777UL), (1437495434UL), (2700525242UL), (4259933972UL), (3870707795UL), (4141538580UL), (3375331039UL), (3081538601UL), (3129978494UL), (3689191993UL), (1933431212UL), (2196145886UL), (87814045UL), (878611347UL), (812542698UL), (51082211UL), (3347503176UL), (3221768777UL), (2986163981UL), (277257023UL), (1716372908UL), (4132024211UL), (3035957293UL), (1791036224UL), (2713916211UL), (1645540011UL), (2629793790UL), (3185505897UL), (1855718954UL), (3800150234UL), (1728339314UL), (2318396341UL), (3396602050UL), (3273624616UL), (2530282967UL), (1762905939UL), (1706358553UL), (1088424264UL), (2764318930UL), (4224669506UL), (1128004134UL), (2724553694UL), (41981087UL), (2304966004UL), (484289311UL), (3425554050UL), (3537673465UL), (752263676UL), (280905885UL), (657028134UL), (4090689526UL), (2141254732UL), (1469491656UL), (2593100469UL), (2089385540UL), (3316809312UL), (1698245188UL), (1656427920UL), (3081873338UL), (2750354264UL), (3850483440UL), (4081834419UL), (1225164947UL), (1244139942UL), (3432605739UL), (116832506UL), (3097397897UL), (961156503UL), (1899056660UL), (2234120716UL), (1890464921UL), (1891872926UL), (191259956UL), (1735304734UL), (125359575UL), (4285601625UL), (1495519933UL), (3398829761UL), (997567482UL), (4034254942UL), (1286922996UL), (3120709698UL), (15569196UL), (191501283UL), (2090684174UL), (1552075789UL), (4259725643UL), (2837166910UL), (2231584792UL), (3412758413UL), (2597304083UL), (4147585653UL), (1021482843UL), (2003417305UL), (2464533361UL), (3608172979UL), (1991038123UL), (97515853UL), (34341352UL), (2634732952UL), (1046079304UL), (4105813389UL), (3589099183UL), (3970004064UL), (4263828421UL), (4148331147UL), (2267137817UL), (85024486UL), (3019925981UL), (3229477751UL), (1563669137UL), (314080592UL), (2943111861UL), (2838243982UL), (1274664774UL), (2621853102UL), (2355885175UL), (3359668856UL), (1111296541UL), (1615234696UL), (3626558972UL), (4290084148UL), (1632078UL), (1047440803UL), (623898652UL), (2490578842UL), (2366345698UL), (1628128899UL), (860259543UL), (2097114662UL), (2833820527UL), (329818923UL), (648489148UL), (1791961202UL), (1730000077UL), (1513419073UL), (149629345UL), (2468961221UL), (3711837973UL), (3255238414UL), (1434755773UL), (3808719305UL), (2513270108UL), (2701064683UL), (1635042488UL), (303393137UL), (1346302239UL), (1852307302UL), (850106025UL), (3523245944UL), (2853497268UL), (3786573704UL), (2604101162UL), (1446573486UL), (1011238489UL), (3138967488UL), (2973528682UL), (2752811123UL), (2890321579UL), (1044586909UL), (1335670403UL), (1560253777UL), (1437495434UL), (2700525242UL), (608940900UL), (3870707795UL), (4141538580UL), (3375331039UL), (3081538601UL), (728626935UL), (3689191993UL), (1933431212UL), (2196145886UL), (87814045UL), (646732047UL), (812542698UL), (51082211UL), (3347503176UL), (3221768777UL), (1783601443UL), (277257023UL), (1716372908UL), (4132024211UL), (3035957293UL), (3363442238UL), (2713916211UL), (1645540011UL), (2629793790UL), (3185505897UL), (2066587565UL), (3800150234UL), (1728339314UL), (2318396341UL), (3396602050UL), (2279941522UL), (2530282967UL), (1762905939UL), (1706358553UL), (1088424264UL), (2989326347UL), (4224669506UL), (1128004134UL), (2724553694UL), (41981087UL), (2348931916UL), (484289311UL), (3425554050UL), (3537673465UL), (752263676UL), (3169550883UL), (657028134UL), (4090689526UL), (2141254732UL), (1469491656UL), (1152943917UL), (2089385540UL), (3316809312UL), (1698245188UL), (1656427920UL), (1808689833UL), (2750354264UL), (3850483440UL), (4081834419UL), (1225164947UL), (2422106046UL), (3432605739UL), (116832506UL), (3097397897UL), (961156503UL), (1581804167UL), (2234120716UL), (1890464921UL), (1891872926UL), (191259956UL), (4113708001UL), (125359575UL), (4285601625UL), (1495519933UL), (3398829761UL), (3473435310UL), (4034254942UL), (1286922996UL), (3120709698UL), (15569196UL), (3122200488UL), (2090684174UL), (1552075789UL), (4259725643UL), (2837166910UL), (2838170407UL), (3412758413UL), (2597304083UL), (4147585653UL), (1021482843UL), (954000150UL), (2464533361UL), (3608172979UL), (1991038123UL), (97515853UL), (3832321348UL), (2634732952UL), (1046079304UL), (4105813389UL), (3589099183UL), (1288675572UL), (4263828421UL), (4148331147UL), (2267137817UL), (85024486UL), (1080403742UL), (3229477751UL), (1563669137UL), (314080592UL), (2943111861UL), (3357655593UL), (1274664774UL), (2621853102UL), (2355885175UL), (3359668856UL), (3722440291UL), (1615234696UL), (3626558972UL), (4290084148UL), (1632078UL), (4263556325UL), (623898652UL), (2490578842UL), (2366345698UL), (1628128899UL), (3623136669UL), (2097114662UL), (2833820527UL), (329818923UL), (648489148UL), (592747007UL), (1730000077UL), (1513419073UL), (149629345UL), (2468961221UL), (3766709284UL), (3255238414UL), (1434755773UL), (3808719305UL), (2513270108UL), (1958651003UL), (1635042488UL), (303393137UL), (1346302239UL), (1852307302UL), (579487408UL), (3523245944UL), (2853497268UL), (3786573704UL), (2604101162UL), (4183724981UL), (1011238489UL), (3138967488UL), (2973528682UL), (2752811123UL), (3074709397UL), (1044586909UL), (1335670403UL), (1560253777UL), (1437495434UL), (1237099522UL), (608940900UL), (3870707795UL), (4141538580UL), (3375331039UL), (2032507604UL), (728626935UL), (3689191993UL), (1933431212UL), (2196145886UL), (4008131891UL), (646732047UL), (812542698UL), (51082211UL), (3347503176UL), (3622107037UL), (1783601443UL), (277257023UL), (1716372908UL), (4132024211UL), (1264285659UL), (3363442238UL), (2713916211UL), (1645540011UL), (2629793790UL), (2179309595UL), (2066587565UL), (3800150234UL), (1728339314UL), (2318396341UL), (580990822UL), (2279941522UL), (2530282967UL), (1762905939UL), (1706358553UL), (2826056883UL), (2989326347UL), (4224669506UL), (1128004134UL), (2724553694UL), (1486392636UL), (2348931916UL), (484289311UL), (3425554050UL), (3537673465UL), (2497657189UL), (3169550883UL), (657028134UL), (4090689526UL), (2141254732UL), (1019244016UL), (1152943917UL), (2089385540UL), (3316809312UL), (1698245188UL), (2921739456UL), (1808689833UL), (2750354264UL), (3850483440UL), (4081834419UL), (108425527UL), (2422106046UL), (3432605739UL), (116832506UL), (3097397897UL), (3902994002UL), (1581804167UL), (2234120716UL), (1890464921UL), (1891872926UL), (3428861050UL), (4113708001UL), (125359575UL), (4285601625UL), (1495519933UL), (3350053832UL), (3473435310UL), (4034254942UL), (1286922996UL), (3120709698UL), (2906201347UL), (3122200488UL), (2090684174UL), (1552075789UL), (4259725643UL), (1965598685UL), (2838170407UL), (3412758413UL), (2597304083UL), (4147585653UL), (3335631208UL), (954000150UL), (2464533361UL), (3608172979UL), (1991038123UL), (3788034599UL), (3832321348UL), (2634732952UL), (1046079304UL), (4105813389UL), (2362460804UL), (1288675572UL), (4263828421UL), (4148331147UL), (2267137817UL), (2767331798UL), (1080403742UL), (3229477751UL), (1563669137UL), (314080592UL), (1737897403UL), (3357655593UL), (1274664774UL), (2621853102UL), (2355885175UL), (57997639UL), (3722440291UL), (1615234696UL), (3626558972UL), (4290084148UL), (3703113369UL), (4263556325UL), (623898652UL), (2490578842UL), (2366345698UL), (73788443UL), (3623136669UL), (2097114662UL), (2833820527UL), (329818923UL), (253042650UL), (592747007UL), (1730000077UL), (1513419073UL), (149629345UL), (4248302934UL), (3766709284UL), (3255238414UL), (1434755773UL), (3808719305UL), (3698431827UL), (1958651003UL), (1635042488UL), (303393137UL), (1346302239UL), (3872433842UL), (579487408UL), (3523245944UL), (2853497268UL), (3786573704UL), (3459185849UL), (4183724981UL), (1011238489UL), (3138967488UL), (2973528682UL), (2605373899UL), (3074709397UL), (1044586909UL), (1335670403UL), (1560253777UL), (4069724875UL), (1237099522UL), (608940900UL), (3870707795UL), (4141538580UL), (2550307954UL), (2032507604UL), (728626935UL), (3689191993UL), (1933431212UL), (1177640824UL), (4168589688UL), (1361487780UL), (2649612520UL), (2181448948UL), (2176288560UL), (947907377UL), (3772487849UL), (2002599877UL), (3353450532UL), (2013145251UL), (2357912348UL), (2316997609UL), (2355480213UL), (255142205UL), (751273749UL), (4049362748UL), (1434168014UL), (2069693747UL), (6910933UL), (1352778547UL), (2413649875UL), (4238683558UL), (484497407UL), (522555106UL), (1848417180UL), (3001805499UL), (2264939603UL), (3606143565UL), (1782482647UL), (2955918436UL), (3471474379UL), (2814133839UL), (3779337475UL), (3522102195UL), (1551792178UL), (3742001759UL), (3433504551UL), (472918932UL), (3835854229UL), (4259163014UL), (4103952359UL), (1989474190UL), (1792448078UL), (1517735224UL), (1958036884UL), (2277922531UL), (2856192348UL), (4294188732UL), (2674247971UL), (643649427UL), (3847742408UL), (1512435795UL), (4236693554UL), (1749045838UL), (397093640UL), (2940663643UL), (4156440725UL), (188785143UL), (3894740830UL), (897618321UL), (3333498692UL), (1623924612UL), (4111607062UL), (2242558573UL), (1565861815UL), (1177957654UL), (4129621176UL), (2232443247UL), (3216995984UL), (3313294700UL), (791442469UL), (1782204490UL), (2452634246UL), (1288014576UL), (1347365377UL), (112254281UL), (2044140398UL), (2479591984UL), (3293701920UL), (1062335151UL), (1397230369UL), (2460086085UL), (2412349474UL), (1252633202UL), (3704541545UL), (2132499200UL), (2202058121UL), (1981543691UL), (2683673516UL), (1198109770UL), (4279157703UL), (2224504258UL), (2188868731UL), (769314834UL), (601313429UL), (3595357440UL), (561383123UL), (3444949507UL), (2127327734UL), (2865252582UL), (4181002098UL), (2408426518UL), (309361635UL), (2377703815UL), (1109219406UL), (406287309UL), (1750179098UL), (3619129839UL), (937928728UL), (884423945UL), (928407281UL), (4173634172UL), (1492070114UL), (2706943441UL), (1365883971UL), (3076484301UL), (744370087UL), (4004118884UL), (2199449568UL), (879458863UL), (3197725005UL), (3590586547UL), (59693002UL), (3614114662UL), (1499386564UL), (2914582708UL), (3751842429UL), (947438603UL), (1986129491UL), (3747112289UL), (833777768UL), (2231649410UL), (1841607849UL), (3526253103UL), (3797105813UL), (1291185911UL), (3188408549UL), (3311027691UL), (3983681758UL), (2246511800UL), (1271525377UL), (2996265908UL), (2396071405UL), (902427181UL), (164636454UL), (2459631341UL), (635349368UL), (463309029UL), (1409367654UL), (849052250UL), (3221786769UL), (2310288531UL), (2919204855UL), (1263130532UL), (1215722704UL), (3497322658UL), (2840687222UL), (2185004161UL), (1507335864UL)}, {(2052557448UL), (2879065999UL), (22933757UL), (2160014758UL), (3736092460UL), (3556641619UL), (1350613766UL), (2107757927UL), (309323868UL), (3452852627UL), (3424626316UL), (545651740UL), (1935764720UL), (2349926457UL), (3546577033UL), (862046434UL), (167198649UL), (338290297UL), (1145807303UL), (1571276102UL), (883549156UL), (907871968UL), (638566313UL), (678764227UL), (3795356864UL), (3306095271UL), (1452688488UL), (621126888UL), (1838613968UL), (2054107827UL), (1785040579UL), (454879400UL), (1952849106UL), (1907701866UL), (1639495252UL), (1623968604UL), (2997422000UL), (2633878652UL), (1036670775UL), (2191465943UL), (3053533585UL), (1654709920UL), (1950620393UL), (4177745509UL), (1742007818UL), (2888573892UL), (2825965566UL), (1399790365UL), (1307674482UL), (310692416UL), (384880529UL), (3497622676UL), (1024664651UL), (1541456182UL), (1904670217UL), (1008618602UL), (2816673160UL), (684112698UL), (3332034744UL), (3646613828UL), (962627614UL), (3072103948UL), (3713153075UL), (476323310UL), (3243124597UL), (126319837UL), (2155412848UL), (228580793UL), (2142696490UL), (3442722759UL), (2689599232UL), (426191419UL), (3157759186UL), (100239709UL), (494534049UL), (1259677734UL), (2889209278UL), (1754641396UL), (1057778427UL), (2133253617UL), (1298500018UL), (3340348062UL), (3967049659UL), (2927469144UL), (1503854147UL), (2271956463UL), (3004309866UL), (260248338UL), (2570702480UL), (2067671015UL), (3168497089UL), (361311552UL), (2123195373UL), (2825457193UL), (2599488181UL), (507483626UL), (1201669979UL), (910763802UL), (4158584821UL), (3116016424UL), (3375736126UL), (2857697336UL), (3112473104UL), (2683465481UL), (1495348009UL), (681020485UL), (4044713962UL), (2443109893UL), (129994063UL), (1710251126UL), (820410567UL), (601527649UL), (1007603132UL), (2096580480UL), (1942768885UL), (1984297765UL), (1888157243UL), (960265104UL), (527990410UL), (1572910026UL), (1106822080UL), (1472807331UL), (2465011897UL), (3139401215UL), (3705452371UL), (393081842UL), (3826516196UL), (2576499701UL), (4130037087UL), (4155028170UL), (2188282304UL), (2949056849UL), (1138928618UL), (858751984UL), (3735375571UL), (496972334UL), (830265621UL), (1355757111UL), (909444416UL), (1337622259UL), (2616327935UL), (2337227347UL), (2139876075UL), (4269663356UL), (796316592UL), (1893005585UL), (3958551664UL), (1746456069UL), (2430709714UL), (4025417573UL), (3333292799UL), (1833607331UL), (3864559081UL), (3415700826UL), (3291421244UL), (1987321873UL), (1792851165UL), (505718946UL), (3755903648UL), (3351468604UL), (4035552813UL), (2052557448UL), (2879065999UL), (22933757UL), (2160014758UL), (2321387515UL), (3556641619UL), (1350613766UL), (2107757927UL), (309323868UL), (1850700415UL), (3424626316UL), (545651740UL), (1935764720UL), (2349926457UL), (979047283UL), (862046434UL), (167198649UL), (338290297UL), (1145807303UL), (4201635137UL), (883549156UL), (907871968UL), (638566313UL), (678764227UL), (2637527083UL), (3306095271UL), (1452688488UL), (621126888UL), (1838613968UL), (117966344UL), (1785040579UL), (454879400UL), (1952849106UL), (1907701866UL), (733998186UL), (1623968604UL), (2997422000UL), (2633878652UL), (1036670775UL), (3360491537UL), (3053533585UL), (1654709920UL), (1950620393UL), (4177745509UL), (1716078578UL), (2888573892UL), (2825965566UL), (1399790365UL), (1307674482UL), (2776111761UL), (384880529UL), (3497622676UL), (1024664651UL), (1541456182UL), (618916624UL), (1008618602UL), (2816673160UL), (684112698UL), (3332034744UL), (3340690804UL), (962627614UL), (3072103948UL), (3713153075UL), (476323310UL), (902990902UL), (126319837UL), (2155412848UL), (228580793UL), (2142696490UL), (4254301999UL), (2689599232UL), (426191419UL), (3157759186UL), (100239709UL), (3216403640UL), (1259677734UL), (2889209278UL), (1754641396UL), (1057778427UL), (3221479262UL), (1298500018UL), (3340348062UL), (3967049659UL), (2927469144UL), (3926654939UL), (2271956463UL), (3004309866UL), (260248338UL), (2570702480UL), (1879451653UL), (3168497089UL), (361311552UL), (2123195373UL), (2825457193UL), (341920668UL), (507483626UL), (1201669979UL), (910763802UL), (4158584821UL), (3748705813UL), (3375736126UL), (2857697336UL), (3112473104UL), (2683465481UL), (3336305747UL), (681020485UL), (4044713962UL), (2443109893UL), (129994063UL), (2578353596UL), (820410567UL), (601527649UL), (1007603132UL), (2096580480UL), (3155251071UL), (1984297765UL), (1888157243UL), (960265104UL), (527990410UL), (2548692624UL), (1106822080UL), (1472807331UL), (2465011897UL), (3139401215UL), (736629379UL), (393081842UL), (3826516196UL), (2576499701UL), (4130037087UL), (2440227627UL), (2188282304UL), (2949056849UL), (1138928618UL), (858751984UL), (191805249UL), (496972334UL), (830265621UL), (1355757111UL), (909444416UL), (396738554UL), (2616327935UL), (2337227347UL), (2139876075UL), (4269663356UL), (3932761947UL), (1893005585UL), (3958551664UL), (1746456069UL), (2430709714UL), (3171160829UL), (3333292799UL), (1833607331UL), (3864559081UL), (3415700826UL), (1332800826UL), (1987321873UL), (1792851165UL), (505718946UL), (3755903648UL), (1770588062UL), (4035552813UL), (2052557448UL), (2879065999UL), (22933757UL), (3159941473UL), (2321387515UL), (3556641619UL), (1350613766UL), (2107757927UL), (2669366188UL), (1850700415UL), (3424626316UL), (545651740UL), (1935764720UL), (3252475208UL), (979047283UL), (862046434UL), (167198649UL), (338290297UL), (771814471UL), (4201635137UL), (883549156UL), (907871968UL), (638566313UL), (184144160UL), (2637527083UL), (3306095271UL), (1452688488UL), (621126888UL), (4275587594UL), (117966344UL), (1785040579UL), (454879400UL), (1952849106UL), (3806424990UL), (733998186UL), (1623968604UL), (2997422000UL), (2633878652UL), (2670843077UL), (3360491537UL), (3053533585UL), (1654709920UL), (1950620393UL), (3541927406UL), (1716078578UL), (2888573892UL), (2825965566UL), (1399790365UL), (3184295779UL), (2776111761UL), (384880529UL), (3497622676UL), (1024664651UL), (723804135UL), (618916624UL), (1008618602UL), (2816673160UL), (684112698UL), (3275521308UL), (3340690804UL), (962627614UL), (3072103948UL), (3713153075UL), (2023106558UL), (902990902UL), (126319837UL), (2155412848UL), (228580793UL), (3978575748UL), (4254301999UL), (2689599232UL), (426191419UL), (3157759186UL), (2446138116UL), (3216403640UL), (1259677734UL), (2889209278UL), (1754641396UL), (1706032491UL), (3221479262UL), (1298500018UL), (3340348062UL), (3967049659UL), (3805001240UL), (3926654939UL), (2271956463UL), (3004309866UL), (260248338UL), (294480880UL), (1879451653UL), (3168497089UL), (361311552UL), (2123195373UL), (2080604411UL), (341920668UL), (507483626UL), (1201669979UL), (910763802UL), (2012149356UL), (3748705813UL), (3375736126UL), (2857697336UL), (3112473104UL), (2935748807UL), (3336305747UL), (681020485UL), (4044713962UL), (2443109893UL), (2862982895UL), (2578353596UL), (820410567UL), (601527649UL), (1007603132UL), (1890290066UL), (3155251071UL), (1984297765UL), (1888157243UL), (960265104UL), (41870487UL), (2548692624UL), (1106822080UL), (1472807331UL), (2465011897UL), (2382974023UL), (736629379UL), (393081842UL), (3826516196UL), (2576499701UL), (4219335149UL), (2440227627UL), (2188282304UL), (2949056849UL), (1138928618UL), (3785297102UL), (191805249UL), (496972334UL), (830265621UL), (1355757111UL), (3962907313UL), (396738554UL), (2616327935UL), (2337227347UL), (2139876075UL), (552154011UL), (3932761947UL), (1893005585UL), (3958551664UL), (1746456069UL), (895507243UL), (3171160829UL), (3333292799UL), (1833607331UL), (3864559081UL), (3564325554UL), (1332800826UL), (1987321873UL), (1792851165UL), (505718946UL), (3245448088UL), (1770588062UL), (4035552813UL), (2052557448UL), (2879065999UL), (3602157977UL), (3159941473UL), (2321387515UL), (3556641619UL), (1350613766UL), (4101259055UL), (2669366188UL), (1850700415UL), (3424626316UL), (545651740UL), (2873707882UL), (3252475208UL), (979047283UL), (862046434UL), (167198649UL), (654196140UL), (771814471UL), (4201635137UL), (883549156UL), (907871968UL), (191965184UL), (184144160UL), (2637527083UL), (3306095271UL), (1452688488UL), (1562736568UL), (4275587594UL), (117966344UL), (1785040579UL), (454879400UL), (3484019450UL), (3806424990UL), (733998186UL), (1623968604UL), (2997422000UL), (273316614UL), (2670843077UL), (3360491537UL), (3053533585UL), (1654709920UL), (591311873UL), (3541927406UL), (1716078578UL), (2888573892UL), (2825965566UL), (2277117038UL), (3184295779UL), (2776111761UL), (384880529UL), (3497622676UL), (1086566797UL), (723804135UL), (618916624UL), (1008618602UL), (2816673160UL), (3344392942UL), (3275521308UL), (3340690804UL), (962627614UL), (3072103948UL), (2910444460UL), (2023106558UL), (902990902UL), (126319837UL), (2155412848UL), (337119596UL), (3978575748UL), (4254301999UL), (2689599232UL), (426191419UL), (3471778695UL), (2446138116UL), (3216403640UL), (1259677734UL), (2889209278UL), (4102983766UL), (1706032491UL), (3221479262UL), (1298500018UL), (3340348062UL), (2940293024UL), (3805001240UL), (3926654939UL), (2271956463UL), (3004309866UL), (3634668003UL), (294480880UL), (1879451653UL), (3168497089UL), (361311552UL), (3417679321UL), (2080604411UL), (341920668UL), (507483626UL), (1201669979UL), (3174274528UL), (2012149356UL), (3748705813UL), (3375736126UL), (2857697336UL), (3929686609UL), (2935748807UL), (3336305747UL), (681020485UL), (4044713962UL), (405011299UL), (2862982895UL), (2578353596UL), (820410567UL), (601527649UL), (4281957726UL), (1890290066UL), (3155251071UL), (1984297765UL), (1888157243UL), (1978308818UL), (41870487UL), (2548692624UL), (1106822080UL), (1472807331UL), (3701147046UL), (2382974023UL), (736629379UL), (393081842UL), (3826516196UL), (3225163595UL), (4219335149UL), (2440227627UL), (2188282304UL), (2949056849UL), (3894577191UL), (3785297102UL), (191805249UL), (496972334UL), (830265621UL), (4293577013UL), (3962907313UL), (396738554UL), (2616327935UL), (2337227347UL), (3701032380UL), (552154011UL), (3932761947UL), (1893005585UL), (3958551664UL), (4148575672UL), (895507243UL), (3171160829UL), (3333292799UL), (1833607331UL), (1596419195UL), (3564325554UL), (1332800826UL), (1987321873UL), (1792851165UL), (3663406943UL), (3892533309UL), (247565591UL), (953356243UL), (4103354183UL), (1908418768UL), (3915294912UL), (2390669489UL), (3865260287UL), (1818313429UL), (557880278UL), (2499771815UL), (2618380525UL), (732785004UL), (1414011135UL), (2858311749UL), (3871596970UL), (2428464498UL), (645476041UL), (683035653UL), (4079609082UL), (2404111028UL), (3332056297UL), (3054547484UL), (3616426087UL), (1311379849UL), (3682136336UL), (3795847093UL), (1509718393UL), (541389178UL), (1103876446UL), (2549442278UL), (3656600574UL), (3019560735UL), (523610761UL), (3889482885UL), (3080739216UL), (2359120072UL), (1034857006UL), (63567637UL), (1520176098UL), (1741685274UL), (2330217396UL), (1429674399UL), (517809884UL), (2653145241UL), (868296581UL), (646514407UL), (3166145188UL), (3023629813UL), (2333851648UL), (2967365394UL), (1828821737UL), (3333092181UL), (445460259UL), (2682093551UL), (3655100102UL), (2592872076UL), (1588368999UL), (3964958220UL), (755397374UL), (1912970603UL), (396253754UL), (4260038354UL), (1530898510UL), (2396805917UL), (3327501452UL), (4235709361UL), (2762163349UL), (553869167UL), (3162483580UL), (1611891352UL), (248738605UL), (3403092967UL), (2194464420UL), (113420452UL), (1752444845UL), (3770903547UL), (2397481985UL), (2866414964UL), (2555678075UL), (2796010061UL), (762034588UL), (2679383682UL), (1848516655UL), (3857720381UL), (1119111363UL), (1829110546UL), (2183620391UL), (1743838702UL), (3363053704UL), (2212810289UL), (966205413UL), (3897281091UL), (2148139678UL), (2690229390UL), (427450194UL), (3516115778UL), (1864991059UL), (134448489UL), (3397232480UL), (3999530682UL), (1927036992UL), (3170864927UL), (3879295489UL), (134554462UL), (3447324105UL), (86678510UL), (1656551206UL), (2844494044UL), (2469678938UL), (2885597732UL), (2715483555UL), (3566904604UL), (462585182UL), (1922457093UL), (3035264235UL), (2866504077UL), (2031456720UL), (1598555964UL), (2569915450UL), (3947972758UL), (290683210UL), (2465427488UL), (3504862176UL), (793156806UL), (1722326752UL), (2706215067UL), (3818976191UL), (2007064241UL), (552144413UL), (2692866408UL), (3975075075UL), (4293828741UL), (1123460373UL), (960845744UL), (1855626484UL), (1876934434UL), (1343778249UL), (912185207UL), (127278206UL), (4168930635UL), (340393978UL), (65814528UL), (2552086271UL), (2507474816UL), (1240220220UL), (1761964455UL), (2204917500UL), (4088965101UL), (1079310398UL), (3071460742UL), (2188549805UL), (1064733776UL), (4191719087UL), (3221046115UL), (3772395288UL), (883516842UL), (2077853840UL), (229484673UL)}, {(448889887UL), (3508620909UL), (4164289950UL), (155254859UL), (298319697UL), (980080883UL), (3500794888UL), (3974907245UL), (682778656UL), (382798811UL), (1500342771UL), (3942535492UL), (1039809505UL), (2126581011UL), (561192171UL), (4046277638UL), (840733718UL), (1694555864UL), (241216466UL), (4182349979UL), (2525929010UL), (386794637UL), (349755829UL), (2959959729UL), (686974318UL), (3243688353UL), (3911051908UL), (3917458620UL), (441833800UL), (3164548257UL), (584185450UL), (450132281UL), (3528356519UL), (4275666503UL), (1317069624UL), (817077137UL), (2945430988UL), (1532878265UL), (2542155552UL), (3348614029UL), (1419611574UL), (1245233100UL), (1981161828UL), (1161647342UL), (2781439556UL), (3896025436UL), (2349200248UL), (1213899699UL), (860301545UL), (1590934964UL), (3371591516UL), (2850926464UL), (2774569126UL), (907316453UL), (3541736952UL), (3572719697UL), (278602945UL), (4257620354UL), (3396349537UL), (3144949411UL), (191271983UL), (2974056951UL), (2743594803UL), (1119054633UL), (815666748UL), (920991498UL), (187861899UL), (2008325469UL), (1548504646UL), (3749744762UL), (993523345UL), (1171349070UL), (4105576982UL), (1559471848UL), (2656434170UL), (2795453957UL), (3357293755UL), (4260164297UL), (2211998873UL), (1783238785UL), (2831224398UL), (1704939914UL), (2626903427UL), (1148581053UL), (849777796UL), (4219173763UL), (694869701UL), (1297370017UL), (3573985711UL), (1739242781UL), (3680794431UL), (400850360UL), (909653264UL), (1496585542UL), (460982606UL), (828640603UL), (3993062500UL), (2145047281UL), (1587836828UL), (912583500UL), (1234319994UL), (4276951314UL), (485282908UL), (1903750880UL), (1667769214UL), (3950976882UL), (3711912938UL), (3626058764UL), (627857875UL), (436470402UL), (1753727232UL), (50241405UL), (206782941UL), (612110492UL), (954016857UL), (2567547031UL), (3360482779UL), (820704062UL), (412722485UL), (2044763466UL), (1915626743UL), (2703000434UL), (2755090057UL), (53587450UL), (2457122208UL), (1397065983UL), (2822294224UL), (3024827428UL), (2201149820UL), (699377793UL), (157099022UL), (2792298089UL), (3927835437UL), (1095494739UL), (1230723791UL), (2740420278UL), (2518077381UL), (3674832547UL), (2375246835UL), (923451748UL), (3665432731UL), (1577970518UL), (2643388181UL), (4050379756UL), (1145072065UL), (1632232822UL), (2365350332UL), (1126185680UL), (930842061UL), (3816331201UL), (1624573114UL), (3809118349UL), (1187817320UL), (945407897UL), (63630679UL), (1852369563UL), (971772965UL), (2229069035UL), (2320405193UL), (3474864049UL), (1666937976UL), (448889887UL), (3508620909UL), (4164289950UL), (155254859UL), (3157319819UL), (980080883UL), (3500794888UL), (3974907245UL), (682778656UL), (3201604042UL), (1500342771UL), (3942535492UL), (1039809505UL), (2126581011UL), (3235144326UL), (4046277638UL), (840733718UL), (1694555864UL), (241216466UL), (2728337326UL), (2525929010UL), (386794637UL), (349755829UL), (2959959729UL), (20820947UL), (3243688353UL), (3911051908UL), (3917458620UL), (441833800UL), (4143649787UL), (584185450UL), (450132281UL), (3528356519UL), (4275666503UL), (3541347868UL), (817077137UL), (2945430988UL), (1532878265UL), (2542155552UL), (3199458552UL), (1419611574UL), (1245233100UL), (1981161828UL), (1161647342UL), (958085276UL), (3896025436UL), (2349200248UL), (1213899699UL), (860301545UL), (1701089635UL), (3371591516UL), (2850926464UL), (2774569126UL), (907316453UL), (1529987826UL), (3572719697UL), (278602945UL), (4257620354UL), (3396349537UL), (4120000342UL), (191271983UL), (2974056951UL), (2743594803UL), (1119054633UL), (4255116655UL), (920991498UL), (187861899UL), (2008325469UL), (1548504646UL), (100038488UL), (993523345UL), (1171349070UL), (4105576982UL), (1559471848UL), (2523523381UL), (2795453957UL), (3357293755UL), (4260164297UL), (2211998873UL), (3644225670UL), (2831224398UL), (1704939914UL), (2626903427UL), (1148581053UL), (1292003378UL), (4219173763UL), (694869701UL), (1297370017UL), (3573985711UL), (2510138592UL), (3680794431UL), (400850360UL), (909653264UL), (1496585542UL), (1738256576UL), (828640603UL), (3993062500UL), (2145047281UL), (1587836828UL), (3478998519UL), (1234319994UL), (4276951314UL), (485282908UL), (1903750880UL), (746205619UL), (3950976882UL), (3711912938UL), (3626058764UL), (627857875UL), (954627753UL), (1753727232UL), (50241405UL), (206782941UL), (612110492UL), (2251018875UL), (2567547031UL), (3360482779UL), (820704062UL), (412722485UL), (2120077037UL), (1915626743UL), (2703000434UL), (2755090057UL), (53587450UL), (2696843657UL), (1397065983UL), (2822294224UL), (3024827428UL), (2201149820UL), (3308142895UL), (157099022UL), (2792298089UL), (3927835437UL), (1095494739UL), (730099534UL), (2740420278UL), (2518077381UL), (3674832547UL), (2375246835UL), (2126745526UL), (3665432731UL), (1577970518UL), (2643388181UL), (4050379756UL), (2987545029UL), (1632232822UL), (2365350332UL), (1126185680UL), (930842061UL), (3140947362UL), (1624573114UL), (3809118349UL), (1187817320UL), (945407897UL), (1282799903UL), (1852369563UL), (971772965UL), (2229069035UL), (2320405193UL), (670134249UL), (1666937976UL), (448889887UL), (3508620909UL), (4164289950UL), (127045110UL), (3157319819UL), (980080883UL), (3500794888UL), (3974907245UL), (2740953010UL), (3201604042UL), (1500342771UL), (3942535492UL), (1039809505UL), (306788856UL), (3235144326UL), (4046277638UL), (840733718UL), (1694555864UL), (2260304655UL), (2728337326UL), (2525929010UL), (386794637UL), (349755829UL), (3842816805UL), (20820947UL), (3243688353UL), (3911051908UL), (3917458620UL), (3398227861UL), (4143649787UL), (584185450UL), (450132281UL), (3528356519UL), (550401017UL), (3541347868UL), (817077137UL), (2945430988UL), (1532878265UL), (1045681234UL), (3199458552UL), (1419611574UL), (1245233100UL), (1981161828UL), (1153297031UL), (958085276UL), (3896025436UL), (2349200248UL), (1213899699UL), (1451842347UL), (1701089635UL), (3371591516UL), (2850926464UL), (2774569126UL), (1269128107UL), (1529987826UL), (3572719697UL), (278602945UL), (4257620354UL), (2479560493UL), (4120000342UL), (191271983UL), (2974056951UL), (2743594803UL), (4081110580UL), (4255116655UL), (920991498UL), (187861899UL), (2008325469UL), (1300371976UL), (100038488UL), (993523345UL), (1171349070UL), (4105576982UL), (3010753279UL), (2523523381UL), (2795453957UL), (3357293755UL), (4260164297UL), (207153762UL), (3644225670UL), (2831224398UL), (1704939914UL), (2626903427UL), (916783095UL), (1292003378UL), (4219173763UL), (694869701UL), (1297370017UL), (3388725608UL), (2510138592UL), (3680794431UL), (400850360UL), (909653264UL), (2421730678UL), (1738256576UL), (828640603UL), (3993062500UL), (2145047281UL), (2123619770UL), (3478998519UL), (1234319994UL), (4276951314UL), (485282908UL), (4002661777UL), (746205619UL), (3950976882UL), (3711912938UL), (3626058764UL), (1230937254UL), (954627753UL), (1753727232UL), (50241405UL), (206782941UL), (460314337UL), (2251018875UL), (2567547031UL), (3360482779UL), (820704062UL), (1339598718UL), (2120077037UL), (1915626743UL), (2703000434UL), (2755090057UL), (660730207UL), (2696843657UL), (1397065983UL), (2822294224UL), (3024827428UL), (126840648UL), (3308142895UL), (157099022UL), (2792298089UL), (3927835437UL), (2192535935UL), (730099534UL), (2740420278UL), (2518077381UL), (3674832547UL), (1879512787UL), (2126745526UL), (3665432731UL), (1577970518UL), (2643388181UL), (832572764UL), (2987545029UL), (1632232822UL), (2365350332UL), (1126185680UL), (3248646182UL), (3140947362UL), (1624573114UL), (3809118349UL), (1187817320UL), (4270855000UL), (1282799903UL), (1852369563UL), (971772965UL), (2229069035UL), (3735782785UL), (670134249UL), (1666937976UL), (448889887UL), (3508620909UL), (3681408470UL), (127045110UL), (3157319819UL), (980080883UL), (3500794888UL), (3967872553UL), (2740953010UL), (3201604042UL), (1500342771UL), (3942535492UL), (613854690UL), (306788856UL), (3235144326UL), (4046277638UL), (840733718UL), (3957877023UL), (2260304655UL), (2728337326UL), (2525929010UL), (386794637UL), (1779451936UL), (3842816805UL), (20820947UL), (3243688353UL), (3911051908UL), (688470429UL), (3398227861UL), (4143649787UL), (584185450UL), (450132281UL), (3381050556UL), (550401017UL), (3541347868UL), (817077137UL), (2945430988UL), (1859551669UL), (1045681234UL), (3199458552UL), (1419611574UL), (1245233100UL), (53681099UL), (1153297031UL), (958085276UL), (3896025436UL), (2349200248UL), (1796144514UL), (1451842347UL), (1701089635UL), (3371591516UL), (2850926464UL), (1337394836UL), (1269128107UL), (1529987826UL), (3572719697UL), (278602945UL), (46913829UL), (2479560493UL), (4120000342UL), (191271983UL), (2974056951UL), (1361976701UL), (4081110580UL), (4255116655UL), (920991498UL), (187861899UL), (1237191391UL), (1300371976UL), (100038488UL), (993523345UL), (1171349070UL), (3168325479UL), (3010753279UL), (2523523381UL), (2795453957UL), (3357293755UL), (2142853843UL), (207153762UL), (3644225670UL), (2831224398UL), (1704939914UL), (2369686128UL), (916783095UL), (1292003378UL), (4219173763UL), (694869701UL), (4150182218UL), (3388725608UL), (2510138592UL), (3680794431UL), (400850360UL), (654034492UL), (2421730678UL), (1738256576UL), (828640603UL), (3993062500UL), (84735560UL), (2123619770UL), (3478998519UL), (1234319994UL), (4276951314UL), (2545204994UL), (4002661777UL), (746205619UL), (3950976882UL), (3711912938UL), (426068544UL), (1230937254UL), (954627753UL), (1753727232UL), (50241405UL), (589286339UL), (460314337UL), (2251018875UL), (2567547031UL), (3360482779UL), (3279873953UL), (1339598718UL), (2120077037UL), (1915626743UL), (2703000434UL), (2720159887UL), (660730207UL), (2696843657UL), (1397065983UL), (2822294224UL), (3536645029UL), (126840648UL), (3308142895UL), (157099022UL), (2792298089UL), (485214530UL), (2192535935UL), (730099534UL), (2740420278UL), (2518077381UL), (418832171UL), (1879512787UL), (2126745526UL), (3665432731UL), (1577970518UL), (721018UL), (832572764UL), (2987545029UL), (1632232822UL), (2365350332UL), (1769688764UL), (3248646182UL), (3140947362UL), (1624573114UL), (3809118349UL), (3561012744UL), (4270855000UL), (1282799903UL), (1852369563UL), (971772965UL), (2160782957UL), (105464019UL), (2131462864UL), (335205049UL), (3271229551UL), (1374396416UL), (4269753677UL), (1984596635UL), (37563880UL), (3956352262UL), (2168603656UL), (311623712UL), (1593371323UL), (351020595UL), (3439337532UL), (3130874657UL), (3613343327UL), (695789539UL), (609797513UL), (53642143UL), (1479027519UL), (1588831722UL), (262810641UL), (3418379977UL), (530167431UL), (1962487963UL), (2410103328UL), (3360114680UL), (3548827677UL), (2735238248UL), (2136058369UL), (4013192489UL), (4106245442UL), (2155966460UL), (3653971354UL), (1230293148UL), (3966689348UL), (3455336684UL), (3594979856UL), (3178937309UL), (3983796170UL), (3617590004UL), (1727358326UL), (1121418876UL), (1022562029UL), (2437823131UL), (2733424381UL), (452731958UL), (2983755220UL), (1674750403UL), (3110921909UL), (3514365950UL), (2193238341UL), (2073801740UL), (669573402UL), (1824298084UL), (22336337UL), (3366446304UL), (1536043612UL), (2502297553UL), (1409641611UL), (2399583184UL), (2593245170UL), (716832039UL), (4286149460UL), (814849965UL), (4239224908UL), (2453627262UL), (976385355UL), (1846129423UL), (52096201UL), (88835472UL), (2621770794UL), (2491757130UL), (1849417480UL), (576668065UL), (2186701850UL), (3357019214UL), (442191324UL), (3662645846UL), (3653766782UL), (2254203663UL), (1169821059UL), (3735427676UL), (2246044748UL), (2635264668UL), (2647842566UL), (1435695450UL), (1658777934UL), (2927080369UL), (1341088646UL), (3565982642UL), (221661496UL), (3246988243UL), (2718455491UL), (483517148UL), (4181332651UL), (1143646375UL), (1720449423UL), (331164544UL), (539836322UL), (3485371630UL), (1110077273UL), (4088985694UL), (145720169UL), (2382276586UL), (4276410795UL), (2051956774UL), (936524156UL), (15415192UL), (1815949694UL), (272696290UL), (1495465483UL), (3102030383UL), (3546078241UL), (3272619595UL), (759699322UL), (1161486824UL), (1146281812UL), (4194130649UL), (3936306436UL), (4077338125UL), (2127551216UL), (2995077453UL), (209698652UL), (3836657987UL), (1782152220UL), (1642490089UL), (3695579542UL), (537862234UL), (1696168156UL), (4022607UL), (3642864269UL), (54404878UL), (2925910542UL), (3444042482UL), (1931288691UL), (2269375687UL), (614870298UL), (1139082272UL), (3672546472UL), (3255845763UL), (2987873616UL), (3436501734UL), (380553853UL), (750118352UL), (750708138UL), (488564982UL), (2936846643UL), (3460652101UL), (3085496886UL), (3734224010UL), (523359404UL), (2751912206UL), (3302219188UL), (2729509827UL), (1995554251UL), (2288103059UL), (3289667468UL), (2860301591UL)}, {(3481653941UL), (2111903071UL), (3569014882UL), (1149634763UL), (4206972571UL), (2948781360UL), (2576820949UL), (2587099571UL), (3987042644UL), (4255777336UL), (2829594348UL), (3832744490UL), (3554499754UL), (787920018UL), (695635693UL), (2746034685UL), (2078139227UL), (1144320548UL), (4020978225UL), (449503505UL), (3004993826UL), (2045843139UL), (1604631401UL), (148449881UL), (457819243UL), (4089112489UL), (1713441237UL), (1790909556UL), (3334464951UL), (3070008305UL), (811825474UL), (4089105370UL), (708239097UL), (1494832299UL), (2074902973UL), (468898217UL), (1722559700UL), (2499754488UL), (2267939270UL), (650114709UL), (549502184UL), (4040463514UL), (4228169080UL), (4094284819UL), (1599334548UL), (2992525399UL), (2107053637UL), (197348940UL), (1669884894UL), (3982326753UL), (4259099320UL), (1862793542UL), (1751219817UL), (2701271514UL), (2507353222UL), (1488339939UL), (4246544316UL), (3978321870UL), (132720476UL), (3020305599UL), (154822619UL), (2595474066UL), (1654579304UL), (1997335204UL), (891320674UL), (3153502700UL), (601607977UL), (2695457160UL), (4137981809UL), (37584248UL), (1674050253UL), (1805619463UL), (676369068UL), (2294902904UL), (658143166UL), (141452045UL), (2383327493UL), (1222336195UL), (2628962123UL), (2378299402UL), (2724274090UL), (1783957650UL), (453206569UL), (3190116972UL), (1480368955UL), (1145768764UL), (3628222572UL), (3108689607UL), (182547022UL), (360165920UL), (3378423016UL), (1443723222UL), (2843274258UL), (1597581683UL), (664283285UL), (258077235UL), (3071875976UL), (240688930UL), (988895736UL), (2965351284UL), (91332032UL), (941306162UL), (2464278288UL), (3493666272UL), (2437043750UL), (2356658919UL), (24726067UL), (3025656863UL), (1343636659UL), (2408295270UL), (3097408183UL), (461428710UL), (2449005423UL), (3220070834UL), (1418517867UL), (907095008UL), (428073188UL), (1938061314UL), (2094361729UL), (2570445990UL), (346999411UL), (990247709UL), (1630488660UL), (2574142591UL), (1466590284UL), (1906935236UL), (1592544037UL), (4168163186UL), (2773942807UL), (939392801UL), (1610069434UL), (1935303983UL), (2962954128UL), (2490925509UL), (4103025390UL), (3614258069UL), (174125899UL), (4113855120UL), (2449365101UL), (3384244363UL), (4115219971UL), (3187664453UL), (4021992190UL), (2959372973UL), (2946571025UL), (2144945539UL), (388172915UL), (1125615727UL), (881693338UL), (3313110562UL), (859388069UL), (177786360UL), (4134747901UL), (616417204UL), (2104495620UL), (783302897UL), (512784708UL), (1295821322UL), (3810209448UL), (2966899912UL), (2390608767UL), (3481653941UL), (2111903071UL), (3569014882UL), (1149634763UL), (1385372463UL), (2948781360UL), (2576820949UL), (2587099571UL), (3987042644UL), (2251144849UL), (2829594348UL), (3832744490UL), (3554499754UL), (787920018UL), (73007125UL), (2746034685UL), (2078139227UL), (1144320548UL), (4020978225UL), (2729117517UL), (3004993826UL), (2045843139UL), (1604631401UL), (148449881UL), (3343221736UL), (4089112489UL), (1713441237UL), (1790909556UL), (3334464951UL), (1920962856UL), (811825474UL), (4089105370UL), (708239097UL), (1494832299UL), (2485576001UL), (468898217UL), (1722559700UL), (2499754488UL), (2267939270UL), (2271486862UL), (549502184UL), (4040463514UL), (4228169080UL), (4094284819UL), (3177940420UL), (2992525399UL), (2107053637UL), (197348940UL), (1669884894UL), (3596140613UL), (4259099320UL), (1862793542UL), (1751219817UL), (2701271514UL), (1357847339UL), (1488339939UL), (4246544316UL), (3978321870UL), (132720476UL), (344033794UL), (154822619UL), (2595474066UL), (1654579304UL), (1997335204UL), (1849659590UL), (3153502700UL), (601607977UL), (2695457160UL), (4137981809UL), (3559496104UL), (1674050253UL), (1805619463UL), (676369068UL), (2294902904UL), (1583197657UL), (141452045UL), (2383327493UL), (1222336195UL), (2628962123UL), (3486106126UL), (2724274090UL), (1783957650UL), (453206569UL), (3190116972UL), (1939413704UL), (1145768764UL), (3628222572UL), (3108689607UL), (182547022UL), (2911760834UL), (3378423016UL), (1443723222UL), (2843274258UL), (1597581683UL), (3599911248UL), (258077235UL), (3071875976UL), (240688930UL), (988895736UL), (4263328855UL), (91332032UL), (941306162UL), (2464278288UL), (3493666272UL), (1561559932UL), (2356658919UL), (24726067UL), (3025656863UL), (1343636659UL), (257301433UL), (3097408183UL), (461428710UL), (2449005423UL), (3220070834UL), (3544357262UL), (907095008UL), (428073188UL), (1938061314UL), (2094361729UL), (4112109825UL), (346999411UL), (990247709UL), (1630488660UL), (2574142591UL), (1466763688UL), (1906935236UL), (1592544037UL), (4168163186UL), (2773942807UL), (3608227467UL), (1610069434UL), (1935303983UL), (2962954128UL), (2490925509UL), (825197245UL), (3614258069UL), (174125899UL), (4113855120UL), (2449365101UL), (167881680UL), (4115219971UL), (3187664453UL), (4021992190UL), (2959372973UL), (1971633162UL), (2144945539UL), (388172915UL), (1125615727UL), (881693338UL), (223946687UL), (859388069UL), (177786360UL), (4134747901UL), (616417204UL), (722598357UL), (783302897UL), (512784708UL), (1295821322UL), (3810209448UL), (1589703161UL), (2390608767UL), (3481653941UL), (2111903071UL), (3569014882UL), (2520719089UL), (1385372463UL), (2948781360UL), (2576820949UL), (2587099571UL), (1427210741UL), (2251144849UL), (2829594348UL), (3832744490UL), (3554499754UL), (1257461820UL), (73007125UL), (2746034685UL), (2078139227UL), (1144320548UL), (3065859797UL), (2729117517UL), (3004993826UL), (2045843139UL), (1604631401UL), (36092756UL), (3343221736UL), (4089112489UL), (1713441237UL), (1790909556UL), (1504385586UL), (1920962856UL), (811825474UL), (4089105370UL), (708239097UL), (4135459720UL), (2485576001UL), (468898217UL), (1722559700UL), (2499754488UL), (1392696606UL), (2271486862UL), (549502184UL), (4040463514UL), (4228169080UL), (2521060775UL), (3177940420UL), (2992525399UL), (2107053637UL), (197348940UL), (4225425195UL), (3596140613UL), (4259099320UL), (1862793542UL), (1751219817UL), (3752827533UL), (1357847339UL), (1488339939UL), (4246544316UL), (3978321870UL), (270743120UL), (344033794UL), (154822619UL), (2595474066UL), (1654579304UL), (986127123UL), (1849659590UL), (3153502700UL), (601607977UL), (2695457160UL), (437034992UL), (3559496104UL), (1674050253UL), (1805619463UL), (676369068UL), (956939381UL), (1583197657UL), (141452045UL), (2383327493UL), (1222336195UL), (3287498300UL), (3486106126UL), (2724274090UL), (1783957650UL), (453206569UL), (3610364652UL), (1939413704UL), (1145768764UL), (3628222572UL), (3108689607UL), (708259891UL), (2911760834UL), (3378423016UL), (1443723222UL), (2843274258UL), (1498209005UL), (3599911248UL), (258077235UL), (3071875976UL), (240688930UL), (3815218922UL), (4263328855UL), (91332032UL), (941306162UL), (2464278288UL), (3018835600UL), (1561559932UL), (2356658919UL), (24726067UL), (3025656863UL), (368313673UL), (257301433UL), (3097408183UL), (461428710UL), (2449005423UL), (3690066046UL), (3544357262UL), (907095008UL), (428073188UL), (1938061314UL), (2274317748UL), (4112109825UL), (346999411UL), (990247709UL), (1630488660UL), (1584471638UL), (1466763688UL), (1906935236UL), (1592544037UL), (4168163186UL), (473837206UL), (3608227467UL), (1610069434UL), (1935303983UL), (2962954128UL), (391171548UL), (825197245UL), (3614258069UL), (174125899UL), (4113855120UL), (2095676907UL), (167881680UL), (4115219971UL), (3187664453UL), (4021992190UL), (4246237180UL), (1971633162UL), (2144945539UL), (388172915UL), (1125615727UL), (3158677395UL), (223946687UL), (859388069UL), (177786360UL), (4134747901UL), (4017781965UL), (722598357UL), (783302897UL), (512784708UL), (1295821322UL), (3908594844UL), (1589703161UL), (2390608767UL), (3481653941UL), (2111903071UL), (2713757719UL), (2520719089UL), (1385372463UL), (2948781360UL), (2576820949UL), (638075690UL), (1427210741UL), (2251144849UL), (2829594348UL), (3832744490UL), (2871270139UL), (1257461820UL), (73007125UL), (2746034685UL), (2078139227UL), (1974062189UL), (3065859797UL), (2729117517UL), (3004993826UL), (2045843139UL), (772058252UL), (36092756UL), (3343221736UL), (4089112489UL), (1713441237UL), (2172680702UL), (1504385586UL), (1920962856UL), (811825474UL), (4089105370UL), (1822881146UL), (4135459720UL), (2485576001UL), (468898217UL), (1722559700UL), (3429640856UL), (1392696606UL), (2271486862UL), (549502184UL), (4040463514UL), (3072935276UL), (2521060775UL), (3177940420UL), (2992525399UL), (2107053637UL), (1114377646UL), (4225425195UL), (3596140613UL), (4259099320UL), (1862793542UL), (1439724658UL), (3752827533UL), (1357847339UL), (1488339939UL), (4246544316UL), (1051119047UL), (270743120UL), (344033794UL), (154822619UL), (2595474066UL), (3143800435UL), (986127123UL), (1849659590UL), (3153502700UL), (601607977UL), (2334441739UL), (437034992UL), (3559496104UL), (1674050253UL), (1805619463UL), (455274178UL), (956939381UL), (1583197657UL), (141452045UL), (2383327493UL), (1520979444UL), (3287498300UL), (3486106126UL), (2724274090UL), (1783957650UL), (2212706740UL), (3610364652UL), (1939413704UL), (1145768764UL), (3628222572UL), (2719501850UL), (708259891UL), (2911760834UL), (3378423016UL), (1443723222UL), (2678486648UL), (1498209005UL), (3599911248UL), (258077235UL), (3071875976UL), (513762712UL), (3815218922UL), (4263328855UL), (91332032UL), (941306162UL), (3000922309UL), (3018835600UL), (1561559932UL), (2356658919UL), (24726067UL), (3626352172UL), (368313673UL), (257301433UL), (3097408183UL), (461428710UL), (2370224855UL), (3690066046UL), (3544357262UL), (907095008UL), (428073188UL), (2279237523UL), (2274317748UL), (4112109825UL), (346999411UL), (990247709UL), (896290404UL), (1584471638UL), (1466763688UL), (1906935236UL), (1592544037UL), (2387522308UL), (473837206UL), (3608227467UL), (1610069434UL), (1935303983UL), (4120978868UL), (391171548UL), (825197245UL), (3614258069UL), (174125899UL), (2940674123UL), (2095676907UL), (167881680UL), (4115219971UL), (3187664453UL), (456143482UL), (4246237180UL), (1971633162UL), (2144945539UL), (388172915UL), (4041481385UL), (3158677395UL), (223946687UL), (859388069UL), (177786360UL), (3094936989UL), (4017781965UL), (722598357UL), (783302897UL), (512784708UL), (4078350595UL), (2002159085UL), (3374931831UL), (1327513052UL), (4231642441UL), (2398594140UL), (2750176655UL), (2377078716UL), (3051451207UL), (2923556938UL), (392203913UL), (970480700UL), (1611278056UL), (1212903807UL), (85815670UL), (2398261756UL), (1052760308UL), (175807153UL), (2617028873UL), (1862087601UL), (1824020594UL), (3770624867UL), (141863380UL), (2090619424UL), (3994019338UL), (2363183556UL), (3095139522UL), (1792884692UL), (3026343485UL), (2320955816UL), (145789343UL), (214170401UL), (2926373126UL), (3858640613UL), (2188241463UL), (459887603UL), (2117474937UL), (2514234285UL), (1454156613UL), (1675396814UL), (4188979068UL), (1584843874UL), (3594779833UL), (563029256UL), (28681425UL), (446949770UL), (3498545218UL), (435874305UL), (3448653884UL), (863509898UL), (2247299904UL), (4211345429UL), (971855563UL), (1475394960UL), (3401692834UL), (167361776UL), (496249436UL), (1465278889UL), (780336162UL), (2108770597UL), (1806981510UL), (3677875653UL), (1890122303UL), (16399665UL), (2747394159UL), (2098019492UL), (1597583332UL), (1763649529UL), (1286079969UL), (1846278877UL), (1016796923UL), (959676917UL), (3091540766UL), (1626192266UL), (780987350UL), (1102963422UL), (2507002232UL), (691766944UL), (193328868UL), (981596600UL), (2384820612UL), (3149668778UL), (1691569420UL), (2852237957UL), (893819979UL), (2572584243UL), (216077070UL), (1267249886UL), (2572508880UL), (1706489454UL), (2391561733UL), (2608477467UL), (209783612UL), (765896849UL), (3617020328UL), (3488800100UL), (2237655981UL), (2095308189UL), (963275857UL), (3563488318UL), (1865487834UL), (480006810UL), (18562439UL), (1025913188UL), (3368592397UL), (374648713UL), (2421713724UL), (2705651398UL), (3098059650UL), (1109934605UL), (3085839620UL), (3184266772UL), (2359972463UL), (862934481UL), (3624479194UL), (3574284465UL), (2700143837UL), (2468083868UL), (3798800988UL), (4116964911UL), (1832002264UL), (4276154871UL), (3256889524UL), (4036954281UL), (697729046UL), (886223984UL), (2196986730UL), (1157617208UL), (1995907944UL), (398452318UL), (3523714364UL), (613570866UL), (2962430983UL), (1408814780UL), (892117129UL), (4173164219UL), (3894076479UL), (2721348430UL), (555734931UL), (1869034419UL), (336114876UL), (3142554871UL), (3349604636UL), (3450290892UL), (955122895UL), (2202902910UL), (2558366468UL), (1701182712UL), (283197682UL), (1865942385UL), (2027648778UL), (2285857699UL), (880475184UL), (958651279UL), (169534250UL), (3842420528UL), (1568559789UL), (2986618464UL), (2568345525UL), (3081082692UL)}, {(575494427UL), (2773243709UL), (4009191487UL), (3877909663UL), (2252044261UL), (1328043370UL), (1407136778UL), (3204434425UL), (3881653592UL), (1481049819UL), (2939203697UL), (889352935UL), (628666312UL), (165199023UL), (2949092155UL), (1116804589UL), (998930334UL), (4144153491UL), (4191022348UL), (9022505UL), (4033326555UL), (2329569601UL), (824756145UL), (3501916851UL), (1481410328UL), (1970954319UL), (4022176157UL), (2356841052UL), (3783173734UL), (3649102345UL), (3205430658UL), (1460938436UL), (280282398UL), (3262135457UL), (4055383786UL), (28522973UL), (1100901182UL), (4048609665UL), (994490185UL), (2888527367UL), (3591919750UL), (65093467UL), (399797207UL), (3377740861UL), (3103183487UL), (3696509979UL), (866353724UL), (3847992271UL), (2821933890UL), (1491144079UL), (1702442928UL), (1271285504UL), (636444475UL), (2465430290UL), (2440306765UL), (2651443172UL), (2895101023UL), (43843628UL), (518479547UL), (3708355608UL), (2313400729UL), (3786408564UL), (2823763904UL), (3267560272UL), (524168411UL), (2580824843UL), (2687886610UL), (785942949UL), (2624395631UL), (3713348903UL), (4104123478UL), (2234056629UL), (2683158959UL), (1805382347UL), (1645702909UL), (382688861UL), (2843792951UL), (39122499UL), (2765954033UL), (3033237617UL), (784228054UL), (1680611136UL), (2306036746UL), (892707919UL), (3825738103UL), (1289362844UL), (3462989616UL), (484526950UL), (178560970UL), (1863413515UL), (71290794UL), (1716785670UL), (3881310302UL), (2826977504UL), (2312744076UL), (1000001815UL), (1580868938UL), (3808984884UL), (2521899773UL), (738699928UL), (2244576791UL), (1833964269UL), (1361345793UL), (2934763305UL), (2944705940UL), (2334116476UL), (674208214UL), (587191877UL), (271361277UL), (1639419136UL), (2742744205UL), (2556530506UL), (3764115510UL), (861410771UL), (3473658359UL), (2879790483UL), (1497452846UL), (1101855458UL), (2268199923UL), (1766359872UL), (480532790UL), (2926891626UL), (1366888524UL), (2262816900UL), (620045088UL), (2279182738UL), (2479688463UL), (427385986UL), (271096497UL), (1999040724UL), (1980388138UL), (3104550456UL), (2496325717UL), (2941450111UL), (1784373495UL), (4020221165UL), (2567325850UL), (2636190539UL), (2764516078UL), (2285887821UL), (2395930109UL), (1867061176UL), (665795763UL), (3869868300UL), (4033135159UL), (2589983679UL), (682593183UL), (1254600537UL), (1701095863UL), (3738080583UL), (369734429UL), (2231641462UL), (1866531599UL), (1317004965UL), (466053171UL), (2320346625UL), (485850108UL), (1279183025UL), (423884362UL), (1878291714UL), (228799661UL), (575494427UL), (2773243709UL), (4009191487UL), (3877909663UL), (1392246100UL), (1328043370UL), (1407136778UL), (3204434425UL), (3881653592UL), (303018213UL), (2939203697UL), (889352935UL), (628666312UL), (165199023UL), (691563049UL), (1116804589UL), (998930334UL), (4144153491UL), (4191022348UL), (2882458100UL), (4033326555UL), (2329569601UL), (824756145UL), (3501916851UL), (3512382126UL), (1970954319UL), (4022176157UL), (2356841052UL), (3783173734UL), (3277915742UL), (3205430658UL), (1460938436UL), (280282398UL), (3262135457UL), (416160861UL), (28522973UL), (1100901182UL), (4048609665UL), (994490185UL), (2206150488UL), (3591919750UL), (65093467UL), (399797207UL), (3377740861UL), (3954301001UL), (3696509979UL), (866353724UL), (3847992271UL), (2821933890UL), (482325742UL), (1702442928UL), (1271285504UL), (636444475UL), (2465430290UL), (476965483UL), (2651443172UL), (2895101023UL), (43843628UL), (518479547UL), (2354104222UL), (2313400729UL), (3786408564UL), (2823763904UL), (3267560272UL), (1682576095UL), (2580824843UL), (2687886610UL), (785942949UL), (2624395631UL), (3219885224UL), (4104123478UL), (2234056629UL), (2683158959UL), (1805382347UL), (4143809855UL), (382688861UL), (2843792951UL), (39122499UL), (2765954033UL), (2870716981UL), (784228054UL), (1680611136UL), (2306036746UL), (892707919UL), (2648492467UL), (1289362844UL), (3462989616UL), (484526950UL), (178560970UL), (3047404165UL), (71290794UL), (1716785670UL), (3881310302UL), (2826977504UL), (2439325884UL), (1000001815UL), (1580868938UL), (3808984884UL), (2521899773UL), (2222792732UL), (2244576791UL), (1833964269UL), (1361345793UL), (2934763305UL), (655108124UL), (2334116476UL), (674208214UL), (587191877UL), (271361277UL), (1403491312UL), (2742744205UL), (2556530506UL), (3764115510UL), (861410771UL), (2748819627UL), (2879790483UL), (1497452846UL), (1101855458UL), (2268199923UL), (2646753562UL), (480532790UL), (2926891626UL), (1366888524UL), (2262816900UL), (691077353UL), (2279182738UL), (2479688463UL), (427385986UL), (271096497UL), (357444234UL), (1980388138UL), (3104550456UL), (2496325717UL), (2941450111UL), (717953620UL), (4020221165UL), (2567325850UL), (2636190539UL), (2764516078UL), (588189150UL), (2395930109UL), (1867061176UL), (665795763UL), (3869868300UL), (2245339306UL), (2589983679UL), (682593183UL), (1254600537UL), (1701095863UL), (3193417815UL), (369734429UL), (2231641462UL), (1866531599UL), (1317004965UL), (1295326133UL), (2320346625UL), (485850108UL), (1279183025UL), (423884362UL), (1310342080UL), (228799661UL), (575494427UL), (2773243709UL), (4009191487UL), (3178129190UL), (1392246100UL), (1328043370UL), (1407136778UL), (3204434425UL), (558594993UL), (303018213UL), (2939203697UL), (889352935UL), (628666312UL), (3995857198UL), (691563049UL), (1116804589UL), (998930334UL), (4144153491UL), (2375099047UL), (2882458100UL), (4033326555UL), (2329569601UL), (824756145UL), (3031828205UL), (3512382126UL), (1970954319UL), (4022176157UL), (2356841052UL), (1599294097UL), (3277915742UL), (3205430658UL), (1460938436UL), (280282398UL), (2438973535UL), (416160861UL), (28522973UL), (1100901182UL), (4048609665UL), (2989609671UL), (2206150488UL), (3591919750UL), (65093467UL), (399797207UL), (183644195UL), (3954301001UL), (3696509979UL), (866353724UL), (3847992271UL), (1244421011UL), (482325742UL), (1702442928UL), (1271285504UL), (636444475UL), (3659422961UL), (476965483UL), (2651443172UL), (2895101023UL), (43843628UL), (2230230933UL), (2354104222UL), (2313400729UL), (3786408564UL), (2823763904UL), (4146329709UL), (1682576095UL), (2580824843UL), (2687886610UL), (785942949UL), (126345381UL), (3219885224UL), (4104123478UL), (2234056629UL), (2683158959UL), (1734650983UL), (4143809855UL), (382688861UL), (2843792951UL), (39122499UL), (3527484969UL), (2870716981UL), (784228054UL), (1680611136UL), (2306036746UL), (1606477743UL), (2648492467UL), (1289362844UL), (3462989616UL), (484526950UL), (3730796296UL), (3047404165UL), (71290794UL), (1716785670UL), (3881310302UL), (4233965062UL), (2439325884UL), (1000001815UL), (1580868938UL), (3808984884UL), (1228341642UL), (2222792732UL), (2244576791UL), (1833964269UL), (1361345793UL), (3313812192UL), (655108124UL), (2334116476UL), (674208214UL), (587191877UL), (1531247446UL), (1403491312UL), (2742744205UL), (2556530506UL), (3764115510UL), (2419989900UL), (2748819627UL), (2879790483UL), (1497452846UL), (1101855458UL), (1430402656UL), (2646753562UL), (480532790UL), (2926891626UL), (1366888524UL), (1848714433UL), (691077353UL), (2279182738UL), (2479688463UL), (427385986UL), (3906690631UL), (357444234UL), (1980388138UL), (3104550456UL), (2496325717UL), (2272350403UL), (717953620UL), (4020221165UL), (2567325850UL), (2636190539UL), (1950604113UL), (588189150UL), (2395930109UL), (1867061176UL), (665795763UL), (1735147895UL), (2245339306UL), (2589983679UL), (682593183UL), (1254600537UL), (1518037357UL), (3193417815UL), (369734429UL), (2231641462UL), (1866531599UL), (1751783137UL), (1295326133UL), (2320346625UL), (485850108UL), (1279183025UL), (149835864UL), (1310342080UL), (228799661UL), (575494427UL), (2773243709UL), (1505829825UL), (3178129190UL), (1392246100UL), (1328043370UL), (1407136778UL), (856233019UL), (558594993UL), (303018213UL), (2939203697UL), (889352935UL), (625515593UL), (3995857198UL), (691563049UL), (1116804589UL), (998930334UL), (3264640128UL), (2375099047UL), (2882458100UL), (4033326555UL), (2329569601UL), (1824812377UL), (3031828205UL), (3512382126UL), (1970954319UL), (4022176157UL), (3682468973UL), (1599294097UL), (3277915742UL), (3205430658UL), (1460938436UL), (2034940270UL), (2438973535UL), (416160861UL), (28522973UL), (1100901182UL), (3534874298UL), (2989609671UL), (2206150488UL), (3591919750UL), (65093467UL), (2231373121UL), (183644195UL), (3954301001UL), (3696509979UL), (866353724UL), (1479968372UL), (1244421011UL), (482325742UL), (1702442928UL), (1271285504UL), (3834022401UL), (3659422961UL), (476965483UL), (2651443172UL), (2895101023UL), (1042443120UL), (2230230933UL), (2354104222UL), (2313400729UL), (3786408564UL), (2940290545UL), (4146329709UL), (1682576095UL), (2580824843UL), (2687886610UL), (895602439UL), (126345381UL), (3219885224UL), (4104123478UL), (2234056629UL), (3633565082UL), (1734650983UL), (4143809855UL), (382688861UL), (2843792951UL), (3076342354UL), (3527484969UL), (2870716981UL), (784228054UL), (1680611136UL), (3667923304UL), (1606477743UL), (2648492467UL), (1289362844UL), (3462989616UL), (1338592032UL), (3730796296UL), (3047404165UL), (71290794UL), (1716785670UL), (995728648UL), (4233965062UL), (2439325884UL), (1000001815UL), (1580868938UL), (1245957136UL), (1228341642UL), (2222792732UL), (2244576791UL), (1833964269UL), (2899552190UL), (3313812192UL), (655108124UL), (2334116476UL), (674208214UL), (1154789946UL), (1531247446UL), (1403491312UL), (2742744205UL), (2556530506UL), (1668620496UL), (2419989900UL), (2748819627UL), (2879790483UL), (1497452846UL), (177853954UL), (1430402656UL), (2646753562UL), (480532790UL), (2926891626UL), (3179057526UL), (1848714433UL), (691077353UL), (2279182738UL), (2479688463UL), (1988854710UL), (3906690631UL), (357444234UL), (1980388138UL), (3104550456UL), (1772857305UL), (2272350403UL), (717953620UL), (4020221165UL), (2567325850UL), (3129906484UL), (1950604113UL), (588189150UL), (2395930109UL), (1867061176UL), (2248975336UL), (1735147895UL), (2245339306UL), (2589983679UL), (682593183UL), (3087155398UL), (1518037357UL), (3193417815UL), (369734429UL), (2231641462UL), (1858424931UL), (1751783137UL), (1295326133UL), (2320346625UL), (485850108UL), (2471611230UL), (107369761UL), (2623559579UL), (4256589070UL), (2365810185UL), (907910243UL), (3901832478UL), (2068079364UL), (2072842987UL), (401440347UL), (1707255913UL), (1450112231UL), (2618898012UL), (600446000UL), (788321632UL), (4119629235UL), (2648781584UL), (1927659116UL), (171372782UL), (1789511950UL), (2648296999UL), (3558619514UL), (1819608632UL), (1392007708UL), (2918513974UL), (2270003900UL), (784021820UL), (1379044539UL), (591935962UL), (1638390839UL), (10832053UL), (3946625290UL), (2916913801UL), (2718331169UL), (1595482738UL), (1294279402UL), (19889234UL), (1374364843UL), (571354125UL), (3357938719UL), (2337506269UL), (905453029UL), (2504232400UL), (258673393UL), (2590342355UL), (3308443353UL), (3359617898UL), (2686453711UL), (932545954UL), (509832408UL), (820508114UL), (431186194UL), (3434866166UL), (1108455121UL), (2802986572UL), (893446102UL), (3248197798UL), (1797985531UL), (3952804303UL), (558601278UL), (1813674114UL), (311050994UL), (425175161UL), (1125527204UL), (1597986581UL), (2282580210UL), (1659733126UL), (2080660004UL), (4121079137UL), (3373787661UL), (1902252724UL), (2669993847UL), (2450915273UL), (2155525933UL), (2139535914UL), (274595185UL), (1890506924UL), (2631794527UL), (1423530517UL), (4027031002UL), (1085427968UL), (2402514206UL), (3591455043UL), (2513094696UL), (2338347202UL), (1168222597UL), (3922339535UL), (3991725466UL), (2774598759UL), (3478721168UL), (3676766916UL), (179748891UL), (2911159372UL), (191101265UL), (3389843262UL), (3093358663UL), (2333576084UL), (1056514165UL), (2987497874UL), (2502331872UL), (2027710028UL), (2338525812UL), (3904906078UL), (806669884UL), (596300960UL), (1993055778UL), (1541809402UL), (3578865742UL), (652348267UL), (3332532764UL), (2656602623UL), (2037214047UL), (323260312UL), (3310408133UL), (4037617529UL), (137297627UL), (1236501991UL), (495817051UL), (481150309UL), (3067841968UL), (3120347176UL), (714354848UL), (1554632062UL), (2522324107UL), (4274051212UL), (2180914534UL), (1261686356UL), (3569290041UL), (1801431819UL), (4286755560UL), (2749452442UL), (829235089UL), (2243153325UL), (2525168177UL), (1486881882UL), (585653228UL), (3288336688UL), (2734161045UL), (30430534UL), (714492313UL), (2582732426UL), (595577790UL), (1463554287UL), (1949506865UL), (4210942156UL), (2008105540UL), (4055753132UL), (2530320603UL), (319064177UL), (2305067982UL), (3825716413UL), (1543867515UL), (108979478UL), (3089716545UL), (2921391708UL), (2403595525UL), (3783697766UL), (2313991047UL), (3302598706UL), (1318323763UL)}, {(1470380360UL), (3057428612UL), (2756676297UL), (1633786556UL), (4246459918UL), (2557524017UL), (1857180133UL), (618903690UL), (2475611092UL), (2621430634UL), (2084292404UL), (1698607774UL), (1788956972UL), (3375072220UL), (1499167056UL), (1218814632UL), (3699503479UL), (588281768UL), (3603925285UL), (1187721841UL), (1307962320UL), (2562217840UL), (3882506958UL), (2387033730UL), (2097027049UL), (1593669125UL), (1899433035UL), (4039983902UL), (1546854551UL), (1073191673UL), (3368453769UL), (3074694838UL), (534637095UL), (1860006723UL), (3416402670UL), (802354899UL), (3998709605UL), (3944315555UL), (3454226397UL), (1648185195UL), (488532673UL), (3063734121UL), (1318974867UL), (187087202UL), (200160693UL), (4170479404UL), (782764886UL), (4007973657UL), (1651636372UL), (3084151528UL), (2085263921UL), (2424937940UL), (230704223UL), (3342587983UL), (1093085714UL), (683877298UL), (3635026316UL), (3839461209UL), (2977567556UL), (3947448199UL), (3767172681UL), (1350679624UL), (3541409523UL), (3975162472UL), (2459379316UL), (3287828387UL), (1565768431UL), (3149625429UL), (1328627497UL), (2156355750UL), (112739894UL), (4052025045UL), (1396839113UL), (212349044UL), (110706825UL), (2185320852UL), (2540909191UL), (2129623107UL), (3515174750UL), (2669147508UL), (1243549180UL), (3996575850UL), (149304348UL), (2755670869UL), (930137412UL), (350687475UL), (1512442864UL), (3764389325UL), (3489308665UL), (276147411UL), (2268414314UL), (30674096UL), (3202650841UL), (3446821592UL), (3341145621UL), (3749209259UL), (674361204UL), (1384681012UL), (2716655878UL), (454169262UL), (289282175UL), (966029495UL), (3052791893UL), (3111969089UL), (1151599976UL), (3620936019UL), (1877909034UL), (1953262994UL), (4240669039UL), (1857402256UL), (3337397349UL), (2392730459UL), (1158928694UL), (1757447952UL), (2682284750UL), (2796982914UL), (1203210173UL), (797579212UL), (1645601877UL), (3579805998UL), (797556690UL), (4106236617UL), (1379943929UL), (129105346UL), (3950170317UL), (723231430UL), (88997404UL), (2591283275UL), (359831168UL), (306903531UL), (1987846974UL), (2654779951UL), (3724360049UL), (1693615498UL), (1095306415UL), (3586751806UL), (2045807380UL), (2779363615UL), (2912940562UL), (1557518560UL), (3620536996UL), (1723152132UL), (4087191232UL), (1042907094UL), (3210303305UL), (1536493323UL), (4094765090UL), (575328723UL), (359319532UL), (2458971265UL), (3159207510UL), (387883436UL), (2521400838UL), (2359639886UL), (261289463UL), (2094643916UL), (2269112547UL), (2387198764UL), (3619233779UL), (3019052785UL), (2910774311UL), (1470380360UL), (3057428612UL), (2756676297UL), (1633786556UL), (386502519UL), (2557524017UL), (1857180133UL), (618903690UL), (2475611092UL), (30080431UL), (2084292404UL), (1698607774UL), (1788956972UL), (3375072220UL), (1158684464UL), (1218814632UL), (3699503479UL), (588281768UL), (3603925285UL), (238328161UL), (1307962320UL), (2562217840UL), (3882506958UL), (2387033730UL), (3010587639UL), (1593669125UL), (1899433035UL), (4039983902UL), (1546854551UL), (4192218972UL), (3368453769UL), (3074694838UL), (534637095UL), (1860006723UL), (652336168UL), (802354899UL), (3998709605UL), (3944315555UL), (3454226397UL), (1926499185UL), (488532673UL), (3063734121UL), (1318974867UL), (187087202UL), (1106075322UL), (4170479404UL), (782764886UL), (4007973657UL), (1651636372UL), (2404132022UL), (2085263921UL), (2424937940UL), (230704223UL), (3342587983UL), (918664020UL), (683877298UL), (3635026316UL), (3839461209UL), (2977567556UL), (1943458501UL), (3767172681UL), (1350679624UL), (3541409523UL), (3975162472UL), (276593262UL), (3287828387UL), (1565768431UL), (3149625429UL), (1328627497UL), (1428675465UL), (112739894UL), (4052025045UL), (1396839113UL), (212349044UL), (4056830215UL), (2185320852UL), (2540909191UL), (2129623107UL), (3515174750UL), (1542171596UL), (1243549180UL), (3996575850UL), (149304348UL), (2755670869UL), (3578672658UL), (350687475UL), (1512442864UL), (3764389325UL), (3489308665UL), (1546094236UL), (2268414314UL), (30674096UL), (3202650841UL), (3446821592UL), (2954172575UL), (3749209259UL), (674361204UL), (1384681012UL), (2716655878UL), (3784818668UL), (289282175UL), (966029495UL), (3052791893UL), (3111969089UL), (4157356036UL), (3620936019UL), (1877909034UL), (1953262994UL), (4240669039UL), (558548232UL), (3337397349UL), (2392730459UL), (1158928694UL), (1757447952UL), (2764253876UL), (2796982914UL), (1203210173UL), (797579212UL), (1645601877UL), (1754284241UL), (797556690UL), (4106236617UL), (1379943929UL), (129105346UL), (1072954804UL), (723231430UL), (88997404UL), (2591283275UL), (359831168UL), (3790749526UL), (1987846974UL), (2654779951UL), (3724360049UL), (1693615498UL), (529478744UL), (3586751806UL), (2045807380UL), (2779363615UL), (2912940562UL), (3883779003UL), (3620536996UL), (1723152132UL), (4087191232UL), (1042907094UL), (2510614710UL), (1536493323UL), (4094765090UL), (575328723UL), (359319532UL), (4185709932UL), (3159207510UL), (387883436UL), (2521400838UL), (2359639886UL), (143795416UL), (2094643916UL), (2269112547UL), (2387198764UL), (3619233779UL), (2856133500UL), (2910774311UL), (1470380360UL), (3057428612UL), (2756676297UL), (1184346658UL), (386502519UL), (2557524017UL), (1857180133UL), (618903690UL), (113530176UL), (30080431UL), (2084292404UL), (1698607774UL), (1788956972UL), (1446640841UL), (1158684464UL), (1218814632UL), (3699503479UL), (588281768UL), (145530757UL), (238328161UL), (1307962320UL), (2562217840UL), (3882506958UL), (2145494995UL), (3010587639UL), (1593669125UL), (1899433035UL), (4039983902UL), (1668183055UL), (4192218972UL), (3368453769UL), (3074694838UL), (534637095UL), (1759744354UL), (652336168UL), (802354899UL), (3998709605UL), (3944315555UL), (3058692249UL), (1926499185UL), (488532673UL), (3063734121UL), (1318974867UL), (728549366UL), (1106075322UL), (4170479404UL), (782764886UL), (4007973657UL), (3270440405UL), (2404132022UL), (2085263921UL), (2424937940UL), (230704223UL), (3329510499UL), (918664020UL), (683877298UL), (3635026316UL), (3839461209UL), (79335966UL), (1943458501UL), (3767172681UL), (1350679624UL), (3541409523UL), (925084463UL), (276593262UL), (3287828387UL), (1565768431UL), (3149625429UL), (3775346659UL), (1428675465UL), (112739894UL), (4052025045UL), (1396839113UL), (865124022UL), (4056830215UL), (2185320852UL), (2540909191UL), (2129623107UL), (408329043UL), (1542171596UL), (1243549180UL), (3996575850UL), (149304348UL), (3549625626UL), (3578672658UL), (350687475UL), (1512442864UL), (3764389325UL), (2745315161UL), (1546094236UL), (2268414314UL), (30674096UL), (3202650841UL), (1591955495UL), (2954172575UL), (3749209259UL), (674361204UL), (1384681012UL), (4064148122UL), (3784818668UL), (289282175UL), (966029495UL), (3052791893UL), (1370867977UL), (4157356036UL), (3620936019UL), (1877909034UL), (1953262994UL), (4021792514UL), (558548232UL), (3337397349UL), (2392730459UL), (1158928694UL), (3155295174UL), (2764253876UL), (2796982914UL), (1203210173UL), (797579212UL), (3928348491UL), (1754284241UL), (797556690UL), (4106236617UL), (1379943929UL), (535801204UL), (1072954804UL), (723231430UL), (88997404UL), (2591283275UL), (3834650337UL), (3790749526UL), (1987846974UL), (2654779951UL), (3724360049UL), (1042046499UL), (529478744UL), (3586751806UL), (2045807380UL), (2779363615UL), (1125934487UL), (3883779003UL), (3620536996UL), (1723152132UL), (4087191232UL), (234512721UL), (2510614710UL), (1536493323UL), (4094765090UL), (575328723UL), (3997395999UL), (4185709932UL), (3159207510UL), (387883436UL), (2521400838UL), (3125399953UL), (143795416UL), (2094643916UL), (2269112547UL), (2387198764UL), (652167990UL), (2856133500UL), (2910774311UL), (1470380360UL), (3057428612UL), (2132157457UL), (1184346658UL), (386502519UL), (2557524017UL), (1857180133UL), (4131611047UL), (113530176UL), (30080431UL), (2084292404UL), (1698607774UL), (391246724UL), (1446640841UL), (1158684464UL), (1218814632UL), (3699503479UL), (2411874184UL), (145530757UL), (238328161UL), (1307962320UL), (2562217840UL), (2812151676UL), (2145494995UL), (3010587639UL), (1593669125UL), (1899433035UL), (2422208371UL), (1668183055UL), (4192218972UL), (3368453769UL), (3074694838UL), (2148785858UL), (1759744354UL), (652336168UL), (802354899UL), (3998709605UL), (1781938823UL), (3058692249UL), (1926499185UL), (488532673UL), (3063734121UL), (3539633540UL), (728549366UL), (1106075322UL), (4170479404UL), (782764886UL), (2780824417UL), (3270440405UL), (2404132022UL), (2085263921UL), (2424937940UL), (1908513596UL), (3329510499UL), (918664020UL), (683877298UL), (3635026316UL), (2918953355UL), (79335966UL), (1943458501UL), (3767172681UL), (1350679624UL), (341369607UL), (925084463UL), (276593262UL), (3287828387UL), (1565768431UL), (1957429498UL), (3775346659UL), (1428675465UL), (112739894UL), (4052025045UL), (1847440090UL), (865124022UL), (4056830215UL), (2185320852UL), (2540909191UL), (3477402775UL), (408329043UL), (1542171596UL), (1243549180UL), (3996575850UL), (179432054UL), (3549625626UL), (3578672658UL), (350687475UL), (1512442864UL), (2118138924UL), (2745315161UL), (1546094236UL), (2268414314UL), (30674096UL), (2317064191UL), (1591955495UL), (2954172575UL), (3749209259UL), (674361204UL), (3286542168UL), (4064148122UL), (3784818668UL), (289282175UL), (966029495UL), (1327408800UL), (1370867977UL), (4157356036UL), (3620936019UL), (1877909034UL), (405707683UL), (4021792514UL), (558548232UL), (3337397349UL), (2392730459UL), (3244675609UL), (3155295174UL), (2764253876UL), (2796982914UL), (1203210173UL), (2274948223UL), (3928348491UL), (1754284241UL), (797556690UL), (4106236617UL), (2665938417UL), (535801204UL), (1072954804UL), (723231430UL), (88997404UL), (3006584290UL), (3834650337UL), (3790749526UL), (1987846974UL), (2654779951UL), (4271242910UL), (1042046499UL), (529478744UL), (3586751806UL), (2045807380UL), (2283867237UL), (1125934487UL), (3883779003UL), (3620536996UL), (1723152132UL), (1761178713UL), (234512721UL), (2510614710UL), (1536493323UL), (4094765090UL), (2361030279UL), (3997395999UL), (4185709932UL), (3159207510UL), (387883436UL), (3979684113UL), (3125399953UL), (143795416UL), (2094643916UL), (2269112547UL), (1499026790UL), (2673871071UL), (3817604600UL), (2996498142UL), (1211396713UL), (4016438754UL), (992969238UL), (2196610884UL), (1333868752UL), (2722471337UL), (2178395143UL), (533478044UL), (291720336UL), (3552502714UL), (1060260388UL), (1389737501UL), (3508724089UL), (3106493936UL), (2013154532UL), (3169850047UL), (3773175439UL), (3604033115UL), (4234678017UL), (2903156223UL), (3832188501UL), (2874956773UL), (4283805552UL), (3664062691UL), (1974738248UL), (925764827UL), (1750660924UL), (141239116UL), (3273085573UL), (2427940522UL), (1962727892UL), (2493949152UL), (1043482688UL), (2345076260UL), (2209086707UL), (3642865193UL), (3119873884UL), (571850463UL), (1599484831UL), (76923002UL), (3077572436UL), (4086821865UL), (1523654720UL), (480304732UL), (476538774UL), (2169116383UL), (4033618691UL), (2819753414UL), (2856326003UL), (747450871UL), (1851448547UL), (713503330UL), (3709263622UL), (781002495UL), (1968749577UL), (2933719965UL), (4057398020UL), (3406593497UL), (689436820UL), (2935729647UL), (2030357428UL), (2075940397UL), (1830631914UL), (1093330800UL), (1706624613UL), (1805612947UL), (4257097124UL), (3233604448UL), (159450674UL), (1050507045UL), (566046625UL), (2253420120UL), (904902042UL), (1830037922UL), (4081490982UL), (1427186514UL), (2535536470UL), (3869316947UL), (4097476542UL), (930420754UL), (2519255367UL), (49908928UL), (454325685UL), (888118139UL), (3453892181UL), (1263601461UL), (1236190782UL), (674943665UL), (1648077470UL), (429399730UL), (2904879506UL), (3718410520UL), (1802183310UL), (1872553091UL), (605480672UL), (774749173UL), (3200570514UL), (181210046UL), (2560898144UL), (3947027625UL), (1535243167UL), (324801283UL), (4234744788UL), (746560316UL), (2456297875UL), (3925756080UL), (533997731UL), (3919796086UL), (662975152UL), (864661066UL), (1070894403UL), (1020445801UL), (1511298602UL), (4221508348UL), (3577952702UL), (4122306502UL), (2012051572UL), (1616168260UL), (2456901413UL), (2717726537UL), (840264605UL), (2687215223UL), (2174960097UL), (1239122603UL), (2890231920UL), (3365350767UL), (3998868598UL), (563137220UL), (893868530UL), (3400632172UL), (1538627830UL), (2812510298UL), (496662288UL), (2317289974UL), (2252393722UL), (1221289032UL), (2418100559UL), (402670890UL), (1528570045UL), (3160531718UL), (1806492066UL), (3211663975UL), (3617025598UL), (3664580463UL), (1338638297UL), (341637330UL), (2097019728UL), (4031221207UL), (503636424UL), (3883416740UL), (1530237682UL), (1152125396UL), (2845384901UL), (332460372UL), (457364876UL), (1738239808UL)}, {(1118787884UL), (1884590246UL), (1007052798UL), (3717680750UL), (1609263052UL), (2486654530UL), (2761168910UL), (163554565UL), (3928803020UL), (2632714628UL), (1386788970UL), (2621928183UL), (2855206157UL), (2989018213UL), (1836814260UL), (4197635108UL), (1030118238UL), (2789863793UL), (2063944689UL), (1647608366UL), (255485979UL), (3657534664UL), (1317185871UL), (2410074449UL), (3971156607UL), (907575923UL), (4132859581UL), (416269582UL), (877554291UL), (633895348UL), (2236014545UL), (992386759UL), (3971362318UL), (2173597771UL), (1673339632UL), (1371742490UL), (2033574313UL), (3809530180UL), (319182848UL), (1562235776UL), (463522324UL), (1482338913UL), (1816432405UL), (3278626272UL), (1335179249UL), (171265751UL), (2249118654UL), (1153849045UL), (3013179633UL), (1450352108UL), (1267908572UL), (1138658121UL), (623675874UL), (3608469129UL), (978093004UL), (1283228910UL), (1810859539UL), (1179125634UL), (2939039286UL), (3862213960UL), (1168357273UL), (376788629UL), (314507445UL), (219039712UL), (463080619UL), (2994990779UL), (1035692306UL), (2228303916UL), (1280244913UL), (1965417315UL), (1815095408UL), (939691799UL), (3080056566UL), (3741305118UL), (1495905100UL), (65327713UL), (3884301346UL), (2536445014UL), (1503280354UL), (3398924419UL), (3678532805UL), (2616964783UL), (3168581019UL), (3553322118UL), (3023259169UL), (480342712UL), (451634742UL), (3562778450UL), (1943708078UL), (660077747UL), (434714388UL), (2369278293UL), (2894425895UL), (1919542250UL), (2469130567UL), (551196237UL), (4193980239UL), (2952382875UL), (3311173667UL), (2856797012UL), (2845888917UL), (1669184098UL), (3928626091UL), (2491577076UL), (3719464032UL), (2151963814UL), (3474431449UL), (3971510537UL), (3695841119UL), (2215238146UL), (3668152847UL), (1974578319UL), (2328185090UL), (2096356935UL), (3973692455UL), (3954842437UL), (422675402UL), (477894725UL), (3398641827UL), (1366451030UL), (1354642198UL), (3029840461UL), (35700837UL), (2937170986UL), (1336296570UL), (3508313874UL), (587724229UL), (2051237478UL), (3539754304UL), (1946154432UL), (2463932452UL), (144772179UL), (353408424UL), (3493806256UL), (3782958493UL), (1957797444UL), (228084488UL), (192277278UL), (3612092522UL), (2235069734UL), (467407503UL), (3391861572UL), (847810786UL), (1838763654UL), (2272109211UL), (3018265496UL), (4249218445UL), (1722760791UL), (3484353162UL), (3906437663UL), (4208966227UL), (2352549740UL), (714311566UL), (1346246305UL), (2865157059UL), (2989587005UL), (3946819548UL), (3109244860UL), (3885124598UL), (3314346978UL), (952826829UL), (1118787884UL), (1884590246UL), (1007052798UL), (3717680750UL), (1521451317UL), (2486654530UL), (2761168910UL), (163554565UL), (3928803020UL), (2299046195UL), (1386788970UL), (2621928183UL), (2855206157UL), (2989018213UL), (3048269905UL), (4197635108UL), (1030118238UL), (2789863793UL), (2063944689UL), (1814057352UL), (255485979UL), (3657534664UL), (1317185871UL), (2410074449UL), (4041610788UL), (907575923UL), (4132859581UL), (416269582UL), (877554291UL), (2338964683UL), (2236014545UL), (992386759UL), (3971362318UL), (2173597771UL), (579340117UL), (1371742490UL), (2033574313UL), (3809530180UL), (319182848UL), (3090313228UL), (463522324UL), (1482338913UL), (1816432405UL), (3278626272UL), (2418220643UL), (171265751UL), (2249118654UL), (1153849045UL), (3013179633UL), (2738647190UL), (1267908572UL), (1138658121UL), (623675874UL), (3608469129UL), (3096087202UL), (1283228910UL), (1810859539UL), (1179125634UL), (2939039286UL), (2601862091UL), (1168357273UL), (376788629UL), (314507445UL), (219039712UL), (1174181426UL), (2994990779UL), (1035692306UL), (2228303916UL), (1280244913UL), (752017703UL), (1815095408UL), (939691799UL), (3080056566UL), (3741305118UL), (126135654UL), (65327713UL), (3884301346UL), (2536445014UL), (1503280354UL), (955981361UL), (3678532805UL), (2616964783UL), (3168581019UL), (3553322118UL), (3772187171UL), (480342712UL), (451634742UL), (3562778450UL), (1943708078UL), (1466950454UL), (434714388UL), (2369278293UL), (2894425895UL), (1919542250UL), (317862862UL), (551196237UL), (4193980239UL), (2952382875UL), (3311173667UL), (12728591UL), (2845888917UL), (1669184098UL), (3928626091UL), (2491577076UL), (2742989641UL), (2151963814UL), (3474431449UL), (3971510537UL), (3695841119UL), (1005662613UL), (3668152847UL), (1974578319UL), (2328185090UL), (2096356935UL), (3629684995UL), (3954842437UL), (422675402UL), (477894725UL), (3398641827UL), (209352768UL), (1354642198UL), (3029840461UL), (35700837UL), (2937170986UL), (1660777984UL), (3508313874UL), (587724229UL), (2051237478UL), (3539754304UL), (3631430985UL), (2463932452UL), (144772179UL), (353408424UL), (3493806256UL), (3616422021UL), (1957797444UL), (228084488UL), (192277278UL), (3612092522UL), (3638977910UL), (467407503UL), (3391861572UL), (847810786UL), (1838763654UL), (2427237699UL), (3018265496UL), (4249218445UL), (1722760791UL), (3484353162UL), (2322365400UL), (4208966227UL), (2352549740UL), (714311566UL), (1346246305UL), (954101391UL), (2989587005UL), (3946819548UL), (3109244860UL), (3885124598UL), (420941376UL), (952826829UL), (1118787884UL), (1884590246UL), (1007052798UL), (539759724UL), (1521451317UL), (2486654530UL), (2761168910UL), (163554565UL), (1954997983UL), (2299046195UL), (1386788970UL), (2621928183UL), (2855206157UL), (3104695189UL), (3048269905UL), (4197635108UL), (1030118238UL), (2789863793UL), (3556473570UL), (1814057352UL), (255485979UL), (3657534664UL), (1317185871UL), (3004205219UL), (4041610788UL), (907575923UL), (4132859581UL), (416269582UL), (2980178044UL), (2338964683UL), (2236014545UL), (992386759UL), (3971362318UL), (2573125018UL), (579340117UL), (1371742490UL), (2033574313UL), (3809530180UL), (766585731UL), (3090313228UL), (463522324UL), (1482338913UL), (1816432405UL), (3101578277UL), (2418220643UL), (171265751UL), (2249118654UL), (1153849045UL), (2143267892UL), (2738647190UL), (1267908572UL), (1138658121UL), (623675874UL), (2944231951UL), (3096087202UL), (1283228910UL), (1810859539UL), (1179125634UL), (374714364UL), (2601862091UL), (1168357273UL), (376788629UL), (314507445UL), (1710922505UL), (1174181426UL), (2994990779UL), (1035692306UL), (2228303916UL), (3222680885UL), (752017703UL), (1815095408UL), (939691799UL), (3080056566UL), (1985366287UL), (126135654UL), (65327713UL), (3884301346UL), (2536445014UL), (3002467868UL), (955981361UL), (3678532805UL), (2616964783UL), (3168581019UL), (2173417616UL), (3772187171UL), (480342712UL), (451634742UL), (3562778450UL), (236095606UL), (1466950454UL), (434714388UL), (2369278293UL), (2894425895UL), (1766257461UL), (317862862UL), (551196237UL), (4193980239UL), (2952382875UL), (2416349742UL), (12728591UL), (2845888917UL), (1669184098UL), (3928626091UL), (2346338391UL), (2742989641UL), (2151963814UL), (3474431449UL), (3971510537UL), (942354812UL), (1005662613UL), (3668152847UL), (1974578319UL), (2328185090UL), (3234982376UL), (3629684995UL), (3954842437UL), (422675402UL), (477894725UL), (2931444539UL), (209352768UL), (1354642198UL), (3029840461UL), (35700837UL), (3388567298UL), (1660777984UL), (3508313874UL), (587724229UL), (2051237478UL), (1770178720UL), (3631430985UL), (2463932452UL), (144772179UL), (353408424UL), (3783114255UL), (3616422021UL), (1957797444UL), (228084488UL), (192277278UL), (611095909UL), (3638977910UL), (467407503UL), (3391861572UL), (847810786UL), (1413548572UL), (2427237699UL), (3018265496UL), (4249218445UL), (1722760791UL), (1487262638UL), (2322365400UL), (4208966227UL), (2352549740UL), (714311566UL), (1378213368UL), (954101391UL), (2989587005UL), (3946819548UL), (3109244860UL), (4183748384UL), (420941376UL), (952826829UL), (1118787884UL), (1884590246UL), (2199811809UL), (539759724UL), (1521451317UL), (2486654530UL), (2761168910UL), (1100080647UL), (1954997983UL), (2299046195UL), (1386788970UL), (2621928183UL), (916352763UL), (3104695189UL), (3048269905UL), (4197635108UL), (1030118238UL), (369866139UL), (3556473570UL), (1814057352UL), (255485979UL), (3657534664UL), (2916985473UL), (3004205219UL), (4041610788UL), (907575923UL), (4132859581UL), (3856599532UL), (2980178044UL), (2338964683UL), (2236014545UL), (992386759UL), (3393662326UL), (2573125018UL), (579340117UL), (1371742490UL), (2033574313UL), (1938766053UL), (766585731UL), (3090313228UL), (463522324UL), (1482338913UL), (2122086302UL), (3101578277UL), (2418220643UL), (171265751UL), (2249118654UL), (952602228UL), (2143267892UL), (2738647190UL), (1267908572UL), (1138658121UL), (1808026803UL), (2944231951UL), (3096087202UL), (1283228910UL), (1810859539UL), (3881666794UL), (374714364UL), (2601862091UL), (1168357273UL), (376788629UL), (728738466UL), (1710922505UL), (1174181426UL), (2994990779UL), (1035692306UL), (74930675UL), (3222680885UL), (752017703UL), (1815095408UL), (939691799UL), (3404352271UL), (1985366287UL), (126135654UL), (65327713UL), (3884301346UL), (1822629733UL), (3002467868UL), (955981361UL), (3678532805UL), (2616964783UL), (3865359567UL), (2173417616UL), (3772187171UL), (480342712UL), (451634742UL), (1099609112UL), (236095606UL), (1466950454UL), (434714388UL), (2369278293UL), (2671873359UL), (1766257461UL), (317862862UL), (551196237UL), (4193980239UL), (2006763654UL), (2416349742UL), (12728591UL), (2845888917UL), (1669184098UL), (2492983893UL), (2346338391UL), (2742989641UL), (2151963814UL), (3474431449UL), (2095232649UL), (942354812UL), (1005662613UL), (3668152847UL), (1974578319UL), (1748794756UL), (3234982376UL), (3629684995UL), (3954842437UL), (422675402UL), (2291986911UL), (2931444539UL), (209352768UL), (1354642198UL), (3029840461UL), (3772709822UL), (3388567298UL), (1660777984UL), (3508313874UL), (587724229UL), (2759789003UL), (1770178720UL), (3631430985UL), (2463932452UL), (144772179UL), (1572181309UL), (3783114255UL), (3616422021UL), (1957797444UL), (228084488UL), (4106643586UL), (611095909UL), (3638977910UL), (467407503UL), (3391861572UL), (927151111UL), (1413548572UL), (2427237699UL), (3018265496UL), (4249218445UL), (692575565UL), (1487262638UL), (2322365400UL), (4208966227UL), (2352549740UL), (1281886506UL), (1378213368UL), (954101391UL), (2989587005UL), (3946819548UL), (1861811740UL), (1484768905UL), (359662140UL), (4058479705UL), (1306547382UL), (514617018UL), (1685692791UL), (3370601554UL), (2920029077UL), (447798803UL), (3124262580UL), (1841693810UL), (583764638UL), (853545489UL), (2614348705UL), (1445696741UL), (4226719361UL), (1299450005UL), (7404137UL), (3158806368UL), (3487160245UL), (1410910965UL), (3697116584UL), (4272452035UL), (832215403UL), (4190877996UL), (2360539465UL), (1011144434UL), (546018244UL), (613443074UL), (2523894977UL), (998991923UL), (2569220540UL), (4221264346UL), (2627827148UL), (2606458015UL), (261584257UL), (4172552877UL), (1174774061UL), (1040006970UL), (2378868955UL), (1539192255UL), (1322624483UL), (3221782707UL), (3352886416UL), (3634686692UL), (65447704UL), (3962131218UL), (839088053UL), (4154193716UL), (1211888926UL), (319402483UL), (3922826413UL), (3799829447UL), (623726612UL), (1586183272UL), (1853729462UL), (2621029589UL), (708558605UL), (1618007233UL), (2784732545UL), (953859039UL), (921654620UL), (477148727UL), (3592256598UL), (2772318818UL), (1460772911UL), (1309227716UL), (3484274262UL), (3425161241UL), (1677052569UL), (2238155114UL), (2828087292UL), (2361598991UL), (4283732706UL), (1530059373UL), (1564048492UL), (243829114UL), (104328994UL), (3080249237UL), (2054985396UL), (408961407UL), (2978652320UL), (2412674552UL), (3794618070UL), (3644862703UL), (2095186402UL), (3294126752UL), (2970218740UL), (1800713612UL), (3806665216UL), (3990918051UL), (142666452UL), (531078813UL), (1079142774UL), (3437358350UL), (635943961UL), (255576894UL), (2991317718UL), (1208676456UL), (247449774UL), (454879171UL), (113230697UL), (3064123371UL), (336269028UL), (1137083842UL), (959568850UL), (2508623991UL), (3338418112UL), (2660268938UL), (1318010299UL), (3950178561UL), (1078499199UL), (1176289535UL), (3875152821UL), (1984420952UL), (1134199826UL), (2944539174UL), (3667625203UL), (2034152216UL), (1648355307UL), (2376447620UL), (2967418253UL), (185143450UL), (889002925UL), (3999315013UL), (661455858UL), (4026799358UL), (3626504428UL), (3544795311UL), (3642718771UL), (2467387138UL), (1034249749UL), (2051371333UL), (4251353248UL), (1575036366UL), (751400924UL), (2906720214UL), (1210002606UL), (916508568UL), (1728487600UL), (2478884914UL), (3081526615UL), (1867135009UL), (1955998382UL), (701713417UL), (512784398UL), (1255240210UL), (3665676113UL), (1771754697UL), (4000392442UL), (3342268855UL), (2677221913UL), (369054145UL), (4011912082UL), (748537647UL), (1626721797UL), (852497405UL), (168721778UL), (3091138383UL)}, {(3781228998UL), (1787582256UL), (838267218UL), (2710632450UL), (690892139UL), (2484870604UL), (4151302318UL), (1844787776UL), (727768263UL), (1075391038UL), (1842903369UL), (2927332301UL), (3246688068UL), (1234715005UL), (2906526190UL), (3369636401UL), (3091858538UL), (3320767682UL), (920496809UL), (1406803705UL), (3163880457UL), (1540551653UL), (2733620168UL), (2588558057UL), (147277542UL), (803170440UL), (821275940UL), (3897549272UL), (151390608UL), (951639139UL), (904639695UL), (1106545578UL), (1514893712UL), (998760135UL), (2557458623UL), (4109877399UL), (578824730UL), (2174064027UL), (3352513900UL), (3206168298UL), (911932439UL), (2030004973UL), (3283902592UL), (3755877921UL), (250434692UL), (352122318UL), (977153640UL), (642640734UL), (2555395772UL), (2307695537UL), (2593565626UL), (3738143618UL), (734614254UL), (3276420511UL), (2636087597UL), (4157371578UL), (1082026387UL), (429736987UL), (3755125580UL), (1935957937UL), (3300547146UL), (3089498232UL), (4167244256UL), (1619189426UL), (1094447351UL), (1061842570UL), (3666470174UL), (810916769UL), (2263633079UL), (3863543843UL), (1804937521UL), (2774236887UL), (2858593613UL), (961498236UL), (1515309045UL), (1564424234UL), (2276602447UL), (2540994858UL), (78621171UL), (3575132456UL), (2958793283UL), (387554009UL), (688827573UL), (3833764146UL), (2611524056UL), (2296780370UL), (2411775612UL), (3790615886UL), (3399757437UL), (1385198595UL), (1005364336UL), (2093159919UL), (2091827252UL), (1461775197UL), (4225171212UL), (1185831033UL), (12264437UL), (1313835999UL), (556653278UL), (917105970UL), (1471530347UL), (2010243509UL), (3097827138UL), (1399987735UL), (273352191UL), (2505795417UL), (1336824946UL), (3358720963UL), (2874295267UL), (2282349617UL), (3478581038UL), (4027859424UL), (713597958UL), (4059691816UL), (2812811116UL), (2291324146UL), (932688463UL), (3001334051UL), (2028368589UL), (830582457UL), (3964293916UL), (4276849132UL), (1828058403UL), (1351688755UL), (2113265048UL), (42517349UL), (3100438883UL), (1137792178UL), (1479076106UL), (463377892UL), (3964913740UL), (2422362185UL), (436113863UL), (2044139049UL), (4197323265UL), (3275185975UL), (2655265571UL), (1674107588UL), (1496360114UL), (3642050139UL), (1739051417UL), (2393774399UL), (250035802UL), (10186306UL), (263338568UL), (3899157617UL), (3679157076UL), (2258085991UL), (1407319575UL), (899008067UL), (3679828833UL), (711086272UL), (2952963707UL), (3373894808UL), (445540851UL), (3405637490UL), (1343291195UL), (730888681UL), (507768703UL), (3473963321UL), (1779803564UL), (3781228998UL), (1787582256UL), (838267218UL), (2710632450UL), (2431224659UL), (2484870604UL), (4151302318UL), (1844787776UL), (727768263UL), (4012573268UL), (1842903369UL), (2927332301UL), (3246688068UL), (1234715005UL), (3405161215UL), (3369636401UL), (3091858538UL), (3320767682UL), (920496809UL), (400609988UL), (3163880457UL), (1540551653UL), (2733620168UL), (2588558057UL), (2137935937UL), (803170440UL), (821275940UL), (3897549272UL), (151390608UL), (194431797UL), (904639695UL), (1106545578UL), (1514893712UL), (998760135UL), (62528087UL), (4109877399UL), (578824730UL), (2174064027UL), (3352513900UL), (3495516649UL), (911932439UL), (2030004973UL), (3283902592UL), (3755877921UL), (1774462108UL), (352122318UL), (977153640UL), (642640734UL), (2555395772UL), (756528792UL), (2593565626UL), (3738143618UL), (734614254UL), (3276420511UL), (4086313763UL), (4157371578UL), (1082026387UL), (429736987UL), (3755125580UL), (526056489UL), (3300547146UL), (3089498232UL), (4167244256UL), (1619189426UL), (82235109UL), (1061842570UL), (3666470174UL), (810916769UL), (2263633079UL), (1110270726UL), (1804937521UL), (2774236887UL), (2858593613UL), (961498236UL), (1840197918UL), (1564424234UL), (2276602447UL), (2540994858UL), (78621171UL), (3690913528UL), (2958793283UL), (387554009UL), (688827573UL), (3833764146UL), (3626285597UL), (2296780370UL), (2411775612UL), (3790615886UL), (3399757437UL), (1561545830UL), (1005364336UL), (2093159919UL), (2091827252UL), (1461775197UL), (63358970UL), (1185831033UL), (12264437UL), (1313835999UL), (556653278UL), (3918754976UL), (1471530347UL), (2010243509UL), (3097827138UL), (1399987735UL), (2767111911UL), (2505795417UL), (1336824946UL), (3358720963UL), (2874295267UL), (902314853UL), (3478581038UL), (4027859424UL), (713597958UL), (4059691816UL), (1462989647UL), (2291324146UL), (932688463UL), (3001334051UL), (2028368589UL), (3594712587UL), (3964293916UL), (4276849132UL), (1828058403UL), (1351688755UL), (2571513800UL), (42517349UL), (3100438883UL), (1137792178UL), (1479076106UL), (140519541UL), (3964913740UL), (2422362185UL), (436113863UL), (2044139049UL), (226785542UL), (3275185975UL), (2655265571UL), (1674107588UL), (1496360114UL), (46428973UL), (1739051417UL), (2393774399UL), (250035802UL), (10186306UL), (4118320101UL), (3899157617UL), (3679157076UL), (2258085991UL), (1407319575UL), (4267866849UL), (3679828833UL), (711086272UL), (2952963707UL), (3373894808UL), (3662249794UL), (3405637490UL), (1343291195UL), (730888681UL), (507768703UL), (2930510271UL), (1779803564UL), (3781228998UL), (1787582256UL), (838267218UL), (1817693489UL), (2431224659UL), (2484870604UL), (4151302318UL), (1844787776UL), (1788220652UL), (4012573268UL), (1842903369UL), (2927332301UL), (3246688068UL), (2050648011UL), (3405161215UL), (3369636401UL), (3091858538UL), (3320767682UL), (241001958UL), (400609988UL), (3163880457UL), (1540551653UL), (2733620168UL), (3857223520UL), (2137935937UL), (803170440UL), (821275940UL), (3897549272UL), (1451986523UL), (194431797UL), (904639695UL), (1106545578UL), (1514893712UL), (4147878244UL), (62528087UL), (4109877399UL), (578824730UL), (2174064027UL), (461571251UL), (3495516649UL), (911932439UL), (2030004973UL), (3283902592UL), (1580354765UL), (1774462108UL), (352122318UL), (977153640UL), (642640734UL), (1019387737UL), (756528792UL), (2593565626UL), (3738143618UL), (734614254UL), (999431451UL), (4086313763UL), (4157371578UL), (1082026387UL), (429736987UL), (140091634UL), (526056489UL), (3300547146UL), (3089498232UL), (4167244256UL), (3202763095UL), (82235109UL), (1061842570UL), (3666470174UL), (810916769UL), (3663992550UL), (1110270726UL), (1804937521UL), (2774236887UL), (2858593613UL), (2203639366UL), (1840197918UL), (1564424234UL), (2276602447UL), (2540994858UL), (978199281UL), (3690913528UL), (2958793283UL), (387554009UL), (688827573UL), (375113876UL), (3626285597UL), (2296780370UL), (2411775612UL), (3790615886UL), (1277897939UL), (1561545830UL), (1005364336UL), (2093159919UL), (2091827252UL), (1631078873UL), (63358970UL), (1185831033UL), (12264437UL), (1313835999UL), (3872277948UL), (3918754976UL), (1471530347UL), (2010243509UL), (3097827138UL), (1291836608UL), (2767111911UL), (2505795417UL), (1336824946UL), (3358720963UL), (3954754615UL), (902314853UL), (3478581038UL), (4027859424UL), (713597958UL), (2198246306UL), (1462989647UL), (2291324146UL), (932688463UL), (3001334051UL), (2374736511UL), (3594712587UL), (3964293916UL), (4276849132UL), (1828058403UL), (3619038368UL), (2571513800UL), (42517349UL), (3100438883UL), (1137792178UL), (1146435746UL), (140519541UL), (3964913740UL), (2422362185UL), (436113863UL), (3460540392UL), (226785542UL), (3275185975UL), (2655265571UL), (1674107588UL), (1288223861UL), (46428973UL), (1739051417UL), (2393774399UL), (250035802UL), (1986226858UL), (4118320101UL), (3899157617UL), (3679157076UL), (2258085991UL), (551117761UL), (4267866849UL), (3679828833UL), (711086272UL), (2952963707UL), (1667866621UL), (3662249794UL), (3405637490UL), (1343291195UL), (730888681UL), (2381246695UL), (2930510271UL), (1779803564UL), (3781228998UL), (1787582256UL), (1236367773UL), (1817693489UL), (2431224659UL), (2484870604UL), (4151302318UL), (2902321811UL), (1788220652UL), (4012573268UL), (1842903369UL), (2927332301UL), (1185539274UL), (2050648011UL), (3405161215UL), (3369636401UL), (3091858538UL), (4240555382UL), (241001958UL), (400609988UL), (3163880457UL), (1540551653UL), (2539098607UL), (3857223520UL), (2137935937UL), (803170440UL), (821275940UL), (3485313735UL), (1451986523UL), (194431797UL), (904639695UL), (1106545578UL), (1633417190UL), (4147878244UL), (62528087UL), (4109877399UL), (578824730UL), (3671726812UL), (461571251UL), (3495516649UL), (911932439UL), (2030004973UL), (2002341352UL), (1580354765UL), (1774462108UL), (352122318UL), (977153640UL), (170033402UL), (1019387737UL), (756528792UL), (2593565626UL), (3738143618UL), (4160516213UL), (999431451UL), (4086313763UL), (4157371578UL), (1082026387UL), (1423352480UL), (140091634UL), (526056489UL), (3300547146UL), (3089498232UL), (4266971502UL), (3202763095UL), (82235109UL), (1061842570UL), (3666470174UL), (945994616UL), (3663992550UL), (1110270726UL), (1804937521UL), (2774236887UL), (3776581315UL), (2203639366UL), (1840197918UL), (1564424234UL), (2276602447UL), (928117829UL), (978199281UL), (3690913528UL), (2958793283UL), (387554009UL), (2817496615UL), (375113876UL), (3626285597UL), (2296780370UL), (2411775612UL), (1346030561UL), (1277897939UL), (1561545830UL), (1005364336UL), (2093159919UL), (821902776UL), (1631078873UL), (63358970UL), (1185831033UL), (12264437UL), (3192617499UL), (3872277948UL), (3918754976UL), (1471530347UL), (2010243509UL), (4011062105UL), (1291836608UL), (2767111911UL), (2505795417UL), (1336824946UL), (1593119272UL), (3954754615UL), (902314853UL), (3478581038UL), (4027859424UL), (1163079365UL), (2198246306UL), (1462989647UL), (2291324146UL), (932688463UL), (4018333691UL), (2374736511UL), (3594712587UL), (3964293916UL), (4276849132UL), (3902062310UL), (3619038368UL), (2571513800UL), (42517349UL), (3100438883UL), (1645455709UL), (1146435746UL), (140519541UL), (3964913740UL), (2422362185UL), (3338363150UL), (3460540392UL), (226785542UL), (3275185975UL), (2655265571UL), (3789582441UL), (1288223861UL), (46428973UL), (1739051417UL), (2393774399UL), (2257001236UL), (1986226858UL), (4118320101UL), (3899157617UL), (3679157076UL), (3707520907UL), (551117761UL), (4267866849UL), (3679828833UL), (711086272UL), (570153549UL), (1667866621UL), (3662249794UL), (3405637490UL), (1343291195UL), (112368058UL), (2615115584UL), (2865130041UL), (357584504UL), (528807633UL), (1816055434UL), (2854850066UL), (190222907UL), (1014915859UL), (3472967123UL), (2605782564UL), (3353130066UL), (540430076UL), (2087143725UL), (1571283916UL), (1604766425UL), (934199876UL), (3359569795UL), (4168578472UL), (1745876717UL), (277026333UL), (2679446726UL), (3582165485UL), (3954458991UL), (2615245404UL), (2410035461UL), (3442004248UL), (2814474875UL), (1734556428UL), (2653422310UL), (4033890533UL), (2373774914UL), (3011118469UL), (1276695464UL), (2995405818UL), (782363735UL), (2242531852UL), (4206829780UL), (1486885236UL), (3764707851UL), (1945614253UL), (1147926733UL), (701960774UL), (3435251514UL), (3626050187UL), (3587799538UL), (2399216643UL), (3217822006UL), (3600044386UL), (648239752UL), (2997947488UL), (1754097052UL), (4109638936UL), (3413714077UL), (1038375790UL), (3394259389UL), (2284776380UL), (2711956471UL), (1278424040UL), (1272230764UL), (3980809660UL), (1983901240UL), (894405781UL), (582621606UL), (1274260631UL), (763432985UL), (1862236664UL), (10249416UL), (3838574116UL), (1912270458UL), (3491686662UL), (2696669149UL), (312119069UL), (1812714569UL), (2729307370UL), (3045249652UL), (303684944UL), (503720764UL), (4029412414UL), (4101616421UL), (3484358948UL), (1261027935UL), (145713434UL), (2918444923UL), (2099546237UL), (3173693583UL), (3498398823UL), (3769717769UL), (2860220116UL), (2919562911UL), (1221047715UL), (1749384742UL), (1018968146UL), (2771587474UL), (2746107326UL), (1182859751UL), (2403805226UL), (2206395932UL), (1500348209UL), (1762634532UL), (3017223998UL), (2043185588UL), (2124568729UL), (1619852613UL), (3248258238UL), (3393223375UL), (644860154UL), (2465108160UL), (2358875673UL), (3643741304UL), (1891106916UL), (416443047UL), (3298583974UL), (1030877276UL), (2839390034UL), (4181398645UL), (1845333999UL), (3643365079UL), (1993116780UL), (1763857175UL), (1951718545UL), (3785659537UL), (4156412284UL), (4138026128UL), (3480291142UL), (54280556UL), (4169041146UL), (3130638398UL), (3236816184UL), (3559898998UL), (916420843UL), (938920758UL), (3425021599UL), (1528477728UL), (3597939783UL), (3516249439UL), (936528538UL), (4174817780UL), (2541489033UL), (3962368135UL), (2054336507UL), (2610093970UL), (3613025255UL), (3583905994UL), (2990129491UL), (332823408UL), (2505138276UL), (3811707598UL), (373987627UL), (4263703898UL), (1668946560UL), (3213253899UL), (2673819338UL), (1631405099UL), (3127443274UL), (549232331UL), (21447814UL), (1647238011UL), (3093799993UL), (1922712395UL)}, {(4224788259UL), (3569487556UL), (1080137041UL), (2788623569UL), (856160888UL), (2195536417UL), (3030463035UL), (2906439247UL), (896055051UL), (1967105456UL), (2093562169UL), (2919742950UL), (546374698UL), (1372591815UL), (3773616637UL), (349073007UL), (1331102855UL), (3035367896UL), (1222622311UL), (2266618592UL), (74466398UL), (1140488004UL), (855606859UL), (3803728487UL), (3589743162UL), (2748402856UL), (1044387368UL), (1494850922UL), (2242660891UL), (3111566003UL), (2013737074UL), (163276737UL), (1526772858UL), (3047139947UL), (3150695453UL), (2583795468UL), (3628272447UL), (305282258UL), (2151108134UL), (2905708853UL), (1052800761UL), (3354632338UL), (1017036861UL), (2453680791UL), (2673902555UL), (1622154585UL), (2893733051UL), (3888482522UL), (306284440UL), (3245137245UL), (3480776670UL), (2865396581UL), (3571456526UL), (3284891766UL), (1393584874UL), (1057867320UL), (2888126310UL), (3302325443UL), (4135187530UL), (1770789166UL), (1615533805UL), (1438727397UL), (2921922012UL), (3156703516UL), (435047591UL), (2999350446UL), (575044884UL), (1001339111UL), (625824120UL), (2489346227UL), (2104489492UL), (2494528446UL), (1141458836UL), (4048430074UL), (2599022749UL), (2438694106UL), (1443850072UL), (3321658999UL), (87870515UL), (958195816UL), (380666771UL), (3062272732UL), (4178548642UL), (4274603044UL), (888566831UL), (3386636024UL), (1636806704UL), (2400069397UL), (3003029365UL), (1953620944UL), (3278772216UL), (1562778171UL), (2767090642UL), (14436957UL), (913966574UL), (1724553886UL), (2015261135UL), (4191296122UL), (1688939147UL), (110865735UL), (2913800286UL), (4131469475UL), (315962755UL), (1531174227UL), (1226678476UL), (3446400266UL), (3896297836UL), (539834883UL), (2871306264UL), (3333932675UL), (2229436010UL), (1928458456UL), (464682640UL), (1786180352UL), (162599143UL), (817038005UL), (3146256537UL), (1676400403UL), (2484731087UL), (702610427UL), (4005124049UL), (1691076958UL), (1268494739UL), (4093608833UL), (3757213737UL), (2627839929UL), (2884764386UL), (1548110665UL), (3361745333UL), (3955318088UL), (3264527857UL), (3969225726UL), (968269281UL), (2630991382UL), (2716444139UL), (1071781623UL), (3704437685UL), (1511193802UL), (843840414UL), (1277966236UL), (4141095880UL), (715016637UL), (1255888181UL), (1321941951UL), (1180174408UL), (1021629824UL), (3395369301UL), (3912221525UL), (2611782663UL), (4038117717UL), (2253029302UL), (974431991UL), (347200257UL), (886823557UL), (2275848777UL), (3732452739UL), (3708953729UL), (2688020866UL), (4185175489UL), (99605353UL), (2387945286UL), (4224788259UL), (3569487556UL), (1080137041UL), (2788623569UL), (238715294UL), (2195536417UL), (3030463035UL), (2906439247UL), (896055051UL), (3061240402UL), (2093562169UL), (2919742950UL), (546374698UL), (1372591815UL), (851057115UL), (349073007UL), (1331102855UL), (3035367896UL), (1222622311UL), (3305595574UL), (74466398UL), (1140488004UL), (855606859UL), (3803728487UL), (3838112757UL), (2748402856UL), (1044387368UL), (1494850922UL), (2242660891UL), (1038286760UL), (2013737074UL), (163276737UL), (1526772858UL), (3047139947UL), (3518918891UL), (2583795468UL), (3628272447UL), (305282258UL), (2151108134UL), (3555155951UL), (1052800761UL), (3354632338UL), (1017036861UL), (2453680791UL), (2394691836UL), (1622154585UL), (2893733051UL), (3888482522UL), (306284440UL), (2055552069UL), (3480776670UL), (2865396581UL), (3571456526UL), (3284891766UL), (1179339312UL), (1057867320UL), (2888126310UL), (3302325443UL), (4135187530UL), (683364318UL), (1615533805UL), (1438727397UL), (2921922012UL), (3156703516UL), (1333086260UL), (2999350446UL), (575044884UL), (1001339111UL), (625824120UL), (576119652UL), (2104489492UL), (2494528446UL), (1141458836UL), (4048430074UL), (786660788UL), (2438694106UL), (1443850072UL), (3321658999UL), (87870515UL), (457955380UL), (380666771UL), (3062272732UL), (4178548642UL), (4274603044UL), (2256710588UL), (3386636024UL), (1636806704UL), (2400069397UL), (3003029365UL), (3733049985UL), (3278772216UL), (1562778171UL), (2767090642UL), (14436957UL), (530062778UL), (1724553886UL), (2015261135UL), (4191296122UL), (1688939147UL), (2981240708UL), (2913800286UL), (4131469475UL), (315962755UL), (1531174227UL), (2433363617UL), (3446400266UL), (3896297836UL), (539834883UL), (2871306264UL), (2597546929UL), (2229436010UL), (1928458456UL), (464682640UL), (1786180352UL), (1165821797UL), (817038005UL), (3146256537UL), (1676400403UL), (2484731087UL), (3239493343UL), (4005124049UL), (1691076958UL), (1268494739UL), (4093608833UL), (2088690204UL), (2627839929UL), (2884764386UL), (1548110665UL), (3361745333UL), (1075350364UL), (3264527857UL), (3969225726UL), (968269281UL), (2630991382UL), (4103280359UL), (1071781623UL), (3704437685UL), (1511193802UL), (843840414UL), (1340474980UL), (4141095880UL), (715016637UL), (1255888181UL), (1321941951UL), (2512565938UL), (1021629824UL), (3395369301UL), (3912221525UL), (2611782663UL), (2287272047UL), (2253029302UL), (974431991UL), (347200257UL), (886823557UL), (3775715445UL), (3732452739UL), (3708953729UL), (2688020866UL), (4185175489UL), (2151114047UL), (2387945286UL), (4224788259UL), (3569487556UL), (1080137041UL), (879682447UL), (238715294UL), (2195536417UL), (3030463035UL), (2906439247UL), (3975397430UL), (3061240402UL), (2093562169UL), (2919742950UL), (546374698UL), (1928060945UL), (851057115UL), (349073007UL), (1331102855UL), (3035367896UL), (1148668613UL), (3305595574UL), (74466398UL), (1140488004UL), (855606859UL), (917923571UL), (3838112757UL), (2748402856UL), (1044387368UL), (1494850922UL), (995791756UL), (1038286760UL), (2013737074UL), (163276737UL), (1526772858UL), (1944370085UL), (3518918891UL), (2583795468UL), (3628272447UL), (305282258UL), (685261037UL), (3555155951UL), (1052800761UL), (3354632338UL), (1017036861UL), (1620076466UL), (2394691836UL), (1622154585UL), (2893733051UL), (3888482522UL), (4119309151UL), (2055552069UL), (3480776670UL), (2865396581UL), (3571456526UL), (4008552940UL), (1179339312UL), (1057867320UL), (2888126310UL), (3302325443UL), (2359989247UL), (683364318UL), (1615533805UL), (1438727397UL), (2921922012UL), (2092991022UL), (1333086260UL), (2999350446UL), (575044884UL), (1001339111UL), (2406217399UL), (576119652UL), (2104489492UL), (2494528446UL), (1141458836UL), (1856565466UL), (786660788UL), (2438694106UL), (1443850072UL), (3321658999UL), (2752588925UL), (457955380UL), (380666771UL), (3062272732UL), (4178548642UL), (1354877973UL), (2256710588UL), (3386636024UL), (1636806704UL), (2400069397UL), (2275777233UL), (3733049985UL), (3278772216UL), (1562778171UL), (2767090642UL), (3438624166UL), (530062778UL), (1724553886UL), (2015261135UL), (4191296122UL), (3842215040UL), (2981240708UL), (2913800286UL), (4131469475UL), (315962755UL), (2891870900UL), (2433363617UL), (3446400266UL), (3896297836UL), (539834883UL), (1390877376UL), (2597546929UL), (2229436010UL), (1928458456UL), (464682640UL), (1405678725UL), (1165821797UL), (817038005UL), (3146256537UL), (1676400403UL), (9522151UL), (3239493343UL), (4005124049UL), (1691076958UL), (1268494739UL), (4076978821UL), (2088690204UL), (2627839929UL), (2884764386UL), (1548110665UL), (3713129550UL), (1075350364UL), (3264527857UL), (3969225726UL), (968269281UL), (2669129178UL), (4103280359UL), (1071781623UL), (3704437685UL), (1511193802UL), (2032747975UL), (1340474980UL), (4141095880UL), (715016637UL), (1255888181UL), (1290704077UL), (2512565938UL), (1021629824UL), (3395369301UL), (3912221525UL), (767420943UL), (2287272047UL), (2253029302UL), (974431991UL), (347200257UL), (940587649UL), (3775715445UL), (3732452739UL), (3708953729UL), (2688020866UL), (1603856534UL), (2151114047UL), (2387945286UL), (4224788259UL), (3569487556UL), (4060395365UL), (879682447UL), (238715294UL), (2195536417UL), (3030463035UL), (774839173UL), (3975397430UL), (3061240402UL), (2093562169UL), (2919742950UL), (77503099UL), (1928060945UL), (851057115UL), (349073007UL), (1331102855UL), (4216140027UL), (1148668613UL), (3305595574UL), (74466398UL), (1140488004UL), (1728766104UL), (917923571UL), (3838112757UL), (2748402856UL), (1044387368UL), (1408900577UL), (995791756UL), (1038286760UL), (2013737074UL), (163276737UL), (936142172UL), (1944370085UL), (3518918891UL), (2583795468UL), (3628272447UL), (1701372078UL), (685261037UL), (3555155951UL), (1052800761UL), (3354632338UL), (2951922777UL), (1620076466UL), (2394691836UL), (1622154585UL), (2893733051UL), (2494523614UL), (4119309151UL), (2055552069UL), (3480776670UL), (2865396581UL), (3031455484UL), (4008552940UL), (1179339312UL), (1057867320UL), (2888126310UL), (2970791558UL), (2359989247UL), (683364318UL), (1615533805UL), (1438727397UL), (3697460033UL), (2092991022UL), (1333086260UL), (2999350446UL), (575044884UL), (2712063736UL), (2406217399UL), (576119652UL), (2104489492UL), (2494528446UL), (1096189230UL), (1856565466UL), (786660788UL), (2438694106UL), (1443850072UL), (3615481975UL), (2752588925UL), (457955380UL), (380666771UL), (3062272732UL), (2387056252UL), (1354877973UL), (2256710588UL), (3386636024UL), (1636806704UL), (517188972UL), (2275777233UL), (3733049985UL), (3278772216UL), (1562778171UL), (3436331606UL), (3438624166UL), (530062778UL), (1724553886UL), (2015261135UL), (1711407722UL), (3842215040UL), (2981240708UL), (2913800286UL), (4131469475UL), (878455086UL), (2891870900UL), (2433363617UL), (3446400266UL), (3896297836UL), (4251949215UL), (1390877376UL), (2597546929UL), (2229436010UL), (1928458456UL), (719826541UL), (1405678725UL), (1165821797UL), (817038005UL), (3146256537UL), (3883590627UL), (9522151UL), (3239493343UL), (4005124049UL), (1691076958UL), (893183073UL), (4076978821UL), (2088690204UL), (2627839929UL), (2884764386UL), (3312769297UL), (3713129550UL), (1075350364UL), (3264527857UL), (3969225726UL), (4161107579UL), (2669129178UL), (4103280359UL), (1071781623UL), (3704437685UL), (1400940789UL), (2032747975UL), (1340474980UL), (4141095880UL), (715016637UL), (1705234794UL), (1290704077UL), (2512565938UL), (1021629824UL), (3395369301UL), (2934074199UL), (767420943UL), (2287272047UL), (2253029302UL), (974431991UL), (3060035390UL), (940587649UL), (3775715445UL), (3732452739UL), (3708953729UL), (3489160434UL), (3200799223UL), (340420813UL), (2539294182UL), (2619616318UL), (456806966UL), (4272538790UL), (2994564124UL), (2757588894UL), (3493053179UL), (2946195469UL), (1402305257UL), (2266356503UL), (3512914478UL), (273195440UL), (3579761455UL), (862317458UL), (1894959361UL), (42596779UL), (376641729UL), (782820755UL), (716528645UL), (222675565UL), (4038035195UL), (311038326UL), (395780597UL), (2025474869UL), (404396572UL), (4138962756UL), (2441107014UL), (3525378401UL), (947085768UL), (3758218091UL), (3185789607UL), (638283508UL), (3802505926UL), (830259842UL), (1086400881UL), (3444485UL), (142418107UL), (4283468141UL), (1669846189UL), (955065888UL), (3864384467UL), (73139517UL), (136809048UL), (1444329434UL), (174974637UL), (3303183786UL), (282216656UL), (3114827080UL), (3811060015UL), (1610640996UL), (3824096289UL), (1123437514UL), (3826582808UL), (39407702UL), (2437666463UL), (2454206642UL), (830758422UL), (4190092654UL), (1941090912UL), (224373276UL), (3704201239UL), (3284012568UL), (4056152539UL), (1022047941UL), (1077111803UL), (3028336675UL), (3207391465UL), (3459202233UL), (1991240724UL), (4184491520UL), (1851863093UL), (1038639595UL), (1392247730UL), (2113875749UL), (1162388509UL), (2629935260UL), (3545260772UL), (991928712UL), (4064775043UL), (4180493781UL), (2134685922UL), (642853690UL), (290065503UL), (1629968UL), (3150373868UL), (3110755428UL), (2254306163UL), (421928533UL), (11426979UL), (3042809169UL), (786868170UL), (1287942583UL), (1851107769UL), (1444903906UL), (4150950197UL), (3737798306UL), (2848738554UL), (505924220UL), (2944131627UL), (2639930627UL), (1339887691UL), (2382166850UL), (2668971315UL), (3944739049UL), (2217612340UL), (4142682607UL), (997824216UL), (123465626UL), (844518179UL), (1161486362UL), (2706162053UL), (2966530827UL), (4103639053UL), (1837121393UL), (909648429UL), (298619078UL), (2057042454UL), (3613272637UL), (3609349032UL), (1664428748UL), (1871510359UL), (58508710UL), (1079418100UL), (3278870121UL), (3821562746UL), (16654909UL), (2530580589UL), (3361874982UL), (629910009UL), (2124761646UL), (2508133604UL), (1954315500UL), (3019833617UL), (141617625UL), (1653192078UL), (1541695589UL), (1223978475UL), (3875963510UL), (3028691587UL), (3450826564UL), (2185849120UL), (1956475624UL), (3053842172UL), (3550887830UL), (2672339803UL), (176823785UL), (913229929UL), (681399502UL), (2256486297UL), (2881672598UL), (597153273UL), (2782767695UL), (1133158067UL), (4126077325UL), (3456027404UL), (754062201UL), (4069172986UL)}, {(2441935114UL), (3465447683UL), (2897229686UL), (3845380309UL), (1199633364UL), (495424232UL), (2490548037UL), (581670528UL), (2467171733UL), (2200094863UL), (2163927790UL), (3895792830UL), (2097210789UL), (1606544633UL), (1305562517UL), (4072525389UL), (3256142090UL), (349440478UL), (3920932491UL), (2462464051UL), (1075951496UL), (2835763703UL), (1593198055UL), (2380945625UL), (543531323UL), (3182766507UL), (2927484354UL), (2877470578UL), (4153923603UL), (2443156156UL), (1168544900UL), (888955615UL), (3605412824UL), (1336677864UL), (3256116974UL), (2884036014UL), (4070749843UL), (2989661773UL), (1095584023UL), (1370834065UL), (3534389580UL), (312378113UL), (3190819203UL), (1247574926UL), (2046019470UL), (3536918510UL), (1479030180UL), (847820646UL), (3992973956UL), (3827223401UL), (4113429617UL), (3504933502UL), (295000614UL), (2238923504UL), (3485717254UL), (290246351UL), (1064210816UL), (2848539559UL), (2617134888UL), (422213010UL), (2796674561UL), (3568250500UL), (2736237915UL), (3950756060UL), (1527249993UL), (3603540278UL), (4115393386UL), (2851621193UL), (4230341156UL), (905168850UL), (3916344126UL), (1496013046UL), (206343742UL), (2894205125UL), (1082918859UL), (2746480417UL), (3077328661UL), (1209440053UL), (3258293856UL), (1032236533UL), (3043332566UL), (446879604UL), (587022214UL), (1614371566UL), (3040899994UL), (3686422145UL), (937325128UL), (1968833679UL), (169086151UL), (4075432555UL), (1196046411UL), (3101745581UL), (4228079966UL), (2942213563UL), (1195005323UL), (1673491641UL), (1762746534UL), (3641827252UL), (694590905UL), (1828365460UL), (513716230UL), (3106485486UL), (2441593994UL), (4044462965UL), (3628121101UL), (3957990629UL), (179764922UL), (579361186UL), (3474393871UL), (2474241006UL), (4031850878UL), (3120409532UL), (4011587898UL), (3682942579UL), (3257272830UL), (3097029759UL), (2652540191UL), (1128762588UL), (1040256382UL), (2743736716UL), (334893087UL), (1892049031UL), (2603159239UL), (3712772023UL), (2126593224UL), (3465793906UL), (3180780589UL), (725740783UL), (3728108967UL), (573931936UL), (137996587UL), (110756053UL), (3984787930UL), (3773232816UL), (3406981985UL), (1783088630UL), (2080089781UL), (195827466UL), (1409073281UL), (867635355UL), (3049533211UL), (486687054UL), (2570137956UL), (527522011UL), (1084454084UL), (1019222771UL), (1415565066UL), (650794786UL), (629618803UL), (1237709131UL), (1241899078UL), (2751644247UL), (2792313337UL), (649402117UL), (275078659UL), (752459111UL), (2173220853UL), (3207031798UL), (821073585UL), (3005400729UL), (1085152012UL), (2441935114UL), (3465447683UL), (2897229686UL), (3845380309UL), (3573898488UL), (495424232UL), (2490548037UL), (581670528UL), (2467171733UL), (1208279791UL), (2163927790UL), (3895792830UL), (2097210789UL), (1606544633UL), (2148733343UL), (4072525389UL), (3256142090UL), (349440478UL), (3920932491UL), (657289255UL), (1075951496UL), (2835763703UL), (1593198055UL), (2380945625UL), (149487931UL), (3182766507UL), (2927484354UL), (2877470578UL), (4153923603UL), (606130344UL), (1168544900UL), (888955615UL), (3605412824UL), (1336677864UL), (53448770UL), (2884036014UL), (4070749843UL), (2989661773UL), (1095584023UL), (2766144383UL), (3534389580UL), (312378113UL), (3190819203UL), (1247574926UL), (1530609481UL), (3536918510UL), (1479030180UL), (847820646UL), (3992973956UL), (154171325UL), (4113429617UL), (3504933502UL), (295000614UL), (2238923504UL), (282708664UL), (290246351UL), (1064210816UL), (2848539559UL), (2617134888UL), (36906646UL), (2796674561UL), (3568250500UL), (2736237915UL), (3950756060UL), (3416260072UL), (3603540278UL), (4115393386UL), (2851621193UL), (4230341156UL), (448215287UL), (3916344126UL), (1496013046UL), (206343742UL), (2894205125UL), (2420861244UL), (2746480417UL), (3077328661UL), (1209440053UL), (3258293856UL), (2545287695UL), (3043332566UL), (446879604UL), (587022214UL), (1614371566UL), (958587333UL), (3686422145UL), (937325128UL), (1968833679UL), (169086151UL), (154576725UL), (1196046411UL), (3101745581UL), (4228079966UL), (2942213563UL), (2487464668UL), (1673491641UL), (1762746534UL), (3641827252UL), (694590905UL), (3754606623UL), (513716230UL), (3106485486UL), (2441593994UL), (4044462965UL), (3064108377UL), (3957990629UL), (179764922UL), (579361186UL), (3474393871UL), (2138270428UL), (4031850878UL), (3120409532UL), (4011587898UL), (3682942579UL), (4015980199UL), (3097029759UL), (2652540191UL), (1128762588UL), (1040256382UL), (3908621649UL), (334893087UL), (1892049031UL), (2603159239UL), (3712772023UL), (3291038350UL), (3465793906UL), (3180780589UL), (725740783UL), (3728108967UL), (436976908UL), (137996587UL), (110756053UL), (3984787930UL), (3773232816UL), (1000054791UL), (1783088630UL), (2080089781UL), (195827466UL), (1409073281UL), (3036813614UL), (3049533211UL), (486687054UL), (2570137956UL), (527522011UL), (3669951690UL), (1019222771UL), (1415565066UL), (650794786UL), (629618803UL), (4140569538UL), (1241899078UL), (2751644247UL), (2792313337UL), (649402117UL), (2946582304UL), (752459111UL), (2173220853UL), (3207031798UL), (821073585UL), (1738142977UL), (1085152012UL), (2441935114UL), (3465447683UL), (2897229686UL), (2707197334UL), (3573898488UL), (495424232UL), (2490548037UL), (581670528UL), (2365865647UL), (1208279791UL), (2163927790UL), (3895792830UL), (2097210789UL), (3219551420UL), (2148733343UL), (4072525389UL), (3256142090UL), (349440478UL), (3706519197UL), (657289255UL), (1075951496UL), (2835763703UL), (1593198055UL), (2200084531UL), (149487931UL), (3182766507UL), (2927484354UL), (2877470578UL), (2394288661UL), (606130344UL), (1168544900UL), (888955615UL), (3605412824UL), (1503975597UL), (53448770UL), (2884036014UL), (4070749843UL), (2989661773UL), (243605110UL), (2766144383UL), (3534389580UL), (312378113UL), (3190819203UL), (2398088088UL), (1530609481UL), (3536918510UL), (1479030180UL), (847820646UL), (2940281320UL), (154171325UL), (4113429617UL), (3504933502UL), (295000614UL), (3078701806UL), (282708664UL), (290246351UL), (1064210816UL), (2848539559UL), (3960345380UL), (36906646UL), (2796674561UL), (3568250500UL), (2736237915UL), (2657034787UL), (3416260072UL), (3603540278UL), (4115393386UL), (2851621193UL), (3847740427UL), (448215287UL), (3916344126UL), (1496013046UL), (206343742UL), (3419083433UL), (2420861244UL), (2746480417UL), (3077328661UL), (1209440053UL), (3824237152UL), (2545287695UL), (3043332566UL), (446879604UL), (587022214UL), (506352928UL), (958587333UL), (3686422145UL), (937325128UL), (1968833679UL), (1808935939UL), (154576725UL), (1196046411UL), (3101745581UL), (4228079966UL), (709576348UL), (2487464668UL), (1673491641UL), (1762746534UL), (3641827252UL), (3968332142UL), (3754606623UL), (513716230UL), (3106485486UL), (2441593994UL), (1453443785UL), (3064108377UL), (3957990629UL), (179764922UL), (579361186UL), (1454621561UL), (2138270428UL), (4031850878UL), (3120409532UL), (4011587898UL), (898119245UL), (4015980199UL), (3097029759UL), (2652540191UL), (1128762588UL), (1131456853UL), (3908621649UL), (334893087UL), (1892049031UL), (2603159239UL), (4280222837UL), (3291038350UL), (3465793906UL), (3180780589UL), (725740783UL), (1515867399UL), (436976908UL), (137996587UL), (110756053UL), (3984787930UL), (1295994548UL), (1000054791UL), (1783088630UL), (2080089781UL), (195827466UL), (252558267UL), (3036813614UL), (3049533211UL), (486687054UL), (2570137956UL), (786434419UL), (3669951690UL), (1019222771UL), (1415565066UL), (650794786UL), (1316734597UL), (4140569538UL), (1241899078UL), (2751644247UL), (2792313337UL), (4014748337UL), (2946582304UL), (752459111UL), (2173220853UL), (3207031798UL), (2903407363UL), (1738142977UL), (1085152012UL), (2441935114UL), (3465447683UL), (1082984764UL), (2707197334UL), (3573898488UL), (495424232UL), (2490548037UL), (240094068UL), (2365865647UL), (1208279791UL), (2163927790UL), (3895792830UL), (1107651215UL), (3219551420UL), (2148733343UL), (4072525389UL), (3256142090UL), (681942656UL), (3706519197UL), (657289255UL), (1075951496UL), (2835763703UL), (2172774506UL), (2200084531UL), (149487931UL), (3182766507UL), (2927484354UL), (3069592433UL), (2394288661UL), (606130344UL), (1168544900UL), (888955615UL), (757163746UL), (1503975597UL), (53448770UL), (2884036014UL), (4070749843UL), (1705538727UL), (243605110UL), (2766144383UL), (3534389580UL), (312378113UL), (2256467250UL), (2398088088UL), (1530609481UL), (3536918510UL), (1479030180UL), (1360826079UL), (2940281320UL), (154171325UL), (4113429617UL), (3504933502UL), (714934244UL), (3078701806UL), (282708664UL), (290246351UL), (1064210816UL), (3694453051UL), (3960345380UL), (36906646UL), (2796674561UL), (3568250500UL), (3400481963UL), (2657034787UL), (3416260072UL), (3603540278UL), (4115393386UL), (1466632735UL), (3847740427UL), (448215287UL), (3916344126UL), (1496013046UL), (2893537514UL), (3419083433UL), (2420861244UL), (2746480417UL), (3077328661UL), (2815979224UL), (3824237152UL), (2545287695UL), (3043332566UL), (446879604UL), (3719452721UL), (506352928UL), (958587333UL), (3686422145UL), (937325128UL), (2653904510UL), (1808935939UL), (154576725UL), (1196046411UL), (3101745581UL), (425411544UL), (709576348UL), (2487464668UL), (1673491641UL), (1762746534UL), (1960605594UL), (3968332142UL), (3754606623UL), (513716230UL), (3106485486UL), (2881551071UL), (1453443785UL), (3064108377UL), (3957990629UL), (179764922UL), (1408218536UL), (1454621561UL), (2138270428UL), (4031850878UL), (3120409532UL), (3700386494UL), (898119245UL), (4015980199UL), (3097029759UL), (2652540191UL), (2181464767UL), (1131456853UL), (3908621649UL), (334893087UL), (1892049031UL), (4220220071UL), (4280222837UL), (3291038350UL), (3465793906UL), (3180780589UL), (1737123182UL), (1515867399UL), (436976908UL), (137996587UL), (110756053UL), (1360813614UL), (1295994548UL), (1000054791UL), (1783088630UL), (2080089781UL), (1019367341UL), (252558267UL), (3036813614UL), (3049533211UL), (486687054UL), (387915679UL), (786434419UL), (3669951690UL), (1019222771UL), (1415565066UL), (4267042909UL), (1316734597UL), (4140569538UL), (1241899078UL), (2751644247UL), (3622120385UL), (4014748337UL), (2946582304UL), (752459111UL), (2173220853UL), (1128460687UL), (2268047031UL), (239933818UL), (4141570430UL), (1318816940UL), (2378987660UL), (731877825UL), (3950952879UL), (2975574698UL), (2938375136UL), (431933385UL), (154404673UL), (2020658234UL), (846815781UL), (822137193UL), (1057315444UL), (3632584082UL), (3263363094UL), (942201956UL), (2704683551UL), (1768107067UL), (4009446092UL), (3090701064UL), (701246680UL), (3548419575UL), (3873366129UL), (1639833080UL), (2401253373UL), (66597794UL), (2515774132UL), (516246524UL), (4232115668UL), (34426096UL), (2206423458UL), (3628832867UL), (2776950121UL), (2782943544UL), (2058958317UL), (1805852726UL), (2151415233UL), (2940074103UL), (2318397273UL), (3067676663UL), (3127709351UL), (71509976UL), (115529187UL), (1841252918UL), (2217805156UL), (733917373UL), (2432474677UL), (1416887641UL), (1895320369UL), (2779694586UL), (510547269UL), (2614743018UL), (759552691UL), (2264773752UL), (305497497UL), (1082013785UL), (1681067734UL), (1085957001UL), (846460632UL), (2824079919UL), (1820633139UL), (3686495295UL), (3978521319UL), (1734452426UL), (4105472656UL), (1771256166UL), (1578071897UL), (1972844727UL), (2048372515UL), (3002132226UL), (1889169118UL), (2932142799UL), (2166712623UL), (592016143UL), (1116895096UL), (889321536UL), (375621825UL), (2935845994UL), (1982459859UL), (3336799370UL), (294519309UL), (2661638345UL), (1089335942UL), (227150969UL), (1454919198UL), (3780503305UL), (1862290968UL), (1491836299UL), (766546986UL), (3638407467UL), (925906735UL), (208891816UL), (236714698UL), (2853181150UL), (3889751556UL), (2161215392UL), (853579433UL), (2131555681UL), (1396396345UL), (1088128136UL), (978252562UL), (2134024308UL), (2429920974UL), (1159468871UL), (2395949266UL), (1441791888UL), (916521377UL), (3950270431UL), (2663319810UL), (3873120593UL), (2080989388UL), (2896532502UL), (3176181708UL), (1736685126UL), (4081767288UL), (3515770288UL), (1371473598UL), (1491850178UL), (4284949727UL), (2774513541UL), (1541596000UL), (3948112869UL), (2114538326UL), (2641532252UL), (1837244955UL), (2292505300UL), (3179787565UL), (639953781UL), (785902378UL), (3852544833UL), (553508260UL), (23014564UL), (106722100UL), (2705412979UL), (3449440367UL), (950636401UL), (870804158UL), (629831074UL), (424163855UL), (373653940UL), (2739378330UL), (377730945UL), (418426029UL), (267367218UL), (554678849UL), (4222664331UL), (3346048120UL), (1870226737UL), (2435616108UL), (3747040233UL), (698046507UL), (1671346285UL), (4127293033UL), (568612264UL), (3467142937UL), (1627988025UL), (1305525598UL)}, {(2246605826UL), (215030128UL), (871645668UL), (3402612852UL), (423273439UL), (316965236UL), (47416561UL), (1470716454UL), (2288582385UL), (2021890755UL), (2148091363UL), (167227868UL), (3085506034UL), (3365950545UL), (1170282137UL), (1345986409UL), (197195155UL), (2644113318UL), (2491271090UL), (2597072003UL), (170335901UL), (2540851884UL), (2584420407UL), (3609142920UL), (3052130502UL), (4018095157UL), (2850805299UL), (2777821400UL), (110647395UL), (3262987676UL), (1447103309UL), (3632575579UL), (3243210595UL), (1892770504UL), (4214485953UL), (38676169UL), (2431628817UL), (2836918800UL), (272023527UL), (2825888902UL), (2794421955UL), (2354379386UL), (452404203UL), (584718212UL), (1915053836UL), (1455821656UL), (4264066935UL), (1150980581UL), (3792433350UL), (3104909316UL), (441521402UL), (3807587668UL), (275969953UL), (3970844623UL), (3323695518UL), (3909107329UL), (290225599UL), (957520066UL), (4048181850UL), (2623778463UL), (1957371891UL), (540091753UL), (3072448879UL), (2386916346UL), (392549194UL), (1261391184UL), (4137605148UL), (314807135UL), (2916930821UL), (3168561018UL), (2332027308UL), (1967082817UL), (1849256214UL), (1141134412UL), (1206824012UL), (2088102210UL), (4170914605UL), (3399892824UL), (59190648UL), (1657183299UL), (1314626253UL), (500606287UL), (413229420UL), (1245395908UL), (664681UL), (2726979120UL), (3408998445UL), (2318397638UL), (1882820077UL), (2073055266UL), (4262833629UL), (1348801932UL), (229857331UL), (3086071450UL), (1327801028UL), (812015573UL), (2214355282UL), (2232635690UL), (3162540418UL), (2049877621UL), (470752564UL), (2527480795UL), (1285499716UL), (220173566UL), (4239277569UL), (788168494UL), (3748855859UL), (1360707769UL), (449512212UL), (1238219398UL), (2880205975UL), (2755133627UL), (372409230UL), (411800575UL), (2455333195UL), (4080817864UL), (3556684908UL), (2857940866UL), (1969081563UL), (2526852668UL), (1026062474UL), (1849785784UL), (3552290093UL), (4214448UL), (460332681UL), (30890894UL), (1108618048UL), (272438799UL), (3339891045UL), (1512685591UL), (1310038443UL), (2431938882UL), (1478442144UL), (2804640700UL), (3426381347UL), (861206186UL), (290322827UL), (2736623609UL), (327318125UL), (1922859957UL), (1939922519UL), (3539608908UL), (3442377433UL), (3868710131UL), (2244493875UL), (47774461UL), (3858864626UL), (3294523981UL), (1798515481UL), (565017248UL), (2633378137UL), (811307482UL), (1743357106UL), (419676111UL), (1688841846UL), (1799884674UL), (1720546272UL), (3900863156UL), (3506303345UL), (1719438472UL), (576775454UL), (2246605826UL), (215030128UL), (871645668UL), (3402612852UL), (619000856UL), (316965236UL), (47416561UL), (1470716454UL), (2288582385UL), (3464704266UL), (2148091363UL), (167227868UL), (3085506034UL), (3365950545UL), (901169164UL), (1345986409UL), (197195155UL), (2644113318UL), (2491271090UL), (3243741640UL), (170335901UL), (2540851884UL), (2584420407UL), (3609142920UL), (2051834116UL), (4018095157UL), (2850805299UL), (2777821400UL), (110647395UL), (2822981113UL), (1447103309UL), (3632575579UL), (3243210595UL), (1892770504UL), (1947501555UL), (38676169UL), (2431628817UL), (2836918800UL), (272023527UL), (4010280501UL), (2794421955UL), (2354379386UL), (452404203UL), (584718212UL), (3991257933UL), (1455821656UL), (4264066935UL), (1150980581UL), (3792433350UL), (2151631692UL), (441521402UL), (3807587668UL), (275969953UL), (3970844623UL), (3965914153UL), (3909107329UL), (290225599UL), (957520066UL), (4048181850UL), (4011285909UL), (1957371891UL), (540091753UL), (3072448879UL), (2386916346UL), (1347453316UL), (1261391184UL), (4137605148UL), (314807135UL), (2916930821UL), (840822698UL), (2332027308UL), (1967082817UL), (1849256214UL), (1141134412UL), (960593185UL), (2088102210UL), (4170914605UL), (3399892824UL), (59190648UL), (2261593014UL), (1314626253UL), (500606287UL), (413229420UL), (1245395908UL), (3401527918UL), (2726979120UL), (3408998445UL), (2318397638UL), (1882820077UL), (1683077666UL), (4262833629UL), (1348801932UL), (229857331UL), (3086071450UL), (3363644507UL), (812015573UL), (2214355282UL), (2232635690UL), (3162540418UL), (3579858747UL), (470752564UL), (2527480795UL), (1285499716UL), (220173566UL), (2294101261UL), (788168494UL), (3748855859UL), (1360707769UL), (449512212UL), (28595866UL), (2880205975UL), (2755133627UL), (372409230UL), (411800575UL), (1905311140UL), (4080817864UL), (3556684908UL), (2857940866UL), (1969081563UL), (148561593UL), (1026062474UL), (1849785784UL), (3552290093UL), (4214448UL), (2237247821UL), (30890894UL), (1108618048UL), (272438799UL), (3339891045UL), (169576507UL), (1310038443UL), (2431938882UL), (1478442144UL), (2804640700UL), (4119485855UL), (861206186UL), (290322827UL), (2736623609UL), (327318125UL), (3408620608UL), (1939922519UL), (3539608908UL), (3442377433UL), (3868710131UL), (1188056275UL), (47774461UL), (3858864626UL), (3294523981UL), (1798515481UL), (1228896851UL), (2633378137UL), (811307482UL), (1743357106UL), (419676111UL), (3111013241UL), (1799884674UL), (1720546272UL), (3900863156UL), (3506303345UL), (1474164586UL), (576775454UL), (2246605826UL), (215030128UL), (871645668UL), (2968519387UL), (619000856UL), (316965236UL), (47416561UL), (1470716454UL), (9648980UL), (3464704266UL), (2148091363UL), (167227868UL), (3085506034UL), (1505294373UL), (901169164UL), (1345986409UL), (197195155UL), (2644113318UL), (1227359150UL), (3243741640UL), (170335901UL), (2540851884UL), (2584420407UL), (1205921163UL), (2051834116UL), (4018095157UL), (2850805299UL), (2777821400UL), (2967529310UL), (2822981113UL), (1447103309UL), (3632575579UL), (3243210595UL), (532996977UL), (1947501555UL), (38676169UL), (2431628817UL), (2836918800UL), (1761031313UL), (4010280501UL), (2794421955UL), (2354379386UL), (452404203UL), (1222630846UL), (3991257933UL), (1455821656UL), (4264066935UL), (1150980581UL), (2344548386UL), (2151631692UL), (441521402UL), (3807587668UL), (275969953UL), (963889269UL), (3965914153UL), (3909107329UL), (290225599UL), (957520066UL), (4176220201UL), (4011285909UL), (1957371891UL), (540091753UL), (3072448879UL), (1810164615UL), (1347453316UL), (1261391184UL), (4137605148UL), (314807135UL), (2672526663UL), (840822698UL), (2332027308UL), (1967082817UL), (1849256214UL), (734862208UL), (960593185UL), (2088102210UL), (4170914605UL), (3399892824UL), (2471507530UL), (2261593014UL), (1314626253UL), (500606287UL), (413229420UL), (970185057UL), (3401527918UL), (2726979120UL), (3408998445UL), (2318397638UL), (708987193UL), (1683077666UL), (4262833629UL), (1348801932UL), (229857331UL), (749849397UL), (3363644507UL), (812015573UL), (2214355282UL), (2232635690UL), (2901095495UL), (3579858747UL), (470752564UL), (2527480795UL), (1285499716UL), (941862108UL), (2294101261UL), (788168494UL), (3748855859UL), (1360707769UL), (3818227212UL), (28595866UL), (2880205975UL), (2755133627UL), (372409230UL), (570110534UL), (1905311140UL), (4080817864UL), (3556684908UL), (2857940866UL), (2253777974UL), (148561593UL), (1026062474UL), (1849785784UL), (3552290093UL), (1525559608UL), (2237247821UL), (30890894UL), (1108618048UL), (272438799UL), (3996203631UL), (169576507UL), (1310038443UL), (2431938882UL), (1478442144UL), (2857841871UL), (4119485855UL), (861206186UL), (290322827UL), (2736623609UL), (1184217272UL), (3408620608UL), (1939922519UL), (3539608908UL), (3442377433UL), (1263700272UL), (1188056275UL), (47774461UL), (3858864626UL), (3294523981UL), (2611619UL), (1228896851UL), (2633378137UL), (811307482UL), (1743357106UL), (1930089302UL), (3111013241UL), (1799884674UL), (1720546272UL), (3900863156UL), (2370003471UL), (1474164586UL), (576775454UL), (2246605826UL), (215030128UL), (540197019UL), (2968519387UL), (619000856UL), (316965236UL), (47416561UL), (3585128733UL), (9648980UL), (3464704266UL), (2148091363UL), (167227868UL), (509283324UL), (1505294373UL), (901169164UL), (1345986409UL), (197195155UL), (3983525470UL), (1227359150UL), (3243741640UL), (170335901UL), (2540851884UL), (2812935262UL), (1205921163UL), (2051834116UL), (4018095157UL), (2850805299UL), (2798430304UL), (2967529310UL), (2822981113UL), (1447103309UL), (3632575579UL), (389184524UL), (532996977UL), (1947501555UL), (38676169UL), (2431628817UL), (1055068556UL), (1761031313UL), (4010280501UL), (2794421955UL), (2354379386UL), (965687576UL), (1222630846UL), (3991257933UL), (1455821656UL), (4264066935UL), (1551000086UL), (2344548386UL), (2151631692UL), (441521402UL), (3807587668UL), (3701529910UL), (963889269UL), (3965914153UL), (3909107329UL), (290225599UL), (1771599976UL), (4176220201UL), (4011285909UL), (1957371891UL), (540091753UL), (1670159873UL), (1810164615UL), (1347453316UL), (1261391184UL), (4137605148UL), (4191698993UL), (2672526663UL), (840822698UL), (2332027308UL), (1967082817UL), (3098515331UL), (734862208UL), (960593185UL), (2088102210UL), (4170914605UL), (2470055060UL), (2471507530UL), (2261593014UL), (1314626253UL), (500606287UL), (1100764382UL), (970185057UL), (3401527918UL), (2726979120UL), (3408998445UL), (4100198161UL), (708987193UL), (1683077666UL), (4262833629UL), (1348801932UL), (3744209503UL), (749849397UL), (3363644507UL), (812015573UL), (2214355282UL), (3217409412UL), (2901095495UL), (3579858747UL), (470752564UL), (2527480795UL), (552979949UL), (941862108UL), (2294101261UL), (788168494UL), (3748855859UL), (2355231228UL), (3818227212UL), (28595866UL), (2880205975UL), (2755133627UL), (833553378UL), (570110534UL), (1905311140UL), (4080817864UL), (3556684908UL), (4124102038UL), (2253777974UL), (148561593UL), (1026062474UL), (1849785784UL), (656329297UL), (1525559608UL), (2237247821UL), (30890894UL), (1108618048UL), (1464443032UL), (3996203631UL), (169576507UL), (1310038443UL), (2431938882UL), (2100788071UL), (2857841871UL), (4119485855UL), (861206186UL), (290322827UL), (3653047356UL), (1184217272UL), (3408620608UL), (1939922519UL), (3539608908UL), (4267170500UL), (1263700272UL), (1188056275UL), (47774461UL), (3858864626UL), (1046565728UL), (2611619UL), (1228896851UL), (2633378137UL), (811307482UL), (1312393456UL), (1930089302UL), (3111013241UL), (1799884674UL), (1720546272UL), (1199041144UL), (2406753856UL), (2108495166UL), (2126345981UL), (1524975128UL), (1269232392UL), (3162531748UL), (3076707658UL), (1736955170UL), (1036221745UL), (1232435193UL), (3945348482UL), (1057631163UL), (520376289UL), (4154435769UL), (1280565077UL), (1865705876UL), (1030078366UL), (1140849319UL), (1769263412UL), (1161866807UL), (2768552980UL), (561022685UL), (2712685799UL), (1501252058UL), (3608433719UL), (3138564149UL), (4093654128UL), (1218455911UL), (892700607UL), (2012017510UL), (3568315757UL), (4002239824UL), (1754440379UL), (2641708101UL), (1027390781UL), (199831087UL), (1261208885UL), (2058433786UL), (2101649235UL), (220966013UL), (3445375335UL), (1100438514UL), (4075559840UL), (4244062658UL), (3417249884UL), (150102478UL), (3337395219UL), (2464869101UL), (3720375949UL), (93353579UL), (2329780067UL), (777826834UL), (2745626035UL), (2984812746UL), (568848158UL), (1593919595UL), (1166619196UL), (96177504UL), (305329591UL), (4271176854UL), (3829149188UL), (1551058535UL), (2828280993UL), (1367551996UL), (4208083082UL), (2260803683UL), (3118708147UL), (434935608UL), (702805370UL), (3544156958UL), (792712531UL), (231019757UL), (136272259UL), (4049968615UL), (2722527811UL), (603697698UL), (2891035509UL), (4270409302UL), (1220615076UL), (1932569338UL), (1084454986UL), (468729683UL), (2377913518UL), (2068946556UL), (530579176UL), (1422294615UL), (4032799503UL), (2065706770UL), (604700228UL), (98049660UL), (3182511353UL), (935830212UL), (1938107848UL), (1266035034UL), (957505506UL), (2758220503UL), (1805223938UL), (3393041584UL), (3958541336UL), (2695487012UL), (3355668819UL), (276889675UL), (3098939423UL), (415941187UL), (180737121UL), (2638873657UL), (1103150707UL), (4255168358UL), (2736183195UL), (1275942292UL), (2687807236UL), (538129710UL), (3337005391UL), (3941968393UL), (1113153386UL), (3813628384UL), (1775835369UL), (296314749UL), (1697642748UL), (3614403315UL), (1953056095UL), (2102878063UL), (3161706344UL), (2207159580UL), (3078233525UL), (3836286614UL), (886914072UL), (1884037075UL), (4135819784UL), (1616380780UL), (1672616998UL), (3879848699UL), (2277472209UL), (3933249848UL), (2428044648UL), (2876076879UL), (165724720UL), (2277165385UL), (1984963196UL), (1456923194UL), (2406217222UL), (3388886718UL), (47522558UL), (1903557801UL), (1959641458UL), (2325355446UL), (3251147398UL), (2266553941UL), (2243962024UL), (1420017618UL), (1791159474UL), (1793406225UL), (601509698UL), (3207357979UL), (1189285184UL), (148538800UL), (2077251302UL), (3267239327UL), (2851475997UL)}, {(2628162153UL), (3861478870UL), (2769884494UL), (3423483820UL), (1118276924UL), (536776894UL), (3742490940UL), (550084334UL), (2441329856UL), (2604618499UL), (2308745810UL), (1178166365UL), (1345165241UL), (4039508109UL), (1246601384UL), (3843182157UL), (2200144237UL), (91750284UL), (4290064840UL), (3363597477UL), (3243492274UL), (4271100308UL), (4186328336UL), (2291901989UL), (1834723222UL), (372220743UL), (2190417067UL), (2624886324UL), (3567647862UL), (1591175369UL), (2278087682UL), (2461678432UL), (232820452UL), (2714694382UL), (3070258434UL), (2412655444UL), (2667664607UL), (249083056UL), (4166379751UL), (1360927521UL), (2247816079UL), (3253689753UL), (1563674427UL), (1914999382UL), (2101454952UL), (1067816947UL), (1098201917UL), (4054175236UL), (1805828534UL), (1815913104UL), (738357340UL), (2597170030UL), (1689737432UL), (2004663483UL), (1160995461UL), (1008175050UL), (2004702919UL), (4258654415UL), (938972594UL), (2121583885UL), (2208729114UL), (276726877UL), (3973538591UL), (2991069145UL), (2345655326UL), (2980162173UL), (1915611444UL), (2332104940UL), (2382102873UL), (2324437093UL), (2640563452UL), (2680619359UL), (3413490949UL), (2140843463UL), (2424016743UL), (3735508133UL), (3421831326UL), (4037977349UL), (3721506282UL), (510431975UL), (1014707294UL), (1378686477UL), (1939678832UL), (2223101760UL), (2067687989UL), (309274614UL), (276596103UL), (3757624719UL), (1212251468UL), (2649271847UL), (4140361758UL), (2634738350UL), (2029358730UL), (3205861896UL), (3090549771UL), (3775019657UL), (2018542036UL), (3675805680UL), (3946144023UL), (331655838UL), (326568491UL), (1867863527UL), (1550945400UL), (3087000670UL), (2342003578UL), (3949479453UL), (586483056UL), (147951307UL), (503062740UL), (3823927166UL), (2789767841UL), (3121654578UL), (634238762UL), (4084629478UL), (3878778788UL), (435990088UL), (1724770389UL), (1403031256UL), (1334135626UL), (1096780503UL), (3288769545UL), (2793293893UL), (80675548UL), (1637232257UL), (1856565474UL), (2675485635UL), (1961165681UL), (1647512786UL), (4190102851UL), (4081320784UL), (2853183400UL), (3812341867UL), (278236392UL), (1700614299UL), (2765246084UL), (3846866009UL), (1220806787UL), (3655684157UL), (1133921183UL), (2779125219UL), (523552281UL), (703813725UL), (3110126767UL), (823843890UL), (290243102UL), (821297176UL), (364959993UL), (3381862130UL), (2305271841UL), (356059263UL), (2558018765UL), (3235968999UL), (1070598970UL), (2444411636UL), (3636221117UL), (4275517214UL), (4035198865UL), (3339014315UL), (2911872812UL), (4049586122UL), (4211583637UL), (2628162153UL), (3861478870UL), (2769884494UL), (3423483820UL), (3254616321UL), (536776894UL), (3742490940UL), (550084334UL), (2441329856UL), (1909596092UL), (2308745810UL), (1178166365UL), (1345165241UL), (4039508109UL), (1349347043UL), (3843182157UL), (2200144237UL), (91750284UL), (4290064840UL), (803098068UL), (3243492274UL), (4271100308UL), (4186328336UL), (2291901989UL), (2575673198UL), (372220743UL), (2190417067UL), (2624886324UL), (3567647862UL), (132569424UL), (2278087682UL), (2461678432UL), (232820452UL), (2714694382UL), (3490648253UL), (2412655444UL), (2667664607UL), (249083056UL), (4166379751UL), (3503294711UL), (2247816079UL), (3253689753UL), (1563674427UL), (1914999382UL), (3121933565UL), (1067816947UL), (1098201917UL), (4054175236UL), (1805828534UL), (816420552UL), (738357340UL), (2597170030UL), (1689737432UL), (2004663483UL), (397934907UL), (1008175050UL), (2004702919UL), (4258654415UL), (938972594UL), (156733019UL), (2208729114UL), (276726877UL), (3973538591UL), (2991069145UL), (2470446383UL), (2980162173UL), (1915611444UL), (2332104940UL), (2382102873UL), (3265195583UL), (2640563452UL), (2680619359UL), (3413490949UL), (2140843463UL), (142464483UL), (3735508133UL), (3421831326UL), (4037977349UL), (3721506282UL), (1898668265UL), (1014707294UL), (1378686477UL), (1939678832UL), (2223101760UL), (4085776926UL), (309274614UL), (276596103UL), (3757624719UL), (1212251468UL), (1116423339UL), (4140361758UL), (2634738350UL), (2029358730UL), (3205861896UL), (880658361UL), (3775019657UL), (2018542036UL), (3675805680UL), (3946144023UL), (839516623UL), (326568491UL), (1867863527UL), (1550945400UL), (3087000670UL), (420309880UL), (3949479453UL), (586483056UL), (147951307UL), (503062740UL), (416618471UL), (2789767841UL), (3121654578UL), (634238762UL), (4084629478UL), (1120413065UL), (435990088UL), (1724770389UL), (1403031256UL), (1334135626UL), (240966420UL), (3288769545UL), (2793293893UL), (80675548UL), (1637232257UL), (1785064235UL), (2675485635UL), (1961165681UL), (1647512786UL), (4190102851UL), (2775407492UL), (2853183400UL), (3812341867UL), (278236392UL), (1700614299UL), (2439624528UL), (3846866009UL), (1220806787UL), (3655684157UL), (1133921183UL), (366933679UL), (523552281UL), (703813725UL), (3110126767UL), (823843890UL), (132468066UL), (821297176UL), (364959993UL), (3381862130UL), (2305271841UL), (1048450041UL), (2558018765UL), (3235968999UL), (1070598970UL), (2444411636UL), (1699430013UL), (4275517214UL), (4035198865UL), (3339014315UL), (2911872812UL), (324524850UL), (4211583637UL), (2628162153UL), (3861478870UL), (2769884494UL), (1995585079UL), (3254616321UL), (536776894UL), (3742490940UL), (550084334UL), (2121458511UL), (1909596092UL), (2308745810UL), (1178166365UL), (1345165241UL), (3067877274UL), (1349347043UL), (3843182157UL), (2200144237UL), (91750284UL), (1246148630UL), (803098068UL), (3243492274UL), (4271100308UL), (4186328336UL), (2932236493UL), (2575673198UL), (372220743UL), (2190417067UL), (2624886324UL), (3945294599UL), (132569424UL), (2278087682UL), (2461678432UL), (232820452UL), (3341915918UL), (3490648253UL), (2412655444UL), (2667664607UL), (249083056UL), (2307336284UL), (3503294711UL), (2247816079UL), (3253689753UL), (1563674427UL), (1717494311UL), (3121933565UL), (1067816947UL), (1098201917UL), (4054175236UL), (971917867UL), (816420552UL), (738357340UL), (2597170030UL), (1689737432UL), (243915062UL), (397934907UL), (1008175050UL), (2004702919UL), (4258654415UL), (1807067458UL), (156733019UL), (2208729114UL), (276726877UL), (3973538591UL), (1909483753UL), (2470446383UL), (2980162173UL), (1915611444UL), (2332104940UL), (3454651559UL), (3265195583UL), (2640563452UL), (2680619359UL), (3413490949UL), (462852932UL), (142464483UL), (3735508133UL), (3421831326UL), (4037977349UL), (1372088341UL), (1898668265UL), (1014707294UL), (1378686477UL), (1939678832UL), (752503486UL), (4085776926UL), (309274614UL), (276596103UL), (3757624719UL), (4193030119UL), (1116423339UL), (4140361758UL), (2634738350UL), (2029358730UL), (1725105892UL), (880658361UL), (3775019657UL), (2018542036UL), (3675805680UL), (3496508290UL), (839516623UL), (326568491UL), (1867863527UL), (1550945400UL), (2685835387UL), (420309880UL), (3949479453UL), (586483056UL), (147951307UL), (1639139280UL), (416618471UL), (2789767841UL), (3121654578UL), (634238762UL), (3622035469UL), (1120413065UL), (435990088UL), (1724770389UL), (1403031256UL), (3548817929UL), (240966420UL), (3288769545UL), (2793293893UL), (80675548UL), (3119506726UL), (1785064235UL), (2675485635UL), (1961165681UL), (1647512786UL), (4019542081UL), (2775407492UL), (2853183400UL), (3812341867UL), (278236392UL), (3487875111UL), (2439624528UL), (3846866009UL), (1220806787UL), (3655684157UL), (3303554633UL), (366933679UL), (523552281UL), (703813725UL), (3110126767UL), (2477354049UL), (132468066UL), (821297176UL), (364959993UL), (3381862130UL), (4065162466UL), (1048450041UL), (2558018765UL), (3235968999UL), (1070598970UL), (191819556UL), (1699430013UL), (4275517214UL), (4035198865UL), (3339014315UL), (3588518026UL), (324524850UL), (4211583637UL), (2628162153UL), (3861478870UL), (3361198093UL), (1995585079UL), (3254616321UL), (536776894UL), (3742490940UL), (3912424229UL), (2121458511UL), (1909596092UL), (2308745810UL), (1178166365UL), (1882174246UL), (3067877274UL), (1349347043UL), (3843182157UL), (2200144237UL), (1210030640UL), (1246148630UL), (803098068UL), (3243492274UL), (4271100308UL), (402141998UL), (2932236493UL), (2575673198UL), (372220743UL), (2190417067UL), (1883679642UL), (3945294599UL), (132569424UL), (2278087682UL), (2461678432UL), (708189294UL), (3341915918UL), (3490648253UL), (2412655444UL), (2667664607UL), (2871800434UL), (2307336284UL), (3503294711UL), (2247816079UL), (3253689753UL), (2113837945UL), (1717494311UL), (3121933565UL), (1067816947UL), (1098201917UL), (1041869160UL), (971917867UL), (816420552UL), (738357340UL), (2597170030UL), (2306273930UL), (243915062UL), (397934907UL), (1008175050UL), (2004702919UL), (2345434637UL), (1807067458UL), (156733019UL), (2208729114UL), (276726877UL), (2452083872UL), (1909483753UL), (2470446383UL), (2980162173UL), (1915611444UL), (2043489400UL), (3454651559UL), (3265195583UL), (2640563452UL), (2680619359UL), (2845757473UL), (462852932UL), (142464483UL), (3735508133UL), (3421831326UL), (25103542UL), (1372088341UL), (1898668265UL), (1014707294UL), (1378686477UL), (2680788341UL), (752503486UL), (4085776926UL), (309274614UL), (276596103UL), (3663266970UL), (4193030119UL), (1116423339UL), (4140361758UL), (2634738350UL), (453005903UL), (1725105892UL), (880658361UL), (3775019657UL), (2018542036UL), (2601909713UL), (3496508290UL), (839516623UL), (326568491UL), (1867863527UL), (3474340574UL), (2685835387UL), (420309880UL), (3949479453UL), (586483056UL), (297934218UL), (1639139280UL), (416618471UL), (2789767841UL), (3121654578UL), (958889718UL), (3622035469UL), (1120413065UL), (435990088UL), (1724770389UL), (2589603756UL), (3548817929UL), (240966420UL), (3288769545UL), (2793293893UL), (972899860UL), (3119506726UL), (1785064235UL), (2675485635UL), (1961165681UL), (2576799764UL), (4019542081UL), (2775407492UL), (2853183400UL), (3812341867UL), (159345352UL), (3487875111UL), (2439624528UL), (3846866009UL), (1220806787UL), (3367080935UL), (3303554633UL), (366933679UL), (523552281UL), (703813725UL), (1717395617UL), (2477354049UL), (132468066UL), (821297176UL), (364959993UL), (1088290332UL), (4065162466UL), (1048450041UL), (2558018765UL), (3235968999UL), (285340039UL), (191819556UL), (1699430013UL), (4275517214UL), (4035198865UL), (3544133220UL), (285121978UL), (1175302919UL), (4101282768UL), (513236580UL), (890655666UL), (3051849972UL), (2315486379UL), (3067287276UL), (3134806925UL), (3926373006UL), (2502825498UL), (461387883UL), (770459119UL), (3121636621UL), (1243065093UL), (1612354797UL), (659033930UL), (621176955UL), (214256518UL), (371573588UL), (1168438671UL), (1233027650UL), (1984255965UL), (659404177UL), (1218841419UL), (1226193512UL), (4247589702UL), (334814687UL), (980422670UL), (2518384561UL), (4041002302UL), (1203659320UL), (509643440UL), (2528499450UL), (1512213710UL), (4052651069UL), (1378025938UL), (3436277168UL), (2797728577UL), (463383787UL), (1184681947UL), (283482187UL), (2421891582UL), (3200080903UL), (373817869UL), (452807139UL), (2002545143UL), (1068199574UL), (3390998240UL), (377559317UL), (1548403713UL), (1580741080UL), (253591624UL), (759280679UL), (2174360733UL), (1687952097UL), (1325235423UL), (3856575909UL), (652218568UL), (4130230594UL), (3757998028UL), (1349431618UL), (2870775414UL), (229741978UL), (1900794007UL), (201310771UL), (4075023260UL), (3390078853UL), (3572716207UL), (1959949436UL), (1000128498UL), (1636575064UL), (241058867UL), (2075461870UL), (1819342070UL), (619233032UL), (3164328001UL), (4280892071UL), (4219074185UL), (2719764611UL), (3827656652UL), (4062556527UL), (621515766UL), (2542375627UL), (3901998596UL), (2295087430UL), (2880672054UL), (2940372823UL), (2318642706UL), (914614262UL), (2549699597UL), (2907475284UL), (3901259809UL), (2663167002UL), (3775306719UL), (2212887565UL), (1271873285UL), (3673659531UL), (3856609875UL), (1195785209UL), (1204338358UL), (2785362544UL), (2398696803UL), (3038377816UL), (4288025143UL), (262511310UL), (4151907455UL), (924716723UL), (3298769960UL), (2065938273UL), (3277412030UL), (122636766UL), (2164055077UL), (1000638739UL), (2044933533UL), (2935604716UL), (2772787255UL), (3727331409UL), (1315627932UL), (2610657438UL), (832931652UL), (452359900UL), (681035792UL), (3312648046UL), (1059435047UL), (1489639114UL), (3647631796UL), (417952902UL), (731020350UL), (2847472725UL), (2779076784UL), (2674295324UL), (487600023UL), (2925909449UL), (3997011591UL), (3697231318UL), (967300591UL), (2310856069UL), (684710043UL), (811911286UL), (4174732177UL), (1010656728UL), (702780279UL), (920081774UL), (1578296057UL), (944734808UL), (2884038169UL), (2885919611UL), (2633474915UL), (2508946673UL), (3579216621UL), (656143887UL), (426108406UL), (2166202683UL), (991797657UL), (706498590UL), (561168186UL), (1144619335UL), (3136206425UL)}, {(3600072515UL), (651444872UL), (2348224675UL), (1684848433UL), (1913333701UL), (3413467790UL), (1567802204UL), (2125206188UL), (2463158656UL), (2251055204UL), (4132590383UL), (3192977084UL), (3718261822UL), (3431519430UL), (3506690867UL), (1313208797UL), (637811069UL), (12802085UL), (3456408080UL), (166617386UL), (1764224523UL), (4016338923UL), (2225367442UL), (2461647273UL), (3137989854UL), (373730087UL), (3013524828UL), (242949418UL), (3443491410UL), (3671816408UL), (2391000148UL), (3964107377UL), (716535366UL), (1884597979UL), (3917515811UL), (3441985401UL), (2472173593UL), (4034695117UL), (2486526143UL), (1658764329UL), (1873516415UL), (884116165UL), (814992460UL), (1069506245UL), (3797556389UL), (838088473UL), (2279863068UL), (1002637017UL), (4174541774UL), (644478743UL), (4138151954UL), (4030442072UL), (297710349UL), (3507828614UL), (1403493362UL), (3132267322UL), (227377796UL), (388148240UL), (2760904473UL), (352998924UL), (1603734504UL), (1528807885UL), (2283620218UL), (737730350UL), (2761342715UL), (809367801UL), (1667936422UL), (1510238771UL), (3762862328UL), (1171532060UL), (647580587UL), (1460988169UL), (3944640945UL), (2331043627UL), (1965076564UL), (2913596196UL), (2960957119UL), (1316491503UL), (3086954934UL), (3471945989UL), (2485431762UL), (692294537UL), (3148362914UL), (3371415765UL), (2990795967UL), (706771848UL), (3734467362UL), (2768750385UL), (2061275631UL), (3935582473UL), (1449841372UL), (1239527551UL), (592595530UL), (1685341001UL), (3352323357UL), (4147988039UL), (4003871917UL), (4035869533UL), (3022833195UL), (1266052547UL), (1429645393UL), (565106475UL), (327014810UL), (348739711UL), (3262918351UL), (915509292UL), (397356303UL), (3248246752UL), (1122821778UL), (2373765260UL), (1795464380UL), (3485315196UL), (1731529670UL), (86888382UL), (2789587372UL), (850847993UL), (1794523220UL), (577288126UL), (1996569530UL), (909222664UL), (2601642298UL), (1469035973UL), (2727135938UL), (3467853736UL), (633292505UL), (756260381UL), (41782389UL), (226724724UL), (3633968708UL), (1695315503UL), (1846857904UL), (3185630605UL), (823108172UL), (3609336496UL), (3422558797UL), (2865413534UL), (564221408UL), (591845835UL), (2498463433UL), (3573926554UL), (1336639597UL), (4180084026UL), (3195588503UL), (2822864841UL), (1916459886UL), (2073158796UL), (56968669UL), (1234765864UL), (2456093821UL), (3500058416UL), (3146725645UL), (3295822468UL), (4135196531UL), (628000231UL), (745509757UL), (4143543278UL), (1941480444UL), (3607603517UL), (2288239329UL), (1991437813UL), (4081693775UL), (3600072515UL), (651444872UL), (2348224675UL), (1684848433UL), (3748890341UL), (3413467790UL), (1567802204UL), (2125206188UL), (2463158656UL), (1516568259UL), (4132590383UL), (3192977084UL), (3718261822UL), (3431519430UL), (461466951UL), (1313208797UL), (637811069UL), (12802085UL), (3456408080UL), (3444149988UL), (1764224523UL), (4016338923UL), (2225367442UL), (2461647273UL), (2594402002UL), (373730087UL), (3013524828UL), (242949418UL), (3443491410UL), (2740782133UL), (2391000148UL), (3964107377UL), (716535366UL), (1884597979UL), (3161911677UL), (3441985401UL), (2472173593UL), (4034695117UL), (2486526143UL), (3623045141UL), (1873516415UL), (884116165UL), (814992460UL), (1069506245UL), (1053106195UL), (838088473UL), (2279863068UL), (1002637017UL), (4174541774UL), (1806935386UL), (4138151954UL), (4030442072UL), (297710349UL), (3507828614UL), (2328331779UL), (3132267322UL), (227377796UL), (388148240UL), (2760904473UL), (3654577129UL), (1603734504UL), (1528807885UL), (2283620218UL), (737730350UL), (2134741424UL), (809367801UL), (1667936422UL), (1510238771UL), (3762862328UL), (4084104273UL), (647580587UL), (1460988169UL), (3944640945UL), (2331043627UL), (3458437694UL), (2913596196UL), (2960957119UL), (1316491503UL), (3086954934UL), (2404530503UL), (2485431762UL), (692294537UL), (3148362914UL), (3371415765UL), (3697728317UL), (706771848UL), (3734467362UL), (2768750385UL), (2061275631UL), (1337146928UL), (1449841372UL), (1239527551UL), (592595530UL), (1685341001UL), (3121493408UL), (4147988039UL), (4003871917UL), (4035869533UL), (3022833195UL), (2709537023UL), (1429645393UL), (565106475UL), (327014810UL), (348739711UL), (1278935671UL), (915509292UL), (397356303UL), (3248246752UL), (1122821778UL), (1086107506UL), (1795464380UL), (3485315196UL), (1731529670UL), (86888382UL), (3645735256UL), (850847993UL), (1794523220UL), (577288126UL), (1996569530UL), (1126950UL), (2601642298UL), (1469035973UL), (2727135938UL), (3467853736UL), (3668777652UL), (756260381UL), (41782389UL), (226724724UL), (3633968708UL), (738274780UL), (1846857904UL), (3185630605UL), (823108172UL), (3609336496UL), (3371270228UL), (2865413534UL), (564221408UL), (591845835UL), (2498463433UL), (4157618574UL), (1336639597UL), (4180084026UL), (3195588503UL), (2822864841UL), (3844986377UL), (2073158796UL), (56968669UL), (1234765864UL), (2456093821UL), (1001761927UL), (3146725645UL), (3295822468UL), (4135196531UL), (628000231UL), (541676954UL), (4143543278UL), (1941480444UL), (3607603517UL), (2288239329UL), (1068806322UL), (4081693775UL), (3600072515UL), (651444872UL), (2348224675UL), (47991343UL), (3748890341UL), (3413467790UL), (1567802204UL), (2125206188UL), (2662653600UL), (1516568259UL), (4132590383UL), (3192977084UL), (3718261822UL), (2554440323UL), (461466951UL), (1313208797UL), (637811069UL), (12802085UL), (982676468UL), (3444149988UL), (1764224523UL), (4016338923UL), (2225367442UL), (451503008UL), (2594402002UL), (373730087UL), (3013524828UL), (242949418UL), (1086137206UL), (2740782133UL), (2391000148UL), (3964107377UL), (716535366UL), (731470002UL), (3161911677UL), (3441985401UL), (2472173593UL), (4034695117UL), (44456710UL), (3623045141UL), (1873516415UL), (884116165UL), (814992460UL), (4004771121UL), (1053106195UL), (838088473UL), (2279863068UL), (1002637017UL), (1587145121UL), (1806935386UL), (4138151954UL), (4030442072UL), (297710349UL), (2570695340UL), (2328331779UL), (3132267322UL), (227377796UL), (388148240UL), (3570998746UL), (3654577129UL), (1603734504UL), (1528807885UL), (2283620218UL), (188017185UL), (2134741424UL), (809367801UL), (1667936422UL), (1510238771UL), (1503613101UL), (4084104273UL), (647580587UL), (1460988169UL), (3944640945UL), (3301866374UL), (3458437694UL), (2913596196UL), (2960957119UL), (1316491503UL), (2674694926UL), (2404530503UL), (2485431762UL), (692294537UL), (3148362914UL), (1645995464UL), (3697728317UL), (706771848UL), (3734467362UL), (2768750385UL), (670964862UL), (1337146928UL), (1449841372UL), (1239527551UL), (592595530UL), (4204421245UL), (3121493408UL), (4147988039UL), (4003871917UL), (4035869533UL), (3652555523UL), (2709537023UL), (1429645393UL), (565106475UL), (327014810UL), (2716443687UL), (1278935671UL), (915509292UL), (397356303UL), (3248246752UL), (204830047UL), (1086107506UL), (1795464380UL), (3485315196UL), (1731529670UL), (662578255UL), (3645735256UL), (850847993UL), (1794523220UL), (577288126UL), (4237140216UL), (1126950UL), (2601642298UL), (1469035973UL), (2727135938UL), (92392213UL), (3668777652UL), (756260381UL), (41782389UL), (226724724UL), (1123105466UL), (738274780UL), (1846857904UL), (3185630605UL), (823108172UL), (2880110296UL), (3371270228UL), (2865413534UL), (564221408UL), (591845835UL), (2356214088UL), (4157618574UL), (1336639597UL), (4180084026UL), (3195588503UL), (4266261353UL), (3844986377UL), (2073158796UL), (56968669UL), (1234765864UL), (3166457679UL), (1001761927UL), (3146725645UL), (3295822468UL), (4135196531UL), (496099322UL), (541676954UL), (4143543278UL), (1941480444UL), (3607603517UL), (2578543796UL), (1068806322UL), (4081693775UL), (3600072515UL), (651444872UL), (1131603264UL), (47991343UL), (3748890341UL), (3413467790UL), (1567802204UL), (2823058381UL), (2662653600UL), (1516568259UL), (4132590383UL), (3192977084UL), (4247798474UL), (2554440323UL), (461466951UL), (1313208797UL), (637811069UL), (2744898822UL), (982676468UL), (3444149988UL), (1764224523UL), (4016338923UL), (2845667517UL), (451503008UL), (2594402002UL), (373730087UL), (3013524828UL), (3442521115UL), (1086137206UL), (2740782133UL), (2391000148UL), (3964107377UL), (4060067791UL), (731470002UL), (3161911677UL), (3441985401UL), (2472173593UL), (4227407417UL), (44456710UL), (3623045141UL), (1873516415UL), (884116165UL), (2550700713UL), (4004771121UL), (1053106195UL), (838088473UL), (2279863068UL), (1296332348UL), (1587145121UL), (1806935386UL), (4138151954UL), (4030442072UL), (2552496880UL), (2570695340UL), (2328331779UL), (3132267322UL), (227377796UL), (3887816270UL), (3570998746UL), (3654577129UL), (1603734504UL), (1528807885UL), (3365552060UL), (188017185UL), (2134741424UL), (809367801UL), (1667936422UL), (1358744245UL), (1503613101UL), (4084104273UL), (647580587UL), (1460988169UL), (2318828416UL), (3301866374UL), (3458437694UL), (2913596196UL), (2960957119UL), (49464436UL), (2674694926UL), (2404530503UL), (2485431762UL), (692294537UL), (1803418945UL), (1645995464UL), (3697728317UL), (706771848UL), (3734467362UL), (2407932841UL), (670964862UL), (1337146928UL), (1449841372UL), (1239527551UL), (1124552917UL), (4204421245UL), (3121493408UL), (4147988039UL), (4003871917UL), (3542256025UL), (3652555523UL), (2709537023UL), (1429645393UL), (565106475UL), (2063548817UL), (2716443687UL), (1278935671UL), (915509292UL), (397356303UL), (1049916999UL), (204830047UL), (1086107506UL), (1795464380UL), (3485315196UL), (2183256184UL), (662578255UL), (3645735256UL), (850847993UL), (1794523220UL), (2943700388UL), (4237140216UL), (1126950UL), (2601642298UL), (1469035973UL), (535075238UL), (92392213UL), (3668777652UL), (756260381UL), (41782389UL), (1043025574UL), (1123105466UL), (738274780UL), (1846857904UL), (3185630605UL), (3324487649UL), (2880110296UL), (3371270228UL), (2865413534UL), (564221408UL), (2528599862UL), (2356214088UL), (4157618574UL), (1336639597UL), (4180084026UL), (592094844UL), (4266261353UL), (3844986377UL), (2073158796UL), (56968669UL), (629503707UL), (3166457679UL), (1001761927UL), (3146725645UL), (3295822468UL), (2725304934UL), (496099322UL), (541676954UL), (4143543278UL), (1941480444UL), (3557859116UL), (31832949UL), (3805791401UL), (4056283801UL), (242812250UL), (4072988068UL), (2316479446UL), (2260433816UL), (2211372380UL), (2039672698UL), (2947948280UL), (4106140026UL), (342600216UL), (98745656UL), (2541799209UL), (926067404UL), (2733213159UL), (3163537903UL), (2800370126UL), (2099121446UL), (1279545581UL), (3699822446UL), (3764095615UL), (690503808UL), (3799637505UL), (1000641330UL), (242588257UL), (3657834529UL), (824791208UL), (2529299371UL), (4081898575UL), (2120338882UL), (1273883107UL), (1680877886UL), (1253060582UL), (1760259553UL), (2250763915UL), (31780198UL), (2511451445UL), (3102141340UL), (861489797UL), (105854693UL), (70927387UL), (2725671050UL), (688282241UL), (2622257646UL), (3466254816UL), (1905008219UL), (2980966436UL), (2154356718UL), (1075686806UL), (1966147415UL), (2357249256UL), (2684600972UL), (400926709UL), (523449509UL), (2891602783UL), (673425710UL), (3766475216UL), (2319843954UL), (3471794777UL), (13838840UL), (1908374660UL), (3839606132UL), (3829795513UL), (3403561639UL), (1369780874UL), (4276407916UL), (3217619UL), (1284482371UL), (2020138237UL), (2804427294UL), (1194369854UL), (1094800747UL), (2119081501UL), (726494474UL), (490750173UL), (1117517565UL), (3498786968UL), (2163060528UL), (696718831UL), (2780121254UL), (1286646297UL), (1594539045UL), (411215116UL), (1407268753UL), (2759136967UL), (2179483407UL), (2088977769UL), (2737453188UL), (2411478102UL), (3112688013UL), (4112484868UL), (429293789UL), (426390687UL), (3158027863UL), (2601897382UL), (1546855515UL), (4258208908UL), (3691263847UL), (2394986813UL), (1986623921UL), (2632462203UL), (3551311099UL), (3309482741UL), (2632571927UL), (1200010240UL), (554555739UL), (4119397989UL), (622818813UL), (3116222066UL), (1801867255UL), (2738500841UL), (1452697246UL), (733457482UL), (1680421668UL), (1035766144UL), (468847991UL), (3606474156UL), (2612692123UL), (730556693UL), (859096521UL), (4005878655UL), (1138273887UL), (2182363629UL), (2710579590UL), (3345140092UL), (2562710857UL), (3859276724UL), (2318176233UL), (3964665794UL), (3295219265UL), (3037789445UL), (371545704UL), (3434130670UL), (3686032092UL), (19964088UL), (340386179UL), (2147090894UL), (1446742483UL), (3083526520UL), (561888846UL), (2903328518UL), (1524465288UL), (360120037UL), (2031515996UL), (1516035872UL), (2752848969UL), (1094251072UL), (984159948UL), (369999653UL), (864602622UL), (2402584241UL), (3028363830UL), (252580667UL), (480470405UL), (3201548259UL), (2739036185UL), (2198549891UL), (1978812013UL)}, {(2546657140UL), (2771792972UL), (3371698159UL), (1137313111UL), (2399264952UL), (1204642544UL), (2090179262UL), (2948712987UL), (2908027331UL), (498636511UL), (2292804841UL), (1480836858UL), (2826016727UL), (196495965UL), (2168559184UL), (3910150715UL), (320076735UL), (3144753899UL), (3199094529UL), (1165806050UL), (728308199UL), (2322528104UL), (2891334400UL), (561853019UL), (4161870615UL), (1348321971UL), (2461357166UL), (1216229488UL), (1392766290UL), (3060494848UL), (3282469664UL), (1866493654UL), (2351421557UL), (4195620347UL), (1512242723UL), (478174598UL), (1087303780UL), (471631659UL), (2599553643UL), (791527994UL), (563537164UL), (1238109907UL), (3218421602UL), (133222502UL), (4182363220UL), (305688802UL), (2666439314UL), (2408520958UL), (787389550UL), (4226450542UL), (4107143646UL), (4103547035UL), (1840887424UL), (2686247491UL), (334267386UL), (3772035402UL), (3436827662UL), (1411515743UL), (2193739735UL), (1892746640UL), (4163192062UL), (2921191805UL), (1011310614UL), (2178118214UL), (33647321UL), (1121452997UL), (507942677UL), (2542792587UL), (351339975UL), (1586639416UL), (1918003826UL), (2513357034UL), (2747854573UL), (606238275UL), (1132105249UL), (574593993UL), (2655425816UL), (1680556547UL), (1831942411UL), (2587194016UL), (90710116UL), (4291431098UL), (1899367028UL), (3251152898UL), (3297078396UL), (2712235924UL), (1546135008UL), (897753268UL), (1619454780UL), (938130143UL), (1828916640UL), (3620488958UL), (1822437033UL), (172584228UL), (1853048226UL), (3659288522UL), (3623450763UL), (1893292786UL), (851522142UL), (3411705687UL), (4106341088UL), (4109830348UL), (1193339049UL), (878885723UL), (2964062476UL), (2320209608UL), (1777678953UL), (2886897705UL), (3856938396UL), (252913914UL), (3648685154UL), (544382669UL), (2631141468UL), (1524405364UL), (1848509666UL), (580646927UL), (2451560151UL), (181916967UL), (1426301928UL), (1652422182UL), (2625099169UL), (176664750UL), (1582626255UL), (1675120608UL), (2571617898UL), (2096572277UL), (2471745846UL), (419906507UL), (886861124UL), (1974832558UL), (3157060904UL), (216000225UL), (746978071UL), (1424984058UL), (1457979883UL), (809822177UL), (3833178010UL), (3926414726UL), (1423462846UL), (3024443248UL), (4067020014UL), (2881559869UL), (1376840097UL), (548130303UL), (1118013762UL), (1309103114UL), (2227304261UL), (4205319357UL), (228947246UL), (2167410411UL), (620496852UL), (2724112116UL), (705259153UL), (3499686911UL), (3085999115UL), (2447267299UL), (4190122199UL), (1091465954UL), (1233728238UL), (39711865UL), (1076751044UL), (2546657140UL), (2771792972UL), (3371698159UL), (1137313111UL), (3857150586UL), (1204642544UL), (2090179262UL), (2948712987UL), (2908027331UL), (368199414UL), (2292804841UL), (1480836858UL), (2826016727UL), (196495965UL), (3235583934UL), (3910150715UL), (320076735UL), (3144753899UL), (3199094529UL), (1374597050UL), (728308199UL), (2322528104UL), (2891334400UL), (561853019UL), (1515915224UL), (1348321971UL), (2461357166UL), (1216229488UL), (1392766290UL), (15252704UL), (3282469664UL), (1866493654UL), (2351421557UL), (4195620347UL), (192355609UL), (478174598UL), (1087303780UL), (471631659UL), (2599553643UL), (1725604263UL), (563537164UL), (1238109907UL), (3218421602UL), (133222502UL), (305098282UL), (305688802UL), (2666439314UL), (2408520958UL), (787389550UL), (3195522899UL), (4107143646UL), (4103547035UL), (1840887424UL), (2686247491UL), (1565529892UL), (3772035402UL), (3436827662UL), (1411515743UL), (2193739735UL), (1848198417UL), (4163192062UL), (2921191805UL), (1011310614UL), (2178118214UL), (3474206203UL), (1121452997UL), (507942677UL), (2542792587UL), (351339975UL), (3599278861UL), (1918003826UL), (2513357034UL), (2747854573UL), (606238275UL), (446979745UL), (574593993UL), (2655425816UL), (1680556547UL), (1831942411UL), (3338512802UL), (90710116UL), (4291431098UL), (1899367028UL), (3251152898UL), (1006512939UL), (2712235924UL), (1546135008UL), (897753268UL), (1619454780UL), (1429190743UL), (1828916640UL), (3620488958UL), (1822437033UL), (172584228UL), (2529855020UL), (3659288522UL), (3623450763UL), (1893292786UL), (851522142UL), (1417935793UL), (4106341088UL), (4109830348UL), (1193339049UL), (878885723UL), (1886400637UL), (2320209608UL), (1777678953UL), (2886897705UL), (3856938396UL), (1813134786UL), (3648685154UL), (544382669UL), (2631141468UL), (1524405364UL), (687661410UL), (580646927UL), (2451560151UL), (181916967UL), (1426301928UL), (1463347373UL), (2625099169UL), (176664750UL), (1582626255UL), (1675120608UL), (3387060344UL), (2096572277UL), (2471745846UL), (419906507UL), (886861124UL), (4209699955UL), (3157060904UL), (216000225UL), (746978071UL), (1424984058UL), (3063941448UL), (809822177UL), (3833178010UL), (3926414726UL), (1423462846UL), (750559587UL), (4067020014UL), (2881559869UL), (1376840097UL), (548130303UL), (4056763004UL), (1309103114UL), (2227304261UL), (4205319357UL), (228947246UL), (774411056UL), (620496852UL), (2724112116UL), (705259153UL), (3499686911UL), (2486247387UL), (2447267299UL), (4190122199UL), (1091465954UL), (1233728238UL), (54639263UL), (1076751044UL), (2546657140UL), (2771792972UL), (3371698159UL), (1152150303UL), (3857150586UL), (1204642544UL), (2090179262UL), (2948712987UL), (452427847UL), (368199414UL), (2292804841UL), (1480836858UL), (2826016727UL), (1929008184UL), (3235583934UL), (3910150715UL), (320076735UL), (3144753899UL), (895636897UL), (1374597050UL), (728308199UL), (2322528104UL), (2891334400UL), (1871824871UL), (1515915224UL), (1348321971UL), (2461357166UL), (1216229488UL), (3170568098UL), (15252704UL), (3282469664UL), (1866493654UL), (2351421557UL), (4253216490UL), (192355609UL), (478174598UL), (1087303780UL), (471631659UL), (4230260400UL), (1725604263UL), (563537164UL), (1238109907UL), (3218421602UL), (960481514UL), (305098282UL), (305688802UL), (2666439314UL), (2408520958UL), (242741163UL), (3195522899UL), (4107143646UL), (4103547035UL), (1840887424UL), (2768321503UL), (1565529892UL), (3772035402UL), (3436827662UL), (1411515743UL), (545362965UL), (1848198417UL), (4163192062UL), (2921191805UL), (1011310614UL), (1196775493UL), (3474206203UL), (1121452997UL), (507942677UL), (2542792587UL), (1948892535UL), (3599278861UL), (1918003826UL), (2513357034UL), (2747854573UL), (4172793632UL), (446979745UL), (574593993UL), (2655425816UL), (1680556547UL), (2986869736UL), (3338512802UL), (90710116UL), (4291431098UL), (1899367028UL), (3376952160UL), (1006512939UL), (2712235924UL), (1546135008UL), (897753268UL), (2061577225UL), (1429190743UL), (1828916640UL), (3620488958UL), (1822437033UL), (4221327184UL), (2529855020UL), (3659288522UL), (3623450763UL), (1893292786UL), (16446898UL), (1417935793UL), (4106341088UL), (4109830348UL), (1193339049UL), (2895194326UL), (1886400637UL), (2320209608UL), (1777678953UL), (2886897705UL), (117861450UL), (1813134786UL), (3648685154UL), (544382669UL), (2631141468UL), (1105253905UL), (687661410UL), (580646927UL), (2451560151UL), (181916967UL), (1605087684UL), (1463347373UL), (2625099169UL), (176664750UL), (1582626255UL), (1993431057UL), (3387060344UL), (2096572277UL), (2471745846UL), (419906507UL), (3219719670UL), (4209699955UL), (3157060904UL), (216000225UL), (746978071UL), (3304126047UL), (3063941448UL), (809822177UL), (3833178010UL), (3926414726UL), (4061584738UL), (750559587UL), (4067020014UL), (2881559869UL), (1376840097UL), (973425409UL), (4056763004UL), (1309103114UL), (2227304261UL), (4205319357UL), (939664759UL), (774411056UL), (620496852UL), (2724112116UL), (705259153UL), (176172666UL), (2486247387UL), (2447267299UL), (4190122199UL), (1091465954UL), (300145620UL), (54639263UL), (1076751044UL), (2546657140UL), (2771792972UL), (188149161UL), (1152150303UL), (3857150586UL), (1204642544UL), (2090179262UL), (626100323UL), (452427847UL), (368199414UL), (2292804841UL), (1480836858UL), (2700509669UL), (1929008184UL), (3235583934UL), (3910150715UL), (320076735UL), (1715326239UL), (895636897UL), (1374597050UL), (728308199UL), (2322528104UL), (2356051490UL), (1871824871UL), (1515915224UL), (1348321971UL), (2461357166UL), (243332180UL), (3170568098UL), (15252704UL), (3282469664UL), (1866493654UL), (4079212881UL), (4253216490UL), (192355609UL), (478174598UL), (1087303780UL), (3787911270UL), (4230260400UL), (1725604263UL), (563537164UL), (1238109907UL), (1147223471UL), (960481514UL), (305098282UL), (305688802UL), (2666439314UL), (1503870433UL), (242741163UL), (3195522899UL), (4107143646UL), (4103547035UL), (4041516761UL), (2768321503UL), (1565529892UL), (3772035402UL), (3436827662UL), (3952861918UL), (545362965UL), (1848198417UL), (4163192062UL), (2921191805UL), (793561655UL), (1196775493UL), (3474206203UL), (1121452997UL), (507942677UL), (3788690254UL), (1948892535UL), (3599278861UL), (1918003826UL), (2513357034UL), (3301940062UL), (4172793632UL), (446979745UL), (574593993UL), (2655425816UL), (667233719UL), (2986869736UL), (3338512802UL), (90710116UL), (4291431098UL), (2027122085UL), (3376952160UL), (1006512939UL), (2712235924UL), (1546135008UL), (2609276017UL), (2061577225UL), (1429190743UL), (1828916640UL), (3620488958UL), (1603195641UL), (4221327184UL), (2529855020UL), (3659288522UL), (3623450763UL), (2313432963UL), (16446898UL), (1417935793UL), (4106341088UL), (4109830348UL), (4106013120UL), (2895194326UL), (1886400637UL), (2320209608UL), (1777678953UL), (1952597964UL), (117861450UL), (1813134786UL), (3648685154UL), (544382669UL), (3108229631UL), (1105253905UL), (687661410UL), (580646927UL), (2451560151UL), (1160575897UL), (1605087684UL), (1463347373UL), (2625099169UL), (176664750UL), (1998534134UL), (1993431057UL), (3387060344UL), (2096572277UL), (2471745846UL), (2246406696UL), (3219719670UL), (4209699955UL), (3157060904UL), (216000225UL), (902956869UL), (3304126047UL), (3063941448UL), (809822177UL), (3833178010UL), (815366736UL), (4061584738UL), (750559587UL), (4067020014UL), (2881559869UL), (350775477UL), (973425409UL), (4056763004UL), (1309103114UL), (2227304261UL), (2047915817UL), (939664759UL), (774411056UL), (620496852UL), (2724112116UL), (3593903529UL), (176172666UL), (2486247387UL), (2447267299UL), (4190122199UL), (1450746791UL), (1521739409UL), (272699299UL), (4113952664UL), (1408743622UL), (4082014187UL), (2454446462UL), (1401621236UL), (2050232096UL), (4204834821UL), (2413497685UL), (1032465253UL), (4276089655UL), (1737267711UL), (3335718398UL), (1924071395UL), (1560525661UL), (3064183869UL), (1775038231UL), (89761304UL), (489201378UL), (1236489133UL), (2774076159UL), (822652970UL), (1583752702UL), (1781766972UL), (2238480533UL), (3428349870UL), (3344555477UL), (2251934941UL), (2533404243UL), (3651295253UL), (2359372862UL), (704049384UL), (3238382362UL), (2405156187UL), (2572833624UL), (531907732UL), (2240111412UL), (4102445586UL), (849739856UL), (3649572083UL), (3317634415UL), (1141345331UL), (1118528358UL), (1664181643UL), (648360156UL), (1364897187UL), (289264571UL), (1625825195UL), (1075970578UL), (3925373833UL), (2780782646UL), (727038162UL), (2824687935UL), (3844230994UL), (2070739238UL), (2437298873UL), (1837327520UL), (4248571219UL), (183041221UL), (3759390508UL), (3881974011UL), (658115161UL), (560642175UL), (32860408UL), (1321227669UL), (1380454450UL), (1676524786UL), (476585241UL), (4034481274UL), (1110506516UL), (815601591UL), (2009522227UL), (2168306897UL), (1856639149UL), (1328281664UL), (2710915389UL), (1886116025UL), (2074502324UL), (23109943UL), (670045122UL), (2926671795UL), (4269143768UL), (2688621201UL), (1618605914UL), (1541217762UL), (4273045819UL), (1029546542UL), (3663663567UL), (1402692384UL), (109336276UL), (2446546057UL), (2225682064UL), (3535545430UL), (3847123891UL), (369718877UL), (3411726117UL), (703735748UL), (3139527634UL), (22388546UL), (998860697UL), (2532911305UL), (1532808237UL), (4170332196UL), (1131906845UL), (1814343609UL), (4161931326UL), (1185668213UL), (1903273604UL), (3466154373UL), (3988139604UL), (1079368270UL), (991305574UL), (898158502UL), (2898908951UL), (651161128UL), (1952607949UL), (1221528540UL), (29979722UL), (3006846808UL), (2911550178UL), (2569412437UL), (1460616937UL), (2127921978UL), (3689931108UL), (950505297UL), (3469337654UL), (3180457017UL), (2316433735UL), (1464678429UL), (2867173456UL), (391248106UL), (3622065314UL), (2143251073UL), (860219584UL), (323835636UL), (340886643UL), (1805485977UL), (109344001UL), (1537119779UL), (1795626099UL), (2568079633UL), (3048040562UL), (1204069532UL), (2488753091UL), (2160014198UL), (3132782711UL), (1266102795UL), (91252225UL), (2018366053UL), (39675212UL), (979320891UL), (343397131UL), (814470367UL), (366655857UL), (3287033048UL), (3379301026UL), (1566381433UL), (3431153818UL)}, {(2234324389UL), (1682296894UL), (3526681456UL), (3988544681UL), (1315506584UL), (1754723911UL), (3607564438UL), (3764062195UL), (3408328234UL), (2385116969UL), (3827569659UL), (4104590721UL), (2612634189UL), (1762747544UL), (1676800931UL), (1814546108UL), (2684685172UL), (1659194343UL), (3381624140UL), (2286640580UL), (688245437UL), (2593335056UL), (1657668516UL), (1161309746UL), (3390664973UL), (2460564382UL), (2811435329UL), (2169200311UL), (2768093584UL), (4288309691UL), (1341061221UL), (1361417084UL), (3060155336UL), (2526021346UL), (1037055386UL), (890124736UL), (2185462193UL), (765141735UL), (1841745804UL), (3562499272UL), (1437907207UL), (2127475991UL), (2845453063UL), (4007976206UL), (4160093314UL), (2717704308UL), (4193767498UL), (1667876711UL), (3477753188UL), (3150367681UL), (3224086539UL), (231347764UL), (2737121599UL), (1230656103UL), (4168131490UL), (1463860373UL), (2760968409UL), (2579133178UL), (2309591728UL), (2958907244UL), (1041094855UL), (685134804UL), (3861095208UL), (1088109135UL), (815655228UL), (2618003265UL), (3454840568UL), (1668276240UL), (1668403077UL), (663034899UL), (4020374281UL), (1896863688UL), (677285319UL), (4047674693UL), (4098535894UL), (2038783953UL), (236635760UL), (3641273565UL), (3568356824UL), (3405704765UL), (186484522UL), (3626346451UL), (3653227559UL), (281949942UL), (1847600066UL), (4168753288UL), (1723123703UL), (3600798445UL), (4267802363UL), (2947454105UL), (468768748UL), (2745777741UL), (26635454UL), (837186232UL), (206931043UL), (2601865569UL), (2021732453UL), (3171165636UL), (786833002UL), (116631308UL), (1604778670UL), (437644814UL), (2437761489UL), (3573139998UL), (2637030522UL), (972076738UL), (4075927397UL), (1427554739UL), (597414077UL), (559325169UL), (1774857312UL), (224593737UL), (3697511293UL), (3905126277UL), (2446278950UL), (1847061846UL), (333176687UL), (2988562696UL), (3623938567UL), (2389910304UL), (4273100167UL), (1673622334UL), (2163644598UL), (3666601063UL), (3971760462UL), (4176957983UL), (565952761UL), (566996714UL), (103136762UL), (3648349163UL), (115456167UL), (3265051494UL), (2826313040UL), (1898888678UL), (3921049266UL), (1276809956UL), (4051866478UL), (959265349UL), (851980436UL), (3105565302UL), (2905096898UL), (342438530UL), (3428101638UL), (912389587UL), (2306839396UL), (3613297213UL), (200159550UL), (3406974927UL), (832121231UL), (2998593393UL), (1242069873UL), (1464281204UL), (1828082526UL), (2620095350UL), (3727900009UL), (986958825UL), (3332332947UL), (1610600284UL), (3193282615UL), (1873987353UL), (537698841UL), (2234324389UL), (1682296894UL), (3526681456UL), (3988544681UL), (1112334635UL), (1754723911UL), (3607564438UL), (3764062195UL), (3408328234UL), (2702680798UL), (3827569659UL), (4104590721UL), (2612634189UL), (1762747544UL), (1596420149UL), (1814546108UL), (2684685172UL), (1659194343UL), (3381624140UL), (2424233156UL), (688245437UL), (2593335056UL), (1657668516UL), (1161309746UL), (260803614UL), (2460564382UL), (2811435329UL), (2169200311UL), (2768093584UL), (1426048416UL), (1341061221UL), (1361417084UL), (3060155336UL), (2526021346UL), (688976997UL), (890124736UL), (2185462193UL), (765141735UL), (1841745804UL), (1113361455UL), (1437907207UL), (2127475991UL), (2845453063UL), (4007976206UL), (1719248425UL), (2717704308UL), (4193767498UL), (1667876711UL), (3477753188UL), (449353539UL), (3224086539UL), (231347764UL), (2737121599UL), (1230656103UL), (2122699205UL), (1463860373UL), (2760968409UL), (2579133178UL), (2309591728UL), (4017154219UL), (1041094855UL), (685134804UL), (3861095208UL), (1088109135UL), (3954527144UL), (2618003265UL), (3454840568UL), (1668276240UL), (1668403077UL), (3235241899UL), (4020374281UL), (1896863688UL), (677285319UL), (4047674693UL), (4043186819UL), (2038783953UL), (236635760UL), (3641273565UL), (3568356824UL), (3946220303UL), (186484522UL), (3626346451UL), (3653227559UL), (281949942UL), (1896524045UL), (4168753288UL), (1723123703UL), (3600798445UL), (4267802363UL), (412498526UL), (468768748UL), (2745777741UL), (26635454UL), (837186232UL), (1473941762UL), (2601865569UL), (2021732453UL), (3171165636UL), (786833002UL), (3461566768UL), (1604778670UL), (437644814UL), (2437761489UL), (3573139998UL), (306196591UL), (972076738UL), (4075927397UL), (1427554739UL), (597414077UL), (2401305323UL), (1774857312UL), (224593737UL), (3697511293UL), (3905126277UL), (1527832817UL), (1847061846UL), (333176687UL), (2988562696UL), (3623938567UL), (2731158470UL), (4273100167UL), (1673622334UL), (2163644598UL), (3666601063UL), (1991088422UL), (4176957983UL), (565952761UL), (566996714UL), (103136762UL), (1639884175UL), (115456167UL), (3265051494UL), (2826313040UL), (1898888678UL), (2976556877UL), (1276809956UL), (4051866478UL), (959265349UL), (851980436UL), (2482970929UL), (2905096898UL), (342438530UL), (3428101638UL), (912389587UL), (2716490551UL), (3613297213UL), (200159550UL), (3406974927UL), (832121231UL), (2865829307UL), (1242069873UL), (1464281204UL), (1828082526UL), (2620095350UL), (3671861666UL), (986958825UL), (3332332947UL), (1610600284UL), (3193282615UL), (164496953UL), (537698841UL), (2234324389UL), (1682296894UL), (3526681456UL), (486931321UL), (1112334635UL), (1754723911UL), (3607564438UL), (3764062195UL), (898439171UL), (2702680798UL), (3827569659UL), (4104590721UL), (2612634189UL), (1703436382UL), (1596420149UL), (1814546108UL), (2684685172UL), (1659194343UL), (3421607784UL), (2424233156UL), (688245437UL), (2593335056UL), (1657668516UL), (362342820UL), (260803614UL), (2460564382UL), (2811435329UL), (2169200311UL), (4248717010UL), (1426048416UL), (1341061221UL), (1361417084UL), (3060155336UL), (2693026827UL), (688976997UL), (890124736UL), (2185462193UL), (765141735UL), (2445632748UL), (1113361455UL), (1437907207UL), (2127475991UL), (2845453063UL), (1830953748UL), (1719248425UL), (2717704308UL), (4193767498UL), (1667876711UL), (2469362144UL), (449353539UL), (3224086539UL), (231347764UL), (2737121599UL), (2917779591UL), (2122699205UL), (1463860373UL), (2760968409UL), (2579133178UL), (2600345316UL), (4017154219UL), (1041094855UL), (685134804UL), (3861095208UL), (3682591427UL), (3954527144UL), (2618003265UL), (3454840568UL), (1668276240UL), (988400088UL), (3235241899UL), (4020374281UL), (1896863688UL), (677285319UL), (2749516227UL), (4043186819UL), (2038783953UL), (236635760UL), (3641273565UL), (4073317913UL), (3946220303UL), (186484522UL), (3626346451UL), (3653227559UL), (872336642UL), (1896524045UL), (4168753288UL), (1723123703UL), (3600798445UL), (524095357UL), (412498526UL), (468768748UL), (2745777741UL), (26635454UL), (840544541UL), (1473941762UL), (2601865569UL), (2021732453UL), (3171165636UL), (1058640324UL), (3461566768UL), (1604778670UL), (437644814UL), (2437761489UL), (3615438045UL), (306196591UL), (972076738UL), (4075927397UL), (1427554739UL), (2369367008UL), (2401305323UL), (1774857312UL), (224593737UL), (3697511293UL), (4186564433UL), (1527832817UL), (1847061846UL), (333176687UL), (2988562696UL), (4039340326UL), (2731158470UL), (4273100167UL), (1673622334UL), (2163644598UL), (307949376UL), (1991088422UL), (4176957983UL), (565952761UL), (566996714UL), (4159448552UL), (1639884175UL), (115456167UL), (3265051494UL), (2826313040UL), (2698725478UL), (2976556877UL), (1276809956UL), (4051866478UL), (959265349UL), (293029699UL), (2482970929UL), (2905096898UL), (342438530UL), (3428101638UL), (4172766741UL), (2716490551UL), (3613297213UL), (200159550UL), (3406974927UL), (3723281866UL), (2865829307UL), (1242069873UL), (1464281204UL), (1828082526UL), (3304191156UL), (3671861666UL), (986958825UL), (3332332947UL), (1610600284UL), (2370407607UL), (164496953UL), (537698841UL), (2234324389UL), (1682296894UL), (826891606UL), (486931321UL), (1112334635UL), (1754723911UL), (3607564438UL), (3598993552UL), (898439171UL), (2702680798UL), (3827569659UL), (4104590721UL), (1421852097UL), (1703436382UL), (1596420149UL), (1814546108UL), (2684685172UL), (4090587429UL), (3421607784UL), (2424233156UL), (688245437UL), (2593335056UL), (4151905751UL), (362342820UL), (260803614UL), (2460564382UL), (2811435329UL), (2402832015UL), (4248717010UL), (1426048416UL), (1341061221UL), (1361417084UL), (1629089021UL), (2693026827UL), (688976997UL), (890124736UL), (2185462193UL), (303105066UL), (2445632748UL), (1113361455UL), (1437907207UL), (2127475991UL), (62024604UL), (1830953748UL), (1719248425UL), (2717704308UL), (4193767498UL), (667433630UL), (2469362144UL), (449353539UL), (3224086539UL), (231347764UL), (3918249451UL), (2917779591UL), (2122699205UL), (1463860373UL), (2760968409UL), (4274016442UL), (2600345316UL), (4017154219UL), (1041094855UL), (685134804UL), (643006688UL), (3682591427UL), (3954527144UL), (2618003265UL), (3454840568UL), (4180665518UL), (988400088UL), (3235241899UL), (4020374281UL), (1896863688UL), (3678687414UL), (2749516227UL), (4043186819UL), (2038783953UL), (236635760UL), (2880089648UL), (4073317913UL), (3946220303UL), (186484522UL), (3626346451UL), (2454620114UL), (872336642UL), (1896524045UL), (4168753288UL), (1723123703UL), (2692406059UL), (524095357UL), (412498526UL), (468768748UL), (2745777741UL), (918726515UL), (840544541UL), (1473941762UL), (2601865569UL), (2021732453UL), (3534238020UL), (1058640324UL), (3461566768UL), (1604778670UL), (437644814UL), (2894699005UL), (3615438045UL), (306196591UL), (972076738UL), (4075927397UL), (3468671461UL), (2369367008UL), (2401305323UL), (1774857312UL), (224593737UL), (2734827022UL), (4186564433UL), (1527832817UL), (1847061846UL), (333176687UL), (2437714719UL), (4039340326UL), (2731158470UL), (4273100167UL), (1673622334UL), (196072958UL), (307949376UL), (1991088422UL), (4176957983UL), (565952761UL), (847200194UL), (4159448552UL), (1639884175UL), (115456167UL), (3265051494UL), (2503079777UL), (2698725478UL), (2976556877UL), (1276809956UL), (4051866478UL), (2731665893UL), (293029699UL), (2482970929UL), (2905096898UL), (342438530UL), (581060953UL), (4172766741UL), (2716490551UL), (3613297213UL), (200159550UL), (4222335623UL), (3723281866UL), (2865829307UL), (1242069873UL), (1464281204UL), (1080647953UL), (3304191156UL), (3671861666UL), (986958825UL), (3332332947UL), (920422540UL), (3656094274UL), (4036161427UL), (2157099981UL), (1855437762UL), (1385781426UL), (199192882UL), (489599802UL), (3472601685UL), (717544078UL), (2241742884UL), (3951326913UL), (3590866192UL), (1087524220UL), (3517385549UL), (360484251UL), (2718513148UL), (1386577185UL), (1833613127UL), (2926418589UL), (1652463225UL), (548895720UL), (1343026759UL), (1797789098UL), (3229783023UL), (1745843414UL), (200554865UL), (2442780740UL), (2359926428UL), (2970332116UL), (3097392757UL), (134294482UL), (936225458UL), (1968264650UL), (64868134UL), (3821668262UL), (2502175363UL), (1623767635UL), (2936073062UL), (1991791011UL), (2971174068UL), (3142195911UL), (2874818345UL), (2192526584UL), (496586185UL), (2491564144UL), (2415210641UL), (314307270UL), (2936737494UL), (557604388UL), (1067914024UL), (3270690738UL), (375601880UL), (962749065UL), (3610467620UL), (402112984UL), (1432929499UL), (3872957776UL), (3971384069UL), (2223968592UL), (407083609UL), (2178236674UL), (1806303230UL), (3397564470UL), (12158764UL), (415570813UL), (4033667395UL), (3687406137UL), (801878150UL), (953500350UL), (3667783172UL), (1203668106UL), (902418194UL), (779786150UL), (774683730UL), (2870261992UL), (509192460UL), (1961621392UL), (1064906432UL), (3665710891UL), (1733725153UL), (1887608856UL), (1314631523UL), (4097239005UL), (29074501UL), (3472521950UL), (4040841657UL), (532128023UL), (2333441401UL), (1671717886UL), (1678544416UL), (1218347584UL), (3680929567UL), (4025753853UL), (2810948711UL), (1846100306UL), (3377469279UL), (3144481747UL), (2625781306UL), (730632118UL), (3162408393UL), (3423660386UL), (1364968369UL), (4270900402UL), (1075484840UL), (2892932277UL), (3700635052UL), (3853022563UL), (281755151UL), (1530909868UL), (2364069707UL), (2361723426UL), (738500028UL), (1401903990UL), (1543704261UL), (2442916222UL), (1076190609UL), (1882477803UL), (740024557UL), (1591015439UL), (2730909167UL), (2723330839UL), (1637373491UL), (3777799860UL), (2921269571UL), (3698591972UL), (3997463570UL), (3877862147UL), (1912888417UL), (3365137165UL), (3465700492UL), (771243134UL), (4037723169UL), (1715894739UL), (1025821874UL), (1924958945UL), (3382242859UL), (121591031UL), (483980724UL), (546523388UL), (2446882279UL), (856267778UL), (578739009UL), (2978085488UL), (480884914UL), (966764808UL), (457039953UL), (3817520708UL), (1113646451UL), (2503896910UL), (3507840816UL), (717151671UL), (4149352573UL), (1568869830UL), (395015863UL), (773165995UL), (1853682362UL), (2861368846UL), (1884368812UL), (1250092101UL)}, {(916910638UL), (961623451UL), (1193013401UL), (1016438484UL), (4091279871UL), (287282633UL), (8590725UL), (3575333670UL), (324340905UL), (3133751747UL), (2840894649UL), (2980503178UL), (1111215768UL), (2783846375UL), (72516413UL), (4158424384UL), (2184094569UL), (2305724254UL), (4057093054UL), (1407652993UL), (3105191537UL), (768505376UL), (298782270UL), (993926164UL), (2694730042UL), (1479658113UL), (2376490281UL), (2767906402UL), (1619969256UL), (3256472015UL), (2563843533UL), (2974784738UL), (2529307107UL), (4289918826UL), (3105587575UL), (3748950898UL), (2182744253UL), (431888679UL), (3780324902UL), (2525978209UL), (54545903UL), (1688749940UL), (2394884334UL), (3477656171UL), (263834270UL), (1562965459UL), (804704330UL), (4185729868UL), (138898835UL), (2113063150UL), (327612841UL), (1252226275UL), (935318076UL), (2956823075UL), (4095101181UL), (1510586062UL), (156282440UL), (3386839706UL), (2294393752UL), (1306167091UL), (4005033667UL), (651716500UL), (4115192738UL), (123027719UL), (3873547487UL), (2910637335UL), (2571924586UL), (3489608656UL), (956791985UL), (2467423726UL), (3214531645UL), (2054232851UL), (49634692UL), (377192215UL), (1865068750UL), (2479252980UL), (3481787748UL), (3243507737UL), (605491073UL), (4062466752UL), (988602517UL), (1539348794UL), (1555068617UL), (2657884010UL), (460334294UL), (4240766479UL), (3639800790UL), (253377117UL), (3969136265UL), (488705329UL), (1722560286UL), (2289159295UL), (1025876008UL), (2927117896UL), (767521707UL), (2047999999UL), (4260853571UL), (2079302241UL), (2409677301UL), (1087552976UL), (2363907365UL), (2574464321UL), (2606273241UL), (3716086457UL), (26053603UL), (3162779415UL), (14843078UL), (2614076143UL), (1157531920UL), (2773275636UL), (2338825066UL), (435472225UL), (1399711137UL), (1224374788UL), (2154533280UL), (560135209UL), (935800607UL), (1940258814UL), (3826959530UL), (3423217355UL), (3704934971UL), (3815248829UL), (3878175339UL), (1395508015UL), (3295101527UL), (177901558UL), (4167531389UL), (1375148189UL), (3125377631UL), (557218961UL), (4088880299UL), (3478859071UL), (3687276754UL), (2845114223UL), (1713171361UL), (1756507633UL), (3160807894UL), (2375334470UL), (843542578UL), (1907952570UL), (1544844563UL), (2294372007UL), (3336681376UL), (734347193UL), (102566945UL), (2311037104UL), (4294750194UL), (3572240326UL), (732958152UL), (263733314UL), (2087890678UL), (331542297UL), (3549110380UL), (2073894939UL), (2104101380UL), (3670791368UL), (3122901693UL), (3799823891UL), (3783548253UL), (1102633864UL), (44327348UL), (916910638UL), (961623451UL), (1193013401UL), (1016438484UL), (1873779640UL), (287282633UL), (8590725UL), (3575333670UL), (324340905UL), (1144671533UL), (2840894649UL), (2980503178UL), (1111215768UL), (2783846375UL), (2000673937UL), (4158424384UL), (2184094569UL), (2305724254UL), (4057093054UL), (533488413UL), (3105191537UL), (768505376UL), (298782270UL), (993926164UL), (2015456740UL), (1479658113UL), (2376490281UL), (2767906402UL), (1619969256UL), (3120736988UL), (2563843533UL), (2974784738UL), (2529307107UL), (4289918826UL), (729503771UL), (3748950898UL), (2182744253UL), (431888679UL), (3780324902UL), (373638396UL), (54545903UL), (1688749940UL), (2394884334UL), (3477656171UL), (1083764681UL), (1562965459UL), (804704330UL), (4185729868UL), (138898835UL), (823405282UL), (327612841UL), (1252226275UL), (935318076UL), (2956823075UL), (899234846UL), (1510586062UL), (156282440UL), (3386839706UL), (2294393752UL), (2769934879UL), (4005033667UL), (651716500UL), (4115192738UL), (123027719UL), (3729538641UL), (2910637335UL), (2571924586UL), (3489608656UL), (956791985UL), (139360134UL), (3214531645UL), (2054232851UL), (49634692UL), (377192215UL), (2754746969UL), (2479252980UL), (3481787748UL), (3243507737UL), (605491073UL), (732155706UL), (988602517UL), (1539348794UL), (1555068617UL), (2657884010UL), (3753733088UL), (4240766479UL), (3639800790UL), (253377117UL), (3969136265UL), (3848735787UL), (1722560286UL), (2289159295UL), (1025876008UL), (2927117896UL), (3661948694UL), (2047999999UL), (4260853571UL), (2079302241UL), (2409677301UL), (3421911122UL), (2363907365UL), (2574464321UL), (2606273241UL), (3716086457UL), (2064343322UL), (3162779415UL), (14843078UL), (2614076143UL), (1157531920UL), (826449637UL), (2338825066UL), (435472225UL), (1399711137UL), (1224374788UL), (3770340198UL), (560135209UL), (935800607UL), (1940258814UL), (3826959530UL), (2963586762UL), (3704934971UL), (3815248829UL), (3878175339UL), (1395508015UL), (3721612680UL), (177901558UL), (4167531389UL), (1375148189UL), (3125377631UL), (1023552290UL), (4088880299UL), (3478859071UL), (3687276754UL), (2845114223UL), (3831557301UL), (1756507633UL), (3160807894UL), (2375334470UL), (843542578UL), (2798365898UL), (1544844563UL), (2294372007UL), (3336681376UL), (734347193UL), (1856808621UL), (2311037104UL), (4294750194UL), (3572240326UL), (732958152UL), (1999195012UL), (2087890678UL), (331542297UL), (3549110380UL), (2073894939UL), (3115936764UL), (3670791368UL), (3122901693UL), (3799823891UL), (3783548253UL), (132796150UL), (44327348UL), (916910638UL), (961623451UL), (1193013401UL), (1753944196UL), (1873779640UL), (287282633UL), (8590725UL), (3575333670UL), (1447720209UL), (1144671533UL), (2840894649UL), (2980503178UL), (1111215768UL), (1211945983UL), (2000673937UL), (4158424384UL), (2184094569UL), (2305724254UL), (402617261UL), (533488413UL), (3105191537UL), (768505376UL), (298782270UL), (2915553159UL), (2015456740UL), (1479658113UL), (2376490281UL), (2767906402UL), (3473761811UL), (3120736988UL), (2563843533UL), (2974784738UL), (2529307107UL), (737859212UL), (729503771UL), (3748950898UL), (2182744253UL), (431888679UL), (2013420163UL), (373638396UL), (54545903UL), (1688749940UL), (2394884334UL), (675998523UL), (1083764681UL), (1562965459UL), (804704330UL), (4185729868UL), (1165431355UL), (823405282UL), (327612841UL), (1252226275UL), (935318076UL), (2420680216UL), (899234846UL), (1510586062UL), (156282440UL), (3386839706UL), (2101339651UL), (2769934879UL), (4005033667UL), (651716500UL), (4115192738UL), (112049740UL), (3729538641UL), (2910637335UL), (2571924586UL), (3489608656UL), (305695595UL), (139360134UL), (3214531645UL), (2054232851UL), (49634692UL), (1073828255UL), (2754746969UL), (2479252980UL), (3481787748UL), (3243507737UL), (3392719169UL), (732155706UL), (988602517UL), (1539348794UL), (1555068617UL), (3246776527UL), (3753733088UL), (4240766479UL), (3639800790UL), (253377117UL), (872273450UL), (3848735787UL), (1722560286UL), (2289159295UL), (1025876008UL), (4168154213UL), (3661948694UL), (2047999999UL), (4260853571UL), (2079302241UL), (2380420842UL), (3421911122UL), (2363907365UL), (2574464321UL), (2606273241UL), (3881916078UL), (2064343322UL), (3162779415UL), (14843078UL), (2614076143UL), (473288515UL), (826449637UL), (2338825066UL), (435472225UL), (1399711137UL), (3068538992UL), (3770340198UL), (560135209UL), (935800607UL), (1940258814UL), (1469655183UL), (2963586762UL), (3704934971UL), (3815248829UL), (3878175339UL), (2410602840UL), (3721612680UL), (177901558UL), (4167531389UL), (1375148189UL), (1367577763UL), (1023552290UL), (4088880299UL), (3478859071UL), (3687276754UL), (678224549UL), (3831557301UL), (1756507633UL), (3160807894UL), (2375334470UL), (2884561721UL), (2798365898UL), (1544844563UL), (2294372007UL), (3336681376UL), (1938834658UL), (1856808621UL), (2311037104UL), (4294750194UL), (3572240326UL), (2786764913UL), (1999195012UL), (2087890678UL), (331542297UL), (3549110380UL), (3597797341UL), (3115936764UL), (3670791368UL), (3122901693UL), (3799823891UL), (1271317799UL), (132796150UL), (44327348UL), (916910638UL), (961623451UL), (2427821332UL), (1753944196UL), (1873779640UL), (287282633UL), (8590725UL), (1244012658UL), (1447720209UL), (1144671533UL), (2840894649UL), (2980503178UL), (3548902577UL), (1211945983UL), (2000673937UL), (4158424384UL), (2184094569UL), (2152623453UL), (402617261UL), (533488413UL), (3105191537UL), (768505376UL), (1095141108UL), (2915553159UL), (2015456740UL), (1479658113UL), (2376490281UL), (337998873UL), (3473761811UL), (3120736988UL), (2563843533UL), (2974784738UL), (3087228498UL), (737859212UL), (729503771UL), (3748950898UL), (2182744253UL), (2140410733UL), (2013420163UL), (373638396UL), (54545903UL), (1688749940UL), (528290088UL), (675998523UL), (1083764681UL), (1562965459UL), (804704330UL), (2536362875UL), (1165431355UL), (823405282UL), (327612841UL), (1252226275UL), (4037635314UL), (2420680216UL), (899234846UL), (1510586062UL), (156282440UL), (2012335895UL), (2101339651UL), (2769934879UL), (4005033667UL), (651716500UL), (2552583570UL), (112049740UL), (3729538641UL), (2910637335UL), (2571924586UL), (2436645403UL), (305695595UL), (139360134UL), (3214531645UL), (2054232851UL), (2384286326UL), (1073828255UL), (2754746969UL), (2479252980UL), (3481787748UL), (1948315585UL), (3392719169UL), (732155706UL), (988602517UL), (1539348794UL), (4110558494UL), (3246776527UL), (3753733088UL), (4240766479UL), (3639800790UL), (3627363812UL), (872273450UL), (3848735787UL), (1722560286UL), (2289159295UL), (4122430477UL), (4168154213UL), (3661948694UL), (2047999999UL), (4260853571UL), (1767882442UL), (2380420842UL), (3421911122UL), (2363907365UL), (2574464321UL), (2778622726UL), (3881916078UL), (2064343322UL), (3162779415UL), (14843078UL), (1513897109UL), (473288515UL), (826449637UL), (2338825066UL), (435472225UL), (322954918UL), (3068538992UL), (3770340198UL), (560135209UL), (935800607UL), (345602050UL), (1469655183UL), (2963586762UL), (3704934971UL), (3815248829UL), (3508249920UL), (2410602840UL), (3721612680UL), (177901558UL), (4167531389UL), (2161244150UL), (1367577763UL), (1023552290UL), (4088880299UL), (3478859071UL), (1108183104UL), (678224549UL), (3831557301UL), (1756507633UL), (3160807894UL), (2551630811UL), (2884561721UL), (2798365898UL), (1544844563UL), (2294372007UL), (2520267760UL), (1938834658UL), (1856808621UL), (2311037104UL), (4294750194UL), (2310096003UL), (2786764913UL), (1999195012UL), (2087890678UL), (331542297UL), (1205238749UL), (3597797341UL), (3115936764UL), (3670791368UL), (3122901693UL), (2008141679UL), (2018425028UL), (3435073328UL), (1452813805UL), (1628661138UL), (1323367156UL), (1062553693UL), (4029321700UL), (2772685842UL), (3798388850UL), (1315172209UL), (3930983291UL), (3816791373UL), (529176017UL), (3419610188UL), (3331589216UL), (4016977274UL), (2047089790UL), (3892571923UL), (2363414008UL), (1144631948UL), (3004954882UL), (2558739305UL), (19774033UL), (2525079911UL), (3774885821UL), (2817837373UL), (986111566UL), (1446678953UL), (3238485630UL), (3993748600UL), (1601954599UL), (3100591537UL), (2098009380UL), (3935971261UL), (4202546603UL), (3713465083UL), (3845664764UL), (2466365355UL), (1452340065UL), (2003576531UL), (1013434822UL), (2254608933UL), (783902023UL), (3129770529UL), (129130612UL), (821418228UL), (350036483UL), (3473671510UL), (4128495167UL), (2773832518UL), (683262085UL), (2143353417UL), (256251732UL), (1719056536UL), (2670223618UL), (328467339UL), (1564657740UL), (451231672UL), (2788353006UL), (882900088UL), (3255241056UL), (3198073758UL), (2541070985UL), (1941509325UL), (674933160UL), (207753676UL), (2605303964UL), (1681335994UL), (1143520001UL), (448872632UL), (302917879UL), (1100138495UL), (2058770021UL), (3116955098UL), (2081754747UL), (3734924767UL), (1916718058UL), (3873335960UL), (2740460398UL), (2171157007UL), (27677949UL), (2364721928UL), (175851655UL), (1468083950UL), (3162369526UL), (2441504540UL), (556978295UL), (2372096172UL), (3181101116UL), (2582850132UL), (1101292643UL), (862643740UL), (2095546242UL), (3261953801UL), (748040658UL), (3970037674UL), (819116843UL), (3594523650UL), (1597423019UL), (4109336883UL), (1198282420UL), (2905230517UL), (1729529596UL), (3230132814UL), (3640242164UL), (1899059108UL), (1944906555UL), (3426510495UL), (3035188107UL), (6448083UL), (1093882965UL), (2867500469UL), (3626379157UL), (1849073068UL), (897616501UL), (604221668UL), (1020676159UL), (4083635798UL), (1716022041UL), (3671877965UL), (1738820843UL), (30077467UL), (729231767UL), (3413193248UL), (207000406UL), (3854363185UL), (3302747326UL), (3293643267UL), (2101250157UL), (460131091UL), (4159442595UL), (1133391045UL), (1031215443UL), (4195487944UL), (45931575UL), (2922629291UL), (789302543UL), (3024994662UL), (442525623UL), (2850119076UL), (838309503UL), (2585361734UL), (1020449164UL), (1623631007UL), (955374631UL), (2932467671UL), (3713639221UL), (3019179416UL), (977970472UL), (1817244230UL), (3856774853UL), (1140530868UL), (886199600UL), (1218509766UL), (4001537244UL), (2840913665UL), (2133254364UL), (3332344608UL), (475291624UL)}, {(1854921599UL), (2655519695UL), (3124573588UL), (319882484UL), (603545603UL), (4175512633UL), (141286453UL), (1183670252UL), (1789500145UL), (37351733UL), (3190829323UL), (2782782009UL), (493805446UL), (1228958246UL), (2672482554UL), (2274981421UL), (2935438833UL), (3625733677UL), (3679506394UL), (687805550UL), (134516308UL), (3576789728UL), (965007022UL), (1056542222UL), (2319405423UL), (3944221200UL), (950102624UL), (3848192810UL), (3205299696UL), (82033760UL), (1241913280UL), (1360146137UL), (1675732327UL), (2164452797UL), (3920498715UL), (2226452641UL), (3172047212UL), (1569171738UL), (2631589480UL), (2889660225UL), (2030783667UL), (2237381973UL), (2706217212UL), (3143638386UL), (1733174225UL), (1166820137UL), (3818389960UL), (193959252UL), (2793509934UL), (316291605UL), (2502743884UL), (1963136977UL), (3739017448UL), (25754513UL), (1590156485UL), (1856291967UL), (4143674472UL), (2538785911UL), (2159135699UL), (1908446793UL), (3303325234UL), (2589568800UL), (1193586059UL), (77481069UL), (789413194UL), (2556570543UL), (162987300UL), (1960844609UL), (2973799047UL), (4253906178UL), (315868734UL), (2542622968UL), (3949539136UL), (1479106582UL), (4225431384UL), (1235059630UL), (1533374854UL), (847792023UL), (4031286530UL), (4194276632UL), (164541100UL), (1010135841UL), (143302319UL), (1335585015UL), (1237311692UL), (20896020UL), (344974153UL), (2576803233UL), (3430251730UL), (984163376UL), (2680612471UL), (1276425436UL), (2400671554UL), (1628640140UL), (2161048926UL), (2109177634UL), (998215324UL), (3127793500UL), (1759998050UL), (3105138908UL), (2583746384UL), (2126302368UL), (3258602104UL), (1262742375UL), (3565617377UL), (3726060195UL), (157069329UL), (390662438UL), (3800994052UL), (2007694482UL), (377281730UL), (3251789121UL), (236703173UL), (122782596UL), (775407411UL), (3394010206UL), (4232159202UL), (468321553UL), (2704615220UL), (1332411375UL), (2978494251UL), (989230484UL), (3122841814UL), (2348872707UL), (731335994UL), (541354422UL), (223117443UL), (2225009071UL), (4230058949UL), (1875162926UL), (3897048544UL), (3550177883UL), (2461273592UL), (1046820583UL), (1333727817UL), (1378024753UL), (3686775275UL), (4230752590UL), (64834458UL), (1281467967UL), (729116355UL), (3886390916UL), (65029451UL), (3478506446UL), (1387684482UL), (1172004841UL), (2525409243UL), (1677678908UL), (1704646757UL), (930937262UL), (1088384271UL), (689357059UL), (1754542213UL), (702963842UL), (2864311668UL), (1960202673UL), (1009675673UL), (3742350158UL), (3751269215UL), (3166659283UL), (9090161UL), (1854921599UL), (2655519695UL), (3124573588UL), (319882484UL), (1422536794UL), (4175512633UL), (141286453UL), (1183670252UL), (1789500145UL), (850391877UL), (3190829323UL), (2782782009UL), (493805446UL), (1228958246UL), (837232655UL), (2274981421UL), (2935438833UL), (3625733677UL), (3679506394UL), (955772620UL), (134516308UL), (3576789728UL), (965007022UL), (1056542222UL), (874117013UL), (3944221200UL), (950102624UL), (3848192810UL), (3205299696UL), (543679720UL), (1241913280UL), (1360146137UL), (1675732327UL), (2164452797UL), (1169030022UL), (2226452641UL), (3172047212UL), (1569171738UL), (2631589480UL), (3783543297UL), (2030783667UL), (2237381973UL), (2706217212UL), (3143638386UL), (1560162209UL), (1166820137UL), (3818389960UL), (193959252UL), (2793509934UL), (4258046618UL), (2502743884UL), (1963136977UL), (3739017448UL), (25754513UL), (1204846712UL), (1856291967UL), (4143674472UL), (2538785911UL), (2159135699UL), (3889946075UL), (3303325234UL), (2589568800UL), (1193586059UL), (77481069UL), (969912041UL), (2556570543UL), (162987300UL), (1960844609UL), (2973799047UL), (427583517UL), (315868734UL), (2542622968UL), (3949539136UL), (1479106582UL), (92839917UL), (1235059630UL), (1533374854UL), (847792023UL), (4031286530UL), (1147875681UL), (164541100UL), (1010135841UL), (143302319UL), (1335585015UL), (368616909UL), (20896020UL), (344974153UL), (2576803233UL), (3430251730UL), (1078575783UL), (2680612471UL), (1276425436UL), (2400671554UL), (1628640140UL), (4149623645UL), (2109177634UL), (998215324UL), (3127793500UL), (1759998050UL), (3525419965UL), (2583746384UL), (2126302368UL), (3258602104UL), (1262742375UL), (1996113346UL), (3726060195UL), (157069329UL), (390662438UL), (3800994052UL), (982000497UL), (377281730UL), (3251789121UL), (236703173UL), (122782596UL), (2303768414UL), (3394010206UL), (4232159202UL), (468321553UL), (2704615220UL), (681592492UL), (2978494251UL), (989230484UL), (3122841814UL), (2348872707UL), (4089094260UL), (541354422UL), (223117443UL), (2225009071UL), (4230058949UL), (2754981128UL), (3897048544UL), (3550177883UL), (2461273592UL), (1046820583UL), (668143612UL), (1378024753UL), (3686775275UL), (4230752590UL), (64834458UL), (3765910650UL), (729116355UL), (3886390916UL), (65029451UL), (3478506446UL), (3419111947UL), (1172004841UL), (2525409243UL), (1677678908UL), (1704646757UL), (155635560UL), (1088384271UL), (689357059UL), (1754542213UL), (702963842UL), (2712009967UL), (1960202673UL), (1009675673UL), (3742350158UL), (3751269215UL), (129749802UL), (9090161UL), (1854921599UL), (2655519695UL), (3124573588UL), (809557750UL), (1422536794UL), (4175512633UL), (141286453UL), (1183670252UL), (1739311360UL), (850391877UL), (3190829323UL), (2782782009UL), (493805446UL), (1738527771UL), (837232655UL), (2274981421UL), (2935438833UL), (3625733677UL), (1858071296UL), (955772620UL), (134516308UL), (3576789728UL), (965007022UL), (3367712327UL), (874117013UL), (3944221200UL), (950102624UL), (3848192810UL), (2420548306UL), (543679720UL), (1241913280UL), (1360146137UL), (1675732327UL), (176019367UL), (1169030022UL), (2226452641UL), (3172047212UL), (1569171738UL), (76544055UL), (3783543297UL), (2030783667UL), (2237381973UL), (2706217212UL), (3283985735UL), (1560162209UL), (1166820137UL), (3818389960UL), (193959252UL), (346134252UL), (4258046618UL), (2502743884UL), (1963136977UL), (3739017448UL), (3887005605UL), (1204846712UL), (1856291967UL), (4143674472UL), (2538785911UL), (366578749UL), (3889946075UL), (3303325234UL), (2589568800UL), (1193586059UL), (2917569085UL), (969912041UL), (2556570543UL), (162987300UL), (1960844609UL), (61311938UL), (427583517UL), (315868734UL), (2542622968UL), (3949539136UL), (2278526422UL), (92839917UL), (1235059630UL), (1533374854UL), (847792023UL), (1361054176UL), (1147875681UL), (164541100UL), (1010135841UL), (143302319UL), (1348709332UL), (368616909UL), (20896020UL), (344974153UL), (2576803233UL), (3290873783UL), (1078575783UL), (2680612471UL), (1276425436UL), (2400671554UL), (628790408UL), (4149623645UL), (2109177634UL), (998215324UL), (3127793500UL), (2019336900UL), (3525419965UL), (2583746384UL), (2126302368UL), (3258602104UL), (2858154034UL), (1996113346UL), (3726060195UL), (157069329UL), (390662438UL), (2250549235UL), (982000497UL), (377281730UL), (3251789121UL), (236703173UL), (3487415996UL), (2303768414UL), (3394010206UL), (4232159202UL), (468321553UL), (2773608982UL), (681592492UL), (2978494251UL), (989230484UL), (3122841814UL), (3647638215UL), (4089094260UL), (541354422UL), (223117443UL), (2225009071UL), (2829509947UL), (2754981128UL), (3897048544UL), (3550177883UL), (2461273592UL), (282627696UL), (668143612UL), (1378024753UL), (3686775275UL), (4230752590UL), (1105868822UL), (3765910650UL), (729116355UL), (3886390916UL), (65029451UL), (328554604UL), (3419111947UL), (1172004841UL), (2525409243UL), (1677678908UL), (1395036942UL), (155635560UL), (1088384271UL), (689357059UL), (1754542213UL), (1076601715UL), (2712009967UL), (1960202673UL), (1009675673UL), (3742350158UL), (2581225953UL), (129749802UL), (9090161UL), (1854921599UL), (2655519695UL), (1393282220UL), (809557750UL), (1422536794UL), (4175512633UL), (141286453UL), (2211497169UL), (1739311360UL), (850391877UL), (3190829323UL), (2782782009UL), (2694871802UL), (1738527771UL), (837232655UL), (2274981421UL), (2935438833UL), (3145832503UL), (1858071296UL), (955772620UL), (134516308UL), (3576789728UL), (4045354759UL), (3367712327UL), (874117013UL), (3944221200UL), (950102624UL), (3562634568UL), (2420548306UL), (543679720UL), (1241913280UL), (1360146137UL), (3644280343UL), (176019367UL), (1169030022UL), (2226452641UL), (3172047212UL), (3927720006UL), (76544055UL), (3783543297UL), (2030783667UL), (2237381973UL), (1497233808UL), (3283985735UL), (1560162209UL), (1166820137UL), (3818389960UL), (2344066681UL), (346134252UL), (4258046618UL), (2502743884UL), (1963136977UL), (79988846UL), (3887005605UL), (1204846712UL), (1856291967UL), (4143674472UL), (3967952414UL), (366578749UL), (3889946075UL), (3303325234UL), (2589568800UL), (2193179011UL), (2917569085UL), (969912041UL), (2556570543UL), (162987300UL), (52882655UL), (61311938UL), (427583517UL), (315868734UL), (2542622968UL), (1575831590UL), (2278526422UL), (92839917UL), (1235059630UL), (1533374854UL), (2397068791UL), (1361054176UL), (1147875681UL), (164541100UL), (1010135841UL), (2586368032UL), (1348709332UL), (368616909UL), (20896020UL), (344974153UL), (3445652232UL), (3290873783UL), (1078575783UL), (2680612471UL), (1276425436UL), (3682156544UL), (628790408UL), (4149623645UL), (2109177634UL), (998215324UL), (4049708298UL), (2019336900UL), (3525419965UL), (2583746384UL), (2126302368UL), (1627944270UL), (2858154034UL), (1996113346UL), (3726060195UL), (157069329UL), (1481222640UL), (2250549235UL), (982000497UL), (377281730UL), (3251789121UL), (3564274539UL), (3487415996UL), (2303768414UL), (3394010206UL), (4232159202UL), (3509025997UL), (2773608982UL), (681592492UL), (2978494251UL), (989230484UL), (980252048UL), (3647638215UL), (4089094260UL), (541354422UL), (223117443UL), (543970497UL), (2829509947UL), (2754981128UL), (3897048544UL), (3550177883UL), (2736782140UL), (282627696UL), (668143612UL), (1378024753UL), (3686775275UL), (2728601425UL), (1105868822UL), (3765910650UL), (729116355UL), (3886390916UL), (1866378660UL), (328554604UL), (3419111947UL), (1172004841UL), (2525409243UL), (1506924008UL), (1395036942UL), (155635560UL), (1088384271UL), (689357059UL), (3587092123UL), (1076601715UL), (2712009967UL), (1960202673UL), (1009675673UL), (4292715891UL), (2465250857UL), (3267969665UL), (2459570573UL), (3644463083UL), (1637197500UL), (684559293UL), (3520611957UL), (2976084366UL), (1512112440UL), (1778285193UL), (1849742417UL), (3144801412UL), (3009052859UL), (820829188UL), (1382783871UL), (3373481539UL), (3777016406UL), (266942530UL), (1792334422UL), (4109859515UL), (1468149634UL), (1356457853UL), (623893785UL), (1301686542UL), (441704877UL), (3377795902UL), (879822753UL), (329462927UL), (543858304UL), (2221828617UL), (2996486613UL), (981774202UL), (1032220084UL), (1066536452UL), (1004068806UL), (1336694798UL), (3744375323UL), (3802436665UL), (3366526577UL), (418696462UL), (1776559103UL), (1291965608UL), (1623030339UL), (1443628607UL), (572114324UL), (899621592UL), (332121275UL), (3637616671UL), (457287722UL), (3803043476UL), (408472701UL), (660940326UL), (1209169008UL), (1202511620UL), (2906900959UL), (2600414642UL), (2015874468UL), (2931389161UL), (1760773669UL), (2601299639UL), (543821664UL), (3426280682UL), (1337602255UL), (3334593650UL), (1320885980UL), (3857269540UL), (2548321029UL), (2250001180UL), (673341051UL), (1900184720UL), (731675831UL), (2461790412UL), (2593291320UL), (1640301250UL), (863529987UL), (91627443UL), (2437824309UL), (2834231475UL), (4093270720UL), (1474594761UL), (4186662839UL), (1683556862UL), (1302286991UL), (806676270UL), (703274107UL), (3756759580UL), (674737904UL), (912015048UL), (1823306025UL), (1509430520UL), (3128952761UL), (290841833UL), (3917789380UL), (1022040580UL), (1810054038UL), (334998864UL), (1009274987UL), (310979037UL), (606749827UL), (546291081UL), (3438438313UL), (1840081424UL), (1950680845UL), (4217236364UL), (1814584903UL), (2814353208UL), (194196981UL), (1540331253UL), (3135937654UL), (773351497UL), (1878220007UL), (3097009802UL), (1252607159UL), (1378821846UL), (2741884614UL), (178612659UL), (3656860395UL), (1259606652UL), (3942111545UL), (488406826UL), (3640897405UL), (3419000480UL), (353909713UL), (2996208477UL), (2862593073UL), (108483327UL), (648472258UL), (1060249632UL), (1049865483UL), (430087518UL), (1364157854UL), (3367631180UL), (251313827UL), (2374149836UL), (2109357086UL), (479172068UL), (464775113UL), (1806677787UL), (3488082411UL), (356035738UL), (3080424395UL), (4134646749UL), (369528743UL), (1031004516UL), (2525336414UL), (4189798138UL), (3928909462UL), (568714397UL), (1681832820UL), (1753328641UL), (827357673UL), (1651960551UL), (1798317455UL), (737101952UL), (3257553606UL), (400882781UL), (1473208110UL), (4134183873UL), (2193420912UL)}, {(2483976489UL), (2790651795UL), (3298324523UL), (3508205426UL), (2236819708UL), (917494217UL), (769620837UL), (3411018785UL), (2391335000UL), (1627061280UL), (3356773416UL), (1288706527UL), (4178910717UL), (3636299534UL), (4221874052UL), (3674654381UL), (537787012UL), (4271656840UL), (185820273UL), (1160533598UL), (1862365049UL), (2550353307UL), (1392072847UL), (1870891365UL), (1517453821UL), (524666025UL), (3645751565UL), (2415020247UL), (3691419894UL), (2580450642UL), (2130267479UL), (3636103610UL), (562446539UL), (750696587UL), (97137475UL), (3894066051UL), (2239638596UL), (3256181120UL), (3981041836UL), (774947039UL), (451287677UL), (3618957054UL), (4236303539UL), (1027744929UL), (1497195372UL), (498574915UL), (2164122779UL), (582902291UL), (3040883311UL), (1626221455UL), (1853378UL), (2125490000UL), (3185055972UL), (1607660025UL), (432884530UL), (779476209UL), (124284956UL), (2488937128UL), (2521389012UL), (107485781UL), (2873055013UL), (1171872946UL), (3130489952UL), (4273333914UL), (646240524UL), (3970896645UL), (942009076UL), (4069926418UL), (3129385884UL), (3470469370UL), (388702536UL), (450999415UL), (2995728716UL), (1687173264UL), (3049352827UL), (2648078738UL), (190663705UL), (486809970UL), (424002670UL), (2421764946UL), (2941043524UL), (3841512738UL), (119077561UL), (1801381572UL), (2208680167UL), (2502730219UL), (9899015UL), (2455199230UL), (3755314209UL), (3958460021UL), (3846398898UL), (1405136244UL), (2870563334UL), (821846618UL), (2790899812UL), (863647562UL), (629585032UL), (958925512UL), (1190540209UL), (57251233UL), (2109551995UL), (2294881622UL), (2603370255UL), (3839518646UL), (123838650UL), (3436270690UL), (1637121394UL), (3761101432UL), (954001192UL), (759760236UL), (3268295908UL), (2313083096UL), (630164216UL), (2367213191UL), (3992059381UL), (3292952769UL), (2040774258UL), (1420209005UL), (527547730UL), (1222399440UL), (1515078401UL), (2005580991UL), (645585788UL), (2256370254UL), (3057235502UL), (2870727428UL), (2785498804UL), (333440916UL), (1873686678UL), (2489794553UL), (3726728164UL), (3405629071UL), (3869328595UL), (3081963448UL), (2122133003UL), (1428788181UL), (4141962679UL), (41030733UL), (183716455UL), (36316501UL), (1430796327UL), (1884066707UL), (1216957106UL), (3455082673UL), (1092665987UL), (535070834UL), (3873372533UL), (175757671UL), (3414803303UL), (791028991UL), (3436610906UL), (2950895946UL), (977680845UL), (4224715886UL), (2809442211UL), (4044727083UL), (3035532020UL), (4253187882UL), (969203959UL), (2539482914UL), (813880136UL), (2483976489UL), (2790651795UL), (3298324523UL), (3508205426UL), (49280479UL), (917494217UL), (769620837UL), (3411018785UL), (2391335000UL), (3036738936UL), (3356773416UL), (1288706527UL), (4178910717UL), (3636299534UL), (2294957038UL), (3674654381UL), (537787012UL), (4271656840UL), (185820273UL), (2622722506UL), (1862365049UL), (2550353307UL), (1392072847UL), (1870891365UL), (2838104933UL), (524666025UL), (3645751565UL), (2415020247UL), (3691419894UL), (1295777418UL), (2130267479UL), (3636103610UL), (562446539UL), (750696587UL), (249830932UL), (3894066051UL), (2239638596UL), (3256181120UL), (3981041836UL), (3217398876UL), (451287677UL), (3618957054UL), (4236303539UL), (1027744929UL), (1724964245UL), (498574915UL), (2164122779UL), (582902291UL), (3040883311UL), (3101287841UL), (1853378UL), (2125490000UL), (3185055972UL), (1607660025UL), (1128474163UL), (779476209UL), (124284956UL), (2488937128UL), (2521389012UL), (338597864UL), (2873055013UL), (1171872946UL), (3130489952UL), (4273333914UL), (1557892392UL), (3970896645UL), (942009076UL), (4069926418UL), (3129385884UL), (2688433076UL), (388702536UL), (450999415UL), (2995728716UL), (1687173264UL), (157685189UL), (2648078738UL), (190663705UL), (486809970UL), (424002670UL), (979986388UL), (2941043524UL), (3841512738UL), (119077561UL), (1801381572UL), (2668625968UL), (2502730219UL), (9899015UL), (2455199230UL), (3755314209UL), (2699515741UL), (3846398898UL), (1405136244UL), (2870563334UL), (821846618UL), (505633792UL), (863647562UL), (629585032UL), (958925512UL), (1190540209UL), (2067402799UL), (2109551995UL), (2294881622UL), (2603370255UL), (3839518646UL), (2688067120UL), (3436270690UL), (1637121394UL), (3761101432UL), (954001192UL), (3206166733UL), (3268295908UL), (2313083096UL), (630164216UL), (2367213191UL), (3007494680UL), (3292952769UL), (2040774258UL), (1420209005UL), (527547730UL), (4047406592UL), (1515078401UL), (2005580991UL), (645585788UL), (2256370254UL), (13805572UL), (2870727428UL), (2785498804UL), (333440916UL), (1873686678UL), (1928222740UL), (3726728164UL), (3405629071UL), (3869328595UL), (3081963448UL), (2971423693UL), (1428788181UL), (4141962679UL), (41030733UL), (183716455UL), (4064095256UL), (1430796327UL), (1884066707UL), (1216957106UL), (3455082673UL), (985592757UL), (535070834UL), (3873372533UL), (175757671UL), (3414803303UL), (2159028553UL), (3436610906UL), (2950895946UL), (977680845UL), (4224715886UL), (345462057UL), (4044727083UL), (3035532020UL), (4253187882UL), (969203959UL), (984166534UL), (813880136UL), (2483976489UL), (2790651795UL), (3298324523UL), (1080001158UL), (49280479UL), (917494217UL), (769620837UL), (3411018785UL), (3216598401UL), (3036738936UL), (3356773416UL), (1288706527UL), (4178910717UL), (3311472057UL), (2294957038UL), (3674654381UL), (537787012UL), (4271656840UL), (220045511UL), (2622722506UL), (1862365049UL), (2550353307UL), (1392072847UL), (3057632678UL), (2838104933UL), (524666025UL), (3645751565UL), (2415020247UL), (252304106UL), (1295777418UL), (2130267479UL), (3636103610UL), (562446539UL), (80437039UL), (249830932UL), (3894066051UL), (2239638596UL), (3256181120UL), (117173223UL), (3217398876UL), (451287677UL), (3618957054UL), (4236303539UL), (1986849360UL), (1724964245UL), (498574915UL), (2164122779UL), (582902291UL), (288631030UL), (3101287841UL), (1853378UL), (2125490000UL), (3185055972UL), (824635664UL), (1128474163UL), (779476209UL), (124284956UL), (2488937128UL), (1231646648UL), (338597864UL), (2873055013UL), (1171872946UL), (3130489952UL), (708957725UL), (1557892392UL), (3970896645UL), (942009076UL), (4069926418UL), (2286522565UL), (2688433076UL), (388702536UL), (450999415UL), (2995728716UL), (2523361978UL), (157685189UL), (2648078738UL), (190663705UL), (486809970UL), (151444406UL), (979986388UL), (2941043524UL), (3841512738UL), (119077561UL), (3762447035UL), (2668625968UL), (2502730219UL), (9899015UL), (2455199230UL), (3532439568UL), (2699515741UL), (3846398898UL), (1405136244UL), (2870563334UL), (2242036665UL), (505633792UL), (863647562UL), (629585032UL), (958925512UL), (2618618630UL), (2067402799UL), (2109551995UL), (2294881622UL), (2603370255UL), (2461404010UL), (2688067120UL), (3436270690UL), (1637121394UL), (3761101432UL), (1076814097UL), (3206166733UL), (3268295908UL), (2313083096UL), (630164216UL), (12196305UL), (3007494680UL), (3292952769UL), (2040774258UL), (1420209005UL), (2609377752UL), (4047406592UL), (1515078401UL), (2005580991UL), (645585788UL), (865985176UL), (13805572UL), (2870727428UL), (2785498804UL), (333440916UL), (3735553268UL), (1928222740UL), (3726728164UL), (3405629071UL), (3869328595UL), (501640466UL), (2971423693UL), (1428788181UL), (4141962679UL), (41030733UL), (97561214UL), (4064095256UL), (1430796327UL), (1884066707UL), (1216957106UL), (3840122090UL), (985592757UL), (535070834UL), (3873372533UL), (175757671UL), (3856277268UL), (2159028553UL), (3436610906UL), (2950895946UL), (977680845UL), (3313441827UL), (345462057UL), (4044727083UL), (3035532020UL), (4253187882UL), (3468811573UL), (984166534UL), (813880136UL), (2483976489UL), (2790651795UL), (3733649754UL), (1080001158UL), (49280479UL), (917494217UL), (769620837UL), (3969566450UL), (3216598401UL), (3036738936UL), (3356773416UL), (1288706527UL), (2444128005UL), (3311472057UL), (2294957038UL), (3674654381UL), (537787012UL), (4166109669UL), (220045511UL), (2622722506UL), (1862365049UL), (2550353307UL), (2552992760UL), (3057632678UL), (2838104933UL), (524666025UL), (3645751565UL), (664164441UL), (252304106UL), (1295777418UL), (2130267479UL), (3636103610UL), (3227561061UL), (80437039UL), (249830932UL), (3894066051UL), (2239638596UL), (1071536668UL), (117173223UL), (3217398876UL), (451287677UL), (3618957054UL), (3066415327UL), (1986849360UL), (1724964245UL), (498574915UL), (2164122779UL), (3541914330UL), (288631030UL), (3101287841UL), (1853378UL), (2125490000UL), (2207189978UL), (824635664UL), (1128474163UL), (779476209UL), (124284956UL), (2117633906UL), (1231646648UL), (338597864UL), (2873055013UL), (1171872946UL), (891038594UL), (708957725UL), (1557892392UL), (3970896645UL), (942009076UL), (42952651UL), (2286522565UL), (2688433076UL), (388702536UL), (450999415UL), (2986730356UL), (2523361978UL), (157685189UL), (2648078738UL), (190663705UL), (3058267870UL), (151444406UL), (979986388UL), (2941043524UL), (3841512738UL), (1844101292UL), (3762447035UL), (2668625968UL), (2502730219UL), (9899015UL), (2599582093UL), (3532439568UL), (2699515741UL), (3846398898UL), (1405136244UL), (811001941UL), (2242036665UL), (505633792UL), (863647562UL), (629585032UL), (2722320710UL), (2618618630UL), (2067402799UL), (2109551995UL), (2294881622UL), (1820862072UL), (2461404010UL), (2688067120UL), (3436270690UL), (1637121394UL), (3642978005UL), (1076814097UL), (3206166733UL), (3268295908UL), (2313083096UL), (1900318020UL), (12196305UL), (3007494680UL), (3292952769UL), (2040774258UL), (520848705UL), (2609377752UL), (4047406592UL), (1515078401UL), (2005580991UL), (2530251392UL), (865985176UL), (13805572UL), (2870727428UL), (2785498804UL), (2878984912UL), (3735553268UL), (1928222740UL), (3726728164UL), (3405629071UL), (2717736455UL), (501640466UL), (2971423693UL), (1428788181UL), (4141962679UL), (3704214873UL), (97561214UL), (4064095256UL), (1430796327UL), (1884066707UL), (1721732760UL), (3840122090UL), (985592757UL), (535070834UL), (3873372533UL), (770732059UL), (3856277268UL), (2159028553UL), (3436610906UL), (2950895946UL), (33753949UL), (3313441827UL), (345462057UL), (4044727083UL), (3035532020UL), (4166506071UL), (2719759982UL), (1025532659UL), (3811323959UL), (713457907UL), (1577198020UL), (1719946821UL), (3963262337UL), (1719605451UL), (703663722UL), (1943886497UL), (2916371044UL), (1655862745UL), (109438187UL), (195575943UL), (2572727533UL), (2421761970UL), (1796539813UL), (2020762515UL), (1191344316UL), (2492085516UL), (2778033179UL), (4002316684UL), (1571080685UL), (1157340389UL), (3859584731UL), (3403766082UL), (2292873365UL), (2032258920UL), (1749575450UL), (848549431UL), (1893685820UL), (3510068298UL), (3308906564UL), (1193936308UL), (2561670234UL), (1043148718UL), (2611815896UL), (3832995202UL), (2436487998UL), (3377369330UL), (1174818128UL), (796514731UL), (1985886833UL), (88296218UL), (3032898657UL), (4101301361UL), (1486994584UL), (237792475UL), (1029399834UL), (1708840018UL), (2934039708UL), (1496674948UL), (4243234983UL), (3896751668UL), (1726119825UL), (2706068825UL), (1900013134UL), (2639641919UL), (1433377392UL), (2962655166UL), (1870954268UL), (3873603462UL), (1778084630UL), (2393311756UL), (4135022799UL), (3669603001UL), (811404758UL), (784379778UL), (4283689136UL), (405168660UL), (3873488622UL), (486946690UL), (347427153UL), (2139072474UL), (1143349522UL), (3780264455UL), (2938731842UL), (3864001470UL), (3497981827UL), (2703917008UL), (3222236962UL), (2604106616UL), (1281570367UL), (175937153UL), (433252852UL), (3232065906UL), (1111895932UL), (1027363895UL), (2435093744UL), (4232690481UL), (1940855209UL), (2844613991UL), (2095175619UL), (3479946852UL), (393314401UL), (3625733631UL), (1073779513UL), (2884072879UL), (4089630675UL), (3614205484UL), (1379809260UL), (3980251795UL), (3914556410UL), (3633356126UL), (3030204458UL), (1654727861UL), (3765074811UL), (959734060UL), (842315676UL), (353688341UL), (145655006UL), (1972100601UL), (1456042517UL), (3767579955UL), (4282066379UL), (498998655UL), (4123310742UL), (1801424182UL), (777808179UL), (655425670UL), (588715641UL), (2136252742UL), (1283378143UL), (639191135UL), (3132375783UL), (276649124UL), (2036776039UL), (3352396498UL), (3893441746UL), (3298373918UL), (1024178230UL), (2623051553UL), (1956117442UL), (2955394456UL), (2478945776UL), (3904945720UL), (769232312UL), (2168822980UL), (3715831945UL), (453874622UL), (3351529191UL), (3256151193UL), (808042625UL), (1700919462UL), (1008305347UL), (1518733915UL), (3194328753UL), (2228970756UL), (2604658038UL), (1376476152UL), (2147167203UL), (2585867511UL), (445717950UL), (3595016420UL), (3673970127UL), (3640614546UL), (494944945UL), (152508312UL), (4160926899UL)}, {(3225674336UL), (827428943UL), (2858523441UL), (2447266124UL), (1539223637UL), (2299756421UL), (776912458UL), (279091824UL), (1152725492UL), (3903457284UL), (3987010398UL), (3996115574UL), (839506039UL), (3052513014UL), (28550291UL), (2597814974UL), (2328446377UL), (1961600298UL), (3695276714UL), (1334932648UL), (1141381380UL), (3025370440UL), (997698792UL), (931473445UL), (3091440507UL), (820119215UL), (3586778616UL), (1993126242UL), (4252838072UL), (3033829531UL), (2120026924UL), (65722921UL), (746724958UL), (461423533UL), (1582298542UL), (1564918930UL), (3710935369UL), (419349792UL), (3914061713UL), (2279209938UL), (770031171UL), (2062767935UL), (3373230309UL), (3582372364UL), (2025682996UL), (3352859025UL), (1262632952UL), (3140021482UL), (501370035UL), (2554730117UL), (352450195UL), (1002557127UL), (2813224858UL), (2808406559UL), (290476252UL), (4216846311UL), (1187381982UL), (3131323304UL), (1094330039UL), (2646234280UL), (655242013UL), (1152156402UL), (3658526705UL), (3565043535UL), (693375321UL), (2120064836UL), (3726555752UL), (97387177UL), (546586686UL), (1013492636UL), (3874404446UL), (440995849UL), (1929251266UL), (95137166UL), (564969023UL), (3559119399UL), (3855477390UL), (2439885481UL), (2492213232UL), (2611214170UL), (2054191666UL), (2778642234UL), (2267416277UL), (2194315209UL), (1360165075UL), (1018128176UL), (2841084399UL), (3028189871UL), (3631770575UL), (541021087UL), (1091467742UL), (2743780329UL), (3566538467UL), (1277066122UL), (279582475UL), (2712119598UL), (3296319359UL), (4187226385UL), (1468994750UL), (2946664285UL), (2284913307UL), (740953233UL), (3351500634UL), (1791054313UL), (3355533193UL), (610062694UL), (3089981426UL), (3469441840UL), (3225672476UL), (2223653903UL), (2593994385UL), (548784340UL), (549871569UL), (865468702UL), (1593939385UL), (645229999UL), (1412095765UL), (2814231763UL), (3619658094UL), (877462820UL), (2198765077UL), (1845119421UL), (4144145546UL), (1356681209UL), (848707034UL), (4144513299UL), (3231318896UL), (3382035479UL), (693621410UL), (2821661683UL), (4236142563UL), (680649431UL), (3290999942UL), (200856634UL), (617766412UL), (3194332974UL), (4102392657UL), (2776797278UL), (2932808060UL), (793967937UL), (2149374605UL), (3736514467UL), (3547689148UL), (3744888920UL), (98278184UL), (1497045279UL), (2945126332UL), (4285864315UL), (2791068812UL), (1939995011UL), (56752862UL), (864909862UL), (625377571UL), (2266362085UL), (1050287398UL), (925722519UL), (1008109592UL), (2819528345UL), (3573068613UL), (1915083884UL), (1536828870UL), (3225674336UL), (827428943UL), (2858523441UL), (2447266124UL), (2186287936UL), (2299756421UL), (776912458UL), (279091824UL), (1152725492UL), (1271286102UL), (3987010398UL), (3996115574UL), (839506039UL), (3052513014UL), (1036957208UL), (2597814974UL), (2328446377UL), (1961600298UL), (3695276714UL), (2395157917UL), (1141381380UL), (3025370440UL), (997698792UL), (931473445UL), (2727078785UL), (820119215UL), (3586778616UL), (1993126242UL), (4252838072UL), (1171102868UL), (2120026924UL), (65722921UL), (746724958UL), (461423533UL), (2335086228UL), (1564918930UL), (3710935369UL), (419349792UL), (3914061713UL), (1136716661UL), (770031171UL), (2062767935UL), (3373230309UL), (3582372364UL), (4100328450UL), (3352859025UL), (1262632952UL), (3140021482UL), (501370035UL), (2579000299UL), (352450195UL), (1002557127UL), (2813224858UL), (2808406559UL), (2642514897UL), (4216846311UL), (1187381982UL), (3131323304UL), (1094330039UL), (3092488663UL), (655242013UL), (1152156402UL), (3658526705UL), (3565043535UL), (3280658482UL), (2120064836UL), (3726555752UL), (97387177UL), (546586686UL), (584864345UL), (3874404446UL), (440995849UL), (1929251266UL), (95137166UL), (823950215UL), (3559119399UL), (3855477390UL), (2439885481UL), (2492213232UL), (2297040376UL), (2054191666UL), (2778642234UL), (2267416277UL), (2194315209UL), (573807317UL), (1018128176UL), (2841084399UL), (3028189871UL), (3631770575UL), (2747338726UL), (1091467742UL), (2743780329UL), (3566538467UL), (1277066122UL), (1715139924UL), (2712119598UL), (3296319359UL), (4187226385UL), (1468994750UL), (3361368810UL), (2284913307UL), (740953233UL), (3351500634UL), (1791054313UL), (4290564545UL), (610062694UL), (3089981426UL), (3469441840UL), (3225672476UL), (1010959310UL), (2593994385UL), (548784340UL), (549871569UL), (865468702UL), (1825306744UL), (645229999UL), (1412095765UL), (2814231763UL), (3619658094UL), (3792219969UL), (2198765077UL), (1845119421UL), (4144145546UL), (1356681209UL), (268197516UL), (4144513299UL), (3231318896UL), (3382035479UL), (693621410UL), (2786831464UL), (4236142563UL), (680649431UL), (3290999942UL), (200856634UL), (3822069622UL), (3194332974UL), (4102392657UL), (2776797278UL), (2932808060UL), (525501162UL), (2149374605UL), (3736514467UL), (3547689148UL), (3744888920UL), (3219948462UL), (1497045279UL), (2945126332UL), (4285864315UL), (2791068812UL), (2678467476UL), (56752862UL), (864909862UL), (625377571UL), (2266362085UL), (2258093843UL), (925722519UL), (1008109592UL), (2819528345UL), (3573068613UL), (2743241289UL), (1536828870UL), (3225674336UL), (827428943UL), (2858523441UL), (992128922UL), (2186287936UL), (2299756421UL), (776912458UL), (279091824UL), (2108721702UL), (1271286102UL), (3987010398UL), (3996115574UL), (839506039UL), (1315622698UL), (1036957208UL), (2597814974UL), (2328446377UL), (1961600298UL), (3098343478UL), (2395157917UL), (1141381380UL), (3025370440UL), (997698792UL), (1317753106UL), (2727078785UL), (820119215UL), (3586778616UL), (1993126242UL), (2295599934UL), (1171102868UL), (2120026924UL), (65722921UL), (746724958UL), (3999203443UL), (2335086228UL), (1564918930UL), (3710935369UL), (419349792UL), (1662083910UL), (1136716661UL), (770031171UL), (2062767935UL), (3373230309UL), (3271761171UL), (4100328450UL), (3352859025UL), (1262632952UL), (3140021482UL), (3981040854UL), (2579000299UL), (352450195UL), (1002557127UL), (2813224858UL), (1064251076UL), (2642514897UL), (4216846311UL), (1187381982UL), (3131323304UL), (2077640887UL), (3092488663UL), (655242013UL), (1152156402UL), (3658526705UL), (548941006UL), (3280658482UL), (2120064836UL), (3726555752UL), (97387177UL), (4112878213UL), (584864345UL), (3874404446UL), (440995849UL), (1929251266UL), (227230803UL), (823950215UL), (3559119399UL), (3855477390UL), (2439885481UL), (610498128UL), (2297040376UL), (2054191666UL), (2778642234UL), (2267416277UL), (518192832UL), (573807317UL), (1018128176UL), (2841084399UL), (3028189871UL), (2512871059UL), (2747338726UL), (1091467742UL), (2743780329UL), (3566538467UL), (386661563UL), (1715139924UL), (2712119598UL), (3296319359UL), (4187226385UL), (2508754324UL), (3361368810UL), (2284913307UL), (740953233UL), (3351500634UL), (1296305541UL), (4290564545UL), (610062694UL), (3089981426UL), (3469441840UL), (148510865UL), (1010959310UL), (2593994385UL), (548784340UL), (549871569UL), (124676809UL), (1825306744UL), (645229999UL), (1412095765UL), (2814231763UL), (2540745278UL), (3792219969UL), (2198765077UL), (1845119421UL), (4144145546UL), (3966655401UL), (268197516UL), (4144513299UL), (3231318896UL), (3382035479UL), (1674022032UL), (2786831464UL), (4236142563UL), (680649431UL), (3290999942UL), (4065303704UL), (3822069622UL), (3194332974UL), (4102392657UL), (2776797278UL), (3735376922UL), (525501162UL), (2149374605UL), (3736514467UL), (3547689148UL), (2064870756UL), (3219948462UL), (1497045279UL), (2945126332UL), (4285864315UL), (2389978045UL), (2678467476UL), (56752862UL), (864909862UL), (625377571UL), (2308006661UL), (2258093843UL), (925722519UL), (1008109592UL), (2819528345UL), (2927186231UL), (2743241289UL), (1536828870UL), (3225674336UL), (827428943UL), (1583633720UL), (992128922UL), (2186287936UL), (2299756421UL), (776912458UL), (298217241UL), (2108721702UL), (1271286102UL), (3987010398UL), (3996115574UL), (1041730366UL), (1315622698UL), (1036957208UL), (2597814974UL), (2328446377UL), (1386688725UL), (3098343478UL), (2395157917UL), (1141381380UL), (3025370440UL), (2292273773UL), (1317753106UL), (2727078785UL), (820119215UL), (3586778616UL), (206996196UL), (2295599934UL), (1171102868UL), (2120026924UL), (65722921UL), (3271158508UL), (3999203443UL), (2335086228UL), (1564918930UL), (3710935369UL), (3305544914UL), (1662083910UL), (1136716661UL), (770031171UL), (2062767935UL), (4244195826UL), (3271761171UL), (4100328450UL), (3352859025UL), (1262632952UL), (3581040310UL), (3981040854UL), (2579000299UL), (352450195UL), (1002557127UL), (1789606594UL), (1064251076UL), (2642514897UL), (4216846311UL), (1187381982UL), (1519386238UL), (2077640887UL), (3092488663UL), (655242013UL), (1152156402UL), (3732146227UL), (548941006UL), (3280658482UL), (2120064836UL), (3726555752UL), (2631398817UL), (4112878213UL), (584864345UL), (3874404446UL), (440995849UL), (3541162446UL), (227230803UL), (823950215UL), (3559119399UL), (3855477390UL), (560704260UL), (610498128UL), (2297040376UL), (2054191666UL), (2778642234UL), (1614756373UL), (518192832UL), (573807317UL), (1018128176UL), (2841084399UL), (927011949UL), (2512871059UL), (2747338726UL), (1091467742UL), (2743780329UL), (566198434UL), (386661563UL), (1715139924UL), (2712119598UL), (3296319359UL), (520529825UL), (2508754324UL), (3361368810UL), (2284913307UL), (740953233UL), (2414584088UL), (1296305541UL), (4290564545UL), (610062694UL), (3089981426UL), (120496553UL), (148510865UL), (1010959310UL), (2593994385UL), (548784340UL), (3206664898UL), (124676809UL), (1825306744UL), (645229999UL), (1412095765UL), (821445348UL), (2540745278UL), (3792219969UL), (2198765077UL), (1845119421UL), (3434574619UL), (3966655401UL), (268197516UL), (4144513299UL), (3231318896UL), (3856935910UL), (1674022032UL), (2786831464UL), (4236142563UL), (680649431UL), (3331403374UL), (4065303704UL), (3822069622UL), (3194332974UL), (4102392657UL), (2194924932UL), (3735376922UL), (525501162UL), (2149374605UL), (3736514467UL), (2041458481UL), (2064870756UL), (3219948462UL), (1497045279UL), (2945126332UL), (3515890044UL), (2389978045UL), (2678467476UL), (56752862UL), (864909862UL), (1009125580UL), (2308006661UL), (2258093843UL), (925722519UL), (1008109592UL), (4166824654UL), (3399481064UL), (3848337172UL), (841675162UL), (2388734555UL), (3373081217UL), (1627287001UL), (1958651480UL), (1771323855UL), (2126620758UL), (3879967947UL), (1885140905UL), (806066092UL), (2168342987UL), (3778265278UL), (943582962UL), (3895768303UL), (337928214UL), (3677576461UL), (1884088203UL), (2629440785UL), (2357038005UL), (2362450760UL), (2080907681UL), (2644383608UL), (4153875040UL), (794977307UL), (2675637463UL), (2655426076UL), (3481699657UL), (2262369403UL), (1038608931UL), (4210267953UL), (2376694315UL), (2661705117UL), (3994997027UL), (2994346963UL), (4074343171UL), (833108024UL), (3562046155UL), (1113632369UL), (3087093963UL), (2115712884UL), (2778607581UL), (2702162487UL), (1347693590UL), (4271098334UL), (2746712394UL), (1629623802UL), (1932973152UL), (3077074108UL), (1338011180UL), (848785806UL), (1834095770UL), (4017238UL), (2661097500UL), (2935787683UL), (1214195119UL), (3099491937UL), (3868451396UL), (1063740008UL), (2768962809UL), (2554721244UL), (695479209UL), (2634119800UL), (1379839034UL), (2653377927UL), (921934002UL), (3586936843UL), (3035369677UL), (769283110UL), (2417935220UL), (3330084607UL), (2020519519UL), (2546176786UL), (1523223165UL), (3654065096UL), (1835059231UL), (2776263618UL), (3837173427UL), (3236141295UL), (1184415634UL), (157448610UL), (2474336972UL), (3313035876UL), (309195150UL), (2288837115UL), (548743307UL), (528342914UL), (1527562212UL), (554918643UL), (2739291918UL), (2630873849UL), (155419923UL), (226845272UL), (1343735931UL), (3106346884UL), (4177975386UL), (2515480406UL), (2049734808UL), (2802879609UL), (1805234272UL), (317920918UL), (745796250UL), (3816657414UL), (4198378080UL), (3057334192UL), (503016924UL), (2027816790UL), (579332504UL), (3037999504UL), (2857298788UL), (911046668UL), (1170775701UL), (2369720UL), (3364839261UL), (1462383461UL), (181600856UL), (1315241696UL), (2861043792UL), (3549404088UL), (3974245218UL), (4141518566UL), (1195336199UL), (2291064152UL), (3287203016UL), (3867432937UL), (2593766219UL), (2114273192UL), (3716228986UL), (410286941UL), (2497285113UL), (1338500439UL), (3748757692UL), (2315519304UL), (545570554UL), (1519868916UL), (679216320UL), (3264840479UL), (4083041163UL), (261878334UL), (2370312122UL), (1408058272UL), (1287635274UL), (3433241543UL), (3923613754UL), (2423502603UL), (3948993135UL), (1418484161UL), (230113502UL), (1766447938UL), (3101286974UL), (917358979UL), (2836128279UL), (2859079881UL), (3162688352UL), (2158281644UL), (154509481UL), (2409785274UL), (3096379437UL)}, {(2456954827UL), (2895978734UL), (1621803157UL), (230462381UL), (4046364119UL), (716597790UL), (2031510641UL), (2208319977UL), (1107910846UL), (3379950723UL), (3628284249UL), (1393263274UL), (3842378742UL), (768116962UL), (1782906996UL), (3022943801UL), (510040722UL), (2180373447UL), (1294989632UL), (1659724107UL), (953774117UL), (500296619UL), (2269873184UL), (3215368465UL), (3933601613UL), (2401810535UL), (3568992417UL), (617528376UL), (2437412983UL), (2921242388UL), (2311040363UL), (3695847323UL), (1609309841UL), (3222455492UL), (1108155620UL), (397599239UL), (3344183623UL), (1159383441UL), (81554651UL), (4223302962UL), (2812031899UL), (2613176831UL), (2967803832UL), (3560382993UL), (670173062UL), (2361031672UL), (1745444335UL), (2067906079UL), (3019908371UL), (2662226130UL), (2962440272UL), (3053411095UL), (92212044UL), (1041941495UL), (4116546365UL), (2094375399UL), (3992554702UL), (216246182UL), (2271736480UL), (1006434362UL), (4104644208UL), (2543874803UL), (1310440964UL), (1956002873UL), (1485192936UL), (3027546418UL), (448786402UL), (749040342UL), (406538664UL), (2522826782UL), (3681979470UL), (3941253886UL), (672615054UL), (3655479714UL), (392178376UL), (1619518340UL), (1639889010UL), (666186812UL), (4094569743UL), (2947917117UL), (3308938954UL), (1572886498UL), (1065510431UL), (2158389109UL), (1583642689UL), (1763046973UL), (3578310229UL), (4106948216UL), (58659757UL), (691952777UL), (3394715763UL), (3333944006UL), (3020203798UL), (3598064251UL), (3151881711UL), (2071056894UL), (1263790655UL), (4188233031UL), (4230429856UL), (3088041549UL), (3031631424UL), (3912597408UL), (1768734847UL), (1975027092UL), (3976493733UL), (2376551740UL), (1137628506UL), (535767974UL), (3105256806UL), (15427398UL), (2472341690UL), (685997424UL), (1374644561UL), (2446214061UL), (2844847931UL), (1058649390UL), (1581230869UL), (1725846082UL), (3062699842UL), (1116400547UL), (1095426642UL), (2940190462UL), (4276038488UL), (2091764667UL), (4074059985UL), (98163536UL), (4157153745UL), (32476821UL), (2354284775UL), (752663757UL), (2987293678UL), (1119786914UL), (3019442904UL), (111185876UL), (3569592548UL), (3991775183UL), (3161418733UL), (3973354577UL), (1650454973UL), (426129509UL), (3659038742UL), (1387393667UL), (543731583UL), (781586523UL), (917315276UL), (832142534UL), (3911092159UL), (325250500UL), (2735441676UL), (163564958UL), (1002098855UL), (337936437UL), (1869530240UL), (2233969733UL), (4108076124UL), (3255026725UL), (4072134049UL), (2083771067UL), (1559589006UL), (1845121907UL), (466036013UL), (2456954827UL), (2895978734UL), (1621803157UL), (230462381UL), (2022150409UL), (716597790UL), (2031510641UL), (2208319977UL), (1107910846UL), (1838834877UL), (3628284249UL), (1393263274UL), (3842378742UL), (768116962UL), (2303040715UL), (3022943801UL), (510040722UL), (2180373447UL), (1294989632UL), (3074858415UL), (953774117UL), (500296619UL), (2269873184UL), (3215368465UL), (3531413908UL), (2401810535UL), (3568992417UL), (617528376UL), (2437412983UL), (1730632320UL), (2311040363UL), (3695847323UL), (1609309841UL), (3222455492UL), (3189359980UL), (397599239UL), (3344183623UL), (1159383441UL), (81554651UL), (1933731121UL), (2812031899UL), (2613176831UL), (2967803832UL), (3560382993UL), (758113139UL), (2361031672UL), (1745444335UL), (2067906079UL), (3019908371UL), (3537991495UL), (2962440272UL), (3053411095UL), (92212044UL), (1041941495UL), (2653519981UL), (2094375399UL), (3992554702UL), (216246182UL), (2271736480UL), (695350220UL), (4104644208UL), (2543874803UL), (1310440964UL), (1956002873UL), (3373048130UL), (3027546418UL), (448786402UL), (749040342UL), (406538664UL), (4081844472UL), (3681979470UL), (3941253886UL), (672615054UL), (3655479714UL), (197563239UL), (1619518340UL), (1639889010UL), (666186812UL), (4094569743UL), (2518320719UL), (3308938954UL), (1572886498UL), (1065510431UL), (2158389109UL), (3320483696UL), (1763046973UL), (3578310229UL), (4106948216UL), (58659757UL), (3412172826UL), (3394715763UL), (3333944006UL), (3020203798UL), (3598064251UL), (1693717788UL), (2071056894UL), (1263790655UL), (4188233031UL), (4230429856UL), (2564478937UL), (3031631424UL), (3912597408UL), (1768734847UL), (1975027092UL), (3546175061UL), (2376551740UL), (1137628506UL), (535767974UL), (3105256806UL), (450760279UL), (2472341690UL), (685997424UL), (1374644561UL), (2446214061UL), (1873063065UL), (1058649390UL), (1581230869UL), (1725846082UL), (3062699842UL), (813496775UL), (1095426642UL), (2940190462UL), (4276038488UL), (2091764667UL), (3857233976UL), (98163536UL), (4157153745UL), (32476821UL), (2354284775UL), (3115605568UL), (2987293678UL), (1119786914UL), (3019442904UL), (111185876UL), (996447434UL), (3991775183UL), (3161418733UL), (3973354577UL), (1650454973UL), (1089784804UL), (3659038742UL), (1387393667UL), (543731583UL), (781586523UL), (2711412312UL), (832142534UL), (3911092159UL), (325250500UL), (2735441676UL), (3563501139UL), (1002098855UL), (337936437UL), (1869530240UL), (2233969733UL), (1156926454UL), (3255026725UL), (4072134049UL), (2083771067UL), (1559589006UL), (3832870112UL), (466036013UL), (2456954827UL), (2895978734UL), (1621803157UL), (2340808859UL), (2022150409UL), (716597790UL), (2031510641UL), (2208319977UL), (1823993818UL), (1838834877UL), (3628284249UL), (1393263274UL), (3842378742UL), (2489609764UL), (2303040715UL), (3022943801UL), (510040722UL), (2180373447UL), (4204167795UL), (3074858415UL), (953774117UL), (500296619UL), (2269873184UL), (2320314628UL), (3531413908UL), (2401810535UL), (3568992417UL), (617528376UL), (712451843UL), (1730632320UL), (2311040363UL), (3695847323UL), (1609309841UL), (3224192365UL), (3189359980UL), (397599239UL), (3344183623UL), (1159383441UL), (758272390UL), (1933731121UL), (2812031899UL), (2613176831UL), (2967803832UL), (3986798661UL), (758113139UL), (2361031672UL), (1745444335UL), (2067906079UL), (3814344052UL), (3537991495UL), (2962440272UL), (3053411095UL), (92212044UL), (817573506UL), (2653519981UL), (2094375399UL), (3992554702UL), (216246182UL), (2456924809UL), (695350220UL), (4104644208UL), (2543874803UL), (1310440964UL), (1151286621UL), (3373048130UL), (3027546418UL), (448786402UL), (749040342UL), (637572176UL), (4081844472UL), (3681979470UL), (3941253886UL), (672615054UL), (3038758846UL), (197563239UL), (1619518340UL), (1639889010UL), (666186812UL), (4254608071UL), (2518320719UL), (3308938954UL), (1572886498UL), (1065510431UL), (3100620860UL), (3320483696UL), (1763046973UL), (3578310229UL), (4106948216UL), (403923766UL), (3412172826UL), (3394715763UL), (3333944006UL), (3020203798UL), (1859724785UL), (1693717788UL), (2071056894UL), (1263790655UL), (4188233031UL), (2908736862UL), (2564478937UL), (3031631424UL), (3912597408UL), (1768734847UL), (966714666UL), (3546175061UL), (2376551740UL), (1137628506UL), (535767974UL), (1561255376UL), (450760279UL), (2472341690UL), (685997424UL), (1374644561UL), (3122124160UL), (1873063065UL), (1058649390UL), (1581230869UL), (1725846082UL), (3791666219UL), (813496775UL), (1095426642UL), (2940190462UL), (4276038488UL), (2802023399UL), (3857233976UL), (98163536UL), (4157153745UL), (32476821UL), (1640659450UL), (3115605568UL), (2987293678UL), (1119786914UL), (3019442904UL), (4278091706UL), (996447434UL), (3991775183UL), (3161418733UL), (3973354577UL), (3398421232UL), (1089784804UL), (3659038742UL), (1387393667UL), (543731583UL), (1694361696UL), (2711412312UL), (832142534UL), (3911092159UL), (325250500UL), (166035542UL), (3563501139UL), (1002098855UL), (337936437UL), (1869530240UL), (1306446339UL), (1156926454UL), (3255026725UL), (4072134049UL), (2083771067UL), (61899937UL), (3832870112UL), (466036013UL), (2456954827UL), (2895978734UL), (767569205UL), (2340808859UL), (2022150409UL), (716597790UL), (2031510641UL), (1690074863UL), (1823993818UL), (1838834877UL), (3628284249UL), (1393263274UL), (546011580UL), (2489609764UL), (2303040715UL), (3022943801UL), (510040722UL), (825252468UL), (4204167795UL), (3074858415UL), (953774117UL), (500296619UL), (1952242515UL), (2320314628UL), (3531413908UL), (2401810535UL), (3568992417UL), (4254767597UL), (712451843UL), (1730632320UL), (2311040363UL), (3695847323UL), (2393864919UL), (3224192365UL), (3189359980UL), (397599239UL), (3344183623UL), (1759399025UL), (758272390UL), (1933731121UL), (2812031899UL), (2613176831UL), (2809078783UL), (3986798661UL), (758113139UL), (2361031672UL), (1745444335UL), (1223235915UL), (3814344052UL), (3537991495UL), (2962440272UL), (3053411095UL), (3711100000UL), (817573506UL), (2653519981UL), (2094375399UL), (3992554702UL), (2987412942UL), (2456924809UL), (695350220UL), (4104644208UL), (2543874803UL), (2746231792UL), (1151286621UL), (3373048130UL), (3027546418UL), (448786402UL), (801157439UL), (637572176UL), (4081844472UL), (3681979470UL), (3941253886UL), (975875511UL), (3038758846UL), (197563239UL), (1619518340UL), (1639889010UL), (3137491209UL), (4254608071UL), (2518320719UL), (3308938954UL), (1572886498UL), (631178204UL), (3100620860UL), (3320483696UL), (1763046973UL), (3578310229UL), (3338308117UL), (403923766UL), (3412172826UL), (3394715763UL), (3333944006UL), (37220448UL), (1859724785UL), (1693717788UL), (2071056894UL), (1263790655UL), (228419012UL), (2908736862UL), (2564478937UL), (3031631424UL), (3912597408UL), (3862306448UL), (966714666UL), (3546175061UL), (2376551740UL), (1137628506UL), (1114919961UL), (1561255376UL), (450760279UL), (2472341690UL), (685997424UL), (2456661198UL), (3122124160UL), (1873063065UL), (1058649390UL), (1581230869UL), (2996925693UL), (3791666219UL), (813496775UL), (1095426642UL), (2940190462UL), (1642720015UL), (2802023399UL), (3857233976UL), (98163536UL), (4157153745UL), (1578965959UL), (1640659450UL), (3115605568UL), (2987293678UL), (1119786914UL), (1748408698UL), (4278091706UL), (996447434UL), (3991775183UL), (3161418733UL), (4123935663UL), (3398421232UL), (1089784804UL), (3659038742UL), (1387393667UL), (770706529UL), (1694361696UL), (2711412312UL), (832142534UL), (3911092159UL), (335435644UL), (166035542UL), (3563501139UL), (1002098855UL), (337936437UL), (2961857543UL), (1306446339UL), (1156926454UL), (3255026725UL), (4072134049UL), (1717290230UL), (1323146393UL), (2156340433UL), (2065716367UL), (2597996276UL), (3402032152UL), (779574284UL), (2369501052UL), (2316224856UL), (2720986136UL), (3016786025UL), (2916554213UL), (3476215746UL), (1132150235UL), (2619889920UL), (1279664685UL), (679206534UL), (4014394509UL), (3624968312UL), (1480455625UL), (725015758UL), (707677352UL), (3764409715UL), (1938306480UL), (2171474419UL), (3379664161UL), (684262379UL), (2142433069UL), (43407198UL), (1398850259UL), (2059135843UL), (240266749UL), (3788738212UL), (118513026UL), (820245055UL), (1152812311UL), (1398373423UL), (3188977726UL), (872620936UL), (2084649448UL), (807979538UL), (819501992UL), (615447916UL), (3393148006UL), (1765623964UL), (2514767257UL), (3711360450UL), (2941886951UL), (3739102698UL), (4022385962UL), (2306039667UL), (3321267290UL), (2179238310UL), (3192652502UL), (2118792870UL), (2571142127UL), (761776508UL), (873010906UL), (1609627751UL), (4260021041UL), (1747852747UL), (960771906UL), (2647903291UL), (77475681UL), (1282566533UL), (4022186916UL), (2681128032UL), (1554542462UL), (3181701944UL), (1168469070UL), (74236514UL), (2806532232UL), (3981048887UL), (1888842784UL), (2888607878UL), (1763028723UL), (701886756UL), (4124077776UL), (3738147505UL), (4066663138UL), (3816449863UL), (921061872UL), (2956972182UL), (3159072916UL), (3337110888UL), (3552795700UL), (2281281091UL), (671098116UL), (1282750020UL), (1008618197UL), (2363767765UL), (1812013295UL), (1854965999UL), (131027176UL), (666394000UL), (2062217824UL), (1763334218UL), (551118598UL), (1277961175UL), (3523893635UL), (1855881150UL), (2067903393UL), (2590963277UL), (3214508854UL), (1604911832UL), (1906690475UL), (389417851UL), (2711591984UL), (427723436UL), (1039703630UL), (639602991UL), (444779318UL), (2722002973UL), (3927985419UL), (1297446054UL), (298277450UL), (656022205UL), (134304205UL), (3847728042UL), (3339100423UL), (407022043UL), (1282443442UL), (3173884578UL), (1417906094UL), (2364502739UL), (2158353472UL), (2402775649UL), (1807696073UL), (2837535198UL), (705887737UL), (2129202688UL), (3853676283UL), (1388329793UL), (875153687UL), (2367465660UL), (2763058233UL), (2500632304UL), (2196920062UL), (491306883UL), (277753357UL), (3868415380UL), (324867643UL), (3654474955UL), (2569410351UL), (1128175417UL), (1853572398UL), (1133201743UL), (662085935UL), (2263514999UL), (3077768113UL), (3309730620UL), (3602394176UL), (3747458070UL), (188422725UL), (813812450UL), (1502276531UL), (3909138356UL), (2766044599UL), (3760928321UL), (573108836UL)}, {(1240264181UL), (1624064648UL), (3039823158UL), (2013985253UL), (1473300299UL), (2762062141UL), (3273470484UL), (1889745445UL), (2516996174UL), (3190376531UL), (996186898UL), (3893981177UL), (1268272590UL), (3226095713UL), (153038465UL), (2184871198UL), (3224094011UL), (2526518401UL), (1738960059UL), (1187560605UL), (4194384320UL), (2837011297UL), (3638232350UL), (367907454UL), (574009898UL), (1948901330UL), (60430044UL), (1569835584UL), (3160561697UL), (321792583UL), (3179087993UL), (1936928378UL), (412346905UL), (4020812489UL), (2603392174UL), (3499496781UL), (1499441233UL), (1062415256UL), (1347130973UL), (1823246794UL), (3411391800UL), (4253618056UL), (1507733072UL), (1605629518UL), (1503312494UL), (8035741UL), (4038904206UL), (2408545792UL), (969543501UL), (954847087UL), (956553276UL), (3096241999UL), (2566194741UL), (84678421UL), (3882676079UL), (2483934330UL), (3673546814UL), (2461422466UL), (620385599UL), (898325340UL), (2145883445UL), (3653728520UL), (3744850294UL), (2441124935UL), (904854507UL), (3216304963UL), (2373268568UL), (2354362010UL), (1245572787UL), (2894748714UL), (2889136188UL), (3716879184UL), (1766013949UL), (1305712667UL), (1227530310UL), (4051221847UL), (925440190UL), (1508686692UL), (1104647879UL), (1496666754UL), (3300504219UL), (127787091UL), (1528394637UL), (1739640835UL), (2475711496UL), (3792639955UL), (1450796299UL), (1634217367UL), (3289785095UL), (2149949989UL), (811612039UL), (1750779366UL), (1157474938UL), (514004414UL), (2264909096UL), (3730411668UL), (3308882513UL), (1834571716UL), (378288317UL), (3800023701UL), (763396788UL), (1597708317UL), (983953861UL), (94566098UL), (1548157668UL), (3755427117UL), (1646496505UL), (3748241449UL), (3439805936UL), (2321644449UL), (3805706235UL), (4220083901UL), (1069923823UL), (2984004391UL), (3824885361UL), (1967477766UL), (218978249UL), (348955028UL), (3188651823UL), (1008338679UL), (2331688720UL), (1562995454UL), (1837179689UL), (3033872688UL), (3007293665UL), (1759522678UL), (319754369UL), (2763991927UL), (1983149629UL), (1353197132UL), (1489552694UL), (2990539062UL), (3244609108UL), (669775440UL), (886127995UL), (1636688014UL), (1251222487UL), (2351883247UL), (3261502906UL), (3139614137UL), (3203790139UL), (2777648095UL), (3693390579UL), (3540514982UL), (3200191735UL), (750726325UL), (1014534145UL), (2091792357UL), (3931704474UL), (1383925867UL), (2038878506UL), (2247134268UL), (2840132188UL), (61137652UL), (1162051299UL), (399657268UL), (1682018695UL), (2640231287UL), (1733438115UL), (3611823506UL), (2077891037UL), (1240264181UL), (1624064648UL), (3039823158UL), (2013985253UL), (4188888201UL), (2762062141UL), (3273470484UL), (1889745445UL), (2516996174UL), (2621448256UL), (996186898UL), (3893981177UL), (1268272590UL), (3226095713UL), (952803645UL), (2184871198UL), (3224094011UL), (2526518401UL), (1738960059UL), (738368399UL), (4194384320UL), (2837011297UL), (3638232350UL), (367907454UL), (3772812520UL), (1948901330UL), (60430044UL), (1569835584UL), (3160561697UL), (1655622513UL), (3179087993UL), (1936928378UL), (412346905UL), (4020812489UL), (3754224996UL), (3499496781UL), (1499441233UL), (1062415256UL), (1347130973UL), (1167581269UL), (3411391800UL), (4253618056UL), (1507733072UL), (1605629518UL), (1867781671UL), (8035741UL), (4038904206UL), (2408545792UL), (969543501UL), (3189323143UL), (956553276UL), (3096241999UL), (2566194741UL), (84678421UL), (996778900UL), (2483934330UL), (3673546814UL), (2461422466UL), (620385599UL), (3129088144UL), (2145883445UL), (3653728520UL), (3744850294UL), (2441124935UL), (4230756652UL), (3216304963UL), (2373268568UL), (2354362010UL), (1245572787UL), (1600525238UL), (2889136188UL), (3716879184UL), (1766013949UL), (1305712667UL), (59908073UL), (4051221847UL), (925440190UL), (1508686692UL), (1104647879UL), (2931214731UL), (3300504219UL), (127787091UL), (1528394637UL), (1739640835UL), (62963469UL), (3792639955UL), (1450796299UL), (1634217367UL), (3289785095UL), (667987389UL), (811612039UL), (1750779366UL), (1157474938UL), (514004414UL), (2737193098UL), (3730411668UL), (3308882513UL), (1834571716UL), (378288317UL), (3452657469UL), (763396788UL), (1597708317UL), (983953861UL), (94566098UL), (2752347916UL), (3755427117UL), (1646496505UL), (3748241449UL), (3439805936UL), (4222757079UL), (3805706235UL), (4220083901UL), (1069923823UL), (2984004391UL), (3887639520UL), (1967477766UL), (218978249UL), (348955028UL), (3188651823UL), (4168456281UL), (2331688720UL), (1562995454UL), (1837179689UL), (3033872688UL), (814903833UL), (1759522678UL), (319754369UL), (2763991927UL), (1983149629UL), (3818528075UL), (1489552694UL), (2990539062UL), (3244609108UL), (669775440UL), (1004789460UL), (1636688014UL), (1251222487UL), (2351883247UL), (3261502906UL), (4143823654UL), (3203790139UL), (2777648095UL), (3693390579UL), (3540514982UL), (153421222UL), (750726325UL), (1014534145UL), (2091792357UL), (3931704474UL), (4018591985UL), (2038878506UL), (2247134268UL), (2840132188UL), (61137652UL), (1455028838UL), (399657268UL), (1682018695UL), (2640231287UL), (1733438115UL), (1853142849UL), (2077891037UL), (1240264181UL), (1624064648UL), (3039823158UL), (2235369076UL), (4188888201UL), (2762062141UL), (3273470484UL), (1889745445UL), (3627876603UL), (2621448256UL), (996186898UL), (3893981177UL), (1268272590UL), (2687846008UL), (952803645UL), (2184871198UL), (3224094011UL), (2526518401UL), (861379413UL), (738368399UL), (4194384320UL), (2837011297UL), (3638232350UL), (3753321702UL), (3772812520UL), (1948901330UL), (60430044UL), (1569835584UL), (581506474UL), (1655622513UL), (3179087993UL), (1936928378UL), (412346905UL), (2710043900UL), (3754224996UL), (3499496781UL), (1499441233UL), (1062415256UL), (2704745463UL), (1167581269UL), (3411391800UL), (4253618056UL), (1507733072UL), (4215403465UL), (1867781671UL), (8035741UL), (4038904206UL), (2408545792UL), (3252742933UL), (3189323143UL), (956553276UL), (3096241999UL), (2566194741UL), (1865159158UL), (996778900UL), (2483934330UL), (3673546814UL), (2461422466UL), (3123557619UL), (3129088144UL), (2145883445UL), (3653728520UL), (3744850294UL), (21840044UL), (4230756652UL), (3216304963UL), (2373268568UL), (2354362010UL), (1934462999UL), (1600525238UL), (2889136188UL), (3716879184UL), (1766013949UL), (2822794708UL), (59908073UL), (4051221847UL), (925440190UL), (1508686692UL), (2938291976UL), (2931214731UL), (3300504219UL), (127787091UL), (1528394637UL), (1914923136UL), (62963469UL), (3792639955UL), (1450796299UL), (1634217367UL), (257322213UL), (667987389UL), (811612039UL), (1750779366UL), (1157474938UL), (3083649350UL), (2737193098UL), (3730411668UL), (3308882513UL), (1834571716UL), (2778729422UL), (3452657469UL), (763396788UL), (1597708317UL), (983953861UL), (1337754195UL), (2752347916UL), (3755427117UL), (1646496505UL), (3748241449UL), (3942745717UL), (4222757079UL), (3805706235UL), (4220083901UL), (1069923823UL), (1314928500UL), (3887639520UL), (1967477766UL), (218978249UL), (348955028UL), (3425797638UL), (4168456281UL), (2331688720UL), (1562995454UL), (1837179689UL), (1814071277UL), (814903833UL), (1759522678UL), (319754369UL), (2763991927UL), (1079270448UL), (3818528075UL), (1489552694UL), (2990539062UL), (3244609108UL), (2944573315UL), (1004789460UL), (1636688014UL), (1251222487UL), (2351883247UL), (1356892540UL), (4143823654UL), (3203790139UL), (2777648095UL), (3693390579UL), (983917956UL), (153421222UL), (750726325UL), (1014534145UL), (2091792357UL), (296882400UL), (4018591985UL), (2038878506UL), (2247134268UL), (2840132188UL), (3508266160UL), (1455028838UL), (399657268UL), (1682018695UL), (2640231287UL), (2480988791UL), (1853142849UL), (2077891037UL), (1240264181UL), (1624064648UL), (1741738969UL), (2235369076UL), (4188888201UL), (2762062141UL), (3273470484UL), (3569498651UL), (3627876603UL), (2621448256UL), (996186898UL), (3893981177UL), (4026533880UL), (2687846008UL), (952803645UL), (2184871198UL), (3224094011UL), (1290870737UL), (861379413UL), (738368399UL), (4194384320UL), (2837011297UL), (3833099205UL), (3753321702UL), (3772812520UL), (1948901330UL), (60430044UL), (4131290878UL), (581506474UL), (1655622513UL), (3179087993UL), (1936928378UL), (2379952582UL), (2710043900UL), (3754224996UL), (3499496781UL), (1499441233UL), (593780490UL), (2704745463UL), (1167581269UL), (3411391800UL), (4253618056UL), (621889762UL), (4215403465UL), (1867781671UL), (8035741UL), (4038904206UL), (2045289976UL), (3252742933UL), (3189323143UL), (956553276UL), (3096241999UL), (2188329018UL), (1865159158UL), (996778900UL), (2483934330UL), (3673546814UL), (2717648418UL), (3123557619UL), (3129088144UL), (2145883445UL), (3653728520UL), (1528077261UL), (21840044UL), (4230756652UL), (3216304963UL), (2373268568UL), (803158556UL), (1934462999UL), (1600525238UL), (2889136188UL), (3716879184UL), (161827512UL), (2822794708UL), (59908073UL), (4051221847UL), (925440190UL), (3599942370UL), (2938291976UL), (2931214731UL), (3300504219UL), (127787091UL), (4082579845UL), (1914923136UL), (62963469UL), (3792639955UL), (1450796299UL), (2035446714UL), (257322213UL), (667987389UL), (811612039UL), (1750779366UL), (2344204796UL), (3083649350UL), (2737193098UL), (3730411668UL), (3308882513UL), (2765191583UL), (2778729422UL), (3452657469UL), (763396788UL), (1597708317UL), (1854746879UL), (1337754195UL), (2752347916UL), (3755427117UL), (1646496505UL), (4020292301UL), (3942745717UL), (4222757079UL), (3805706235UL), (4220083901UL), (1408262601UL), (1314928500UL), (3887639520UL), (1967477766UL), (218978249UL), (2173193841UL), (3425797638UL), (4168456281UL), (2331688720UL), (1562995454UL), (2835294077UL), (1814071277UL), (814903833UL), (1759522678UL), (319754369UL), (4048528178UL), (1079270448UL), (3818528075UL), (1489552694UL), (2990539062UL), (787253600UL), (2944573315UL), (1004789460UL), (1636688014UL), (1251222487UL), (3584515216UL), (1356892540UL), (4143823654UL), (3203790139UL), (2777648095UL), (1681621541UL), (983917956UL), (153421222UL), (750726325UL), (1014534145UL), (3951869055UL), (296882400UL), (4018591985UL), (2038878506UL), (2247134268UL), (1990726826UL), (3508266160UL), (1455028838UL), (399657268UL), (1682018695UL), (3360119279UL), (3151120565UL), (3011208718UL), (3694535943UL), (104562665UL), (2827623271UL), (249712003UL), (3413221355UL), (2347164236UL), (3227498378UL), (1805068659UL), (2118219686UL), (1568133029UL), (902801951UL), (175637375UL), (3812819970UL), (2162769758UL), (3845613089UL), (1795179477UL), (171494391UL), (3765826349UL), (1725798906UL), (345463508UL), (2481043227UL), (226569380UL), (3250095421UL), (1085199388UL), (3107594542UL), (4011388155UL), (1092611190UL), (3239339214UL), (4211849464UL), (4109911546UL), (81212018UL), (3691937144UL), (2477407396UL), (3320520455UL), (3070067913UL), (3808621884UL), (252917069UL), (3394860294UL), (1092442235UL), (2876536384UL), (1684120191UL), (431096075UL), (1701716708UL), (639881684UL), (3066183997UL), (3660504927UL), (2047274UL), (3424756424UL), (760932520UL), (2457976057UL), (1705265011UL), (2691137533UL), (3684307557UL), (3532744498UL), (2319162513UL), (1015534908UL), (1907173398UL), (2820698743UL), (1264455116UL), (2323788906UL), (3062240844UL), (1878550513UL), (1717353426UL), (1805673248UL), (62425157UL), (3662381032UL), (1964107209UL), (2559831960UL), (2117844804UL), (1228721677UL), (4240498866UL), (3212920337UL), (2338600301UL), (931588693UL), (2379606585UL), (3643222352UL), (4154645082UL), (1115847065UL), (2079427925UL), (2256943798UL), (2795103368UL), (2688136486UL), (1458062143UL), (1767222217UL), (635424385UL), (284062050UL), (1547163554UL), (3380046528UL), (1145758046UL), (3935976713UL), (4017430175UL), (3863367362UL), (3041367424UL), (303263160UL), (1465965696UL), (3757919837UL), (3083072836UL), (4024514094UL), (1381331179UL), (2393446325UL), (3256476469UL), (4066482738UL), (3437941107UL), (1051266504UL), (921764078UL), (2933305619UL), (1358097211UL), (4100978724UL), (2709958834UL), (574590507UL), (961767386UL), (21100886UL), (753746372UL), (4072632446UL), (733729367UL), (3060214669UL), (289165105UL), (426065754UL), (2036100240UL), (2172365757UL), (502856627UL), (84490194UL), (2630806596UL), (1206161269UL), (1009438449UL), (569581317UL), (1836947000UL), (3125379675UL), (1756936428UL), (3772694822UL), (3670337911UL), (3020603818UL), (2376224883UL), (2539951453UL), (2053395002UL), (3525193914UL), (1991480838UL), (3786481083UL), (873873707UL), (1693894743UL), (2450223985UL), (754878026UL), (1943356492UL), (401524329UL), (759931885UL), (611231307UL), (147950334UL), (599693701UL), (3358729722UL), (3649058074UL), (906423787UL), (1333804225UL), (875187278UL), (1115838692UL), (2476325972UL), (3307226674UL), (3539078918UL)}}; 
#line 81 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\curand_mrg32k3a.h"
static unsigned mrg32k3aM1[64][3][3]; 
#line 405
static unsigned mrg32k3aM1Host[64][3][3] = {{{0U, 1U, 0U}, {0U, 0U, 1U}, {4294156359U, 1403580U, 0U}}, {{0U, 0U, 1U}, {4294156359U, 1403580U, 0U}, {0U, 4294156359U, 1403580U}}, {{0U, 4294156359U, 1403580U}, {244671815U, 2941890554U, 4294156359U}, {149925673U, 489343630U, 2941890554U}}, {{1527363550U, 2758233149U, 1831234280U}, {4072640363U, 939574583U, 2758233149U}, {2064391165U, 3228066636U, 939574583U}}, {{736416029U, 2961816100U, 342112271U}, {387300998U, 1062452522U, 2961816100U}, {2955879160U, 340793741U, 1062452522U}}, {{1243502014U, 2218748291U, 1709215645U}, {2019641772U, 3847560959U, 2218748291U}, {3866010231U, 2305448679U, 3847560959U}}, {{3241775219U, 3453352062U, 3721871040U}, {4062454730U, 3015754U, 3453352062U}, {919711945U, 613405362U, 3015754U}}, {{1955221006U, 1414472808U, 1746037714U}, {3653507277U, 1644962013U, 1414472808U}, {3501544776U, 2336229602U, 1644962013U}}, {{1170096663U, 49135452U, 3441537107U}, {1857945175U, 1649398389U, 49135452U}, {333002869U, 3109147376U, 1649398389U}}, {{2299034194U, 2297111910U, 862649200U}, {1399961132U, 996706937U, 2297111910U}, {3439056503U, 1481993076U, 996706937U}}, {{4146310528U, 458782589U, 1007330283U}, {4241015765U, 3979619964U, 458782589U}, {553886495U, 2186897562U, 3979619964U}}, {{3630027893U, 2130448350U, 292773857U}, {1392525159U, 1299285967U, 2130448350U}, {2589171163U, 1217405758U, 1299285967U}}, {{892409263U, 1999175811U, 2979225418U}, {1996163538U, 2148702503U, 1999175811U}, {3922720782U, 103819730U, 2148702503U}}, {{1586003016U, 2114210471U, 3240775579U}, {2777288607U, 1400478398U, 2114210471U}, {3018215420U, 535326008U, 1400478398U}}, {{2188531273U, 1783231160U, 3576659343U}, {1908318389U, 379210133U, 1783231160U}, {554369329U, 250053591U, 379210133U}}, {{4022841636U, 3951951872U, 2143424240U}, {1046219306U, 1591992468U, 3951951872U}, {1510277444U, 381333958U, 1591992468U}}, {{2256493727U, 3715182130U, 642697923U}, {3615342722U, 3975008370U, 3715182130U}, {2405650329U, 754337639U, 3975008370U}}, {{1286664224U, 627406673U, 963516608U}, {1541344588U, 460768826U, 627406673U}, {1089892553U, 2717717970U, 460768826U}}, {{2956342842U, 3471097641U, 2353092905U}, {2996150472U, 420480221U, 3471097641U}, {2221681883U, 372736411U, 420480221U}}, {{420492906U, 153526651U, 3499730988U}, {2662640502U, 3278195133U, 153526651U}, {4086436419U, 2510762118U, 3278195133U}}, {{3310184147U, 2228376089U, 823220763U}, {3992771814U, 1693168425U, 2228376089U}, {2295790366U, 1401872772U, 1693168425U}}, {{2529428830U, 1497104068U, 4253248635U}, {3746310018U, 630867741U, 1497104068U}, {627043435U, 721725795U, 630867741U}}, {{2571072593U, 3039669025U, 1591031831U}, {526054481U, 661344445U, 3039669025U}, {4246010312U, 735391270U, 661344445U}}, {{1847312821U, 4042890210U, 4241772463U}, {606605705U, 2644799309U, 4042890210U}, {2658402822U, 1342278931U, 2644799309U}}, {{2409846784U, 1096138313U, 1416249993U}, {1501878241U, 138013862U, 1096138313U}, {1617749306U, 1975136163U, 138013862U}}, {{599453422U, 73950522U, 2965395603U}, {55354701U, 3855242202U, 73950522U}, {3981734504U, 3354399019U, 3855242202U}}, {{4271076381U, 813410089U, 3461955319U}, {1044920137U, 3029005516U, 813410089U}, {3501837362U, 3321539504U, 3029005516U}}, {{3058183515U, 941408572U, 1783998098U}, {1546486080U, 4116985007U, 941408572U}, {2247500745U, 1460625377U, 4116985007U}}, {{4216782514U, 3352801941U, 2315095646U}, {639029973U, 94451952U, 3352801941U}, {1242898773U, 3964593332U, 94451952U}}, {{2264905138U, 1926285644U, 1108147171U}, {2390706911U, 385258225U, 1926285644U}, {3569882325U, 3728744670U, 385258225U}}, {{270679073U, 1065683096U, 2992662885U}, {4196917281U, 2886425156U, 1065683096U}, {749134119U, 1849148167U, 2886425156U}}, {{35689930U, 1378151623U, 951629713U}, {673810920U, 948843427U, 1378151623U}, {3808868984U, 927013635U, 948843427U}}, {{1891490872U, 1130489594U, 3734864133U}, {1457450350U, 3362920032U, 1130489594U}, {638998846U, 1401175590U, 3362920032U}}, {{2254459023U, 2384691454U, 1730098031U}, {2844861718U, 1807491073U, 2384691454U}, {351423668U, 1570264155U, 1807491073U}}, {{3047429268U, 4245359555U, 2449575498U}, {1797081212U, 1237196477U, 4245359555U}, {143400628U, 3663731096U, 1237196477U}}, {{3313321106U, 4263819658U, 1047529624U}, {3719941673U, 3155049403U, 4263819658U}, {1981313839U, 4281524426U, 3155049403U}}, {{2005252417U, 3263186729U, 1535805957U}, {2951515865U, 1729281525U, 3263186729U}, {1141249417U, 2268963059U, 1729281525U}}, {{2367065164U, 83908466U, 4294308508U}, {1352516724U, 1416676049U, 83908466U}, {1040867745U, 1304732377U, 1416676049U}}, {{3214147257U, 1434230503U, 2944821434U}, {2753040912U, 4041536918U, 1434230503U}, {1317260239U, 338830578U, 4041536918U}}, {{300628476U, 2054743463U, 1499597869U}, {1762244284U, 1422043015U, 2054743463U}, {3581125669U, 1207561803U, 1422043015U}}, {{4171745404U, 4064983592U, 1934508265U}, {3049723261U, 1744636487U, 4064983592U}, {947753516U, 3952135907U, 1744636487U}}, {{1625369148U, 3577024659U, 2778677259U}, {1729967818U, 1049600974U, 3577024659U}, {2089137344U, 1569794605U, 1049600974U}}, {{1373068765U, 3958611830U, 569117280U}, {410042396U, 3551255470U, 3958611830U}, {869476379U, 1680625376U, 3551255470U}}, {{2108618602U, 2543645250U, 913717833U}, {2111984988U, 1012482542U, 2543645250U}, {2545745615U, 3141042890U, 1012482542U}}, {{1157293598U, 584852249U, 2272893205U}, {1631801979U, 3013855247U, 584852249U}, {3977310441U, 82049263U, 3013855247U}}, {{3580234334U, 3137526662U, 2403875621U}, {3580869206U, 3670086228U, 3137526662U}, {656744553U, 1764904195U, 3670086228U}}, {{2792496861U, 3634185196U, 3887031679U}, {3601823850U, 3464838365U, 3634185196U}, {3136165138U, 2842987937U, 3464838365U}}, {{1362557480U, 3230022138U, 4278720212U}, {3427386258U, 3848976950U, 3230022138U}, {2109817045U, 2441486578U, 3848976950U}}, {{1198519135U, 2007945401U, 3868481U}, {3335076429U, 2082683147U, 2007945401U}, {2341088247U, 888193479U, 2082683147U}}, {{3473925387U, 3193380570U, 565138859U}, {307060547U, 782210925U, 3193380570U}, {167617770U, 2180014252U, 782210925U}}, {{3811588895U, 3303532086U, 2766583698U}, {908630605U, 2665400165U, 3303532086U}, {2499994113U, 3316180851U, 2665400165U}}, {{4288926968U, 3033075037U, 1505732852U}, {1531633406U, 645804125U, 3033075037U}, {2942690261U, 2205365640U, 645804125U}}, {{3976196483U, 3651411522U, 1652430357U}, {1690405883U, 1294990760U, 3651411522U}, {209339647U, 3088484327U, 1294990760U}}, {{3171589548U, 2291131070U, 2093793287U}, {2997812074U, 4093879780U, 2291131070U}, {3255666800U, 858124816U, 4093879780U}}, {{4113016361U, 2999667479U, 3995043314U}, {1333973326U, 4007774239U, 2999667479U}, {3322921863U, 4278103786U, 4007774239U}}, {{925786347U, 2109676036U, 1879981040U}, {1701566570U, 1489702270U, 2109676036U}, {2719807628U, 158549605U, 1489702270U}}, {{2255405265U, 3460246357U, 218033453U}, {2135115875U, 359516994U, 3460246357U}, {3568862459U, 3114762683U, 359516994U}}, {{773148471U, 4117539411U, 3073622315U}, {3807175775U, 186466108U, 4117539411U}, {2842197411U, 651334129U, 186466108U}}, {{615242951U, 1475251263U, 3586439101U}, {1693917167U, 3058812486U, 1475251263U}, {568701600U, 1164226398U, 3058812486U}}, {{1632636204U, 15370275U, 2061555515U}, {4187505695U, 1741164221U, 15370275U}, {2882176274U, 3978412194U, 1741164221U}}, {{3446066703U, 344820524U, 74213775U}, {1008543583U, 2579620192U, 344820524U}, {3753911358U, 1538453821U, 2579620192U}}, {{3600859892U, 1269921024U, 4069458760U}, {2050939727U, 2222725697U, 1269921024U}, {3208347646U, 690898125U, 2222725697U}}, {{599407451U, 2806239788U, 1742216102U}, {975123999U, 764869161U, 2806239788U}, {2729710367U, 1845257036U, 764869161U}}, {{967330218U, 3464884028U, 3444447102U}, {580449578U, 1343714307U, 3464884028U}, {1775329096U, 4027221761U, 1343714307U}}}; 
#line 729 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\curand_mrg32k3a.h"
static unsigned mrg32k3aM2[64][3][3]; 
#line 1053
static unsigned mrg32k3aM2Host[64][3][3] = {{{0U, 1U, 0U}, {0U, 0U, 1U}, {4293573854U, 0U, 527612U}}, {{0U, 0U, 1U}, {4293573854U, 0U, 527612U}, {2706407399U, 4293573854U, 3497978192U}}, {{2706407399U, 4293573854U, 3497978192U}, {1431525864U, 2706407399U, 3281754271U}, {97673890U, 1431525864U, 1673476130U}}, {{3405842137U, 2680076935U, 893509979U}, {4035147174U, 3405842137U, 3280220074U}, {2623373296U, 4035147174U, 361718588U}}, {{818368950U, 3790774567U, 3542344109U}, {1817134745U, 818368950U, 3321940838U}, {3493477402U, 1817134745U, 2854655037U}}, {{498682467U, 2928649385U, 811441367U}, {1777037472U, 498682467U, 479207863U}, {3058260025U, 1777037472U, 1528225099U}}, {{3893311647U, 3140922085U, 64039185U}, {82107183U, 3893311647U, 2655465224U}, {1674879036U, 82107183U, 1089381262U}}, {{28639152U, 3496041927U, 2231910770U}, {3174683233U, 28639152U, 2828785870U}, {3681140872U, 3174683233U, 3910194649U}}, {{1463826069U, 300842059U, 3313769518U}, {1799677538U, 1463826069U, 3174861078U}, {1882279394U, 1799677538U, 3509975160U}}, {{2092194020U, 184076987U, 2202401252U}, {3103629604U, 2092194020U, 3409560232U}, {4257445059U, 3103629604U, 2390202783U}}, {{812917091U, 2574011276U, 4168802395U}, {209817750U, 812917091U, 2974870628U}, {3238802184U, 209817750U, 3692836406U}}, {{477309738U, 3314523413U, 3442242150U}, {2755731404U, 477309738U, 2782713347U}, {1606221490U, 2755731404U, 1033463096U}}, {{2155469603U, 3326516116U, 3843369786U}, {288604458U, 2155469603U, 571673571U}, {1501677614U, 288604458U, 2928213494U}}, {{2082469029U, 749754403U, 3963963316U}, {2764859700U, 2082469029U, 3576428059U}, {2840894706U, 2764859700U, 1782279859U}}, {{3760163766U, 1041986082U, 1799196192U}, {1022129134U, 3760163766U, 1332558840U}, {276873446U, 1022129134U, 3979423632U}}, {{1021313167U, 1312544548U, 1716381787U}, {3037868518U, 1021313167U, 199085085U}, {2582787611U, 3037868518U, 3539882179U}}, {{2569413030U, 1631336015U, 2594942403U}, {1030618503U, 2569413030U, 3467650326U}, {1998739584U, 1030618503U, 3174552073U}}, {{2334639309U, 3114094203U, 601680947U}, {2110199318U, 2334639309U, 678342865U}, {1649523168U, 2110199318U, 2154948056U}}, {{563657176U, 191330473U, 1641595774U}, {780563537U, 563657176U, 3029522338U}, {2037330914U, 780563537U, 2084602709U}}, {{3414769923U, 1968799026U, 2238126504U}, {832866376U, 3414769923U, 3754780168U}, {2165145850U, 832866376U, 1594768331U}}, {{1646861218U, 2317984620U, 2301581548U}, {2672536210U, 1646861218U, 359763062U}, {2391283983U, 2672536210U, 1885870777U}}, {{841254072U, 3765813448U, 1635365181U}, {2013240130U, 841254072U, 605925849U}, {3743932305U, 2013240130U, 400681955U}}, {{1930213004U, 2072952279U, 3077694794U}, {3579956569U, 1930213004U, 2478539210U}, {1960229502U, 3579956569U, 1455652656U}}, {{1097613522U, 1784540933U, 1194440107U}, {321747515U, 1097613522U, 1225209584U}, {74521379U, 321747515U, 4288531000U}}, {{143812745U, 3254530816U, 3514348856U}, {769295000U, 143812745U, 2468210728U}, {1927161272U, 769295000U, 522705580U}}, {{2692035063U, 2596905012U, 1643240704U}, {1103432342U, 2692035063U, 1446182108U}, {4161111774U, 1103432342U, 3076435551U}}, {{2375319030U, 1391532370U, 3742334018U}, {1202100604U, 2375319030U, 4098434768U}, {2327872488U, 1202100604U, 1471526950U}}, {{4269164791U, 2795313144U, 2507855960U}, {4245372460U, 4269164791U, 4094914553U}, {3873219634U, 4245372460U, 1473695507U}}, {{513890845U, 1208902926U, 2870530442U}, {1984873167U, 513890845U, 1257532340U}, {1212627640U, 1984873167U, 2354363842U}}, {{1848364568U, 1552116673U, 3496528455U}, {4160778291U, 1848364568U, 141769900U}, {3611019106U, 4160778291U, 596424080U}}, {{364070020U, 3520039729U, 837362349U}, {2544671570U, 364070020U, 2188646679U}, {163978331U, 2544671570U, 672947816U}}, {{1192700714U, 3968150021U, 298357363U}, {635565666U, 1192700714U, 2589432341U}, {2548654227U, 635565666U, 3531570992U}}, {{2709640529U, 676525399U, 875361870U}, {1315499519U, 2709640529U, 3842690720U}, {3300994644U, 1315499519U, 2446760804U}}, {{2742149264U, 1410604392U, 3032350755U}, {3774935330U, 2742149264U, 597633965U}, {4085935803U, 3774935330U, 3952463556U}}, {{3878579563U, 845297523U, 1721916511U}, {2077922420U, 3878579563U, 3651360351U}, {2177255734U, 2077922420U, 3791239282U}}, {{1570315355U, 4252790045U, 3522351060U}, {2324624266U, 1570315355U, 3594939336U}, {1725087354U, 2324624266U, 1338343327U}}, {{2305761589U, 381933244U, 3663579047U}, {1355307047U, 2305761589U, 313617972U}, {992174375U, 1355307047U, 3881593435U}}, {{1667857811U, 1564715297U, 2263851601U}, {3791771273U, 1667857811U, 4196134923U}, {3347975047U, 3791771273U, 615040705U}}, {{4093947334U, 3454015638U, 2815567716U}, {4261953004U, 4093947334U, 3973733876U}, {2979573134U, 4261953004U, 3757047667U}}, {{250120061U, 570149551U, 1513430926U}, {3178644752U, 250120061U, 1701869032U}, {4172515680U, 3178644752U, 4213855850U}}, {{4158106802U, 3062358456U, 1815738463U}, {1379176112U, 4158106802U, 3926509890U}, {2842564878U, 1379176112U, 2852219546U}}, {{931848746U, 256263523U, 2633569246U}, {3284646837U, 931848746U, 2567084715U}, {415258465U, 3284646837U, 2017565947U}}, {{1648005210U, 1032291296U, 3987397422U}, {1831496020U, 1648005210U, 2829448427U}, {1821082272U, 1831496020U, 2917140265U}}, {{4161327077U, 489964129U, 3870847744U}, {1669447863U, 4161327077U, 4292947198U}, {1522417114U, 1669447863U, 2652286672U}}, {{1270934555U, 3136631324U, 505612043U}, {2981474723U, 1270934555U, 2528619024U}, {625182639U, 2981474723U, 1008985039U}}, {{280996820U, 143706137U, 3013099060U}, {1797675893U, 280996820U, 3743985508U}, {1123794455U, 1797675893U, 2460119169U}}, {{919218027U, 4154920441U, 1125672685U}, {3933041881U, 919218027U, 474242849U}, {564891116U, 3933041881U, 2263904321U}}, {{2920112852U, 1965329198U, 1177141043U}, {2135250851U, 2920112852U, 969184056U}, {296035385U, 2135250851U, 4267827987U}}, {{1481142942U, 4120754772U, 1088557292U}, {265491023U, 1481142942U, 2860005744U}, {301796252U, 265491023U, 1935975979U}}, {{2111859033U, 2813610100U, 1001476468U}, {73849832U, 2111859033U, 3980799998U}, {3330206241U, 73849832U, 1933943506U}}, {{1781286360U, 3661231931U, 3509383709U}, {2753158871U, 1781286360U, 3119883109U}, {3576525143U, 2753158871U, 551079002U}}, {{1185024844U, 587779104U, 1004942725U}, {3763632860U, 1185024844U, 947424568U}, {3811666068U, 3763632860U, 2352253462U}}, {{1310227170U, 218138208U, 3172947233U}, {766129426U, 1310227170U, 1808643264U}, {2226659371U, 766129426U, 3853798112U}}, {{2230902378U, 4243560874U, 2491962392U}, {3836629116U, 2230902378U, 3637515403U}, {2846140932U, 3836629116U, 3083355464U}}, {{999448569U, 1464488480U, 3344426626U}, {946166795U, 999448569U, 340856814U}, {3686999436U, 946166795U, 3231079441U}}, {{1226155368U, 3477563770U, 550006884U}, {2378667355U, 1226155368U, 1493409040U}, {260364836U, 2378667355U, 4133888397U}}, {{1277901832U, 310796286U, 2818511068U}, {3088910653U, 1277901832U, 3303406025U}, {2507911914U, 3088910653U, 3712928074U}}, {{481918378U, 339570348U, 1728801469U}, {1623163429U, 481918378U, 2209094694U}, {3146982514U, 1623163429U, 508445538U}}, {{3138921230U, 2381863183U, 1992357430U}, {1024510915U, 3138921230U, 2122851650U}, {1453455184U, 1024510915U, 941946604U}}, {{2465372719U, 1391015357U, 3328905025U}, {1821933605U, 2465372719U, 1343489680U}, {3648970313U, 1821933605U, 1816599716U}}, {{118634664U, 3358712512U, 2492792220U}, {348833376U, 118634664U, 2495544591U}, {3235582254U, 348833376U, 4043157504U}}, {{2303067090U, 3371139074U, 1967771133U}, {598630070U, 2303067090U, 1819012637U}, {2049250561U, 598630070U, 4093044926U}}, {{3035321857U, 3971176093U, 226779704U}, {3361614254U, 3035321857U, 2807125404U}, {326640887U, 3361614254U, 3147308542U}}, {{1774298149U, 4179629947U, 3145006948U}, {1688753503U, 1774298149U, 94869516U}, {2327946901U, 1688753503U, 2786835219U}}}; 
#line 1380 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\curand_mrg32k3a.h"
static unsigned mrg32k3aM1SubSeq[56][3][3]; 
#line 1639
static unsigned mrg32k3aM1SubSeqHost[56][3][3] = {{{82758667U, 1871391091U, 4127413238U}, {3672831523U, 69195019U, 1871391091U}, {3672091415U, 3528743235U, 69195019U}}, {{3361372532U, 2329303404U, 99651939U}, {2008671965U, 2931758910U, 2329303404U}, {1113529483U, 2374097189U, 2931758910U}}, {{1831590873U, 1588259595U, 1314332382U}, {2385989343U, 2508077280U, 1588259595U}, {1787615788U, 661437137U, 2508077280U}}, {{2326052247U, 4183591379U, 4049009082U}, {2604529491U, 1453913233U, 4183591379U}, {2311925423U, 1805360390U, 1453913233U}}, {{3956367490U, 604461629U, 1257432102U}, {794711716U, 1155867175U, 604461629U}, {1777070788U, 429445904U, 1155867175U}}, {{1686241617U, 1257046062U, 1427609439U}, {490376081U, 387798431U, 1257046062U}, {235551485U, 1312672615U, 387798431U}}, {{2362447880U, 3445363024U, 3160262066U}, {2426867845U, 4194339866U, 3445363024U}, {1046144413U, 4177893681U, 4194339866U}}, {{4251175413U, 3559576374U, 3107663662U}, {697539134U, 1909472435U, 3559576374U}, {280754246U, 375835695U, 1909472435U}}, {{1099512970U, 712404985U, 1571467521U}, {546519870U, 1135109300U, 712404985U}, {3325312332U, 2352874613U, 1135109300U}}, {{1945425936U, 1653045514U, 381988982U}, {3733376326U, 414410025U, 1653045514U}, {1181583679U, 1185848176U, 414410025U}}, {{2526336124U, 3019211015U, 4215964965U}, {2683163472U, 4188191530U, 3019211015U}, {2964651598U, 293801056U, 4188191530U}}, {{1444052678U, 2253324417U, 39719589U}, {1880267534U, 2391992038U, 2253324417U}, {987740265U, 3691889508U, 2391992038U}}, {{166599066U, 2335494420U, 1232261118U}, {2227597731U, 2570600780U, 2335494420U}, {2700034538U, 3460843234U, 2570600780U}}, {{2511338360U, 1188954576U, 1251401239U}, {2511664974U, 292276982U, 1188954576U}, {697844082U, 3093661552U, 292276982U}}, {{3624650744U, 51993077U, 3540268009U}, {3252828938U, 3710319575U, 51993077U}, {2858628849U, 3910069381U, 3710319575U}}, {{655966702U, 754002362U, 1646581402U}, {1958331075U, 475572423U, 754002362U}, {3248619000U, 3228514800U, 475572423U}}, {{2760311307U, 4166372813U, 741596417U}, {2282679206U, 3090782630U, 4166372813U}, {3242468721U, 1628442374U, 3090782630U}}, {{4265279407U, 3532111852U, 1754687396U}, {500404765U, 2603727025U, 3532111852U}, {1428367254U, 3149485478U, 2603727025U}}, {{2873769531U, 2081104178U, 596284397U}, {4153800443U, 1261269623U, 2081104178U}, {3967600061U, 1830023157U, 1261269623U}}, {{278611533U, 2229285304U, 3443204327U}, {3110641420U, 77498444U, 2229285304U}, {3904070810U, 1070507239U, 77498444U}}, {{544639534U, 568528663U, 2177189807U}, {2475829068U, 121482268U, 568528663U}, {876978915U, 3116647617U, 121482268U}}, {{1547862823U, 2404658587U, 4191448009U}, {2158188804U, 2976916793U, 2404658587U}, {168571747U, 1691884706U, 2976916793U}}, {{3208213311U, 4212638780U, 3235157352U}, {671148556U, 2951207765U, 4212638780U}, {2075145516U, 2395485231U, 2951207765U}}, {{4080517315U, 2133433101U, 4043998180U}, {2044221845U, 867670560U, 2133433101U}, {834432416U, 3613001199U, 867670560U}}, {{4102885735U, 1319434267U, 2678775073U}, {740092580U, 607380970U, 1319434267U}, {2198271844U, 2610193258U, 607380970U}}, {{1165218048U, 1317690360U, 1189150958U}, {399240205U, 2507168618U, 1317690360U}, {2988334517U, 2687593413U, 2507168618U}}, {{1028861702U, 4082006648U, 338232527U}, {1888486946U, 1842080991U, 4082006648U}, {3903826366U, 3109935091U, 1842080991U}}, {{614134826U, 2261996505U, 2888080641U}, {710199359U, 2773979788U, 2261996505U}, {1144301620U, 2554371815U, 2773979788U}}, {{4056173823U, 1285620078U, 357420018U}, {2423072612U, 2309408315U, 1285620078U}, {1533175115U, 2760088020U, 2309408315U}}, {{4264130267U, 815015434U, 3142242173U}, {180649975U, 2500813569U, 815015434U}, {3378723563U, 829683767U, 2500813569U}}, {{4174387531U, 1030729435U, 2812778314U}, {1752988797U, 4044178729U, 1030729435U}, {467969301U, 554748104U, 4044178729U}}, {{1348429235U, 2928743274U, 3776082629U}, {3607529209U, 3069812185U, 2928743274U}, {2542432347U, 3208181168U, 3069812185U}}, {{4064845753U, 668285756U, 3816217625U}, {3713143233U, 1380634204U, 668285756U}, {3533700508U, 1192551435U, 1380634204U}}, {{1515684518U, 1706771705U, 728123349U}, {3174850469U, 2057456462U, 1706771705U}, {3410402985U, 2897339640U, 2057456462U}}, {{3082272717U, 531091457U, 1390161328U}, {3895139973U, 2171402857U, 531091457U}, {4030688141U, 3049703400U, 2171402857U}}, {{1241147206U, 3193892819U, 1244284192U}, {65180262U, 4065669017U, 3193892819U}, {1484817937U, 3661081858U, 4065669017U}}, {{1438760812U, 3491341751U, 3414470157U}, {2805337292U, 272266053U, 3491341751U}, {824109230U, 3202556526U, 272266053U}}, {{135412706U, 3627115412U, 2345042216U}, {1565169824U, 2166856449U, 3627115412U}, {1026946745U, 3467845248U, 2166856449U}}, {{1889419951U, 3256876154U, 1240505488U}, {1254783743U, 989966800U, 3256876154U}, {1995297400U, 3692472918U, 989966800U}}, {{3206226875U, 285700890U, 496017472U}, {2515316194U, 2129675196U, 285700890U}, {1863853990U, 2673457552U, 2129675196U}}, {{4163770641U, 255160418U, 772100749U}, {1987092456U, 3237660221U, 255160418U}, {1394381051U, 4216039401U, 3237660221U}}, {{2133915627U, 2713747584U, 627765421U}, {2300605925U, 35690583U, 2713747584U}, {2918902946U, 2638220304U, 35690583U}}, {{2587549655U, 998684270U, 4292130625U}, {1791772791U, 2820705344U, 998684270U}, {124590158U, 3831143549U, 2820705344U}}, {{978482299U, 3200877282U, 497605289U}, {3717741518U, 3737164414U, 3200877282U}, {4046686626U, 861393946U, 3737164414U}}, {{2665561897U, 300934584U, 3179822945U}, {893043137U, 2031413512U, 300934584U}, {3806926970U, 2413249929U, 2031413512U}}, {{1417581911U, 3071835354U, 2575196237U}, {4101127251U, 1375339216U, 3071835354U}, {847617977U, 3632503316U, 1375339216U}}, {{2747488994U, 3296604805U, 898095468U}, {1742777145U, 219265369U, 3296604805U}, {823714885U, 667779292U, 219265369U}}, {{2640209692U, 3040506537U, 3626115220U}, {161827078U, 852668118U, 3040506537U}, {3856381322U, 3360242076U, 852668118U}}, {{3734246393U, 4151553160U, 4177051283U}, {266522866U, 1731798531U, 4151553160U}, {632196679U, 3864297722U, 1731798531U}}, {{1694175127U, 1087914338U, 2384195794U}, {2764925057U, 505782858U, 1087914338U}, {3235634082U, 807915248U, 505782858U}}, {{2402749950U, 2353776151U, 75909174U}, {890570951U, 1752665661U, 2353776151U}, {3120241607U, 3862435696U, 1752665661U}}}; 
#line 1898 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\curand_mrg32k3a.h"
static unsigned mrg32k3aM2SubSeq[56][3][3]; 
#line 2157
static unsigned mrg32k3aM2SubSeqHost[56][3][3] = {{{1511326704U, 3759209742U, 1610795712U}, {4292754251U, 1511326704U, 3889917532U}, {3859662829U, 4292754251U, 3708466080U}}, {{972103006U, 964807713U, 878035866U}, {4248550197U, 972103006U, 1926628839U}, {1448629089U, 4248550197U, 3196114006U}}, {{3497384788U, 3174249442U, 3182508868U}, {3864816447U, 3497384788U, 3038399593U}, {2546884738U, 3864816447U, 2980208068U}}, {{1776335558U, 1189944887U, 4095757548U}, {3813600746U, 1776335558U, 789475914U}, {4119698302U, 3813600746U, 2145357457U}}, {{4022832294U, 4130146837U, 1942923647U}, {1675130777U, 4022832294U, 916677004U}, {4089786548U, 1675130777U, 116540512U}}, {{165639584U, 1205513289U, 2037453462U}, {1444587280U, 165639584U, 161923120U}, {2617085459U, 1444587280U, 2006913311U}}, {{3458099202U, 3062421748U, 4052486999U}, {1064270720U, 3458099202U, 230768332U}, {4056228301U, 1064270720U, 2219267779U}}, {{296275263U, 3452455838U, 2081462173U}, {1789143993U, 296275263U, 3463234943U}, {2097389984U, 1789143993U, 3447191459U}}, {{2828288883U, 3866690251U, 410553827U}, {1587005542U, 2828288883U, 1469478670U}, {2766486018U, 1587005542U, 2627363449U}}, {{3288027530U, 412403981U, 2458742268U}, {4267121909U, 3288027530U, 138566505U}, {420803572U, 4267121909U, 4094554844U}}, {{3844599430U, 2430152838U, 3283485436U}, {2486244684U, 3844599430U, 4252427633U}, {3560842909U, 2486244684U, 3960267499U}}, {{67933059U, 1294996291U, 2657888382U}, {513233413U, 67933059U, 1379805031U}, {44564058U, 513233413U, 86971645U}}, {{2732588524U, 1866530072U, 818237694U}, {2540507736U, 2732588524U, 3257104212U}, {1164400003U, 2540507736U, 1124501551U}}, {{4199239222U, 3155848463U, 2121388468U}, {1135554501U, 4199239222U, 2056492193U}, {3251740389U, 1135554501U, 2343537248U}}, {{550710036U, 500329021U, 1075236085U}, {356444753U, 550710036U, 1634965500U}, {58733535U, 356444753U, 1261552815U}}, {{708689546U, 419139045U, 2012018174U}, {706488081U, 708689546U, 1113760995U}, {585555005U, 706488081U, 76092226U}}, {{1293182265U, 3168473803U, 366230236U}, {3319068849U, 1293182265U, 1085259665U}, {1675229290U, 3319068849U, 3912300371U}}, {{3186089068U, 4188864734U, 1211781402U}, {756122322U, 3186089068U, 578262892U}, {2518961174U, 756122322U, 1658665581U}}, {{1347291439U, 2050427676U, 736113023U}, {4102191254U, 1347291439U, 878627148U}, {1293500383U, 4102191254U, 745646810U}}, {{4196897331U, 3436564969U, 1900167098U}, {3108887846U, 4196897331U, 2697923227U}, {1405263476U, 3108887846U, 314631094U}}, {{958383622U, 3694638688U, 1150087061U}, {3770009830U, 958383622U, 793326651U}, {533700213U, 3770009830U, 1513734026U}}, {{4119603367U, 3479396923U, 3534176399U}, {3765397477U, 4119603367U, 1458031003U}, {3380901602U, 3765397477U, 2684083587U}}, {{980937351U, 2094378936U, 448446028U}, {1421333909U, 980937351U, 3405683645U}, {323724368U, 1421333909U, 338680738U}}, {{2942968846U, 4293637338U, 3549906544U}, {527851489U, 2942968846U, 3852871282U}, {4209198933U, 527851489U, 1091268872U}}, {{1975983015U, 2092556693U, 611187071U}, {3982652344U, 1975983015U, 3001736262U}, {2055073597U, 3982652344U, 1875181995U}}, {{2970221269U, 880904779U, 2447465272U}, {2888742196U, 2970221269U, 3521651749U}, {3019977656U, 2888742196U, 2712717326U}}, {{419134859U, 2976059897U, 747864206U}, {4101695717U, 419134859U, 4264593116U}, {2657991148U, 4101695717U, 2542621682U}}, {{4043135299U, 1612983166U, 1149778656U}, {1267010518U, 4043135299U, 3496325546U}, {3094232897U, 1267010518U, 2949176293U}}, {{3949395794U, 1774568686U, 2123036003U}, {2182983404U, 3949395794U, 2355671350U}, {2820933455U, 2182983404U, 513963325U}}, {{3046911698U, 2576744453U, 2492729814U}, {4277866093U, 3046911698U, 3146977604U}, {2249371766U, 4277866093U, 3622293976U}}, {{1391529818U, 423458502U, 2587125255U}, {3536237833U, 1391529818U, 985347517U}, {157623850U, 3536237833U, 1015566287U}}, {{48329260U, 2599277669U, 821961664U}, {902187690U, 48329260U, 1716556555U}, {4019658974U, 902187690U, 950730510U}}, {{1318489562U, 1530977112U, 3713577419U}, {4270158447U, 1318489562U, 1654940598U}, {2679964938U, 4270158447U, 1337075195U}}, {{770600793U, 3249576224U, 3578552768U}, {2710443459U, 770600793U, 2990852339U}, {3098163705U, 2710443459U, 522138188U}}, {{2803285489U, 1922250286U, 3164022812U}, {477609731U, 2803285489U, 2140252218U}, {2252852611U, 477609731U, 3058519788U}}, {{208329741U, 3633562083U, 3548346666U}, {3892091460U, 208329741U, 516833304U}, {3440632377U, 3892091460U, 1638833719U}}, {{1816075033U, 3570111203U, 959489356U}, {3482051486U, 1816075033U, 861657108U}, {3119495098U, 3482051486U, 2576849579U}}, {{4240216888U, 2891584407U, 2102314945U}, {4064489450U, 4240216888U, 1427441010U}, {2441164913U, 4064489450U, 3558527186U}}, {{2918371295U, 65155283U, 3469357011U}, {3579773554U, 2918371295U, 3494391959U}, {3266584309U, 3579773554U, 3837485479U}}, {{2959420453U, 1365016881U, 4082486022U}, {236489012U, 2959420453U, 3802558529U}, {2687043642U, 236489012U, 2547086826U}}, {{4185325422U, 2762854843U, 3200044912U}, {3664909559U, 4185325422U, 3543921700U}, {4240262918U, 3664909559U, 2853212443U}}, {{2618500928U, 4237264351U, 1470046497U}, {1893990098U, 2618500928U, 2982567031U}, {3017062825U, 1893990098U, 3195556801U}}, {{1868464655U, 3407681142U, 1652841784U}, {1678569574U, 1868464655U, 4162480901U}, {1477016185U, 1678569574U, 4145063890U}}, {{792188465U, 4251338402U, 2219407026U}, {3840340879U, 792188465U, 3493367465U}, {2979958414U, 3840340879U, 2338974139U}}, {{478845700U, 2378167062U, 882114621U}, {1674533845U, 478845700U, 3572905305U}, {3571222880U, 1674533845U, 1242316901U}}, {{2636090868U, 1972761498U, 71690719U}, {1228103463U, 2636090868U, 1280685025U}, {3741735502U, 1228103463U, 994061750U}}, {{1156725261U, 1100755307U, 221922891U}, {2892200461U, 1156725261U, 1505716533U}, {2287613563U, 2892200461U, 3689457190U}}, {{1387244644U, 3135090808U, 1243609165U}, {1724967466U, 1387244644U, 3296353235U}, {1064364031U, 1724967466U, 2107521044U}}, {{2822471992U, 2034317853U, 2071407475U}, {170903528U, 2822471992U, 1322162887U}, {2524982332U, 170903528U, 2656231333U}}, {{3653936868U, 3893194049U, 2484299328U}, {1313746234U, 3653936868U, 1705346273U}, {1397638018U, 1313746234U, 4015529545U}}, {{4129760842U, 1671665759U, 1677834656U}, {3200005334U, 4129760842U, 3486207172U}, {2850728736U, 3200005334U, 3076201597U}}}; 
#line 2417 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\curand_mrg32k3a.h"
static unsigned mrg32k3aM1Seq[64][3][3]; 
#line 2741
static unsigned mrg32k3aM1SeqHost[64][3][3] = {{{2427906178U, 3580155704U, 949770784U}, {226153695U, 1230515664U, 3580155704U}, {1988835001U, 986791581U, 1230515664U}}, {{1774047142U, 3199155377U, 3106427820U}, {1901920839U, 4290900039U, 3199155377U}, {4178980191U, 280623348U, 4290900039U}}, {{3567524348U, 1934119675U, 3188270128U}, {2997767678U, 826363896U, 1934119675U}, {262952343U, 614326610U, 826363896U}}, {{1625613062U, 4288164505U, 2481284279U}, {4273461426U, 1177260757U, 4288164505U}, {305959988U, 4017252267U, 1177260757U}}, {{337929267U, 333342539U, 418300166U}, {2944208672U, 379097734U, 333342539U}, {2084056909U, 3625475947U, 379097734U}}, {{1189899255U, 1307754719U, 1214919992U}, {3736721708U, 3514751918U, 1307754719U}, {732435953U, 2021244538U, 3514751918U}}, {{4089172695U, 1533534334U, 525643282U}, {1497577018U, 1335684482U, 1533534334U}, {2079007086U, 3977541427U, 1335684482U}}, {{3075256652U, 2762754934U, 3846844247U}, {3057872364U, 3274545167U, 2762754934U}, {4028573983U, 938934351U, 3274545167U}}, {{2597859300U, 2880151048U, 2523330453U}, {1121709186U, 175667448U, 2880151048U}, {4182510911U, 1723133625U, 175667448U}}, {{484148868U, 1404283933U, 2982534313U}, {3736767353U, 3179865161U, 1404283933U}, {391120388U, 3758716888U, 3179865161U}}, {{2138867468U, 1128973399U, 2133702321U}, {1613561693U, 3622350766U, 1128973399U}, {1500151924U, 3759983985U, 3622350766U}}, {{3027706760U, 3786576552U, 2698781808U}, {2810527099U, 90498489U, 3786576552U}, {4220122612U, 1855245979U, 90498489U}}, {{3739389517U, 1110440720U, 917457922U}, {2163873618U, 3707591763U, 1110440720U}, {2667061910U, 2533383962U, 3707591763U}}, {{1545226000U, 1812182123U, 3693349190U}, {3422065122U, 3291428549U, 1812182123U}, {1193168720U, 2072837757U, 3291428549U}}, {{3230096243U, 2131723358U, 3262178024U}, {2882890127U, 4088518247U, 2131723358U}, {3991553306U, 1282224087U, 4088518247U}}, {{301207261U, 1722796810U, 3697719854U}, {3350228505U, 3410986694U, 1722796810U}, {3684514720U, 2846958957U, 3410986694U}}, {{1532963114U, 4236235786U, 3871128158U}, {3540401964U, 1285250577U, 4236235786U}, {1105070646U, 2764245175U, 1285250577U}}, {{210906218U, 3068599594U, 3034582784U}, {340633153U, 4004365908U, 3068599594U}, {4238928187U, 2299166464U, 4004365908U}}, {{2274701639U, 3955606166U, 3081246407U}, {3199954992U, 3948054919U, 3955606166U}, {2399101442U, 3438340286U, 3948054919U}}, {{504137100U, 1182303684U, 201533985U}, {4188299661U, 3042453580U, 1182303684U}, {2578519273U, 2674782930U, 3042453580U}}, {{1382964588U, 2578452047U, 3140440866U}, {261861891U, 1076783073U, 2578452047U}, {1634588989U, 164438428U, 1076783073U}}, {{2529186343U, 526867394U, 3102803247U}, {2687252475U, 2908898908U, 526867394U}, {1213100579U, 86050422U, 2908898908U}}, {{2690118316U, 538108523U, 790337895U}, {4193870709U, 1053552056U, 538108523U}, {1635227281U, 4002399925U, 1053552056U}}, {{2123712957U, 4205383007U, 1812304090U}, {1095349745U, 166243972U, 4205383007U}, {428569070U, 2128782357U, 166243972U}}, {{1330151766U, 3569679412U, 4107175982U}, {3808641551U, 3621125056U, 3569679412U}, {4262164578U, 1927692878U, 3621125056U}}, {{3606295184U, 2442739556U, 3894922338U}, {1629626641U, 2729678535U, 2442739556U}, {3379124758U, 4279360935U, 2729678535U}}, {{1052092278U, 4249024666U, 919210106U}, {3253349463U, 3629539480U, 4249024666U}, {852514024U, 4025926501U, 3629539480U}}, {{12394571U, 1252747620U, 2133571953U}, {4227339509U, 3197545170U, 1252747620U}, {1884529704U, 1976203831U, 3197545170U}}, {{2986331025U, 2671019282U, 2847338542U}, {3173738401U, 3542657885U, 2671019282U}, {745203060U, 1546667401U, 3542657885U}}, {{2613012997U, 2311336951U, 2911336433U}, {1493974713U, 92565032U, 2311336951U}, {2786645250U, 257065974U, 92565032U}}, {{3424925004U, 2776053372U, 2204068573U}, {3770626858U, 2509257810U, 2776053372U}, {2979919489U, 1146336783U, 2509257810U}}, {{1474384834U, 827894421U, 515339473U}, {1373055755U, 1949809417U, 827894421U}, {3088339524U, 1194193824U, 1949809417U}}, {{1825805135U, 1289872272U, 3700877161U}, {3433422861U, 4062509844U, 1289872272U}, {3019008744U, 2060641859U, 4062509844U}}, {{3842597153U, 4253338264U, 3424495942U}, {698444416U, 60268595U, 4253338264U}, {4096010585U, 47309624U, 60268595U}}, {{2662288323U, 2043518992U, 1593435980U}, {1330201507U, 3618850300U, 2043518992U}, {2538793204U, 271787962U, 3618850300U}}, {{741020448U, 997594656U, 2398808739U}, {1160477043U, 1522130854U, 997594656U}, {3036916315U, 2847712653U, 1522130854U}}, {{2654964886U, 1889728930U, 53329096U}, {2042322941U, 1621136330U, 1889728930U}, {1553642730U, 784545882U, 1621136330U}}, {{1715219514U, 2831829177U, 929124824U}, {997274536U, 404228189U, 2831829177U}, {1386575385U, 4107238699U, 404228189U}}, {{3928131551U, 2912523524U, 1840499723U}, {4216003022U, 2970489088U, 2912523524U}, {1158689953U, 1425511081U, 2970489088U}}, {{2807004452U, 2510299562U, 271603006U}, {2505735035U, 2370490899U, 2510299562U}, {10873814U, 2450376936U, 2370490899U}}, {{2000734342U, 1113679064U, 2502160539U}, {1475266926U, 2787925323U, 1113679064U}, {1475797635U, 3044470744U, 2787925323U}}, {{1457157056U, 1252556678U, 3073232607U}, {1926798761U, 3639907189U, 1252556678U}, {2067740348U, 2256217204U, 3639907189U}}, {{3740999688U, 1035400458U, 3162437311U}, {4126312242U, 686702830U, 1035400458U}, {1699805291U, 667792040U, 686702830U}}, {{2422495016U, 3203768688U, 1858240466U}, {848719394U, 4092709154U, 3203768688U}, {659945473U, 1863075174U, 4092709154U}}, {{246817944U, 871751352U, 2834051003U}, {3976202597U, 3721214025U, 871751352U}, {783929942U, 745295675U, 3721214025U}}, {{3811740424U, 3603608092U, 2365398362U}, {3826150877U, 2906557036U, 3603608092U}, {2300510686U, 966815948U, 2906557036U}}, {{2816329160U, 18201123U, 3367710570U}, {437309679U, 2220769388U, 18201123U}, {1346863388U, 705296543U, 2220769388U}}, {{3310028953U, 1662315499U, 132645114U}, {2572908401U, 3105849797U, 1662315499U}, {1937586849U, 1735620028U, 3105849797U}}, {{461386353U, 1359675853U, 3599822966U}, {106675209U, 2044154050U, 1359675853U}, {1787730088U, 1149892630U, 2044154050U}}, {{3303902397U, 345146034U, 1417149696U}, {2231869247U, 1116882637U, 345146034U}, {1846832385U, 79626976U, 1116882637U}}, {{2765049417U, 3117782790U, 1805260159U}, {3796182890U, 1101141726U, 3117782790U}, {224270120U, 1004001443U, 1101141726U}}, {{89118668U, 2494198515U, 1356989069U}, {2490435731U, 997151755U, 2494198515U}, {1175528637U, 3444341166U, 997151755U}}, {{2340639019U, 510225634U, 286119182U}, {2045217287U, 1194574818U, 510225634U}, {2662281592U, 1728500627U, 1194574818U}}, {{210787847U, 1189120688U, 2848040407U}, {1087786165U, 2343328484U, 1189120688U}, {3465141330U, 2893041005U, 2343328484U}}, {{3438170226U, 3236285682U, 962036916U}, {2873263091U, 215280489U, 3236285682U}, {730413847U, 1474823842U, 215280489U}}, {{1566461658U, 133010024U, 2886695328U}, {2835827516U, 653809404U, 133010024U}, {3082882924U, 3710942807U, 653809404U}}, {{4201558916U, 1263786956U, 326001602U}, {762846463U, 621546357U, 1263786956U}, {2697142404U, 1156650856U, 621546357U}}, {{2655768102U, 2339029465U, 2430211448U}, {2669906627U, 403962847U, 2339029465U}, {1483118807U, 639660658U, 403962847U}}, {{3508595200U, 4228486662U, 754946994U}, {1913148390U, 3500531602U, 4228486662U}, {24637U, 3773159052U, 3500531602U}}, {{4024866227U, 1143874914U, 3205058469U}, {2970344133U, 2873927273U, 1143874914U}, {2167114735U, 4095476435U, 2873927273U}}, {{1479401095U, 2958366486U, 3027708794U}, {2704486034U, 3574053987U, 2958366486U}, {3630964515U, 1276667706U, 3574053987U}}, {{2035927380U, 1363628533U, 818363998U}, {3023327955U, 3968427114U, 1363628533U}, {1284825950U, 2871663372U, 3968427114U}}, {{3827747418U, 3897287251U, 4106993377U}, {1527779946U, 3221052941U, 3897287251U}, {4178727866U, 4281160673U, 3221052941U}}, {{1174358892U, 2835476193U, 959978619U}, {850076464U, 3774782533U, 2835476193U}, {3880910680U, 3237990203U, 3774782533U}}}; 
#line 3065 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\curand_mrg32k3a.h"
static unsigned mrg32k3aM2Seq[64][3][3]; 
#line 3389
static unsigned mrg32k3aM2SeqHost[64][3][3] = {{{1464411153U, 277697599U, 1610723613U}, {32183930U, 1464411153U, 1022607788U}, {2824425944U, 32183930U, 2093834863U}}, {{3492361727U, 1027004383U, 3167429889U}, {3674905362U, 3492361727U, 3572939265U}, {4270409313U, 3674905362U, 698814233U}}, {{880482061U, 205175925U, 4070445105U}, {2208329119U, 880482061U, 1933248566U}, {3741227945U, 2208329119U, 3962062826U}}, {{4184605179U, 1189429800U, 567967482U}, {107217966U, 4184605179U, 784865788U}, {549462420U, 107217966U, 3134382704U}}, {{2732536445U, 1231107067U, 3374588386U}, {409954030U, 2732536445U, 1044831206U}, {3398162498U, 409954030U, 3505648581U}}, {{2169560691U, 1076348534U, 637306236U}, {3704346564U, 2169560691U, 293694496U}, {632453145U, 3704346564U, 1609425246U}}, {{372115891U, 3928812480U, 2830541169U}, {3056527841U, 372115891U, 1924239834U}, {3044937468U, 3056527841U, 547142630U}}, {{1660852083U, 3635660815U, 1389092450U}, {1025573319U, 1660852083U, 3276803366U}, {4036331438U, 1025573319U, 4092197741U}}, {{1360732901U, 2887812973U, 4101068693U}, {52572783U, 1360732901U, 112458461U}, {2636566855U, 52572783U, 1136777988U}}, {{3455696508U, 536919193U, 3978804036U}, {3094157668U, 3455696508U, 3821833900U}, {2278849016U, 3094157668U, 2531965909U}}, {{2125991744U, 890897326U, 3790557569U}, {1433592392U, 2125991744U, 3671109604U}, {808215503U, 1433592392U, 2446306581U}}, {{3524411799U, 932865240U, 1838275365U}, {1789634890U, 3524411799U, 4130736474U}, {2252266098U, 1789634890U, 3048775967U}}, {{1773339925U, 948403862U, 1999624391U}, {983864203U, 1773339925U, 3734776305U}, {314407045U, 983864203U, 2648614071U}}, {{321802921U, 1099164995U, 2112167358U}, {3760936985U, 321802921U, 1003573324U}, {3758858458U, 3760936985U, 4014658840U}}, {{2196438580U, 805386227U, 4266375092U}, {4124675351U, 2196438580U, 2527961345U}, {94452540U, 4124675351U, 2825656399U}}, {{66735368U, 2228005807U, 4186703168U}, {2624855312U, 66735368U, 2708679078U}, {4098470056U, 2624855312U, 1773862183U}}, {{3072642883U, 2746897053U, 2690305546U}, {1105106652U, 3072642883U, 4047666135U}, {2862886282U, 1105106652U, 3597347398U}}, {{232906611U, 3873338256U, 4051554873U}, {3027413363U, 232906611U, 3159432673U}, {3872967050U, 3027413363U, 987156327U}}, {{1160686753U, 3676603152U, 1635979789U}, {1447386846U, 1160686753U, 2670438424U}, {816212890U, 1447386846U, 4288868534U}}, {{3825238244U, 1445162354U, 2362389441U}, {3440193648U, 3825238244U, 3520937545U}, {2652790808U, 3440193648U, 405299994U}}, {{1984094858U, 532165989U, 2027397575U}, {1455977136U, 1984094858U, 2433255524U}, {1039994763U, 1455977136U, 2069333087U}}, {{3680843319U, 2332949611U, 3516795313U}, {2033851810U, 3680843319U, 3843367307U}, {3686294589U, 2033851810U, 3912995069U}}, {{967423689U, 1724183394U, 635932799U}, {641380480U, 967423689U, 2145297779U}, {1723000412U, 641380480U, 455633660U}}, {{2130938335U, 1534972306U, 2511584766U}, {273828453U, 2130938335U, 3112810093U}, {4084843716U, 273828453U, 1399334152U}}, {{168278549U, 541167592U, 190177712U}, {403188859U, 168278549U, 2092073970U}, {58789558U, 403188859U, 2777887189U}}, {{634843389U, 4082275720U, 2092828966U}, {351187677U, 634843389U, 1312056270U}, {3347241070U, 351187677U, 2417192332U}}, {{443276110U, 1113643788U, 271102234U}, {3083745876U, 443276110U, 3370743767U}, {4200577503U, 3083745876U, 3298601960U}}, {{3533393557U, 764977733U, 3400275098U}, {144639933U, 3533393557U, 2646475951U}, {77963866U, 144639933U, 3794766611U}}, {{4064854722U, 1198665008U, 2872196602U}, {3274748603U, 4064854722U, 4164637970U}, {4238693771U, 3274748603U, 1981721347U}}, {{2279220396U, 2355957139U, 1417574285U}, {885864931U, 2279220396U, 1344421653U}, {1895527787U, 885864931U, 3726919367U}}, {{2898100178U, 2427331008U, 348923199U}, {3175444953U, 2898100178U, 4290541487U}, {246118669U, 3175444953U, 3410622769U}}, {{284442065U, 4064194676U, 2295560707U}, {4182706556U, 284442065U, 3696899246U}, {1201342255U, 4182706556U, 1145356382U}}, {{656615546U, 442908965U, 3724738272U}, {1624967553U, 656615546U, 798014134U}, {1157949454U, 1624967553U, 496247378U}}, {{265689579U, 675056541U, 3009083380U}, {3820679930U, 265689579U, 2961990151U}, {562287964U, 3820679930U, 1853486796U}}, {{1675739167U, 2319843005U, 760605578U}, {4161492847U, 1675739167U, 226142150U}, {1017447188U, 4161492847U, 3431158427U}}, {{1759873736U, 2334568602U, 2154570180U}, {1812793060U, 1759873736U, 2111094408U}, {1168460586U, 1812793060U, 2495653141U}}, {{317621194U, 868104288U, 664971082U}, {2340275074U, 317621194U, 2168960688U}, {725706104U, 2340275074U, 3532023115U}}, {{3926931954U, 2907684453U, 615601328U}, {1132340715U, 3926931954U, 676995757U}, {1154819290U, 1132340715U, 1662727700U}}, {{3921782078U, 3376494857U, 2969567377U}, {475345024U, 3921782078U, 4206379953U}, {1795936544U, 475345024U, 934679595U}}, {{3119292228U, 741613041U, 2083352304U}, {1047885963U, 3119292228U, 1581078542U}, {1065969969U, 1047885963U, 661718928U}}, {{3643472111U, 2870554228U, 3995474529U}, {3804264051U, 3643472111U, 1366457944U}, {1246805564U, 3804264051U, 993186530U}}, {{796711791U, 3878204845U, 3160293932U}, {255632881U, 796711791U, 3778927111U}, {3472564181U, 255632881U, 388382377U}}, {{1776984101U, 1742284034U, 3449763933U}, {1349354417U, 1776984101U, 1264780832U}, {715722511U, 1349354417U, 1213319489U}}, {{4261866865U, 1914382786U, 201872335U}, {614207188U, 4261866865U, 1853554849U}, {2046042882U, 614207188U, 3193186353U}}, {{2210205512U, 2847073169U, 3324925707U}, {1251969297U, 2210205512U, 3491451503U}, {470400916U, 1251969297U, 2184392547U}}, {{1523590942U, 2391111113U, 68341529U}, {295466806U, 1523590942U, 4143310876U}, {3527253079U, 295466806U, 4059123142U}}, {{1406902110U, 3735012720U, 1774518130U}, {1814959027U, 1406902110U, 1560544267U}, {346472965U, 1814959027U, 964257199U}}, {{855309653U, 4208503105U, 1518467541U}, {2025248418U, 855309653U, 4148125749U}, {1349947330U, 2025248418U, 1168504873U}}, {{2375338156U, 3629519168U, 409696181U}, {252401654U, 2375338156U, 3992097193U}, {2793725401U, 252401654U, 1350184085U}}, {{873141039U, 3885583138U, 361604799U}, {3554143374U, 873141039U, 894746180U}, {1919765327U, 3554143374U, 876210854U}}, {{246368794U, 1703793169U, 2317362874U}, {2300930144U, 246368794U, 2560214589U}, {2016163623U, 2300930144U, 1504276775U}}, {{1574610921U, 2147546631U, 4103450226U}, {107416526U, 1574610921U, 1773803959U}, {1402542742U, 107416526U, 550063800U}}, {{363388665U, 592194244U, 1746615522U}, {2637234667U, 363388665U, 4031408742U}, {2895130475U, 2637234667U, 296510335U}}, {{3997368560U, 3047771871U, 3178383826U}, {1160174754U, 3997368560U, 4027094919U}, {1234984211U, 1160174754U, 4226264344U}}, {{3303179301U, 4243968063U, 3235964171U}, {1776841674U, 3303179301U, 2867287469U}, {1500495759U, 1776841674U, 1708226553U}}, {{1482944153U, 3192311574U, 354466071U}, {3932773012U, 1482944153U, 389193591U}, {3350181058U, 3932773012U, 3398059015U}}, {{640968550U, 3226860971U, 922372912U}, {1254989667U, 640968550U, 2383815228U}, {2027371896U, 1254989667U, 2925300409U}}, {{2313146046U, 3910187183U, 1377591475U}, {1689291784U, 2313146046U, 4255405993U}, {1650609719U, 1689291784U, 1897624297U}}, {{3656310954U, 882924050U, 2702189958U}, {3185020283U, 3656310954U, 1923190496U}, {2449669145U, 3185020283U, 4235849984U}}, {{377232416U, 1498446142U, 4229103619U}, {3926377906U, 377232416U, 600268838U}, {511317726U, 3926377906U, 216160452U}}, {{1969399344U, 3273966859U, 4220943579U}, {3952111894U, 1969399344U, 575096961U}, {3815277103U, 3952111894U, 792177412U}}, {{2957238169U, 1410010554U, 1523740068U}, {3949237584U, 2957238169U, 74149658U}, {2564746147U, 3949237584U, 2557663578U}}, {{3377318569U, 1927835240U, 2556102508U}, {3022040116U, 3377318569U, 2549406364U}, {2387074241U, 3022040116U, 1477293711U}}, {{257306870U, 1748489735U, 547809226U}, {3708493374U, 257306870U, 4183546362U}, {4435502U, 3708493374U, 1607696753U}}}; 
#line 138 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\curand_mtgp32.h"
struct mtgp32_params_fast; 
#line 140
struct mtgp32_params_fast { 
#line 141
int mexp; 
#line 142
int pos; 
#line 143
int sh1; 
#line 144
int sh2; 
#line 145
unsigned tbl[16]; 
#line 146
unsigned tmp_tbl[16]; 
#line 147
unsigned flt_tmp_tbl[16]; 
#line 149
unsigned mask; 
#line 150
unsigned char poly_sha1[21]; 
#line 151
}; 
#line 154
typedef mtgp32_params_fast mtgp32_params_fast_t; 
#line 160
struct mtgp32_kernel_params; 
#line 161
struct mtgp32_kernel_params { 
#line 162
unsigned pos_tbl[200]; 
#line 163
unsigned param_tbl[200][16]; 
#line 164
unsigned temper_tbl[200][16]; 
#line 165
unsigned single_temper_tbl[200][16]; 
#line 166
unsigned sh1_tbl[200]; 
#line 167
unsigned sh2_tbl[200]; 
#line 168
unsigned mask[1]; 
#line 169
}; 
#line 172
typedef mtgp32_kernel_params mtgp32_kernel_params_t; 
#line 191
struct curandStateMtgp32; 
#line 193
struct curandStateMtgp32 { 
#line 194
unsigned s[1024]; 
#line 195
int offset; 
#line 196
int pIdx; 
#line 197
mtgp32_kernel_params_t *k; 
#line 198
}; 
#line 204
typedef curandStateMtgp32 curandStateMtgp32_t; 
#line 123 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\curand_mtgp32_kernel.h"
extern "C" const dim3 __device_builtin_variable_blockDim; 
#line 124
extern "C" const uint3 __device_builtin_variable_threadIdx; 
#line 137 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\curand_mtgp32_kernel.h"
static __forceinline unsigned para_rec(mtgp32_kernel_params_t *k, unsigned X1, unsigned X2, unsigned Y, int bid) {int volatile ___ = 1;(void)k;(void)X1;(void)X2;(void)Y;(void)bid;::exit(___);}
#if 0
#line 137
{ 
#line 138
unsigned X = (X1 & ((k->mask)[0])) ^ X2; 
#line 139
unsigned MAT; 
#line 141
X ^= (X << ((k->sh1_tbl)[bid])); 
#line 142
Y = (X ^ (Y >> ((k->sh2_tbl)[bid]))); 
#line 143
MAT = (((k->param_tbl)[bid])[Y & (15)]); 
#line 144
return Y ^ MAT; 
#line 145
} 
#endif
#line 155 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\curand_mtgp32_kernel.h"
static __forceinline unsigned temper(mtgp32_kernel_params_t *k, unsigned V, unsigned T, int bid) {int volatile ___ = 1;(void)k;(void)V;(void)T;(void)bid;::exit(___);}
#if 0
#line 155
{ 
#line 156
unsigned MAT; 
#line 158
T ^= (T >> 16); 
#line 159
T ^= (T >> 8); 
#line 160
MAT = (((k->temper_tbl)[bid])[T & (15)]); 
#line 161
return V ^ MAT; 
#line 162
} 
#endif
#line 174 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\curand_mtgp32_kernel.h"
static __forceinline unsigned temper_single(mtgp32_kernel_params_t *k, unsigned V, unsigned T, int bid) {int volatile ___ = 1;(void)k;(void)V;(void)T;(void)bid;::exit(___);}
#if 0
#line 174
{ 
#line 175
unsigned MAT; 
#line 176
unsigned r; 
#line 178
T ^= (T >> 16); 
#line 179
T ^= (T >> 8); 
#line 180
MAT = (((k->single_temper_tbl)[bid])[T & (15)]); 
#line 181
r = ((V >> 9) ^ MAT); 
#line 182
return r; 
#line 183
} 
#endif
#line 196 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\curand_mtgp32_kernel.h"
static __forceinline unsigned curand(curandStateMtgp32_t *state) {int volatile ___ = 1;(void)state;::exit(___);}
#if 0
#line 197
{ 
#line 198
unsigned t; 
#line 199
unsigned d; 
#line 200
int pos = ((state->k)->pos_tbl)[state->pIdx]; 
#line 201
unsigned r; 
#line 202
unsigned o; 
#line 204
d = (((__device_builtin_variable_blockDim.z) * (__device_builtin_variable_blockDim.y)) * (__device_builtin_variable_blockDim.x)); 
#line 206
t = (((((__device_builtin_variable_blockDim.z) * (__device_builtin_variable_blockDim.y)) * (__device_builtin_variable_threadIdx.z)) + ((__device_builtin_variable_blockDim.x) * (__device_builtin_variable_threadIdx.y))) + (__device_builtin_variable_threadIdx.x)); 
#line 207
r = para_rec(state->k, (state->s)[(t + (state->offset)) & (1023)], (state->s)[((t + (state->offset)) + (1)) & (1023)], (state->s)[((t + (state->offset)) + pos) & (1023)], state->pIdx); 
#line 212
((state->s)[((t + (state->offset)) + (351)) & (1023)]) = r; 
#line 213
o = temper(state->k, r, (state->s)[(((t + (state->offset)) + pos) - (1)) & (1023)], state->pIdx); 
#line 216
{ } 
#line 219 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\curand_mtgp32_kernel.h"
if (t == (0)) 
#line 220
{ 
#line 221
(state->offset) = (((state->offset) + d) & (1023)); 
#line 222
}  
#line 223
{ } 
#line 226 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\curand_mtgp32_kernel.h"
return o; 
#line 228
} 
#endif
#line 247 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\curand_mtgp32_kernel.h"
static __forceinline unsigned curand_mtgp32_specific(curandStateMtgp32_t *state, unsigned char index, unsigned char n) {int volatile ___ = 1;(void)state;(void)index;(void)n;::exit(___);}
#if 0
#line 248
{ 
#line 249
unsigned t; 
#line 250
int pos = ((state->k)->pos_tbl)[state->pIdx]; 
#line 251
unsigned r; 
#line 252
unsigned o; 
#line 254
t = index; 
#line 255
r = para_rec(state->k, (state->s)[(t + (state->offset)) & (1023)], (state->s)[((t + (state->offset)) + (1)) & (1023)], (state->s)[((t + (state->offset)) + pos) & (1023)], state->pIdx); 
#line 260
((state->s)[((t + (state->offset)) + (351)) & (1023)]) = r; 
#line 261
o = temper(state->k, r, (state->s)[(((t + (state->offset)) + pos) - (1)) & (1023)], state->pIdx); 
#line 264
{ } 
#line 267 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\curand_mtgp32_kernel.h"
if (index == 0) 
#line 268
{ 
#line 269
(state->offset) = (((state->offset) + n) & 1023); 
#line 270
}  
#line 271
{ } 
#line 274 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\curand_mtgp32_kernel.h"
return o; 
#line 275
} 
#endif
#line 291 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\curand_mtgp32_kernel.h"
static __forceinline float curand_mtgp32_single(curandStateMtgp32_t *state) {int volatile ___ = 1;(void)state;::exit(___);}
#if 0
#line 292
{ 
#line 293
unsigned t; 
#line 294
unsigned d; 
#line 295
int pos = ((state->k)->pos_tbl)[state->pIdx]; 
#line 296
unsigned r; 
#line 297
unsigned o_u; 
#line 298
float o_f; 
#line 301
t = ((__device_builtin_variable_blockDim.z) * (__device_builtin_variable_blockDim.y)); 
#line 302
d = (t * (__device_builtin_variable_blockDim.x)); 
#line 304
t += (__device_builtin_variable_threadIdx.x); 
#line 305
r = para_rec(state->k, (state->s)[(t + (state->offset)) & (1023)], (state->s)[((t + (state->offset)) + (1)) & (1023)], (state->s)[((t + (state->offset)) + pos) & (1023)], state->pIdx); 
#line 310
((state->s)[t]) = r; 
#line 311
o_u = temper_single(state->k, r, (state->s)[(((t + (state->offset)) + pos) - (1)) & (1023)], state->pIdx); 
#line 314
{ } 
#line 317 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\curand_mtgp32_kernel.h"
if ((__device_builtin_variable_threadIdx.x) == (0)) 
#line 318
{ 
#line 319
(state->offset) = (((state->offset) + d) & (1023)); 
#line 320
}  
#line 321
{ } 
#line 324 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\curand_mtgp32_kernel.h"
memcpy(&o_f, &o_u, sizeof o_u); 
#line 325
return o_f; 
#line 326
} 
#endif
#line 352 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\curand_mtgp32_kernel.h"
static __forceinline float curand_mtgp32_single_specific(curandStateMtgp32_t *state, unsigned char index, unsigned char n) {int volatile ___ = 1;(void)state;(void)index;(void)n;::exit(___);}
#if 0
#line 353
{ 
#line 354
unsigned t; 
#line 355
int pos = ((state->k)->pos_tbl)[state->pIdx]; 
#line 356
unsigned r; 
#line 357
unsigned o_u; 
#line 358
float o_f; 
#line 360
t = index; 
#line 361
r = para_rec(state->k, (state->s)[(t + (state->offset)) & (1023)], (state->s)[((t + (state->offset)) + (1)) & (1023)], (state->s)[((t + (state->offset)) + pos) & (1023)], state->pIdx); 
#line 366
((state->s)[t]) = r; 
#line 367
o_u = temper_single(state->k, r, (state->s)[(((t + (state->offset)) + pos) - (1)) & (1023)], state->pIdx); 
#line 370
{ } 
#line 373 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\curand_mtgp32_kernel.h"
if ((__device_builtin_variable_threadIdx.x) == (0)) 
#line 374
{ 
#line 375
(state->offset) = (((state->offset) + n) & 1023); 
#line 376
}  
#line 377
{ } 
#line 380 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\curand_mtgp32_kernel.h"
memcpy(&o_f, &o_u, sizeof o_u); 
#line 381
return o_f; 
#line 382
} 
#endif
#line 93 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\curand_philox4x32_x.h"
struct curandStatePhilox4_32_10 { 
#line 94
uint4 ctr; 
#line 95
uint4 output; 
#line 96
uint2 key; 
#line 97
unsigned STATE; 
#line 98
int boxmuller_flag; 
#line 99
int boxmuller_flag_double; 
#line 100
float boxmuller_extra; 
#line 101
double boxmuller_extra_double; 
#line 102
}; 
#line 104
typedef curandStatePhilox4_32_10 curandStatePhilox4_32_10_t; 
#line 107
static __forceinline void Philox_State_Incr(curandStatePhilox4_32_10_t *s, unsigned __int64 n) {int volatile ___ = 1;(void)s;(void)n;::exit(___);}
#if 0
#line 108
{ 
#line 109
unsigned nlo = (unsigned)n; 
#line 110
unsigned nhi = (unsigned)(n >> 32); 
#line 112
((s->ctr).x) += nlo; 
#line 113
if (((s->ctr).x) < nlo) { 
#line 114
nhi++; }  
#line 116
((s->ctr).y) += nhi; 
#line 117
if (nhi <= ((s->ctr).y)) { 
#line 118
return; }  
#line 119
if (++((s->ctr).z)) { return; }  
#line 120
++((s->ctr).w); 
#line 121
} 
#endif
#line 123 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\curand_philox4x32_x.h"
static __forceinline void Philox_State_Incr_hi(curandStatePhilox4_32_10_t *s, unsigned __int64 n) {int volatile ___ = 1;(void)s;(void)n;::exit(___);}
#if 0
#line 124
{ 
#line 125
unsigned nlo = (unsigned)n; 
#line 126
unsigned nhi = (unsigned)(n >> 32); 
#line 128
((s->ctr).z) += nlo; 
#line 129
if (((s->ctr).z) < nlo) { 
#line 130
nhi++; }  
#line 132
((s->ctr).w) += nhi; 
#line 133
} 
#endif
#line 137 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\curand_philox4x32_x.h"
static __forceinline void Philox_State_Incr(curandStatePhilox4_32_10_t *s) {int volatile ___ = 1;(void)s;::exit(___);}
#if 0
#line 138
{ 
#line 139
if (++((s->ctr).x)) { return; }  
#line 140
if (++((s->ctr).y)) { return; }  
#line 141
if (++((s->ctr).z)) { return; }  
#line 142
++((s->ctr).w); 
#line 143
} 
#endif
#line 146 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\curand_philox4x32_x.h"
static __forceinline unsigned mulhilo32(unsigned a, unsigned b, unsigned *hip) {int volatile ___ = 1;(void)a;(void)b;(void)hip;::exit(___);}
#if 0
#line 147
{ 
#line 148
{ unsigned __int64 product = ((unsigned __int64)a) * ((unsigned __int64)b); (*hip) = (product >> 32); return (unsigned)product; } 
#line 158 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\curand_philox4x32_x.h"
} 
#endif
#line 160 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\curand_philox4x32_x.h"
static __forceinline uint4 _philox4x32round(uint4 ctr, uint2 key) {int volatile ___ = 1;(void)ctr;(void)key;::exit(___);}
#if 0
#line 161
{ 
#line 162
unsigned hi0; 
#line 163
unsigned hi1; 
#line 164
unsigned lo0 = mulhilo32(3528531795U, ctr.x, &hi0); 
#line 165
unsigned lo1 = mulhilo32(3449720151U, ctr.z, &hi1); 
#line 167
uint4 ret = {(hi1 ^ (ctr.y)) ^ (key.x), lo1, (hi0 ^ (ctr.w)) ^ (key.y), lo0}; 
#line 168
return ret; 
#line 169
} 
#endif
#line 171 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\curand_philox4x32_x.h"
static __forceinline uint4 curand_Philox4x32_10(uint4 c, uint2 k) {int volatile ___ = 1;(void)c;(void)k;::exit(___);}
#if 0
#line 172
{ 
#line 173
c = _philox4x32round(c, k); 
#line 174
(k.x) += 2654435769U; (k.y) += 3144134277U; 
#line 175
c = _philox4x32round(c, k); 
#line 176
(k.x) += 2654435769U; (k.y) += 3144134277U; 
#line 177
c = _philox4x32round(c, k); 
#line 178
(k.x) += 2654435769U; (k.y) += 3144134277U; 
#line 179
c = _philox4x32round(c, k); 
#line 180
(k.x) += 2654435769U; (k.y) += 3144134277U; 
#line 181
c = _philox4x32round(c, k); 
#line 182
(k.x) += 2654435769U; (k.y) += 3144134277U; 
#line 183
c = _philox4x32round(c, k); 
#line 184
(k.x) += 2654435769U; (k.y) += 3144134277U; 
#line 185
c = _philox4x32round(c, k); 
#line 186
(k.x) += 2654435769U; (k.y) += 3144134277U; 
#line 187
c = _philox4x32round(c, k); 
#line 188
(k.x) += 2654435769U; (k.y) += 3144134277U; 
#line 189
c = _philox4x32round(c, k); 
#line 190
(k.x) += 2654435769U; (k.y) += 3144134277U; 
#line 191
return _philox4x32round(c, k); 
#line 192
} 
#endif
#line 73 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\curand_globals.h"
struct normal_args_st { 
#line 74
float mean; 
#line 75
float stddev; 
#line 76
}; 
#line 78
typedef normal_args_st normal_args_t; 
#line 80
struct normal_args_double_st { 
#line 81
double mean; 
#line 82
double stddev; 
#line 83
}; 
#line 85
typedef normal_args_double_st normal_args_double_t; 
#line 123 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\curand_kernel.h"
struct curandStateTest { 
#line 124
unsigned v; 
#line 125
}; 
#line 128
typedef curandStateTest curandStateTest_t; 
#line 146
struct curandStateXORWOW; 
#line 150
struct curandStateXORWOW { 
#line 151
unsigned d, v[5]; 
#line 152
int boxmuller_flag; 
#line 153
int boxmuller_flag_double; 
#line 154
float boxmuller_extra; 
#line 155
double boxmuller_extra_double; 
#line 156
}; 
#line 162
typedef curandStateXORWOW curandStateXORWOW_t; 
#line 205
struct curandStateMRG32k3a; 
#line 208
struct curandStateMRG32k3a { 
#line 209
unsigned s1[3]; 
#line 210
unsigned s2[3]; 
#line 211
int boxmuller_flag; 
#line 212
int boxmuller_flag_double; 
#line 213
float boxmuller_extra; 
#line 214
double boxmuller_extra_double; 
#line 215
}; 
#line 221
typedef curandStateMRG32k3a curandStateMRG32k3a_t; 
#line 228
struct curandStateSobol32; 
#line 231
struct curandStateSobol32 { 
#line 232
unsigned i, x, c; 
#line 233
unsigned direction_vectors[32]; 
#line 234
}; 
#line 240
typedef curandStateSobol32 curandStateSobol32_t; 
#line 246
struct curandStateScrambledSobol32; 
#line 249
struct curandStateScrambledSobol32 { 
#line 250
unsigned i, x, c; 
#line 251
unsigned direction_vectors[32]; 
#line 252
}; 
#line 258
typedef curandStateScrambledSobol32 curandStateScrambledSobol32_t; 
#line 264
struct curandStateSobol64; 
#line 267
struct curandStateSobol64 { 
#line 268
unsigned __int64 i, x, c; 
#line 269
unsigned __int64 direction_vectors[64]; 
#line 270
}; 
#line 276
typedef curandStateSobol64 curandStateSobol64_t; 
#line 282
struct curandStateScrambledSobol64; 
#line 285
struct curandStateScrambledSobol64 { 
#line 286
unsigned __int64 i, x, c; 
#line 287
unsigned __int64 direction_vectors[64]; 
#line 288
}; 
#line 294
typedef curandStateScrambledSobol64 curandStateScrambledSobol64_t; 
#line 301
typedef curandStateXORWOW curandState_t; 
#line 302
typedef curandStateXORWOW curandState; 
#line 315
template< int N> static __forceinline void 
#line 316
__curand_matvec_inplace(unsigned *vector, unsigned *matrix) {int volatile ___ = 1;(void)vector;(void)matrix;::exit(___);}
#if 0
#line 317
{ 
#line 318
unsigned result[N] = {(0)}; 
#line 319
for (int i = 0; i < N; i++) { 
#line 323
for (int j = 0; j < 32; j++) { 
#line 324
if ((vector[i]) & (1 << j)) { 
#line 325
for (int k = 0; k < N; k++) { 
#line 326
(result[k]) ^= (matrix[(N * ((i * 32) + j)) + k]); 
#line 327
}  
#line 328
}  
#line 329
}  
#line 330
}  
#line 331
for (int i = 0; i < N; i++) { 
#line 332
(vector[i]) = (result[i]); 
#line 333
}  
#line 334
} 
#endif
#line 336 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\curand_kernel.h"
static __forceinline void __curand_matvec(unsigned *vector, unsigned *matrix, unsigned *
#line 337
result, int n) {int volatile ___ = 1;(void)vector;(void)matrix;(void)result;(void)n;::exit(___);}
#if 0
#line 338
{ 
#line 339
for (int i = 0; i < n; i++) { 
#line 340
(result[i]) = (0); 
#line 341
}  
#line 342
for (int i = 0; i < n; i++) { 
#line 343
for (int j = 0; j < 32; j++) { 
#line 344
if ((vector[i]) & (1 << j)) { 
#line 345
for (int k = 0; k < n; k++) { 
#line 346
(result[k]) ^= (matrix[(n * ((i * 32) + j)) + k]); 
#line 347
}  
#line 348
}  
#line 349
}  
#line 350
}  
#line 351
} 
#endif
#line 354 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\curand_kernel.h"
static __forceinline void __curand_matidentity(unsigned *matrix, int n) {int volatile ___ = 1;(void)matrix;(void)n;::exit(___);}
#if 0
#line 355
{ 
#line 356
int r; 
#line 357
for (int i = 0; i < (n * 32); i++) { 
#line 358
for (int j = 0; j < n; j++) { 
#line 359
r = (i & 31); 
#line 360
if ((i / 32) == j) { 
#line 361
(matrix[(i * n) + j]) = (1 << r); 
#line 362
} else { 
#line 363
(matrix[(i * n) + j]) = (0); 
#line 364
}  
#line 365
}  
#line 366
}  
#line 367
} 
#endif
#line 371 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\curand_kernel.h"
static __forceinline void __curand_matmat(unsigned *matrixA, unsigned *matrixB, int n) {int volatile ___ = 1;(void)matrixA;(void)matrixB;(void)n;::exit(___);}
#if 0
#line 372
{ 
#line 373
unsigned result[5]; 
#line 374
for (int i = 0; i < (n * 32); i++) { 
#line 375
__curand_matvec(matrixA + (i * n), matrixB, result, n); 
#line 376
for (int j = 0; j < n; j++) { 
#line 377
(matrixA[(i * n) + j]) = (result[j]); 
#line 378
}  
#line 379
}  
#line 380
} 
#endif
#line 383 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\curand_kernel.h"
static __forceinline void __curand_veccopy(unsigned *vector, unsigned *vectorA, int n) {int volatile ___ = 1;(void)vector;(void)vectorA;(void)n;::exit(___);}
#if 0
#line 384
{ 
#line 385
for (int i = 0; i < n; i++) { 
#line 386
(vector[i]) = (vectorA[i]); 
#line 387
}  
#line 388
} 
#endif
#line 391 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\curand_kernel.h"
static __forceinline void __curand_matcopy(unsigned *matrix, unsigned *matrixA, int n) {int volatile ___ = 1;(void)matrix;(void)matrixA;(void)n;::exit(___);}
#if 0
#line 392
{ 
#line 393
for (int i = 0; i < ((n * n) * 32); i++) { 
#line 394
(matrix[i]) = (matrixA[i]); 
#line 395
}  
#line 396
} 
#endif
#line 399 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\curand_kernel.h"
static __forceinline void __curand_matpow(unsigned *matrix, unsigned *matrixA, unsigned __int64 
#line 400
p, int n) {int volatile ___ = 1;(void)matrix;(void)matrixA;(void)p;(void)n;::exit(___);}
#if 0
#line 401
{ 
#line 402
unsigned matrixR[(5 * 5) * 32]; 
#line 403
unsigned matrixS[(5 * 5) * 32]; 
#line 404
__curand_matidentity(matrix, n); 
#line 405
__curand_matcopy(matrixR, matrixA, n); 
#line 406
while (p) { 
#line 407
if (p & (1)) { 
#line 408
__curand_matmat(matrix, matrixR, n); 
#line 409
}  
#line 410
__curand_matcopy(matrixS, matrixR, n); 
#line 411
__curand_matmat(matrixR, matrixS, n); 
#line 412
p >>= 1; 
#line 413
}  
#line 414
} 
#endif
#line 425 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\curand_kernel.h"
static __forceinline double curand_MRGmod(double i, double m) {int volatile ___ = 1;(void)i;(void)m;::exit(___);}
#if 0
#line 426
{ 
#line 427
double quo; 
#line 428
double rem; 
#line 429
quo = floor(i / m); 
#line 430
rem = (i - (quo * m)); 
#line 431
if (rem < (0.0)) { rem += m; }  
#line 432
return rem; 
#line 433
} 
#endif
#line 438 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\curand_kernel.h"
static __forceinline double curand_MRGmodMul(double i, double j, double m) {int volatile ___ = 1;(void)i;(void)j;(void)m;::exit(___);}
#if 0
#line 439
{ 
#line 440
double tempHi; 
#line 441
double tempLo; 
#line 443
tempHi = floor(i / (131072.0)); 
#line 444
tempLo = (i - (tempHi * (131072.0))); 
#line 445
tempLo = curand_MRGmod((curand_MRGmod(tempHi * j, m) * (131072.0)) + curand_MRGmod(tempLo * j, m), m); 
#line 447
if (tempLo < (0.0)) { tempLo += m; }  
#line 448
return tempLo; 
#line 449
} 
#endif
#line 453 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\curand_kernel.h"
static __forceinline void curand_MRGmatMul3x3(unsigned i1[][3], unsigned i2[][3], unsigned o[][3], double m) {int volatile ___ = 1;(void)i1;(void)i2;(void)o;(void)m;::exit(___);}
#if 0
#line 454
{ 
#line 455
int i, j; 
#line 456
double temp[3][3]; 
#line 457
for (i = 0; i < 3; i++) { 
#line 458
for (j = 0; j < 3; j++) { 
#line 459
((temp[i])[j]) = ((curand_MRGmodMul((i1[i])[0], (i2[0])[j], m) + curand_MRGmodMul((i1[i])[1], (i2[1])[j], m)) + curand_MRGmodMul((i1[i])[2], (i2[2])[j], m)); 
#line 462
((temp[i])[j]) = curand_MRGmod((temp[i])[j], m); 
#line 463
}  
#line 464
}  
#line 465
for (i = 0; i < 3; i++) { 
#line 466
for (j = 0; j < 3; j++) { 
#line 467
((o[i])[j]) = ((unsigned)((temp[i])[j])); 
#line 468
}  
#line 469
}  
#line 470
} 
#endif
#line 474 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\curand_kernel.h"
static __forceinline void curand_MRGmatVecMul3x3(unsigned i[][3], unsigned v[], double m) {int volatile ___ = 1;(void)i;(void)v;(void)m;::exit(___);}
#if 0
#line 475
{ 
#line 476
int k; 
#line 477
double t[3]; 
#line 478
for (k = 0; k < 3; k++) { 
#line 479
(t[k]) = ((curand_MRGmodMul((i[k])[0], v[0], m) + curand_MRGmodMul((i[k])[1], v[1], m)) + curand_MRGmodMul((i[k])[2], v[2], m)); 
#line 482
(t[k]) = curand_MRGmod(t[k], m); 
#line 483
}  
#line 484
for (k = 0; k < 3; k++) { 
#line 485
(v[k]) = ((unsigned)(t[k])); 
#line 486
}  
#line 488
} 
#endif
#line 494 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\curand_kernel.h"
static __forceinline void curand_MRGmatPow3x3(unsigned in[][3][3], unsigned o[][3], double m, unsigned __int64 pow) {int volatile ___ = 1;(void)in;(void)o;(void)m;(void)pow;::exit(___);}
#if 0
#line 495
{ 
#line 496
int i, j; 
#line 497
for (i = 0; i < 3; i++) { 
#line 498
for (j = 0; j < 3; j++) { 
#line 499
((o[i])[j]) = (0); 
#line 500
if (i == j) { ((o[i])[j]) = (1); }  
#line 501
}  
#line 502
}  
#line 503
i = 0; 
#line 504
curand_MRGmatVecMul3x3(o, o[0], m); 
#line 505
while (pow) { 
#line 506
if (pow & (1i64)) { 
#line 507
curand_MRGmatMul3x3(in[i], o, o, m); 
#line 508
}  
#line 509
i++; 
#line 510
pow >>= 1; 
#line 511
}  
#line 512
} 
#endif
#line 517 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\curand_kernel.h"
static __forceinline void curnand_MRGmatPow2Pow3x3(double in[][3], double o[][3], double m, unsigned long pow) {int volatile ___ = 1;(void)in;(void)o;(void)m;(void)pow;::exit(___);}
#if 0
#line 518
{ 
#line 519
unsigned temp[3][3]; 
#line 520
int i, j; 
#line 521
pow = (pow % (191)); 
#line 522
for (i = 0; i < 3; i++) { 
#line 523
for (j = 0; j < 3; j++) { 
#line 524
((temp[i])[j]) = ((unsigned)((in[i])[j])); 
#line 525
}  
#line 526
}  
#line 527
while (pow) { 
#line 528
curand_MRGmatMul3x3(temp, temp, temp, m); 
#line 529
pow--; 
#line 530
}  
#line 531
for (i = 0; i < 3; i++) { 
#line 532
for (j = 0; j < 3; j++) { 
#line 533
((o[i])[j]) = ((temp[i])[j]); 
#line 534
}  
#line 535
}  
#line 536
} 
#endif
#line 546 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\curand_kernel.h"
static __forceinline void curand_init(unsigned __int64 seed, unsigned __int64 
#line 547
subsequence, unsigned __int64 
#line 548
offset, curandStateTest_t *
#line 549
state) {int volatile ___ = 1;(void)seed;(void)subsequence;(void)offset;(void)state;::exit(___);}
#if 0
#line 550
{ 
#line 551
(state->v) = ((((unsigned)(seed * (3))) + ((unsigned)(subsequence * (31337)))) + ((unsigned)offset)); 
#line 553
} 
#endif
#line 556 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\curand_kernel.h"
static __forceinline unsigned curand(curandStateTest_t *state) {int volatile ___ = 1;(void)state;::exit(___);}
#if 0
#line 557
{ 
#line 558
unsigned r = (state->v)++; 
#line 559
return r; 
#line 560
} 
#endif
#line 562 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\curand_kernel.h"
static __forceinline void skipahead(unsigned __int64 n, curandStateTest_t *state) {int volatile ___ = 1;(void)n;(void)state;::exit(___);}
#if 0
#line 563
{ 
#line 564
(state->v) += ((unsigned)n); 
#line 565
} 
#endif
#line 569 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\curand_kernel.h"
template< class T, int n> static __forceinline void 
#line 570
__curand_generate_skipahead_matrix_xor(unsigned matrix[]) {int volatile ___ = 1;(void)matrix;::exit(___);}
#if 0
#line 571
{ 
#line 572
T state; 
#line 576
for (int i = 0; i < (32 * n); i++) { 
#line 577
(state.d) = 0; 
#line 578
for (int j = 0; j < n; j++) { 
#line 579
((state.v)[j]) = 0; 
#line 580
}  
#line 581
((state.v)[i / 32]) = (1 << (i & 31)); 
#line 582
curand(&state); 
#line 583
for (int j = 0; j < n; j++) { 
#line 584
(matrix[(i * n) + j]) = ((state.v)[j]); 
#line 585
}  
#line 586
}  
#line 587
} 
#endif
#line 589 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\curand_kernel.h"
template< class T, int n> static __forceinline void 
#line 590
_skipahead_scratch(unsigned __int64 x, T *state, unsigned *scratch) {int volatile ___ = 1;(void)x;(void)state;(void)scratch;::exit(___);}
#if 0
#line 591
{ 
#line 593
unsigned *matrix = scratch; 
#line 595
unsigned *matrixA = scratch + ((n * n) * 32); 
#line 597
unsigned *vector = (scratch + ((n * n) * 32)) + ((n * n) * 32); 
#line 599
unsigned *result = ((scratch + ((n * n) * 32)) + ((n * n) * 32)) + n; 
#line 600
unsigned __int64 p = x; 
#line 601
for (int i = 0; i < n; i++) { 
#line 602
(vector[i]) = ((state->v)[i]); 
#line 603
}  
#line 604
int matrix_num = 0; 
#line 605
while (p && (matrix_num < (32 - 1))) { 
#line 606
for (unsigned t = (0); t < (p & ((1 << 2) - 1)); t++) { 
#line 607
{ __curand_matvec(vector, precalc_xorwow_offset_matrix_host[matrix_num], result, n); } 
#line 612 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\curand_kernel.h"
__curand_veccopy(vector, result, n); 
#line 613
}  
#line 614
p >>= 2; 
#line 615
matrix_num++; 
#line 616
}  
#line 617
if (p) { 
#line 618
{ __curand_matcopy(matrix, precalc_xorwow_offset_matrix_host[32 - 1], n); __curand_matcopy(matrixA, precalc_xorwow_offset_matrix_host[32 - 1], n); } 
#line 625 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\curand_kernel.h"
}  
#line 626
while (p) { 
#line 627
for (unsigned t = (0); t < (p & ((1 << 4) - 1)); t++) { 
#line 628
__curand_matvec(vector, matrixA, result, n); 
#line 629
__curand_veccopy(vector, result, n); 
#line 630
}  
#line 631
p >>= 4; 
#line 632
if (p) { 
#line 633
for (int i = 0; i < 4; i++) { 
#line 634
__curand_matmat(matrix, matrixA, n); 
#line 635
__curand_matcopy(matrixA, matrix, n); 
#line 636
}  
#line 637
}  
#line 638
}  
#line 639
for (int i = 0; i < n; i++) { 
#line 640
((state->v)[i]) = (vector[i]); 
#line 641
}  
#line 642
(state->d) += ((362437) * ((unsigned)x)); 
#line 643
} 
#endif
#line 645 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\curand_kernel.h"
template< class T, int n> static __forceinline void 
#line 646
_skipahead_sequence_scratch(unsigned __int64 x, T *state, unsigned *scratch) {int volatile ___ = 1;(void)x;(void)state;(void)scratch;::exit(___);}
#if 0
#line 647
{ 
#line 649
unsigned *matrix = scratch; 
#line 651
unsigned *matrixA = scratch + ((n * n) * 32); 
#line 653
unsigned *vector = (scratch + ((n * n) * 32)) + ((n * n) * 32); 
#line 655
unsigned *result = ((scratch + ((n * n) * 32)) + ((n * n) * 32)) + n; 
#line 656
unsigned __int64 p = x; 
#line 657
for (int i = 0; i < n; i++) { 
#line 658
(vector[i]) = ((state->v)[i]); 
#line 659
}  
#line 660
int matrix_num = 0; 
#line 661
while (p && (matrix_num < (32 - 1))) { 
#line 662
for (unsigned t = (0); t < (p & ((1 << 2) - 1)); t++) { 
#line 663
{ __curand_matvec(vector, precalc_xorwow_matrix_host[matrix_num], result, n); } 
#line 668 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\curand_kernel.h"
__curand_veccopy(vector, result, n); 
#line 669
}  
#line 670
p >>= 2; 
#line 671
matrix_num++; 
#line 672
}  
#line 673
if (p) { 
#line 674
{ __curand_matcopy(matrix, precalc_xorwow_matrix_host[32 - 1], n); __curand_matcopy(matrixA, precalc_xorwow_matrix_host[32 - 1], n); } 
#line 681 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\curand_kernel.h"
}  
#line 682
while (p) { 
#line 683
for (unsigned t = (0); t < (p & ((1 << 4) - 1)); t++) { 
#line 684
__curand_matvec(vector, matrixA, result, n); 
#line 685
__curand_veccopy(vector, result, n); 
#line 686
}  
#line 687
p >>= 4; 
#line 688
if (p) { 
#line 689
for (int i = 0; i < 4; i++) { 
#line 690
__curand_matmat(matrix, matrixA, n); 
#line 691
__curand_matcopy(matrixA, matrix, n); 
#line 692
}  
#line 693
}  
#line 694
}  
#line 695
for (int i = 0; i < n; i++) { 
#line 696
((state->v)[i]) = (vector[i]); 
#line 697
}  
#line 699
} 
#endif
#line 701 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\curand_kernel.h"
template< class T, int N> static __forceinline void 
#line 702
_skipahead_inplace(const unsigned __int64 x, T *state) {int volatile ___ = 1;(void)x;(void)state;::exit(___);}
#if 0
#line 703
{ 
#line 704
unsigned __int64 p = x; 
#line 705
int matrix_num = 0; 
#line 706
while (p) { 
#line 707
for (unsigned t = (0); t < (p & ((1 << 2) - 1)); t++) { 
#line 708
{ __curand_matvec_inplace< N> ((state->v), precalc_xorwow_offset_matrix_host[matrix_num]); } 
#line 713 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\curand_kernel.h"
}  
#line 714
p >>= 2; 
#line 715
matrix_num++; 
#line 716
}  
#line 717
(state->d) += ((362437) * ((unsigned)x)); 
#line 718
} 
#endif
#line 720 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\curand_kernel.h"
template< class T, int N> static __forceinline void 
#line 721
_skipahead_sequence_inplace(unsigned __int64 x, T *state) {int volatile ___ = 1;(void)x;(void)state;::exit(___);}
#if 0
#line 722
{ 
#line 723
int matrix_num = 0; 
#line 724
while (x) { 
#line 725
for (unsigned t = (0); t < (x & ((1 << 2) - 1)); t++) { 
#line 726
{ __curand_matvec_inplace< N> ((state->v), precalc_xorwow_matrix_host[matrix_num]); } 
#line 731 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\curand_kernel.h"
}  
#line 732
x >>= 2; 
#line 733
matrix_num++; 
#line 734
}  
#line 736
} 
#endif
#line 749 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\curand_kernel.h"
static __forceinline void skipahead(unsigned __int64 n, curandStateXORWOW_t *state) {int volatile ___ = 1;(void)n;(void)state;::exit(___);}
#if 0
#line 750
{ 
#line 751
_skipahead_inplace< curandStateXORWOW, 5> (n, state); 
#line 752
} 
#endif
#line 767 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\curand_kernel.h"
static __forceinline void skipahead_sequence(unsigned __int64 n, curandStateXORWOW_t *state) {int volatile ___ = 1;(void)n;(void)state;::exit(___);}
#if 0
#line 768
{ 
#line 769
_skipahead_sequence_inplace< curandStateXORWOW, 5> (n, state); 
#line 770
} 
#endif
#line 772 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\curand_kernel.h"
static __forceinline void _curand_init_scratch(unsigned __int64 seed, unsigned __int64 
#line 773
subsequence, unsigned __int64 
#line 774
offset, curandStateXORWOW_t *
#line 775
state, unsigned *
#line 776
scratch) {int volatile ___ = 1;(void)seed;(void)subsequence;(void)offset;(void)state;(void)scratch;::exit(___);}
#if 0
#line 777
{ 
#line 780
unsigned s0 = ((unsigned)seed) ^ 2865916745UL; 
#line 781
unsigned s1 = ((unsigned)(seed >> 32)) ^ 4158451677UL; 
#line 784
unsigned t0 = 1099087573UL * s0; 
#line 785
unsigned t1 = 2591861531UL * s1; 
#line 786
(state->d) = (((6615241) + t1) + t0); 
#line 787
((state->v)[0]) = (123456789UL + t0); 
#line 788
((state->v)[1]) = (362436069UL ^ t0); 
#line 789
((state->v)[2]) = (521288629UL + t1); 
#line 790
((state->v)[3]) = (88675123UL ^ t1); 
#line 791
((state->v)[4]) = (5783321UL + t0); 
#line 792
_skipahead_sequence_scratch< curandStateXORWOW, 5> (subsequence, state, scratch); 
#line 793
_skipahead_scratch< curandStateXORWOW, 5> (offset, state, scratch); 
#line 794
(state->boxmuller_flag) = 0; 
#line 795
(state->boxmuller_flag_double) = 0; 
#line 796
(state->boxmuller_extra) = (0.0F); 
#line 797
(state->boxmuller_extra_double) = (0.0); 
#line 798
} 
#endif
#line 800 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\curand_kernel.h"
static __forceinline void _curand_init_inplace(unsigned __int64 seed, unsigned __int64 
#line 801
subsequence, unsigned __int64 
#line 802
offset, curandStateXORWOW_t *
#line 803
state) {int volatile ___ = 1;(void)seed;(void)subsequence;(void)offset;(void)state;::exit(___);}
#if 0
#line 804
{ 
#line 807
unsigned s0 = ((unsigned)seed) ^ 2865916745UL; 
#line 808
unsigned s1 = ((unsigned)(seed >> 32)) ^ 4158451677UL; 
#line 811
unsigned t0 = 1099087573UL * s0; 
#line 812
unsigned t1 = 2591861531UL * s1; 
#line 813
(state->d) = (((6615241) + t1) + t0); 
#line 814
((state->v)[0]) = (123456789UL + t0); 
#line 815
((state->v)[1]) = (362436069UL ^ t0); 
#line 816
((state->v)[2]) = (521288629UL + t1); 
#line 817
((state->v)[3]) = (88675123UL ^ t1); 
#line 818
((state->v)[4]) = (5783321UL + t0); 
#line 819
_skipahead_sequence_inplace< curandStateXORWOW, 5> (subsequence, state); 
#line 820
_skipahead_inplace< curandStateXORWOW, 5> (offset, state); 
#line 821
(state->boxmuller_flag) = 0; 
#line 822
(state->boxmuller_flag_double) = 0; 
#line 823
(state->boxmuller_extra) = (0.0F); 
#line 824
(state->boxmuller_extra_double) = (0.0); 
#line 825
} 
#endif
#line 845 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\curand_kernel.h"
static __forceinline void curand_init(unsigned __int64 seed, unsigned __int64 
#line 846
subsequence, unsigned __int64 
#line 847
offset, curandStateXORWOW_t *
#line 848
state) {int volatile ___ = 1;(void)seed;(void)subsequence;(void)offset;(void)state;::exit(___);}
#if 0
#line 849
{ 
#line 850
_curand_init_inplace(seed, subsequence, offset, state); 
#line 851
} 
#endif
#line 863 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\curand_kernel.h"
static __forceinline unsigned curand(curandStateXORWOW_t *state) {int volatile ___ = 1;(void)state;::exit(___);}
#if 0
#line 864
{ 
#line 865
unsigned t; 
#line 866
t = (((state->v)[0]) ^ (((state->v)[0]) >> 2)); 
#line 867
((state->v)[0]) = ((state->v)[1]); 
#line 868
((state->v)[1]) = ((state->v)[2]); 
#line 869
((state->v)[2]) = ((state->v)[3]); 
#line 870
((state->v)[3]) = ((state->v)[4]); 
#line 871
((state->v)[4]) = ((((state->v)[4]) ^ (((state->v)[4]) << 4)) ^ (t ^ (t << 1))); 
#line 872
(state->d) += (362437); 
#line 873
return ((state->v)[4]) + (state->d); 
#line 874
} 
#endif
#line 888 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\curand_kernel.h"
static __forceinline unsigned curand(curandStatePhilox4_32_10_t *state) {int volatile ___ = 1;(void)state;::exit(___);}
#if 0
#line 889
{ 
#line 892
unsigned ret; 
#line 893
switch ((state->STATE)++) { 
#line 894
default:  
#line 895
ret = ((state->output).x); 
#line 896
break; 
#line 897
case 1:  
#line 898
ret = ((state->output).y); 
#line 899
break; 
#line 900
case 2:  
#line 901
ret = ((state->output).z); 
#line 902
break; 
#line 903
case 3:  
#line 904
ret = ((state->output).w); 
#line 905
break; 
#line 906
}  
#line 907
if ((state->STATE) == (4)) { 
#line 908
Philox_State_Incr(state); 
#line 909
(state->output) = curand_Philox4x32_10(state->ctr, state->key); 
#line 910
(state->STATE) = (0); 
#line 911
}  
#line 912
return ret; 
#line 913
} 
#endif
#line 926 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\curand_kernel.h"
static __forceinline uint4 curand4(curandStatePhilox4_32_10_t *state) {int volatile ___ = 1;(void)state;::exit(___);}
#if 0
#line 927
{ 
#line 928
uint4 r; 
#line 930
uint4 tmp = state->output; 
#line 931
Philox_State_Incr(state); 
#line 932
(state->output) = curand_Philox4x32_10(state->ctr, state->key); 
#line 933
switch (state->STATE) { 
#line 934
case 0:  
#line 935
return tmp; 
#line 936
case 1:  
#line 937
(r.x) = (tmp.y); 
#line 938
(r.y) = (tmp.z); 
#line 939
(r.z) = (tmp.w); 
#line 940
(r.w) = ((state->output).x); 
#line 941
break; 
#line 942
case 2:  
#line 943
(r.x) = (tmp.z); 
#line 944
(r.y) = (tmp.w); 
#line 945
(r.z) = ((state->output).x); 
#line 946
(r.w) = ((state->output).y); 
#line 947
break; 
#line 948
case 3:  
#line 949
(r.x) = (tmp.w); 
#line 950
(r.y) = ((state->output).x); 
#line 951
(r.z) = ((state->output).y); 
#line 952
(r.w) = ((state->output).z); 
#line 953
break; 
#line 954
default:  
#line 956
return tmp; 
#line 957
}  
#line 958
return r; 
#line 959
} 
#endif
#line 971 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\curand_kernel.h"
static __forceinline void skipahead(unsigned __int64 n, curandStatePhilox4_32_10_t *state) {int volatile ___ = 1;(void)n;(void)state;::exit(___);}
#if 0
#line 972
{ 
#line 973
(state->STATE) += (n & (3)); 
#line 974
n /= (4); 
#line 975
if ((state->STATE) > (3)) { 
#line 976
n += (1); 
#line 977
(state->STATE) -= (4); 
#line 978
}  
#line 979
Philox_State_Incr(state, n); 
#line 980
(state->output) = curand_Philox4x32_10(state->ctr, state->key); 
#line 981
} 
#endif
#line 995 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\curand_kernel.h"
static __forceinline void skipahead_sequence(unsigned __int64 n, curandStatePhilox4_32_10_t *state) {int volatile ___ = 1;(void)n;(void)state;::exit(___);}
#if 0
#line 996
{ 
#line 997
Philox_State_Incr_hi(state, n); 
#line 998
(state->output) = curand_Philox4x32_10(state->ctr, state->key); 
#line 999
} 
#endif
#line 1022 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\curand_kernel.h"
static __forceinline void curand_init(unsigned __int64 seed, unsigned __int64 
#line 1023
subsequence, unsigned __int64 
#line 1024
offset, curandStatePhilox4_32_10_t *
#line 1025
state) {int volatile ___ = 1;(void)seed;(void)subsequence;(void)offset;(void)state;::exit(___);}
#if 0
#line 1026
{ 
#line 1027
(state->ctr) = make_uint4(0, 0, 0, 0); 
#line 1028
((state->key).x) = ((unsigned)seed); 
#line 1029
((state->key).y) = ((unsigned)(seed >> 32)); 
#line 1030
(state->STATE) = (0); 
#line 1031
(state->boxmuller_flag) = 0; 
#line 1032
(state->boxmuller_flag_double) = 0; 
#line 1033
(state->boxmuller_extra) = (0.0F); 
#line 1034
(state->boxmuller_extra_double) = (0.0); 
#line 1035
skipahead_sequence(subsequence, state); 
#line 1036
skipahead(offset, state); 
#line 1037
} 
#endif
#line 1043 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\curand_kernel.h"
static __forceinline unsigned __int64 __curand_umad(unsigned a, unsigned b, unsigned __int64 c) {int volatile ___ = 1;(void)a;(void)b;(void)c;::exit(___);}
#if 0
#line 1044
{ 
#line 1045
unsigned __int64 r = (0); 
#line 1046
{ } 
#line 1050 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\curand_kernel.h"
return r; 
#line 1051
} 
#endif
#line 1052 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\curand_kernel.h"
static __forceinline unsigned __int64 __curand_umul(unsigned a, unsigned b) {int volatile ___ = 1;(void)a;(void)b;::exit(___);}
#if 0
#line 1053
{ 
#line 1054
unsigned __int64 r = (0); 
#line 1055
{ } 
#line 1059 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\curand_kernel.h"
return r; 
#line 1060
} 
#endif
#line 1061 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\curand_kernel.h"
static __forceinline double curand_MRG32k3a(curandStateMRG32k3a_t *state) {int volatile ___ = 1;(void)state;::exit(___);}
#if 0
#line 1062
{ 
#line 1063
{ } 
#line 1099 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\curand_kernel.h"
{ } 
#line 1130 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\curand_kernel.h"
double p1; 
#line 1131
double p2; 
#line 1132
double r; 
#line 1133
p1 = (((1403580.0) * ((state->s1)[1])) - ((810728.0) * ((state->s1)[0]))); 
#line 1134
p1 = curand_MRGmod(p1, (4294967087.0)); 
#line 1135
if (p1 < (0.0)) { p1 += (4294967087.0); }  
#line 1136
((state->s1)[0]) = ((state->s1)[1]); 
#line 1137
((state->s1)[1]) = ((state->s1)[2]); 
#line 1138
((state->s1)[2]) = ((unsigned)p1); 
#line 1139
p2 = (((527612.0) * ((state->s2)[2])) - ((1370589.0) * ((state->s2)[0]))); 
#line 1140
p2 = curand_MRGmod(p2, (4294944443.0)); 
#line 1141
if (p2 < (0)) { p2 += (4294944443.0); }  
#line 1142
((state->s2)[0]) = ((state->s2)[1]); 
#line 1143
((state->s2)[1]) = ((state->s2)[2]); 
#line 1144
((state->s2)[2]) = ((unsigned)p2); 
#line 1145
r = (p1 - p2); 
#line 1146
if (r <= (0)) { r += (4294967087.0); }  
#line 1147
return r; 
#line 1148
} 
#endif
#line 1161 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\curand_kernel.h"
static __forceinline unsigned curand(curandStateMRG32k3a_t *state) {int volatile ___ = 1;(void)state;::exit(___);}
#if 0
#line 1162
{ 
#line 1163
double dRet; 
#line 1164
dRet = (((double)curand_MRG32k3a(state)) * ((double)(1.000000048661999985))); 
#line 1165
return (unsigned)dRet; 
#line 1166
} 
#endif
#line 1181 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\curand_kernel.h"
static __forceinline void skipahead(unsigned __int64 n, curandStateMRG32k3a_t *state) {int volatile ___ = 1;(void)n;(void)state;::exit(___);}
#if 0
#line 1182
{ 
#line 1183
unsigned t[3][3]; 
#line 1184
{ curand_MRGmatPow3x3(mrg32k3aM1Host, t, (4294967087.0), n); curand_MRGmatVecMul3x3(t, state->s1, (4294967087.0)); curand_MRGmatPow3x3(mrg32k3aM2Host, t, (4294944443.0), n); curand_MRGmatVecMul3x3(t, state->s2, (4294944443.0)); } 
#line 1195 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\curand_kernel.h"
} 
#endif
#line 1211 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\curand_kernel.h"
static __forceinline void skipahead_subsequence(unsigned __int64 n, curandStateMRG32k3a_t *state) {int volatile ___ = 1;(void)n;(void)state;::exit(___);}
#if 0
#line 1212
{ 
#line 1213
unsigned t[3][3]; 
#line 1214
{ curand_MRGmatPow3x3(mrg32k3aM1SubSeqHost, t, (4294967087.0), n); curand_MRGmatVecMul3x3(t, state->s1, (4294967087.0)); curand_MRGmatPow3x3(mrg32k3aM2SubSeqHost, t, (4294944443.0), n); curand_MRGmatVecMul3x3(t, state->s2, (4294944443.0)); } 
#line 1225 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\curand_kernel.h"
} 
#endif
#line 1240 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\curand_kernel.h"
static __forceinline void skipahead_sequence(unsigned __int64 n, curandStateMRG32k3a_t *state) {int volatile ___ = 1;(void)n;(void)state;::exit(___);}
#if 0
#line 1241
{ 
#line 1242
unsigned t[3][3]; 
#line 1243
{ curand_MRGmatPow3x3(mrg32k3aM1SeqHost, t, (4294967087.0), n); curand_MRGmatVecMul3x3(t, state->s1, (4294967087.0)); curand_MRGmatPow3x3(mrg32k3aM2SeqHost, t, (4294944443.0), n); curand_MRGmatVecMul3x3(t, state->s2, (4294944443.0)); } 
#line 1254 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\curand_kernel.h"
} 
#endif
#line 1274 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\curand_kernel.h"
static __forceinline void curand_init(unsigned __int64 seed, unsigned __int64 
#line 1275
subsequence, unsigned __int64 
#line 1276
offset, curandStateMRG32k3a_t *
#line 1277
state) {int volatile ___ = 1;(void)seed;(void)subsequence;(void)offset;(void)state;::exit(___);}
#if 0
#line 1278
{ 
#line 1279
int i; 
#line 1280
for (i = 0; i < 3; i++) { 
#line 1281
((state->s1)[i]) = 12345U; 
#line 1282
((state->s2)[i]) = 12345U; 
#line 1283
}  
#line 1284
if (seed != 0Ui64) { 
#line 1285
unsigned x1 = ((unsigned)seed) ^ 1431655765UL; 
#line 1286
unsigned x2 = (unsigned)((seed >> 32) ^ (2863311530UL)); 
#line 1287
((state->s1)[0]) = ((unsigned)curand_MRGmodMul(x1, (state->s1)[0], (4294967087.0))); 
#line 1288
((state->s1)[1]) = ((unsigned)curand_MRGmodMul(x2, (state->s1)[1], (4294967087.0))); 
#line 1289
((state->s1)[2]) = ((unsigned)curand_MRGmodMul(x1, (state->s1)[2], (4294967087.0))); 
#line 1290
((state->s2)[0]) = ((unsigned)curand_MRGmodMul(x2, (state->s2)[0], (4294944443.0))); 
#line 1291
((state->s2)[1]) = ((unsigned)curand_MRGmodMul(x1, (state->s2)[1], (4294944443.0))); 
#line 1292
((state->s2)[2]) = ((unsigned)curand_MRGmodMul(x2, (state->s2)[2], (4294944443.0))); 
#line 1293
}  
#line 1294
skipahead_subsequence(subsequence, state); 
#line 1295
skipahead(offset, state); 
#line 1296
(state->boxmuller_flag) = 0; 
#line 1297
(state->boxmuller_flag_double) = 0; 
#line 1298
(state->boxmuller_extra) = (0.0F); 
#line 1299
(state->boxmuller_extra_double) = (0.0); 
#line 1300
} 
#endif
#line 1312 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\curand_kernel.h"
template< class T> static __forceinline typename curand_detail::enable_if< curand_detail::is_same< ::curandStateSobol32 *, T> ::value || curand_detail::is_same< ::curandStateScrambledSobol32 *, T> ::value> ::type 
#line 1315
skipahead(unsigned n, T state) {int volatile ___ = 1;(void)n;(void)state;::exit(___);}
#if 0
#line 1316
{ 
#line 1317
unsigned i_gray; 
#line 1318
(state->x) = (state->c); 
#line 1319
(state->i) += n; 
#line 1321
i_gray = ((state->i) ^ ((state->i) >> 1)); 
#line 1322
for (unsigned k = (0); k < (32); k++) { 
#line 1323
if (i_gray & (1 << k)) { 
#line 1324
(state->x) ^= ((state->direction_vectors)[k]); 
#line 1325
}  
#line 1326
}  
#line 1328
} 
#endif
#line 1340 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\curand_kernel.h"
template< class T> static __forceinline typename curand_detail::enable_if< curand_detail::is_same< ::curandStateSobol64 *, T> ::value || curand_detail::is_same< ::curandStateScrambledSobol64 *, T> ::value> ::type 
#line 1343
skipahead(unsigned __int64 n, T state) {int volatile ___ = 1;(void)n;(void)state;::exit(___);}
#if 0
#line 1344
{ 
#line 1345
unsigned __int64 i_gray; 
#line 1346
(state->x) = (state->c); 
#line 1347
(state->i) += n; 
#line 1349
i_gray = ((state->i) ^ ((state->i) >> 1)); 
#line 1350
for (unsigned k = (0); k < (64); k++) { 
#line 1351
if (i_gray & (1Ui64 << k)) { 
#line 1352
(state->x) ^= ((state->direction_vectors)[k]); 
#line 1353
}  
#line 1354
}  
#line 1356
} 
#endif
#line 1372 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\curand_kernel.h"
static __forceinline void curand_init(curandDirectionVectors32_t direction_vectors, unsigned 
#line 1373
offset, curandStateSobol32_t *
#line 1374
state) {int volatile ___ = 1;(void)direction_vectors;(void)offset;(void)state;::exit(___);}
#if 0
#line 1375
{ 
#line 1376
(state->i) = (0); 
#line 1377
(state->c) = (0); 
#line 1378
for (int i = 0; i < 32; i++) { 
#line 1379
((state->direction_vectors)[i]) = (direction_vectors[i]); 
#line 1380
}  
#line 1381
(state->x) = (0); 
#line 1382
skipahead< curandStateSobol32 *> (offset, state); 
#line 1383
} 
#endif
#line 1399 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\curand_kernel.h"
static __forceinline void curand_init(curandDirectionVectors32_t direction_vectors, unsigned 
#line 1400
scramble_c, unsigned 
#line 1401
offset, curandStateScrambledSobol32_t *
#line 1402
state) {int volatile ___ = 1;(void)direction_vectors;(void)scramble_c;(void)offset;(void)state;::exit(___);}
#if 0
#line 1403
{ 
#line 1404
(state->i) = (0); 
#line 1405
(state->c) = scramble_c; 
#line 1406
for (int i = 0; i < 32; i++) { 
#line 1407
((state->direction_vectors)[i]) = (direction_vectors[i]); 
#line 1408
}  
#line 1409
(state->x) = (state->c); 
#line 1410
skipahead< curandStateScrambledSobol32 *> (offset, state); 
#line 1411
} 
#endif
#line 1413 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\curand_kernel.h"
static __forceinline int __curand_find_trailing_zero(unsigned x) {int volatile ___ = 1;(void)x;::exit(___);}
#if 0
#line 1414
{ 
#line 1415
{ int i = 1; while (x & (1)) { i++; x >>= 1; }  i = (i - 1); return (i == 32) ? 31 : i; } 
#line 1429 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\curand_kernel.h"
} 
#endif
#line 1431 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\curand_kernel.h"
static __forceinline int __curand_find_trailing_zero(unsigned __int64 x) {int volatile ___ = 1;(void)x;::exit(___);}
#if 0
#line 1432
{ 
#line 1433
{ int i = 1; while (x & (1)) { i++; x >>= 1; }  i = (i - 1); return (i == 64) ? 63 : i; } 
#line 1447 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\curand_kernel.h"
} 
#endif
#line 1463 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\curand_kernel.h"
static __forceinline void curand_init(curandDirectionVectors64_t direction_vectors, unsigned __int64 
#line 1464
offset, curandStateSobol64_t *
#line 1465
state) {int volatile ___ = 1;(void)direction_vectors;(void)offset;(void)state;::exit(___);}
#if 0
#line 1466
{ 
#line 1467
(state->i) = (0); 
#line 1468
(state->c) = (0); 
#line 1469
for (int i = 0; i < 64; i++) { 
#line 1470
((state->direction_vectors)[i]) = (direction_vectors[i]); 
#line 1471
}  
#line 1472
(state->x) = (0); 
#line 1473
skipahead< curandStateSobol64 *> (offset, state); 
#line 1474
} 
#endif
#line 1491 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\curand_kernel.h"
static __forceinline void curand_init(curandDirectionVectors64_t direction_vectors, unsigned __int64 
#line 1492
scramble_c, unsigned __int64 
#line 1493
offset, curandStateScrambledSobol64_t *
#line 1494
state) {int volatile ___ = 1;(void)direction_vectors;(void)scramble_c;(void)offset;(void)state;::exit(___);}
#if 0
#line 1495
{ 
#line 1496
(state->i) = (0); 
#line 1497
(state->c) = scramble_c; 
#line 1498
for (int i = 0; i < 64; i++) { 
#line 1499
((state->direction_vectors)[i]) = (direction_vectors[i]); 
#line 1500
}  
#line 1501
(state->x) = (state->c); 
#line 1502
skipahead< curandStateScrambledSobol64 *> (offset, state); 
#line 1503
} 
#endif
#line 1516 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\curand_kernel.h"
static __forceinline unsigned curand(curandStateSobol32_t *state) {int volatile ___ = 1;(void)state;::exit(___);}
#if 0
#line 1517
{ 
#line 1521
unsigned res = state->x; 
#line 1522
(state->x) ^= ((state->direction_vectors)[__curand_find_trailing_zero(state->i)]); 
#line 1523
(state->i)++; 
#line 1524
return res; 
#line 1525
} 
#endif
#line 1538 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\curand_kernel.h"
static __forceinline unsigned curand(curandStateScrambledSobol32_t *state) {int volatile ___ = 1;(void)state;::exit(___);}
#if 0
#line 1539
{ 
#line 1543
unsigned res = state->x; 
#line 1544
(state->x) ^= ((state->direction_vectors)[__curand_find_trailing_zero(state->i)]); 
#line 1545
(state->i)++; 
#line 1546
return res; 
#line 1547
} 
#endif
#line 1560 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\curand_kernel.h"
static __forceinline unsigned __int64 curand(curandStateSobol64_t *state) {int volatile ___ = 1;(void)state;::exit(___);}
#if 0
#line 1561
{ 
#line 1565
unsigned __int64 res = state->x; 
#line 1566
(state->x) ^= ((state->direction_vectors)[__curand_find_trailing_zero(state->i)]); 
#line 1567
(state->i)++; 
#line 1568
return res; 
#line 1569
} 
#endif
#line 1582 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\curand_kernel.h"
static __forceinline unsigned __int64 curand(curandStateScrambledSobol64_t *state) {int volatile ___ = 1;(void)state;::exit(___);}
#if 0
#line 1583
{ 
#line 1587
unsigned __int64 res = state->x; 
#line 1588
(state->x) ^= ((state->direction_vectors)[__curand_find_trailing_zero(state->i)]); 
#line 1589
(state->i)++; 
#line 1590
return res; 
#line 1591
} 
#endif
#line 69 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\curand_uniform.h"
static __forceinline float _curand_uniform(unsigned x) {int volatile ___ = 1;(void)x;::exit(___);}
#if 0
#line 70
{ 
#line 71
return (x * (2.328306437e-10F)) + ((2.328306437e-10F) / (2.0F)); 
#line 72
} 
#endif
#line 74 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\curand_uniform.h"
static __forceinline float4 _curand_uniform4(uint4 x) {int volatile ___ = 1;(void)x;::exit(___);}
#if 0
#line 75
{ 
#line 76
float4 y; 
#line 77
(y.x) = (((x.x) * (2.328306437e-10F)) + ((2.328306437e-10F) / (2.0F))); 
#line 78
(y.y) = (((x.y) * (2.328306437e-10F)) + ((2.328306437e-10F) / (2.0F))); 
#line 79
(y.z) = (((x.z) * (2.328306437e-10F)) + ((2.328306437e-10F) / (2.0F))); 
#line 80
(y.w) = (((x.w) * (2.328306437e-10F)) + ((2.328306437e-10F) / (2.0F))); 
#line 81
return y; 
#line 82
} 
#endif
#line 84 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\curand_uniform.h"
static __forceinline float _curand_uniform(unsigned __int64 x) {int volatile ___ = 1;(void)x;::exit(___);}
#if 0
#line 85
{ 
#line 86
unsigned t; 
#line 87
t = ((unsigned)(x >> 32)); 
#line 88
return (t * (2.328306437e-10F)) + ((2.328306437e-10F) / (2.0F)); 
#line 89
} 
#endif
#line 91 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\curand_uniform.h"
static __forceinline double _curand_uniform_double(unsigned x) {int volatile ___ = 1;(void)x;::exit(___);}
#if 0
#line 92
{ 
#line 93
return (x * (2.328306436538696289e-10)) + (2.328306436538696289e-10); 
#line 94
} 
#endif
#line 96 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\curand_uniform.h"
static __forceinline double _curand_uniform_double(unsigned __int64 x) {int volatile ___ = 1;(void)x;::exit(___);}
#if 0
#line 97
{ 
#line 98
return ((x >> 11) * (1.11022302462515654e-16)) + ((1.11022302462515654e-16) / (2.0)); 
#line 99
} 
#endif
#line 101 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\curand_uniform.h"
static __forceinline double _curand_uniform_double_hq(unsigned x, unsigned y) {int volatile ___ = 1;(void)x;(void)y;::exit(___);}
#if 0
#line 102
{ 
#line 103
unsigned __int64 z = ((unsigned __int64)x) ^ (((unsigned __int64)y) << (53 - 32)); 
#line 105
return (z * (1.11022302462515654e-16)) + ((1.11022302462515654e-16) / (2.0)); 
#line 106
} 
#endif
#line 108 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\curand_uniform.h"
static __forceinline float curand_uniform(curandStateTest_t *state) {int volatile ___ = 1;(void)state;::exit(___);}
#if 0
#line 109
{ 
#line 110
return _curand_uniform(curand(state)); 
#line 111
} 
#endif
#line 113 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\curand_uniform.h"
static __forceinline double curand_uniform_double(curandStateTest_t *state) {int volatile ___ = 1;(void)state;::exit(___);}
#if 0
#line 114
{ 
#line 115
return _curand_uniform_double(curand(state)); 
#line 116
} 
#endif
#line 134 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\curand_uniform.h"
static __forceinline float curand_uniform(curandStateXORWOW_t *state) {int volatile ___ = 1;(void)state;::exit(___);}
#if 0
#line 135
{ 
#line 136
return _curand_uniform(curand(state)); 
#line 137
} 
#endif
#line 155 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\curand_uniform.h"
static __forceinline double curand_uniform_double(curandStateXORWOW_t *state) {int volatile ___ = 1;(void)state;::exit(___);}
#if 0
#line 156
{ 
#line 157
unsigned x, y; 
#line 158
x = curand(state); 
#line 159
y = curand(state); 
#line 160
return _curand_uniform_double_hq(x, y); 
#line 161
} 
#endif
#line 177 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\curand_uniform.h"
static __forceinline float curand_uniform(curandStateMRG32k3a_t *state) {int volatile ___ = 1;(void)state;::exit(___);}
#if 0
#line 178
{ 
#line 179
return ((float)(curand_MRG32k3a(state) * (2.328306549837829001e-10))); 
#line 180
} 
#endif
#line 197 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\curand_uniform.h"
static __forceinline double curand_uniform_double(curandStateMRG32k3a_t *state) {int volatile ___ = 1;(void)state;::exit(___);}
#if 0
#line 198
{ 
#line 199
return curand_MRG32k3a(state) * (2.328306549837829001e-10); 
#line 200
} 
#endif
#line 217 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\curand_uniform.h"
static __forceinline double2 curand_uniform2_double(curandStatePhilox4_32_10_t *state) {int volatile ___ = 1;(void)state;::exit(___);}
#if 0
#line 218
{ 
#line 219
uint4 _x; 
#line 220
double2 result; 
#line 221
_x = curand4(state); 
#line 222
(result.x) = _curand_uniform_double_hq(_x.x, _x.y); 
#line 223
(result.y) = _curand_uniform_double_hq(_x.z, _x.w); 
#line 224
return result; 
#line 225
} 
#endif
#line 229 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\curand_uniform.h"
static __forceinline double4 curand_uniform4_double(curandStatePhilox4_32_10_t *state) {int volatile ___ = 1;(void)state;::exit(___);}
#if 0
#line 230
{ 
#line 231
uint4 _x, _y; 
#line 232
double4 result; 
#line 233
_x = curand4(state); 
#line 234
_y = curand4(state); 
#line 235
(result.x) = _curand_uniform_double_hq(_x.x, _x.y); 
#line 236
(result.y) = _curand_uniform_double_hq(_x.z, _x.w); 
#line 237
(result.z) = _curand_uniform_double_hq(_y.x, _y.y); 
#line 238
(result.w) = _curand_uniform_double_hq(_y.z, _y.w); 
#line 239
return result; 
#line 240
} 
#endif
#line 255 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\curand_uniform.h"
static __forceinline float curand_uniform(curandStatePhilox4_32_10_t *state) {int volatile ___ = 1;(void)state;::exit(___);}
#if 0
#line 256
{ 
#line 257
return _curand_uniform(curand(state)); 
#line 258
} 
#endif
#line 273 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\curand_uniform.h"
static __forceinline float4 curand_uniform4(curandStatePhilox4_32_10_t *state) {int volatile ___ = 1;(void)state;::exit(___);}
#if 0
#line 274
{ 
#line 275
return _curand_uniform4(curand4(state)); 
#line 276
} 
#endif
#line 290 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\curand_uniform.h"
static __forceinline float curand_uniform(curandStateMtgp32_t *state) {int volatile ___ = 1;(void)state;::exit(___);}
#if 0
#line 291
{ 
#line 292
return _curand_uniform(curand(state)); 
#line 293
} 
#endif
#line 309 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\curand_uniform.h"
static __forceinline double curand_uniform_double(curandStateMtgp32_t *state) {int volatile ___ = 1;(void)state;::exit(___);}
#if 0
#line 310
{ 
#line 311
return _curand_uniform_double(curand(state)); 
#line 312
} 
#endif
#line 333 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\curand_uniform.h"
static __forceinline double curand_uniform_double(curandStatePhilox4_32_10_t *state) {int volatile ___ = 1;(void)state;::exit(___);}
#if 0
#line 334
{ 
#line 335
return _curand_uniform_double(curand(state)); 
#line 336
} 
#endif
#line 353 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\curand_uniform.h"
static __forceinline float curand_uniform(curandStateSobol32_t *state) {int volatile ___ = 1;(void)state;::exit(___);}
#if 0
#line 354
{ 
#line 355
return _curand_uniform(curand(state)); 
#line 356
} 
#endif
#line 376 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\curand_uniform.h"
static __forceinline double curand_uniform_double(curandStateSobol32_t *state) {int volatile ___ = 1;(void)state;::exit(___);}
#if 0
#line 377
{ 
#line 378
return _curand_uniform_double(curand(state)); 
#line 379
} 
#endif
#line 394 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\curand_uniform.h"
static __forceinline float curand_uniform(curandStateScrambledSobol32_t *state) {int volatile ___ = 1;(void)state;::exit(___);}
#if 0
#line 395
{ 
#line 396
return _curand_uniform(curand(state)); 
#line 397
} 
#endif
#line 417 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\curand_uniform.h"
static __forceinline double curand_uniform_double(curandStateScrambledSobol32_t *state) {int volatile ___ = 1;(void)state;::exit(___);}
#if 0
#line 418
{ 
#line 419
return _curand_uniform_double(curand(state)); 
#line 420
} 
#endif
#line 435 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\curand_uniform.h"
static __forceinline float curand_uniform(curandStateSobol64_t *state) {int volatile ___ = 1;(void)state;::exit(___);}
#if 0
#line 436
{ 
#line 437
return _curand_uniform(curand(state)); 
#line 438
} 
#endif
#line 455 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\curand_uniform.h"
static __forceinline double curand_uniform_double(curandStateSobol64_t *state) {int volatile ___ = 1;(void)state;::exit(___);}
#if 0
#line 456
{ 
#line 457
return _curand_uniform_double(curand(state)); 
#line 458
} 
#endif
#line 473 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\curand_uniform.h"
static __forceinline float curand_uniform(curandStateScrambledSobol64_t *state) {int volatile ___ = 1;(void)state;::exit(___);}
#if 0
#line 474
{ 
#line 475
return _curand_uniform(curand(state)); 
#line 476
} 
#endif
#line 493 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\curand_uniform.h"
static __forceinline double curand_uniform_double(curandStateScrambledSobol64_t *state) {int volatile ___ = 1;(void)state;::exit(___);}
#if 0
#line 494
{ 
#line 495
return _curand_uniform_double(curand(state)); 
#line 496
} 
#endif
#line 60 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\curand_normal_static.h"
__forceinline float _curand_normal_icdf(unsigned x) 
#line 61
{ 
#line 62
{ x++; return (0.0F); } 
#line 76 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\curand_normal_static.h"
} 
#line 78
__forceinline float _curand_normal_icdf(unsigned __int64 x) 
#line 79
{ 
#line 80
{ x++; return (0.0F); } 
#line 95 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\curand_normal_static.h"
} 
#line 97
__forceinline double _curand_normal_icdf_double(unsigned x) 
#line 98
{ 
#line 99
{ x++; return (0.0); } 
#line 113 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\curand_normal_static.h"
} 
#line 115
__forceinline double _curand_normal_icdf_double(unsigned __int64 x) 
#line 116
{ 
#line 117
{ x++; return (0.0); } 
#line 132 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\curand_normal_static.h"
} 
#line 70 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\curand_normal.h"
static __forceinline float2 _curand_box_muller(unsigned x, unsigned y) {int volatile ___ = 1;(void)x;(void)y;::exit(___);}
#if 0
#line 71
{ 
#line 72
float2 result; 
#line 73
float u = (x * (2.328306437e-10F)) + ((2.328306437e-10F) / (2)); 
#line 74
float v = (y * ((2.328306437e-10F) * (6.283185482F))) + (((2.328306437e-10F) * (6.283185482F)) / (2)); 
#line 75
float s; 
#line 76
{ s = sqrtf((-(2.0F)) * logf(u)); (result.x) = sinf(v); (result.y) = cosf(v); } 
#line 84 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\curand_normal.h"
(result.x) *= s; 
#line 85
(result.y) *= s; 
#line 86
return result; 
#line 87
} 
#endif
#line 89 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\curand_normal.h"
static __forceinline float2 curand_box_muller_mrg(curandStateMRG32k3a_t *state) {int volatile ___ = 1;(void)state;::exit(___);}
#if 0
#line 90
{ 
#line 91
float x, y; 
#line 92
x = curand_uniform(state); 
#line 93
y = (curand_uniform(state) * (6.283185482F)); 
#line 94
float2 result; 
#line 95
float s; 
#line 96
{ s = sqrtf((-(2.0F)) * logf(x)); (result.x) = sinf(y); (result.y) = cosf(y); } 
#line 104 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\curand_normal.h"
(result.x) *= s; 
#line 105
(result.y) *= s; 
#line 106
return result; 
#line 107
} 
#endif
#line 110 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\curand_normal.h"
static __forceinline double2 _curand_box_muller_double(unsigned x0, unsigned x1, unsigned 
#line 111
y0, unsigned y1) {int volatile ___ = 1;(void)x0;(void)x1;(void)y0;(void)y1;::exit(___);}
#if 0
#line 112
{ 
#line 113
double2 result; 
#line 114
unsigned __int64 zx = ((unsigned __int64)x0) ^ (((unsigned __int64)x1) << (53 - 32)); 
#line 116
double u = (zx * (1.11022302462515654e-16)) + ((1.11022302462515654e-16) / (2.0)); 
#line 117
unsigned __int64 zy = ((unsigned __int64)y0) ^ (((unsigned __int64)y1) << (53 - 32)); 
#line 119
double v = (zy * ((1.11022302462515654e-16) * (2.0))) + (1.11022302462515654e-16); 
#line 120
double s = sqrt((-(2.0)) * log(u)); 
#line 122
{ (result.x) = sin(v * (3.141592653589793116)); (result.y) = cos(v * (3.141592653589793116)); } 
#line 128 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\curand_normal.h"
(result.x) *= s; 
#line 129
(result.y) *= s; 
#line 131
return result; 
#line 132
} 
#endif
#line 135 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\curand_normal.h"
static __forceinline double2 curand_box_muller_mrg_double(curandStateMRG32k3a_t *state) {int volatile ___ = 1;(void)state;::exit(___);}
#if 0
#line 136
{ 
#line 137
double x, y; 
#line 138
double2 result; 
#line 139
x = curand_uniform_double(state); 
#line 140
y = (curand_uniform_double(state) * (2.0)); 
#line 142
double s = sqrt((-(2.0)) * log(x)); 
#line 143
{ (result.x) = sin(y * (3.141592653589793116)); (result.y) = cos(y * (3.141592653589793116)); } 
#line 149 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\curand_normal.h"
(result.x) *= s; 
#line 150
(result.y) *= s; 
#line 151
return result; 
#line 152
} 
#endif
#line 154 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\curand_normal.h"
template< class R> static __forceinline ::float2 
#line 155
curand_box_muller(R *state) {int volatile ___ = 1;(void)state;::exit(___);}
#if 0
#line 156
{ 
#line 157
::float2 result; 
#line 158
unsigned x = curand(state); 
#line 159
unsigned y = curand(state); 
#line 160
result = _curand_box_muller(x, y); 
#line 161
return result; 
#line 162
} 
#endif
#line 164 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\curand_normal.h"
template< class R> static __forceinline ::float4 
#line 165
curand_box_muller4(R *state) {int volatile ___ = 1;(void)state;::exit(___);}
#if 0
#line 166
{ 
#line 167
::float4 result; 
#line 168
::float2 _result; 
#line 169
::uint4 x = curand4(state); 
#line 171
_result = _curand_box_muller(x.x, x.y); 
#line 172
(result.x) = (_result.x); 
#line 173
(result.y) = (_result.y); 
#line 174
_result = _curand_box_muller(x.z, x.w); 
#line 175
(result.z) = (_result.x); 
#line 176
(result.w) = (_result.y); 
#line 177
return result; 
#line 178
} 
#endif
#line 180 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\curand_normal.h"
template< class R> static __forceinline ::double2 
#line 181
curand_box_muller_double(R *state) {int volatile ___ = 1;(void)state;::exit(___);}
#if 0
#line 182
{ 
#line 183
::double2 result; 
#line 184
unsigned x0 = curand(state); 
#line 185
unsigned x1 = curand(state); 
#line 186
unsigned y0 = curand(state); 
#line 187
unsigned y1 = curand(state); 
#line 188
result = _curand_box_muller_double(x0, x1, y0, y1); 
#line 189
return result; 
#line 190
} 
#endif
#line 192 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\curand_normal.h"
template< class R> static __forceinline ::double2 
#line 193
curand_box_muller2_double(R *state) {int volatile ___ = 1;(void)state;::exit(___);}
#if 0
#line 194
{ 
#line 195
::double2 result; 
#line 196
::uint4 _x; 
#line 197
_x = curand4(state); 
#line 198
result = _curand_box_muller_double(_x.x, _x.y, _x.z, _x.w); 
#line 199
return result; 
#line 200
} 
#endif
#line 203 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\curand_normal.h"
template< class R> static __forceinline ::double4 
#line 204
curand_box_muller4_double(R *state) {int volatile ___ = 1;(void)state;::exit(___);}
#if 0
#line 205
{ 
#line 206
::double4 result; 
#line 207
::double2 _res1; 
#line 208
::double2 _res2; 
#line 209
::uint4 _x; 
#line 210
::uint4 _y; 
#line 211
_x = curand4(state); 
#line 212
_y = curand4(state); 
#line 213
_res1 = _curand_box_muller_double(_x.x, _x.y, _x.z, _x.w); 
#line 214
_res2 = _curand_box_muller_double(_y.x, _y.y, _y.z, _y.w); 
#line 215
(result.x) = (_res1.x); 
#line 216
(result.y) = (_res1.y); 
#line 217
(result.z) = (_res2.x); 
#line 218
(result.w) = (_res2.y); 
#line 219
return result; 
#line 220
} 
#endif
#line 313 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\curand_normal.h"
static __forceinline float curand_normal(curandStateXORWOW_t *state) {int volatile ___ = 1;(void)state;::exit(___);}
#if 0
#line 314
{ 
#line 315
if ((state->boxmuller_flag) != 1) { 
#line 316
unsigned x, y; 
#line 317
x = curand(state); 
#line 318
y = curand(state); 
#line 319
float2 v = _curand_box_muller(x, y); 
#line 320
(state->boxmuller_extra) = (v.y); 
#line 321
(state->boxmuller_flag) = 1; 
#line 322
return v.x; 
#line 323
}  
#line 324
(state->boxmuller_flag) = 0; 
#line 325
return state->boxmuller_extra; 
#line 326
} 
#endif
#line 345 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\curand_normal.h"
static __forceinline float curand_normal(curandStatePhilox4_32_10_t *state) {int volatile ___ = 1;(void)state;::exit(___);}
#if 0
#line 346
{ 
#line 347
if ((state->boxmuller_flag) != 1) { 
#line 348
unsigned x, y; 
#line 349
x = curand(state); 
#line 350
y = curand(state); 
#line 351
float2 v = _curand_box_muller(x, y); 
#line 352
(state->boxmuller_extra) = (v.y); 
#line 353
(state->boxmuller_flag) = 1; 
#line 354
return v.x; 
#line 355
}  
#line 356
(state->boxmuller_flag) = 0; 
#line 357
return state->boxmuller_extra; 
#line 358
} 
#endif
#line 378 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\curand_normal.h"
static __forceinline float curand_normal(curandStateMRG32k3a_t *state) {int volatile ___ = 1;(void)state;::exit(___);}
#if 0
#line 379
{ 
#line 380
if ((state->boxmuller_flag) != 1) { 
#line 381
float2 v = curand_box_muller_mrg(state); 
#line 382
(state->boxmuller_extra) = (v.y); 
#line 383
(state->boxmuller_flag) = 1; 
#line 384
return v.x; 
#line 385
}  
#line 386
(state->boxmuller_flag) = 0; 
#line 387
return state->boxmuller_extra; 
#line 388
} 
#endif
#line 405 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\curand_normal.h"
static __forceinline float2 curand_normal2(curandStateXORWOW_t *state) {int volatile ___ = 1;(void)state;::exit(___);}
#if 0
#line 406
{ 
#line 407
return curand_box_muller(state); 
#line 408
} 
#endif
#line 424 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\curand_normal.h"
static __forceinline float2 curand_normal2(curandStatePhilox4_32_10_t *state) {int volatile ___ = 1;(void)state;::exit(___);}
#if 0
#line 425
{ 
#line 426
return curand_box_muller(state); 
#line 427
} 
#endif
#line 444 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\curand_normal.h"
static __forceinline float4 curand_normal4(curandStatePhilox4_32_10_t *state) {int volatile ___ = 1;(void)state;::exit(___);}
#if 0
#line 445
{ 
#line 446
return curand_box_muller4(state); 
#line 447
} 
#endif
#line 466 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\curand_normal.h"
static __forceinline float2 curand_normal2(curandStateMRG32k3a_t *state) {int volatile ___ = 1;(void)state;::exit(___);}
#if 0
#line 467
{ 
#line 468
return curand_box_muller_mrg(state); 
#line 469
} 
#endif
#line 485 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\curand_normal.h"
static __forceinline float curand_normal(curandStateMtgp32_t *state) {int volatile ___ = 1;(void)state;::exit(___);}
#if 0
#line 486
{ 
#line 487
return _curand_normal_icdf(curand(state)); 
#line 488
} 
#endif
#line 503 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\curand_normal.h"
static __forceinline float curand_normal(curandStateSobol32_t *state) {int volatile ___ = 1;(void)state;::exit(___);}
#if 0
#line 504
{ 
#line 505
return _curand_normal_icdf(curand(state)); 
#line 506
} 
#endif
#line 522 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\curand_normal.h"
static __forceinline float curand_normal(curandStateScrambledSobol32_t *state) {int volatile ___ = 1;(void)state;::exit(___);}
#if 0
#line 523
{ 
#line 524
return _curand_normal_icdf(curand(state)); 
#line 525
} 
#endif
#line 541 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\curand_normal.h"
static __forceinline float curand_normal(curandStateSobol64_t *state) {int volatile ___ = 1;(void)state;::exit(___);}
#if 0
#line 542
{ 
#line 543
return _curand_normal_icdf(curand(state)); 
#line 544
} 
#endif
#line 560 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\curand_normal.h"
static __forceinline float curand_normal(curandStateScrambledSobol64_t *state) {int volatile ___ = 1;(void)state;::exit(___);}
#if 0
#line 561
{ 
#line 562
return _curand_normal_icdf(curand(state)); 
#line 563
} 
#endif
#line 581 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\curand_normal.h"
static __forceinline double curand_normal_double(curandStateXORWOW_t *state) {int volatile ___ = 1;(void)state;::exit(___);}
#if 0
#line 582
{ 
#line 583
if ((state->boxmuller_flag_double) != 1) { 
#line 584
unsigned x0, x1, y0, y1; 
#line 585
x0 = curand(state); 
#line 586
x1 = curand(state); 
#line 587
y0 = curand(state); 
#line 588
y1 = curand(state); 
#line 589
double2 v = _curand_box_muller_double(x0, x1, y0, y1); 
#line 590
(state->boxmuller_extra_double) = (v.y); 
#line 591
(state->boxmuller_flag_double) = 1; 
#line 592
return v.x; 
#line 593
}  
#line 594
(state->boxmuller_flag_double) = 0; 
#line 595
return state->boxmuller_extra_double; 
#line 596
} 
#endif
#line 615 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\curand_normal.h"
static __forceinline double curand_normal_double(curandStatePhilox4_32_10_t *state) {int volatile ___ = 1;(void)state;::exit(___);}
#if 0
#line 616
{ 
#line 617
if ((state->boxmuller_flag_double) != 1) { 
#line 618
uint4 _x; 
#line 619
_x = curand4(state); 
#line 620
double2 v = _curand_box_muller_double(_x.x, _x.y, _x.z, _x.w); 
#line 621
(state->boxmuller_extra_double) = (v.y); 
#line 622
(state->boxmuller_flag_double) = 1; 
#line 623
return v.x; 
#line 624
}  
#line 625
(state->boxmuller_flag_double) = 0; 
#line 626
return state->boxmuller_extra_double; 
#line 627
} 
#endif
#line 646 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\curand_normal.h"
static __forceinline double curand_normal_double(curandStateMRG32k3a_t *state) {int volatile ___ = 1;(void)state;::exit(___);}
#if 0
#line 647
{ 
#line 648
if ((state->boxmuller_flag_double) != 1) { 
#line 649
double2 v = curand_box_muller_mrg_double(state); 
#line 650
(state->boxmuller_extra_double) = (v.y); 
#line 651
(state->boxmuller_flag_double) = 1; 
#line 652
return v.x; 
#line 653
}  
#line 654
(state->boxmuller_flag_double) = 0; 
#line 655
return state->boxmuller_extra_double; 
#line 656
} 
#endif
#line 673 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\curand_normal.h"
static __forceinline double2 curand_normal2_double(curandStateXORWOW_t *state) {int volatile ___ = 1;(void)state;::exit(___);}
#if 0
#line 674
{ 
#line 675
return curand_box_muller_double(state); 
#line 676
} 
#endif
#line 693 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\curand_normal.h"
static __forceinline double2 curand_normal2_double(curandStatePhilox4_32_10_t *state) {int volatile ___ = 1;(void)state;::exit(___);}
#if 0
#line 694
{ 
#line 695
uint4 _x; 
#line 696
double2 result; 
#line 698
_x = curand4(state); 
#line 699
double2 v1 = _curand_box_muller_double(_x.x, _x.y, _x.z, _x.w); 
#line 700
(result.x) = (v1.x); 
#line 701
(result.y) = (v1.y); 
#line 703
return result; 
#line 704
} 
#endif
#line 707 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\curand_normal.h"
static __forceinline double4 curand_normal4_double(curandStatePhilox4_32_10_t *state) {int volatile ___ = 1;(void)state;::exit(___);}
#if 0
#line 708
{ 
#line 709
uint4 _x; 
#line 710
uint4 _y; 
#line 711
double4 result; 
#line 713
_x = curand4(state); 
#line 714
_y = curand4(state); 
#line 715
double2 v1 = _curand_box_muller_double(_x.x, _x.y, _x.z, _x.w); 
#line 716
double2 v2 = _curand_box_muller_double(_y.x, _y.y, _y.z, _y.w); 
#line 717
(result.x) = (v1.x); 
#line 718
(result.y) = (v1.y); 
#line 719
(result.z) = (v2.x); 
#line 720
(result.w) = (v2.y); 
#line 722
return result; 
#line 723
} 
#endif
#line 741 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\curand_normal.h"
static __forceinline double2 curand_normal2_double(curandStateMRG32k3a_t *state) {int volatile ___ = 1;(void)state;::exit(___);}
#if 0
#line 742
{ 
#line 743
return curand_box_muller_mrg_double(state); 
#line 744
} 
#endif
#line 760 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\curand_normal.h"
static __forceinline double curand_normal_double(curandStateMtgp32_t *state) {int volatile ___ = 1;(void)state;::exit(___);}
#if 0
#line 761
{ 
#line 762
return _curand_normal_icdf_double(curand(state)); 
#line 763
} 
#endif
#line 779 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\curand_normal.h"
static __forceinline double curand_normal_double(curandStateSobol32_t *state) {int volatile ___ = 1;(void)state;::exit(___);}
#if 0
#line 780
{ 
#line 781
return _curand_normal_icdf_double(curand(state)); 
#line 782
} 
#endif
#line 798 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\curand_normal.h"
static __forceinline double curand_normal_double(curandStateScrambledSobol32_t *state) {int volatile ___ = 1;(void)state;::exit(___);}
#if 0
#line 799
{ 
#line 800
return _curand_normal_icdf_double(curand(state)); 
#line 801
} 
#endif
#line 817 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\curand_normal.h"
static __forceinline double curand_normal_double(curandStateSobol64_t *state) {int volatile ___ = 1;(void)state;::exit(___);}
#if 0
#line 818
{ 
#line 819
return _curand_normal_icdf_double(curand(state)); 
#line 820
} 
#endif
#line 836 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\curand_normal.h"
static __forceinline double curand_normal_double(curandStateScrambledSobol64_t *state) {int volatile ___ = 1;(void)state;::exit(___);}
#if 0
#line 837
{ 
#line 838
return _curand_normal_icdf_double(curand(state)); 
#line 839
} 
#endif
#line 88 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\curand_lognormal.h"
static __forceinline float curand_log_normal(curandStateXORWOW_t *state, float mean, float stddev) {int volatile ___ = 1;(void)state;(void)mean;(void)stddev;::exit(___);}
#if 0
#line 89
{ 
#line 90
if ((state->boxmuller_flag) != 2) { 
#line 91
unsigned x, y; 
#line 92
x = curand(state); 
#line 93
y = curand(state); 
#line 94
float2 v = _curand_box_muller(x, y); 
#line 95
(state->boxmuller_extra) = expf(mean + (stddev * (v.y))); 
#line 96
(state->boxmuller_flag) = 2; 
#line 97
return expf(mean + (stddev * (v.x))); 
#line 98
}  
#line 99
(state->boxmuller_flag) = 0; 
#line 100
return state->boxmuller_extra; 
#line 101
} 
#endif
#line 124 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\curand_lognormal.h"
static __forceinline float curand_log_normal(curandStatePhilox4_32_10_t *state, float mean, float stddev) {int volatile ___ = 1;(void)state;(void)mean;(void)stddev;::exit(___);}
#if 0
#line 125
{ 
#line 126
if ((state->boxmuller_flag) != 2) { 
#line 127
unsigned x, y; 
#line 128
x = curand(state); 
#line 129
y = curand(state); 
#line 130
float2 v = _curand_box_muller(x, y); 
#line 131
(state->boxmuller_extra) = expf(mean + (stddev * (v.y))); 
#line 132
(state->boxmuller_flag) = 2; 
#line 133
return expf(mean + (stddev * (v.x))); 
#line 134
}  
#line 135
(state->boxmuller_flag) = 0; 
#line 136
return state->boxmuller_extra; 
#line 137
} 
#endif
#line 157 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\curand_lognormal.h"
static __forceinline float2 curand_log_normal2(curandStateXORWOW_t *state, float mean, float stddev) {int volatile ___ = 1;(void)state;(void)mean;(void)stddev;::exit(___);}
#if 0
#line 158
{ 
#line 159
float2 v = curand_box_muller(state); 
#line 160
(v.x) = expf(mean + (stddev * (v.x))); 
#line 161
(v.y) = expf(mean + (stddev * (v.y))); 
#line 162
return v; 
#line 163
} 
#endif
#line 183 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\curand_lognormal.h"
static __forceinline float2 curand_log_normal2(curandStatePhilox4_32_10_t *state, float mean, float stddev) {int volatile ___ = 1;(void)state;(void)mean;(void)stddev;::exit(___);}
#if 0
#line 184
{ 
#line 185
float2 v = curand_box_muller(state); 
#line 186
(v.x) = expf(mean + (stddev * (v.x))); 
#line 187
(v.y) = expf(mean + (stddev * (v.y))); 
#line 188
return v; 
#line 189
} 
#endif
#line 208 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\curand_lognormal.h"
static __forceinline float4 curand_log_normal4(curandStatePhilox4_32_10_t *state, float mean, float stddev) {int volatile ___ = 1;(void)state;(void)mean;(void)stddev;::exit(___);}
#if 0
#line 209
{ 
#line 210
float4 v = curand_box_muller4(state); 
#line 211
(v.x) = expf(mean + (stddev * (v.x))); 
#line 212
(v.y) = expf(mean + (stddev * (v.y))); 
#line 213
(v.z) = expf(mean + (stddev * (v.z))); 
#line 214
(v.w) = expf(mean + (stddev * (v.w))); 
#line 215
return v; 
#line 216
} 
#endif
#line 238 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\curand_lognormal.h"
static __forceinline float curand_log_normal(curandStateMRG32k3a_t *state, float mean, float stddev) {int volatile ___ = 1;(void)state;(void)mean;(void)stddev;::exit(___);}
#if 0
#line 239
{ 
#line 240
if ((state->boxmuller_flag) != 2) { 
#line 241
float2 v = curand_box_muller_mrg(state); 
#line 242
(state->boxmuller_extra) = expf(mean + (stddev * (v.y))); 
#line 243
(state->boxmuller_flag) = 2; 
#line 244
return expf(mean + (stddev * (v.x))); 
#line 245
}  
#line 246
(state->boxmuller_flag) = 0; 
#line 247
return state->boxmuller_extra; 
#line 248
} 
#endif
#line 268 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\curand_lognormal.h"
static __forceinline float2 curand_log_normal2(curandStateMRG32k3a_t *state, float mean, float stddev) {int volatile ___ = 1;(void)state;(void)mean;(void)stddev;::exit(___);}
#if 0
#line 269
{ 
#line 270
float2 v = curand_box_muller_mrg(state); 
#line 271
(v.x) = expf(mean + (stddev * (v.x))); 
#line 272
(v.y) = expf(mean + (stddev * (v.y))); 
#line 273
return v; 
#line 274
} 
#endif
#line 294 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\curand_lognormal.h"
static __forceinline float curand_log_normal(curandStateMtgp32_t *state, float mean, float stddev) {int volatile ___ = 1;(void)state;(void)mean;(void)stddev;::exit(___);}
#if 0
#line 295
{ 
#line 296
return expf(mean + (stddev * _curand_normal_icdf(curand(state)))); 
#line 297
} 
#endif
#line 317 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\curand_lognormal.h"
static __forceinline float curand_log_normal(curandStateSobol32_t *state, float mean, float stddev) {int volatile ___ = 1;(void)state;(void)mean;(void)stddev;::exit(___);}
#if 0
#line 318
{ 
#line 319
return expf(mean + (stddev * _curand_normal_icdf(curand(state)))); 
#line 320
} 
#endif
#line 339 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\curand_lognormal.h"
static __forceinline float curand_log_normal(curandStateScrambledSobol32_t *state, float mean, float stddev) {int volatile ___ = 1;(void)state;(void)mean;(void)stddev;::exit(___);}
#if 0
#line 340
{ 
#line 341
return expf(mean + (stddev * _curand_normal_icdf(curand(state)))); 
#line 342
} 
#endif
#line 362 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\curand_lognormal.h"
static __forceinline float curand_log_normal(curandStateSobol64_t *state, float mean, float stddev) {int volatile ___ = 1;(void)state;(void)mean;(void)stddev;::exit(___);}
#if 0
#line 363
{ 
#line 364
return expf(mean + (stddev * _curand_normal_icdf(curand(state)))); 
#line 365
} 
#endif
#line 385 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\curand_lognormal.h"
static __forceinline float curand_log_normal(curandStateScrambledSobol64_t *state, float mean, float stddev) {int volatile ___ = 1;(void)state;(void)mean;(void)stddev;::exit(___);}
#if 0
#line 386
{ 
#line 387
return expf(mean + (stddev * _curand_normal_icdf(curand(state)))); 
#line 388
} 
#endif
#line 411 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\curand_lognormal.h"
static __forceinline double curand_log_normal_double(curandStateXORWOW_t *state, double mean, double stddev) {int volatile ___ = 1;(void)state;(void)mean;(void)stddev;::exit(___);}
#if 0
#line 412
{ 
#line 413
if ((state->boxmuller_flag_double) != 2) { 
#line 414
unsigned x0, x1, y0, y1; 
#line 415
x0 = curand(state); 
#line 416
x1 = curand(state); 
#line 417
y0 = curand(state); 
#line 418
y1 = curand(state); 
#line 419
double2 v = _curand_box_muller_double(x0, x1, y0, y1); 
#line 420
(state->boxmuller_extra_double) = exp(mean + (stddev * (v.y))); 
#line 421
(state->boxmuller_flag_double) = 2; 
#line 422
return exp(mean + (stddev * (v.x))); 
#line 423
}  
#line 424
(state->boxmuller_flag_double) = 0; 
#line 425
return state->boxmuller_extra_double; 
#line 426
} 
#endif
#line 449 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\curand_lognormal.h"
static __forceinline double curand_log_normal_double(curandStatePhilox4_32_10_t *state, double mean, double stddev) {int volatile ___ = 1;(void)state;(void)mean;(void)stddev;::exit(___);}
#if 0
#line 450
{ 
#line 451
if ((state->boxmuller_flag_double) != 2) { 
#line 452
uint4 _x; 
#line 453
_x = curand4(state); 
#line 454
double2 v = _curand_box_muller_double(_x.x, _x.y, _x.z, _x.w); 
#line 455
(state->boxmuller_extra_double) = exp(mean + (stddev * (v.y))); 
#line 456
(state->boxmuller_flag_double) = 2; 
#line 457
return exp(mean + (stddev * (v.x))); 
#line 458
}  
#line 459
(state->boxmuller_flag_double) = 0; 
#line 460
return state->boxmuller_extra_double; 
#line 461
} 
#endif
#line 482 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\curand_lognormal.h"
static __forceinline double2 curand_log_normal2_double(curandStateXORWOW_t *state, double mean, double stddev) {int volatile ___ = 1;(void)state;(void)mean;(void)stddev;::exit(___);}
#if 0
#line 483
{ 
#line 484
double2 v = curand_box_muller_double(state); 
#line 485
(v.x) = exp(mean + (stddev * (v.x))); 
#line 486
(v.y) = exp(mean + (stddev * (v.y))); 
#line 487
return v; 
#line 488
} 
#endif
#line 508 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\curand_lognormal.h"
static __forceinline double2 curand_log_normal2_double(curandStatePhilox4_32_10_t *state, double mean, double stddev) {int volatile ___ = 1;(void)state;(void)mean;(void)stddev;::exit(___);}
#if 0
#line 509
{ 
#line 510
double2 v = curand_box_muller2_double(state); 
#line 511
(v.x) = exp(mean + (stddev * (v.x))); 
#line 512
(v.y) = exp(mean + (stddev * (v.y))); 
#line 513
return v; 
#line 514
} 
#endif
#line 516 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\curand_lognormal.h"
static __forceinline double4 curand_log_normal4_double(curandStatePhilox4_32_10_t *state, double mean, double stddev) {int volatile ___ = 1;(void)state;(void)mean;(void)stddev;::exit(___);}
#if 0
#line 517
{ 
#line 518
double4 v = curand_box_muller4_double(state); 
#line 519
(v.x) = exp(mean + (stddev * (v.x))); 
#line 520
(v.y) = exp(mean + (stddev * (v.y))); 
#line 521
(v.z) = exp(mean + (stddev * (v.z))); 
#line 522
(v.w) = exp(mean + (stddev * (v.w))); 
#line 523
return v; 
#line 524
} 
#endif
#line 546 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\curand_lognormal.h"
static __forceinline double curand_log_normal_double(curandStateMRG32k3a_t *state, double mean, double stddev) {int volatile ___ = 1;(void)state;(void)mean;(void)stddev;::exit(___);}
#if 0
#line 547
{ 
#line 548
if ((state->boxmuller_flag_double) != 2) { 
#line 549
double2 v = curand_box_muller_mrg_double(state); 
#line 550
(state->boxmuller_extra_double) = exp(mean + (stddev * (v.y))); 
#line 551
(state->boxmuller_flag_double) = 2; 
#line 552
return exp(mean + (stddev * (v.x))); 
#line 553
}  
#line 554
(state->boxmuller_flag_double) = 0; 
#line 555
return state->boxmuller_extra_double; 
#line 556
} 
#endif
#line 576 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\curand_lognormal.h"
static __forceinline double2 curand_log_normal2_double(curandStateMRG32k3a_t *state, double mean, double stddev) {int volatile ___ = 1;(void)state;(void)mean;(void)stddev;::exit(___);}
#if 0
#line 577
{ 
#line 578
double2 v = curand_box_muller_mrg_double(state); 
#line 579
(v.x) = exp(mean + (stddev * (v.x))); 
#line 580
(v.y) = exp(mean + (stddev * (v.y))); 
#line 581
return v; 
#line 582
} 
#endif
#line 602 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\curand_lognormal.h"
static __forceinline double curand_log_normal_double(curandStateMtgp32_t *state, double mean, double stddev) {int volatile ___ = 1;(void)state;(void)mean;(void)stddev;::exit(___);}
#if 0
#line 603
{ 
#line 604
return exp(mean + (stddev * _curand_normal_icdf_double(curand(state)))); 
#line 605
} 
#endif
#line 625 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\curand_lognormal.h"
static __forceinline double curand_log_normal_double(curandStateSobol32_t *state, double mean, double stddev) {int volatile ___ = 1;(void)state;(void)mean;(void)stddev;::exit(___);}
#if 0
#line 626
{ 
#line 627
return exp(mean + (stddev * _curand_normal_icdf_double(curand(state)))); 
#line 628
} 
#endif
#line 648 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\curand_lognormal.h"
static __forceinline double curand_log_normal_double(curandStateScrambledSobol32_t *state, double mean, double stddev) {int volatile ___ = 1;(void)state;(void)mean;(void)stddev;::exit(___);}
#if 0
#line 649
{ 
#line 650
return exp(mean + (stddev * _curand_normal_icdf_double(curand(state)))); 
#line 651
} 
#endif
#line 670 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\curand_lognormal.h"
static __forceinline double curand_log_normal_double(curandStateSobol64_t *state, double mean, double stddev) {int volatile ___ = 1;(void)state;(void)mean;(void)stddev;::exit(___);}
#if 0
#line 671
{ 
#line 672
return exp(mean + (stddev * _curand_normal_icdf_double(curand(state)))); 
#line 673
} 
#endif
#line 692 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\curand_lognormal.h"
static __forceinline double curand_log_normal_double(curandStateScrambledSobol64_t *state, double mean, double stddev) {int volatile ___ = 1;(void)state;(void)mean;(void)stddev;::exit(___);}
#if 0
#line 693
{ 
#line 694
return exp(mean + (stddev * _curand_normal_icdf_double(curand(state)))); 
#line 695
} 
#endif
#line 74 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\curand_poisson.h"
static __forceinline float __cr_rsqrt(float a) {int volatile ___ = 1;(void)a;::exit(___);}
#if 0
#line 75
{ 
#line 76
{ a = ((1.0F) / sqrtf(a)); } 
#line 81 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\curand_poisson.h"
return a; 
#line 82
} 
#endif
#line 84 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\curand_poisson.h"
static __forceinline float __cr_exp(float a) {int volatile ___ = 1;(void)a;::exit(___);}
#if 0
#line 85
{ 
#line 86
{ a = expf(a); } 
#line 92 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\curand_poisson.h"
return a; 
#line 93
} 
#endif
#line 95 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\curand_poisson.h"
static __forceinline float __cr_log(float a) {int volatile ___ = 1;(void)a;::exit(___);}
#if 0
#line 96
{ 
#line 97
{ a = logf(a); } 
#line 103 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\curand_poisson.h"
return a; 
#line 104
} 
#endif
#line 106 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\curand_poisson.h"
static __forceinline float __cr_rcp(float a) {int volatile ___ = 1;(void)a;::exit(___);}
#if 0
#line 107
{ 
#line 108
{ a = ((1.0F) / a); } 
#line 113 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\curand_poisson.h"
return a; 
#line 114
} 
#endif
#line 117 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\curand_poisson.h"
static __forceinline float __cr_pgammainc(float a, float x) {int volatile ___ = 1;(void)a;(void)x;::exit(___);}
#if 0
#line 118
{ 
#line 119
float t, alpha, beta; 
#line 122
float ma1 = (1.432480335F), 
#line 123
ma2 = (0.1240097955F), 
#line 124
ma3 = (0.0002536107495F), 
#line 125
mb1 = (0.210967347F), 
#line 126
mb2 = (1.973811626F), 
#line 127
mb3 = (0.9420173168F); 
#line 131
alpha = __cr_rsqrt(a - ma2); 
#line 132
alpha = ((ma1 * alpha) + ma3); 
#line 133
beta = __cr_rsqrt(a - mb2); 
#line 134
beta = ((mb1 * beta) + mb3); 
#line 138
t = (a - x); 
#line 139
t = ((alpha * t) - beta); 
#line 140
t = ((1.0F) + __cr_exp(t)); 
#line 141
t = (t * t); 
#line 142
t = __cr_rcp(t); 
#line 147
return t; 
#line 148
} 
#endif
#line 151 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\curand_poisson.h"
static __forceinline float __cr_pgammaincinv(float a, float y) {int volatile ___ = 1;(void)a;(void)y;::exit(___);}
#if 0
#line 152
{ 
#line 153
float t, alpha, beta; 
#line 157
float ma1 = (1.432480335F), 
#line 158
ma2 = (0.1240097955F), 
#line 159
ma3 = (0.0002536107495F), 
#line 160
mb1 = (0.210967347F), 
#line 161
mb2 = (1.973811626F), 
#line 162
mb3 = (0.9420173168F); 
#line 166
alpha = __cr_rsqrt(a - ma2); 
#line 167
alpha = ((ma1 * alpha) + ma3); 
#line 168
beta = __cr_rsqrt(a - mb2); 
#line 169
beta = ((mb1 * beta) + mb3); 
#line 173
t = (__cr_rsqrt(y) - (1.0F)); 
#line 174
t = __cr_log(t); 
#line 175
t = (beta + t); 
#line 176
t = (((-t) * __cr_rcp(alpha)) + a); 
#line 179
return t; 
#line 180
} 
#endif
#line 185 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\curand_poisson.h"
static double __cr_lgamma_table[9]; 
#line 199 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\curand_poisson.h"
static __forceinline double __cr_lgamma_integer(int a) {int volatile ___ = 1;(void)a;::exit(___);}
#if 0
#line 200
{ 
#line 201
double s; 
#line 202
double t; 
#line 203
double fa = fabs((float)a); 
#line 204
double sum; 
#line 206
if (a > 8) { 
#line 210
s = ((1.0) / fa); 
#line 211
t = (s * s); 
#line 212
sum = (-(0.001633436431000000058)); 
#line 213
sum = ((sum * t) + (0.0008364587892200000012)); 
#line 214
sum = ((sum * t) - (0.000595189686119699992)); 
#line 215
sum = ((sum * t) + (0.0007936505764934540137)); 
#line 216
sum = ((sum * t) - (0.002777777777358650044)); 
#line 217
sum = ((sum * t) + (0.08333333333333310666)); 
#line 218
sum = ((sum * s) + (0.9189385332046720034)); 
#line 219
s = ((0.5) * log(fa)); 
#line 220
t = (fa - (0.5)); 
#line 221
s = (s * t); 
#line 222
t = (s - fa); 
#line 223
s = (s + sum); 
#line 224
t = (t + s); 
#line 225
return t; 
#line 226
} else { 
#line 227
{ switch (a) { case 1:  return (0.0); case 2:  return (0.0); case 3:  return (0.6931471805599452862); case 4:  return (1.791759469228054957); case 5:  return (3.178053830347945752); case 6:  return (4.787491742782045812); case 7:  return (6.579251212010101213); case 8:  return (8.525161361065414667); default:  return (10.60460290274525086); }  } 
#line 242 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\curand_poisson.h"
}  
#line 243
} 
#endif
#line 246 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\curand_poisson.h"
template< class T> static __forceinline unsigned 
#line 248
curand_poisson_knuth(T *state, float lambda) {int volatile ___ = 1;(void)state;(void)lambda;::exit(___);}
#if 0
#line 249
{ 
#line 250
unsigned k = (0); 
#line 251
float p = expf(lambda); 
#line 252
do { 
#line 253
k++; 
#line 254
p *= curand_uniform(state); 
#line 255
} while (p > (1.0)); 
#line 256
return k - (1); 
#line 257
} 
#endif
#line 259 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\curand_poisson.h"
template< class T> static __forceinline ::uint4 
#line 261
curand_poisson_knuth4(T *state, float lambda) {int volatile ___ = 1;(void)state;(void)lambda;::exit(___);}
#if 0
#line 262
{ 
#line 263
::uint4 k = {(0), (0), (0), (0)}; 
#line 264
float exp_lambda = expf(lambda); 
#line 265
::float4 p = {exp_lambda, exp_lambda, exp_lambda, exp_lambda}; 
#line 266
do { 
#line 267
(k.x)++; 
#line 268
(p.x) *= curand_uniform(state); 
#line 269
} while ((p.x) > (1.0)); 
#line 270
do { 
#line 271
(k.y)++; 
#line 272
(p.y) *= curand_uniform(state); 
#line 273
} while ((p.y) > (1.0)); 
#line 274
do { 
#line 275
(k.z)++; 
#line 276
(p.z) *= curand_uniform(state); 
#line 277
} while ((p.z) > (1.0)); 
#line 278
do { 
#line 279
(k.w)++; 
#line 280
(p.w) *= curand_uniform(state); 
#line 281
} while ((p.w) > (1.0)); 
#line 283
(k.x)--; 
#line 284
(k.y)--; 
#line 285
(k.z)--; 
#line 286
(k.w)--; 
#line 287
return k; 
#line 288
} 
#endif
#line 290 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\curand_poisson.h"
template< class T> static __forceinline unsigned 
#line 292
_curand_M2_double(T x, ::curandDistributionM2Shift_t distributionM2) {int volatile ___ = 1;(void)x;(void)distributionM2;::exit(___);}
#if 0
#line 293
{ 
#line 294
double u = _curand_uniform_double(x); 
#line 295
int j = (int)floor((distributionM2->length) * u); 
#line 297
double histogramVj; 
#line 298
unsigned histogramKj; 
#line 299
{ histogramVj = (((distributionM2->histogram)->V)[j]); histogramKj = (((distributionM2->histogram)->K)[j]); } 
#line 308 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\curand_poisson.h"
if (u < histogramVj) { return (distributionM2->shift) + j; }  
#line 309
return (distributionM2->shift) + histogramKj; 
#line 310
} 
#endif
#line 312 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\curand_poisson.h"
template< class T> static __forceinline ::uint4 
#line 314
_curand_M2_double4(T x, ::curandDistributionM2Shift_t distributionM2) {int volatile ___ = 1;(void)x;(void)distributionM2;::exit(___);}
#if 0
#line 315
{ 
#line 316
::double4 u; 
#line 317
::uint4 result = {(0), (0), (0), (0)}; 
#line 318
::int4 flag = {1, 1, 1, 1}; 
#line 320
(u.x) = _curand_uniform_double((x.x)); 
#line 321
(u.y) = _curand_uniform_double((x.y)); 
#line 322
(u.z) = _curand_uniform_double((x.z)); 
#line 323
(u.w) = _curand_uniform_double((x.w)); 
#line 325
::int4 j; 
#line 326
(j.x) = ((int)floor((distributionM2->length) * (u.x))); 
#line 327
(j.y) = ((int)floor((distributionM2->length) * (u.y))); 
#line 328
(j.z) = ((int)floor((distributionM2->length) * (u.z))); 
#line 329
(j.w) = ((int)floor((distributionM2->length) * (u.w))); 
#line 332
double histogramVjx; 
#line 333
double histogramVjy; 
#line 334
double histogramVjz; 
#line 335
double histogramVjw; 
#line 336
unsigned histogramKjx; 
#line 337
unsigned histogramKjy; 
#line 338
unsigned histogramKjz; 
#line 339
unsigned histogramKjw; 
#line 340
{ histogramVjx = (((distributionM2->histogram)->V)[j.x]); histogramVjy = (((distributionM2->histogram)->V)[j.y]); histogramVjz = (((distributionM2->histogram)->V)[j.z]); histogramVjw = (((distributionM2->histogram)->V)[j.w]); histogramKjx = (((distributionM2->histogram)->K)[j.x]); histogramKjy = (((distributionM2->histogram)->K)[j.y]); histogramKjz = (((distributionM2->histogram)->K)[j.z]); histogramKjw = (((distributionM2->histogram)->K)[j.w]); } 
#line 362 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\curand_poisson.h"
if ((u.x) < histogramVjx) { (result.x) = ((distributionM2->shift) + (j.x)); (flag.x) = 0; }  
#line 363
if ((u.y) < histogramVjy) { (result.y) = ((distributionM2->shift) + (j.y)); (flag.y) = 0; }  
#line 364
if ((u.z) < histogramVjz) { (result.z) = ((distributionM2->shift) + (j.z)); (flag.z) = 0; }  
#line 365
if ((u.w) < histogramVjw) { (result.w) = ((distributionM2->shift) + (j.w)); (flag.w) = 0; }  
#line 368
if (flag.x) { (result.x) = ((distributionM2->shift) + histogramKjx); }  
#line 369
if (flag.y) { (result.y) = ((distributionM2->shift) + histogramKjy); }  
#line 370
if (flag.z) { (result.z) = ((distributionM2->shift) + histogramKjz); }  
#line 371
if (flag.w) { (result.w) = ((distributionM2->shift) + histogramKjw); }  
#line 373
return result; 
#line 374
} 
#endif
#line 376 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\curand_poisson.h"
template< class STATE> static __forceinline unsigned 
#line 377
curand_M2_double(STATE *state, ::curandDistributionM2Shift_t distributionM2) {int volatile ___ = 1;(void)state;(void)distributionM2;::exit(___);}
#if 0
#line 378
{ 
#line 379
return _curand_M2_double(curand(state), distributionM2); 
#line 380
} 
#endif
#line 382 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\curand_poisson.h"
template< class STATE> static __forceinline ::uint4 
#line 383
curand_M2_double4(STATE *state, ::curandDistributionM2Shift_t distributionM2) {int volatile ___ = 1;(void)state;(void)distributionM2;::exit(___);}
#if 0
#line 384
{ 
#line 385
return _curand_M2_double4(curand4(state), distributionM2); 
#line 386
} 
#endif
#line 389 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\curand_poisson.h"
template< class T> static __forceinline unsigned 
#line 390
_curand_binary_search_double(T x, ::curandDistributionShift_t distribution) {int volatile ___ = 1;(void)x;(void)distribution;::exit(___);}
#if 0
#line 391
{ 
#line 392
double u = _curand_uniform_double(x); 
#line 393
int min = 0; 
#line 394
int max = (distribution->length) - (1); 
#line 395
do { 
#line 396
int mid = (max + min) / 2; 
#line 397
double probability_mid; 
#line 398
{ probability_mid = ((distribution->probability)[mid]); } 
#line 403 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\curand_poisson.h"
if (u <= probability_mid) { 
#line 404
max = mid; 
#line 405
} else { 
#line 406
min = (mid + 1); 
#line 407
}  
#line 408
} while (min < max); 
#line 409
return (distribution->shift) + min; 
#line 410
} 
#endif
#line 412 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\curand_poisson.h"
template< class STATE> static __forceinline unsigned 
#line 413
curand_binary_search_double(STATE *state, ::curandDistributionShift_t distribution) {int volatile ___ = 1;(void)state;(void)distribution;::exit(___);}
#if 0
#line 414
{ 
#line 415
return _curand_binary_search_double(curand(state), distribution); 
#line 416
} 
#endif
#line 421 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\curand_poisson.h"
static __forceinline double _curand_uniform_double_excluding_one(unsigned x) {int volatile ___ = 1;(void)x;::exit(___);}
#if 0
#line 422
{ 
#line 423
return (x * (2.328306436538696289e-10)) + ((2.328306436538696289e-10) / (2.0)); 
#line 424
} 
#endif
#line 428 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\curand_poisson.h"
static __forceinline double _curand_uniform_double_excluding_one(unsigned __int64 x) {int volatile ___ = 1;(void)x;::exit(___);}
#if 0
#line 429
{ 
#line 430
return ((x >> 11) * (1.11022302462515654e-16)) + ((1.11022302462515654e-16) / (4.0)); 
#line 431
} 
#endif
#line 434 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\curand_poisson.h"
template< class T> static __forceinline unsigned 
#line 436
_curand_poisson_ITR_double(T x, double lambda) {int volatile ___ = 1;(void)x;(void)lambda;::exit(___);}
#if 0
#line 437
{ 
#line 438
double L, p = (1.0); 
#line 439
double q = (1.0); 
#line 440
unsigned k = (0); 
#line 441
int pow = 0; 
#line 445
double u = _curand_uniform_double_excluding_one(x); 
#line 446
do { 
#line 447
if (lambda > ((double)(pow + (500.0)))) { 
#line 448
L = exp(-(500.0)); 
#line 449
} else { 
#line 450
L = exp((double)(pow - lambda)); 
#line 451
}  
#line 452
p *= L; 
#line 453
q *= L; 
#line 454
pow += ((int)(500.0)); 
#line 455
while (u > q) { 
#line 456
k++; 
#line 457
p *= (((double)lambda) / ((double)k)); 
#line 458
q += p; 
#line 459
}  
#line 460
} while (((double)pow) < lambda); 
#line 461
return k; 
#line 462
} 
#endif
#line 464 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\curand_poisson.h"
template< class T> static __forceinline unsigned 
#line 466
curand_poisson_gammainc(T state, float lambda) {int volatile ___ = 1;(void)state;(void)lambda;::exit(___);}
#if 0
#line 466
{ 
#line 467
float y, x, t, z, v; 
#line 468
float logl = __cr_log(lambda); 
#line 469
while (true) { 
#line 470
y = curand_uniform(state); 
#line 471
x = __cr_pgammaincinv(lambda, y); 
#line 472
x = floorf(x); 
#line 473
z = curand_uniform(state); 
#line 474
v = ((__cr_pgammainc(lambda, x + (1.0F)) - __cr_pgammainc(lambda, x)) * (1.299999952F)); 
#line 475
z = (z * v); 
#line 476
t = ((float)__cr_exp(((-lambda) + (x * logl)) - ((float)__cr_lgamma_integer((int)((1.0F) + x))))); 
#line 477
if ((z < t) && (v >= (9.999999999999999452e-21))) { 
#line 478
break; }  
#line 479
}  
#line 480
return (unsigned)x; 
#line 481
} 
#endif
#line 483 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\curand_poisson.h"
template< class T> static __forceinline ::uint4 
#line 485
curand_poisson_gammainc4(T state, float lambda) {int volatile ___ = 1;(void)state;(void)lambda;::exit(___);}
#if 0
#line 485
{ 
#line 486
::uint4 result; 
#line 487
float y, x, t, z, v; 
#line 488
float logl = __cr_log(lambda); 
#line 489
while (true) { 
#line 490
y = curand_uniform(state); 
#line 491
x = __cr_pgammaincinv(lambda, y); 
#line 492
x = floorf(x); 
#line 493
z = curand_uniform(state); 
#line 494
v = ((__cr_pgammainc(lambda, x + (1.0F)) - __cr_pgammainc(lambda, x)) * (1.299999952F)); 
#line 495
z = (z * v); 
#line 496
t = ((float)__cr_exp(((-lambda) + (x * logl)) - ((float)__cr_lgamma_integer((int)((1.0F) + x))))); 
#line 497
if ((z < t) && (v >= (9.999999999999999452e-21))) { 
#line 498
break; }  
#line 499
}  
#line 500
(result.x) = ((unsigned)x); 
#line 502
while (true) { 
#line 503
y = curand_uniform(state); 
#line 504
x = __cr_pgammaincinv(lambda, y); 
#line 505
x = floorf(x); 
#line 506
z = curand_uniform(state); 
#line 507
v = ((__cr_pgammainc(lambda, x + (1.0F)) - __cr_pgammainc(lambda, x)) * (1.299999952F)); 
#line 508
z = (z * v); 
#line 509
t = ((float)__cr_exp(((-lambda) + (x * logl)) - ((float)__cr_lgamma_integer((int)((1.0F) + x))))); 
#line 510
if ((z < t) && (v >= (9.999999999999999452e-21))) { 
#line 511
break; }  
#line 512
}  
#line 513
(result.y) = ((unsigned)x); 
#line 515
while (true) { 
#line 516
y = curand_uniform(state); 
#line 517
x = __cr_pgammaincinv(lambda, y); 
#line 518
x = floorf(x); 
#line 519
z = curand_uniform(state); 
#line 520
v = ((__cr_pgammainc(lambda, x + (1.0F)) - __cr_pgammainc(lambda, x)) * (1.299999952F)); 
#line 521
z = (z * v); 
#line 522
t = ((float)__cr_exp(((-lambda) + (x * logl)) - ((float)__cr_lgamma_integer((int)((1.0F) + x))))); 
#line 523
if ((z < t) && (v >= (9.999999999999999452e-21))) { 
#line 524
break; }  
#line 525
}  
#line 526
(result.z) = ((unsigned)x); 
#line 528
while (true) { 
#line 529
y = curand_uniform(state); 
#line 530
x = __cr_pgammaincinv(lambda, y); 
#line 531
x = floorf(x); 
#line 532
z = curand_uniform(state); 
#line 533
v = ((__cr_pgammainc(lambda, x + (1.0F)) - __cr_pgammainc(lambda, x)) * (1.299999952F)); 
#line 534
z = (z * v); 
#line 535
t = ((float)__cr_exp(((-lambda) + (x * logl)) - ((float)__cr_lgamma_integer((int)((1.0F) + x))))); 
#line 536
if ((z < t) && (v >= (9.999999999999999452e-21))) { 
#line 537
break; }  
#line 538
}  
#line 539
(result.w) = ((unsigned)x); 
#line 541
return result; 
#line 542
} 
#endif
#line 546 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\curand_poisson.h"
template< class T> static __forceinline unsigned 
#line 547
_curand_poisson(T x, double lambda) {int volatile ___ = 1;(void)x;(void)lambda;::exit(___);}
#if 0
#line 548
{ 
#line 549
if (lambda < (1000)) { 
#line 550
return _curand_poisson_ITR_double(x, lambda); }  
#line 551
return (unsigned)(((sqrt(lambda) * _curand_normal_icdf_double(x)) + lambda) + (0.5)); 
#line 552
} 
#endif
#line 554 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\curand_poisson.h"
template< class T> static __forceinline unsigned 
#line 555
_curand_poisson_from_normal(T x, double lambda) {int volatile ___ = 1;(void)x;(void)lambda;::exit(___);}
#if 0
#line 556
{ 
#line 557
return (unsigned)(((sqrt(lambda) * _curand_normal_icdf(x)) + lambda) + (0.5)); 
#line 558
} 
#endif
#line 560 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\curand_poisson.h"
template< class STATE> static __forceinline unsigned 
#line 561
curand_poisson_from_normal(STATE state, double lambda) {int volatile ___ = 1;(void)state;(void)lambda;::exit(___);}
#if 0
#line 562
{ 
#line 563
return (unsigned)(((sqrt(lambda) * curand_normal(state)) + lambda) + (0.5)); 
#line 564
} 
#endif
#line 566 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\curand_poisson.h"
template< class STATE> static __forceinline ::uint4 
#line 567
curand_poisson_from_normal4(STATE state, double lambda) {int volatile ___ = 1;(void)state;(void)lambda;::exit(___);}
#if 0
#line 568
{ 
#line 569
::uint4 result; 
#line 570
::float4 _res; 
#line 572
_res = curand_normal4(state); 
#line 574
(result.x) = ((unsigned)(((sqrt(lambda) * (_res.x)) + lambda) + (0.5))); 
#line 575
(result.y) = ((unsigned)(((sqrt(lambda) * (_res.y)) + lambda) + (0.5))); 
#line 576
(result.z) = ((unsigned)(((sqrt(lambda) * (_res.z)) + lambda) + (0.5))); 
#line 577
(result.w) = ((unsigned)(((sqrt(lambda) * (_res.w)) + lambda) + (0.5))); 
#line 578
return result; 
#line 579
} 
#endif
#line 594 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\curand_poisson.h"
static __forceinline unsigned curand_poisson(curandStateXORWOW_t *state, double lambda) {int volatile ___ = 1;(void)state;(void)lambda;::exit(___);}
#if 0
#line 595
{ 
#line 596
if (lambda < (64)) { 
#line 597
return curand_poisson_knuth(state, (float)lambda); }  
#line 598
if (lambda > (4000)) { 
#line 599
return (unsigned)(((sqrt(lambda) * curand_normal_double(state)) + lambda) + (0.5)); }  
#line 600
return curand_poisson_gammainc(state, (float)lambda); 
#line 601
} 
#endif
#line 616 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\curand_poisson.h"
static __forceinline unsigned curand_poisson(curandStatePhilox4_32_10_t *state, double lambda) {int volatile ___ = 1;(void)state;(void)lambda;::exit(___);}
#if 0
#line 617
{ 
#line 618
if (lambda < (64)) { 
#line 619
return curand_poisson_knuth(state, (float)lambda); }  
#line 620
if (lambda > (4000)) { 
#line 621
return (unsigned)(((sqrt(lambda) * curand_normal_double(state)) + lambda) + (0.5)); }  
#line 622
return curand_poisson_gammainc(state, (float)lambda); 
#line 623
} 
#endif
#line 637 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\curand_poisson.h"
static __forceinline uint4 curand_poisson4(curandStatePhilox4_32_10_t *state, double lambda) {int volatile ___ = 1;(void)state;(void)lambda;::exit(___);}
#if 0
#line 638
{ 
#line 639
uint4 result; 
#line 640
double4 _res; 
#line 641
if (lambda < (64)) { 
#line 642
return curand_poisson_knuth4(state, (float)lambda); }  
#line 643
if (lambda > (4000)) { 
#line 644
_res = curand_normal4_double(state); 
#line 645
(result.x) = ((unsigned)(((sqrt(lambda) * (_res.x)) + lambda) + (0.5))); 
#line 646
(result.y) = ((unsigned)(((sqrt(lambda) * (_res.y)) + lambda) + (0.5))); 
#line 647
(result.z) = ((unsigned)(((sqrt(lambda) * (_res.z)) + lambda) + (0.5))); 
#line 648
(result.w) = ((unsigned)(((sqrt(lambda) * (_res.w)) + lambda) + (0.5))); 
#line 649
return result; 
#line 650
}  
#line 651
return curand_poisson_gammainc4(state, (float)lambda); 
#line 652
} 
#endif
#line 669 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\curand_poisson.h"
static __forceinline unsigned curand_poisson(curandStateMRG32k3a_t *state, double lambda) {int volatile ___ = 1;(void)state;(void)lambda;::exit(___);}
#if 0
#line 670
{ 
#line 671
if (lambda < (64)) { 
#line 672
return curand_poisson_knuth(state, (float)lambda); }  
#line 673
if (lambda > (4000)) { 
#line 674
return (unsigned)(((sqrt(lambda) * curand_normal_double(state)) + lambda) + (0.5)); }  
#line 675
return curand_poisson_gammainc(state, (float)lambda); 
#line 676
} 
#endif
#line 690 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\curand_poisson.h"
static __forceinline unsigned curand_poisson(curandStateMtgp32_t *state, double lambda) {int volatile ___ = 1;(void)state;(void)lambda;::exit(___);}
#if 0
#line 691
{ 
#line 692
return _curand_poisson(curand(state), lambda); 
#line 693
} 
#endif
#line 708 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\curand_poisson.h"
static __forceinline unsigned curand_poisson(curandStateSobol32_t *state, double lambda) {int volatile ___ = 1;(void)state;(void)lambda;::exit(___);}
#if 0
#line 709
{ 
#line 710
return _curand_poisson(curand(state), lambda); 
#line 711
} 
#endif
#line 725 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\curand_poisson.h"
static __forceinline unsigned curand_poisson(curandStateScrambledSobol32_t *state, double lambda) {int volatile ___ = 1;(void)state;(void)lambda;::exit(___);}
#if 0
#line 726
{ 
#line 727
return _curand_poisson(curand(state), lambda); 
#line 728
} 
#endif
#line 742 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\curand_poisson.h"
static __forceinline unsigned curand_poisson(curandStateSobol64_t *state, double lambda) {int volatile ___ = 1;(void)state;(void)lambda;::exit(___);}
#if 0
#line 743
{ 
#line 744
return _curand_poisson(curand(state), lambda); 
#line 745
} 
#endif
#line 759 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\curand_poisson.h"
static __forceinline unsigned curand_poisson(curandStateScrambledSobol64_t *state, double lambda) {int volatile ___ = 1;(void)state;(void)lambda;::exit(___);}
#if 0
#line 760
{ 
#line 761
return _curand_poisson(curand(state), lambda); 
#line 762
} 
#endif
#line 69 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\curand_discrete2.h"
template< class T> static __forceinline unsigned 
#line 70
_curand_discrete(T x, ::curandDiscreteDistribution_t discrete_distribution) {int volatile ___ = 1;(void)x;(void)discrete_distribution;::exit(___);}
#if 0
#line 70
{ 
#line 71
if ((discrete_distribution->method) == (CURAND_M2)) { 
#line 72
return _curand_M2_double(x, discrete_distribution->M2); 
#line 73
}  
#line 74
return (unsigned)((((discrete_distribution->stddev) * _curand_normal_icdf_double(x)) + (discrete_distribution->mean)) + (0.5)); 
#line 75
} 
#endif
#line 78 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\curand_discrete2.h"
template< class STATE> static __forceinline unsigned 
#line 79
curand__discrete(STATE state, ::curandDiscreteDistribution_t discrete_distribution) {int volatile ___ = 1;(void)state;(void)discrete_distribution;::exit(___);}
#if 0
#line 79
{ 
#line 80
if ((discrete_distribution->method) == (CURAND_M2)) { 
#line 81
return curand_M2_double(state, discrete_distribution->M2); 
#line 82
}  
#line 83
return (unsigned)((((discrete_distribution->stddev) * curand_normal_double(state)) + (discrete_distribution->mean)) + (0.5)); 
#line 84
} 
#endif
#line 86 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\curand_discrete2.h"
template< class STATE> static __forceinline ::uint4 
#line 87
curand__discrete4(STATE state, ::curandDiscreteDistribution_t discrete_distribution) {int volatile ___ = 1;(void)state;(void)discrete_distribution;::exit(___);}
#if 0
#line 87
{ 
#line 88
if ((discrete_distribution->method) == (CURAND_M2)) { 
#line 89
return curand_M2_double4(state, discrete_distribution->M2); 
#line 90
}  
#line 91
::double4 _res; 
#line 92
::uint4 result; 
#line 93
_res = curand_normal4_double(state); 
#line 94
(result.x) = ((unsigned)((((discrete_distribution->stddev) * (_res.x)) + (discrete_distribution->mean)) + (0.5))); 
#line 95
(result.y) = ((unsigned)((((discrete_distribution->stddev) * (_res.y)) + (discrete_distribution->mean)) + (0.5))); 
#line 96
(result.z) = ((unsigned)((((discrete_distribution->stddev) * (_res.z)) + (discrete_distribution->mean)) + (0.5))); 
#line 97
(result.w) = ((unsigned)((((discrete_distribution->stddev) * (_res.w)) + (discrete_distribution->mean)) + (0.5))); 
#line 98
return result; 
#line 99
} 
#endif
#line 113 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\curand_discrete2.h"
static __forceinline unsigned curand_discrete(curandStateXORWOW_t *state, curandDiscreteDistribution_t discrete_distribution) {int volatile ___ = 1;(void)state;(void)discrete_distribution;::exit(___);}
#if 0
#line 114
{ 
#line 115
return curand__discrete(state, discrete_distribution); 
#line 116
} 
#endif
#line 130 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\curand_discrete2.h"
static __forceinline unsigned curand_discrete(curandStatePhilox4_32_10_t *state, curandDiscreteDistribution_t discrete_distribution) {int volatile ___ = 1;(void)state;(void)discrete_distribution;::exit(___);}
#if 0
#line 131
{ 
#line 132
return curand__discrete(state, discrete_distribution); 
#line 133
} 
#endif
#line 147 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\curand_discrete2.h"
static __forceinline uint4 curand_discrete4(curandStatePhilox4_32_10_t *state, curandDiscreteDistribution_t discrete_distribution) {int volatile ___ = 1;(void)state;(void)discrete_distribution;::exit(___);}
#if 0
#line 148
{ 
#line 149
return curand__discrete4(state, discrete_distribution); 
#line 150
} 
#endif
#line 163 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\curand_discrete2.h"
static __forceinline unsigned curand_discrete(curandStateMRG32k3a_t *state, curandDiscreteDistribution_t discrete_distribution) {int volatile ___ = 1;(void)state;(void)discrete_distribution;::exit(___);}
#if 0
#line 164
{ 
#line 165
return curand__discrete(state, discrete_distribution); 
#line 166
} 
#endif
#line 180 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\curand_discrete2.h"
static __forceinline unsigned curand_discrete(curandStateMtgp32_t *state, curandDiscreteDistribution_t discrete_distribution) {int volatile ___ = 1;(void)state;(void)discrete_distribution;::exit(___);}
#if 0
#line 181
{ 
#line 182
return curand__discrete(state, discrete_distribution); 
#line 183
} 
#endif
#line 197 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\curand_discrete2.h"
static __forceinline unsigned curand_discrete(curandStateSobol32_t *state, curandDiscreteDistribution_t discrete_distribution) {int volatile ___ = 1;(void)state;(void)discrete_distribution;::exit(___);}
#if 0
#line 198
{ 
#line 199
return curand__discrete(state, discrete_distribution); 
#line 200
} 
#endif
#line 214 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\curand_discrete2.h"
static __forceinline unsigned curand_discrete(curandStateScrambledSobol32_t *state, curandDiscreteDistribution_t discrete_distribution) {int volatile ___ = 1;(void)state;(void)discrete_distribution;::exit(___);}
#if 0
#line 215
{ 
#line 216
return curand__discrete(state, discrete_distribution); 
#line 217
} 
#endif
#line 231 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\curand_discrete2.h"
static __forceinline unsigned curand_discrete(curandStateSobol64_t *state, curandDiscreteDistribution_t discrete_distribution) {int volatile ___ = 1;(void)state;(void)discrete_distribution;::exit(___);}
#if 0
#line 232
{ 
#line 233
return curand__discrete(state, discrete_distribution); 
#line 234
} 
#endif
#line 248 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\curand_discrete2.h"
static __forceinline unsigned curand_discrete(curandStateScrambledSobol64_t *state, curandDiscreteDistribution_t discrete_distribution) {int volatile ___ = 1;(void)state;(void)discrete_distribution;::exit(___);}
#if 0
#line 249
{ 
#line 250
return curand__discrete(state, discrete_distribution); 
#line 251
} 
#endif
#line 1599 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\curand_kernel.h"
static inline unsigned *__get_precalculated_matrix(int n) {int volatile ___ = 1;(void)n;::exit(___);}
#if 0
#line 1600
{ 
#line 1601
if (n == 0) { 
#line 1602
return precalc_xorwow_matrix[n]; 
#line 1603
}  
#line 1604
if (n == 2) { 
#line 1605
return precalc_xorwow_offset_matrix[n]; 
#line 1606
}  
#line 1607
return precalc_xorwow_matrix[n]; 
#line 1608
} 
#endif
#line 1611 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\curand_kernel.h"
static inline unsigned *__get_precalculated_matrix_host(int n) 
#line 1612
{ 
#line 1613
if (n == 1) { 
#line 1614
return precalc_xorwow_matrix_host[n]; 
#line 1615
}  
#line 1616
if (n == 3) { 
#line 1617
return precalc_xorwow_offset_matrix_host[n]; 
#line 1618
}  
#line 1619
return precalc_xorwow_matrix_host[n]; 
#line 1620
} 
#line 1623 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\curand_kernel.h"
static inline unsigned *__get_mrg32k3a_matrix(int n) {int volatile ___ = 1;(void)n;::exit(___);}
#if 0
#line 1624
{ 
#line 1625
if (n == 0) { 
#line 1626
return (mrg32k3aM1[n])[0]; 
#line 1627
}  
#line 1628
if (n == 2) { 
#line 1629
return (mrg32k3aM2[n])[0]; 
#line 1630
}  
#line 1631
if (n == 4) { 
#line 1632
return (mrg32k3aM1SubSeq[n])[0]; 
#line 1633
}  
#line 1634
if (n == 6) { 
#line 1635
return (mrg32k3aM2SubSeq[n])[0]; 
#line 1636
}  
#line 1637
if (n == 8) { 
#line 1638
return (mrg32k3aM1Seq[n])[0]; 
#line 1639
}  
#line 1640
if (n == 10) { 
#line 1641
return (mrg32k3aM2Seq[n])[0]; 
#line 1642
}  
#line 1643
return (mrg32k3aM1[n])[0]; 
#line 1644
} 
#endif
#line 1647 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include\\curand_kernel.h"
static inline unsigned *__get_mrg32k3a_matrix_host(int n) 
#line 1648
{ 
#line 1649
if (n == 1) { 
#line 1650
return (mrg32k3aM1Host[n])[0]; 
#line 1651
}  
#line 1652
if (n == 3) { 
#line 1653
return (mrg32k3aM2Host[n])[0]; 
#line 1654
}  
#line 1655
if (n == 5) { 
#line 1656
return (mrg32k3aM1SubSeqHost[n])[0]; 
#line 1657
}  
#line 1658
if (n == 7) { 
#line 1659
return (mrg32k3aM2SubSeqHost[n])[0]; 
#line 1660
}  
#line 1661
if (n == 9) { 
#line 1662
return (mrg32k3aM1SeqHost[n])[0]; 
#line 1663
}  
#line 1664
if (n == 11) { 
#line 1665
return (mrg32k3aM2SeqHost[n])[0]; 
#line 1666
}  
#line 1667
return (mrg32k3aM1Host[n])[0]; 
#line 1668
} 
#line 1670
static inline double *__get__cr_lgamma_table_host() { 
#line 1671
return __cr_lgamma_table; 
#line 1672
} 
#line 17 "D:\\Projekty\\RayTracer\\main.cu"
void check_cuda(cudaError_t result, const char *const func, const char *const file, const int line) 
#line 18
{ 
#line 19
if (result) 
#line 20
{ 
#line 22
(((((((((((((((((((((std::cerr << ("CUDA error = "))) << (static_cast< unsigned>(result)))) << (" at "))) << file)) << (":"))) << line)) << (" \'"))) << func)) << ("\' \n"))) << (cudaGetErrorString(result)))) << ("\n")); 
#line 28
cudaDeviceReset(); 
#line 29
exit(1); 
#line 30
}  
#line 31
} 
#line 10 "D:\\Projekty\\RayTracer\\vec3.h"
class vec3 { 
#line 15
public: vec3() { } 
#line 16
vec3(float e0, float e1, float e2) { ((e)[0]) = e0; ((e)[1]) = e1; ((e)[2]) = e2; } 
#line 17
float x() const { return (e)[0]; } 
#line 18
float y() const { return (e)[1]; } 
#line 19
float z() const { return (e)[2]; } 
#line 21
const vec3 &operator+() const { return *this; } 
#line 22
vec3 operator-() const { return vec3(-((e)[0]), -((e)[1]), -((e)[2])); } 
#line 23
float operator[](int i) const { return (e)[i]; } 
#line 24
float &operator[](int i) { return (e)[i]; } 
#line 26
inline vec3 &operator+=(const vec3 & v2); 
#line 27
inline vec3 &operator-=(const vec3 & v2); 
#line 28
inline vec3 &operator*=(const vec3 & v2); 
#line 29
inline vec3 &operator/=(const vec3 & v2); 
#line 30
inline vec3 &operator*=(const float t); 
#line 31
inline vec3 &operator/=(const float t); 
#line 33
void v3sqrt() { ((e)[0]) = sqrt((e)[0]); ((e)[1]) = sqrt((e)[1]); ((e)[2]) = sqrt((e)[2]); } 
#line 35
inline float dot(const vec3 & v1, const vec3 & v2); 
#line 36
inline vec3 cross(const vec3 & v1, const vec3 & v2); 
#line 38
float length() const { return sqrt(((((e)[0]) * ((e)[0])) + (((e)[1]) * ((e)[1]))) + (((e)[2]) * ((e)[2]))); } 
#line 39
float lengthSquared() const { return ((((e)[0]) * ((e)[0])) + (((e)[1]) * ((e)[1]))) + (((e)[2]) * ((e)[2])); } 
#line 40
inline void make_unit_vector(); 
#line 42
static inline vec3 randomVecInCube(curandState localState); 
#line 43
static inline vec3 randomVecInSphere(curandState localState); 
#line 44
static inline vec3 randomVecInHalfSphere(const vec3 normal, curandState localState); 
#line 46
float e[3]; 
#line 47
}; 
#line 51
inline float dot(const vec3 &v1, const vec3 &v2) 
#line 52
{ 
#line 53
return ((((v1.e)[0]) * ((v2.e)[0])) + (((v1.e)[1]) * ((v2.e)[1]))) + (((v1.e)[2]) * ((v2.e)[2])); 
#line 54
} 
#line 57
inline vec3 cross(const vec3 &v1, const vec3 &v2) 
#line 58
{ 
#line 59
return vec3((((v1.e)[1]) * ((v2.e)[2])) - (((v1.e)[2]) * ((v2.e)[1])), -((((v1.e)[0]) * ((v2.e)[2])) - (((v1.e)[2]) * ((v2.e)[0]))), (((v1.e)[0]) * ((v2.e)[1])) - (((v1.e)[1]) * ((v2.e)[0]))); 
#line 62
} 
#line 64
inline void vec3::make_unit_vector() 
#line 65
{ 
#line 66
float k = (1.0) / (sqrt(((((e)[0]) * ((e)[0])) + (((e)[1]) * ((e)[1]))) + (((e)[2]) * ((e)[2])))); 
#line 67
((e)[0]) *= k; ((e)[1]) *= k; ((e)[2]) *= k; 
#line 68
} 
#line 70
static inline vec3 randomVecInCube(curandState localState) {int volatile ___ = 1;(void)localState;::exit(___);}
#if 0
#line 71
{ 
#line 72
return vec3(curand_uniform(&localState), curand_uniform(&localState), curand_uniform(&localState)); 
#line 73
} 
#endif
#line 75 "D:\\Projekty\\RayTracer\\vec3.h"
static inline vec3 randomVecInSphere(curandState localState) {int volatile ___ = 1;(void)localState;::exit(___);}
#if 0
#line 76
{ 
#line 77
vec3 cube = randomVecInCube(localState); 
#line 78
(cube /= (cube.length())); 
#line 79
return cube; 
#line 80
} 
#endif
#line 82 "D:\\Projekty\\RayTracer\\vec3.h"
static inline vec3 randomVecInHalfSphere(const vec3 normal, curandState localState) {int volatile ___ = 1;(void)normal;(void)localState;::exit(___);}
#if 0
#line 83
{ 
#line 84
vec3 sphereVec = randomVecInSphere(localState); 
#line 86
return ((dot(sphereVec, normal)) > (0.0)) ? sphereVec : ((-sphereVec)); 
#line 87
} 
#endif
#line 89 "D:\\Projekty\\RayTracer\\vec3.h"
inline vec3 operator+(const vec3 &v1, const vec3 &v2) 
#line 90
{ 
#line 91
return vec3(((v1.e)[0]) + ((v2.e)[0]), ((v1.e)[1]) + ((v2.e)[1]), ((v1.e)[2]) + ((v2.e)[2])); 
#line 92
} 
#line 94
inline vec3 operator-(const vec3 &v1, const vec3 &v2) 
#line 95
{ 
#line 96
return vec3(((v1.e)[0]) - ((v2.e)[0]), ((v1.e)[1]) - ((v2.e)[1]), ((v1.e)[2]) - ((v2.e)[2])); 
#line 97
} 
#line 99
inline vec3 operator*(const vec3 &v1, const vec3 &v2) 
#line 100
{ 
#line 101
return vec3(((v1.e)[0]) * ((v2.e)[0]), ((v1.e)[1]) * ((v2.e)[1]), ((v1.e)[2]) * ((v2.e)[2])); 
#line 102
} 
#line 104
inline vec3 operator/(const vec3 &v1, const vec3 &v2) 
#line 105
{ 
#line 106
return vec3(((v1.e)[0]) / ((v2.e)[0]), ((v1.e)[1]) / ((v2.e)[1]), ((v1.e)[2]) / ((v2.e)[2])); 
#line 107
} 
#line 109
inline vec3 operator*(float t, const vec3 &v) 
#line 110
{ 
#line 111
return vec3(t * ((v.e)[0]), t * ((v.e)[1]), t * ((v.e)[2])); 
#line 112
} 
#line 114
inline vec3 operator/(vec3 v, float t) 
#line 115
{ 
#line 116
return vec3(((v.e)[0]) / t, ((v.e)[1]) / t, ((v.e)[2]) / t); 
#line 117
} 
#line 119
inline vec3 operator*(const vec3 &v, float t) 
#line 120
{ 
#line 121
return vec3(t * ((v.e)[0]), t * ((v.e)[1]), t * ((v.e)[2])); 
#line 122
} 
#line 124
inline vec3 &vec3::operator+=(const vec3 &v) 
#line 125
{ 
#line 126
((e)[0]) += ((v.e)[0]); 
#line 127
((e)[1]) += ((v.e)[1]); 
#line 128
((e)[2]) += ((v.e)[2]); 
#line 129
return *this; 
#line 130
} 
#line 132
inline vec3 &vec3::operator*=(const vec3 &v) { 
#line 133
((e)[0]) *= ((v.e)[0]); 
#line 134
((e)[1]) *= ((v.e)[1]); 
#line 135
((e)[2]) *= ((v.e)[2]); 
#line 136
return *this; 
#line 137
} 
#line 139
inline vec3 &vec3::operator/=(const vec3 &v) { 
#line 140
((e)[0]) /= ((v.e)[0]); 
#line 141
((e)[1]) /= ((v.e)[1]); 
#line 142
((e)[2]) /= ((v.e)[2]); 
#line 143
return *this; 
#line 144
} 
#line 146
inline vec3 &vec3::operator-=(const vec3 &v) { 
#line 147
((e)[0]) -= ((v.e)[0]); 
#line 148
((e)[1]) -= ((v.e)[1]); 
#line 149
((e)[2]) -= ((v.e)[2]); 
#line 150
return *this; 
#line 151
} 
#line 153
inline vec3 &vec3::operator*=(const float t) { 
#line 154
((e)[0]) *= t; 
#line 155
((e)[1]) *= t; 
#line 156
((e)[2]) *= t; 
#line 157
return *this; 
#line 158
} 
#line 160
inline vec3 &vec3::operator/=(const float t) { 
#line 161
float k = (1.0) / t; 
#line 163
((e)[0]) *= k; 
#line 164
((e)[1]) *= k; 
#line 165
((e)[2]) *= k; 
#line 166
return *this; 
#line 167
} 
#line 169
inline vec3 unit_vector(vec3 v) 
#line 170
{ 
#line 171
return (v / (v.length())); 
#line 172
} 
#line 6 "D:\\Projekty\\RayTracer\\ray.h"
class ray { 
#line 9
public: ray() { } 
#line 11
ray(const vec3 &origin, const vec3 &dir) { (_origin) = origin; (_dir) = dir; } 
#line 12
vec3 origin() const { return _origin; } 
#line 13
vec3 direction() const { return _dir; } 
#line 15
vec3 at(float t) const { return ((_origin) + ((t * (_dir)))); } 
#line 18
private: vec3 _origin; 
#line 19
vec3 _dir; 
#line 20
}; 
#line 6 "D:\\Projekty\\RayTracer\\rayHittable.h"
class material; 
#line 8
struct hitInfo { 
#line 10
vec3 point; 
#line 11
vec3 normal; 
#line 12
double t; 
#line 13
material *matPtr; 
#line 14
}; 
#line 16
class rayHittable { 
#line 19
public: virtual bool hit(const ray & r, double tMin, double tMax, hitInfo & hit) const = 0; 
#line 20
}; 
#line 7 "D:\\Projekty\\RayTracer\\scene.h"
class scene : public rayHittable { 
#line 10
public: scene() {int *volatile ___ = 0;::free(___);}
#if 0
#line 10
{ } 
#endif
#line 11 "D:\\Projekty\\RayTracer\\scene.h"
scene(rayHittable **objects, int n) {int *volatile ___ = 0;(void)objects;(void)n;::free(___);}
#if 0
#line 11
{ (objectList) = objects; (objectCount) = n; } 
#endif
#line 13 "D:\\Projekty\\RayTracer\\scene.h"
virtual bool hit(const ray & r, double tMin, double tMax, hitInfo & info) const override; 
#line 16
private: rayHittable **objectList; 
#line 17
int objectCount; 
#line 18
}; 
#line 21
bool scene::hit(const ray &r, double tMin, double tMax, hitInfo &info) const {int volatile ___ = 1;(void)r;(void)tMin;(void)tMax;(void)info;::exit(___);}
#if 0
#line 22
{ 
#line 23
hitInfo tempInfo; 
#line 24
bool hitAnything = false; 
#line 25
float closest = tMax; 
#line 27
for (int i = 0; i < (objectCount); i++) { 
#line 28
if (((objectList)[i])->hit(r, tMin, closest, tempInfo)) { 
#line 29
hitAnything = true; 
#line 30
closest = (tempInfo.t); 
#line 31
info = tempInfo; 
#line 32
}  
#line 33
}  
#line 34
return hitAnything; 
#line 35
} 
#endif
#line 8 "D:\\Projekty\\RayTracer\\material.h"
vec3 reflect(const vec3 &v, const vec3 &n) {int volatile ___ = 1;(void)v;(void)n;::exit(___);}
#if 0
#line 9
{ 
#line 10
return (v - ((((2.0F) * dot(v, n)) * n))); 
#line 11
} 
#endif
#line 13 "D:\\Projekty\\RayTracer\\material.h"
class material { 
#line 16
public: virtual bool scatter(const ray & inputRay, const hitInfo & hit, vec3 & attenuation, ray & scattered, curandState localState) const = 0; 
#line 17
}; 
#line 19
class lambertian : public material { 
#line 22
public: lambertian(const vec3 &a) : albedo(a) {int *volatile ___ = 0;(void)a;::free(___);}
#if 0
#line 22
{ } 
#endif
#line 23 "D:\\Projekty\\RayTracer\\material.h"
virtual bool scatter(const ray &inputRay, const hitInfo &hit, vec3 &attenuation, ray &scattered, curandState localState) const {int volatile ___ = 1;(void)inputRay;(void)hit;(void)attenuation;(void)scattered;(void)localState;::exit(___);}
#if 0
#line 24
{ 
#line 28
vec3 target = ((((hit.point) + (hit.normal))) + (randomVecInHalfSphere(hit.normal, localState))); 
#line 30 "D:\\Projekty\\RayTracer\\material.h"
scattered = ray(hit.point, (target - (hit.point))); 
#line 31
attenuation = (albedo); 
#line 32
return true; 
#line 33
} 
#endif
#line 35 "D:\\Projekty\\RayTracer\\material.h"
vec3 albedo; 
#line 36
}; 
#line 38
class metal : public material { 
#line 41
public: metal(const vec3 &a, float f) : albedo(a) {int *volatile ___ = 0;(void)a;(void)f;::free(___);}
#if 0
#line 41
{ if (f < (1)) { (fuzz) = f; } else { (fuzz) = (1); }  } 
#endif
#line 42 "D:\\Projekty\\RayTracer\\material.h"
virtual bool scatter(const ray &inputRay, const hitInfo &hit, vec3 &attenuation, ray &scattered, curandState localState) const {int volatile ___ = 1;(void)inputRay;(void)hit;(void)attenuation;(void)scattered;(void)localState;::exit(___);}
#if 0
#line 43
{ 
#line 44
vec3 reflected = reflect(unit_vector(inputRay.direction()), hit.normal); 
#line 48
scattered = ray(hit.point, (reflected + (((fuzz) * (randomVecInHalfSphere(hit.normal, localState)))))); 
#line 50 "D:\\Projekty\\RayTracer\\material.h"
attenuation = (albedo); 
#line 51
return (dot(scattered.direction(), hit.normal) > (0.0F)); 
#line 52
} 
#endif
#line 53 "D:\\Projekty\\RayTracer\\material.h"
vec3 albedo; 
#line 54
float fuzz; 
#line 55
}; 
#line 8 "D:\\Projekty\\RayTracer\\sphere.h"
class sphere : public rayHittable { 
#line 11
public: sphere() {int *volatile ___ = 0;::free(___);}
#if 0
#line 11
{ } 
#endif
#line 12 "D:\\Projekty\\RayTracer\\sphere.h"
sphere(vec3 c, double r, material *mat) : center(c), radius(r), matPtr(mat) {int *volatile ___ = 0;(void)c;(void)r;(void)mat;::free(___);}
#if 0
#line 12
{ } 
#endif
#line 14 "D:\\Projekty\\RayTracer\\sphere.h"
virtual bool hit(const ray & r, double tMin, double tMax, hitInfo & hit) const override; 
#line 17
private: vec3 center; 
#line 18
double radius; 
#line 19
material *matPtr; 
#line 20
}; 
#line 23
bool sphere::hit(const ray &r, double tMin, double tMax, hitInfo &hit) const {int volatile ___ = 1;(void)r;(void)tMin;(void)tMax;(void)hit;::exit(___);}
#if 0
#line 24
{ 
#line 25
vec3 oc = ((r.origin()) - (center)); 
#line 26
float a = r.direction().lengthSquared(); 
#line 27
float halfB = dot(oc, r.direction()); 
#line 28
float c = (oc.lengthSquared()) - ((radius) * (radius)); 
#line 30
float discriminant = (halfB * halfB) - (a * c); 
#line 31
if (discriminant < (0)) { return false; }  
#line 33
float sqrdDisc = sqrt(discriminant); 
#line 35
float root = ((-halfB) - sqrdDisc) / a; 
#line 36
if ((root < tMin) || (tMax < root)) 
#line 37
{ 
#line 38
root = (((-halfB) + sqrdDisc) / a); 
#line 39
if ((root < tMin) || (tMax < root)) { 
#line 40
return false; }  
#line 41
}  
#line 43
(hit.t) = root; 
#line 44
(hit.point) = r.at(hit.t); 
#line 45
vec3 outNormal = ((((hit.point) - (center))) / (radius)); 
#line 47
(hit.normal) = ((((hit.point) - (center))) / (radius)); 
#line 48
(hit.matPtr) = (matPtr); 
#line 50
return true; 
#line 51
} 
#endif
#line 6 "D:\\Projekty\\RayTracer\\doubleUtils.h"
inline double randomDouble() 
#line 7
{ 
#line 8
return (rand()) / ((32767) + (1.0)); 
#line 9
} 
#line 11
inline double clamp(double x, double min, double max) 
#line 12
{ 
#line 13
if (x < min) { return min; }  
#line 14
if (x > max) { return max; }  
#line 15
return x; 
#line 16
} 
#line 8 "D:\\Projekty\\RayTracer\\camera.h"
class camera { 
#line 11
public: camera() { } 
#line 13
camera(float width, float height) 
#line 14
{ 
#line 15
float aspectRatio = width / height; 
#line 16
float viewportHeight = ((2.0)); 
#line 17
float viewportWidth = aspectRatio * viewportHeight; 
#line 18
float focalLength = ((1.0)); 
#line 20
(origin) = vec3((0.0), (0.0), (0.0)); 
#line 21
(horizontal) = vec3(viewportWidth, (0.0), (0.0)); 
#line 22
(vertical) = vec3((0.0), viewportHeight, (0.0)); 
#line 23
(lowerLeftCorner) = ((((((origin) - (((horizontal) / (2))))) - (((vertical) / (2))))) - vec3(0, 0, focalLength)); 
#line 24
} 
#line 26
ray getRay(double u, double v) const {int volatile ___ = 1;(void)u;(void)v;::exit(___);}
#if 0
#line 27
{ 
#line 28
return ray(origin, ((((((lowerLeftCorner) + ((u * (horizontal))))) + ((v * (vertical))))) - (origin))); 
#line 29
} 
#endif
#line 32 "D:\\Projekty\\RayTracer\\camera.h"
private: vec3 origin; 
#line 33
vec3 lowerLeftCorner; 
#line 34
vec3 horizontal; 
#line 35
vec3 vertical; 
#line 36
}; 
#line 44 "D:\\Projekty\\RayTracer\\main.cu"
static const int TARGET_FPS = 60; 
#line 45
static const unsigned FPS_DISPLAY_REFRESH_TIME = (500); 
#line 46
static const int SAMPLES_PER_PIXEL = 100; 
#line 47
static const int MAX_DIFFUSE_DEPTH = 20; 
#line 48
static const int SCENE_ELEMENTS = 7; 
#line 53
const int screenWidth = 960; 
#line 54
const int screenHeight = 480; 
#line 56
static camera dCam; 
#line 59
double sphereHitPoint(const vec3 &center, float radius, const ray &r) {int volatile ___ = 1;(void)center;(void)radius;(void)r;::exit(___);}
#if 0
#line 60
{ 
#line 61
vec3 oc = ((r.origin()) - center); 
#line 62
auto a = r.direction().lengthSquared(); 
#line 63
auto half_b = dot(oc, r.direction()); 
#line 64
auto c = oc.lengthSquared() - (radius * radius); 
#line 65
auto discriminant = (half_b * half_b) - (a * c); 
#line 67
if (discriminant < (0)) { return -(1.0); }  
#line 68
return ((-half_b) - sqrt(discriminant)) / a; 
#line 69
} 
#endif
#line 71 "D:\\Projekty\\RayTracer\\main.cu"
vec3 color(const ray &r, scene **dScene, curandState localState) {int volatile ___ = 1;(void)r;(void)dScene;(void)localState;::exit(___);}
#if 0
#line 72
{ 
#line 73
ray currentRay = r; 
#line 74
vec3 currentAttenuation = vec3((1.0), (1.0), (1.0)); 
#line 77
for (int i = 0; i < MAX_DIFFUSE_DEPTH; i++) 
#line 78
{ 
#line 79
hitInfo hit; 
#line 80
if ((*dScene)->hit(currentRay, (0.001000000047F), (float)((1.000000000000000053e+300) * (1.000000000000000053e+300)), hit)) 
#line 81
{ 
#line 82
ray scattered; 
#line 83
vec3 attenuation; 
#line 84
if ((hit.matPtr)->scatter(currentRay, hit, attenuation, scattered, localState)) 
#line 85
{ 
#line 86
(currentAttenuation *= attenuation); 
#line 87
currentRay = scattered; 
#line 88
} else 
#line 90
{ 
#line 91
return vec3((0.0), (0.0), (0.0)); 
#line 92
}  
#line 93
} else 
#line 95
{ 
#line 96
vec3 unit_direction = unit_vector(currentRay.direction()); 
#line 97
float t = (0.5F) * (unit_direction.y() + (1.0F)); 
#line 98
vec3 c = (((((1.0F) - t) * vec3((1.0), (1.0), (1.0)))) + ((t * vec3((0.5), (0.6999999999999999556), (1.0))))); 
#line 99
return (currentAttenuation * c); 
#line 100
}  
#line 101
}  
#line 103
return vec3((0.0), (0.0), (0.0)); 
#line 104
} 
#endif
#line 106 "D:\\Projekty\\RayTracer\\main.cu"
 __noinline__ void createCamera(int width, int height) ;
#if 0
#line 107
{ 
#line 108
if (((__device_builtin_variable_threadIdx.x) == (0)) && ((__device_builtin_variable_blockIdx.x) == (0))) 
#line 109
{ 
#line 110
dCam = camera(width, height); 
#line 111
}  
#line 112
} 
#endif
#line 114 "D:\\Projekty\\RayTracer\\main.cu"
 __noinline__ void setupRNG(curandState *globalState, int seed, int screenWidth) ;
#if 0
#line 115
{ 
#line 116
int i = (__device_builtin_variable_threadIdx.x) + ((__device_builtin_variable_blockIdx.x) * (__device_builtin_variable_blockDim.x)); 
#line 117
int j = (__device_builtin_variable_threadIdx.y) + ((__device_builtin_variable_blockIdx.y) * (__device_builtin_variable_blockDim.y)); 
#line 119
int id = (j * screenWidth) + i; 
#line 120
curand_init(seed, id, 0, &(globalState[id])); 
#line 121
} 
#endif
#line 123 "D:\\Projekty\\RayTracer\\main.cu"
 __noinline__ void createScene(rayHittable **dObjects, scene **dScene) ;
#if 0
#line 124
{ 
#line 125
if (((__device_builtin_variable_threadIdx.x) == (0)) && ((__device_builtin_variable_blockIdx.x) == (0))) 
#line 126
{ 
#line 127
(*dObjects) = (new sphere(vec3(0, 0, -2), (0.5), new lambertian(vec3((0.8000000000000000444), (0.2000000000000000111), (0.2000000000000000111))))); 
#line 128
(*(dObjects + 1)) = (new sphere(vec3(-2, -1, -5), 1, new lambertian(vec3((0.0), (0.8000000000000000444), (0.8000000000000000444))))); 
#line 129
(*(dObjects + 2)) = (new sphere(vec3(0, -(100.5), -1), 100, new lambertian(vec3((0.0), (0.8000000000000000444), (0.0))))); 
#line 130
(*(dObjects + 3)) = (new sphere(vec3((1.5), (0.5), -2), (0.5), new lambertian(vec3(1, 1, 1)))); 
#line 131
(*(dObjects + 4)) = (new sphere(vec3(-(1.5), (0.5), -2), (0.5), new lambertian(vec3(0, 0, 0)))); 
#line 132
(*(dObjects + 5)) = (new sphere(vec3((1.5), 0, -3), (0.5), new metal(vec3(1, 1, 1), 1))); 
#line 133
(*(dObjects + 6)) = (new sphere(vec3(-2, 0, -2), (0.5), new metal(vec3(1, 0, 0), (0.5)))); 
#line 134
(*dScene) = (new scene(dObjects, SCENE_ELEMENTS)); 
#line 135
}  
#line 136
} 
#endif
#line 138 "D:\\Projekty\\RayTracer\\main.cu"
 __noinline__ void render(vec3 *fb, int maxX, int maxY, scene **dScene, curandState *globalState) ;
#if 0
#line 139
{ 
#line 140
int i = (__device_builtin_variable_threadIdx.x) + ((__device_builtin_variable_blockIdx.x) * (__device_builtin_variable_blockDim.x)); 
#line 141
int j = (__device_builtin_variable_threadIdx.y) + ((__device_builtin_variable_blockIdx.y) * (__device_builtin_variable_blockDim.y)); 
#line 143
if ((i >= maxX) || (j >= maxY)) { return; }  
#line 145
int pixelIndex = (j * maxX) + i; 
#line 146
curandState localState = globalState[pixelIndex]; 
#line 147
for (int p = 0; p < SAMPLES_PER_PIXEL; p++) 
#line 148
{ 
#line 149
float u = (((float)i) + curand_uniform(&localState)) / ((float)maxX); 
#line 150
float v = (((float)j) + curand_uniform(&localState)) / ((float)maxY); 
#line 151
ray r = dCam.getRay(u, v); 
#line 155
vec3 clr = color(r, dScene, localState); 
#line 156
clr.v3sqrt(); 
#line 157
((fb[pixelIndex]) += clr); 
#line 159 "D:\\Projekty\\RayTracer\\main.cu"
}  
#line 160
((fb[pixelIndex]) /= SAMPLES_PER_PIXEL); 
#line 161
} 
#endif
#line 163 "D:\\Projekty\\RayTracer\\main.cu"
vec3 *fb; 
#line 165
int lastFrameTime = 0; 
#line 166
int deltaTimes[TARGET_FPS]; 
#line 167
int deltaTimesIndex = 0; 
#line 169
void refreshFrameCallback(int value) 
#line 170
{ 
#line 171
if (glutGetWindow()) 
#line 172
{ 
#line 173
int currentTime = glutGet(700); 
#line 174
int deltaTime = currentTime - lastFrameTime; 
#line 175
lastFrameTime = currentTime; 
#line 176
(deltaTimes[deltaTimesIndex++]) = deltaTime; 
#line 177
if (deltaTimesIndex >= TARGET_FPS) { 
#line 178
deltaTimesIndex = 0; }  
#line 181
glutPostRedisplay(); 
#line 183
glutTimerFunc((unsigned)((1000.0) / TARGET_FPS), refreshFrameCallback, 0); 
#line 184
}  
#line 185
} 
#line 187
void displayFPSCountCallback(int value) 
#line 188
{ 
#line 189
if (glutGetWindow()) 
#line 190
{ 
#line 191
float fpsCount = (0); 
#line 192
int i; 
#line 193
for (i = 0; i < TARGET_FPS; i++) 
#line 194
{ 
#line 195
if ((deltaTimes[i]) == 0) { 
#line 196
break; }  
#line 197
fpsCount += (deltaTimes[i]); 
#line 198
}  
#line 200
fpsCount = ((1000.0) / ((fpsCount / i) + (1))); 
#line 202
char titleBuffer[16]; 
#line 203
sprintf(titleBuffer, "FPS: %3.1f", fpsCount); 
#line 204
glutSetWindowTitle(titleBuffer); 
#line 207
glutTimerFunc(FPS_DISPLAY_REFRESH_TIME, displayFPSCountCallback, 0); 
#line 208
}  
#line 209
} 
#line 211
void draw() 
#line 212
{ 
#line 213
glBegin(0); 
#line 216
glPointSize((1.0)); 
#line 217
for (int y = 0; y < screenHeight; y++) 
#line 218
{ 
#line 219
for (int x = 0; x < screenWidth; x++) 
#line 220
{ 
#line 221
int ind = (y * screenWidth) + x; 
#line 223
glColor3f((fb[ind]).x(), (fb[ind]).y(), (fb[ind]).z()); 
#line 224
glVertex2f(x, y); 
#line 225
}  
#line 226
}  
#line 227
glEnd(); 
#line 228
} 
#line 230
void displayCallback() 
#line 231
{ 
#line 232
glClear(16384); 
#line 233
draw(); 
#line 234
glFlush(); 
#line 235
} 
#line 237
void cleanup() 
#line 238
{ 
#line 239
check_cuda(cudaFree(fb), "cudaFree(fb)", "D:\\Projekty\\RayTracer\\main.cu", 239); 
#line 240
} 
#line 242
void initGL(int argc, char **args) 
#line 243
{ 
#line 244
glutInit_ATEXIT_HACK(&argc, args); 
#line 245
glutInitDisplayMode(0); 
#line 246
glutInitWindowSize(screenWidth, screenHeight); 
#line 247
glutInitWindowPosition(10, 10); 
#line 248
glutCreateWindow_ATEXIT_HACK("OKNO"); 
#line 250
glMatrixMode(5889); 
#line 251
glOrtho(0, screenWidth, 0, screenHeight, -1, 1); 
#line 252
glMatrixMode(5888); 
#line 254
glClearColor((1.0), (0.0), (1.0), (0.0)); 
#line 256
glutDisplayFunc(displayCallback); 
#line 257
glutTimerFunc((unsigned)((1000.0) / TARGET_FPS), refreshFrameCallback, 0); 
#line 258
glutTimerFunc(FPS_DISPLAY_REFRESH_TIME, displayFPSCountCallback, 0); 
#line 259
} 
#line 261
int main(int argc, char **args) 
#line 262
{ 
#line 264
rayHittable **dObjects; 
#line 265
check_cuda(cudaMallocManaged((void **)(&dObjects), SCENE_ELEMENTS * sizeof(rayHittable *)), "cudaMallocManaged((void**)&dObjects, SCENE_ELEMENTS * sizeof(rayHittable*))", "D:\\Projekty\\RayTracer\\main.cu", 265); 
#line 266
scene **dScene; 
#line 267
check_cuda(cudaMallocManaged((void **)(&dScene), sizeof(scene)), "cudaMallocManaged((void**)&dScene, sizeof(scene))", "D:\\Projekty\\RayTracer\\main.cu", 267); 
#line 269
(__cudaPushCallConfiguration(1, 1)) ? (void)0 : createScene(dObjects, dScene); 
#line 270
check_cuda(cudaGetLastError(), "cudaGetLastError()", "D:\\Projekty\\RayTracer\\main.cu", 270); 
#line 271
check_cuda(cudaDeviceSynchronize(), "cudaDeviceSynchronize()", "D:\\Projekty\\RayTracer\\main.cu", 271); 
#line 274
(__cudaPushCallConfiguration(1, 1)) ? (void)0 : createCamera(screenWidth, screenHeight); 
#line 275
check_cuda(cudaGetLastError(), "cudaGetLastError()", "D:\\Projekty\\RayTracer\\main.cu", 275); 
#line 276
check_cuda(cudaDeviceSynchronize(), "cudaDeviceSynchronize()", "D:\\Projekty\\RayTracer\\main.cu", 276); 
#line 278
int numPixels = (screenWidth * screenHeight); 
#line 279
size_t fbSize = numPixels * sizeof(vec3); 
#line 280
check_cuda(cudaMallocManaged(&fb, fbSize), "cudaMallocManaged(&fb, fbSize)", "D:\\Projekty\\RayTracer\\main.cu", 280); 
#line 282
int tx = 8; 
#line 283
int ty = 8; 
#line 284
dim3 blocks((screenWidth / tx) + 1, (screenHeight / ty) + 1); 
#line 285
dim3 threads(tx, ty); 
#line 288
curandState *globalState; 
#line 289
check_cuda(cudaMallocManaged(&globalState, numPixels * sizeof(curandState)), "cudaMallocManaged(&globalState, numPixels * sizeof(curandState))", "D:\\Projekty\\RayTracer\\main.cu", 289); 
#line 290
(__cudaPushCallConfiguration(blocks, threads)) ? (void)0 : setupRNG(globalState, time(0), screenWidth); 
#line 291
check_cuda(cudaGetLastError(), "cudaGetLastError()", "D:\\Projekty\\RayTracer\\main.cu", 291); 
#line 292
check_cuda(cudaDeviceSynchronize(), "cudaDeviceSynchronize()", "D:\\Projekty\\RayTracer\\main.cu", 292); 
#line 296
initGL(argc, args); 
#line 298
(__cudaPushCallConfiguration(blocks, threads)) ? (void)0 : render(fb, screenWidth, screenHeight, dScene, globalState); 
#line 299
check_cuda(cudaGetLastError(), "cudaGetLastError()", "D:\\Projekty\\RayTracer\\main.cu", 299); 
#line 300
check_cuda(cudaDeviceSynchronize(), "cudaDeviceSynchronize()", "D:\\Projekty\\RayTracer\\main.cu", 300); 
#line 302
glutMainLoop(); 
#line 304
return 0; 
#line 305
} 
#line 1 "main.cudafe1.stub.c"
#define _NV_ANON_NAMESPACE _GLOBAL__N__8738ca28_7_main_cu_f8228d08
#ifdef _NV_ANON_NAMESPACE
#endif
#pragma pack()
#line 1 "main.cudafe1.stub.c"
#include "main.cudafe1.stub.c"
#line 1 "main.cudafe1.stub.c"
#undef _NV_ANON_NAMESPACE
